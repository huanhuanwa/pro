"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const select_option_1 = require("./select-option");
const inquirer = __importStar(require("inquirer"));
const input_text_1 = require("./input-text");
const input_number_1 = require("./input-number");
function hookPrompt() {
    let ui = inquirer.ui;
    let Prompt = ui.Prompt;
    let currentRl;
    ui.Prompt = class Hook extends Prompt {
        constructor(...args) {
            super(args[0], args[1]);
            currentRl = this.rl;
        }
    };
    return {
        getCurrentRl: () => {
            return currentRl;
        },
        reset: () => {
            ui.Prompt = Prompt;
        },
    };
}
describe('交互', () => {
    let hookGroup = hookPrompt();
    let rl;
    it('选项', (done) => {
        hookPrompt();
        let result = select_option_1.selectOption([
            { label: 't1', value: 'an1' },
            { label: 't2', value: 'an2' },
        ], '请选择选项');
        result.then((res) => {
            expect(res).toBe('an1');
            done();
            rl.close();
        });
        rl = hookGroup.getCurrentRl();
        rl.emit('line');
    });
    it('输入文本', (done) => {
        let input = 'abcd';
        input_text_1.inputText('输入文本').then((value) => {
            expect(value).toBe(input);
            done();
            rl.close();
        });
        rl = hookGroup.getCurrentRl();
        rl.emit('line', input);
    });
    it('输入文本:验证', (done) => {
        input_text_1.inputText('输入文本:验证', (input, answers) => {
            return input.length < 4;
        }).then((value) => {
            expect(value).toBe('abc');
            done();
            rl.close();
        });
        rl = hookGroup.getCurrentRl();
        rl.emit('line', 'abcd');
        setTimeout(() => {
            rl.emit('line', 'abc');
        }, 0);
    });
    it('输入数字', (done) => {
        let input = 12345;
        input_number_1.inputNumber('输入数字').then((value) => {
            expect(typeof value).toBe('number');
            expect(value).toBe(input);
            done();
        });
        rl = hookGroup.getCurrentRl();
        rl.emit('line', '12345');
        rl.close();
    });
    it('输入非数字', (done) => {
        let input = 'asdf';
        input_number_1.inputNumber('输入数字').then((value) => {
            expect(Number.isNaN(value)).toBeTrue();
            done();
            rl.close();
        });
        rl = hookGroup.getCurrentRl();
        rl.emit('line', input);
    });
    it('输入数字:验证', (done) => {
        let input = 'asdf';
        input_number_1.inputNumber('输入数字:验证', (input, answer) => {
            return !Number.isNaN(input);
        }).then((value) => {
            expect(Number.isNaN(value)).not.toBeTrue();
            done();
            rl.close();
        });
        rl = hookGroup.getCurrentRl();
        rl.emit('line', input);
        setTimeout(() => {
            rl.emit('line', `123456`);
        }, 0);
    });
    afterAll(() => {
        hookGroup.reset();
    });
});

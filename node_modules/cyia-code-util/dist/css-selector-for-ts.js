"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCssSelectorForTs = void 0;
const ts = __importStar(require("typescript"));
const css_what_1 = require("css-what");
function createCssSelectorForTs(sourceFile) {
    return new CssSelectorForTs(sourceFile);
}
exports.createCssSelectorForTs = createCssSelectorForTs;
function findTag(name, node) {
    return ts.SyntaxKind[name] === node.kind;
}
function findAttribute(selector, node) {
    let attrValue = node[selector.name];
    if (attrValue && Number.isInteger(attrValue.kind)) {
        let str;
        try {
            str = attrValue.getText();
            switch (selector.action) {
                case 'equals':
                    return str === selector.value;
                case 'any':
                    return str.includes(selector.value);
                case 'start':
                    return str.startsWith(selector.value);
                case 'end':
                    return str.endsWith(selector.value);
                case 'element':
                    return str.split(' ').includes(selector.value);
                case 'hyphen':
                    return str.split(' ')[0].split('-')[0] === selector.value;
                case 'not':
                    return str !== selector.value;
                case 'exists':
                    return !!attrValue;
                default:
                    return str === selector.value;
            }
        }
        catch (error) { }
    }
}
function findAllWithEachNode(node, fn, multiLevel) {
    let list = [node];
    let result = [];
    while (list.length) {
        let node = list.pop();
        if (fn(node.node)) {
            result.push(node);
        }
        if (multiLevel) {
            list.push(...node.node.getChildren().map((childNode, i) => new NodeContext(childNode, node, i)));
        }
    }
    return result;
}
class CssSelectorForTs {
    constructor(sourceFile) {
        this.sourceFile = sourceFile;
        this.multi = true;
    }
    query(selector) {
        let selectedList = [];
        let result = css_what_1.parse(selector, { lowerCaseAttributeNames: false, lowerCaseTags: false });
        for (let i = 0; i < result.length; i++) {
            this.currentNodeList = [new NodeContext(this.sourceFile, undefined, undefined)];
            const selectorList = result[i];
            for (let j = 0; j < selectorList.length; j++) {
                const selector = selectorList[j];
                if (!this.parse(selector)) {
                    break;
                }
            }
            selectedList.push(...this.currentNodeList.map((node) => node.node));
        }
        return selectedList;
    }
    parse(selector) {
        let list = [];
        switch (selector.type) {
            case 'tag':
                this.currentNodeList.forEach((nodeContext) => {
                    list = list.concat(findAllWithEachNode(nodeContext, (node) => findTag(selector.name, node), this.multi));
                });
                this.currentNodeList = list;
                this.multi = true;
                break;
            // 空格
            case 'descendant':
                this.currentNodeList = [].concat(...this.currentNodeList.map((node) => node.node.getChildren().map((child, i) => new NodeContext(child, node, i))));
                break;
            //+
            case 'adjacent':
                this.currentNodeList = [].concat(this.currentNodeList
                    .map((nodeContext) => new NodeContext(nodeContext.parent.node.getChildren()[nodeContext.index + 1], nodeContext.parent, nodeContext.index + 1))
                    .filter((node) => node.node));
                this.multi = false;
                break;
            // >
            case 'child':
                this.currentNodeList = [].concat(...this.currentNodeList.map((node) => node.node.getChildren().map((child, i) => new NodeContext(child, node, i))));
                this.multi = false;
                break;
            // ~
            case 'sibling':
                this.currentNodeList = [].concat(...this.currentNodeList.map((nodeContent) => nodeContent.parent.node
                    .getChildren()
                    .filter((node, i) => i > nodeContent.index)
                    .map((node, i) => new NodeContext(node, nodeContent.parent, i))));
                this.multi = false;
                break;
            case 'attribute':
                this.currentNodeList.forEach((nodeContext) => {
                    list = list.concat(findAllWithEachNode(nodeContext, (node) => findAttribute(selector, node), this.multi));
                });
                this.currentNodeList = list;
                this.multi = true;
                break;
            default:
                break;
        }
        return !!this.currentNodeList.length;
    }
}
class NodeContext {
    constructor(node, parent, index) {
        this.node = node;
        this.parent = parent;
        this.index = index;
    }
}

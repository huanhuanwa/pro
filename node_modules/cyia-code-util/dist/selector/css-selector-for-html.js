"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CssSelectorForHtml = exports.createCssSelectorForHtml = void 0;
const compiler_1 = require("@angular/compiler");
const css_selector_base_1 = require("./css-selector-base");
function createCssSelectorForHtml(htmlContent) {
    return new CssSelectorForHtml(htmlContent);
}
exports.createCssSelectorForHtml = createCssSelectorForHtml;
class CssSelectorForHtml extends css_selector_base_1.CssSelectorBase {
    constructor(htmlString) {
        super();
        let parser = new compiler_1.HtmlParser();
        let parseTreeResult = parser.parse(htmlString, '');
        if (parseTreeResult.errors && parseTreeResult.errors.length) {
            throw parseTreeResult.errors;
        }
        this.rootNode = new compiler_1.Element('__root', [], parseTreeResult.rootNodes, undefined, undefined);
    }
    getTagAttribute(selector, node) {
        return node.attrs.find((item) => item.name === selector.name);
    }
    findTag(name, node) {
        return name === node.name;
    }
    getChildren(node) {
        return node.children.filter((node) => node instanceof compiler_1.Element);
    }
    findWithEachNode(node, fn, multiLevel) {
        let list = [node];
        let result = [];
        while (list.length) {
            let node = list.pop();
            if (fn(node.node)) {
                result.push(node);
            }
            if (multiLevel) {
                list.push(...this.getChildren(node.node).map((childNode, i) => new css_selector_base_1.NodeContext(childNode, node, i)));
            }
        }
        return result;
    }
}
exports.CssSelectorForHtml = CssSelectorForHtml;

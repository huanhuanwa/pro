import { AttributeSelector, Selector } from 'css-what';
export declare class NodeContext<T> {
    node: T;
    parent: NodeContext<T>;
    index: number;
    constructor(node: T, parent: NodeContext<T>, index: number);
}
export declare abstract class CssSelectorBase<NODE> {
    protected abstract readonly rootNode: NODE;
    private currentNodeList;
    private limit;
    protected abstract getTagAttribute(selector: AttributeSelector, node: NODE): {
        value: string;
    };
    protected abstract findTag(name: string, node: NODE): boolean;
    protected findAttribute(selector: AttributeSelector, node: NODE): boolean;
    protected findWithEachNode(context: NodeContext<NODE>, fn: (node: NODE) => boolean, multi: boolean): NodeContext<NODE>[];
    protected abstract getChildren(node: NODE): NODE[];
    protected getInitQueryNodeContext(node: NODE): () => NodeContext<NODE>[];
    /** @deprecated */
    query(node: NODE, selector: string): NODE[];
    /** @deprecated */
    query(selector: string): NODE[];
    queryAll(node: NODE, selector: string): NODE[];
    queryAll(selector: string): NODE[];
    queryOne(node: NODE, selector: string): NODE;
    queryOne(selector: string): NODE;
    protected parse(selector: Selector): boolean;
}

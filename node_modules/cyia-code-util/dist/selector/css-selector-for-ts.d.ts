import { SourceFile } from 'typescript';
import * as ts from 'typescript';
import { AttributeSelector } from 'css-what';
import { CssSelectorBase, NodeContext } from './css-selector-base';
export interface CssSelectorForTsOptions {
    childrenMode: 'getChildren' | 'forEachChild';
}
export declare function createCssSelectorForTs(sourceFile: SourceFile | string | ts.Node, options?: CssSelectorForTsOptions): CssSelectorForTs;
export declare class CssSelectorForTs extends CssSelectorBase<ts.Node> {
    protected rootNode: SourceFile | ts.Node;
    private options;
    constructor(rootNode: SourceFile | ts.Node, options: CssSelectorForTsOptions);
    protected getTagAttribute(selector: AttributeSelector, node: ts.Node): {
        value: string;
    };
    protected findTag(name: string, node: ts.Node): boolean;
    protected findWithEachNode(node: NodeContext<ts.Node>, fn: (node: ts.Node) => boolean, multiLevel?: boolean): NodeContext<ts.Node>[];
    protected getChildren(node: ts.Node): ts.Node[];
}

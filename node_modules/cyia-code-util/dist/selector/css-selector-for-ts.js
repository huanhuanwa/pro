"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CssSelectorForTs = exports.createCssSelectorForTs = void 0;
const ts = __importStar(require("typescript"));
const css_selector_base_1 = require("./css-selector-base");
function createCssSelectorForTs(sourceFile, options = { childrenMode: 'getChildren' }) {
    if (typeof sourceFile == 'string') {
        sourceFile = ts.createSourceFile('', sourceFile, ts.ScriptTarget.Latest, true);
    }
    return new CssSelectorForTs(sourceFile, options);
}
exports.createCssSelectorForTs = createCssSelectorForTs;
class CssSelectorForTs extends css_selector_base_1.CssSelectorBase {
    constructor(rootNode, options) {
        super();
        this.rootNode = rootNode;
        this.options = options;
    }
    getTagAttribute(selector, node) {
        return node[selector.name] && Number.isInteger(node[selector.name].kind)
            ? {
                value: node[selector.name].text && node[selector.name].getText(),
            }
            : undefined;
    }
    findTag(name, node) {
        return ts.SyntaxKind[name] === node.kind;
    }
    findWithEachNode(node, fn, multiLevel) {
        let list = [node];
        let result = [];
        while (list.length) {
            let node = list.pop();
            if (fn(node.node)) {
                result.push(node);
            }
            if (multiLevel) {
                list.push(...this.getChildren(node.node).map((childNode, i) => new css_selector_base_1.NodeContext(childNode, node, i)));
            }
        }
        return result;
    }
    getChildren(node) {
        if (this.options.childrenMode === 'forEachChild') {
            let children = [];
            node.forEachChild((node) => children.push(node) && undefined);
            return children;
        }
        else {
            return node.getChildren();
        }
    }
}
exports.CssSelectorForTs = CssSelectorForTs;

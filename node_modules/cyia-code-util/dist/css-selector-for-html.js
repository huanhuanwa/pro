"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CssSelectorForHtml = exports.createCssSelectorForHtml = void 0;
const compiler_1 = require("@angular/compiler");
const css_what_1 = require("css-what");
function createCssSelectorForHtml(htmlContent) {
    return new CssSelectorForHtml(htmlContent);
}
exports.createCssSelectorForHtml = createCssSelectorForHtml;
function findTag(name, node) {
    return name === node.name;
}
function findAttribute(selector, node) {
    // todo 取值
    let attribute = node.attrs.find((item) => item.name === selector.name);
    if (attribute) {
        let str;
        try {
            str = attribute.value;
            switch (selector.action) {
                case 'equals':
                    return str === selector.value;
                case 'any':
                    return str.includes(selector.value);
                case 'start':
                    return str.startsWith(selector.value);
                case 'end':
                    return str.endsWith(selector.value);
                case 'element':
                    return str.split(' ').includes(selector.value);
                case 'hyphen':
                    return str.split(' ')[0].split('-')[0] === selector.value;
                case 'not':
                    return str !== selector.value;
                case 'exists':
                    return !!attribute;
                default:
                    return str === selector.value;
            }
        }
        catch (error) { }
    }
    return false;
}
/** 查包括自身的节点 */
function findAllWithEachNode(node, fn, multiLevel) {
    let list = [node];
    let result = [];
    while (list.length) {
        let node = list.pop();
        if (fn(node.node)) {
            result.push(node);
        }
        if (multiLevel) {
            list.push(...getChildren(node.node).map((childNode, i) => new NodeContext(childNode, node, i)));
        }
    }
    return result;
}
function getChildren(node) {
    return node.children.filter((node) => node instanceof compiler_1.Element);
}
class CssSelectorForHtml {
    constructor(htmlString) {
        this.htmlString = htmlString;
        this.multi = true;
        let parser = new compiler_1.HtmlParser();
        this.parseTreeResult = parser.parse(htmlString, '');
        if (this.parseTreeResult.errors && this.parseTreeResult.errors.length) {
            throw this.parseTreeResult.errors;
        }
    }
    query(arg1, arg2) {
        let selector;
        let queryElement;
        if (typeof arg1 === 'string') {
            selector = arg1;
            let rootNodes = this.parseTreeResult.rootNodes;
            queryElement = new compiler_1.Element('__root', [], rootNodes, undefined, undefined, undefined, undefined);
        }
        else {
            selector = arg2;
            queryElement = arg1;
        }
        let selectedList = [];
        let result = css_what_1.parse(selector, { lowerCaseAttributeNames: false, lowerCaseTags: false });
        /** 使用一个虚拟节点支持搜索 */
        for (let i = 0; i < result.length; i++) {
            this.currentNodeList = [new NodeContext(queryElement, undefined, undefined)];
            const selectorList = result[i];
            for (let j = 0; j < selectorList.length; j++) {
                const selector = selectorList[j];
                if (!this.parse(selector)) {
                    break;
                }
            }
            selectedList.push(...this.currentNodeList.map((node) => node.node));
        }
        return selectedList;
    }
    /**
     * 和之前的ts不同,html的selector不查自身,是查子级的
     * @param selector
     */
    parse(selector) {
        let list = [];
        switch (selector.type) {
            // 匹配标签
            case 'tag':
                this.currentNodeList.forEach((nodeContext) => {
                    list = list.concat(findAllWithEachNode(nodeContext, (node) => findTag(selector.name, node), this.multi));
                });
                this.currentNodeList = list;
                this.multi = true;
                break;
            // 空格
            case 'descendant':
                this.currentNodeList = [].concat(...this.currentNodeList.map((node) => getChildren(node.node).map((child, i) => new NodeContext(child, node, i))));
                break;
            //+
            case 'adjacent':
                this.currentNodeList = [].concat(this.currentNodeList
                    .map((nodeContext) => new NodeContext(getChildren(nodeContext.parent.node)[nodeContext.index + 1], nodeContext.parent, nodeContext.index + 1))
                    .filter((node) => node.node));
                this.multi = false;
                break;
            // >
            case 'child':
                this.currentNodeList = [].concat(...this.currentNodeList.map((node) => getChildren(node.node).map((child, i) => new NodeContext(child, node, i))));
                this.multi = false;
                break;
            // ~
            case 'sibling':
                this.currentNodeList = [].concat(...this.currentNodeList.map((nodeContent) => getChildren(nodeContent.parent.node)
                    .filter((node, i) => i > nodeContent.index)
                    .map((node, i) => new NodeContext(node, nodeContent.parent, i))));
                this.multi = false;
                break;
            //[] .xxx
            case 'attribute':
                this.currentNodeList.forEach((nodeContext) => {
                    list = list.concat(findAllWithEachNode(nodeContext, (node) => findAttribute(selector, node), this.multi));
                });
                this.currentNodeList = list;
                this.multi = true;
                break;
            default:
                break;
        }
        return !!this.currentNodeList.length;
    }
}
exports.CssSelectorForHtml = CssSelectorForHtml;
class NodeContext {
    constructor(node, parent, index) {
        this.node = node;
        this.parent = parent;
        this.index = index;
    }
}

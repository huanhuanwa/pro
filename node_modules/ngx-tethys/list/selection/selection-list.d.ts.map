{"version":3,"file":"selection-list.d.ts","sources":["selection-list.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { UpdateHostClassService } from 'ngx-tethys/core';\nimport { IThyListOptionParentComponent, ThyListLayout, ThyListOptionComponent } from 'ngx-tethys/shared';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ThySelectionListChange } from './selection.interface';\nexport declare type ThyListSize = 'sm' | 'md' | 'lg';\nexport declare class ThySelectionListComponent implements OnInit, OnDestroy, AfterContentInit, IThyListOptionParentComponent, ControlValueAccessor {\n    private renderer;\n    private elementRef;\n    private ngZone;\n    private updateHostClassService;\n    private _keyManager;\n    private _selectionChangesUnsubscribe$;\n    private _bindKeyEventUnsubscribe;\n    private _modelValues;\n    /** The currently selected options. */\n    selectionModel: SelectionModel<any>;\n    disabled: boolean;\n    layout: ThyListLayout;\n    _isList: boolean;\n    _isSelectionList: boolean;\n    multiple: boolean;\n    isLayoutGrid: boolean;\n    /** The option components contained within this selection-list. */\n    options: QueryList<ThyListOptionComponent>;\n    set thyMultiple(value: any);\n    thyBindKeyEventContainer: HTMLElement | ElementRef | string;\n    thyScrollContainer: HTMLElement | ElementRef | string;\n    thyBeforeKeydown: (event?: KeyboardEvent) => boolean;\n    thyUniqueKey: string;\n    thyCompareWith: (o1: any, o2: any) => boolean;\n    set thyLayout(value: ThyListLayout);\n    set thyAutoActiveFirstItem(value: boolean);\n    set thySize(value: ThyListSize);\n    private spaceEnabled;\n    /** Whether keydown space toggle focused option */\n    set thySpaceKeyEnabled(value: boolean);\n    /** Emits a change event whenever the selected state of an option changes. */\n    readonly thySelectionChange: EventEmitter<ThySelectionListChange>;\n    private autoActiveFirstItem;\n    private _onTouched;\n    private _onChange;\n    private _emitChangeEvent;\n    private _emitModelValueChange;\n    private _toggleFocusedOption;\n    private _initializeFocusKeyManager;\n    private _instanceSelectionModel;\n    private _getElementBySelector;\n    private _compareValue;\n    private _getOptionSelectionValue;\n    private _setSelectionByValues;\n    private _setAllOptionsSelected;\n    private _getOptionByValue;\n    private _getActiveOption;\n    private _setListSize;\n    constructor(renderer: Renderer2, elementRef: ElementRef, ngZone: NgZone, updateHostClassService: UpdateHostClassService);\n    ngOnInit(): void;\n    writeValue(value: any[] | any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    onKeydown(event: KeyboardEvent): void;\n    toggleOption(option: ThyListOptionComponent, event?: Event): void;\n    setActiveOption(option: ThyListOptionComponent): void;\n    scrollIntoView(option: ThyListOptionComponent): void;\n    isSelected(option: ThyListOptionComponent): boolean;\n    clearActiveItem(): void;\n    determineClearActiveItem(): void;\n    /** Selects all of the options. */\n    selectAll(): void;\n    /** Deselects all of the options. */\n    deselectAll(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n}\n"]}
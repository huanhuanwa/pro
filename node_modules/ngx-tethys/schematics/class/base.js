"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrationBase = void 0;
const tslib_1 = require("tslib");
const typescript_1 = tslib_1.__importStar(require("typescript"));
const cyia_code_util_1 = require("cyia-code-util");
class MigrationBase {
    constructor(sourceFile, updateFileService, program) {
        this.sourceFile = sourceFile;
        this.updateFileService = updateFileService;
        this.program = program;
        this.printer = typescript_1.default.createPrinter();
        this.selector = cyia_code_util_1.createCssSelectorForTs(this.sourceFile);
    }
    createImportDeclaration(importNameList, importPackageName, commentOptions) {
        const node = typescript_1.factory.createImportDeclaration(undefined, undefined, typescript_1.factory.createImportClause(false, undefined, typescript_1.factory.createNamedImports(importNameList.map(importName => typescript_1.factory.createImportSpecifier(undefined, typescript_1.factory.createIdentifier(importName))))), typescript_1.factory.createStringLiteral(importPackageName));
        if (commentOptions && commentOptions.content !== undefined) {
            return typescript_1.default.addSyntheticLeadingComment(node, commentOptions.kind || typescript_1.default.SyntaxKind.SingleLineCommentTrivia, commentOptions.content, commentOptions.newLine);
        }
        return node;
    }
    createNamedImports(importSpecifierList) {
        return typescript_1.factory.createNamedImports(importSpecifierList);
    }
    printNodeContent(node) {
        return this.printer.printNode(typescript_1.default.EmitHint.Unspecified, node, undefined);
    }
    createStringLiteral(string) {
        return typescript_1.factory.createStringLiteral(string);
    }
    getImportDeclarationList() {
        return this.selector
            .queryAll('ImportDeclaration')
            .filter(item => typescript_1.default.isImportDeclaration(item))
            .filter((item) => this.getImportDeclarationPackageName(item).startsWith('ngx-tethys'));
    }
    getImportDeclarationPackageName(importDeclaration) {
        return importDeclaration.moduleSpecifier.text;
    }
    getImportDeclarationImportSpecifierList(importDeclaration) {
        if (importDeclaration.importClause &&
            importDeclaration.importClause.namedBindings &&
            typescript_1.default.isNamedImports(importDeclaration.importClause.namedBindings)) {
            return importDeclaration.importClause.namedBindings.elements.slice();
        }
        return [];
    }
    addComment(node, commentOptions) {
        if (commentOptions.content !== undefined) {
            return typescript_1.default.addSyntheticLeadingComment(node, commentOptions.kind || typescript_1.default.SyntaxKind.SingleLineCommentTrivia, commentOptions.content, commentOptions.newLine);
        }
        return node;
    }
    /** 更新引入声明,因为ts 4.0设置为readonly的原因,无法直接赋值 */
    updateImportDeclaration(node, moduleSpecifier, importClause) {
        return typescript_1.factory.updateImportDeclaration(node, node.decorators, node.modifiers, importClause || node.importClause, moduleSpecifier || node.moduleSpecifier);
    }
    /** 更新引入声明,因为ts 4.0设置为readonly的原因,无法直接赋值 */
    updateImportClause(node, namedImports) {
        return typescript_1.factory.updateImportClause(node, false, node.name, namedImports || node.namedBindings);
    }
}
exports.MigrationBase = MigrationBase;

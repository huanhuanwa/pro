"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsMigrationSchematicsRule = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("../utils");
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const path = tslib_1.__importStar(require("path"));
function TsMigrationSchematicsRule(migrationList, compilerHostHook) {
    return (tree, context) => {
        const updateFileService = utils_1.createUpdateFileService(tree);
        const angularConfig = utils_1.getAngularJson(tree);
        const tsConfigList = utils_1.getWorkspaceAllTsconfig(angularConfig);
        for (let i = 0; i < migrationList.length; i++) {
            const Item = migrationList[i];
            const transformedList = [];
            for (const tsConfig of tsConfigList) {
                const readResult = typescript_1.default.readConfigFile(tsConfig, e => {
                    return tree.read(path.resolve('/', e)).toString();
                });
                if (readResult.error) {
                    throw new Error(`read ${tsConfig} fail`);
                }
                const config = readResult.config;
                const basePath = path.dirname(path.join('/', tsConfig));
                const parseContent = typescript_1.default.parseJsonConfigFileContent(config, utils_1.creatTreeTsParseConfigHost(tree), basePath, {});
                const compilerHost = utils_1.createTreeCompilerHost(parseContent.options, tree);
                const program = typescript_1.default.createProgram({
                    host: compilerHostHook ? compilerHostHook(compilerHost) : compilerHost,
                    rootNames: parseContent.fileNames,
                    options: parseContent.options
                });
                program
                    .getSourceFiles()
                    .filter(sf => !sf.fileName.includes('node_modules'))
                    .filter(item => !transformedList.includes(item.fileName))
                    .forEach(sf => {
                    transformedList.push(sf.fileName);
                    new Item(sf, updateFileService, program).run();
                });
            }
        }
        return tree;
    };
}
exports.TsMigrationSchematicsRule = TsMigrationSchematicsRule;

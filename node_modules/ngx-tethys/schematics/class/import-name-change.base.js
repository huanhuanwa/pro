"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportNameChangeBase = void 0;
const base_1 = require("./base");
const types_1 = require("../types");
const cyia_code_util_1 = require("cyia-code-util");
class ImportNameChangeBase extends base_1.MigrationBase {
    constructor() {
        super(...arguments);
        this.changeNodeMap = new Set();
    }
    run() {
        const importDeclarationList = this.getImportDeclarationList().filter(item => this.getImportDeclarationPackageName(item).includes('ngx-tethys'));
        if (!importDeclarationList.length) {
            return;
        }
        const contentChangeList = [];
        for (const importDeclaration of importDeclarationList) {
            const importSpecifierList = this.getImportDeclarationImportSpecifierList(importDeclaration);
            for (let index = 0; index < importSpecifierList.length; index++) {
                const importSpecifier = importSpecifierList[index];
                const isAlias = !!importSpecifier.propertyName;
                const replaceName = this.relation[(importSpecifier.propertyName || importSpecifier.name).text];
                if (!replaceName) {
                    continue;
                }
                if (!isAlias) {
                    this.changeRelationIdentifier(importSpecifier.name.text, replaceName, contentChangeList);
                }
                else {
                    this.changeNodeMap.add(importSpecifier.propertyName);
                    contentChangeList.push(new types_1.ReplaceContentChange(importSpecifier.propertyName.getStart(), importSpecifier.propertyName.getWidth(), replaceName));
                }
            }
        }
        if (!contentChangeList.length) {
            return;
        }
        this.updateFileService.change(this.sourceFile.fileName, contentChangeList);
    }
    changeRelationIdentifier(oldNamed, newNamed, list) {
        const checker = this.program.getTypeChecker();
        const selector = cyia_code_util_1.createCssSelectorForTs(this.sourceFile);
        const replaceNodeList = selector
            .queryAll(`Identifier`)
            .filter(item => !this.changeNodeMap.has(item))
            .filter(item => item.text && item.text === oldNamed);
        replaceNodeList.forEach(item => {
            const type = checker.getTypeAtLocation(item);
            const str = checker.typeToString(type);
            if (str === `"__hook${oldNamed}"`) {
                list.push(new types_1.ReplaceContentChange(item.getStart(), item.getWidth(), newNamed));
            }
        });
    }
}
exports.ImportNameChangeBase = ImportNameChangeBase;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportEntryPointChangeMigrationBase = void 0;
const types_1 = require("../types");
const base_1 = require("./base");
class ImportEntryPointChangeMigrationBase extends base_1.MigrationBase {
    run() {
        const importDeclarationList = this.getImportDeclarationList();
        const contentChangeList = [];
        for (const importDeclaration of importDeclarationList) {
            const changeModulePackageNodeResult = this.generateChangeModulePackageNode(importDeclaration);
            const changePackageNodeResult = this.generateChangePackageNode(importDeclaration);
            if (!changePackageNodeResult.node && !changeModulePackageNodeResult.node) {
                continue;
            }
            contentChangeList.push(new types_1.ReplaceContentChange(importDeclaration.getStart(), importDeclaration.getWidth(), [
                changeModulePackageNodeResult.addOldNode && changeModulePackageNodeResult.importDeclaration,
                changePackageNodeResult.node,
                changeModulePackageNodeResult.node
            ]
                .filter(e => !!e)
                .map(node => this.printNodeContent(node))
                .join('\n')));
        }
        this.updateFileService.change(this.sourceFile.fileName, contentChangeList);
    }
    generateChangePackageNode(importDeclaration) {
        const importPackageName = this.getImportDeclarationPackageName(importDeclaration);
        if (this.changePackageGroup[importPackageName]) {
            importDeclaration = this.updateImportDeclaration(importDeclaration, this.createStringLiteral(this.changePackageGroup[importPackageName]));
            return {
                node: importDeclaration
            };
        }
        return {
            node: undefined
        };
    }
    generateChangeModulePackageNode(importDeclaration) {
        var _a;
        const importPackageName = this.getImportDeclarationPackageName(importDeclaration);
        const appendImportNameList = [];
        let newPackageName;
        let addOldNode = false;
        const importSpecifierList = this.getImportDeclarationImportSpecifierList(importDeclaration);
        const list = importSpecifierList.filter(importSpecifier => {
            const importName = importSpecifier.name.text;
            if (this.changeModulePackageGroup[importName] && this.changeModulePackageGroup[importName].replace === importPackageName) {
                newPackageName = this.changeModulePackageGroup[importName].with;
                appendImportNameList.push(importName);
                return false;
            }
            return true;
        });
        if (list.length && list.length !== list.length) {
            importDeclaration = this.updateImportDeclaration(importDeclaration, undefined, this.updateImportClause(importDeclaration.importClause, this.createNamedImports(list)));
            addOldNode = true;
        }
        else if (!list.length && ((_a = importDeclaration === null || importDeclaration === void 0 ? void 0 : importDeclaration.importClause) === null || _a === void 0 ? void 0 : _a.name)) {
            addOldNode = true;
        }
        return {
            addOldNode,
            node: !!appendImportNameList.length && this.createImportDeclaration(appendImportNameList, newPackageName),
            importDeclaration
        };
    }
}
exports.ImportEntryPointChangeMigrationBase = ImportEntryPointChangeMigrationBase;

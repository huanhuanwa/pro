"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkspaceAllTsconfig = void 0;
function getWorkspaceAllTsconfig(json) {
    var _a, _b, _c, _d;
    if (!json || !json.projects) {
        throw new Error('error angular.json');
    }
    const list = [];
    for (const projectName in json.projects) {
        if (Object.prototype.hasOwnProperty.call(json.projects, projectName)) {
            const projectConfig = json.projects[projectName];
            const buildConfig = (_a = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.architect) === null || _a === void 0 ? void 0 : _a.build;
            if ((_b = buildConfig === null || buildConfig === void 0 ? void 0 : buildConfig.options) === null || _b === void 0 ? void 0 : _b.tsConfig) {
                list.push(buildConfig.options.tsConfig);
            }
            if (buildConfig === null || buildConfig === void 0 ? void 0 : buildConfig.configurations) {
                for (const configName in buildConfig.configurations) {
                    if (Object.prototype.hasOwnProperty.call(buildConfig.configurations, configName)) {
                        const element = buildConfig.configurations[configName];
                        if (element === null || element === void 0 ? void 0 : element.tsConfig) {
                            list.push(element.tsConfig);
                        }
                    }
                }
            }
            const testConfig = (_c = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.architect) === null || _c === void 0 ? void 0 : _c.test;
            if ((_d = testConfig === null || testConfig === void 0 ? void 0 : testConfig.options) === null || _d === void 0 ? void 0 : _d.tsConfig) {
                list.push(testConfig.options.tsConfig);
            }
            if (testConfig === null || testConfig === void 0 ? void 0 : testConfig.configurations) {
                for (const configName in testConfig.configurations) {
                    if (Object.prototype.hasOwnProperty.call(testConfig.configurations, configName)) {
                        const element = testConfig.configurations[configName];
                        if (element === null || element === void 0 ? void 0 : element.tsConfig) {
                            list.push(element.tsConfig);
                        }
                    }
                }
            }
        }
    }
    return list;
}
exports.getWorkspaceAllTsconfig = getWorkspaceAllTsconfig;

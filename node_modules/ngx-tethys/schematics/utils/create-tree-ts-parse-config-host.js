"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.creatTreeTsParseConfigHost = exports.TreeTsParseConfigHost = void 0;
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const minimatch_1 = tslib_1.__importDefault(require("minimatch"));
class TreeTsParseConfigHost {
    constructor(tree) {
        this.tree = tree;
        this.useCaseSensitiveFileNames = true;
        this.onUnRecoverableConfigFileDiagnostic = r => {
            console.warn(r);
        };
    }
    fileExists(filePath) {
        return this.tree.exists(path.join(filePath));
    }
    readFile(filePath) {
        return this.tree.read(path.join(filePath)).toString();
    }
    readDirectory(rootDir, extensions, excludes, includes, depth) {
        excludes = excludes.map(exclude => path.join(rootDir, exclude));
        includes = includes.map(include => path.join(rootDir, include));
        return this._readDirectory(rootDir, extensions, excludes, includes, depth);
    }
    _readDirectory(fileDir, extensions, excludes, includes, depth) {
        const dirEntry = this.tree.getDir(path.join(fileDir));
        const subdirs = dirEntry.subdirs.filter(dirPath => dirPath !== 'node_modules');
        return dirEntry.subfiles
            .map(file => path.join(fileDir, file))
            .filter(fileName => (extensions.length ? extensions.some(extension => fileName.endsWith(extension)) : true))
            .filter(item => (excludes.length ? !excludes.some(exclude => minimatch_1.default(path.join(fileDir, item), exclude)) : true))
            .filter(item => (includes.length ? includes.some(include => minimatch_1.default(path.join(fileDir, item), include)) : false))
            .concat(...(dirEntry.subdirs.length
            ? subdirs.map(item => this._readDirectory(path.join(fileDir, item), extensions, excludes, includes, depth))
            : []));
    }
    getCurrentDirectory() {
        return path.join('/');
    }
}
exports.TreeTsParseConfigHost = TreeTsParseConfigHost;
function creatTreeTsParseConfigHost(tree) {
    return new TreeTsParseConfigHost(tree);
}
exports.creatTreeTsParseConfigHost = creatTreeTsParseConfigHost;

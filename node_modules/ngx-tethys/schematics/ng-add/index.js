"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const tslib_1 = require("tslib");
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const package_metadata_1 = require("@angular/cli/utilities/package-metadata");
const package_manager_1 = require("@angular/cli/utilities/package-manager");
const utils_1 = require("../utils");
const dependencies_1 = require("../dependencies");
const version_1 = require("../version");
const schema_1 = require("@angular/cli/lib/config/schema");
const TETHYS_PKG_NAME = 'ngx-tethys';
function addStyleToWorkspace(projectName) {
    return (tree) => {
        return workspace_1.updateWorkspace(workspace => {
            const project = utils_1.getProjectFromWorkspace(workspace, projectName);
            const stylesList = project.targets.get('build').options.styles || [];
            const filePath = `./node_modules/ngx-tethys/styles/main.bundle.scss`;
            if (!stylesList.includes(filePath)) {
                stylesList.push(filePath);
                project.targets.get('build').options.styles = stylesList;
            }
        });
    };
}
function addIconToWorkspace(projectName) {
    return workspace_1.updateWorkspace(workspace => {
        const project = utils_1.getProjectFromWorkspace(workspace, projectName);
        const list = project.targets.get('build').options.assets || [];
        list.push({
            glob: '**/*',
            input: './node_modules/@tethys/icons',
            output: '/assets/icons/'
        });
        project.targets.get('build').options.assets = list;
    });
}
function main(options = {}) {
    return (host, context) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const packageManager = yield package_manager_1.getPackageManager(host.root.path);
        const usingYarn = packageManager === schema_1.PackageManager.Yarn;
        for (const pkg of Object.keys(dependencies_1.DEPENDENCIES)) {
            const version = dependencies_1.DEPENDENCIES[pkg];
            if (version === '*') {
                const packageMetadata = yield package_metadata_1.fetchPackageMetadata(pkg, context.logger, {
                    usingYarn: usingYarn
                });
                const latestManifest = packageMetadata.tags['latest'];
                utils_1.addPackageToPackageJson(host, pkg, latestManifest.version);
            }
            else {
                utils_1.addPackageToPackageJson(host, pkg, dependencies_1.DEPENDENCIES[pkg]);
            }
        }
        const tethysVersionRange = utils_1.getPackageVersionFromPackageJson(host, TETHYS_PKG_NAME);
        // The CLI inserts `ngx-tethys` into the `package.json` before this schematic runs.
        // This means that we do not need to insert ngx-tethys into `package.json` files again.
        // In some cases though, it could happen that this schematic runs outside of the CLI `ng add`
        // command, or ngx-tethys is only listed a dev dependency. If that is the case, we insert a
        // version based on the current build version (substituted version placeholder).
        if (tethysVersionRange === null) {
            utils_1.addPackageToPackageJson(host, TETHYS_PKG_NAME, version_1.VERSION);
        }
        context.addTask(new tasks_1.NodePackageInstallTask());
        return schematics_1.chain([options.icon ? addIconToWorkspace(options.project) : schematics_1.noop(), addStyleToWorkspace(options.project)]);
    });
}
exports.main = main;

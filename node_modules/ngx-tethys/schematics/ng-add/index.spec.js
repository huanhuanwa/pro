"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@angular-devkit/schematics/testing");
const dependencies_1 = require("../dependencies");
const testing_2 = require("../testing");
const utils_1 = require("../utils");
const version_1 = require("../version");
describe('ng-add Schematic', () => {
    let tree;
    const schematicRunner = new testing_1.SchematicTestRunner('ngx-tethys', require.resolve('../collection.json'));
    let workspaceTree;
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const factory = testing_2.createTestWorkspaceFactory(schematicRunner);
        yield factory.create();
        yield factory.addApplication({ name: 'ngx-tethys-chen' });
        tree = factory.getTree();
    }));
    it('should update package.json', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        workspaceTree = yield schematicRunner.runSchematicAsync('ng-add', undefined, tree).toPromise();
        const packageJson = testing_2.getJsonFileContent(workspaceTree, '/package.json');
        const dependencies = packageJson.dependencies;
        expect(dependencies['date-fns']).toEqual(dependencies_1.DEPENDENCIES['date-fns']);
        expect(dependencies['@tethys/icons']).toBeTruthy();
        expect(dependencies['@angular/cdk']).toEqual(dependencies_1.DEPENDENCIES['@angular/cdk']);
        expect(dependencies['ngx-tethys']).toEqual(version_1.VERSION);
        expect(schematicRunner.tasks.some(task => task.name === 'node-package')).toBe(true);
    }));
    it('should respect version range from CLI ng-add command', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // Simulates the behavior of the CLI `ng add` command. The command inserts the
        // requested package version into the `package.json` before the actual schematic runs.
        utils_1.addPackageToPackageJson(tree, 'ngx-tethys', '^9.0.0');
        workspaceTree = yield schematicRunner.runSchematicAsync('ng-add', {}, tree).toPromise();
        const packageJson = testing_2.getJsonFileContent(workspaceTree, '/package.json');
        const dependencies = packageJson.dependencies;
        expect(dependencies['ngx-tethys']).toBe('^9.0.0');
        expect(schematicRunner.tasks.some(task => task.name === 'node-package')).toBe(true);
    }));
    it(`should add styles`, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        workspaceTree = yield schematicRunner.runSchematicAsync('ng-add', undefined, tree).toPromise();
        const workspace = testing_2.getJsonFileContent(workspaceTree, '/angular.json');
        const defaultProject = workspace.defaultProject;
        const existStyle = workspace.projects[defaultProject].architect.build.options.styles.includes('./node_modules/ngx-tethys/styles/main.bundle.scss');
        expect(existStyle).toBe(true);
    }));
    it(`should add styles in [ngx-tethys-chen] project`, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        workspaceTree = yield schematicRunner.runSchematicAsync('ng-add', { project: 'ngx-tethys-chen' }, tree).toPromise();
        const workspace = testing_2.getJsonFileContent(workspaceTree, '/angular.json');
        const existStyle = workspace.projects['ngx-tethys-chen'].architect.build.options.styles.includes('./node_modules/ngx-tethys/styles/main.bundle.scss');
        expect(existStyle).toBe(true);
    }));
    it(`should add icons`, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        workspaceTree = yield schematicRunner.runSchematicAsync('ng-add', { icon: true }, tree).toPromise();
        const workspace = testing_2.getJsonFileContent(workspaceTree, '/angular.json');
        const defaultProject = workspace.defaultProject;
        const existIcon = workspace.projects[defaultProject].architect.build.options.assets.find(a => typeof a === 'object' && a.input === './node_modules/@tethys/icons');
        expect(existIcon).toEqual({
            glob: '**/*',
            input: './node_modules/@tethys/icons',
            output: '/assets/icons/'
        });
    }));
    it(`should not icons`, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        workspaceTree = yield schematicRunner.runSchematicAsync('ng-add', { icon: false }, tree).toPromise();
        const workspace = testing_2.getJsonFileContent(workspaceTree, '/angular.json');
        const defaultProject = workspace.defaultProject;
        const existIcon = workspace.projects[defaultProject].architect.build.options.assets.find(a => typeof a === 'object' && a.input === './node_modules/@tethys/icons');
        expect(existIcon).not.toEqual({
            glob: '**/*',
            input: './node_modules/@tethys/icons',
            output: '/assets/icons/'
        });
    }));
});

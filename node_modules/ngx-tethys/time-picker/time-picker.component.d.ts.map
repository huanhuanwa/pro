{"version":3,"file":"time-picker.component.d.ts","sources":["time-picker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, StaticProvider } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { TimePickerConfig } from './time-picker.config';\nimport { TimeChangeSource, TimePickerComponentState, TimePickerControls } from './time-picker.models';\nimport { Subscription } from 'rxjs';\nimport { ThyTimePickerStore } from './time-picker.store';\nexport declare const TIMEPICKER_CONTROL_VALUE_ACCESSOR: StaticProvider;\nexport declare class ThyTimePickerComponent implements ControlValueAccessor, TimePickerComponentState, TimePickerControls, OnChanges, OnDestroy {\n    private _cd;\n    private _store;\n    /** hours change step */\n    hourStep: number;\n    /** hours change step */\n    minuteStep: number;\n    /** seconds change step */\n    secondsStep: number;\n    /** if true hours and minutes fields will be readonly */\n    readonlyInput: boolean;\n    /** if true hours and minutes fields will be disabled */\n    disabled: boolean;\n    /** if true scroll inside hours and minutes inputs will change time */\n    mousewheel: boolean;\n    /** if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard */\n    arrowKeys: boolean;\n    /** if true spinner arrows above and below the inputs will be shown */\n    showSpinners: boolean;\n    /** if true meridian button will be shown */\n    showMeridian: boolean;\n    /** show minutes in timePicker */\n    showMinutes: boolean;\n    /** show seconds in timePicker */\n    showSeconds: boolean;\n    /** meridian labels based on locale */\n    meridians: string[];\n    /** minimum time user can select */\n    min: Date;\n    /** maximum time user can select */\n    max: Date;\n    /** placeholder for hours field in timePicker */\n    hoursPlaceholder: string;\n    /** placeholder for minutes field in timePicker */\n    minutesPlaceholder: string;\n    /** placeholder for seconds field in timePicker */\n    secondsPlaceholder: string;\n    /** emits true if value is a valid date */\n    isValid: EventEmitter<boolean>;\n    hours: string;\n    minutes: string;\n    seconds: string;\n    meridian: string;\n    get isEditable(): boolean;\n    invalidHours: boolean;\n    invalidMinutes: boolean;\n    invalidSeconds: boolean;\n    canIncrementHours: boolean;\n    canIncrementMinutes: boolean;\n    canIncrementSeconds: boolean;\n    canDecrementHours: boolean;\n    canDecrementMinutes: boolean;\n    canDecrementSeconds: boolean;\n    canToggleMeridian: boolean;\n    onChange: Function;\n    onTouched: Function;\n    timePickerSub: Subscription;\n    constructor(_config: TimePickerConfig, _cd: ChangeDetectorRef, _store: ThyTimePickerStore);\n    resetValidation(): void;\n    isPM(): boolean;\n    prevDef($event: Event): void;\n    wheelSign($event: WheelEventInit): number;\n    ngOnChanges(changes: SimpleChanges): void;\n    changeHours(step: number, source?: TimeChangeSource): void;\n    changeMinutes(step: number, source?: TimeChangeSource): void;\n    changeSeconds(step: number, source?: TimeChangeSource): void;\n    updateHours(hours: string): void;\n    updateMinutes(minutes: string): void;\n    updateSeconds(seconds: string): void;\n    isValidLimit(): boolean;\n    _updateTime(): void;\n    toggleMeridian(): void;\n    writeValue(obj: string | null | undefined | Date): void;\n    registerOnChange(fn: (_: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(isDisabled: boolean): void;\n    ngOnDestroy(): void;\n    private _renderTime;\n}\n"]}
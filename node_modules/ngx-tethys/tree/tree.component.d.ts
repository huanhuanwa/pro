import { ElementRef, TemplateRef, OnInit, OnChanges, EventEmitter, SimpleChanges } from '@angular/core';
import { ThyTreeNodeData, ThyTreeEmitEvent, ThyTreeDragDropEvent, ThyTreeIcons, ThyTreeNodeCheckState } from './tree.class';
import { ThyTreeService } from './tree.service';
import { SelectionModel } from '@angular/cdk/collections';
import { ControlValueAccessor } from '@angular/forms';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyDragDropEvent, ThyDragOverEvent, ThyDragStartEvent } from 'ngx-tethys/drag-drop';
import { ThyTreeNode } from './tree-node.class';
import * as ɵngcc0 from '@angular/core';
declare type ThyTreeSize = 'sm' | '';
declare type ThyTreeType = 'default' | 'especial';
export declare class ThyTreeComponent implements ControlValueAccessor, OnInit, OnChanges {
    private elementRef;
    private updateHostClassService;
    thyTreeService: ThyTreeService;
    private _templateRef;
    private _emptyChildrenTemplateRef;
    private _draggable;
    private _expandedKeys;
    private _selectedKeys;
    _selectionModel: SelectionModel<ThyTreeNode>;
    treeNodes: ThyTreeNode[];
    set thyNodes(value: ThyTreeNodeData[]);
    thyShowExpand: boolean | ((_: ThyTreeNodeData) => boolean);
    thyMultiple: boolean;
    set thyDraggable(value: boolean);
    get thyDraggable(): boolean;
    thyCheckable: boolean;
    set thyCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState);
    thyAsync: boolean;
    private _thyType;
    set thyType(type: ThyTreeType);
    get thyType(): ThyTreeType;
    thyIcons: ThyTreeIcons;
    thySize: ThyTreeSize;
    thyTitleTruncate: boolean;
    set thySelectedKeys(keys: string[]);
    thyBeforeDragStart: (e: ThyDragStartEvent) => boolean;
    thyBeforeDragDrop: (e: ThyDragDropEvent) => boolean;
    thyOnClick: EventEmitter<ThyTreeEmitEvent>;
    thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent>;
    thyOnExpandChange: EventEmitter<ThyTreeEmitEvent>;
    thyOnDragDrop: EventEmitter<ThyTreeDragDropEvent>;
    set templateRef(template: TemplateRef<any>);
    get templateRef(): TemplateRef<any>;
    emptyChildrenTemplate: TemplateRef<any>;
    set emptyChildrenTemplateRef(template: TemplateRef<any>);
    get emptyChildrenTemplateRef(): TemplateRef<any>;
    thyTreeClass: boolean;
    beforeDragOver: (event: ThyDragOverEvent<ThyTreeNode>) => any;
    private _onTouched;
    private _onChange;
    constructor(elementRef: ElementRef, updateHostClassService: UpdateHostClassService, thyTreeService: ThyTreeService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    private _setTreeType;
    private _setTreeSize;
    private _instanceSelectionModel;
    private _selectTreeNodes;
    isSelected(node: ThyTreeNode): boolean;
    toggleTreeNode(node: ThyTreeNode): void;
    trackByFn(index: number, item: any): any;
    onDragStart(event: ThyDragStartEvent<ThyTreeNode>): void;
    onDragDrop(event: ThyDragDropEvent<ThyTreeNode>): void;
    isShowExpand(node: ThyTreeNode): any;
    writeValue(value: ThyTreeNodeData[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    selectTreeNode(node: ThyTreeNode): void;
    getRootNodes(): ThyTreeNode[];
    getTreeNode(key: string): ThyTreeNode<any>;
    getSelectedNode(): ThyTreeNode;
    getSelectedNodes(): ThyTreeNode[];
    getExpandedNodes(): ThyTreeNode[];
    getCheckedNodes(): ThyTreeNode[];
    addTreeNode(node: ThyTreeNodeData, parent?: ThyTreeNode, index?: number): void;
    deleteTreeNode(node: ThyTreeNode): void;
    expandAllNodes(): void;
    collapsedAllNodes(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyTreeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyTreeComponent, "thy-tree", never, { "thyShowExpand": "thyShowExpand"; "thyMultiple": "thyMultiple"; "thyAsync": "thyAsync"; "thyIcons": "thyIcons"; "thyTitleTruncate": "thyTitleTruncate"; "thyNodes": "thyNodes"; "thyDraggable": "thyDraggable"; "thyCheckStateResolve": "thyCheckStateResolve"; "thyType": "thyType"; "thySelectedKeys": "thySelectedKeys"; "thyCheckable": "thyCheckable"; "thySize": "thySize"; "thyBeforeDragStart": "thyBeforeDragStart"; "thyBeforeDragDrop": "thyBeforeDragDrop"; }, { "thyOnClick": "thyOnClick"; "thyOnCheckboxChange": "thyOnCheckboxChange"; "thyOnExpandChange": "thyOnExpandChange"; "thyOnDragDrop": "thyOnDragDrop"; }, ["templateRef", "emptyChildrenTemplate"], never>;
}
export {};

//# sourceMappingURL=tree.component.d.ts.map
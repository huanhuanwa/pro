{"version":3,"file":"tree.component.d.ts","sources":["tree.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ElementRef, TemplateRef, OnInit, OnChanges, EventEmitter, SimpleChanges } from '@angular/core';\nimport { ThyTreeNodeData, ThyTreeEmitEvent, ThyTreeDragDropEvent, ThyTreeIcons, ThyTreeNodeCheckState } from './tree.class';\nimport { ThyTreeService } from './tree.service';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { ThyDragDropEvent, ThyDragOverEvent, ThyDragStartEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\ndeclare type ThyTreeSize = 'sm' | '';\ndeclare type ThyTreeType = 'default' | 'especial';\nexport declare class ThyTreeComponent implements ControlValueAccessor, OnInit, OnChanges {\n    private elementRef;\n    private updateHostClassService;\n    thyTreeService: ThyTreeService;\n    private _templateRef;\n    private _emptyChildrenTemplateRef;\n    private _draggable;\n    private _expandedKeys;\n    private _selectedKeys;\n    _selectionModel: SelectionModel<ThyTreeNode>;\n    treeNodes: ThyTreeNode[];\n    set thyNodes(value: ThyTreeNodeData[]);\n    thyShowExpand: boolean | ((_: ThyTreeNodeData) => boolean);\n    thyMultiple: boolean;\n    set thyDraggable(value: boolean);\n    get thyDraggable(): boolean;\n    thyCheckable: boolean;\n    set thyCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState);\n    thyAsync: boolean;\n    private _thyType;\n    set thyType(type: ThyTreeType);\n    get thyType(): ThyTreeType;\n    thyIcons: ThyTreeIcons;\n    thySize: ThyTreeSize;\n    thyTitleTruncate: boolean;\n    set thySelectedKeys(keys: string[]);\n    thyBeforeDragStart: (e: ThyDragStartEvent) => boolean;\n    thyBeforeDragDrop: (e: ThyDragDropEvent) => boolean;\n    thyOnClick: EventEmitter<ThyTreeEmitEvent>;\n    thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent>;\n    thyOnExpandChange: EventEmitter<ThyTreeEmitEvent>;\n    thyOnDragDrop: EventEmitter<ThyTreeDragDropEvent>;\n    set templateRef(template: TemplateRef<any>);\n    get templateRef(): TemplateRef<any>;\n    emptyChildrenTemplate: TemplateRef<any>;\n    set emptyChildrenTemplateRef(template: TemplateRef<any>);\n    get emptyChildrenTemplateRef(): TemplateRef<any>;\n    thyTreeClass: boolean;\n    beforeDragOver: (event: ThyDragOverEvent<ThyTreeNode>) => any;\n    private _onTouched;\n    private _onChange;\n    constructor(elementRef: ElementRef, updateHostClassService: UpdateHostClassService, thyTreeService: ThyTreeService);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    private _setTreeType;\n    private _setTreeSize;\n    private _instanceSelectionModel;\n    private _selectTreeNodes;\n    isSelected(node: ThyTreeNode): boolean;\n    toggleTreeNode(node: ThyTreeNode): void;\n    trackByFn(index: number, item: any): any;\n    onDragStart(event: ThyDragStartEvent<ThyTreeNode>): void;\n    onDragDrop(event: ThyDragDropEvent<ThyTreeNode>): void;\n    isShowExpand(node: ThyTreeNode): any;\n    writeValue(value: ThyTreeNodeData[]): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    selectTreeNode(node: ThyTreeNode): void;\n    getRootNodes(): ThyTreeNode[];\n    getTreeNode(key: string): ThyTreeNode<any>;\n    getSelectedNode(): ThyTreeNode;\n    getSelectedNodes(): ThyTreeNode[];\n    getExpandedNodes(): ThyTreeNode[];\n    getCheckedNodes(): ThyTreeNode[];\n    addTreeNode(node: ThyTreeNodeData, parent?: ThyTreeNode, index?: number): void;\n    deleteTreeNode(node: ThyTreeNode): void;\n    expandAllNodes(): void;\n    collapsedAllNodes(): void;\n}\nexport {};\n"]}
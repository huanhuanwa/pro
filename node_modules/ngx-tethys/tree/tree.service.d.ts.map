{"version":3,"file":"tree.service.d.ts","sources":["tree.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { ThyTreeNodeCheckState } from './tree.class';\nimport { Subject } from 'rxjs';\nimport { ThyTreeNode } from './tree-node.class';\nexport declare class ThyTreeService implements OnDestroy {\n    treeNodes: ThyTreeNode[];\n    private checkStateResolve;\n    $statusChange: Subject<ThyTreeFormatEmitEvent>;\n    constructor();\n    private _getParallelTreeNodes;\n    setCheckStateResolve(resolve?: (node: ThyTreeNode) => ThyTreeNodeCheckState): void;\n    resetSortedTreeNodes(treeNodes: ThyTreeNode[], parent?: ThyTreeNode): void;\n    getTreeNode(key: string | number): ThyTreeNode<any>;\n    getExpandedNodes(): ThyTreeNode[];\n    getCheckedNodes(): ThyTreeNode[];\n    deleteTreeNode(node: ThyTreeNode): void;\n    expandTreeNodes(keyOrKeys: string | number | (string | number)[]): void;\n    statusChanged(): import(\"rxjs\").Observable<ThyTreeFormatEmitEvent>;\n    setNodeChecked(node: ThyTreeNode, checked: boolean, propagateUp?: boolean, propagateDown?: boolean): void;\n    syncNodeCheckState(node: ThyTreeNode): void;\n    ngOnDestroy(): void;\n}\nexport interface ThyTreeFormatEmitEvent {\n    eventName: string;\n    node: ThyTreeNode;\n    event?: MouseEvent | DragEvent;\n}\n"]}
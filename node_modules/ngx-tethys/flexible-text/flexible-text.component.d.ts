import { TemplateRef, ElementRef, OnInit, ViewContainerRef, OnDestroy, AfterContentInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { TooltipService } from 'ngx-tethys/tooltip';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ContentObserver } from '@angular/cdk/observers';
import { ThyPlacement } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
export declare class ThyFlexibleTextComponent implements OnInit, AfterContentInit, OnDestroy {
    private elementRef;
    private viewContainerRef;
    tooltipService: TooltipService;
    private updateHostClassService;
    private contentObserver;
    isOverflow: boolean;
    content: string | TemplateRef<HTMLElement>;
    placement: ThyPlacement;
    containerClass: string;
    subscription: Subscription | null;
    trigger: 'hover' | 'focus' | 'click';
    get thyContainerClass(): string;
    set thyContainerClass(value: string);
    set thyContent(value: string | TemplateRef<HTMLElement>);
    set thyPlacement(value: ThyPlacement);
    constructor(elementRef: ElementRef, viewContainerRef: ViewContainerRef, tooltipService: TooltipService, updateHostClassService: UpdateHostClassService, contentObserver: ContentObserver);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    applyOverflow(): void;
    updateContainerClass(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyFlexibleTextComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyFlexibleTextComponent, "thy-flexible-text,[thyFlexibleText]", ["thyFlexibleText"], { "thyContainerClass": "thyContainerClass"; "thyContent": "thyTooltipContent"; "thyPlacement": "thyTooltipPlacement"; "trigger": "thyTooltipTrigger"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=flexible-text.component.d.ts.map
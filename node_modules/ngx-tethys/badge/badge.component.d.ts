import { ElementRef, OnInit } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class ThyBadgeComponent implements OnInit {
    private elementRef;
    displayContent: string;
    badgeClassName: string;
    private nativeElement;
    private _initialized;
    private badgeClassNameMap;
    st: {
        value: number | string | any;
        isValueOfString: boolean;
        isSetValue: boolean;
        isValueKeepShow: boolean;
        max: {
            is: boolean;
            value: number;
        };
        isElement: boolean;
        isSup: boolean;
        isShowBadge: boolean;
    };
    textColor: string;
    backgroundColor: string;
    constructor(elementRef: ElementRef);
    containerClassName: boolean;
    set thyType(value: string);
    set thyCount(value: number);
    set thyContext(value: string);
    set thyMaxCount(value: number);
    set thySize(value: string);
    set thyIsDot(value: boolean);
    set thyIsHollow(value: boolean);
    set thyKeepShow(value: boolean);
    set thyTextColor(value: string);
    set thyBackgroundColor(value: string);
    ngOnInit(): void;
    private combineBadgeClassName;
    private combineBadgeDisplayContent;
    private explorationValueLength;
    private resetBadgeClassNameMap;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyBadgeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyBadgeComponent, "thy-badge,[thyBadge]", never, { "thyType": "thyType"; "thyCount": "thyCount"; "thyContext": "thyContext"; "thyMaxCount": "thyMaxCount"; "thySize": "thySize"; "thyIsDot": "thyIsDot"; "thyIsHollow": "thyIsHollow"; "thyKeepShow": "thyKeepShow"; "thyTextColor": "thyTextColor"; "thyBackgroundColor": "thyBackgroundColor"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=badge.component.d.ts.map
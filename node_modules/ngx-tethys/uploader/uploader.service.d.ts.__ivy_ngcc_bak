import { Observable } from 'rxjs';
import { HttpClient, XhrFactory } from '@angular/common/http';
export declare enum ThyUploadStatus {
    pending = "pending",
    started = "started",
    uploading = "uploading",
    done = "done"
}
export interface ThyUploadResponse {
    status: ThyUploadStatus;
    uploadFile?: ThyUploadFile;
}
export interface ThyUploadFile {
    identifier?: string;
    method: string;
    url: string;
    withCredentials?: boolean;
    nativeFile: File;
    fileField?: string;
    fileName?: string;
    headers?: {
        [key: string]: string;
    };
    data?: {
        [key: string]: string;
    };
    responseStatus?: any;
    response?: any;
    responseHeaders?: any;
    progress?: {
        status: ThyUploadStatus;
        percentage: number;
        speed?: number;
        speedHuman?: string;
        startTime: number | null;
        endTime?: number | null;
        estimatedTime?: number | null;
        estimatedTimeHuman?: string | null;
    };
}
export interface ThyUploadFilesOptions {
    onStarted?: (item: ThyUploadFile) => void;
    onDone?: (item: ThyUploadFile) => void;
}
export declare class ThyUploaderService {
    private http;
    private xhrFactory;
    constructor(http: HttpClient, xhrFactory: XhrFactory);
    private secondsToHuman;
    private humanizeBytes;
    private normalizeUploadFiles;
    private uploadByXhr;
    private ensureFileName;
    /**
     * 上传单个文件
     * @param uploadFile 上传文件对象
     */
    upload(uploadFile: ThyUploadFile): Observable<ThyUploadResponse>;
    /**
     * 并发上传多个文件
     * @param uploadFiles 上传文件列表
     * @param concurrent 并发上传数, 默认 5
     * @param options onStared, onDone 回调
     */
    uploadBulk(uploadFiles: ThyUploadFile[], concurrent?: number, options?: ThyUploadFilesOptions): Observable<ThyUploadResponse>;
}

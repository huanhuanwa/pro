{"version":3,"file":"dialog-container.component.d.ts","sources":["dialog-container.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { CdkPortalOutlet } from '@angular/cdk/portal';\nimport { AnimationEvent } from '@angular/animations';\nimport { ThyDialogConfig } from './dialog.config';\nimport { ThyClickPositioner } from 'ngx-tethys/core';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ThyAbstractOverlayContainer } from 'ngx-tethys/core';\nimport { Observable } from 'rxjs';\nexport declare class ThyDialogContainerComponent extends ThyAbstractOverlayContainer implements OnDestroy {\n    private elementRef;\n    private document;\n    config: ThyDialogConfig;\n    private clickPositioner;\n    private focusTrapFactory;\n    animationOpeningDone: Observable<AnimationEvent>;\n    animationClosingDone: Observable<AnimationEvent>;\n    portalOutlet: CdkPortalOutlet;\n    id: string;\n    /** State of the dialog animation. */\n    animationState: 'void' | 'enter' | 'exit';\n    /** Emits when an animation state changes. */\n    animationStateChanged: EventEmitter<AnimationEvent>;\n    /** ID of the element that should be considered as the dialog's label. */\n    ariaLabelledBy: string | null;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    private elementFocusedBeforeDialogWasOpened;\n    /** The class that traps and manages focus within the dialog. */\n    private focusTrap;\n    private savePreviouslyFocusedElement;\n    /** Moves the focus inside the focus trap. */\n    private trapFocus;\n    private restoreFocus;\n    private setTransformOrigin;\n    constructor(elementRef: ElementRef, document: any, config: ThyDialogConfig, changeDetectorRef: ChangeDetectorRef, clickPositioner: ThyClickPositioner, focusTrapFactory: FocusTrapFactory);\n    beforeAttachPortal(): void;\n    /** Callback, invoked whenever an animation on the host completes. */\n    onAnimationDone(event: AnimationEvent): void;\n    /** Callback, invoked when an animation on the host starts. */\n    onAnimationStart(event: AnimationEvent): void;\n    ngOnDestroy(): void;\n}\n"]}
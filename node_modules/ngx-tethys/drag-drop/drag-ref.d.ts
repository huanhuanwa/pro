import { NgZone, ElementRef } from '@angular/core';
import { Subject } from 'rxjs';
import { ThyDragHandleDirective } from './drag-handle.directive';
import { ThyDragDropService } from './drag-drop.service';
import { ThyDragStartEvent, ThyDragEndEvent, ThyDragOverEvent, ThyDragDropEvent } from './drag-drop.class';
import { ThyDragDirective } from './drag.directive';
import { IThyDropContainerDirective } from './drop-container.class';
export declare class DragRef<T = any> {
    private drag;
    private container;
    private dragDropService;
    private document;
    private ngZone;
    private rootElement;
    private contentElement;
    private target;
    private handles;
    private ngUnsubscribe$;
    started: Subject<ThyDragStartEvent<any>>;
    ended: Subject<ThyDragEndEvent<any>>;
    overed: Subject<ThyDragOverEvent<any>>;
    dropped: Subject<ThyDragDropEvent<any>>;
    entered: Subject<DragEvent>;
    leaved: Subject<DragEvent>;
    private _disabled;
    get disabled(): boolean;
    set disabled(value: boolean);
    constructor(element: ElementRef<HTMLElement> | HTMLElement, drag: ThyDragDirective, container: IThyDropContainerDirective<T>, dragDropService: ThyDragDropService<T>, document: any, ngZone: NgZone);
    withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this;
    withContentElement(contentElement: ElementRef<HTMLElement> | HTMLElement): this;
    withHandles(handleOrHandles: ThyDragHandleDirective | ThyDragHandleDirective[]): this;
    private registerDragDropEvents;
    private dragStart;
    private isTriggerHandle;
    private getPreviousEventData;
    private isContinueDragOver;
    private dragOver;
    private dragOverHandler;
    private dragDrop;
    private dragEnd;
    private dragLeave;
    private clearDragPositionClass;
    private calcDropPosition;
    dispose(): void;
}

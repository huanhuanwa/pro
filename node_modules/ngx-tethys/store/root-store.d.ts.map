{"version":3,"file":"root-store.d.ts","sources":["root-store.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { Store } from './store';\nexport declare type StoreInstanceMap = Map<string, Store<any>>;\n/**\n * @internal\n */\nexport declare class RootStore {\n    private connectSuccessed;\n    /**\n     * 数据流 数据是一个Map，k,v键值对，关键字->状态数据\n     */\n    private readonly _containers;\n    private _plugin;\n    private _combinedStateSubscription;\n    constructor();\n    private _assignCombinedState;\n    /**\n     * 合并数据流\n     * 合并状态数据，把状态数据转换为这样的数据：{ containerName: string, state: any }，并且\n     * 通过combineLatest合并成一个数据数据流，这样状态数据只有涉及更新，那么这边就会得到通知\n     * @param containers 状态数据的Map\n     */\n    private _getCombinedState;\n    /**\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @internal\n     */\n    registerStore(store: Store<any>): void;\n    existStoreInstanceId(instanceId: string): boolean;\n    /**\n     * @internal\n     */\n    unregisterStore(store: Store<any>): void;\n}\nexport declare function getSingletonRootStore(): RootStore;\n"]}
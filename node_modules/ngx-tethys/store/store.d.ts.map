{"version":3,"file":"store.d.ts","sources":["store.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable, Observer, BehaviorSubject, Subscription } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nexport declare class Store<T = unknown> implements Observer<T>, OnDestroy {\n    initialStateCache: any;\n    state$: BehaviorSubject<T>;\n    reduxToolEnabled: boolean;\n    private _defaultStoreInstanceId;\n    constructor(initialState: any);\n    get snapshot(): T;\n    dispatch(type: string, payload?: any): Observable<any>;\n    private _dispatch;\n    select<TResult>(selector: (state: T) => TResult): Observable<TResult> | Observable<TResult>;\n    next(state: T): void;\n    error(error: any): void;\n    complete(): void;\n    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n    /**\n     * set store new state\n     *\n     * @example\n     * this.setState(newState);\n     * this.setState({ users: produce(this.snapshot.users).add(user) });\n     * this.setState((state) => {\n     *    return {\n     *        users: produce(state.users).add(user)\n     *    }\n     * });\n     * @param fn\n     */\n    setState(fn: Partial<T> | ((newState: T) => Partial<T>)): void;\n    getState(): T;\n    clearState(): void;\n    ngOnDestroy(): void;\n    /**\n     * You can override this method if you want to give your container instance a custom id.\n     * The returned id must be unique in the application.\n     */\n    getStoreInstanceId(): string;\n    private _getClassName;\n}\n"]}
import { Store } from './store';
import { Id, PaginationInfo } from 'ngx-tethys/types';
import { ReferenceArrayExtractAllowKeys } from 'ngx-tethys/util';
export interface EntityStoreOptions<TEntity = unknown, TReferences = unknown> {
    idKey?: string;
    referencesIdKeys?: ReferenceArrayExtractAllowKeys<TReferences>;
}
export interface EntityAddOptions {
    prepend?: boolean;
    autoGotoLastPage?: boolean;
}
export interface EntityState<TEntity, TReferences = unknown> {
    pagination?: PaginationInfo;
    entities: TEntity[];
    references?: TReferences;
}
export declare class EntityStore<TState extends EntityState<TEntity, TReferences>, TEntity, TReferences = unknown> extends Store<TState> {
    protected options: EntityStoreOptions<TEntity, TReferences>;
    private internalReferencesIdMap;
    get entities(): TEntity[];
    entities$: import("rxjs").Observable<TEntity[]>;
    entitiesWithRefs$: import("rxjs").Observable<TEntity[]>;
    private resetPagination;
    private increasePagination;
    private decreasePagination;
    private buildReferencesIdMap;
    constructor(initialState?: EntityState<TEntity, TReferences>, options?: EntityStoreOptions<TEntity, TReferences>);
    /**
     *
     * Replace current collection with provided collection
     *
     * @example
     * this.store.initialize([Entity, Entity], pagination: PaginationInfo);
     *
     */
    initialize(entities: TEntity[], pagination?: PaginationInfo): void;
    /**
     *
     * Replace current collection with provided collection with references
     *
     * @example
     * this.store.initializeWithReferences([Entity, Entity], references: TReferences, pagination: PaginationInfo);
     *
     */
    initializeWithReferences(entities: TEntity[], references: TReferences, pagination?: PaginationInfo): void;
    /**
     * Add entity or entities for internal
     * @param entity
     * @param references
     * @param addOptions
     */
    private addInternal;
    /**
     * Add an entity or entities to the store.
     *
     * @example
     * this.store.add(Entity);
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity, { prepend: true });
     */
    add(entity: TEntity | TEntity[], addOptions?: EntityAddOptions): void;
    /**
     * Add an entity or entities to the store with references.
     *
     * @example
     * this.store.add(Entity);
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity, { prepend: true });
     */
    addWithReferences(entity: TEntity | TEntity[], references: Partial<TReferences>, addOptions?: EntityAddOptions): void;
    /**
     *
     * Update an entity or entities in the store.
     *
     * @example
     * this.store.update(3, {
     *   name: 'New Name'
     * }, references);
     *
     *  this.store.update(3, entity => {
     *    return {
     *      ...entity,
     *      name: 'New Name'
     *    }
     *  }, references);
     *
     * this.store.update([1,2,3], {
     *   name: 'New Name'
     * }, references);
     */
    private updateInternal;
    /**
     *
     * Update an entity or entities in the store with references.
     *
     * @example
     * this.store.update(3, {
     *   name: 'New Name'
     * }, references);
     *
     *  this.store.update(3, entity => {
     *    return {
     *      ...entity,
     *      name: 'New Name'
     *    }
     *  }, references);
     *
     * this.store.update([1,2,3], {
     *   name: 'New Name'
     * }, references);
     */
    update(idsOrFn: Id | Id[] | null, newStateOrFn: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>): void;
    /**
     *
     * Update an entity or entities in the store with references.
     *
     * @example
     * this.store.updateWithReferences(3, {
     *   name: 'New Name'
     * }, references);
     *
     *  this.store.updateWithReferences(3, entity => {
     *    return {
     *      ...entity,
     *      name: 'New Name'
     *    }
     *  }, references);
     *
     * this.store.updateWithReferences([1,2,3], {
     *   name: 'New Name'
     * }, references);
     */
    updateWithReferences(idsOrFn: Id | Id[] | null, newStateOrFn: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>, references: TReferences): void;
    /**
     *
     * Remove one or more entities from the store:
     *
     * @example
     * this.store.remove(5);
     * this.store.remove([1,2,3]);
     * this.store.remove(entity => entity.id === 1);
     */
    remove(id: Id | Id[]): void;
    remove(predicate: (entity: Readonly<TEntity>) => boolean): void;
    trackBy: (_index: number, entity: TEntity) => any;
    clearPagination(): void;
    clear(): void;
}

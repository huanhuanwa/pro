import { FunctionProp, TinyDate } from 'ngx-tethys/util';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { CompatibleDate, CompatibleValue, DisabledDateFn, PanelMode, SupportTimeOptions } from '../../standard-types';
import * as ɵngcc0 from '@angular/core';
export declare class DatePopupComponent implements OnChanges, OnInit {
    private cdr;
    isRange: boolean;
    showWeek: boolean;
    format: string;
    disabledDate: DisabledDateFn;
    minDate: Date | number;
    maxDate: Date | number;
    showToday: boolean;
    showTime: SupportTimeOptions | boolean;
    mustShowTime: boolean;
    dateRender: FunctionProp<TemplateRef<Date> | string>;
    className: string;
    panelMode: PanelMode | PanelMode[];
    value: CompatibleValue;
    defaultPickerValue: CompatibleDate | number;
    readonly panelModeChange: EventEmitter<"month" | "year" | "date" | "decade" | PanelMode[]>;
    readonly calendarChange: EventEmitter<TinyDate | TinyDate[]>;
    readonly valueChange: EventEmitter<TinyDate | TinyDate[]>;
    readonly resultOk: EventEmitter<void>;
    readonly showTimePickerChange: EventEmitter<boolean>;
    prefixCls: string;
    showTimePicker: boolean;
    timeOptions: SupportTimeOptions | SupportTimeOptions[] | null;
    valueForRangeShow: TinyDate[];
    selectedValue: TinyDate[];
    hoverValue: TinyDate[];
    private partTypeMap;
    [property: string]: any;
    constructor(cdr: ChangeDetectorRef);
    setProperty<T extends keyof DatePopupComponent>(key: T, value: this[T]): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    reInitializeRangeRelatedValue(): void;
    initDisabledDate(): void;
    onShowTimePickerChange(show: boolean): void;
    onClickOk(): void;
    onClickRemove(): void;
    onDayHover(value: TinyDate): void;
    onPanelModeChange(mode: PanelMode, partType?: RangePartType): void;
    onHeaderChange(value: TinyDate, partType?: RangePartType): void;
    onSelectTime(value: TinyDate, partType?: RangePartType): void;
    changeValueFromSelect(value: TinyDate): void;
    enablePrevNext(direction: 'prev' | 'next', partType?: RangePartType): boolean;
    getPanelMode(partType?: RangePartType): PanelMode;
    getValueBySelector(partType?: RangePartType): TinyDate;
    getPartTypeIndex(partType?: RangePartType): number;
    private clearHoverValue;
    private setValue;
    private normalizeRangeValue;
    private setRangeValue;
    private cloneRangeDate;
    private initialArray;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePopupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePopupComponent, "date-popup", ["datePopup"], { "value": "value"; "disabledDate": "disabledDate"; "panelMode": "panelMode"; "isRange": "isRange"; "showWeek": "showWeek"; "format": "format"; "minDate": "minDate"; "maxDate": "maxDate"; "showToday": "showToday"; "showTime": "showTime"; "mustShowTime": "mustShowTime"; "dateRender": "dateRender"; "className": "className"; "defaultPickerValue": "defaultPickerValue"; }, { "panelModeChange": "panelModeChange"; "calendarChange": "calendarChange"; "valueChange": "valueChange"; "resultOk": "resultOk"; "showTimePickerChange": "showTimePickerChange"; }, never, never>;
}
export declare type RangePartType = 'left' | 'right';

//# sourceMappingURL=date-popup.component.d.ts.map
import { ThyPlacement } from 'ngx-tethys/core';
import { ThyPopover, ThyPopoverConfig } from 'ngx-tethys/popover';
import { FunctionProp } from 'ngx-tethys/util';
import { Observable } from 'rxjs';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, TemplateRef } from '@angular/core';
import { AbstractPickerComponent } from './abstract-picker.component';
import { CompatibleValue, PanelMode } from './standard-types';
export declare abstract class PickerDirective extends AbstractPickerComponent implements AfterViewInit, OnDestroy, OnChanges {
    elementRef: ElementRef;
    cdr: ChangeDetectorRef;
    private thyPopover;
    showWeek: boolean;
    thyDateRender: FunctionProp<TemplateRef<Date> | string>;
    thyMode: PanelMode | PanelMode[];
    readonly thyOnPanelChange: EventEmitter<"month" | "year" | "date" | "decade" | PanelMode[]>;
    readonly thyOnCalendarChange: EventEmitter<Date[]>;
    private _showTime;
    get thyShowTime(): object | boolean;
    set thyShowTime(value: object | boolean);
    thyMustShowTime: boolean;
    thyPlacement: ThyPlacement;
    private offset;
    set thyOffset(value: number);
    private hasBackdrop;
    set thyHasBackdrop(value: boolean);
    thyPopoverOptions: ThyPopoverConfig;
    thyStopPropagation: boolean;
    private destroy$;
    private el;
    readonly $click: Observable<boolean>;
    private openOverlay;
    closeOverlay(): void;
    initActionSubscribe(): void;
    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, thyPopover: ThyPopover);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onValueChange(value: CompatibleValue): void;
    setDefaultTimePickerState(): void;
    restoreTimePickerState(value: CompatibleValue | null): void;
    onShowTimePickerChange(show: boolean): void;
}

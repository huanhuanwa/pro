{"version":3,"file":"abstract-picker.directive.d.ts","sources":["abstract-picker.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ThyPlacement } from 'ngx-tethys/core';\nimport { ThyPopover, ThyPopoverConfig } from 'ngx-tethys/popover';\nimport { FunctionProp } from 'ngx-tethys/util';\nimport { Observable } from 'rxjs';\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, TemplateRef } from '@angular/core';\nimport { AbstractPickerComponent } from './abstract-picker.component';\nimport { CompatibleValue, PanelMode } from './standard-types';\nexport declare abstract class PickerDirective extends AbstractPickerComponent implements AfterViewInit, OnDestroy, OnChanges {\n    elementRef: ElementRef;\n    cdr: ChangeDetectorRef;\n    private thyPopover;\n    showWeek: boolean;\n    thyDateRender: FunctionProp<TemplateRef<Date> | string>;\n    thyMode: PanelMode | PanelMode[];\n    readonly thyOnPanelChange: EventEmitter<\"month\" | \"year\" | \"date\" | \"decade\" | PanelMode[]>;\n    readonly thyOnCalendarChange: EventEmitter<Date[]>;\n    private _showTime;\n    get thyShowTime(): object | boolean;\n    set thyShowTime(value: object | boolean);\n    thyMustShowTime: boolean;\n    thyPlacement: ThyPlacement;\n    private offset;\n    set thyOffset(value: number);\n    private hasBackdrop;\n    set thyHasBackdrop(value: boolean);\n    thyPopoverOptions: ThyPopoverConfig;\n    thyStopPropagation: boolean;\n    private destroy$;\n    private el;\n    readonly $click: Observable<boolean>;\n    private openOverlay;\n    closeOverlay(): void;\n    initActionSubscribe(): void;\n    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, thyPopover: ThyPopover);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    onValueChange(value: CompatibleValue): void;\n    setDefaultTimePickerState(): void;\n    restoreTimePickerState(value: CompatibleValue | null): void;\n    onShowTimePickerChange(show: boolean): void;\n}\n"]}
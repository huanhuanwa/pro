{"version":3,"file":"abstract-picker.component.d.ts","sources":["abstract-picker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ThyPickerComponent } from './picker.component';\nimport { CompatibleDate, CompatibleValue, DateEntry, RangeEntry } from './standard-types';\nexport declare abstract class AbstractPickerComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\n    cdr: ChangeDetectorRef;\n    thyValue: CompatibleValue | null;\n    thyAllowClear: boolean;\n    thyAutoFocus: boolean;\n    thyDisabled: boolean;\n    thyOpen: boolean;\n    thyDisabledDate: (d: Date) => boolean;\n    thyMinDate: Date | number;\n    thyMaxDate: Date | number;\n    thyPlaceHolder: string | string[];\n    thyReadonly: boolean;\n    thyOriginClassName: string;\n    thyPanelClassName: string;\n    thySize: 'lg' | 'md' | 'sm' | 'xs' | 'default';\n    thyFormat: string;\n    thyAutoStartAndEnd: boolean;\n    thyDefaultPickerValue: CompatibleDate | number | null;\n    thySuffixIcon: string;\n    readonly thyOpenChange: EventEmitter<boolean>;\n    picker: ThyPickerComponent;\n    isRange: boolean;\n    withTime: boolean;\n    protected destroyed$: Subject<void>;\n    protected isCustomPlaceHolder: boolean;\n    private onlyEmitDate;\n    protected originWithTime: boolean;\n    get realOpenState(): boolean;\n    initValue(): void;\n    constructor(cdr: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    closeOverlay(): void;\n    onValueChange(originalValue: CompatibleValue): void;\n    setFormatRule(): void;\n    onOpenChange(open: boolean): void;\n    onChangeFn: (val: CompatibleDate | DateEntry | RangeEntry | number | null) => void;\n    onTouchedFn: () => void;\n    writeValue(originalValue: CompatibleDate): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setTimePickerState(withTime: boolean): void;\n    setDisabledState(disabled: boolean): void;\n    private setDefaultPlaceHolder;\n    setValue(value: CompatibleDate): void;\n}\n"]}
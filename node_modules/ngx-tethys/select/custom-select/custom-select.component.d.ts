import { ThyPlacement, UpdateHostClassService } from 'ngx-tethys/core';
import { IThyOptionParentComponent, SelectControlSize, ThyOptionComponent, ThyOptionSelectionChangeEvent, ThySelectOptionGroupComponent } from 'ngx-tethys/shared';
import { FunctionProp } from 'ngx-tethys/util';
import { Observable } from 'rxjs';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { SelectionModel } from '@angular/cdk/collections';
import { CdkConnectedOverlay, ConnectionPositionPair, Overlay, ScrollDispatcher, ScrollStrategy, ViewportRuler } from '@angular/cdk/overlay';
import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare type SelectMode = 'multiple' | '';
export declare type ThyCustomSelectTriggerType = 'click' | 'hover';
export declare const SELECT_PANEL_MAX_HEIGHT = 300;
export declare const SELECT_OPTION_MAX_HEIGHT = 40;
export declare const SELECT_OPTION_GROUP_MAX_HEIGHT = 30;
export declare const SELECT_PANEL_PADDING_TOP = 10;
export interface OptionValue {
    thyLabelText?: string;
    thyValue?: string;
    thyDisabled?: boolean;
    thyShowOptionCustom?: boolean;
    thySearchKey?: string;
}
export declare class ThySelectCustomComponent implements ControlValueAccessor, IThyOptionParentComponent, OnInit, AfterContentInit, OnDestroy {
    private ngZone;
    private elementRef;
    private updateHostClassService;
    private viewportRuler;
    private changeDetectorRef;
    private scrollDispatcher;
    private overlay;
    scrollStrategyFactory: FunctionProp<ScrollStrategy>;
    disabled: boolean;
    size: SelectControlSize;
    mode: SelectMode;
    emptyStateText: string;
    emptySearchMessageText: string;
    scrollTop: number;
    modalValue: any;
    defaultOffset: number;
    dropDownClass: {
        [key: string]: boolean;
    };
    dropDownPositions: ConnectionPositionPair[];
    selectionModel: SelectionModel<ThyOptionComponent>;
    triggerRect: ClientRect;
    scrollStrategy: ScrollStrategy;
    private selectionModelSubscription;
    private readonly destroy$;
    private onTouchedCallback;
    private onChangeCallback;
    readonly optionSelectionChanges: Observable<ThyOptionSelectionChangeEvent>;
    cdkConnectedOverlay: CdkConnectedOverlay;
    isSelectCustom: boolean;
    isSelect: boolean;
    keyManager: ActiveDescendantKeyManager<ThyOptionComponent>;
    panelOpen: boolean;
    tabIndex: string;
    thyOnSearch: EventEmitter<string>;
    thyOnScrollToBottom: EventEmitter<void>;
    thyOnExpandStatusChange: EventEmitter<boolean>;
    thyShowSearch: boolean;
    thyPlaceHolder: string;
    thyServerSearch: boolean;
    thyLoadState: boolean;
    set thyMode(value: SelectMode);
    get thyMode(): SelectMode;
    get thySize(): SelectControlSize;
    set thySize(value: SelectControlSize);
    set thyEmptyStateText(value: string);
    set thyEmptySearchMessageText(value: string);
    thyEnableScrollLoad: boolean;
    thyAllowClear: boolean;
    set thyDisabled(value: string);
    thySortComparator: (a: ThyOptionComponent, b: ThyOptionComponent, options: ThyOptionComponent[]) => number;
    thyFooterTemplate: TemplateRef<any>;
    thyPlacement: ThyPlacement;
    thyFooterClass: string;
    selectedValueDisplayRef: TemplateRef<any>;
    thyAutoExpand: boolean;
    thyHasBackdrop: boolean;
    trigger: ElementRef<any>;
    panel: ElementRef<any>;
    options: QueryList<ThyOptionComponent>;
    optionGroups: QueryList<ThySelectOptionGroupComponent>;
    handleKeydown(event: KeyboardEvent): void;
    onDocumentClick(event: Event): void;
    get optionsChanges$(): Observable<ThyOptionComponent[]>;
    private buildScrollStrategy;
    constructor(ngZone: NgZone, elementRef: ElementRef, updateHostClassService: UpdateHostClassService, viewportRuler: ViewportRuler, changeDetectorRef: ChangeDetectorRef, scrollDispatcher: ScrollDispatcher, overlay: Overlay, scrollStrategyFactory: FunctionProp<ScrollStrategy>);
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    get isHiddenOptions(): boolean;
    onAttached(): void;
    dropDownMouseMove(event: MouseEvent): void;
    onOptionsScrolled(elementRef: ElementRef): void;
    focus(options?: FocusOptions): void;
    onSearchFilter(searchText: string): void;
    remove($event: {
        item: ThyOptionComponent;
        $eventOrigin: Event;
    }): void;
    clearSelectValue(event?: Event): void;
    updateCdkConnectedOverlayPositions(): void;
    get selected(): ThyOptionComponent | ThyOptionComponent[];
    get isMultiple(): boolean;
    get empty(): boolean;
    getItemCount(): number;
    toggle(event: MouseEvent): void;
    open(): void;
    close(): void;
    private emitModelValueChange;
    private highlightCorrectOption;
    private initKeyManager;
    private handleClosedKeydown;
    private handleOpenKeydown;
    private getPositions;
    private instanceSelectionModel;
    private resetOptions;
    private initializeSelection;
    private setDropDownClass;
    private setSelectionByModelValue;
    private onSelect;
    private sortValues;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThySelectCustomComponent, [null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThySelectCustomComponent, "thy-custom-select", ["thyCustomSelect"], { "thyLoadState": "thyLoadState"; "thyEnableScrollLoad": "thyEnableScrollLoad"; "thyAllowClear": "thyAllowClear"; "thyPlacement": "thyPlacement"; "thyFooterClass": "thyFooterClass"; "thyHasBackdrop": "thyHasBackdrop"; "thyMode": "thyMode"; "thySize": "thySize"; "thyEmptyStateText": "thyEmptyStateText"; "thyEmptySearchMessageText": "thyEmptySearchMessageText"; "thyDisabled": "thyDisabled"; "thyShowSearch": "thyShowSearch"; "thyPlaceHolder": "thyPlaceHolder"; "thyServerSearch": "thyServerSearch"; "thySortComparator": "thySortComparator"; "thyFooterTemplate": "thyFooterTemplate"; "thyAutoExpand": "thyAutoExpand"; }, { "thyOnSearch": "thyOnSearch"; "thyOnScrollToBottom": "thyOnScrollToBottom"; "thyOnExpandStatusChange": "thyOnExpandStatusChange"; }, ["selectedValueDisplayRef", "options", "optionGroups"], ["*"]>;
}

//# sourceMappingURL=custom-select.component.d.ts.map
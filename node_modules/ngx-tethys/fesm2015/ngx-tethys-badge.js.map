{"version":3,"file":"ngx-tethys-badge.js","sources":["../../src/badge/badge.component.ts","../../src/badge/badge.module.ts","../../src/badge/ngx-tethys-badge.ts"],"names":[],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from 'ngx-tethys/util';\n\nimport { Component, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nconst BadgeMutexType = ['thy-badge-count', 'thy-badge-dot', 'thy-badge-hollow'];\nconst BadgeMutexTheme = ['thy-badge-primary', 'thy-badge-warning', 'thy-badge-danger', 'thy-badge-secondary'];\nconst BadgeMutexSize = ['thy-badge-lg', 'thy-badge-sm'];\n\n@Component({\n    selector: 'thy-badge,[thyBadge]',\n    templateUrl: './badge.component.html'\n})\nexport class ThyBadgeComponent implements OnInit {\n    displayContent = '';\n\n    badgeClassName = '';\n\n    private nativeElement: any;\n\n    private _initialized = false;\n\n    private badgeClassNameMap = {\n        'thy-badge-count': true,\n        'thy-badge-dot': false,\n        'thy-badge-hollow': false,\n        'thy-badge-lg': false,\n        'thy-badge-sm': false,\n        'thy-badge-danger': true,\n        'thy-badge-primary': false,\n        'thy-badge-warning': false,\n        'thy-badge-secondary': false,\n        'thy-badge-sup': true,\n        'thy-badge-multiple-words': false\n    };\n\n    st: {\n        value: number | string | any;\n        isValueOfString: boolean;\n        isSetValue: boolean;\n        isValueKeepShow: boolean;\n        max: {\n            is: boolean;\n            value: number;\n        };\n        isElement: boolean;\n        isSup: boolean;\n        isShowBadge: boolean;\n    } = {\n        value: '',\n        isValueOfString: false,\n        isSetValue: false,\n        isValueKeepShow: false,\n        max: {\n            is: false,\n            value: null\n        },\n        isElement: false,\n        isSup: false,\n        isShowBadge: true\n    };\n\n    public textColor: string;\n\n    public backgroundColor: string;\n\n    constructor(private elementRef: ElementRef) {\n        this.nativeElement = this.elementRef.nativeElement;\n        this.st.isElement = this.nativeElement.localName === 'thy-badge';\n    }\n\n    @HostBinding('class.thy-badge-container') containerClassName = true;\n\n    @Input()\n    set thyType(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n        switch (value) {\n            case 'danger':\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n            case 'primary':\n                this.badgeClassNameMap['thy-badge-primary'] = true;\n                break;\n            case 'warning':\n                this.badgeClassNameMap['thy-badge-warning'] = true;\n                break;\n            case 'secondary':\n                this.badgeClassNameMap['thy-badge-secondary'] = true;\n                break;\n            default:\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyCount(value: number) {\n        this.st.value = value;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyContext(value: string) {\n        this.st.value = value;\n        this.st.isValueOfString = true;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyMaxCount(value: number) {\n        this.st.max.is = true;\n        this.st.max.value = value;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thySize(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexSize);\n        switch (value) {\n            case 'lg':\n                this.badgeClassNameMap['thy-badge-lg'] = true;\n                break;\n            case 'sm':\n                this.badgeClassNameMap['thy-badge-sm'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsDot(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-dot'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsHollow(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-hollow'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyKeepShow(value: boolean) {\n        this.st.isValueKeepShow = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n        }\n    }\n\n    @Input()\n    set thyTextColor(value: string) {\n        this.textColor = value;\n    }\n\n    @Input()\n    set thyBackgroundColor(value: string) {\n        this.backgroundColor = value;\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n    }\n\n    ngOnInit() {\n        let childNodeCount = 0;\n        this.nativeElement.childNodes.forEach((n: HTMLElement) => {\n            if (['#comment'].indexOf(n.nodeName) < 0) {\n                childNodeCount++;\n            }\n        });\n        this.st.isSup = childNodeCount > 0;\n\n        this.combineBadgeClassName();\n\n        if (this.st.isSetValue) {\n            this.combineBadgeDisplayContent();\n        }\n\n        this._initialized = true;\n    }\n\n    private combineBadgeClassName() {\n        this.badgeClassNameMap['thy-badge-sup'] = this.st.isSup;\n        this.explorationValueLength();\n\n        const _badgeClassNames = [];\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (this.badgeClassNameMap[key]) {\n                    _badgeClassNames.push(key);\n                }\n            }\n        }\n        this.badgeClassName = _badgeClassNames.join(' ');\n    }\n\n    private combineBadgeDisplayContent() {\n        this.displayContent = this.st.value;\n        if (this.st.value && this.st.max.is && this.st.value > this.st.max.value) {\n            this.displayContent = `${this.st.max.value}+`;\n        }\n\n        if (!this.st.value && !this.st.isValueKeepShow) {\n            this.st.isShowBadge = false;\n        } else {\n            this.st.isShowBadge = true;\n        }\n    }\n\n    private explorationValueLength() {\n        if (this.st.value && this.st.value.toString().length > 1 && this.st.isSup) {\n            this.badgeClassNameMap['thy-badge-multiple-words'] = true;\n        }\n    }\n\n    private resetBadgeClassNameMap(mutexArray: any) {\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (mutexArray.includes(key)) {\n                    this.badgeClassNameMap[key] = false;\n                }\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyBadgeComponent } from './badge.component';\n\n@NgModule({\n    declarations: [\n        ThyBadgeComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        ThyBadgeComponent\n    ]\n})\n\nexport class ThyBadgeModule {\n        constructor() { }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
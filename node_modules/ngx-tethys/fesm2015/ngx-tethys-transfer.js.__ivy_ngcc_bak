import { EventEmitter, Component, ViewEncapsulation, HostBinding, Input, Output, ContentChild, IterableDiffers, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { moveItemInArray, transferArrayItem, DragDropModule } from '@angular/cdk/drag-drop';
import { ThyButtonModule } from 'ngx-tethys/button';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyListModule } from 'ngx-tethys/list';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyFlexibleTextModule } from 'ngx-tethys/flexible-text';

var TransferDirection;
(function (TransferDirection) {
    TransferDirection["left"] = "left";
    TransferDirection["right"] = "right";
})(TransferDirection || (TransferDirection = {}));

class ThyTransferComponent {
    constructor() {
        this.hostClass = 'thy-transfer';
        this.leftDataSource = [];
        this.rightDataSource = [];
        this.allDataSource = [];
        this.rightDraggable = false;
        this._autoMove = true;
        this.thyDraggableUpdate = new EventEmitter();
        this.thyChange = new EventEmitter();
    }
    set thyData(value) {
        if (value) {
            this.initializeTransferData(value);
        }
    }
    // @Input() transferToRight
    set thyTitles(value) {
        this.leftTitle = value[0] || '';
        this.rightTitle = value[1] || '';
    }
    // Currently not implemented, in order to support the selections move
    set thyAutoMove(value) {
        this._autoMove = value;
    }
    ngOnInit() { }
    initializeTransferData(data = []) {
        this.allDataSource = [];
        this.leftDataSource = [];
        this.rightDataSource = [];
        data.forEach(item => {
            this.allDataSource.push(item);
            if (item.direction === TransferDirection.left) {
                this.leftDataSource.push(item);
            }
            if (item.direction === TransferDirection.right) {
                this.rightDataSource.push(item);
            }
        });
    }
    onSelect(from, event) {
        if (event.item.isFixed) {
            return;
        }
        const to = from === TransferDirection.left ? TransferDirection.right : TransferDirection.left;
        event.item.checked = !event.item.checked;
        if (this._autoMove) {
            this.onMove(to);
        }
    }
    selectItem(event) {
        this.onSelect(TransferDirection.left, event);
    }
    unselectItem(event) {
        this.onSelect(TransferDirection.right, event);
    }
    groupListByIsLock(list = []) {
        const lock = [], unlock = [];
        list.forEach(item => {
            if (item.isLock) {
                lock.push(item);
            }
            else {
                unlock.push(item);
            }
        });
        return { lock: lock, unlock: unlock };
    }
    onMove(to) {
        const fromDataSource = to === TransferDirection.right ? this.leftDataSource : this.rightDataSource;
        const toDataSource = to === TransferDirection.right ? this.rightDataSource : this.leftDataSource;
        const selections = fromDataSource.filter(item => item.checked);
        const changeEvent = {
            from: to === TransferDirection.right ? TransferDirection.left : TransferDirection.right,
            to: to,
            items: [...selections]
        };
        selections.forEach(item => {
            const index = fromDataSource.indexOf(item);
            const removed = fromDataSource.splice(index, 1)[0];
            removed.checked = !removed.checked;
            removed.direction = to;
            toDataSource.push(removed);
        });
        this.thyChange.emit(Object.assign(Object.assign({}, changeEvent), { left: this.groupListByIsLock(this.leftDataSource), right: this.groupListByIsLock(this.rightDataSource) }));
    }
    onDragUpdate(direction, event) {
        const otherDirectionData = direction === TransferDirection.left ? this.rightDataSource : this.leftDataSource;
        const otherListData = this.groupListByIsLock(otherDirectionData);
        this.thyDraggableUpdate.emit(Object.assign(Object.assign({}, event.dragEvent), { left: direction === TransferDirection.left ? event.listData : otherListData, right: direction === TransferDirection.right ? event.listData : otherListData }));
    }
}
ThyTransferComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-transfer',
                template: "<thy-transfer-list\n  [items]=\"allDataSource\"\n  [title]=\"leftTitle\"\n  [draggable]=\"thyLeftDraggable\"\n  [renderContentRef]=\"leftContentRef\"\n  (draggableUpdate)=\"onDragUpdate('left', $event)\"\n  [template]=\"leftTemplateRef\"\n  (selectItem)=\"selectItem($event)\"\n  (unselectItem)=\"unselectItem($event)\"\n>\n  <ng-template #leftTemplateRef let-item>\n    <div (click)=\"onSelect(item.direction === 'left' ? 'left' : 'right', { item: item })\" class=\"list-item-content\">\n      <ng-container *ngIf=\"thyLeftDraggable\">\n        <thy-icon thyIconName=\"drag\" class=\"drag-handle\"></thy-icon>\n      </ng-container>\n      <div class=\"item-name\" [ngClass]=\"{ 'un-select-item': item.direction !== 'right' }\">\n        <ng-template [ngTemplateOutlet]=\"thyTransferListItem\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n      </div>\n      <thy-icon *ngIf=\"item.direction === 'right'\" class=\"text-primary item-status\" thyIconName=\"check\"></thy-icon>\n    </div>\n  </ng-template>\n</thy-transfer-list>\n\n<div class=\"thy-transfer-operation\">\n  <div class=\"thy-transfer-operation-body\">\n    <thy-icon thyIconName=\"angle-right\" class=\"operation-link\"></thy-icon>\n    <br />\n    <thy-icon thyIconName=\"angle-left\" class=\"operation-link\"></thy-icon>\n  </div>\n</div>\n\n<thy-transfer-list\n  [items]=\"rightDataSource\"\n  [title]=\"rightTitle\"\n  [draggable]=\"thyRightDraggable\"\n  (draggableUpdate)=\"onDragUpdate('right', $event)\"\n  [canLock]=\"thyRightCanLock\"\n  [maxLock]=\"thyRightLockMax\"\n  [template]=\"rightTemplateRef\"\n  [renderContentRef]=\"rightContentRef\"\n  (selectItem)=\"selectItem($event)\"\n  (unselectItem)=\"unselectItem($event)\"\n>\n  <ng-template #rightTemplateRef let-item>\n    <ng-container *ngIf=\"thyRightDraggable\">\n      <thy-icon thyIconName=\"drag\" class=\"drag-handle\"></thy-icon>\n    </ng-container>\n    <div class=\"item-name\">\n      <ng-template [ngTemplateOutlet]=\"thyTransferListItem\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n    </div>\n    <a class=\"link-secondary\" *ngIf=\"item.direction === 'right' && !item.isFixed\" (click)=\"onSelect('right', { item: item })\">\n      <thy-icon class=\"item-status\" thyIconName=\"close\"></thy-icon>\n    </a>\n  </ng-template>\n</thy-transfer-list>\n\n<ng-template #thyTransferListItem let-item>\n  <ng-template *ngIf=\"templateRef\" [ngTemplateOutlet]=\"templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n  <ng-container *ngIf=\"!templateRef\">\n    <thy-flexible-text [thyTooltipContent]=\"item.title\">\n      {{ item.title }}\n    </thy-flexible-text>\n  </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTransferComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }],
    thyData: [{ type: Input }],
    thyrenderLeftTemplateRef: [{ type: Input }],
    thyrenderRightTemplateRef: [{ type: Input }],
    thyTitles: [{ type: Input }],
    thyRightCanLock: [{ type: Input }],
    thyRightLockMax: [{ type: Input }],
    thyAutoMove: [{ type: Input }],
    thyLeftDraggable: [{ type: Input }],
    thyRightDraggable: [{ type: Input }],
    thyDraggableUpdate: [{ type: Output }],
    thyChange: [{ type: Output }],
    templateRef: [{ type: ContentChild, args: ['renderTemplate',] }],
    leftContentRef: [{ type: ContentChild, args: ['renderLeftTemplate',] }],
    rightContentRef: [{ type: ContentChild, args: ['renderRightTemplate',] }]
};

class ThyTransferListComponent {
    constructor(root, differs) {
        this.root = root;
        this.differs = differs;
        this.lockItems = [];
        this.unlockItems = [];
        this.draggableUpdate = new EventEmitter();
        this.selectItem = new EventEmitter();
        this.unselectItem = new EventEmitter();
        this.hostClass = 'thy-transfer-list';
        this.lockListEnterPredicate = () => {
            return this.lockItems.length < this.maxLock;
        };
        this.onSelectItem = (item) => {
            this.selectItem.emit({ item });
        };
        this.onUnselectItem = (item) => {
            this.unselectItem.emit({ item });
        };
    }
    ngOnInit() {
        this._combineTransferData();
        if (this.canLock) {
            this._lockDiff = this.differs.find(this.lockItems).create();
            this._unlockDiff = this.differs.find(this.unlockItems).create();
        }
        else {
            this._unlockDiff = this.differs.find(this.unlockItems).create();
        }
        this._diff = this.differs.find(this.items).create();
    }
    _combineTransferData() {
        this.lockItems = [];
        this.unlockItems = [];
        if (this.canLock) {
            (this.items || []).forEach(item => {
                if (item.isLock) {
                    this.lockItems.push(item);
                }
                else {
                    this.unlockItems.push(item);
                }
            });
        }
        else {
            this.unlockItems = this.items;
        }
    }
    _afterChangeItems(changes, items) {
        // 数据发生变化时，更改order值
        changes.forEachAddedItem(record => {
            record.item.order = record.currentIndex;
        });
        changes.forEachRemovedItem(() => {
            items.forEach((item, index) => {
                item.order = index;
            });
        });
        changes.forEachMovedItem(() => {
            items.forEach((item, index) => {
                item.order = index;
            });
        });
    }
    ngDoCheck() {
        const changes = this._diff.diff(this.items);
        if (changes) {
            this._afterChangeItems(changes, this.items);
            this._combineTransferData();
        }
        if (this._lockDiff) {
            const lockChanges = this._lockDiff.diff(this.lockItems);
            if (lockChanges) {
                this._afterChangeItems(lockChanges, this.lockItems);
            }
        }
        const unlockChanges = this._unlockDiff.diff(this.unlockItems);
        if (unlockChanges) {
            this._afterChangeItems(unlockChanges, this.unlockItems);
        }
    }
    drop(event) {
        if (event.previousContainer === event.container) {
            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
        }
        else {
            transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);
            (event.previousContainer.data || []).forEach(item => {
                item.isLock = event.previousContainer.id === 'lock';
            });
            (event.container.data || []).forEach(item => {
                item.isLock = event.container.id === 'lock';
            });
        }
        const dragEvent = {
            model: event.item.data,
            models: event.container.data,
            oldIndex: event.previousIndex,
            newIndex: event.currentIndex
        };
        this.draggableUpdate.emit({
            dragEvent: dragEvent,
            listData: { lock: this.lockItems, unlock: this.unlockItems }
        });
    }
}
ThyTransferListComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-transfer-list',
                template: "<div class=\"thy-transfer-list-header\">\n  <span class=\"thy-transfer-list-header-title\">{{ title }} \u00B7 {{ items?.length }}</span>\n</div>\n<ng-container *ngIf=\"!contentRef; else renderContent\">\n  <div class=\"thy-transfer-list-body\" cdkDropListGroup [cdkDropListGroupDisabled]=\"!draggable\">\n    <ng-container *ngIf=\"canLock\">\n      <div class=\"thy-transfer-list-group-name\">\u9501\u5B9A (\u4E0A\u9650{{ maxLock }}\u4E2A)</div>\n      <thy-list\n        class=\"thy-transfer-list-content\"\n        cdkDropList\n        thyDragDrop\n        id=\"lock\"\n        [cdkDropListData]=\"lockItems\"\n        (cdkDropListDropped)=\"drop($event)\"\n        [cdkDropListEnterPredicate]=\"lockListEnterPredicate\"\n      >\n        <div class=\"cdk-drop-list-empty\" *ngIf=\"lockItems.length === 0\"></div>\n        <thy-list-item\n          class=\"thy-transfer-list-content-item text-truncate\"\n          cdkDrag\n          [cdkDragData]=\"item\"\n          *ngFor=\"let item of lockItems\"\n          [ngClass]=\"{ active: item.checked }\"\n        >\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n        </thy-list-item>\n      </thy-list>\n\n      <div class=\"thy-transfer-list-group-name\">\u672A\u9501\u5B9A</div>\n    </ng-container>\n    <thy-list\n      class=\"thy-transfer-list-content\"\n      cdkDropList\n      thyDragDrop\n      [cdkDropListDisabled]=\"!draggable\"\n      id=\"unlock\"\n      [cdkDropListData]=\"unlockItems\"\n      (cdkDropListDropped)=\"drop($event)\"\n    >\n      <div class=\"cdk-drop-list-empty\" *ngIf=\"unlockItems.length === 0\"></div>\n      <thy-list-item\n        class=\"thy-transfer-list-content-item text-truncate\"\n        cdkDrag\n        [cdkDragData]=\"item\"\n        *ngFor=\"let item of unlockItems\"\n        [ngClass]=\"{ active: item.checked }\"\n      >\n        <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n      </thy-list-item>\n    </thy-list>\n  </div>\n</ng-container>\n\n<ng-template #renderContent>\n  <div class=\"thy-transfer-list-body\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        contentRef;\n        context: {\n          $implicit: items,\n          onSelectItem: onSelectItem,\n          onUnselectItem: onUnselectItem\n        }\n      \"\n    ></ng-container>\n  </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTransferListComponent.ctorParameters = () => [
    { type: ThyTransferComponent },
    { type: IterableDiffers }
];
ThyTransferListComponent.propDecorators = {
    title: [{ type: Input }],
    items: [{ type: Input }],
    draggable: [{ type: Input }],
    canLock: [{ type: Input }],
    maxLock: [{ type: Input }],
    template: [{ type: Input }],
    contentRef: [{ type: Input, args: ['renderContentRef',] }],
    draggableUpdate: [{ type: Output }],
    selectItem: [{ type: Output }],
    unselectItem: [{ type: Output }],
    hostClass: [{ type: HostBinding, args: ['class',] }]
};

class ThyTransferModule {
}
ThyTransferModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyTransferComponent, ThyTransferListComponent],
                imports: [CommonModule, ThyButtonModule, DragDropModule, ThyIconModule, ThyListModule, ThySharedModule, ThyFlexibleTextModule],
                exports: [ThyTransferComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyTransferComponent, ThyTransferListComponent, ThyTransferModule, TransferDirection };
//# sourceMappingURL=ngx-tethys-transfer.js.map

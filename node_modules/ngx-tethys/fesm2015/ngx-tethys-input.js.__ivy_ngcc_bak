import { Directive, ElementRef, Renderer2, HostBinding, Input, forwardRef, EventEmitter, Component, ViewEncapsulation, NgZone, Output, ContentChild, ViewChild, ChangeDetectorRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UpdateHostClassService, ThyTranslate } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { take } from 'rxjs/operators';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyIconModule } from 'ngx-tethys/icon';

const inputGroupSizeMap$1 = {
    xs: ['form-control-xs'],
    sm: ['form-control-sm'],
    md: ['form-control-md'],
    lg: ['form-control-lg']
};
class ThyInputDirective {
    constructor(updateHostClassService, elementRef, render) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.render = render;
        this._isFormControl = true;
        this.initialized = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        if (size && inputGroupSizeMap$1[size]) {
            this.updateHostClassService.updateClass(inputGroupSizeMap$1[size]);
        }
        else {
            this.updateHostClassService.updateClass([]);
        }
    }
    set thyAutocomplete(value) {
        this.autocomplete = coerceBooleanProperty(value);
        if (this.initialized) {
            this.setAutocomplete();
        }
    }
    ngOnInit() {
        this.initialized = true;
        this.setAutocomplete();
    }
    setAutocomplete() {
        this.render.setAttribute(this.elementRef.nativeElement, 'autocomplete', this.autocomplete ? 'on' : 'off');
    }
}
ThyInputDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyInput]',
                providers: [UpdateHostClassService]
            },] }
];
ThyInputDirective.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: Renderer2 }
];
ThyInputDirective.propDecorators = {
    _isFormControl: [{ type: HostBinding, args: ['class.form-control',] }],
    thySize: [{ type: Input }],
    thyAutocomplete: [{ type: Input }]
};

const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => ThyInputComponent),
    multi: true
};
const noop$1 = () => { };
const ɵ0$1 = noop$1;
const password = 'password';
class ThyInputComponent {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.placeholder = '';
        this.thyAutofocus = false;
        this.readonly = false;
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this._type = 'text';
        this.onTouchedCallback = noop$1;
        this.onChangeCallback = noop$1;
        this._isSearchContainer = true;
        this._isFormControl = true;
        this._isFocus = false;
        this.disabled = false;
    }
    set thyType(value) {
        this.type = value;
    }
    set thyAutocomplete(value) {
        this.autocomplete = value;
    }
    ngOnInit() {
        this.ngZone.onStable.pipe(take(1)).subscribe(() => {
            if (this.isPassword(this.type)) {
                this.appendTemplate = this.eyeTemplate;
            }
        });
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onModelChange() {
        this.onChangeCallback(this.value);
    }
    onInputFocus(event) {
        this._isFocus = true;
        this.showLabel = true;
        this.focus.emit(event);
    }
    onInputBlur(event) {
        this._isFocus = false;
        this.showLabel = false;
        this.blur.emit(event);
    }
    isPassword(value) {
        return value === password;
    }
    togglePasswordType() {
        this.type = this.isPassword(this.type) ? 'text' : 'password';
    }
}
ThyInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-input',
                template: "<div #prepend class=\"input-prepend\" *ngIf=\"prependTemplate\">\n  <ng-template *ngTemplateOutlet=\"prependTemplate\"></ng-template>\n</div>\n<span class=\"input-label input-label-{{ thySize }}\" [class.active]=\"showLabel\">{{ thyLabelText }}</span>\n<input\n  #input\n  thyInput\n  [thySize]=\"thySize\"\n  [thyAutofocus]=\"thyAutofocus\"\n  [type]=\"type\"\n  [placeholder]=\"placeholder\"\n  [disabled]=\"disabled\"\n  [thyAutocomplete]=\"autocomplete\"\n  [(ngModel)]=\"value\"\n  (ngModelChange)=\"onModelChange()\"\n  (focus)=\"onInputFocus($event)\"\n  (blur)=\"onInputBlur($event)\"\n  [readonly]=\"readonly\"\n/>\n<div #append class=\"input-append\" *ngIf=\"appendTemplate\">\n  <ng-template *ngTemplateOutlet=\"appendTemplate\"></ng-template>\n</div>\n\n<ng-template #eye>\n  <a href=\"javascript:;\" class=\"link-secondary input-password-icon\" (click)=\"togglePasswordType()\">\n    <thy-icon *ngIf=\"isPassword(type)\" thyIconName=\"eye\"></thy-icon>\n    <thy-icon *ngIf=\"!isPassword(type)\" thyIconName=\"eye-invisible\"></thy-icon>\n  </a>\n</ng-template>\n",
                providers: [UpdateHostClassService, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyInputComponent.ctorParameters = () => [
    { type: NgZone }
];
ThyInputComponent.propDecorators = {
    placeholder: [{ type: Input }],
    thySize: [{ type: Input }],
    thyAutofocus: [{ type: Input }],
    type: [{ type: Input }],
    thyType: [{ type: Input }],
    thyLabelText: [{ type: Input }],
    readonly: [{ type: Input }],
    thyAutocomplete: [{ type: Input }],
    focus: [{ type: Output }],
    blur: [{ type: Output }],
    appendTemplate: [{ type: ContentChild, args: ['append',] }],
    prependTemplate: [{ type: ContentChild, args: ['prepend',] }],
    eyeTemplate: [{ type: ViewChild, args: ['eye', { static: true },] }],
    _isSearchContainer: [{ type: HostBinding, args: ['class.thy-input',] }],
    _isFormControl: [{ type: HostBinding, args: ['class.form-control',] }],
    _isFocus: [{ type: HostBinding, args: ['class.form-control-active',] }],
    disabled: [{ type: HostBinding, args: ['class.disabled',] }]
};

const inputGroupSizeMap = {
    sm: ['input-group-sm'],
    lg: ['input-group-lg']
};
class ThyInputGroupComponent {
    constructor(thyTranslate, updateHostClassService, elementRef) {
        this.thyTranslate = thyTranslate;
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this._isInputGroup = true;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thyAppendText(value) {
        this.appendText = value;
    }
    set thyAppendTextTranslateKey(value) {
        if (value) {
            this.appendText = this.thyTranslate.instant(value);
        }
    }
    set thyPrependText(value) {
        this.prependText = value;
    }
    set thyPrependTextTranslateKey(value) {
        if (value) {
            this.prependText = this.thyTranslate.instant(value);
        }
    }
    set thySize(size) {
        if (size && inputGroupSizeMap[size]) {
            this.updateHostClassService.updateClass(inputGroupSizeMap[size]);
        }
        else {
            this.updateHostClassService.updateClass([]);
        }
    }
}
ThyInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-input-group',
                template: "<div class=\"input-group-prepend\" *ngIf=\"prependText\">\n    <span class=\"input-group-text\">{{prependText}}</span>\n</div>\n<div class=\"input-group-prepend\" *ngIf=\"prependTemplate\">\n    <ng-template *ngTemplateOutlet=\"prependTemplate\"></ng-template>\n</div>\n<ng-content></ng-content>\n<div class=\"input-group-append\" *ngIf=\"appendText\">\n    <span class=\"input-group-text\">{{appendText}}</span>\n</div>\n<div class=\"input-group-append\" *ngIf=\"appendTemplate\">\n    <ng-template *ngTemplateOutlet=\"appendTemplate\"></ng-template>\n</div>",
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyInputGroupComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyInputGroupComponent.propDecorators = {
    _isInputGroup: [{ type: HostBinding, args: ['class.thy-input-group',] }],
    thyAppendText: [{ type: Input }],
    thyAppendTextTranslateKey: [{ type: Input }],
    thyPrependText: [{ type: Input }],
    thyPrependTextTranslateKey: [{ type: Input }],
    thySize: [{ type: Input }],
    appendTemplate: [{ type: ContentChild, args: ['append',] }],
    prependTemplate: [{ type: ContentChild, args: ['prepend',] }]
};

const CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => ThyInputSearchComponent),
    multi: true
};
const noop = () => { };
const ɵ0 = noop;
class ThyInputSearchComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.disabled = false;
        this.autoFocus = false;
        this._isSearchContainer = true;
        this._isSearchEllipse = false;
        this.name = '';
        this.placeholder = '';
        this.clear = new EventEmitter();
    }
    set thyTheme(value) {
        if (value === 'ellipse') {
            this._isSearchEllipse = true;
        }
    }
    set thySearchFocus(value) {
        this.autoFocus = value;
    }
    writeValue(value) {
        this.searchText = value;
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    searchModelChange() {
        this.onChangeCallback(this.searchText);
    }
    clearSearchText(event) {
        event.stopPropagation();
        if (this.disabled) {
            return;
        }
        this.searchText = '';
        this.onChangeCallback(this.searchText);
        this.clear.emit(event);
    }
}
ThyInputSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-input-search',
                template: "<thy-icon class=\"input-prefix-icon\" thyIconName=\"search\"></thy-icon>\n<input\n  class=\"input-search-control\"\n  thyInput\n  [name]=\"name\"\n  [placeholder]=\"placeholder\"\n  [disabled]=\"disabled\"\n  [thyAutofocus]=\"autoFocus\"\n  [(ngModel)]=\"searchText\"\n  (ngModelChange)=\"searchModelChange()\"\n  (blur)=\"onTouchedCallback()\"\n  [thySize]=\"thySize\"\n/>\n<a *ngIf=\"searchText\" class=\"close input-suffix-icon\" href=\"javascript:;\" (click)=\"clearSearchText($event)\">\n  <thy-icon thyIconName=\"close\"></thy-icon>\n</a>\n",
                providers: [UpdateHostClassService, CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyInputSearchComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyInputSearchComponent.propDecorators = {
    _isSearchContainer: [{ type: HostBinding, args: ['class.input-search-container',] }],
    _isSearchEllipse: [{ type: HostBinding, args: ['class.input-search-ellipse',] }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    thyTheme: [{ type: Input }],
    thySearchFocus: [{ type: Input }],
    thySize: [{ type: Input }],
    clear: [{ type: Output }]
};

class ThyInputModule {
}
ThyInputModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, ThySharedModule, ThyIconModule],
                declarations: [ThyInputDirective, ThyInputComponent, ThyInputGroupComponent, ThyInputSearchComponent],
                exports: [ThyInputDirective, ThyInputComponent, ThyInputGroupComponent, ThyInputSearchComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR, CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR, ThyInputComponent, ThyInputDirective, ThyInputGroupComponent, ThyInputModule, ThyInputSearchComponent, ɵ0 };
//# sourceMappingURL=ngx-tethys-input.js.map

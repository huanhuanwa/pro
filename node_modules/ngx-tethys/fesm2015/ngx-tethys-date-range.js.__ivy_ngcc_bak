import { ThyIconModule } from 'ngx-tethys/icon';
import { Component, forwardRef, ChangeDetectorRef, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { ThyPopover } from 'ngx-tethys/popover';
import { getUnixTime, startOfISOWeek, endOfISOWeek, startOfMonth, endOfMonth, addDays, addMonths, addYears } from 'date-fns';
import { ThyActionMenuModule } from 'ngx-tethys/action-menu';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyDatePickerModule } from 'ngx-tethys/date-picker';
import { ThyNavModule } from 'ngx-tethys/nav';

class OptionalDateRangesComponent {
    constructor(thyPopover) {
        this.thyPopover = thyPopover;
        this.hiddenMenu = false;
        this.customValue = '自定义';
    }
    ngOnInit() { }
    _selectDateRange(dateRange) {
        this.selectedDate = dateRange;
        this.selectedDateRange(dateRange);
        this.thyPopover.close();
    }
    _selectedCustomDate(date) {
        this.selectedDate = {
            begin: date.begin,
            end: date.end,
            key: this.customKey,
            text: this.customValue
        };
        this.selectedDateRange(this.selectedDate);
    }
}
OptionalDateRangesComponent.decorators = [
    { type: Component, args: [{
                selector: 'date-range-optional',
                template: "<thy-action-menu *ngIf=\"!hiddenMenu\" class=\"thy-date-range-action-menu-container\">\n  <a thyActionMenuItem href=\"javascript:;\" *ngFor=\"let dateRange of optionalDateRanges\" (click)=\"_selectDateRange(dateRange)\">\n    <span thyActionMenuItemName>{{ dateRange?.text }}</span>\n    <span thyActionMenuItemExtendIcon *ngIf=\"dateRange.key === selectedDate?.key\">\n      <thy-icon class=\"text-primary\" thyIconName=\"check\"></thy-icon>\n    </span>\n  </a>\n  <a\n    thyActionMenuItem\n    href=\"javascript:;\"\n    thyRangePicker\n    [(ngModel)]=\"selectedDate\"\n    [thyMinDate]=\"minDate\"\n    [thyMaxDate]=\"maxDate\"\n    (ngModelChange)=\"_selectedCustomDate($event)\"\n  >\n    <span thyActionMenuItemName>{{ customValue }}</span>\n    <span thyActionMenuItemExtendIcon *ngIf=\"customKey === selectedDate?.key\">\n      <thy-icon class=\"text-primary\" thyIconName=\"check\"></thy-icon>\n    </span>\n  </a>\n</thy-action-menu>\n"
            },] }
];
OptionalDateRangesComponent.ctorParameters = () => [
    { type: ThyPopover }
];

const allDayTimestamp = 24 * 60 * 60;
const INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => ThyDateRangeComponent),
    multi: true
};
class ThyDateRangeComponent {
    constructor(thyPopover, cdr) {
        this.thyPopover = thyPopover;
        this.cdr = cdr;
        this.thyHiddenMenu = false;
        this.thyDisabledSwitch = false;
        this.thyCustomTextValue = '自定义';
        this.thyCustomKey = 'custom';
        this.optionalDateRanges = [
            {
                key: 'week',
                text: '本周',
                begin: getUnixTime(startOfISOWeek(new Date())),
                end: getUnixTime(endOfISOWeek(new Date())),
                timestamp: {
                    interval: 7,
                    unit: 'day'
                }
            },
            {
                key: 'month',
                text: '本月',
                begin: getUnixTime(startOfMonth(new Date())),
                end: getUnixTime(endOfMonth(new Date())),
                timestamp: {
                    interval: 1,
                    unit: 'month'
                }
            }
        ];
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    set thyOptionalDateRanges(value) {
        this.optionalDateRanges = value.length > 0 ? value : this.optionalDateRanges;
    }
    writeValue(value) {
        if (value) {
            this.selectedDate = value;
        }
        else if (this.optionalDateRanges.length > 0) {
            this.selectedDate = this.optionalDateRanges[0];
            this.onModelChange(this.selectedDate);
        }
        this._setSelectedDateRange();
        this.cdr.detectChanges();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    ngOnInit() { }
    _setSelectedDateRange() {
        this.selectedDateRange = {
            begin: this.selectedDate.begin,
            end: this.selectedDate.end
        };
    }
    _calculateNewTime(type) {
        if (this.selectedDate.timestamp) {
            const beginDate = new Date(this.selectedDate.begin * 1000);
            const endDate = new Date(this.selectedDate.end * 1000);
            const interval = this.selectedDate.timestamp.interval;
            if (this.selectedDate.timestamp.unit === 'day') {
                if (type === 'previous') {
                    return {
                        begin: getUnixTime(addDays(beginDate, -1 * interval)),
                        end: getUnixTime(addDays(endDate, -1 * interval)),
                        key: this.thyCustomKey
                    };
                }
                else {
                    return {
                        begin: getUnixTime(addDays(beginDate, 1 * interval)),
                        end: getUnixTime(addDays(endDate, 1 * interval)),
                        key: this.thyCustomKey
                    };
                }
            }
            else if (this.selectedDate.timestamp.unit === 'month') {
                if (type === 'previous') {
                    return {
                        begin: getUnixTime(addMonths(beginDate, -1 * interval)),
                        end: getUnixTime(addMonths(endDate, -1 * interval)),
                        key: this.thyCustomKey
                    };
                }
                else {
                    return {
                        begin: getUnixTime(addMonths(beginDate, 1 * interval)),
                        end: getUnixTime(addMonths(endDate, 1 * interval)),
                        key: this.thyCustomKey
                    };
                }
            }
            else if (this.selectedDate.timestamp.unit === 'year') {
                if (type === 'previous') {
                    return {
                        begin: getUnixTime(addYears(beginDate, -1 * interval)),
                        end: getUnixTime(addYears(endDate, -1 * interval)),
                        key: this.thyCustomKey
                    };
                }
                else {
                    return {
                        begin: getUnixTime(addYears(beginDate, 1 * interval)),
                        end: getUnixTime(addYears(endDate, 1 * interval)),
                        key: this.thyCustomKey
                    };
                }
            }
        }
        else {
            const interval = this.selectedDate.end - this.selectedDate.begin + allDayTimestamp;
            if (type === 'previous') {
                return {
                    begin: this.selectedDate.begin - interval,
                    end: this.selectedDate.end - interval,
                    key: this.thyCustomKey
                };
            }
            else {
                return {
                    begin: this.selectedDate.begin + interval,
                    end: this.selectedDate.end + interval,
                    key: this.thyCustomKey
                };
            }
        }
    }
    _setPreviousOrNextDate(type) {
        this.selectedDate = Object.assign({}, this.selectedDate, this._calculateNewTime(type));
        this._setSelectedDateRange();
        this.onModelChange(this.selectedDate);
    }
    previous() {
        this._setPreviousOrNextDate('previous');
    }
    next() {
        this._setPreviousOrNextDate('next');
    }
    openOptionalDateRangesMenu(event) {
        if (this.thyHiddenMenu) {
            return;
        }
        this.thyPopover.open(OptionalDateRangesComponent, {
            origin: event.currentTarget,
            hasBackdrop: true,
            backdropClass: 'thy-overlay-transparent-backdrop',
            offset: 0,
            manualClosure: true,
            originActiveClass: 'thy-date-range-text-active',
            initialState: {
                hiddenMenu: this.thyHiddenMenu,
                optionalDateRanges: this.optionalDateRanges,
                selectedDate: this.selectedDate,
                minDate: this.thyMinDate,
                maxDate: this.thyMaxDate,
                customValue: this.thyCustomTextValue,
                customKey: this.thyCustomKey,
                selectedDateRange: (dateRange) => {
                    this.onModelChange(dateRange);
                    this.selectedDate = dateRange;
                }
            }
        });
    }
}
ThyDateRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-date-range',
                template: "<div class=\"thy-date-range-container\">\n  <ng-container *ngIf=\"!thyDisabledSwitch\">\n    <thy-icon-nav thyType=\"secondary\" (click)=\"previous()\">\n      <a href=\"javascript:;\" thyIconNavLink><thy-icon thyIconName=\"angle-left\"></thy-icon></a>\n    </thy-icon-nav>\n  </ng-container>\n  <span\n    href=\"javascript:;\"\n    (click)=\"openOptionalDateRangesMenu($event)\"\n    class=\"thy-date-range-text\"\n    [ngClass]=\"{ 'thy-date-range-disabled': thyHiddenMenu }\"\n  >\n    <ng-container *ngIf=\"selectedDate?.key === 'custom'\">\n      {{ selectedDate?.begin | thyDatePickerFormat }} ~ {{ selectedDate?.end | thyDatePickerFormat }}\n    </ng-container>\n    <ng-container *ngIf=\"selectedDate?.key === 'exception'\">\n      {{ selectedDate?.begin | thyDatePickerFormat: thyPickerFormat }}\n    </ng-container>\n    <ng-container *ngIf=\"selectedDate?.key !== 'custom' && selectedDate?.key !== 'exception'\">{{ selectedDate?.text }}</ng-container>\n    <thy-icon *ngIf=\"!thyHiddenMenu\" class=\"thy-date-range-text-caret-down ml-2\" thyIconName=\"angle-down\"></thy-icon>\n  </span>\n  <ng-container *ngIf=\"!thyDisabledSwitch\">\n    <thy-icon-nav thyType=\"secondary\" (click)=\"next()\">\n      <a href=\"javascript:;\" thyIconNavLink><thy-icon thyIconName=\"angle-right\"></thy-icon></a>\n    </thy-icon-nav>\n  </ng-container>\n</div>\n",
                providers: [INPUT_CONTROL_VALUE_ACCESSOR]
            },] }
];
ThyDateRangeComponent.ctorParameters = () => [
    { type: ThyPopover },
    { type: ChangeDetectorRef }
];
ThyDateRangeComponent.propDecorators = {
    thyOptionalDateRanges: [{ type: Input }],
    thyHiddenMenu: [{ type: Input }],
    thyDisabledSwitch: [{ type: Input }],
    thyCustomTextValue: [{ type: Input }],
    thyMinDate: [{ type: Input }],
    thyMaxDate: [{ type: Input }],
    thyCustomKey: [{ type: Input }],
    thyPickerFormat: [{ type: Input }]
};

class ThyDateRangeModule {
}
ThyDateRangeModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, ThyActionMenuModule, ThySharedModule, ThyIconModule, ThyDatePickerModule, ThyNavModule],
                declarations: [ThyDateRangeComponent, OptionalDateRangesComponent],
                exports: [ThyDateRangeComponent],
                entryComponents: [OptionalDateRangesComponent]
            },] }
];

class DateRangeItemInfo {
}

/**
 * Generated bundle index. Do not edit.
 */

export { DateRangeItemInfo, OptionalDateRangesComponent, ThyDateRangeComponent, ThyDateRangeModule };
//# sourceMappingURL=ngx-tethys-date-range.js.map

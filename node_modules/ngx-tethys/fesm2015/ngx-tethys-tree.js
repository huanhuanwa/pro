import { Injectable, EventEmitter, Component, ViewEncapsulation, forwardRef, ElementRef, Input, HostBinding, Output, ContentChild, NgZone, ChangeDetectorRef, ViewChild, ViewContainerRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { coerceArray, helpers } from 'ngx-tethys/util';
import { Subject } from 'rxjs';
import { SelectionModel } from '@angular/cdk/collections';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyDropPosition, ThyDragDropModule } from 'ngx-tethys/drag-drop';
import { filter, takeUntil } from 'rxjs/operators';
import { ThyInputModule } from 'ngx-tethys/input';
import { ThyButtonModule } from 'ngx-tethys/button';
import { ThySharedModule, ThyOptionModule } from 'ngx-tethys/shared';
import { ThyListModule } from 'ngx-tethys/list';
import { ThyLoadingModule } from 'ngx-tethys/loading';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyCheckboxModule } from 'ngx-tethys/checkbox';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from 'ngx-tethys/drag-drop';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from 'ngx-tethys/icon';
import * as ɵngcc5 from 'ngx-tethys/loading';

const _c0 = ["treeNodeTemplate"];
const _c1 = ["emptyChildrenTemplate"];
function ThyTreeComponent_thy_tree_node_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "thy-tree-node", 2);
    ɵngcc0.ɵɵlistener("thyOnClick", function ThyTreeComponent_thy_tree_node_1_Template_thy_tree_node_thyOnClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.thyOnClick.emit($event); })("thyOnExpandChange", function ThyTreeComponent_thy_tree_node_1_Template_thy_tree_node_thyOnExpandChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.thyOnExpandChange.emit($event); })("thyOnCheckboxChange", function ThyTreeComponent_thy_tree_node_1_Template_thy_tree_node_thyOnCheckboxChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.thyOnCheckboxChange.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("thyDrag", node_r1)("node", node_r1)("templateRef", ctx_r0.templateRef)("emptyChildrenTemplateRef", ctx_r0.emptyChildrenTemplate)("thyAsync", ctx_r0.thyAsync)("thyDraggable", ctx_r0.thyDraggable)("thyCheckable", ctx_r0.thyCheckable)("thyMultiple", ctx_r0.thyMultiple)("thyTitleTruncate", ctx_r0.thyTitleTruncate);
} }
const _c2 = ["childrenTree"];
const _c3 = ["title"];
function ThyTreeNodeComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵelement(1, "thy-icon", 8);
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTreeNodeComponent_ng_container_3_ng_container_1_thy_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 11);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r7.node.isExpanded ? ctx_r7.root.thyIcons.expand : ctx_r7.root.thyIcons.collapse);
} }
function ThyTreeNodeComponent_ng_container_3_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 12);
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassProp("collapse", !ctx_r9.node.isExpanded);
} }
function ThyTreeNodeComponent_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTreeNodeComponent_ng_container_3_ng_container_1_thy_icon_1_Template, 1, 1, "thy-icon", 9);
    ɵngcc0.ɵɵtemplate(2, ThyTreeNodeComponent_ng_container_3_ng_container_1_ng_template_2_Template, 1, 2, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(3);
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r6.root.thyIcons == null ? null : ctx_r6.root.thyIcons.expand) && (ctx_r6.root.thyIcons == null ? null : ctx_r6.root.thyIcons.collapse))("ngIfElse", _r8);
} }
function ThyTreeNodeComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTreeNodeComponent_ng_container_3_ng_container_1_Template, 4, 2, "ng-container", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.node.children && ctx_r1.node.children.length > 0 || ctx_r1.thyAsync || ctx_r1.emptyChildrenTemplateRef);
} }
function ThyTreeNodeComponent_input_5_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 13);
    ɵngcc0.ɵɵlistener("click", function ThyTreeNodeComponent_input_5_Template_input_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.clickNodeCheck($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("form-check-indeterminate", ctx_r2.node.isChecked === ctx_r2.checkState.indeterminate);
    ɵngcc0.ɵɵproperty("checked", ctx_r2.node.isChecked === ctx_r2.checkState.checked)("disabled", ctx_r2.node.isDisabled);
} }
function ThyTreeNodeComponent_ng_container_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 15);
    ɵngcc0.ɵɵelement(2, "i", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r12.nodeIcon)("ngStyle", ctx_r12.nodeIconStyle);
} }
function ThyTreeNodeComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTreeNodeComponent_ng_container_6_ng_container_1_Template, 3, 2, "ng-container", 3);
    ɵngcc0.ɵɵelementStart(2, "span", 14);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.nodeIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("truncate", ctx_r3.thyTitleTruncate);
    ɵngcc0.ɵɵproperty("title", ctx_r3.node.title);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.node.title, "");
} }
function ThyTreeNodeComponent_ng_container_7_ng_template_1_Template(rf, ctx) { }
const _c4 = function (a0, a1, a2) { return { $implicit: a0, node: a1, origin: a2 }; };
function ThyTreeNodeComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTreeNodeComponent_ng_container_7_ng_template_1_Template, 0, 0, "ng-template", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c4, ctx_r4.node, ctx_r4.node, ctx_r4.node == null ? null : ctx_r4.node.origin));
} }
function ThyTreeNodeComponent_div_8_thy_tree_node_1_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "thy-tree-node", 20);
    ɵngcc0.ɵɵlistener("thyOnClick", function ThyTreeNodeComponent_div_8_thy_tree_node_1_Template_thy_tree_node_thyOnClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.thyOnClick.emit($event); })("thyOnCheckboxChange", function ThyTreeNodeComponent_div_8_thy_tree_node_1_Template_thy_tree_node_thyOnCheckboxChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.thyOnCheckboxChange.emit($event); })("thyOnExpandChange", function ThyTreeNodeComponent_div_8_thy_tree_node_1_Template_thy_tree_node_thyOnExpandChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.thyOnExpandChange.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r16 = ctx.$implicit;
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("node", node_r16)("thyDrag", node_r16)("templateRef", ctx_r14.templateRef)("thyAsync", ctx_r14.thyAsync)("thyMultiple", ctx_r14.thyMultiple)("thyDraggable", ctx_r14.thyDraggable)("thyCheckable", ctx_r14.thyCheckable)("thyTitleTruncate", ctx_r14.thyTitleTruncate);
} }
function ThyTreeNodeComponent_div_8_ng_container_2_thy_loading_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-loading", 22);
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("thyDone", !ctx_r22.node.isLoading);
} }
function ThyTreeNodeComponent_div_8_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTreeNodeComponent_div_8_ng_container_2_thy_loading_1_Template, 1, 1, "thy-loading", 21);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r15.node.isLoading);
} }
function ThyTreeNodeComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵlistener("thyDragDropped", function ThyTreeNodeComponent_div_8_Template_div_thyDragDropped_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.root.onDragDrop($event); })("thyDragStarted", function ThyTreeNodeComponent_div_8_Template_div_thyDragStarted_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.root.onDragStart($event); });
    ɵngcc0.ɵɵtemplate(1, ThyTreeNodeComponent_div_8_thy_tree_node_1_Template, 1, 8, "thy-tree-node", 19);
    ɵngcc0.ɵɵtemplate(2, ThyTreeNodeComponent_div_8_ng_container_2_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("thyDropContainer", ctx_r5.node.children)("thyDropContainerDisabled", !ctx_r5.root.thyDraggable)("thyBeforeDragStart", ctx_r5.root.thyBeforeDragStart)("thyBeforeDragOver", ctx_r5.root.beforeDragOver)("thyBeforeDragDrop", ctx_r5.root.thyBeforeDragDrop);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r5.node.children)("ngForTrackBy", ctx_r5.root.trackByFn);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.thyAsync);
} }
const _c5 = ["ThyTreeReplaceRegion", ""];
const _c6 = ["*"];
var ThyTreeNodeCheckState;
(function (ThyTreeNodeCheckState) {
    ThyTreeNodeCheckState[ThyTreeNodeCheckState["unchecked"] = 0] = "unchecked";
    ThyTreeNodeCheckState[ThyTreeNodeCheckState["checked"] = 1] = "checked";
    ThyTreeNodeCheckState[ThyTreeNodeCheckState["indeterminate"] = 2] = "indeterminate";
})(ThyTreeNodeCheckState || (ThyTreeNodeCheckState = {}));
class ThyTreeIcons {
}

function checkStateResolve(node) {
    const checkedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);
    const unCheckedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.unchecked);
    if (checkedNodes.length === node.children.length) {
        return ThyTreeNodeCheckState.checked;
    }
    else if (unCheckedNodes.length === node.children.length) {
        return ThyTreeNodeCheckState.unchecked;
    }
    else {
        return ThyTreeNodeCheckState.indeterminate;
    }
}
class ThyTreeService {
    constructor() {
        this.checkStateResolve = checkStateResolve;
        this.$statusChange = new Subject();
    }
    _getParallelTreeNodes(nodes, list = []) {
        (nodes || []).forEach(node => {
            list.push(node);
            this._getParallelTreeNodes(node.children || [], list);
        });
        return list;
    }
    setCheckStateResolve(resolve = checkStateResolve) {
        this.checkStateResolve = resolve;
    }
    resetSortedTreeNodes(treeNodes, parent) {
        treeNodes.forEach(node => {
            node.level = node.parentNode ? node.parentNode.level + 1 : 0;
            node.origin.children = node.children.map(n => n.origin);
            node.parentNode = parent;
            this.resetSortedTreeNodes(node.children, node);
        });
    }
    getTreeNode(key) {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.find(n => n.key === key);
    }
    getExpandedNodes() {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.filter(n => n.isExpanded);
    }
    getCheckedNodes() {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);
    }
    deleteTreeNode(node) {
        const children = node.parentNode ? node.parentNode.children : this.treeNodes;
        const index = children.findIndex(n => n.key === node.key);
        if (index > -1) {
            children.splice(index, 1);
        }
    }
    expandTreeNodes(keyOrKeys) {
        const keys = coerceArray(keyOrKeys);
        const needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(node => {
            return keys.indexOf(node.key) > -1;
        });
        needExpandNodes.forEach(node => {
            node.setExpanded(true);
        });
    }
    statusChanged() {
        return this.$statusChange.asObservable();
    }
    // 设置节点选中状态
    setNodeChecked(node, checked, propagateUp = true, propagateDown = true) {
        node.isChecked = checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;
        node.origin.checked = checked;
        if (propagateDown && node.children) {
            node.children.forEach(subNode => {
                this.setNodeChecked(subNode, checked, false, true);
            });
        }
        if (propagateUp) {
            this.syncNodeCheckState(node.parentNode);
        }
    }
    syncNodeCheckState(node) {
        if (node) {
            node.isChecked = this.checkStateResolve(node);
            this.syncNodeCheckState(node.parentNode);
        }
    }
    ngOnDestroy() {
        this.$statusChange.complete();
        this.$statusChange = null;
    }
}
ThyTreeService.ɵfac = function ThyTreeService_Factory(t) { return new (t || ThyTreeService)(); };
ThyTreeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyTreeService, factory: ThyTreeService.ɵfac });
ThyTreeService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeService, [{
        type: Injectable
    }], function () { return []; }, null); })();

class ThyTreeNode {
    constructor(node, parent = null, service) {
        this.level = 0;
        this.title = node.title;
        this.key = node.key;
        this.children = [];
        this.parentNode = parent;
        this.level = parent ? parent.level + 1 : this.level;
        this.origin = node;
        this.isDisabled = node.disabled || false;
        this.isExpanded = node.expanded || false;
        this.isChecked = node.checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;
        this.isLoading = false;
        if (node.children) {
            node.children.forEach(childNode => {
                this.children.push(new ThyTreeNode(childNode, this));
            });
        }
        this.service = service;
    }
    get treeService() {
        if (this.service) {
            return this.service;
        }
        else if (this.parentNode) {
            return this.parentNode.treeService;
        }
    }
    setKey(key) {
        this.origin.key = key;
        this.key = key;
    }
    setTitle(title) {
        this.origin.title = title;
        this.title = title;
    }
    setExpanded(expanded, propagate = false) {
        this.origin.expanded = expanded;
        this.isExpanded = expanded;
        if (propagate && this.children) {
            this.children.forEach(n => n.setExpanded(expanded, propagate));
        }
    }
    setLoading(loading) {
        this.isLoading = loading;
    }
    setChecked(checked, propagateUp = true, propagateDown = true) {
        this.treeService.setNodeChecked(this, checked, propagateUp, propagateDown);
    }
    syncNodeCheckState() {
        this.treeService.syncNodeCheckState(this);
    }
    getParentNode() {
        return this.parentNode;
    }
    getChildren() {
        return this.children;
    }
    addChildren(children, index = -1) {
        children = helpers.coerceArray(children);
        (children || []).forEach((childNode, i) => {
            if (index === -1) {
                this.children.push(new ThyTreeNode(childNode, this));
            }
            else {
                this.children.splice(index + i, 0, new ThyTreeNode(childNode, this, this.treeService));
            }
        });
        this.origin.children = this.getChildren().map(n => n.origin);
        this.setLoading(false);
        this.treeService.$statusChange.next({
            eventName: 'addChildren',
            node: this
        });
    }
}

const treeTypeClassMap = {
    default: ['thy-tree-default'],
    especial: ['thy-tree-especial']
};
class ThyTreeComponent {
    constructor(elementRef, updateHostClassService, thyTreeService) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.thyTreeService = thyTreeService;
        this._draggable = false;
        this.thyShowExpand = true;
        this.thyMultiple = false;
        this.thyAsync = false;
        this._thyType = 'default';
        this.thyIcons = {};
        this.thyTitleTruncate = true;
        this.thyOnClick = new EventEmitter();
        this.thyOnCheckboxChange = new EventEmitter();
        this.thyOnExpandChange = new EventEmitter();
        this.thyOnDragDrop = new EventEmitter();
        this.thyTreeClass = true;
        this.beforeDragOver = (event) => {
            return this.isShowExpand(event.item) || (!this.isShowExpand(event.item) && event.position !== ThyDropPosition.in);
        };
        this._onTouched = () => { };
        this._onChange = (_) => { };
    }
    set thyNodes(value) {
        this._expandedKeys = this.getExpandedNodes().map(node => node.key);
        this._selectedKeys = this.getSelectedNodes().map(node => node.key);
        this.treeNodes = (value || []).map(node => new ThyTreeNode(node, null, this.thyTreeService));
        this.thyTreeService.treeNodes = this.treeNodes;
        this.thyTreeService.expandTreeNodes(this._expandedKeys);
        this._selectTreeNodes(this._selectedKeys);
    }
    set thyDraggable(value) {
        this._draggable = value;
    }
    get thyDraggable() {
        return this._draggable;
    }
    set thyCheckStateResolve(resolve) {
        this.thyTreeService.setCheckStateResolve(resolve);
    }
    set thyType(type) {
        this._thyType = type;
        if (type === 'especial') {
            this.thyIcons = { expand: 'minus-square', collapse: 'plus-square' };
        }
    }
    get thyType() {
        return this._thyType;
    }
    set thySelectedKeys(keys) {
        this._selectedKeys = keys;
    }
    set templateRef(template) {
        if (template) {
            this._templateRef = template;
        }
    }
    get templateRef() {
        return this._templateRef;
    }
    set emptyChildrenTemplateRef(template) {
        if (template) {
            this._emptyChildrenTemplateRef = template;
        }
    }
    get emptyChildrenTemplateRef() {
        return this._emptyChildrenTemplateRef;
    }
    ngOnChanges(changes) {
        if (changes.thyType && !changes.thyType.isFirstChange()) {
            this._setTreeType();
        }
        if (changes.thyMultiple && !changes.thyMultiple.isFirstChange()) {
            this._instanceSelectionModel();
        }
    }
    ngOnInit() {
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this._setTreeType();
        this._setTreeSize();
        this._instanceSelectionModel();
        this._selectTreeNodes(this._selectedKeys);
    }
    _setTreeType() {
        if (this.thyType) {
            this.updateHostClassService.addClass(treeTypeClassMap[this.thyType]);
        }
    }
    _setTreeSize() {
        if (this.thySize) {
            this.updateHostClassService.addClass(`thy-tree-${this.thySize}`);
        }
    }
    _instanceSelectionModel() {
        this._selectionModel = new SelectionModel(this.thyMultiple);
    }
    _selectTreeNodes(keys) {
        (keys || []).forEach(key => {
            const node = this.thyTreeService.getTreeNode(key);
            if (node) {
                this.selectTreeNode(this.thyTreeService.getTreeNode(key));
            }
        });
    }
    isSelected(node) {
        return this._selectionModel.isSelected(node);
    }
    toggleTreeNode(node) {
        if (node && !node.isDisabled) {
            this._selectionModel.toggle(node);
        }
    }
    trackByFn(index, item) {
        return item.key || index;
    }
    onDragStart(event) {
        if (this.isShowExpand(event.item) && event.item.isExpanded) {
            event.item.setExpanded(false);
        }
    }
    onDragDrop(event) {
        if (!this.isShowExpand(event.item) && event.position === ThyDropPosition.in) {
            return;
        }
        const parent = event.previousItem.parentNode;
        if (parent) {
            parent.children = parent.children.filter(item => item !== event.previousItem);
        }
        else {
            this.treeNodes = this.treeNodes.filter(item => item !== event.previousItem);
        }
        switch (event.position) {
            case ThyDropPosition.in:
                event.item.addChildren(event.previousItem.origin);
                break;
            case ThyDropPosition.after:
            case ThyDropPosition.before:
                const targetParent = event.item.parentNode;
                const index = event.position === ThyDropPosition.before ? 0 : 1;
                if (targetParent) {
                    targetParent.addChildren(event.previousItem.origin, targetParent.children.indexOf(event.item) + index);
                }
                else {
                    this.treeNodes.splice(this.treeNodes.indexOf(event.item) + index, 0, event.previousItem);
                }
                break;
        }
        this.thyTreeService.resetSortedTreeNodes(this.treeNodes);
        let afterNode = null;
        let targetNode = null;
        if (event.position === ThyDropPosition.before) {
            afterNode = event.containerItems[event.currentIndex - 1];
            targetNode = event.item.parentNode;
        }
        else if (event.position === ThyDropPosition.after) {
            afterNode = event.containerItems[event.currentIndex];
            targetNode = event.item.parentNode;
        }
        else {
            afterNode = event.item.children[event.item.children.length - 2];
            targetNode = event.item;
        }
        this.thyOnDragDrop.emit({
            event,
            currentIndex: event.currentIndex,
            dragNode: event.previousItem,
            targetNode: targetNode,
            afterNode: afterNode
        });
    }
    isShowExpand(node) {
        if (helpers.isFunction(this.thyShowExpand)) {
            return this.thyShowExpand(node);
        }
        else {
            return this.thyShowExpand;
        }
    }
    writeValue(value) {
        this.thyNodes = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // region Public Functions
    selectTreeNode(node) {
        this._selectionModel.select(node);
    }
    getRootNodes() {
        return this.treeNodes;
    }
    getTreeNode(key) {
        return this.thyTreeService.getTreeNode(key);
    }
    getSelectedNode() {
        return this._selectionModel ? this._selectionModel.selected[0] : null;
    }
    getSelectedNodes() {
        return this._selectionModel ? this._selectionModel.selected : [];
    }
    getExpandedNodes() {
        return this.thyTreeService.getExpandedNodes();
    }
    getCheckedNodes() {
        return this.thyTreeService.getCheckedNodes();
    }
    addTreeNode(node, parent, index = -1) {
        if (parent) {
            parent.addChildren(node, index);
        }
        else {
            if (index > -1) {
                this.treeNodes.splice(index, 0, new ThyTreeNode(node, null, this.thyTreeService));
            }
            else {
                this.treeNodes.push(new ThyTreeNode(node, null, this.thyTreeService));
            }
        }
    }
    deleteTreeNode(node) {
        if (this.isSelected(node)) {
            this._selectionModel.toggle(node);
        }
        this.thyTreeService.deleteTreeNode(node);
    }
    expandAllNodes() {
        const nodes = this.getRootNodes();
        nodes.forEach(n => n.setExpanded(true, true));
    }
    collapsedAllNodes() {
        const nodes = this.getRootNodes();
        nodes.forEach(n => n.setExpanded(false, true));
    }
}
ThyTreeComponent.ɵfac = function ThyTreeComponent_Factory(t) { return new (t || ThyTreeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ThyTreeService)); };
ThyTreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTreeComponent, selectors: [["thy-tree"]], contentQueries: function ThyTreeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptyChildrenTemplate = _t.first);
    } }, hostVars: 6, hostBindings: function ThyTreeComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-multiple-selection-list", ctx.thyMultiple)("thy-tree", ctx.thyTreeClass)("thy-tree-draggable", ctx.thyDraggable);
    } }, inputs: { thyShowExpand: "thyShowExpand", thyMultiple: "thyMultiple", thyAsync: "thyAsync", thyIcons: "thyIcons", thyTitleTruncate: "thyTitleTruncate", thyNodes: "thyNodes", thyDraggable: "thyDraggable", thyCheckStateResolve: "thyCheckStateResolve", thyType: "thyType", thySelectedKeys: "thySelectedKeys", thyCheckable: "thyCheckable", thySize: "thySize", thyBeforeDragStart: "thyBeforeDragStart", thyBeforeDragDrop: "thyBeforeDragDrop" }, outputs: { thyOnClick: "thyOnClick", thyOnCheckboxChange: "thyOnCheckboxChange", thyOnExpandChange: "thyOnExpandChange", thyOnDragDrop: "thyOnDragDrop" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThyTreeComponent),
                multi: true
            },
            ThyTreeService,
            UpdateHostClassService
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 7, consts: [[3, "thyDropContainer", "thyDropContainerDisabled", "thyBeforeDragStart", "thyBeforeDragOver", "thyBeforeDragDrop", "thyDragStarted", "thyDragDropped"], [3, "thyDrag", "node", "templateRef", "emptyChildrenTemplateRef", "thyAsync", "thyDraggable", "thyCheckable", "thyMultiple", "thyTitleTruncate", "thyOnClick", "thyOnExpandChange", "thyOnCheckboxChange", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "thyDrag", "node", "templateRef", "emptyChildrenTemplateRef", "thyAsync", "thyDraggable", "thyCheckable", "thyMultiple", "thyTitleTruncate", "thyOnClick", "thyOnExpandChange", "thyOnCheckboxChange"]], template: function ThyTreeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("thyDragStarted", function ThyTreeComponent_Template_div_thyDragStarted_0_listener($event) { return ctx.onDragStart($event); })("thyDragDropped", function ThyTreeComponent_Template_div_thyDragDropped_0_listener($event) { return ctx.onDragDrop($event); });
        ɵngcc0.ɵɵtemplate(1, ThyTreeComponent_thy_tree_node_1_Template, 1, 9, "thy-tree-node", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("thyDropContainer", ctx.treeNodes)("thyDropContainerDisabled", !ctx.thyDraggable)("thyBeforeDragStart", ctx.thyBeforeDragStart)("thyBeforeDragOver", ctx.beforeDragOver)("thyBeforeDragDrop", ctx.thyBeforeDragDrop);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.treeNodes)("ngForTrackBy", ctx.trackByFn);
    } }, directives: function () { return [ɵngcc2.ThyDropContainerDirective, ɵngcc3.NgForOf, ThyTreeNodeComponent, ɵngcc2.ThyDragDirective]; }, encapsulation: 2 });
ThyTreeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService },
    { type: ThyTreeService }
];
ThyTreeComponent.propDecorators = {
    thyNodes: [{ type: Input }],
    thyShowExpand: [{ type: Input }],
    thyMultiple: [{ type: HostBinding, args: [`class.thy-multiple-selection-list`,] }, { type: Input }],
    thyDraggable: [{ type: HostBinding, args: ['class.thy-tree-draggable',] }, { type: Input }],
    thyCheckable: [{ type: Input }],
    thyCheckStateResolve: [{ type: Input }],
    thyAsync: [{ type: Input }],
    thyType: [{ type: Input }],
    thyIcons: [{ type: Input }],
    thySize: [{ type: Input }],
    thyTitleTruncate: [{ type: Input }],
    thySelectedKeys: [{ type: Input }],
    thyBeforeDragStart: [{ type: Input }],
    thyBeforeDragDrop: [{ type: Input }],
    thyOnClick: [{ type: Output }],
    thyOnCheckboxChange: [{ type: Output }],
    thyOnExpandChange: [{ type: Output }],
    thyOnDragDrop: [{ type: Output }],
    templateRef: [{ type: ContentChild, args: ['treeNodeTemplate', { static: true },] }],
    emptyChildrenTemplate: [{ type: ContentChild, args: ['emptyChildrenTemplate', { static: true },] }],
    thyTreeClass: [{ type: HostBinding, args: ['class.thy-tree',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeComponent, [{
        type: Component,
        args: [{
                selector: 'thy-tree',
                template: "<div\n  [thyDropContainer]=\"treeNodes\"\n  [thyDropContainerDisabled]=\"!thyDraggable\"\n  [thyBeforeDragStart]=\"thyBeforeDragStart\"\n  [thyBeforeDragOver]=\"beforeDragOver\"\n  [thyBeforeDragDrop]=\"thyBeforeDragDrop\"\n  (thyDragStarted)=\"onDragStart($event)\"\n  (thyDragDropped)=\"onDragDrop($event)\"\n>\n  <thy-tree-node\n    [thyDrag]=\"node\"\n    *ngFor=\"let node of treeNodes; trackBy: trackByFn; let i = index\"\n    [node]=\"node\"\n    [templateRef]=\"templateRef\"\n    [emptyChildrenTemplateRef]=\"emptyChildrenTemplate\"\n    [thyAsync]=\"thyAsync\"\n    [thyDraggable]=\"thyDraggable\"\n    [thyCheckable]=\"thyCheckable\"\n    [thyMultiple]=\"thyMultiple\"\n    [thyTitleTruncate]=\"thyTitleTruncate\"\n    (thyOnClick)=\"thyOnClick.emit($event)\"\n    (thyOnExpandChange)=\"thyOnExpandChange.emit($event)\"\n    (thyOnCheckboxChange)=\"thyOnCheckboxChange.emit($event)\"\n  >\n  </thy-tree-node>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyTreeComponent),
                        multi: true
                    },
                    ThyTreeService,
                    UpdateHostClassService
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.UpdateHostClassService }, { type: ThyTreeService }]; }, { thyShowExpand: [{
            type: Input
        }], thyMultiple: [{
            type: HostBinding,
            args: [`class.thy-multiple-selection-list`]
        }, {
            type: Input
        }], thyAsync: [{
            type: Input
        }], thyIcons: [{
            type: Input
        }], thyTitleTruncate: [{
            type: Input
        }], thyOnClick: [{
            type: Output
        }], thyOnCheckboxChange: [{
            type: Output
        }], thyOnExpandChange: [{
            type: Output
        }], thyOnDragDrop: [{
            type: Output
        }], thyTreeClass: [{
            type: HostBinding,
            args: ['class.thy-tree']
        }], thyNodes: [{
            type: Input
        }], thyDraggable: [{
            type: HostBinding,
            args: ['class.thy-tree-draggable']
        }, {
            type: Input
        }], thyCheckStateResolve: [{
            type: Input
        }], thyType: [{
            type: Input
        }], thySelectedKeys: [{
            type: Input
        }], templateRef: [{
            type: ContentChild,
            args: ['treeNodeTemplate', { static: true }]
        }], thyCheckable: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thyBeforeDragStart: [{
            type: Input
        }], thyBeforeDragDrop: [{
            type: Input
        }], emptyChildrenTemplate: [{
            type: ContentChild,
            args: ['emptyChildrenTemplate', { static: true }]
        }] }); })();

class ThyTreeNodeComponent {
    constructor(root, thyTreeService, ngZone, cdr) {
        this.root = root;
        this.thyTreeService = thyTreeService;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.thyAsync = false;
        this.thyMultiple = false;
        this.thyDraggable = false;
        this.thyCheckable = false;
        this.thyOnClick = new EventEmitter();
        this.thyOnExpandChange = new EventEmitter();
        this.thyOnCheckboxChange = new EventEmitter();
        this.thyTreeNodeClass = true;
        this.destroy$ = new Subject();
        this.checkState = ThyTreeNodeCheckState;
        this.thyTreeService
            .statusChanged()
            .pipe(filter(data => data.node.key === this.node.key), takeUntil(this.destroy$))
            .subscribe(() => {
            this.markForCheck();
        });
    }
    get nodeIcon() {
        return this.node.origin.icon;
    }
    get nodeIconStyle() {
        return this.node.origin.iconStyle;
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    changeDragIconVisibility(event, showDragIcon) {
        const nodeElement = event.target;
        const dragIcon = nodeElement.querySelector('.thy-tree-drag-icon');
        if (dragIcon) {
            dragIcon.style.visibility = showDragIcon ? 'visible' : 'hidden';
        }
    }
    nodeMouseEnter(event) {
        if (!this.root.thyDraggable || this.node.isDisabled) {
            return;
        }
        else if (this.root.thyDraggable && !this.root.thyBeforeDragStart) {
            this.changeDragIconVisibility(event, true);
        }
        else {
            const containerItems = this.node.getParentNode() ? this.node.getParentNode().getChildren() : this.root.treeNodes;
            const dragStartEvent = {
                event: event,
                item: this.node,
                containerItems,
                currentIndex: containerItems.indexOf(this.node)
            };
            this.changeDragIconVisibility(event, this.root.thyBeforeDragStart(dragStartEvent));
        }
    }
    nodeMouseLeave(event) {
        if (!this.root.thyDraggable || this.node.isDisabled) {
            return;
        }
        else {
            this.changeDragIconVisibility(event, false);
        }
    }
    clickNode(event) {
        if (!this.root.thyMultiple) {
            this.root.selectTreeNode(this.node);
        }
        else {
            this.root.toggleTreeNode(this.node);
        }
        this.thyOnClick.emit({
            eventName: 'click',
            event: event,
            node: this.node
        });
    }
    clickNodeCheck(event) {
        event.stopPropagation();
        if (this.node.isChecked === ThyTreeNodeCheckState.unchecked || this.node.isChecked === ThyTreeNodeCheckState.indeterminate) {
            this.node.setChecked(true);
        }
        else {
            this.node.setChecked(false);
        }
        this.thyOnCheckboxChange.emit({
            eventName: 'checkboxChange',
            event: event,
            node: this.node
        });
    }
    expandNode(event) {
        event.stopPropagation();
        this.node.setExpanded(!this.node.isExpanded);
        if (this.root.thyShowExpand) {
            this.thyOnExpandChange.emit({
                eventName: 'expand',
                event: event,
                node: this.node
            });
            if (this.thyAsync && this.node.children.length === 0) {
                this.node.setLoading(true);
            }
        }
    }
    isShowExpand(node) {
        return this.root.isShowExpand(node);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ThyTreeNodeComponent.ɵfac = function ThyTreeNodeComponent_Factory(t) { return new (t || ThyTreeNodeComponent)(ɵngcc0.ɵɵdirectiveInject(ThyTreeComponent), ɵngcc0.ɵɵdirectiveInject(ThyTreeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyTreeNodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTreeNodeComponent, selectors: [["thy-tree-node"]], contentQueries: function ThyTreeNodeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childrenTreeTemplateRef = _t.first);
    } }, viewQuery: function ThyTreeNodeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c3, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.titleInputElementRef = _t.first);
    } }, hostVars: 2, hostBindings: function ThyTreeNodeComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-tree-node", ctx.thyTreeNodeClass);
    } }, inputs: { thyAsync: "thyAsync", thyMultiple: "thyMultiple", thyDraggable: "thyDraggable", thyCheckable: "thyCheckable", node: "node", thyTitleTruncate: "thyTitleTruncate", templateRef: "templateRef", emptyChildrenTemplateRef: "emptyChildrenTemplateRef" }, outputs: { thyOnClick: "thyOnClick", thyOnExpandChange: "thyOnExpandChange", thyOnCheckboxChange: "thyOnCheckboxChange" }, decls: 9, vars: 10, consts: [["thyDragContent", "", 1, "thy-tree-node-wrapper", "thy-sortable-item", 3, "click", "mouseenter", "mouseleave"], ["class", "thy-tree-drag-icon thy-sortable-handle", 4, "ngIf"], [1, "thy-tree-expand", 3, "click"], [4, "ngIf"], [1, "thy-tree-node-content"], ["type", "checkbox", "class", "thy-tree-node-check", 3, "form-check-indeterminate", "checked", "disabled", "click", 4, "ngIf"], ["class", "thy-tree-node-children", 3, "thyDropContainer", "thyDropContainerDisabled", "thyBeforeDragStart", "thyBeforeDragOver", "thyBeforeDragDrop", "thyDragDropped", "thyDragStarted", 4, "ngIf"], [1, "thy-tree-drag-icon", "thy-sortable-handle"], ["thyIconName", "drag"], ["class", "thy-tree-expand-icon", 3, "thyIconName", 4, "ngIf", "ngIfElse"], ["defaultIcon", ""], [1, "thy-tree-expand-icon", 3, "thyIconName"], ["thyIconName", "caret-right-down", 1, "thy-tree-expand-icon"], ["type", "checkbox", 1, "thy-tree-node-check", 3, "checked", "disabled", "click"], [1, "thy-tree-node-title", 3, "title"], [1, "thy-tree-node-icon"], [3, "ngClass", "ngStyle"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "thy-tree-node-children", 3, "thyDropContainer", "thyDropContainerDisabled", "thyBeforeDragStart", "thyBeforeDragOver", "thyBeforeDragDrop", "thyDragDropped", "thyDragStarted"], [3, "node", "thyDrag", "templateRef", "thyAsync", "thyMultiple", "thyDraggable", "thyCheckable", "thyTitleTruncate", "thyOnClick", "thyOnCheckboxChange", "thyOnExpandChange", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "node", "thyDrag", "templateRef", "thyAsync", "thyMultiple", "thyDraggable", "thyCheckable", "thyTitleTruncate", "thyOnClick", "thyOnCheckboxChange", "thyOnExpandChange"], [3, "thyDone", 4, "ngIf"], [3, "thyDone"]], template: function ThyTreeNodeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function ThyTreeNodeComponent_Template_div_click_0_listener($event) { return ctx.clickNode($event); })("mouseenter", function ThyTreeNodeComponent_Template_div_mouseenter_0_listener($event) { return ctx.nodeMouseEnter($event); })("mouseleave", function ThyTreeNodeComponent_Template_div_mouseleave_0_listener($event) { return ctx.nodeMouseLeave($event); });
        ɵngcc0.ɵɵtemplate(1, ThyTreeNodeComponent_span_1_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵlistener("click", function ThyTreeNodeComponent_Template_span_click_2_listener($event) { return ctx.expandNode($event); });
        ɵngcc0.ɵɵtemplate(3, ThyTreeNodeComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵtemplate(5, ThyTreeNodeComponent_input_5_Template, 1, 4, "input", 5);
        ɵngcc0.ɵɵtemplate(6, ThyTreeNodeComponent_ng_container_6_Template, 4, 5, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(7, ThyTreeNodeComponent_ng_container_7_Template, 2, 6, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, ThyTreeNodeComponent_div_8_Template, 3, 8, "div", 6);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.root.isSelected(ctx.node))("disabled", ctx.node.isDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyDraggable);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isShowExpand(ctx.node));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyCheckable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.templateRef);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.templateRef);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isShowExpand(ctx.node) && ctx.node.isExpanded);
    } }, directives: [ɵngcc2.ThyDragContentDirective, ɵngcc3.NgIf, ɵngcc4.ThyIconComponent, ɵngcc3.NgClass, ɵngcc3.NgStyle, ɵngcc3.NgTemplateOutlet, ɵngcc2.ThyDropContainerDirective, ɵngcc3.NgForOf, ThyTreeNodeComponent, ɵngcc2.ThyDragDirective, ɵngcc5.ThyLoadingComponent], encapsulation: 2 });
ThyTreeNodeComponent.ctorParameters = () => [
    { type: ThyTreeComponent },
    { type: ThyTreeService },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
ThyTreeNodeComponent.propDecorators = {
    node: [{ type: Input }],
    thyAsync: [{ type: Input }],
    thyMultiple: [{ type: Input }],
    thyDraggable: [{ type: Input }],
    thyCheckable: [{ type: Input }],
    thyTitleTruncate: [{ type: Input }],
    templateRef: [{ type: Input }],
    emptyChildrenTemplateRef: [{ type: Input }],
    thyOnClick: [{ type: Output }],
    thyOnExpandChange: [{ type: Output }],
    thyOnCheckboxChange: [{ type: Output }],
    childrenTreeTemplateRef: [{ type: ContentChild, args: ['childrenTree',] }],
    titleInputElementRef: [{ type: ViewChild, args: ['title',] }],
    thyTreeNodeClass: [{ type: HostBinding, args: ['class.thy-tree-node',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeNodeComponent, [{
        type: Component,
        args: [{
                selector: 'thy-tree-node',
                template: "<div\n  thyDragContent\n  class=\"thy-tree-node-wrapper thy-sortable-item\"\n  [class.active]=\"root.isSelected(node)\"\n  [class.disabled]=\"node.isDisabled\"\n  (click)=\"clickNode($event)\"\n  (mouseenter)=\"nodeMouseEnter($event)\"\n  (mouseleave)=\"nodeMouseLeave($event)\"\n>\n  <span *ngIf=\"thyDraggable\" class=\"thy-tree-drag-icon thy-sortable-handle\">\n    <thy-icon thyIconName=\"drag\"></thy-icon>\n  </span>\n  <span class=\"thy-tree-expand\" (click)=\"expandNode($event)\">\n    <ng-container *ngIf=\"isShowExpand(node)\">\n      <ng-container *ngIf=\"(node.children && node.children.length > 0) || thyAsync || emptyChildrenTemplateRef\">\n        <thy-icon\n          *ngIf=\"root.thyIcons?.expand && root.thyIcons?.collapse; else defaultIcon\"\n          class=\"thy-tree-expand-icon\"\n          [thyIconName]=\"node.isExpanded ? root.thyIcons.expand : root.thyIcons.collapse\"\n        ></thy-icon>\n        <ng-template #defaultIcon>\n          <thy-icon class=\"thy-tree-expand-icon\" [class.collapse]=\"!node.isExpanded\" thyIconName=\"caret-right-down\"></thy-icon>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n  </span>\n\n  <span class=\"thy-tree-node-content\">\n    <input\n      *ngIf=\"thyCheckable\"\n      type=\"checkbox\"\n      class=\"thy-tree-node-check\"\n      [class.form-check-indeterminate]=\"node.isChecked === checkState.indeterminate\"\n      [checked]=\"node.isChecked === checkState.checked\"\n      [disabled]=\"node.isDisabled\"\n      (click)=\"clickNodeCheck($event)\"\n    />\n    <ng-container *ngIf=\"!templateRef\">\n      <ng-container *ngIf=\"nodeIcon\">\n        <span class=\"thy-tree-node-icon\"> <i [ngClass]=\"nodeIcon\" [ngStyle]=\"nodeIconStyle\"></i></span>\n      </ng-container>\n      <span [title]=\"node.title\" class=\"thy-tree-node-title\" [class.truncate]=\"thyTitleTruncate\"> {{ node.title }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"templateRef\">\n      <ng-template\n        [ngTemplateOutlet]=\"templateRef\"\n        [ngTemplateOutletContext]=\"{ $implicit: node, node: node, origin: node?.origin }\"\n      ></ng-template>\n    </ng-container>\n  </span>\n</div>\n<div\n  class=\"thy-tree-node-children\"\n  *ngIf=\"isShowExpand(node) && node.isExpanded\"\n  [thyDropContainer]=\"node.children\"\n  [thyDropContainerDisabled]=\"!root.thyDraggable\"\n  [thyBeforeDragStart]=\"root.thyBeforeDragStart\"\n  [thyBeforeDragOver]=\"root.beforeDragOver\"\n  [thyBeforeDragDrop]=\"root.thyBeforeDragDrop\"\n  (thyDragDropped)=\"root.onDragDrop($event)\"\n  (thyDragStarted)=\"root.onDragStart($event)\"\n>\n  <thy-tree-node\n    *ngFor=\"let node of node.children; trackBy: root.trackByFn; let i = index\"\n    [node]=\"node\"\n    [thyDrag]=\"node\"\n    [templateRef]=\"templateRef\"\n    [thyAsync]=\"thyAsync\"\n    [thyMultiple]=\"thyMultiple\"\n    [thyDraggable]=\"thyDraggable\"\n    [thyCheckable]=\"thyCheckable\"\n    [thyTitleTruncate]=\"thyTitleTruncate\"\n    (thyOnClick)=\"thyOnClick.emit($event)\"\n    (thyOnCheckboxChange)=\"thyOnCheckboxChange.emit($event)\"\n    (thyOnExpandChange)=\"thyOnExpandChange.emit($event)\"\n  >\n  </thy-tree-node>\n  <ng-container *ngIf=\"thyAsync\">\n    <thy-loading *ngIf=\"node.isLoading\" [thyDone]=\"!node.isLoading\"></thy-loading>\n  </ng-container>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ThyTreeComponent }, { type: ThyTreeService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }]; }, { thyAsync: [{
            type: Input
        }], thyMultiple: [{
            type: Input
        }], thyDraggable: [{
            type: Input
        }], thyCheckable: [{
            type: Input
        }], thyOnClick: [{
            type: Output
        }], thyOnExpandChange: [{
            type: Output
        }], thyOnCheckboxChange: [{
            type: Output
        }], thyTreeNodeClass: [{
            type: HostBinding,
            args: ['class.thy-tree-node']
        }], node: [{
            type: Input
        }], thyTitleTruncate: [{
            type: Input
        }], templateRef: [{
            type: Input
        }], emptyChildrenTemplateRef: [{
            type: Input
        }], childrenTreeTemplateRef: [{
            type: ContentChild,
            args: ['childrenTree']
        }], titleInputElementRef: [{
            type: ViewChild,
            args: ['title']
        }] }); })();

class ThyTreeReplaceRegionComponent {
    constructor(root, viewRef) {
        this.root = root;
        this.viewRef = viewRef;
    }
    ngOnInit() { }
}
ThyTreeReplaceRegionComponent.ɵfac = function ThyTreeReplaceRegionComponent_Factory(t) { return new (t || ThyTreeReplaceRegionComponent)(ɵngcc0.ɵɵdirectiveInject(ThyTreeComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ThyTreeReplaceRegionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTreeReplaceRegionComponent, selectors: [["", "ThyTreeReplaceRegion", ""]], inputs: { thyInstance: "thyInstance" }, attrs: _c5, ngContentSelectors: _c6, decls: 1, vars: 0, template: function ThyTreeReplaceRegionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyTreeReplaceRegionComponent.ctorParameters = () => [
    { type: ThyTreeComponent },
    { type: ViewContainerRef }
];
ThyTreeReplaceRegionComponent.propDecorators = {
    thyInstance: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeReplaceRegionComponent, [{
        type: Component,
        args: [{
                selector: '[ThyTreeReplaceRegion]',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ThyTreeComponent }, { type: ɵngcc0.ViewContainerRef }]; }, { thyInstance: [{
            type: Input
        }] }); })();

class ThyTreeModule {
}
ThyTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyTreeModule });
ThyTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyTreeModule_Factory(t) { return new (t || ThyTreeModule)(); }, providers: [ThyTreeService], imports: [[
            CommonModule,
            ThyInputModule,
            ThyButtonModule,
            ThySharedModule,
            FormsModule,
            ThyListModule,
            ThyOptionModule,
            ThyLoadingModule,
            ThyIconModule,
            ThyDragDropModule,
            ThyCheckboxModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyTreeModule, { declarations: function () { return [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent]; }, imports: function () { return [CommonModule,
        ThyInputModule,
        ThyButtonModule,
        ThySharedModule,
        FormsModule,
        ThyListModule,
        ThyOptionModule,
        ThyLoadingModule,
        ThyIconModule,
        ThyDragDropModule,
        ThyCheckboxModule]; }, exports: function () { return [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],
                imports: [
                    CommonModule,
                    ThyInputModule,
                    ThyButtonModule,
                    ThySharedModule,
                    FormsModule,
                    ThyListModule,
                    ThyOptionModule,
                    ThyLoadingModule,
                    ThyIconModule,
                    ThyDragDropModule,
                    ThyCheckboxModule
                ],
                entryComponents: [ThyTreeComponent],
                exports: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],
                providers: [ThyTreeService]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyTreeComponent, ThyTreeIcons, ThyTreeModule, ThyTreeNode, ThyTreeNodeCheckState, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent, ThyTreeService };

//# sourceMappingURL=ngx-tethys-tree.js.map
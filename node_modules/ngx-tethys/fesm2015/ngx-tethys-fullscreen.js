import * as i0 from '@angular/core';
import { Inject, Injectable, EventEmitter, Component, ElementRef, Input, Output, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Subject, merge, fromEvent } from 'rxjs';
import { coerceElement } from '@angular/cdk/coercion';
import { takeUntil } from 'rxjs/operators';
import { ESCAPE } from '@angular/cdk/keycodes';

import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
var ThyFullscreenMode;
(function (ThyFullscreenMode) {
    ThyFullscreenMode["immersive"] = "immersive";
    ThyFullscreenMode["emulated"] = "emulated";
})(ThyFullscreenMode || (ThyFullscreenMode = {}));

class ThyFullscreenRef {
    constructor(document) {
        this.document = document;
        this.isFullscreen = false;
        this.ngUnsubscribe$ = new Subject();
        this._afterLaunched = new Subject();
        this._afterExited = new Subject();
    }
    onFullscreenChange() {
        const isFullScreen = this.isImmersiveFullscreen();
        if (isFullScreen) {
            this.launchNormalFullscreen();
        }
        else {
            this.exitNormalFullscreen();
        }
    }
    resetElement(element) {
        const targetType = typeof element;
        if (targetType === 'string') {
            return this.document.querySelector(`.${element}`);
        }
        else {
            return coerceElement(element);
        }
    }
    isImmersiveFullscreen() {
        const doc = this.document;
        return !!(doc['fullscreenElement'] || doc['mozFullScreenElement'] || doc['webkitFullscreenElement'] || doc['msFullscreenElement']);
    }
    handleKeyDown(event) {
        if (event.keyCode === ESCAPE) {
            if (this.isFullscreen && this.fullscreenConfig.mode === ThyFullscreenMode.emulated) {
                this.exitNormalFullscreen();
            }
        }
    }
    launchNormalFullscreen() {
        const targetElement = this.resetElement(this.fullscreenConfig.target);
        const classes = this.fullscreenConfig.targetLaunchededClasse;
        const container = this.fullscreenConfig.emulatedContainer;
        if (container) {
            const containerElement = this.resetElement(container);
            const containerClientRect = containerElement.getBoundingClientRect();
            const targetClientRect = targetElement.getBoundingClientRect();
            const distanceX = containerClientRect.left - targetClientRect.left;
            const distanceY = containerClientRect.top - targetClientRect.top;
            targetElement.style.transform = `translate(${distanceX}px, ${distanceY}px)`;
            targetElement.style.width = `${containerClientRect.width}px`;
            targetElement.style.height = `${containerClientRect.height}px`;
        }
        else {
            targetElement.classList.add('thy-fullscreen');
        }
        targetElement.classList.add('thy-fullscreen-active');
        if (classes && classes.length) {
            targetElement.classList.add(classes);
        }
        this.isFullscreen = true;
        this._afterLaunched.next();
    }
    exitNormalFullscreen() {
        const targetElement = this.resetElement(this.fullscreenConfig.target);
        const classes = this.fullscreenConfig.targetLaunchededClasse;
        const container = this.fullscreenConfig.emulatedContainer;
        if (container) {
            targetElement.style.transform = ``;
            targetElement.style.width = ``;
            targetElement.style.height = ``;
        }
        else {
            targetElement.classList.remove('thy-fullscreen');
        }
        targetElement.classList.remove('thy-fullscreen-active');
        if (classes && classes.length) {
            targetElement.classList.remove(classes);
        }
        this.isFullscreen = false;
        this._afterExited.next();
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    }
    launchImmersiveFullscreen() {
        const docElement = this.document.documentElement;
        if (docElement.requestFullscreen) {
            docElement.requestFullscreen();
        }
        else if (docElement['mozRequestFullScreen']) {
            docElement['mozRequestFullScreen']();
        }
        else if (docElement['webkitRequestFullscreen']) {
            docElement['webkitRequestFullscreen']();
        }
        else if (docElement['msRequestFullscreen']) {
            docElement['msRequestFullscreen']();
        }
    }
    exitImmersiveFullscreen() {
        const doc = this.document;
        if (doc['exitFullscreen']) {
            doc['exitFullscreen']();
        }
        else if (doc['mozCancelFullScreen']) {
            doc['mozCancelFullScreen']();
        }
        else if (doc['webkitExitFullscreen']) {
            doc['webkitExitFullscreen']();
        }
        else if (doc['msExitFullscreen']) {
            doc['msExitFullscreen']();
        }
    }
    launch() {
        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {
            merge(fromEvent(this.document, 'fullscreenchange'), fromEvent(this.document, 'MSFullscreenChange'), fromEvent(this.document, 'webkitfullscreenchange'))
                .pipe(takeUntil(this.ngUnsubscribe$))
                .subscribe(() => {
                this.onFullscreenChange();
            });
            this.launchImmersiveFullscreen();
        }
        else {
            fromEvent(this.document, 'keydown')
                .pipe(takeUntil(this.ngUnsubscribe$))
                .subscribe(event => {
                this.handleKeyDown(event);
            });
            this.launchNormalFullscreen();
        }
    }
    exit() {
        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {
            this.exitImmersiveFullscreen();
        }
        else {
            this.exitNormalFullscreen();
        }
    }
    afterLaunched() {
        return this._afterLaunched.asObservable();
    }
    afterExited() {
        return this._afterExited.asObservable();
    }
}
ThyFullscreenRef.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];

class ThyFullscreen {
    constructor(document) {
        this.document = document;
        this.fullscreenRefs = [];
    }
    /**
     * 开始全屏
     * @param config
     */
    launch(config) {
        config.mode = config.mode || ThyFullscreenMode.immersive;
        const fullscreenRef = new ThyFullscreenRef(this.document);
        fullscreenRef.fullscreenConfig = config;
        fullscreenRef.launch();
        this.fullscreenRefs.push(fullscreenRef);
        fullscreenRef.afterExited().subscribe(() => {
            const index = this.fullscreenRefs.indexOf(fullscreenRef);
            if (index > -1) {
                this.fullscreenRefs.splice(index, 1);
            }
        });
        return fullscreenRef;
    }
    /**
     * 退出最后一个 ThyFullscreenRef 的全屏
     * @param config
     */
    exit() {
        const lastFullscreenRef = this.fullscreenRefs[this.fullscreenRefs.length - 1];
        lastFullscreenRef.exit();
    }
}
ThyFullscreen.ɵfac = function ThyFullscreen_Factory(t) { return new (t || ThyFullscreen)(ɵngcc0.ɵɵinject(DOCUMENT)); };
ThyFullscreen.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyFullscreen_Factory() { return new ThyFullscreen(i0.ɵɵinject(i1.DOCUMENT)); }, token: ThyFullscreen, providedIn: "root" });
ThyFullscreen.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFullscreen, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();

class ThyFullscreenComponent {
    constructor(elementRef, service) {
        this.elementRef = elementRef;
        this.service = service;
        this.thyMode = ThyFullscreenMode.immersive;
        this.thyFullscreenChange = new EventEmitter();
        this.ngUnsubscribe$ = new Subject();
        // 点击打开或关闭全屏
        this.handleFullscreen = () => {
            const targetElement = this.elementRef.nativeElement.querySelector('[fullscreen-target]');
            const containerElement = this.elementRef.nativeElement.querySelector('[fullscreen-container]');
            const fullscreen = targetElement.classList.contains('thy-fullscreen-active');
            if (fullscreen) {
                this.service.exit();
            }
            else {
                const fullscreenRef = this.service.launch({
                    mode: this.thyMode,
                    target: targetElement,
                    targetLaunchededClasse: this.thyFullscreenClasses,
                    emulatedContainer: containerElement
                });
                this.thyFullscreenChange.emit(true);
                fullscreenRef.afterExited().subscribe(() => {
                    this.thyFullscreenChange.emit(false);
                });
            }
        };
    }
    ngOnInit() { }
    ngAfterViewInit() {
        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');
        if (btnLaunch) {
            btnLaunch.addEventListener('click', this.handleFullscreen);
        }
    }
    ngOnDestroy() {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');
        if (btnLaunch) {
            btnLaunch.removeEventListener('click', this.handleFullscreen);
        }
    }
}
ThyFullscreenComponent.ɵfac = function ThyFullscreenComponent_Factory(t) { return new (t || ThyFullscreenComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThyFullscreen)); };
ThyFullscreenComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFullscreenComponent, selectors: [["thy-fullscreen"], ["", "thyFullscreen", ""]], inputs: { thyMode: "thyMode", thyFullscreenClasses: "thyFullscreenClasses" }, outputs: { thyFullscreenChange: "thyFullscreenChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyFullscreenComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyFullscreenComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyFullscreen }
];
ThyFullscreenComponent.propDecorators = {
    thyMode: [{ type: Input }],
    thyFullscreenClasses: [{ type: Input }],
    thyFullscreenChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFullscreenComponent, [{
        type: Component,
        args: [{
                selector: 'thy-fullscreen, [thyFullscreen]',
                template: "<ng-content> </ng-content>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ThyFullscreen }]; }, { thyMode: [{
            type: Input
        }], thyFullscreenChange: [{
            type: Output
        }], thyFullscreenClasses: [{
            type: Input
        }] }); })();

class ThyFullscreenModule {
}
ThyFullscreenModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyFullscreenModule });
ThyFullscreenModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyFullscreenModule_Factory(t) { return new (t || ThyFullscreenModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyFullscreenModule, { declarations: function () { return [ThyFullscreenComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ThyFullscreenComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFullscreenModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyFullscreenComponent],
                imports: [CommonModule],
                exports: [ThyFullscreenComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyFullscreen, ThyFullscreenComponent, ThyFullscreenMode, ThyFullscreenModule, ThyFullscreenRef };

//# sourceMappingURL=ngx-tethys-fullscreen.js.map
import { Injectable, Component, NgZone, HostBinding, Input, HostListener, InjectionToken, Injector, ComponentFactoryResolver, ApplicationRef, Inject, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { __decorate, __metadata } from 'tslib';
import { Store, Action } from 'ngx-tethys/store';
import { helpers } from 'ngx-tethys/util';
import { Subject } from 'rxjs';
import { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';
import { ThyIconModule } from 'ngx-tethys/icon';

const notifyQueueInitialState = {
    topLeftQueue: [],
    topRightQueue: [],
    bottomLeftQueue: [],
    bottomRightQueue: []
};
class NotifyQueueStore extends Store {
    constructor() {
        super(notifyQueueInitialState);
    }
    static topRightSelector(state) {
        return state.topRightQueue;
    }
    static topLeftSelector(state) {
        return state.topLeftQueue;
    }
    static bottomLeftSelector(state) {
        return state.bottomLeftQueue;
    }
    static bottomRightSelector(state) {
        return state.bottomRightQueue;
    }
    convertQueueKey(placement) {
        let key;
        if (placement === 'topLeft') {
            key = 'topLeftQueue';
        }
        else if (placement === 'topRight') {
            key = 'topRightQueue';
        }
        else if (placement === 'bottomLeft') {
            key = 'bottomLeftQueue';
        }
        else if (placement === 'bottomRight') {
            key = 'bottomRightQueue';
        }
        return key;
    }
    addNotify(placement, options) {
        const key = this.convertQueueKey(placement);
        const state = this.snapshot;
        if (state[key].length > options.maxStack) {
            state[key].shift();
        }
        state[key].push(options);
        this.next(state);
    }
    removeNotify(id, placement) {
        const state = this.snapshot;
        if (placement) {
            const queueKey = this.convertQueueKey(placement);
            if (state.hasOwnProperty(queueKey) && state[queueKey].length) {
                state[queueKey] = state[queueKey].filter((item) => {
                    return item.id !== id;
                });
            }
        }
        else {
            Object.keys(state).forEach(queueKey => {
                if (state.hasOwnProperty(queueKey) && state[queueKey].length) {
                    state[queueKey] = state[queueKey].filter((item) => {
                        return item.id !== id;
                    });
                }
            });
        }
        this.next(state);
    }
}
NotifyQueueStore.decorators = [
    { type: Injectable }
];
NotifyQueueStore.ctorParameters = () => [];
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", void 0)
], NotifyQueueStore.prototype, "addNotify", null);
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, String]),
    __metadata("design:returntype", void 0)
], NotifyQueueStore.prototype, "removeNotify", null);

const ANIMATION_IN_DURATION = 100;
const ANIMATION_OUT_DURATION = 150;
const HIDE_STYLE = { transform: 'translateX(0)', opacity: 0, height: 0, paddingTop: 0, paddingBottom: 0, margin: 0 };
class ThyNotifyComponent {
    constructor(_queueStore, _ngZone) {
        this._queueStore = _queueStore;
        this._ngZone = _ngZone;
        this.className = '';
        this.notifyIconName = '';
        this.extendContentClass = false;
        this.isShowDetail = false;
    }
    set thyOption(value) {
        this.option = value;
        const type = value.type;
        this.placement = value.placement || 'topRight';
        if (this.placement === 'topLeft' || this.placement === 'bottomLeft') {
            this.flyInOut = 'flyInOutLeft';
        }
        else {
            this.flyInOut = 'flyInOutRight';
        }
        this.className = `thy-notify thy-notify-${type}`;
    }
    ngOnInit() {
        const iconName = {
            success: 'check-circle-fill',
            info: 'info-circle-fill',
            warning: 'waring-fill',
            error: 'close-circle-fill'
        };
        this.notifyIconName = iconName[this.option.type];
        this._creatCloseTimer();
    }
    ngOnDestroy() {
        this._clearCloseTimer();
    }
    extendContent() {
        this.extendContentClass = true;
    }
    showDetailToggle() {
        this.isShowDetail = !this.isShowDetail;
    }
    closeNotify() {
        this._ngZone.runOutsideAngular(() => {
            this.flyInOut = 'componentHide';
            setTimeout(() => {
                this._queueStore.removeNotify(this.option.id, this.placement);
            }, ANIMATION_OUT_DURATION);
        });
    }
    triggerDetail() {
        if (helpers.isFunction(this.option.detail.action)) {
            this.option.detail.action();
        }
        if (this.option.detail.content) {
            this.showDetailToggle();
        }
    }
    mouseenter() {
        if (this.option.pauseOnHover) {
            this._clearCloseTimer();
        }
    }
    mouseleave() {
        if (this.option.pauseOnHover) {
            this._creatCloseTimer();
        }
    }
    _creatCloseTimer() {
        if (this.option.duration) {
            this.closeTimer = setInterval(() => {
                clearInterval(this.closeTimer);
                this.closeNotify();
            }, this.option.duration);
        }
    }
    _clearCloseTimer() {
        clearInterval(this.closeTimer);
    }
}
ThyNotifyComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-notify',
                template: "<ng-container *ngIf=\"!option.html\">\n  <a href=\"javascript:;\" class=\"thy-notify-close\" (click)=\"closeNotify()\">\n    <thy-icon thyIconName=\"close\"></thy-icon>\n  </a>\n  <div class=\"thy-notify-icon-container\">\n    <thy-icon [thyIconName]=\"notifyIconName\"></thy-icon>\n  </div>\n  <div class=\"thy-notify-main\">\n    <div class=\"thy-notify-title\">{{ option?.title }}</div>\n    <div\n      *ngIf=\"option?.detail || option?.content\"\n      class=\"thy-notify-content\"\n      [ngClass]=\"{ 'thy-notify-content--extend': extendContentClass === true }\"\n      (click)=\"extendContent()\"\n    >\n      {{ option?.content }}\n      <a href=\"javascript:;\" *ngIf=\"option?.detail\" class=\"link-secondary\" (click)=\"triggerDetail()\">{{ (option?.detail)['link'] }}</a>\n    </div>\n    <div class=\"thy-notify-detail\" *ngIf=\"isShowDetail\">{{ (option?.detail)['content'] }}</div>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"option?.html\">\n  <a href=\"javascript:;\" class=\"thy-notify-close\" (click)=\"closeNotify()\">\n    <thy-icon thyIconName=\"close\"></thy-icon>\n  </a>\n  <div class=\"thy-notify-main\">\n    <template [ngTemplateOutlet]=\"option?.html\"></template>\n  </div>\n</ng-container>\n",
                providers: [UpdateHostClassService],
                animations: [
                    trigger('flyInOut', [
                        state('flyInOutRight', style({ transform: 'translateX(0)', opacity: 1, height: '*' })),
                        transition('void => flyInOutRight', [
                            style({ transform: 'translateX(100%)', opacity: 0, height: '*' }),
                            animate(ANIMATION_IN_DURATION)
                        ]),
                        transition('flyInOutRight => componentHide', [animate(ANIMATION_OUT_DURATION, style(HIDE_STYLE))]),
                        transition('flyInOutRight => void', [animate(ANIMATION_IN_DURATION, style(HIDE_STYLE))]),
                        state('flyInOutLeft', style({ transform: 'translateX(0)', opacity: 1, height: '*' })),
                        transition('void => flyInOutLeft', [
                            style({ transform: 'translateX(-100%)', opacity: 0, height: '*' }),
                            animate(ANIMATION_IN_DURATION)
                        ]),
                        transition('flyInOutLeft => componentHide', [animate(ANIMATION_OUT_DURATION, style(HIDE_STYLE))]),
                        transition('flyInOutLeft => void', [animate(ANIMATION_IN_DURATION, style(HIDE_STYLE))]),
                        state('componentHide', style(HIDE_STYLE))
                    ])
                ]
            },] }
];
ThyNotifyComponent.ctorParameters = () => [
    { type: NotifyQueueStore },
    { type: NgZone }
];
ThyNotifyComponent.propDecorators = {
    flyInOut: [{ type: HostBinding, args: ['@flyInOut',] }],
    className: [{ type: HostBinding, args: ['class',] }],
    thyOption: [{ type: Input }],
    mouseenter: [{ type: HostListener, args: ['mouseenter',] }],
    mouseleave: [{ type: HostListener, args: ['mouseleave',] }]
};

class ThyNotifyContainerComponent {
    constructor(queueStore) {
        this.queueStore = queueStore;
        this.className = true;
    }
    ngOnInit() {
        this.placement = this.initialState.placement;
        let queue$, queueKey;
        if (this.placement === 'bottomRight') {
            this.bottomRight = true;
        }
        else if (this.placement === 'bottomLeft') {
            this.bottomLeft = true;
        }
        else if (this.placement === 'topLeft') {
            this.topLeft = true;
        }
        else {
            this.topRight = true;
        }
        if (this.placement === 'topLeft') {
            queueKey = 'topLeftQueue';
            queue$ = this.queueStore.select(NotifyQueueStore.topLeftSelector);
        }
        else if (this.placement === 'topRight') {
            queueKey = 'topRightQueue';
            queue$ = this.queueStore.select(NotifyQueueStore.topRightSelector);
        }
        else if (this.placement === 'bottomLeft') {
            queueKey = 'bottomLeftQueue';
            queue$ = this.queueStore.select(NotifyQueueStore.bottomLeftSelector);
        }
        else if (this.placement === 'bottomRight') {
            queueKey = 'bottomRightQueue';
            queue$ = this.queueStore.select(NotifyQueueStore.bottomRightSelector);
        }
        queue$.subscribe(data => {
            this[queueKey] = data;
        });
    }
}
ThyNotifyContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-notify-container',
                template: "<thy-notify *ngFor=\"let item of topLeftQueue\" [thyOption]=\"item\"></thy-notify>\n<thy-notify *ngFor=\"let item of topRightQueue\" [thyOption]=\"item\"></thy-notify>\n<thy-notify *ngFor=\"let item of bottomLeftQueue\" [thyOption]=\"item\"></thy-notify>\n<thy-notify *ngFor=\"let item of bottomRightQueue\" [thyOption]=\"item\"></thy-notify>\n"
            },] }
];
ThyNotifyContainerComponent.ctorParameters = () => [
    { type: NotifyQueueStore }
];
ThyNotifyContainerComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-notify-root',] }],
    bottomRight: [{ type: HostBinding, args: ['class.thy-notify-bottomRight',] }],
    bottomLeft: [{ type: HostBinding, args: ['class.thy-notify-bottomLeft',] }],
    topLeft: [{ type: HostBinding, args: ['class.thy-notify-topLeft',] }],
    topRight: [{ type: HostBinding, args: ['class.thy-notify-topRight',] }]
};

const CONTAINER_PLACEMENT = new InjectionToken('CONTAINER_PLACEMENT');
const THY_NOTIFY_DEFAULT_OPTIONS = new InjectionToken('thy-notify-default-options');
const ɵ0 = {};
const THY_NOTIFY_DEFAULT_OPTIONS_PROVIDER = {
    provide: THY_NOTIFY_DEFAULT_OPTIONS,
    useValue: ɵ0
};

const NOTIFY_OPTION_DEFAULT = {
    duration: 4500,
    pauseOnHover: true,
    maxStack: 8,
    placement: 'topRight'
};
class ThyNotifyService {
    constructor(injector, componentFactoryResolver, appRef, queueStore, defaultConfig) {
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.queueStore = queueStore;
        this.defaultConfig = defaultConfig;
        this.notifyQueue$ = new Subject();
        this._lastNotifyId = 0;
    }
    show(options) {
        const notifyConfig = this.formatOptions(options);
        const { placement } = notifyConfig;
        this.queueStore.addNotify(placement, notifyConfig);
        this._initContainer(placement);
    }
    success(title, content, options) {
        this.show(Object.assign(Object.assign({}, (options || {})), { type: 'success', title: title || (options === null || options === void 0 ? void 0 : options.title) || '成功', content: content || (options === null || options === void 0 ? void 0 : options.content) }));
    }
    info(title, content, options) {
        this.show(Object.assign(Object.assign({}, (options || {})), { type: 'info', title: title || (options === null || options === void 0 ? void 0 : options.title) || '提示', content: content || (options === null || options === void 0 ? void 0 : options.content) }));
    }
    warning(title, content, options) {
        this.show(Object.assign(Object.assign({}, (options || {})), { type: 'warning', title: title || (options === null || options === void 0 ? void 0 : options.title) || '警告', content: content || (options === null || options === void 0 ? void 0 : options.content) }));
    }
    error(title, content, options) {
        var _a, _b;
        const config = helpers.isString(options)
            ? { type: 'error', title: title || '错误', content: content, detail: options }
            : Object.assign(Object.assign({}, (options || {})), { type: 'error', title: title || ((_a = options) === null || _a === void 0 ? void 0 : _a.title) || '错误', content: content || ((_b = options) === null || _b === void 0 ? void 0 : _b.content) });
        this.show(config);
    }
    removeNotifyById(id) {
        this.queueStore.removeNotify(id);
    }
    _initContainer(placement) {
        if (placement === 'topRight') {
            this.containerRefTopRight = this._loadNotifyContainerComponent(this.containerRefTopRight, placement);
        }
        else if (placement === 'bottomRight') {
            this.containerRefBottomRight = this._loadNotifyContainerComponent(this.containerRefBottomRight, placement);
        }
        else if (placement === 'bottomLeft') {
            this.containerRefBottomLeft = this._loadNotifyContainerComponent(this.containerRefBottomLeft, placement);
        }
        else if (placement === 'topLeft') {
            this.containerRefTopLeft = this._loadNotifyContainerComponent(this.containerRefTopLeft, placement);
        }
    }
    _loadNotifyContainerComponent(containerRef, placement) {
        if (!containerRef) {
            const portalOutlet = new DomPortalOutlet(document.body, this.componentFactoryResolver, this.appRef, this.injector);
            const componentPortal = new ComponentPortal(ThyNotifyContainerComponent, null);
            containerRef = portalOutlet.attachComponentPortal(componentPortal);
            Object.assign(containerRef.instance, {
                initialState: {
                    placement
                }
            });
            containerRef.changeDetectorRef.detectChanges();
        }
        return containerRef;
    }
    formatOptions(options) {
        if (helpers.isString(options.detail)) {
            options = Object.assign(Object.assign({}, options), { detail: { link: '[详情]', content: options.detail } });
        }
        return Object.assign({}, NOTIFY_OPTION_DEFAULT, { id: this._lastNotifyId++ }, this.defaultConfig, options);
    }
}
ThyNotifyService.decorators = [
    { type: Injectable }
];
ThyNotifyService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: NotifyQueueStore },
    { type: undefined, decorators: [{ type: Inject, args: [THY_NOTIFY_DEFAULT_OPTIONS,] }] }
];

class ThyNotifyModule {
}
ThyNotifyModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyNotifyComponent, ThyNotifyContainerComponent],
                entryComponents: [ThyNotifyContainerComponent],
                providers: [ThyNotifyService, NotifyQueueStore, THY_NOTIFY_DEFAULT_OPTIONS_PROVIDER],
                imports: [CommonModule, ThyIconModule],
                exports: [ThyNotifyContainerComponent, ThyNotifyComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { CONTAINER_PLACEMENT, NotifyQueueStore, THY_NOTIFY_DEFAULT_OPTIONS, THY_NOTIFY_DEFAULT_OPTIONS_PROVIDER, ThyNotifyComponent, ThyNotifyContainerComponent, ThyNotifyModule, ThyNotifyService, notifyQueueInitialState, ɵ0 };
//# sourceMappingURL=ngx-tethys-notify.js.map

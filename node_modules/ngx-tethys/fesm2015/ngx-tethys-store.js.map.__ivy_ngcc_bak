{"version":3,"file":"ngx-tethys-store.js","sources":["../../src/store/types.ts","../../src/store/internals/static-injector.ts","../../src/store/module.ts","../../src/store/plugins/redux_devtools.ts","../../src/store/action-state.ts","../../src/store/root-store.ts","../../src/store/utils.ts","../../src/store/action.ts","../../src/store/store.ts","../../src/store/entity-store.ts","../../src/store/ngx-tethys-store.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const META_KEY = '__THY_META__';\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\n\nexport interface StoreMetaInfo {\n    actions: any;\n    path: string;\n    children: any[];\n    instance: any;\n}\n\nexport interface ActionResult {}\n\n// export type Newable<T> = { new (...args: any[]): T };\n","import { Injector } from '@angular/core';\n\nclass ThyStoreModuleIsNotImported extends Error {\n    constructor() {\n        super(`You've forgotten to import \"ThyStoreModule\"!`);\n    }\n}\n\nlet injector: Injector | null = null;\n\nfunction assertDefined<T>(actual: T | null | undefined): asserts actual is T {\n    if (actual == null) {\n        throw new ThyStoreModuleIsNotImported();\n    }\n}\n\nexport function setInjector(parentInjector: Injector): void {\n    injector = parentInjector;\n}\n\n/**\n * Ensure that we don't keep any references in case of the bootstrapped\n * module is destroyed via `NgModuleRef.destroy()`.\n */\nexport function clearInjector(): void {\n    injector = null;\n}\n\nexport function getInjector(): Injector {\n    assertDefined(injector);\n    return injector;\n}\n","import { NgModule, ModuleWithProviders, Type, Injector, NgModuleRef } from '@angular/core';\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN } from './types';\nimport { Store } from './store';\nimport { clearInjector, setInjector } from './internals/static-injector';\n\n@NgModule()\nexport class ThyRootStoreModule {\n    constructor(ngModuleRef: NgModuleRef<any>) {\n        setInjector(ngModuleRef.injector);\n        ngModuleRef.onDestroy(clearInjector);\n    }\n}\n\n@NgModule()\nexport class ThyFeatureStoreModule {}\n\n@NgModule({})\nexport class ThyStoreModule {\n    static forRoot(stores: Type<Store>[] = []): ModuleWithProviders<ThyRootStoreModule> {\n        return {\n            ngModule: ThyRootStoreModule,\n            providers: [\n                ...stores,\n                {\n                    provide: ROOT_STATE_TOKEN,\n                    useValue: stores\n                }\n            ]\n        };\n    }\n\n    static forFeature(stores: Type<Store>[] = []): ModuleWithProviders<ThyFeatureStoreModule> {\n        return {\n            ngModule: ThyFeatureStoreModule,\n            providers: [\n                ...stores,\n                {\n                    provide: FEATURE_STATE_TOKEN,\n                    multi: true,\n                    useValue: stores\n                }\n            ]\n        };\n    }\n}\n","export abstract class StorePlugin {\n    // abstract handleNewState(state: Readonly<object>): void;\n    abstract handleNewState(actionName: string, state: Readonly<object>): void;\n    abstract isConnectSuccessed(): boolean;\n}\n/**\n * @internal\n */\nexport interface ReduxDevtoolsInstance {\n    send(action: string, state: object): void;\n}\n\nexport function tinyStateVersion(): string {\n    return 'v0.6.0';\n}\n\nexport class ReduxDevtoolsPlugin implements StorePlugin {\n    private _devTools: ReduxDevtoolsInstance | null = null;\n\n    _window = window;\n    constructor(\n    ) {\n        if (this._window == null) {\n            return;\n        }\n        const globalDevtools: { connect(config: any): ReduxDevtoolsInstance } | undefined =\n            (this._window as any)['__REDUX_DEVTOOLS_EXTENSION__'] ||\n            (this._window as any)['devToolsExtension'];\n\n        if (!globalDevtools) {\n            console.log(`未安装Chrome浏览器的拓展插件: Redux DevTools.`);\n            console.log(`插件下载地址: https://www.chromefor.com/redux-devtools_v2-17-0/`);\n            return;\n        }\n        this._devTools = globalDevtools.connect({\n            name: `NgxStore ${tinyStateVersion()}`\n        });\n    }\n\n    handleNewState(actionName: string, state: object): void {\n        if (this.isConnectSuccessed()) {\n            this._devTools.send(actionName, state);\n        }\n    }\n\n    isConnectSuccessed(): boolean {\n        if (this._devTools === null) {\n            return false;\n        }\n        return true;\n    }\n}\n\nfunction getReduxDevToolsPlugin(): any {\n    if (!window[`___ReduxDevtoolsPlugin___`]) {\n        window[`___ReduxDevtoolsPlugin___`] = new ReduxDevtoolsPlugin();\n    }\n    return window[`___ReduxDevtoolsPlugin___`];\n}\n\nexport default getReduxDevToolsPlugin;\n","// @dynamic\nexport class ActionState {\n    private static actionName = '';\n\n    public static changeAction(actionName: string) {\n        this.actionName = actionName;\n    }\n\n    public static getActionName() {\n        return this.actionName;\n    }\n}\n","import { Store } from './store';\nimport { Inject, SkipSelf, Optional, OnDestroy, isDevMode, Injectable } from '@angular/core';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport getReduxDevToolsPlugin, { StorePlugin } from './plugins/redux_devtools';\nimport { ActionState } from './action-state';\n\nexport type StoreInstanceMap = Map<string, Store<any>>; // Map key：string，value：状态数据\n\nlet rootStore: RootStore;\n/**\n * @internal\n */\n@Injectable()\nexport class RootStore {\n    private connectSuccessed = false;\n    /**\n     * 数据流 数据是一个Map，k,v键值对，关键字->状态数据\n     */\n    private readonly _containers = new BehaviorSubject<StoreInstanceMap>(new Map<string, Store<any>>());\n    private _plugin: StorePlugin = getReduxDevToolsPlugin();\n    private _combinedStateSubscription: Subscription = new Subscription();\n\n    constructor() {\n        if (this._plugin.isConnectSuccessed()) {\n            this.connectSuccessed = true;\n            this._assignCombinedState(); // 最终调用handleNewState\n            console.log(`是否在Angular开发环境：${isDevMode()}, 初始化root-store`);\n        }\n    }\n\n    private _assignCombinedState() {\n        this._combinedStateSubscription = this._containers\n            .pipe(switchMap(containers => this._getCombinedState(containers)))\n            .pipe(\n                map(states => {\n                    const actionName = ActionState.getActionName();\n                    const state = states.reduce((acc, curr) => {\n                        acc[curr.containerName] = curr.state;\n                        return acc;\n                    }, <{ [key: string]: any }>{});\n                    return { state: state, actionName: actionName };\n                })\n            )\n            .subscribe(c => {\n                this._plugin.handleNewState(c.actionName, c.state);\n            });\n    }\n\n    /**\n     * 合并数据流\n     * 合并状态数据，把状态数据转换为这样的数据：{ containerName: string, state: any }，并且\n     * 通过combineLatest合并成一个数据数据流，这样状态数据只有涉及更新，那么这边就会得到通知\n     * @param containers 状态数据的Map\n     */\n    private _getCombinedState(containers: StoreInstanceMap) {\n        return combineLatest(\n            ...Array.from(containers.entries()).map(([containerName, container]) => {\n                return container.state$.pipe(\n                    map(state => ({ containerName, state })),\n                    tap(data => {})\n                );\n            })\n        );\n    }\n\n    /**\n     * @internal\n     */\n    ngOnDestroy() {\n        this._combinedStateSubscription.unsubscribe();\n    }\n\n    /**\n     * @internal\n     */\n    registerStore(store: Store<any>) {\n        if (!this.connectSuccessed) {\n            return;\n        }\n        const containers = new Map(this._containers.value);\n        if (containers.has(store.getStoreInstanceId())) {\n            throw new Error(\n                `Store: Store with duplicate instance ID found! ${store.getStoreInstanceId()}` +\n                    ` is already registered. Please check your getStoreInstanceId() methods!`\n            );\n        }\n        containers.set(store.getStoreInstanceId(), store);\n        this._containers.next(containers);\n    }\n\n    existStoreInstanceId(instanceId: string): boolean {\n        const containers = new Map(this._containers.value);\n        if (containers.has(instanceId)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @internal\n     */\n    unregisterStore(store: Store<any>) {\n        if (!this.connectSuccessed) {\n            return;\n        }\n        const containers = new Map(this._containers.value);\n        containers.delete(store.getStoreInstanceId());\n        this._containers.next(containers);\n    }\n}\n\nexport function getSingletonRootStore() {\n    if (!rootStore) {\n        rootStore = new RootStore();\n    }\n    return rootStore;\n}\n","import { StoreMetaInfo, META_KEY } from './types';\n\nexport function findAndCreateStoreMetadata(target: any): StoreMetaInfo {\n    if (!target.hasOwnProperty(META_KEY)) {\n        const defaultMetadata: StoreMetaInfo = {\n            actions: {},\n            path: null,\n            children: [],\n            instance: null\n        };\n        target[META_KEY] = defaultMetadata;\n    }\n    return target[META_KEY];\n}\n","import { META_KEY } from './types';\nimport { findAndCreateStoreMetadata } from './utils';\nimport { Observable, Observer, of, throwError } from 'rxjs';\nimport { map, shareReplay, catchError, exhaustMap } from 'rxjs/operators';\nimport { ActionState } from './action-state';\nimport { ActionContext, ActionStatus } from './actions-stream';\n\nexport interface DecoratorActionOptions {\n    type: string;\n    payload?: any;\n}\n\n/**\n * Decorates a method with a action information.\n */\nexport function Action(action?: DecoratorActionOptions | string) {\n    return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\n        const meta = findAndCreateStoreMetadata(target);\n\n        // default use function name as action type\n        if (!action) {\n            action = {\n                type: name\n            };\n        }\n        // support string for type\n        if (typeof action === 'string') {\n            action = {\n                type: action\n            };\n        }\n        const type = action.type;\n\n        if (!action.type) {\n            throw new Error(`Action ${action.type} is missing a static \"type\" property`);\n        }\n\n        const originalFn = descriptor.value;\n        meta.actions[type] = {\n            fn: name,\n            originalFn: originalFn,\n            type\n        };\n\n        descriptor.value = function(...args: any[]) {\n            ActionState.changeAction(`${target.constructor.name}-${name}`);\n            let result = originalFn.call(this, ...args);\n            if (result instanceof Observable) {\n                result = result.pipe(\n                    catchError(error => {\n                        return of({ status: ActionStatus.Errored, action: action, error: error });\n                    }),\n                    shareReplay(),\n                    exhaustMap((result: ActionContext | any) => {\n                        if (result && result.status === ActionStatus.Errored) {\n                            return throwError(result.error);\n                        } else {\n                            return of(result);\n                        }\n                    })\n                );\n                result.subscribe();\n            }\n            return result;\n        };\n    };\n}\n","import { Observable, Observer, BehaviorSubject, from, of, PartialObserver, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';\nimport { META_KEY, StoreMetaInfo } from './types';\nimport { helpers } from 'ngx-tethys/util';\nimport { getSingletonRootStore, RootStore } from './root-store';\nimport { OnDestroy, isDevMode, Injectable } from '@angular/core';\nimport { ActionState } from './action-state';\nimport { Action } from './action';\n\ninterface Action {\n    type: string;\n    payload?: any;\n}\n\n@Injectable()\nexport class Store<T = unknown> implements Observer<T>, OnDestroy {\n    initialStateCache: any;\n\n    public state$: BehaviorSubject<T>;\n\n    public reduxToolEnabled = isDevMode();\n\n    private _defaultStoreInstanceId: string;\n\n    constructor(initialState: any) {\n        this._defaultStoreInstanceId = this._getClassName();\n        this.state$ = new BehaviorSubject<T>(initialState);\n        this.initialStateCache = { ...initialState };\n        if (this.reduxToolEnabled) {\n            const rootStore: RootStore = getSingletonRootStore();\n            ActionState.changeAction(`Add-${this._defaultStoreInstanceId}`);\n            rootStore.registerStore(this);\n        }\n    }\n\n    get snapshot() {\n        return this.state$.getValue();\n    }\n\n    public dispatch(type: string, payload?: any): Observable<any> {\n        ActionState.changeAction(`${this._defaultStoreInstanceId}-${type}`);\n        const result = this._dispatch({\n            type: type,\n            payload: payload\n        });\n        result.subscribe();\n        return result;\n    }\n\n    private _dispatch(action: any): Observable<any> {\n        const meta = this[META_KEY] as StoreMetaInfo;\n        if (!meta) {\n            throw new Error(`${META_KEY} is not found, current store has not action`);\n        }\n        const actionMeta = meta.actions[action.type];\n        if (!actionMeta) {\n            throw new Error(`${action.type} is not found`);\n        }\n        // let result: any = this[actionMeta.fn](this.snapshot, action.payload);\n        let result: any = actionMeta.originalFn.call(this, this.snapshot, action.payload);\n\n        if (result instanceof Promise) {\n            result = from(result);\n        }\n\n        if (result instanceof Observable) {\n            result = result.pipe(map(r => r));\n        } else {\n            result = new Observable((observer: Observer<any>) => {\n                observer.next({});\n            });\n        }\n        return result.pipe(shareReplay());\n    }\n\n    select<TResult>(selector: (state: T) => TResult): Observable<TResult> | Observable<TResult>;\n    select(selector: string | any): Observable<any> {\n        return this.state$.pipe(map(selector), distinctUntilChanged());\n    }\n\n    next(state: T) {\n        this.state$.next(state);\n    }\n\n    error(error: any) {\n        this.state$.error(error);\n    }\n\n    complete() {\n        this.state$.complete();\n    }\n\n    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription {\n        return this.state$.subscribe(next, error, complete);\n    }\n\n    /**\n     * set store new state\n     *\n     * @example\n     * this.setState(newState);\n     * this.setState({ users: produce(this.snapshot.users).add(user) });\n     * this.setState((state) => {\n     *    return {\n     *        users: produce(state.users).add(user)\n     *    }\n     * });\n     * @param fn\n     */\n    setState(fn: Partial<T> | ((newState: T) => Partial<T>)): void {\n        if (helpers.isFunction(fn)) {\n            this.next({\n                ...this.snapshot,\n                ...(fn as any)(this.snapshot)\n            });\n        } else {\n            this.next({\n                ...this.snapshot,\n                ...(fn as T)\n            });\n        }\n    }\n\n    getState(): T {\n        return this.snapshot;\n    }\n\n    @Action()\n    clearState() {\n        this.setState(this.initialStateCache);\n    }\n\n    ngOnDestroy() {\n        if (this.reduxToolEnabled) {\n            const rootStore: RootStore = getSingletonRootStore();\n            rootStore.unregisterStore(this);\n        }\n    }\n\n    /**\n     * You can override this method if you want to give your container instance a custom id.\n     * The returned id must be unique in the application.\n     */\n    getStoreInstanceId(): string {\n        return this._defaultStoreInstanceId;\n    }\n\n    private _getClassName(): string {\n        const name = this.constructor.name || /function (.+)\\(/.exec(this.constructor + '')[1];\n        if (this.reduxToolEnabled) {\n            const rootStore: RootStore = getSingletonRootStore();\n            if (!rootStore.existStoreInstanceId(name)) {\n                return name;\n            }\n            let j = 0;\n            for (let i = 1; i < 20; i++) {\n                if (!rootStore.existStoreInstanceId(`${name}-${i}`)) {\n                    j = i;\n                    break;\n                }\n            }\n            return `${name}-${j}`;\n        }\n        return name;\n    }\n}\n","import { Store } from './store';\nimport { Id, PaginationInfo } from 'ngx-tethys/types';\nimport { helpers, produce } from 'ngx-tethys/util';\nimport { mergeReferences, buildReferencesKeyBy, ReferenceArrayExtractAllowKeys } from 'ngx-tethys/util';\nimport { map } from 'rxjs/operators';\nimport { ReferencesIdDictionary, OnCombineRefsFn } from './references';\n\nexport interface EntityStoreOptions<TEntity = unknown, TReferences = unknown> {\n    idKey?: string;\n    referencesIdKeys?: ReferenceArrayExtractAllowKeys<TReferences>;\n}\n\nexport interface EntityAddOptions {\n    prepend?: boolean;\n    // 如果是最后追加，自动跳转到最后一页\n    autoGotoLastPage?: boolean;\n}\n\nexport interface EntityState<TEntity, TReferences = unknown> {\n    pagination?: PaginationInfo;\n    entities: TEntity[];\n    references?: TReferences;\n}\n\nexport class EntityStore<TState extends EntityState<TEntity, TReferences>, TEntity, TReferences = unknown> extends Store<TState> {\n    protected options: EntityStoreOptions<TEntity, TReferences>;\n\n    private internalReferencesIdMap: ReferencesIdDictionary<TReferences>;\n\n    get entities() {\n        return this.snapshot.entities;\n    }\n\n    entities$ = this.select(state => {\n        return state.entities;\n    });\n\n    entitiesWithRefs$ = this.entities$.pipe(\n        map(entities => {\n            if (!entities) {\n                return entities;\n            }\n            return entities.map(entity => {\n                const newEntity = { ...entity };\n\n                if (this['onCombineRefs']) {\n                    if (!newEntity['refs']) {\n                        newEntity['refs'] = {};\n                    }\n                    this['onCombineRefs'](newEntity, this.internalReferencesIdMap, this.snapshot.references);\n                } else {\n                    throw new Error(`onCombineRefs is not empty`);\n                }\n                return newEntity;\n            });\n        })\n    );\n\n    private resetPagination(pagination: PaginationInfo, count: number) {\n        pagination.count = count;\n        // 向上取整 21 / 20 = 1.05 = 2 pageCount is 2\n        const pageCount = Math.ceil(pagination.count / pagination.pageSize);\n        pagination.pageCount = pageCount;\n        this.snapshot.pagination = { ...pagination };\n    }\n\n    private increasePagination(amount: number) {\n        const pagination = this.snapshot.pagination;\n        this.resetPagination(pagination, pagination.count + amount);\n    }\n\n    private decreasePagination(amount: number) {\n        const pagination = this.snapshot.pagination;\n        if (pagination) {\n            this.resetPagination(pagination, pagination.count - amount);\n        }\n    }\n\n    private buildReferencesIdMap() {\n        if (this.snapshot.references) {\n            this.internalReferencesIdMap = buildReferencesKeyBy(this.snapshot.references, this.options.referencesIdKeys);\n        }\n    }\n\n    constructor(\n        initialState: EntityState<TEntity, TReferences> = {\n            entities: [] as TEntity[]\n        },\n        options: EntityStoreOptions<TEntity, TReferences> = { idKey: '_id' }\n    ) {\n        super(initialState);\n        this.options = { idKey: '_id', ...options };\n        if (!this.options.idKey) {\n            throw new Error(`idKey is required in EntityStore`);\n        }\n        this.buildReferencesIdMap();\n    }\n\n    /**\n     *\n     * Replace current collection with provided collection\n     *\n     * @example\n     * this.store.initialize([Entity, Entity], pagination: PaginationInfo);\n     *\n     */\n    initialize(entities: TEntity[], pagination?: PaginationInfo) {\n        const state = this.snapshot;\n        state.entities = entities || [];\n        state.pagination = pagination;\n        this.next(state);\n    }\n\n    /**\n     *\n     * Replace current collection with provided collection with references\n     *\n     * @example\n     * this.store.initializeWithReferences([Entity, Entity], references: TReferences, pagination: PaginationInfo);\n     *\n     */\n    initializeWithReferences(entities: TEntity[], references: TReferences, pagination?: PaginationInfo) {\n        const state = this.snapshot;\n        state.entities = entities || [];\n        state.pagination = pagination;\n        state.references = references;\n        this.buildReferencesIdMap();\n        this.next(state);\n    }\n\n    /**\n     * Add entity or entities for internal\n     * @param entity\n     * @param references\n     * @param addOptions\n     */\n    private addInternal(entity: TEntity | TEntity[], references?: Partial<TReferences>, addOptions?: EntityAddOptions) {\n        const addEntities = helpers.coerceArray(entity);\n        if (addEntities.length === 0) {\n            return;\n        }\n\n        const state = this.snapshot;\n        state.entities = produce(state.entities).add(addEntities, addOptions);\n        if (state.references) {\n            mergeReferences(state.references, references, this.options.referencesIdKeys);\n            this.buildReferencesIdMap();\n        }\n        if (state.pagination) {\n            this.increasePagination(addEntities.length);\n            if (addOptions && !addOptions.prepend && addOptions.autoGotoLastPage) {\n                state.pagination.pageIndex = state.pagination.pageCount;\n            }\n        }\n        this.next(state);\n    }\n\n    /**\n     * Add an entity or entities to the store.\n     *\n     * @example\n     * this.store.add(Entity);\n     * this.store.add([Entity, Entity]);\n     * this.store.add(Entity, { prepend: true });\n     */\n    add(entity: TEntity | TEntity[], addOptions?: EntityAddOptions) {\n        this.addInternal(entity, undefined, addOptions);\n    }\n\n    /**\n     * Add an entity or entities to the store with references.\n     *\n     * @example\n     * this.store.add(Entity);\n     * this.store.add([Entity, Entity]);\n     * this.store.add(Entity, { prepend: true });\n     */\n    addWithReferences(entity: TEntity | TEntity[], references: Partial<TReferences>, addOptions?: EntityAddOptions) {\n        this.addInternal(entity, references, addOptions);\n    }\n\n    /**\n     *\n     * Update an entity or entities in the store.\n     *\n     * @example\n     * this.store.update(3, {\n     *   name: 'New Name'\n     * }, references);\n     *\n     *  this.store.update(3, entity => {\n     *    return {\n     *      ...entity,\n     *      name: 'New Name'\n     *    }\n     *  }, references);\n     *\n     * this.store.update([1,2,3], {\n     *   name: 'New Name'\n     * }, references);\n     */\n    private updateInternal(\n        idsOrFn: Id | Id[] | null,\n        // | Partial<TState>\n        // | ((state: Readonly<TState>) => Partial<TState>)\n        // | ((entity: Readonly<TEntity>) => boolean),\n        newStateOrFn: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>,\n        references?: TReferences\n    ): void {\n        const ids = helpers.coerceArray(idsOrFn);\n\n        const state = this.snapshot;\n        for (let i = 0; i < state.entities.length; i++) {\n            const oldEntity = state.entities[i];\n            if (ids.indexOf(oldEntity[this.options.idKey]) > -1) {\n                const newState = helpers.isFunction(newStateOrFn) ? (newStateOrFn as any)(oldEntity) : newStateOrFn;\n                state.entities[i] = { ...(oldEntity as any), ...newState };\n            }\n        }\n        state.entities = [...state.entities];\n        if (state.references) {\n            mergeReferences(state.references, references, this.options.referencesIdKeys);\n            this.buildReferencesIdMap();\n        }\n        this.next(state);\n    }\n\n    /**\n     *\n     * Update an entity or entities in the store with references.\n     *\n     * @example\n     * this.store.update(3, {\n     *   name: 'New Name'\n     * }, references);\n     *\n     *  this.store.update(3, entity => {\n     *    return {\n     *      ...entity,\n     *      name: 'New Name'\n     *    }\n     *  }, references);\n     *\n     * this.store.update([1,2,3], {\n     *   name: 'New Name'\n     * }, references);\n     */\n    update(idsOrFn: Id | Id[] | null, newStateOrFn: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>): void {\n        this.updateInternal(idsOrFn, newStateOrFn, undefined);\n    }\n\n    /**\n     *\n     * Update an entity or entities in the store with references.\n     *\n     * @example\n     * this.store.updateWithReferences(3, {\n     *   name: 'New Name'\n     * }, references);\n     *\n     *  this.store.updateWithReferences(3, entity => {\n     *    return {\n     *      ...entity,\n     *      name: 'New Name'\n     *    }\n     *  }, references);\n     *\n     * this.store.updateWithReferences([1,2,3], {\n     *   name: 'New Name'\n     * }, references);\n     */\n    updateWithReferences(\n        idsOrFn: Id | Id[] | null,\n        newStateOrFn: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>,\n        references: TReferences\n    ): void {\n        this.updateInternal(idsOrFn, newStateOrFn, references);\n    }\n\n    /**\n     *\n     * Remove one or more entities from the store:\n     *\n     * @example\n     * this.store.remove(5);\n     * this.store.remove([1,2,3]);\n     * this.store.remove(entity => entity.id === 1);\n     */\n    remove(id: Id | Id[]): void;\n    remove(predicate: (entity: Readonly<TEntity>) => boolean): void;\n    remove(idsOrFn?: Id | Id[] | ((entity: Readonly<TEntity>) => boolean)): void {\n        const state = this.snapshot;\n        const originalLength = state.entities.length;\n        state.entities = produce(state.entities, this.options).remove(idsOrFn);\n        this.decreasePagination(originalLength - state.entities.length);\n        this.next(state);\n    }\n\n    trackBy = (_index: number, entity: TEntity) => {\n        return entity[this.options.idKey];\n    };\n\n    clearPagination() {\n        const state = this.snapshot;\n        state.pagination = null;\n        this.next(state);\n    }\n\n    clear() {\n        const state = this.snapshot;\n        state.entities = [];\n        state.pagination = null;\n        state.references = null;\n        this.next(state);\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
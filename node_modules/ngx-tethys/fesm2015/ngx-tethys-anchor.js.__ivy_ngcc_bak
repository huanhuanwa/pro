import { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ChangeDetectorRef, NgZone, Renderer2, ViewChild, Input, Output, TemplateRef, ElementRef, ContentChild, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Platform, PlatformModule } from '@angular/cdk/platform';
import { Subject, fromEvent } from 'rxjs';
import { throttleTime, takeUntil } from 'rxjs/operators';
import { getOffset } from 'ngx-tethys/util';
import { ThyScrollService } from 'ngx-tethys/core';
import { ThyAffixModule } from 'ngx-tethys/affix';

const sharpMatcherRegx = /#([^#]+)$/;
class ThyAnchorComponent {
    constructor(document, cdr, platform, zone, renderer, scrollService) {
        this.document = document;
        this.cdr = cdr;
        this.platform = platform;
        this.zone = zone;
        this.renderer = renderer;
        this.scrollService = scrollService;
        this.thyAffix = true;
        this.thyBounds = 5;
        this.thyOffsetTop = undefined;
        this.thyTarget = '';
        this.thyClick = new EventEmitter();
        this.thyScroll = new EventEmitter();
        this.visible = false;
        this.wrapperStyle = { 'max-height': '100vh' };
        this.links = [];
        this.animating = false;
        this.destroy$ = new Subject();
        this.handleScrollTimeoutID = -1;
    }
    registerLink(link) {
        this.links.push(link);
    }
    unregisterLink(link) {
        this.links.splice(this.links.indexOf(link), 1);
    }
    getContainer() {
        return this.container || window;
    }
    ngAfterViewInit() {
        this.registerScrollEvent();
    }
    ngOnDestroy() {
        clearTimeout(this.handleScrollTimeoutID);
        this.destroy$.next();
        this.destroy$.complete();
    }
    registerScrollEvent() {
        if (!this.platform.isBrowser) {
            return;
        }
        this.destroy$.next();
        this.zone.runOutsideAngular(() => {
            fromEvent(this.getContainer(), 'scroll')
                .pipe(throttleTime(50), takeUntil(this.destroy$))
                .subscribe(() => this.handleScroll());
        });
        // Browser would maintain the scrolling position when refreshing.
        // So we have to delay calculation in avoid of getting a incorrect result.
        this.handleScrollTimeoutID = setTimeout(() => this.handleScroll());
    }
    handleScroll() {
        if (typeof document === 'undefined' || this.animating) {
            return;
        }
        const container = this.container instanceof HTMLElement ? this.container : this.document;
        const sections = [];
        const scope = (this.thyOffsetTop || 0) + this.thyBounds;
        this.links.forEach(linkComponent => {
            const sharpLinkMatch = sharpMatcherRegx.exec(linkComponent.thyHref.toString());
            if (!sharpLinkMatch) {
                return;
            }
            const target = container.querySelector(`#${sharpLinkMatch[1]}`);
            if (target) {
                const top = getOffset(target, this.getContainer()).top;
                if (top < scope) {
                    sections.push({
                        top,
                        linkComponent
                    });
                }
            }
        });
        this.visible = !!sections.length;
        if (!this.visible) {
            this.clearActive();
            this.cdr.detectChanges();
        }
        else {
            const maxSection = sections.reduce((prev, curr) => (curr.top > prev.top ? curr : prev));
            this.handleActive(maxSection.linkComponent);
        }
        this.setVisible();
    }
    clearActive() {
        this.links.forEach(i => {
            i.unsetActive();
        });
    }
    handleActive(linkComponent) {
        this.clearActive();
        linkComponent.setActive();
        const linkNode = linkComponent.getLinkTitleElement();
        this.ink.nativeElement.style.top = `${linkNode.offsetTop}px`;
        this.ink.nativeElement.style.height = `${linkNode.clientHeight}px`;
        this.visible = true;
        this.setVisible();
        this.thyScroll.emit(linkComponent);
    }
    setVisible() {
        const visible = this.visible;
        const visibleClassname = 'visible';
        if (this.ink) {
            if (visible) {
                this.renderer.addClass(this.ink.nativeElement, visibleClassname);
            }
            else {
                this.renderer.removeClass(this.ink.nativeElement, visibleClassname);
            }
        }
    }
    handleScrollTo(linkComponent) {
        const container = this.container instanceof HTMLElement ? this.container : this.document;
        const linkElement = container.querySelector(linkComponent.thyHref);
        if (!linkElement) {
            return;
        }
        this.animating = true;
        const containerScrollTop = this.scrollService.getScroll(this.getContainer());
        const elementOffsetTop = getOffset(linkElement, this.getContainer()).top;
        const targetScrollTop = containerScrollTop + elementOffsetTop - (this.thyOffsetTop || 0);
        this.scrollService.scrollTo(this.getContainer(), targetScrollTop, undefined, () => {
            this.animating = false;
        });
        this.handleActive(linkComponent);
        this.thyClick.emit(linkComponent);
    }
    ngOnChanges(changes) {
        const { thyOffsetTop, thyContainer } = changes;
        if (thyOffsetTop) {
            this.wrapperStyle = {
                'max-height': `calc(100vh - ${this.thyOffsetTop}px)`
            };
        }
        if (thyContainer && this.thyContainer) {
            const container = this.thyContainer || this.thyTarget;
            this.container = typeof container === 'string' ? this.document.querySelector(container) : container;
            this.registerScrollEvent();
        }
    }
}
ThyAnchorComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-anchor',
                exportAs: 'thyAnchor',
                preserveWhitespaces: false,
                template: `
        <thy-affix *ngIf="thyAffix; else content" [thyOffsetTop]="thyOffsetTop" [thyContainer]="container">
            <ng-template [ngTemplateOutlet]="content"></ng-template>
        </thy-affix>
        <ng-template #content>
            <div class="thy-anchor-wrapper" [ngStyle]="wrapperStyle">
                <div class="thy-anchor">
                    <div class="thy-anchor-ink">
                        <div class="thy-anchor-ink-full" #ink></div>
                    </div>
                    <ng-content></ng-content>
                </div>
            </div>
        </ng-template>
    `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyAnchorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef },
    { type: Platform },
    { type: NgZone },
    { type: Renderer2 },
    { type: ThyScrollService }
];
ThyAnchorComponent.propDecorators = {
    ink: [{ type: ViewChild, args: ['ink',] }],
    thyAffix: [{ type: Input }],
    thyBounds: [{ type: Input }],
    thyOffsetTop: [{ type: Input }],
    thyContainer: [{ type: Input }],
    thyTarget: [{ type: Input }],
    thyClick: [{ type: Output }],
    thyScroll: [{ type: Output }]
};

class ThyAnchorLinkComponent {
    constructor(elementRef, anchorComponent, platform, renderer) {
        this.elementRef = elementRef;
        this.anchorComponent = anchorComponent;
        this.platform = platform;
        this.renderer = renderer;
        this.thyHref = '#';
        this.title = '';
        this.renderer.addClass(elementRef.nativeElement, 'thy-anchor-link');
    }
    set thyTitle(value) {
        if (value instanceof TemplateRef) {
            this.title = null;
            this.titleTemplate = value;
        }
        else {
            this.title = value;
        }
    }
    ngOnInit() {
        this.anchorComponent.registerLink(this);
    }
    getLinkTitleElement() {
        return this.linkTitle.nativeElement;
    }
    setActive() {
        this.renderer.addClass(this.elementRef.nativeElement, 'thy-anchor-link-active');
    }
    unsetActive() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'thy-anchor-link-active');
    }
    goToClick(e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.platform.isBrowser) {
            this.anchorComponent.handleScrollTo(this);
        }
    }
    ngOnDestroy() {
        this.anchorComponent.unregisterLink(this);
    }
}
ThyAnchorLinkComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-link',
                exportAs: 'thyLink',
                preserveWhitespaces: false,
                template: `
        <a #linkTitle (click)="goToClick($event)" href="{{ thyHref }}" class="thy-anchor-link-title" title="{{ title }}">
            <span *ngIf="title; else titleTemplate || thyTemplate">{{ title }}</span>
        </a>
        <ng-content></ng-content>
    `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyAnchorLinkComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyAnchorComponent },
    { type: Platform },
    { type: Renderer2 }
];
ThyAnchorLinkComponent.propDecorators = {
    thyHref: [{ type: Input }],
    thyTitle: [{ type: Input }],
    thyTemplate: [{ type: ContentChild, args: ['thyTemplate',] }],
    linkTitle: [{ type: ViewChild, args: ['linkTitle', { static: true },] }]
};

class ThyAnchorModule {
}
ThyAnchorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyAnchorComponent, ThyAnchorLinkComponent],
                exports: [ThyAnchorComponent, ThyAnchorLinkComponent],
                imports: [CommonModule, PlatformModule, ThyAffixModule]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyAnchorComponent, ThyAnchorLinkComponent, ThyAnchorModule };
//# sourceMappingURL=ngx-tethys-anchor.js.map

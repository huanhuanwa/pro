{"version":3,"file":"ngx-tethys-form.js","sources":["../../src/form/form.class.ts","../../src/form/form-validator-loader.ts","../../src/form/form-validator.service.ts","../../src/form/form.directive.ts","../../src/form/form-group.component.ts","../../src/form/form-group-label.directive.ts","../../src/form/form-submit.directive.ts","../../src/form/from-group-footer/form-group-footer.component.ts","../../src/form/form-group-error/form-group-error.component.ts","../../src/form/validator/unique-validator.directive.ts","../../src/form/validator/min-validator.directive.ts","../../src/form/validator/max-validator.directive.ts","../../src/form/validator/confirm-validator.directive.ts","../../src/form/module.ts","../../src/form/ngx-tethys-form.ts"],"sourcesContent":["import { Dictionary } from 'ngx-tethys/types';\nimport { InjectionToken } from '@angular/core';\n\nexport type ThyFormLayout = 'horizontal' | 'vertical' | 'inline';\n\nexport type ThyFormGroupFooterAlign = 'left' | 'right' | 'center';\n\nexport declare type ThyFormValidationMessages = Dictionary<Dictionary<string>>;\n\nexport interface ThyFormValidatorConfig {\n    showElementError?: boolean | ((element: HTMLElement, errorMessages: string[]) => void);\n    removeElementError?: boolean | ((element: HTMLElement) => void);\n    validationMessages?: ThyFormValidationMessages;\n}\nexport interface ThyFormValidatorGlobalConfig extends ThyFormValidatorConfig {\n    globalValidationMessages?: Dictionary<string>;\n}\n\nexport interface ThyFormConfig {\n    layout?: ThyFormLayout;\n    footerAlign?: ThyFormGroupFooterAlign;\n}\n\nexport const THY_VALIDATOR_CONFIG = new InjectionToken<ThyFormValidatorGlobalConfig>('VALIDATION_CONFIG');\n\nexport const THY_FORM_CONFIG = new InjectionToken<ThyFormConfig>('THY_FORM_CONFIG');\n\nexport const THY_FORM_CONFIG_PROVIDER = {\n    provide: THY_FORM_CONFIG,\n    useValue: { layout: 'horizontal', footerAlign: 'left' }\n};\n","import { InjectionToken, Inject, Injectable, Optional } from '@angular/core';\nimport { ThyFormValidatorGlobalConfig, ThyFormValidationMessages, THY_VALIDATOR_CONFIG } from './form.class';\nimport { Dictionary } from 'ngx-tethys/types';\nimport { ValidationErrors } from '@angular/forms';\nimport { helpers } from 'ngx-tethys/util';\n\nexport const ERROR_VALUE_REPLACE_REGEX = /\\{(.+?)\\}/g;\n\nconst INVALID_CLASS = 'is-invalid';\nconst INVALID_FEEDBACK_CLASS = 'invalid-feedback';\n\nconst defaultValidatorConfig: ThyFormValidatorGlobalConfig = {\n    showElementError: true,\n    removeElementError: true,\n    validationMessages: {}\n};\n\nconst globalValidationMessages = {\n    required: '该选项不能为空',\n    maxlength: '该选项输入值长度不能大于{maxlength}',\n    minlength: '该选项输入值长度不能小于{minlength}',\n    thyUniqueCheck: '输入值已经存在，请重新输入',\n    email: '输入邮件的格式不正确',\n    confirm: '两次输入不一致',\n    pattern: '该选项输入格式不正确',\n    number: '必须输入数字',\n    url: '输入URL格式不正确',\n    max: '该选项输入值不能大于{max}',\n    min: '该选项输入值不能小于{min}'\n};\n\n@Injectable()\nexport class ThyFormValidatorLoader {\n    private config: ThyFormValidatorGlobalConfig;\n\n    private getDefaultValidationMessage(key: string) {\n        if (this.config.globalValidationMessages && this.config.globalValidationMessages[key]) {\n            return this.config.globalValidationMessages[key];\n        } else {\n            return globalValidationMessages[key];\n        }\n    }\n    constructor(\n        @Optional()\n        @Inject(THY_VALIDATOR_CONFIG)\n        config: ThyFormValidatorGlobalConfig\n    ) {\n        this.config = Object.assign({}, defaultValidatorConfig, config);\n    }\n\n    get validationMessages() {\n        return this.config.validationMessages;\n    }\n\n    getErrorMessage(name: string, key: string): string {\n        if (this.validationMessages[name] && this.validationMessages[name][key]) {\n            return this.validationMessages[name][key];\n        } else {\n            return this.getDefaultValidationMessage(key);\n        }\n    }\n\n    getErrorMessages(name: string, validationErrors: ValidationErrors): string[] {\n        const messages = [];\n        for (const validationError in validationErrors) {\n            if (validationErrors.hasOwnProperty(validationError)) {\n                messages.push(this.getErrorMessage(name, validationError));\n            }\n        }\n        return messages;\n    }\n\n    defaultShowError(element: HTMLElement, errorMessages: string[]) {\n        if (element && element.parentElement) {\n            const documentFrag = document.createDocumentFragment();\n            const divNode = document.createElement('DIV');\n            const textNode = document.createTextNode(errorMessages[0]);\n            divNode.appendChild(textNode);\n            divNode.setAttribute('class', INVALID_FEEDBACK_CLASS);\n            documentFrag.appendChild(divNode);\n            element.parentElement.append(documentFrag);\n        }\n    }\n\n    defaultRemoveError(element: HTMLElement) {\n        if (element && element.parentElement) {\n            const invalidFeedback = element.parentElement.querySelector('.invalid-feedback');\n            element.parentElement.removeChild(invalidFeedback);\n        }\n    }\n\n    removeError(element: HTMLElement) {\n        element.classList.remove(INVALID_CLASS);\n        if (helpers.isFunction(this.config.removeElementError)) {\n            this.config.removeElementError(element);\n        } else if (this.config.showElementError) {\n            this.defaultRemoveError(element);\n        } else {\n            // do nothings\n        }\n    }\n\n    showError(element: HTMLElement, errorMessages: string[]) {\n        element.classList.add(INVALID_CLASS);\n        if (helpers.isFunction(this.config.showElementError)) {\n            this.config.showElementError(element, errorMessages);\n        } else if (this.config.showElementError) {\n            this.defaultShowError(element, errorMessages);\n        } else {\n            // do nothings\n        }\n    }\n\n    addValidationMessages(messages: ThyFormValidationMessages) {\n        Object.assign(this.config.validationMessages, messages);\n    }\n\n    setGlobalValidationMessages(validationMessages: Dictionary<string>) {\n        this.config.globalValidationMessages = validationMessages;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { NgForm, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { ThyFormValidatorLoader, ERROR_VALUE_REPLACE_REGEX } from './form-validator-loader';\nimport { ThyFormValidatorConfig } from './form.class';\nimport { Dictionary } from 'ngx-tethys/types';\n\n@Injectable()\nexport class ThyFormValidatorService {\n    private _ngForm: NgForm;\n\n    private _formElement: HTMLElement;\n\n    private _config: ThyFormValidatorConfig;\n\n    public errors: string[] = [];\n\n    // 记录所有元素的验证信息\n    public validations: Dictionary<{\n        hasError?: boolean;\n        errorMessages?: string[];\n    }> = {};\n\n    private _getElement(name: string) {\n        const element = this._formElement[name];\n        if (element) {\n            return element;\n        } else {\n            return this._formElement.querySelector(`[name='${name}']`);\n        }\n    }\n\n    private _clearElementError(name: string) {\n        if (this.validations[name] && this.validations[name].hasError) {\n            this.validations[name].hasError = false;\n            this.validations[name].errorMessages = [];\n            this.thyFormValidateLoader.removeError(this._getElement(name));\n        }\n    }\n\n    private _tryGetValidation(name: string) {\n        if (!this.validations[name]) {\n            this._initializeFormControlValidation(name, this._ngForm.controls[name]);\n        }\n        return this.validations[name];\n    }\n\n    private _addError(message: string) {\n        this.errors.unshift(message);\n    }\n\n    private _clearErrors() {\n        this.errors = [];\n    }\n\n    private _initializeFormControlValidation(name: string, control: AbstractControl) {\n        this.validations[name] = {\n            hasError: false,\n            errorMessages: []\n        };\n        control.valueChanges.subscribe(() => {\n            this._clearElementError(name);\n            this._clearErrors();\n        });\n    }\n\n    private _restFormControlValidation(name: string) {\n        const validation = this.validations[name];\n        if (validation) {\n            validation.hasError = false;\n            validation.errorMessages = [];\n        }\n    }\n\n    private _formatValidationMessage(name: string, message: string) {\n        const control = this._ngForm.controls[name];\n        if (control) {\n            return message.replace(ERROR_VALUE_REPLACE_REGEX, (tag, key) => {\n                if (key) {\n                    return control.errors[key][key] || control.errors[key].requiredLength;\n                }\n            });\n        } else {\n            return message;\n        }\n    }\n\n    private _getValidationMessage(name: string, validationError: string) {\n        let message = null;\n        if (\n            this._config &&\n            this._config.validationMessages &&\n            this._config.validationMessages[name] &&\n            this._config.validationMessages[name][validationError]\n        ) {\n            message = this._config.validationMessages[name][validationError];\n        } else {\n            message = this.thyFormValidateLoader.getErrorMessage(name, validationError);\n        }\n        return this._formatValidationMessage(name, message);\n    }\n\n    private _getValidationMessages(name: string, validationErrors: ValidationErrors) {\n        const messages = [];\n        for (const validationError in validationErrors) {\n            if (validationErrors.hasOwnProperty(validationError)) {\n                messages.push(this._getValidationMessage(name, validationError));\n            }\n        }\n        return messages;\n    }\n\n    private _setControlValidationError(name: string, errorMessages: string[]) {\n        const validation = this._tryGetValidation(name);\n        validation.errorMessages = errorMessages;\n        validation.hasError = true;\n        this.thyFormValidateLoader.showError(this._getElement(name), errorMessages);\n    }\n\n    constructor(private thyFormValidateLoader: ThyFormValidatorLoader) {}\n\n    initialize(ngForm: NgForm, formElement: HTMLElement) {\n        this._ngForm = ngForm;\n        this._formElement = formElement;\n    }\n\n    setValidatorConfig(config: ThyFormValidatorConfig) {\n        this._config = config;\n    }\n\n    validateControl(name: string) {\n        this._clearElementError(name);\n        const control = this._ngForm.controls[name];\n        if (control && control.invalid) {\n            const errorMessages = this._getValidationMessages(name, control.errors);\n            this._setControlValidationError(name, errorMessages);\n        }\n    }\n\n    validateControls() {\n        // 主要是 无法检测到 ngForm 的 controls 的变化，或者是我没有找到\n        // 验证的时候循环 ngForm 的 controls 验证\n        // 发现没有 validation 初始化一个，已经存在不会重新初始化，保存缓存数据\n        for (const name in this._ngForm.controls) {\n            if (this._ngForm.controls.hasOwnProperty(name)) {\n                this._tryGetValidation(name);\n                this.validateControl(name);\n            }\n        }\n        // 移除已经不存在的 validation\n        const names = Object.keys(this.validations);\n        names.forEach(name => {\n            if (!this._ngForm.controls[name]) {\n                delete this.validations[name];\n            }\n        });\n    }\n\n    addError(message: string) {\n        this._addError(message);\n    }\n\n    validate($event?: Event): boolean {\n        this._ngForm.onSubmit($event);\n        this.validateControls();\n        return this._ngForm.valid;\n    }\n\n    reset() {\n        this._ngForm.reset();\n        for (const name in this.validations) {\n            if (this.validations.hasOwnProperty(name)) {\n                this._restFormControlValidation(name);\n                this._clearElementError(name);\n            }\n        }\n    }\n\n    setElementErrorMessage(name: string, message: string) {\n        this._clearElementError(name);\n        this._setControlValidationError(name, [message]);\n    }\n}\n","import { Directive, ElementRef, Input, OnInit, Renderer2, HostBinding, OnDestroy, NgZone, Inject } from '@angular/core';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { NgForm } from '@angular/forms';\nimport { keycodes } from 'ngx-tethys/util';\nimport { ThyFormLayout, ThyFormValidatorConfig, ThyFormConfig, THY_FORM_CONFIG } from './form.class';\nimport { ThyFormValidatorService } from './form-validator.service';\nimport { coerceBooleanProperty } from 'ngx-tethys/util';\n\n// 1. submit 按 Enter 键提交, Textare或包含[contenteditable]属性的元素 除外，需要按 Ctrl | Command + Enter 提交\n// 2. alwaysSubmit 不管是哪个元素 按 Enter 键都提交\n// 3. forbidSubmit \bEnter 键禁止提交\n// 默认 submit\nexport enum ThyEnterKeyMode {\n    submit = 'submit',\n    alwaysSubmit = 'alwaysSubmit',\n    forbidSubmit = 'forbidSubmit'\n}\n\n@Directive({\n    selector: '[thyForm],[thy-form]',\n    providers: [UpdateHostClassService, ThyFormValidatorService],\n    exportAs: 'thyForm',\n    host: {\n        class: 'thy-form'\n    }\n})\nexport class ThyFormDirective implements OnInit, OnDestroy {\n    private layout: ThyFormLayout;\n\n    private initialized = false;\n\n    @Input()\n    set thyLayout(value: ThyFormLayout) {\n        if (value) {\n            this.layout = value;\n            if (this.initialized) {\n                this.updateClasses();\n            }\n        }\n    }\n\n    get thyLayout(): ThyFormLayout {\n        return this.layout;\n    }\n\n    get isHorizontal() {\n        return this.layout === 'horizontal';\n    }\n\n    @Input() thyEnterKeyMode: ThyEnterKeyMode;\n\n    @Input()\n    set thyFormValidatorConfig(config: ThyFormValidatorConfig) {\n        this.validator.setValidatorConfig(config);\n    }\n\n    @HostBinding('class.was-validated') wasValidated = false;\n\n    onSubmitSuccess: ($event: any) => void;\n\n    private _unsubscribe: () => void;\n\n    constructor(\n        private ngForm: NgForm,\n        private elementRef: ElementRef,\n        private renderer: Renderer2,\n        private ngZone: NgZone,\n        private updateHostClassService: UpdateHostClassService,\n        public validator: ThyFormValidatorService,\n        @Inject(THY_FORM_CONFIG) private config: ThyFormConfig\n    ) {\n        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);\n        this.layout = this.config.layout;\n    }\n\n    ngOnInit(): void {\n        this.ngZone.runOutsideAngular(() => {\n            this._unsubscribe = this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.onKeydown.bind(this));\n        });\n        this.updateClasses();\n        this.initialized = true;\n        this.validator.initialize(this.ngForm, this.elementRef.nativeElement);\n    }\n\n    submit($event: Event) {\n        if (this.validator.validate($event)) {\n            this.onSubmitSuccess($event);\n        } else {\n            // this.wasValidated = true;\n        }\n    }\n\n    updateClasses() {\n        this.updateHostClassService.updateClassByMap({\n            [`thy-form-${this.thyLayout}`]: true\n        });\n    }\n\n    submitRunInZone($event: any) {\n        this.ngZone.run(() => {\n            this.submit($event);\n        });\n    }\n\n    onKeydown($event: KeyboardEvent) {\n        const currentInput = document.activeElement;\n        const key = $event.which || $event.keyCode;\n        if (key === keycodes.ENTER && currentInput.tagName) {\n            if (!this.thyEnterKeyMode || this.thyEnterKeyMode === ThyEnterKeyMode.submit) {\n                // TEXTAREA或包含[contenteditable]属性的元素 Ctrl + Enter 或者 Command + Enter 阻止\b默认行为并提交\n                if (currentInput.tagName === 'TEXTAREA' || coerceBooleanProperty(currentInput.getAttribute('contenteditable'))) {\n                    if ($event.ctrlKey || $event.metaKey) {\n                        $event.preventDefault();\n                        this.submitRunInZone($event);\n                    }\n                } else {\n                    // 不是 TEXTAREA Enter 阻止\b默认行为并提交\n                    $event.preventDefault();\n                    this.submitRunInZone($event);\n                }\n            } else if (this.thyEnterKeyMode === ThyEnterKeyMode.alwaysSubmit) {\n                $event.preventDefault();\n                this.submitRunInZone($event);\n            } else {\n                // do nothing\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n            this._unsubscribe = null;\n        }\n    }\n}\n","import { Component, HostBinding, Optional, Input, ViewEncapsulation, ContentChild, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { ThyFormDirective } from './form.directive';\nimport { coerceBooleanProperty } from 'ngx-tethys/util';\nimport { TemplateRef } from '@angular/core';\nimport { ThyTranslate } from 'ngx-tethys/core';\n\nconst internalIconMap = {\n    date: 'wtf wtf-schedule-o'\n};\n\n@Component({\n    selector: 'thy-form-group',\n    templateUrl: './form-group.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ThyFormGroupComponent implements OnInit {\n    labelText: string;\n    labelRequired = false;\n    labelPaddingTopClear = false;\n    feedbackIcon: string;\n    feedbackSvgIconName: string;\n    tips: string;\n\n    @HostBinding('class.row-fill') _rowFill = false;\n\n    @HostBinding('class.form-group') _isFormGroup = true;\n\n    @HostBinding('class.row') isHorizontal = true;\n\n    @HostBinding('class.has-feedback') hasFeedback = false;\n\n    @Input()\n    set thyLabelText(value: string) {\n        this.labelText = value;\n    }\n\n    @Input()\n    set thyLabelTextTranslateKey(value: string) {\n        if (value) {\n            this.labelText = this.thyTranslate.instant(value);\n        } else {\n            this.labelText = '';\n        }\n    }\n\n    @Input()\n    set thyLabelRequired(value: string) {\n        this.labelRequired = coerceBooleanProperty(value);\n    }\n\n    @Input()\n    set thyLabelPaddingTopClear(value: string) {\n        this.labelPaddingTopClear = coerceBooleanProperty(value);\n    }\n\n    @Input()\n    set thyFeedbackIcon(value: string) {\n        this.hasFeedback = true;\n        if (internalIconMap[value]) {\n            this.feedbackIcon = internalIconMap[value];\n            this.feedbackSvgIconName = null;\n        } else {\n            this.feedbackSvgIconName = value;\n            this.feedbackIcon = null;\n        }\n    }\n\n    @Input()\n    set thyTips(value: string) {\n        this.tips = value;\n    }\n\n    @Input()\n    set thyTipsTranslateKey(value: string) {\n        this.tips = this.thyTranslate.instant(value);\n    }\n\n    @Input()\n    set thyRowFill(value: boolean) {\n        this._rowFill = coerceBooleanProperty(value);\n    }\n\n    @ContentChild('formGroup')\n    public contentTemplateRef: TemplateRef<any>;\n\n    constructor(@Optional() private thyParentForm: ThyFormDirective, private thyTranslate: ThyTranslate) {}\n\n    ngOnInit() {\n        this.isHorizontal = this.thyParentForm ? this.thyParentForm.isHorizontal : true;\n    }\n}\n","import { Directive, HostBinding, Optional, Input, ViewEncapsulation } from '@angular/core';\nimport { ThyFormDirective } from './form.directive';\nimport { coerceBooleanProperty } from 'ngx-tethys/util';\nimport { ThyTranslate } from 'ngx-tethys/core';\n\n@Directive({\n    selector: '[thyFormGroupLabel]'\n})\nexport class ThyFormGroupLabelDirective {\n    public labelText: string;\n\n    @HostBinding('class.label-required') labelRequired = false;\n\n    @HostBinding('class.col-form-label') _isFormGroupLabel = true;\n\n    @Input()\n    set thyLabelText(value: string) {\n        this.labelText = value;\n    }\n\n    @Input()\n    set thyLabelTranslateKey(translateKey: string) {\n        if (translateKey) {\n            this.labelText = this.thyTranslate.instant(translateKey);\n        }\n    }\n\n    @Input()\n    set thyLabelRequired(value: string) {\n        this.labelRequired = coerceBooleanProperty(value);\n    }\n\n    constructor(private thyTranslate: ThyTranslate) {}\n}\n","import { Directive, ElementRef, Output, OnInit, HostBinding, HostListener, Optional, EventEmitter } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ThyFormDirective } from './form.directive';\n\n@Directive({\n    selector: '[thyFormSubmit],[thy-form-submit]'\n})\nexport class ThyFormSubmitDirective implements OnInit {\n    @Output() thyFormSubmit = new EventEmitter();\n\n    constructor(private ngForm: NgForm, private thyFormDirective: ThyFormDirective) {}\n\n    ngOnInit(): void {\n        this.thyFormDirective.onSubmitSuccess = ($event: Event) => {\n            this.thyFormSubmit.emit($event);\n        };\n    }\n\n    @HostListener('click', ['$event'])\n    onSubmit($event: Event) {\n        this.thyFormDirective.submit($event);\n    }\n}\n","import { Component, HostBinding, ViewEncapsulation, OnInit, Optional, Input, Inject, ContentChild, TemplateRef } from '@angular/core';\nimport { ThyFormDirective } from '../form.directive';\nimport { ThyFormGroupFooterAlign, THY_FORM_CONFIG, ThyFormConfig } from '../form.class';\n\n@Component({\n    selector: 'thy-form-group-footer',\n    templateUrl: './form-group-footer.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyFormGroupFooterComponent implements OnInit {\n    @HostBinding('class.form-group') _isFormGroup = true;\n\n    @HostBinding('class.row') isHorizontal = true;\n\n    @ContentChild('description') description: TemplateRef<any>;\n\n    @Input() thyAlign: ThyFormGroupFooterAlign;\n\n    public footerClassMap = {};\n\n    private get align() {\n        return !!this.thyAlign ? this.thyAlign : this.defaultConfig.footerAlign;\n    }\n\n    constructor(@Optional() private thyParentForm: ThyFormDirective, @Inject(THY_FORM_CONFIG) private defaultConfig: ThyFormConfig) {}\n\n    ngOnInit() {\n        if (this.thyParentForm) {\n            this.isHorizontal = this.thyParentForm.isHorizontal;\n        }\n        this.setFooterClassMap();\n    }\n\n    setFooterClassMap() {\n        this.footerClassMap = {\n            'form-group-footer': true,\n            'col-sm-10 offset-sm-2 col-form-control': this.isHorizontal,\n            [`form-group-footer-align-${this.align}`]: true\n        };\n    }\n}\n","import { InputBoolean } from 'ngx-tethys/core';\nimport { Component, HostBinding, ViewEncapsulation, OnInit, Optional, Input } from '@angular/core';\nimport { ThyFormDirective } from '../form.directive';\n\n@Component({\n    selector: 'thy-form-group-error',\n    templateUrl: './form-group-error.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyFormGroupErrorComponent implements OnInit {\n    public errors: string[];\n\n    @Input() @InputBoolean() thyShowFirst = true;\n\n    @Input()\n    set thyErrors(errors: string[]) {\n        this.errors = errors;\n    }\n\n    get thyErrors() {\n        const errors = this.errors || this.thyParentForm.validator.errors;\n        return errors && errors.length > 0 && this.thyShowFirst ? [errors[0]] : errors;\n    }\n\n    @HostBinding('class.form-group')\n    get _isFormGroup() {\n        return this.thyErrors && this.thyErrors.length > 0;\n    }\n\n    @HostBinding('class.row') isHorizontal = true;\n\n    constructor(@Optional() private thyParentForm: ThyFormDirective) {}\n\n    ngOnInit() {\n        if (this.thyParentForm) {\n            this.isHorizontal = this.thyParentForm.isHorizontal;\n        }\n    }\n}\n","import { AsyncValidator, AbstractControl, ValidationErrors, NG_ASYNC_VALIDATORS } from '@angular/forms';\nimport { Injectable, Directive, Input, Optional, ElementRef } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { ThyFormDirective } from '../form.directive';\n\n@Directive({\n    selector: '[thyUniqueCheck]',\n    providers: [\n        {\n            provide: NG_ASYNC_VALIDATORS,\n            useExisting: ThyUniqueCheckValidator,\n            multi: true\n        }\n    ]\n})\nexport class ThyUniqueCheckValidator implements AsyncValidator {\n    @Input() thyUniqueCheck: (value: any) => Observable<boolean>;\n\n    constructor(private elementRef: ElementRef, @Optional() private thyForm: ThyFormDirective) {}\n\n    validate(ctrl: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> {\n        return this.thyUniqueCheck(ctrl.value).pipe(\n            map((failed: boolean) => {\n                setTimeout(() => {\n                    if (failed && this.thyForm && this.elementRef.nativeElement.name) {\n                        this.thyForm.validator.validateControl(this.elementRef.nativeElement.name);\n                    }\n                });\n                return failed ? { thyUniqueCheck: failed } : null;\n            }),\n            catchError(() => of(null))\n        );\n    }\n}\n","import { Directive, Input, forwardRef } from '@angular/core';\nimport {\n    Validator, AbstractControl, NG_VALIDATORS, Validators, ValidatorFn\n} from '@angular/forms';\n\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => ThyMinDirective),\n            multi: true\n        }\n    ]\n})\nexport class ThyMinDirective implements Validator {\n    private _validator: ValidatorFn;\n    @Input() public set min(value: string) {\n        this._validator = Validators.min(parseFloat(value));\n    }\n\n    public validate(control: AbstractControl): { [key: string]: any } {\n        return this._validator(control);\n    }\n}\n","import { Directive, Input, forwardRef } from '@angular/core';\nimport {\n    Validator, AbstractControl, NG_VALIDATORS, Validators, ValidatorFn\n} from '@angular/forms';\n\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => ThyMaxDirective),\n            multi: true\n        }\n    ]\n})\nexport class ThyMaxDirective implements Validator {\n    private _validator: ValidatorFn;\n    @Input() public set max(value: string) {\n        this._validator = Validators.max(parseFloat(value));\n    }\n\n    public validate(control: AbstractControl): { [key: string]: any } {\n        return this._validator(control);\n    }\n}\n","import { Directive, Input } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from '@angular/forms';\n\nexport function confirmValidator(value: string): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n        const isEqual = value === control.value;\n        return !isEqual ? { confirm: { value: value, actual: control.value } } : null;\n    };\n}\n\n@Directive({\n    selector: '[confirm]',\n    providers: [{ provide: NG_VALIDATORS, useExisting: ThyConfirmValidatorDirective, multi: true }]\n})\nexport class ThyConfirmValidatorDirective implements Validator {\n    @Input() confirm: string;\n\n    validate(control: AbstractControl) {\n        return confirmValidator(this.confirm)(control);\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ThyFormDirective } from './form.directive';\nimport { ThyFormGroupComponent } from './form-group.component';\nimport { ThyFormGroupLabelDirective } from './form-group-label.directive';\nimport { ThyFormSubmitDirective } from './form-submit.directive';\nimport { ThyInputModule } from 'ngx-tethys/input';\nimport { ThyFormGroupFooterComponent } from './from-group-footer/form-group-footer.component';\nimport { ThyFormGroupErrorComponent } from './form-group-error/form-group-error.component';\nimport { ThyFormValidatorLoader } from './form-validator-loader';\nimport { ThyFormValidatorGlobalConfig, THY_VALIDATOR_CONFIG, THY_FORM_CONFIG, THY_FORM_CONFIG_PROVIDER } from './form.class';\nimport { ThyUniqueCheckValidator, ThyMaxDirective, ThyMinDirective, ThyConfirmValidatorDirective } from './validator/index';\nimport { ThyAlertModule } from 'ngx-tethys/alert';\nimport { ThyIconModule } from 'ngx-tethys/icon';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, ThyInputModule, ThyAlertModule, ThyIconModule],\n    declarations: [\n        ThyFormDirective,\n        ThyFormGroupComponent,\n        ThyFormGroupLabelDirective,\n        ThyFormSubmitDirective,\n        ThyFormGroupFooterComponent,\n        ThyUniqueCheckValidator,\n        ThyFormGroupErrorComponent,\n        ThyMinDirective,\n        ThyMaxDirective,\n        ThyConfirmValidatorDirective\n    ],\n    exports: [\n        ThyFormDirective,\n        ThyFormGroupComponent,\n        ThyFormGroupLabelDirective,\n        ThyFormSubmitDirective,\n        ThyFormGroupFooterComponent,\n        ThyUniqueCheckValidator,\n        ThyFormGroupErrorComponent,\n        ThyMinDirective,\n        ThyMaxDirective,\n        ThyConfirmValidatorDirective\n    ],\n    providers: [ThyFormValidatorLoader, THY_FORM_CONFIG_PROVIDER]\n})\nexport class ThyFormModule {\n    static forRoot(config: ThyFormValidatorGlobalConfig): ModuleWithProviders<ThyFormModule> {\n        return {\n            ngModule: ThyFormModule,\n            providers: [\n                {\n                    provide: THY_VALIDATOR_CONFIG,\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
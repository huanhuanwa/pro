import { InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, Optional, Inject, ElementRef, ChangeDetectorRef, Input, Output, HostBinding, Pipe, NgModule } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { isTemplateRef } from 'ngx-tethys/util';
import { CommonModule } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyIconModule } from 'ngx-tethys/icon';

const DEFAULT_RANGE_COUNT = 5;
const PaginationDefaultConfig = {
    boundaryLinks: false,
    directionLinks: true,
    pageSize: 20,
    maxCount: 7,
    rangeCount: DEFAULT_RANGE_COUNT,
    showQuickJumper: true,
    firstText: '第一页',
    lastText: '最后一页',
    previousText: '',
    nextText: '',
    firstIcon: '',
    lastIcon: '',
    previousIcon: 'angle-left',
    nextIcon: 'angle-right',
    totalPagesFormat: '共{total}页'
};
const THY_PAGINATION_CONFIG = new InjectionToken('THY_PAGINATION_CONFIG', {
    providedIn: 'root',
    factory: () => {
        return {};
    }
});

class ThyPaginationComponent {
    constructor(paginationConfig, updateHostClassService, elementRef, cdr) {
        this.paginationConfig = paginationConfig;
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.isTemplateRef = isTemplateRef;
        this.config = Object.assign({}, PaginationDefaultConfig, this.paginationConfig.main);
        this.disabled = false;
        this.pageIndexChange = new EventEmitter();
        this.pageChanged = new EventEmitter();
        this.pages = [];
        this.pageIndex = 1;
        this.range = { from: 0, to: 0 };
        this.firstIndex = 1;
        this.isHideOnSinglePage = false;
        this.initialized = false;
        this.isPaginationClass = true;
        // 是否显示范围和total
        this.showTotal = false;
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
    }
    set thyPageIndex(pageIndex) {
        this.pageIndex = pageIndex;
        if (this.initialized) {
            this.setPageIndex(pageIndex);
        }
    }
    set thyPageSize(pageSize) {
        this.pageSize = pageSize;
        if (this.initialized) {
            this.calculatePageCount();
            this.initializePages(this.pageIndex, this.pageCount);
            this.cdr.markForCheck();
        }
    }
    set thyTotal(total) {
        this.total = total;
        if (this.initialized) {
            this.calculatePageCount();
            this.initializePages(this.pageIndex, this.pageCount);
            this.cdr.markForCheck();
        }
    }
    set showQuickJumper(value) {
        this.config.showQuickJumper = value;
    }
    set size(size) {
        this.updateHostClassService.addClass(`thy-pagination-${size}`);
    }
    set maxCount(value) {
        this.config.maxCount = value;
    }
    set thyRangeCount(value) {
        if (Number.isInteger(value)) {
            this.config.rangeCount = value;
            if (this.initialized) {
                this.setMarginalCount(value);
            }
        }
    }
    ngOnInit() {
        this.setMarginalCount(this.config.rangeCount);
        this.calculatePageCount();
        this.setPageIndex(this.pageIndex);
        this.initialized = true;
    }
    setMarginalCount(range) {
        if (!this.marginalCount) {
            this.marginalCount = range <= DEFAULT_RANGE_COUNT ? 1 : 2;
        }
    }
    setPageIndex(pageIndex) {
        this.pageIndex = pageIndex > this.pageCount ? this.pageCount : pageIndex || 1;
        this.range = {
            from: (this.pageIndex - 1) * this.pageSize + 1,
            to: this.pageIndex * this.pageSize
        };
        this.initializePages(this.pageIndex, this.pageCount);
        this.cdr.markForCheck();
    }
    calculatePageCount() {
        const pageCount = this.pageSize < 1 ? 1 : Math.ceil(this.total / this.pageSize);
        this.pageCount = Math.max(pageCount || 0, 1);
    }
    makePage(index, text, active) {
        return { index, text, active };
    }
    initializePages(pageIndex, pageCount) {
        const marginalCount = this.marginalCount;
        const rangeCount = this.config.rangeCount;
        const maxCount = this.config.maxCount;
        let pages = [];
        const isMaxSized = pageCount > maxCount;
        if (isMaxSized) {
            const beforePages = [];
            const afterPages = [];
            // beforePages
            for (let i = 1; i <= marginalCount; i++) {
                beforePages.push(this.makePage(i, i.toString(), i === pageIndex));
            }
            if (pageIndex - Math.ceil(rangeCount / 2) > this.firstIndex) {
                beforePages.push(this.makePage(pageIndex - rangeCount, '...', null));
            }
            // afterPages
            if (pageIndex + Math.ceil(rangeCount / 2) < pageCount) {
                afterPages.push(this.makePage(pageIndex + rangeCount, '...', null));
            }
            for (let i = pageCount - marginalCount + 1; i <= pageCount; i++) {
                afterPages.push(this.makePage(i, i.toString(), i === pageIndex));
            }
            // mainPages
            let start = Math.max(marginalCount + 1, pageIndex - (rangeCount - 1) / 2);
            let end = Math.min(pageIndex + (rangeCount - 1) / 2, pageCount - marginalCount);
            if (pageIndex - 1 <= marginalCount) {
                end = rangeCount;
            }
            if (pageCount - pageIndex <= marginalCount) {
                start = pageCount - rangeCount + 1;
            }
            for (let i = start; i <= end; i++) {
                pages.push({
                    index: i,
                    text: i.toString(),
                    active: i === +pageIndex
                });
            }
            pages = [...beforePages, ...pages, ...afterPages];
        }
        else {
            for (let i = 1; i <= pageCount; i++) {
                pages.push({
                    index: i,
                    text: i.toString(),
                    active: i === +pageIndex
                });
            }
        }
        this.pages = pages;
    }
    pageChange(pageIndex) {
        this.pageIndexChange.emit(pageIndex);
        this.pageChanged.emit({ page: pageIndex });
    }
    selectPage(pageIndex) {
        if (this.disabled || pageIndex === this.firstIndex - 1 || pageIndex === this.pageCount + 1) {
            return;
        }
        this.setPageIndex(pageIndex);
        this.pageChange(this.pageIndex);
    }
    jumpPage(input) {
        const pageIndex = +input.value;
        if (Number.isInteger(pageIndex)) {
            this.selectPage(pageIndex);
        }
        input.value = '';
    }
}
ThyPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-pagination',
                template: "<ng-container *ngIf=\"(hideOnSinglePage && total > pageSize) || !hideOnSinglePage\">\n  <div class=\"thy-pagination-total\" *ngIf=\"showTotal\">\n    <ng-container *ngIf=\"!isTemplateRef(showTotal); else totalTemplate\">\n      <div class=\"mr-3\">\n        \u7B2C<span class=\"number\"> {{ range.from }}-{{ range.to }} </span>\u6761\n      </div>\n      <div>\n        \u5171\u8BA1<span class=\"number\"> {{ total }} </span>\u6761\n      </div>\n    </ng-container>\n    <ng-template #totalTemplate>\n      <ng-template\n        [ngTemplateOutlet]=\"showTotal\"\n        [ngTemplateOutletContext]=\"{ $implicit: total, range: range }\"\n      ></ng-template>\n    </ng-template>\n  </div>\n  <div class=\"thy-pagination-content\">\n    <ul class=\"thy-pagination-pages\">\n      <li\n        class=\"thy-page-item\"\n        [class.disabled]=\"disabled || pageIndex === firstIndex\"\n        *ngIf=\"config.boundaryLinks\"\n        (click)=\"selectPage(firstIndex)\"\n      >\n        <a class=\"thy-page-link thy-page-link-first\" href=\"javascript:;\">\n          <ng-container *ngIf=\"config.firstText\">{{ config.firstText }}</ng-container>\n          <ng-container *ngIf=\"config.firstIcon\">\n            <thy-icon [thyIconName]=\"config.firstIcon\"></thy-icon>\n          </ng-container>\n        </a>\n      </li>\n      <li\n        class=\"thy-page-item\"\n        [class.disabled]=\"disabled || pageIndex === firstIndex\"\n        *ngIf=\"config.directionLinks\"\n        (click)=\"selectPage(pageIndex - 1)\"\n      >\n        <a class=\"thy-page-link  page-link-pre\" href=\"javascript:;\">\n          <ng-container *ngIf=\"config.previousText\">{{ config.previousText }}</ng-container>\n          <ng-container *ngIf=\"config.previousIcon\">\n            <thy-icon [thyIconName]=\"config.previousIcon\"></thy-icon>\n          </ng-container>\n        </a>\n      </li>\n      <li\n        class=\"thy-page-item\"\n        [class.active]=\"page.active\"\n        [class.disabled]=\"disabled\"\n        (click)=\"selectPage(page.index)\"\n        *ngFor=\"let page of pages\"\n      >\n        <a class=\"thy-page-link\" href=\"javascript:;\">{{ page.text }}</a>\n      </li>\n      <li\n        class=\"thy-page-item page-item-next\"\n        [class.disabled]=\"disabled || pageIndex === pageCount\"\n        *ngIf=\"config.directionLinks\"\n        (click)=\"selectPage(pageIndex + 1)\"\n      >\n        <a class=\"thy-page-link thy-page-link-next\" href=\"javascript:;\">\n          <ng-container *ngIf=\"config.nextText\">{{ config.nextText }}</ng-container>\n          <ng-container *ngIf=\"config.nextIcon\">\n            <thy-icon [thyIconName]=\"config.nextIcon\"></thy-icon>\n          </ng-container>\n        </a>\n      </li>\n      <li\n        class=\"thy-page-item\"\n        [class.disabled]=\"disabled || pageIndex === pageCount\"\n        *ngIf=\"config.boundaryLinks\"\n        (click)=\"selectPage(pageCount)\"\n      >\n        <a class=\"thy-page-link thy-page-link-last\" href=\"javascript:;\">\n          <ng-container *ngIf=\"config.lastText\">{{ config.lastText }}</ng-container>\n          <ng-container *ngIf=\"config.lastIcon\">\n            <thy-icon [thyIconName]=\"config.lastIcon\"></thy-icon>\n          </ng-container>\n        </a>\n      </li>\n    </ul>\n    <ng-container *ngIf=\"config.totalPagesFormat\">\n      <div\n        class=\"thy-pagination-count\"\n        [innerHTML]=\"pageCount | paginationTotalPagesFormat: config.totalPagesFormat\"\n      ></div>\n    </ng-container>\n    <ng-container *ngIf=\"config.showQuickJumper\">\n      <div class=\"thy-pagination-jumper\">\n        <div class=\"thy-pagination-jumper-input\">\n          \u5230 <input type=\"text\" [disabled]=\"disabled\" #jumperInput (thyEnter)=\"jumpPage(jumperInput)\" /> \u9875\n        </div>\n        <button type=\"button\" (click)=\"jumpPage(jumperInput)\" [disabled]=\"disabled\">\u786E\u5B9A</button>\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [UpdateHostClassService]
            },] }
];
ThyPaginationComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_PAGINATION_CONFIG,] }] },
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
ThyPaginationComponent.propDecorators = {
    thyPageIndex: [{ type: Input }],
    thyPageSize: [{ type: Input }],
    thyTotal: [{ type: Input }],
    disabled: [{ type: Input, args: ['thyDisabled',] }],
    showQuickJumper: [{ type: Input, args: ['thyShowQuickJumper',] }],
    size: [{ type: Input, args: ['thySize',] }],
    maxCount: [{ type: Input, args: ['thyMaxCount',] }],
    marginalCount: [{ type: Input, args: ['thyMarginalCount',] }],
    thyRangeCount: [{ type: Input }],
    hideOnSinglePage: [{ type: Input, args: ['thyHideOnSinglePage',] }],
    pageIndexChange: [{ type: Output, args: ['thyPageIndexChange',] }],
    pageChanged: [{ type: Output, args: ['thyPageChanged',] }],
    isPaginationClass: [{ type: HostBinding, args: ['class.thy-pagination',] }],
    showTotal: [{ type: HostBinding, args: ['class.thy-pagination-has-total',] }, { type: Input, args: ['thyShowTotal',] }]
};

class PaginationTotalCountFormat {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(count, format) {
        if (count && format) {
            return this.sanitizer.bypassSecurityTrustHtml(format.replace(/\{(.+?)\}/g, `<span>${count}</span>`));
        }
        else {
            return '';
        }
    }
}
PaginationTotalCountFormat.decorators = [
    { type: Pipe, args: [{
                name: 'paginationTotalPagesFormat'
            },] }
];
PaginationTotalCountFormat.ctorParameters = () => [
    { type: DomSanitizer }
];

class ThyPaginationModule {
}
ThyPaginationModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ThySharedModule, ThyIconModule],
                exports: [ThyPaginationComponent],
                declarations: [ThyPaginationComponent, PaginationTotalCountFormat]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { DEFAULT_RANGE_COUNT, PaginationDefaultConfig, PaginationTotalCountFormat, THY_PAGINATION_CONFIG, ThyPaginationComponent, ThyPaginationModule };
//# sourceMappingURL=ngx-tethys-pagination.js.map

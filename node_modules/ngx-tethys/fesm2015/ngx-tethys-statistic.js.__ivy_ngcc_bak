import { CommonModule } from '@angular/common';
import { Component, ElementRef, Renderer2, HostBinding, Input, ContentChild, NgModule } from '@angular/core';
import { ThySharedModule } from 'ngx-tethys/shared';
import { hexToRgb } from 'ngx-tethys/util';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyIconModule } from 'ngx-tethys/icon';

class ThyStatisticComponent {
    constructor(elementRef, updateHostClassService, renderer) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.renderer = renderer;
        this._initialized = false;
        this.class = true;
        this.thyValueStyle = {};
        this.thyTitlePosition = 'bottom';
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set prefix(value) {
        this.prefixTemplate = value;
    }
    set thyPrefixTemplate(value) {
        this.prefixTemplate = value;
    }
    set value(value) {
        this.valueTemplate = value;
    }
    set thyValueTemplate(value) {
        this.valueTemplate = value;
    }
    set title(value) {
        this.titleTemplate = value;
    }
    set thyTitleTemplate(value) {
        this.titleTemplate = value;
    }
    set suffix(value) {
        this.suffixTemplate = value;
    }
    set thySuffixTemplate(value) {
        this.suffixTemplate = value;
    }
    set thyShape(value) {
        this._shape = value;
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    set thySize(value) {
        this._size = value;
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    ngOnInit() {
        this._setClassesByType();
        this._initialized = true;
    }
    setColor(color) {
        this.renderer.setStyle(this.elementRef.nativeElement, 'color', color);
        if (this._shape === 'card') {
            this.renderer.setStyle(this.elementRef.nativeElement, 'border-color', color);
            this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', hexToRgb(color, 0.05));
        }
    }
    _setClassesByType() {
        const classNames = [];
        if (this.thyColor) {
            if (RegExp(/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/).test(this.thyColor)) {
                this.setColor(this.thyColor);
            }
            else {
                classNames.push(`thy-statistic-${this.thyColor}`);
            }
        }
        if (this._shape) {
            classNames.push(`thy-statistic-${this._shape}`);
        }
        if (!this._size) {
            this._size = 'default';
        }
        classNames.push(`thy-statistic-${this._size}`);
        this.renderer.setStyle(this.elementRef.nativeElement, 'font-size', this.thySize);
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyStatisticComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-statistic',
                template: "<ng-container [ngTemplateOutlet]=\"title\" *ngIf=\"(thyTitle || titleTemplate) && thyTitlePosition === 'top'\"></ng-container>\n<div class=\"thy-statistic-content\" [ngStyle]=\"thyValueStyle\">\n  <span *ngIf=\"thyPrefix || prefixTemplate\" class=\"thy-statistic-content-prefix\">\n    <span *ngIf=\"thyPrefix\">{{ thyPrefix }}</span>\n    <ng-container *ngIf=\"prefixTemplate\" [ngTemplateOutlet]=\"prefixTemplate\"></ng-container>\n  </span>\n\n  <span class=\"thy-statistic-content-value\">\n    <span *ngIf=\"!valueTemplate\">{{ thyValue }}</span>\n    <ng-container *ngIf=\"valueTemplate\" [ngTemplateOutlet]=\"valueTemplate\"></ng-container>\n  </span>\n\n  <span *ngIf=\"thySuffix || suffixTemplate\" class=\"thy-statistic-content-suffix\">\n    <span *ngIf=\"thySuffix\">{{ thySuffix }}</span>\n    <ng-container *ngIf=\"suffixTemplate\" [ngTemplateOutlet]=\"suffixTemplate\"></ng-container>\n  </span>\n</div>\n<ng-container [ngTemplateOutlet]=\"title\" *ngIf=\"(thyTitle || titleTemplate) && thyTitlePosition === 'bottom'\"></ng-container>\n\n<ng-template #title>\n  <div class=\"thy-statistic-title\">\n    <span *ngIf=\"thyTitle\">{{ thyTitle }}</span>\n    <ng-container [ngTemplateOutlet]=\"titleTemplate\"></ng-container>\n  </div>\n</ng-template>\n",
                providers: [UpdateHostClassService]
            },] }
];
ThyStatisticComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService },
    { type: Renderer2 }
];
ThyStatisticComponent.propDecorators = {
    class: [{ type: HostBinding, args: [`class.thy-statistic`,] }],
    thyValueStyle: [{ type: Input }],
    thyPrefix: [{ type: Input }],
    prefix: [{ type: ContentChild, args: ['prefix', { static: true },] }],
    thyPrefixTemplate: [{ type: Input }],
    thyValue: [{ type: Input }],
    value: [{ type: ContentChild, args: ['value', { static: true },] }],
    thyValueTemplate: [{ type: Input }],
    thyTitle: [{ type: Input }],
    title: [{ type: ContentChild, args: ['title', { static: true },] }],
    thyTitleTemplate: [{ type: Input }],
    thySuffix: [{ type: Input }],
    suffix: [{ type: ContentChild, args: ['suffix', { static: true },] }],
    thySuffixTemplate: [{ type: Input }],
    thyTitlePosition: [{ type: Input }],
    thyShape: [{ type: Input }],
    thyColor: [{ type: Input }],
    thySize: [{ type: Input }]
};

class ThyStatisticModule {
}
ThyStatisticModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyStatisticComponent],
                imports: [CommonModule, ThySharedModule, ThyIconModule],
                exports: [ThyStatisticComponent],
                providers: []
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyStatisticComponent, ThyStatisticModule };
//# sourceMappingURL=ngx-tethys-statistic.js.map

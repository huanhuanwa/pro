{"version":3,"file":"ngx-tethys-icon.js","sources":["../../src/icon/icon-registry.ts","../../src/icon/config.ts","../../src/icon/icon.component.ts","../../src/icon/icon.module.ts","../../src/icon/ngx-tethys-icon.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, SecurityContext, inject, Inject } from '@angular/core';\nimport { SafeResourceUrl, SafeHtml, DomSanitizer } from '@angular/platform-browser';\nimport { Observable, of, forkJoin, throwError } from 'rxjs';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { finalize, share, map, tap, catchError } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\nclass SvgIconConfig {\n    url: SafeResourceUrl | null;\n    svgElement: SVGElement | null;\n\n    constructor(data: SafeResourceUrl | SVGElement) {\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!(data as any).nodeName) {\n            this.svgElement = data as SVGElement;\n        } else {\n            this.url = data as SafeResourceUrl;\n        }\n    }\n}\n\nexport type IconMode = 'font' | 'svg';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyIconRegistry {\n    private defaultFontSetClass = 'wt-icon';\n    private internalIconMode: IconMode = 'svg';\n    private svgIconConfigs = new Map<string, SvgIconConfig>();\n    private svgIconSetConfigs = new Map<string, SvgIconConfig[]>();\n    private inProgressUrlFetches = new Map<string, Observable<string>>();\n\n    public get iconMode() {\n        return this.internalIconMode;\n    }\n\n    constructor(private sanitizer: DomSanitizer, private httpClient: HttpClient, @Inject(DOCUMENT) private document: any) {}\n\n    private getIconNameNotFoundError(iconName: string): Error {\n        return Error(`Unable to find icon with the name \"${iconName}\"`);\n    }\n\n    private getIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n        return Error(\n            `The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n                `Angular's DomSanitizer. Attempted literal was \"${literal}\".`\n        );\n    }\n\n    private internalAddSvgIconSet(namespace: string, config: SvgIconConfig): this {\n        const configNamespace = this.svgIconSetConfigs.get(namespace);\n\n        if (configNamespace) {\n            configNamespace.push(config);\n        } else {\n            this.svgIconSetConfigs.set(namespace, [config]);\n        }\n\n        return this;\n    }\n\n    private cloneSvg(svg: SVGElement): SVGElement {\n        return svg.cloneNode(true) as SVGElement;\n    }\n\n    private fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n\n        const url = this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n        if (!url) {\n            throw new Error(\n                `The URL provided to ThyIconRegistry was not trusted as a resource URL ` +\n                    `via Angular's DomSanitizer. Attempted URL was \"${url}\".`\n            );\n        }\n\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this.inProgressUrlFetches.get(url);\n\n        if (inProgressFetch) {\n            return inProgressFetch;\n        } else {\n            // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n            // Observable. Figure out why and fix it.\n            const req = this.httpClient.get(url, { responseType: 'text' }).pipe(\n                finalize(() => this.inProgressUrlFetches.delete(url)),\n                share()\n            );\n\n            this.inProgressUrlFetches.set(url, req);\n            return req;\n        }\n    }\n\n    private toSvgElement(element: Element): SVGElement {\n        const svg = this.svgElementFromString('<svg></svg>');\n\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this.document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n\n        return svg;\n    }\n\n    private extractSvgIconFromIconSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n        if (!iconSource) {\n            return null;\n        }\n\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true) as Element;\n        iconElement.removeAttribute('id');\n\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this.setSvgAttributes(iconElement as SVGElement);\n        }\n\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this.setSvgAttributes(this.toSvgElement(iconElement));\n        }\n\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this.svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n\n        return this.setSvgAttributes(svg);\n    }\n\n    private extractIconWithNameFromIconSetConfigs(iconName: string, iconSetConfigs: SvgIconConfig[]): SVGElement | null {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                const foundIcon = this.extractSvgIconFromIconSet(config.svgElement, iconName);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n\n    private svgElementFromString(str: string): SVGElement {\n        const div = this.document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg') as SVGElement;\n\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n\n        return svg;\n    }\n\n    private setSvgAttributes(svg: SVGElement): SVGElement {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '1em');\n        svg.setAttribute('width', '1em');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        return svg;\n    }\n\n    private createSvgElementForSingleIcon(responseText: string): SVGElement {\n        const svg = this.svgElementFromString(responseText);\n        this.setSvgAttributes(svg);\n        return svg;\n    }\n\n    private loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n        return this.fetchUrl(config.url).pipe(map(svgText => this.createSvgElementForSingleIcon(svgText)));\n    }\n\n    private loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n\n        return this.fetchUrl(config.url).pipe(\n            map(svgText => {\n                // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n                // only needs to occur if the cache is yet unset.\n                if (!config.svgElement) {\n                    config.svgElement = this.svgElementFromString(svgText);\n                }\n\n                return config.svgElement;\n            })\n        );\n    }\n\n    private getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(this.cloneSvg(config.svgElement));\n        } else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this.loadSvgIconFromConfig(config).pipe(\n                tap(svg => (config.svgElement = svg)),\n                map(svg => this.cloneSvg(svg))\n            );\n        }\n    }\n\n    private getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]): Observable<SVGElement> {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this.extractIconWithNameFromIconSetConfigs(name, iconSetConfigs);\n\n        if (namedIcon) {\n            // We could cache namedIcon in svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgElement)\n            .map(iconSetConfig => {\n                return this.loadSvgIconSetFromConfig(iconSetConfig).pipe(\n                    catchError(\n                        (err: HttpErrorResponse): Observable<SVGElement | null> => {\n                            const url = this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n                            // Swallow errors fetching individual URLs so the\n                            // combined Observable won't necessarily fail.\n                            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n                            return of(null);\n                        }\n                    )\n                );\n            });\n\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(\n            map(() => {\n                const foundIcon = this.extractIconWithNameFromIconSetConfigs(name, iconSetConfigs);\n\n                if (!foundIcon) {\n                    throw this.getIconNameNotFoundError(name);\n                }\n\n                return foundIcon;\n            })\n        );\n    }\n\n    private internalAddSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n        this.svgIconConfigs.set(this.buildIconKey(namespace, iconName), config);\n        return this;\n    }\n\n    buildIconKey(namespace: string, name: string) {\n        return namespace + ':' + name;\n    }\n\n    splitIconName(iconName: string): [string, string] {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return <[string, string]>parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n        return this.internalAddSvgIconSet(namespace, new SvgIconConfig(url));\n    }\n\n    addSvgIconSet(url: SafeResourceUrl): this {\n        return this.addSvgIconSetInNamespace('', url);\n    }\n\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n        const sanitizedLiteral = this.sanitizer.sanitize(SecurityContext.HTML, literal);\n\n        if (!sanitizedLiteral) {\n            throw this.getIconFailedToSanitizeLiteralError(literal);\n        }\n\n        const svgElement = this.svgElementFromString(sanitizedLiteral);\n        return this.internalAddSvgIconSet(namespace, new SvgIconConfig(svgElement));\n    }\n\n    addSvgIconSetLiteral(literal: SafeHtml): this {\n        return this.addSvgIconSetLiteralInNamespace('', literal);\n    }\n\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n        return this.internalAddSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n    }\n\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n        return this.addSvgIconInNamespace('', iconName, url);\n    }\n\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal);\n    }\n\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n        const sanitizedLiteral = this.sanitizer.sanitize(SecurityContext.HTML, literal);\n\n        if (!sanitizedLiteral) {\n            throw this.getIconFailedToSanitizeLiteralError(literal);\n        }\n\n        const svgElement = this.createSvgElementForSingleIcon(sanitizedLiteral);\n        return this.internalAddSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n    }\n\n    getDefaultFontSetClass() {\n        return this.defaultFontSetClass;\n    }\n\n    getFontSetClassByAlias(fontSet: string) {\n        return fontSet;\n    }\n\n    getSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n        // Return (copy of) cached icon if possible.\n        const key = this.buildIconKey(namespace, name);\n        const config = this.svgIconConfigs.get(key);\n\n        if (config) {\n            return this.getSvgFromConfig(config);\n        }\n\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this.svgIconSetConfigs.get(namespace);\n\n        if (iconSetConfigs) {\n            return this.getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n\n        return throwError(this.getIconNameNotFoundError(key));\n    }\n\n    setIconMode(mode: IconMode) {\n        this.internalIconMode = mode;\n    }\n}\n","let printErrorWhenNotFound = true;\n\nexport function setPrintErrorWhenIconNotFound(value: boolean) {\n    printErrorWhenNotFound = value;\n}\n\nexport function getWhetherPrintErrorWhenIconNotFound() {\n    return printErrorWhenNotFound;\n}\n","import {\n    Component,\n    OnInit,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    ElementRef,\n    Input,\n    HostBinding,\n    Renderer2,\n    SimpleChanges,\n    OnChanges\n} from '@angular/core';\n\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { ThyIconRegistry } from './icon-registry';\nimport { take, tap } from 'rxjs/operators';\nimport { Subject, noop, BehaviorSubject } from 'rxjs';\nimport { coerceArray, coerceBooleanProperty } from 'ngx-tethys/util';\nimport { getWhetherPrintErrorWhenIconNotFound } from './config';\n\nconst iconSuffixMap = {\n    fill: 'fill',\n    twotone: 'tt'\n};\n\n@Component({\n    selector: 'thy-icon',\n    template: '<ng-content></ng-content>',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [UpdateHostClassService]\n})\nexport class ThyIconComponent implements OnInit, OnChanges {\n    @HostBinding('class.thy-icon') className = true;\n\n    private isInitialized = false;\n\n    @Input('thyIconType') iconType: 'outline' | 'fill' | 'twotone' = 'outline';\n\n    @Input('thyTwotoneColor') iconTwotoneColor: string;\n\n    @Input('thyIconName') iconName: string;\n\n    @Input('thyIconRotate') iconRotate: number;\n\n    @Input('thyIconSet') iconSet: string;\n\n    @Input('thyIconLegging') iconLegging: boolean;\n\n    @Input('thyIconLinearGradient') iconLinearGradient: boolean;\n\n    constructor(\n        private updateHostClassService: UpdateHostClassService,\n        private render: Renderer2,\n        private elementRef: ElementRef,\n        private iconRegistry: ThyIconRegistry\n    ) {\n        updateHostClassService.initializeElement(elementRef.nativeElement);\n    }\n\n    ngOnInit() {\n        this.updateClasses();\n        this.isInitialized = true;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isInitialized) {\n            if (changes['iconName'] || changes['iconSet'] || changes['iconTwotoneColor'] || changes['iconType']) {\n                this.updateClasses();\n            } else if (changes['iconRotate']) {\n                this.setStyleRotate();\n            }\n        }\n        if (changes['iconLegging']) {\n            if (coerceBooleanProperty(this.iconLegging)) {\n                this.updateHostClassService.addClass('thy-icon-legging');\n            } else {\n                this.updateHostClassService.removeClass('thy-icon-legging');\n            }\n        }\n    }\n\n    private updateClasses() {\n        const [namespace, iconName] = this.iconRegistry.splitIconName(this.iconName);\n        if (iconName) {\n            if (this.iconRegistry.iconMode === 'svg') {\n                this.iconRegistry\n                    .getSvgIcon(this.buildIconNameByType(iconName), namespace)\n                    .pipe(take(1))\n                    .subscribe(\n                        svg => this.setSvgElement(svg),\n                        (error: Error) => {\n                            if (getWhetherPrintErrorWhenIconNotFound()) {\n                                console.error(`Error retrieving icon: ${error.message}`);\n                            }\n                        }\n                    );\n                this.updateHostClassService.updateClass([\n                    `thy-icon${namespace ? `-${namespace}` : ``}-${this.buildIconNameByType(iconName)}`\n                ]);\n            } else {\n                const fontSetClass = this.iconSet\n                    ? this.iconRegistry.getFontSetClassByAlias(this.iconSet)\n                    : this.iconRegistry.getDefaultFontSetClass();\n                this.updateHostClassService.updateClass([fontSetClass, `${fontSetClass}-${this.iconName}`]);\n            }\n        }\n    }\n\n    private setStyleRotate() {\n        if (this.iconRotate !== undefined) {\n            this.render.setStyle(this.elementRef.nativeElement.querySelector('svg'), 'transform', `rotate(${this.iconRotate}deg)`);\n        }\n    }\n\n    //#region svg element\n\n    private setSvgElement(svg: SVGElement) {\n        this.clearSvgElement();\n\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n\n        if (this.iconType === 'twotone') {\n            const allPaths = svg.querySelectorAll('path');\n            if (allPaths.length > 1) {\n                allPaths.forEach((child, index: number) => {\n                    if (child.getAttribute('id').includes('secondary-color')) {\n                        child.setAttribute('fill', this.iconTwotoneColor);\n                    }\n                });\n            }\n        }\n\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        // if (this._location) {\n        //     const path = this._location.getPathname();\n        //     this._previousPath = path;\n        //     this._cacheChildrenWithExternalReferences(svg);\n        //     this._prependPathToReferences(path);\n        // }\n        if (this.iconLinearGradient) {\n            this.setBaseUrl(svg);\n            this.clearTitleElement(svg);\n        }\n\n        this.elementRef.nativeElement.appendChild(svg);\n        this.setStyleRotate();\n    }\n\n    private clearSvgElement() {\n        const layoutElement: HTMLElement = this.elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n\n        // if (this._elementsWithExternalReferences) {\n        //     this._elementsWithExternalReferences.clear();\n        // }\n\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n\n    //#endregion\n\n    private buildIconNameByType(iconName: string) {\n        if (this.iconType && ['fill', 'twotone'].indexOf(this.iconType) >= 0) {\n            const suffix = iconSuffixMap[this.iconType];\n            return iconName.includes(`-${suffix}`) ? iconName : `${iconName}-${suffix}`;\n        } else {\n            return iconName;\n        }\n    }\n\n    /**\n     * Support Safari SVG LinearGradient.\n     *\n     *\n     * @param svg\n     */\n    private setBaseUrl(svg: SVGElement) {\n        const styleElements = svg.querySelectorAll('[style]');\n        styleElements.forEach((n: any) => {\n            if (n.style.cssText.includes('url')) {\n                n.style.fill = n.style.fill.replace('url(\"', 'url(\"' + location.pathname);\n            }\n            if (n.style.cssText.includes('clip-path')) {\n                n.style.clipPath = n.style.clipPath.replace('url(\"', 'url(\"' + location.pathname);\n            }\n        });\n    }\n\n    private clearTitleElement(svg: SVGElement) {\n        svg.querySelector('title').remove();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ThyIconComponent } from './icon.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n    declarations: [ThyIconComponent],\n    imports: [CommonModule, FormsModule, HttpClientModule],\n    exports: [ThyIconComponent]\n})\nexport class ThyIconModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
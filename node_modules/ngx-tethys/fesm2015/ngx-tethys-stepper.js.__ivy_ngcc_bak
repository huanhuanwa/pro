import { Component, Input, HostBinding, InjectionToken, Optional, Inject, ViewChild, TemplateRef, EventEmitter, Output, ViewChildren, ContentChildren, Directive, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

class ThyStepHeaderComponent {
    constructor() {
        this.thyStepHeader = true;
    }
}
ThyStepHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-step-header',
                template: "<div class=\"thy-step-number\"> <span>{{index + 1}}</span></div>\n<div class=\"thy-step-label\">{{label}}</div>"
            },] }
];
ThyStepHeaderComponent.propDecorators = {
    label: [{ type: Input }],
    index: [{ type: Input }],
    selected: [{ type: HostBinding, args: ['class.thy-stepper-header-selected',] }, { type: Input }],
    active: [{ type: Input }],
    thyStepHeader: [{ type: HostBinding, args: ['class.thy-stepper-header',] }]
};

const THY_STEPPER_COMPONENT = new InjectionToken('THY_STEPPER_COMPONENT');
class ThyStepComponent {
    constructor(stepper) {
        this.stepper = stepper;
    }
    select() {
        this.stepper.selected = this;
    }
}
ThyStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-step',
                template: "<ng-template><ng-content></ng-content></ng-template>\n"
            },] }
];
ThyStepComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_STEPPER_COMPONENT,] }] }
];
ThyStepComponent.propDecorators = {
    content: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
    label: [{ type: Input }],
    thyLabel: [{ type: Input }]
};

class ThyStepperComponent {
    constructor() {
        this.thyShowStepHeader = true;
        this._selectedIndex = 0;
        this.selectionChange = new EventEmitter();
        this.thyStepper = true;
    }
    set thySelectedIndex(value) {
        this.selectedIndex = value;
    }
    set thySelected(value) {
        this.selected = value;
    }
    set selected(step) {
        this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;
    }
    get selected() {
        return this.steps ? this.steps.toArray()[this.selectedIndex] : null;
    }
    set selectedIndex(index) {
        if (this.steps) {
            this._updateSelectedItemIndex(index);
        }
        else {
            this._selectedIndex = index;
        }
    }
    get selectedIndex() {
        return this._selectedIndex;
    }
    _updateSelectedItemIndex(newIndex) {
        const stepsArray = this.steps.toArray();
        this.selectionChange.emit({
            selectedIndex: newIndex,
            previouslySelectedIndex: this._selectedIndex,
            selectedStep: stepsArray[newIndex],
            previouslySelectedStep: stepsArray[this._selectedIndex]
        });
        this._selectedIndex = newIndex;
    }
    to(index) {
        this.selectedIndex = Math.min(index, this.steps.length - 1);
    }
    next() {
        this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);
    }
    /** Selects and focuses the previous step in list. */
    previous() {
        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);
    }
}
ThyStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-stepper',
                template: "<div *ngIf=\"thyShowStepHeader\" class=\"thy-stepper-header-container\">\n  <ng-container *ngFor=\"let step of steps; let i = index; let isLast = last\">\n    <thy-step-header\n      [index]=\"i\"\n      [label]=\"step.thyLabel || step.label\"\n      [selected]=\"selectedIndex === i\"\n      [class.thy-stepper-header-active]=\"i <= selectedIndex\"\n      [active]=\"i <= selectedIndex\"\n    >\n    </thy-step-header>\n    <div *ngIf=\"!isLast\" class=\"thy-stepper-line\" [class.thy-stepper-line-active]=\"i < selectedIndex\"></div>\n  </ng-container>\n</div>\n\n<div class=\"thy-stepper-content-container\">\n  <ng-container [ngTemplateOutlet]=\"selected?.content\"></ng-container>\n</div>\n",
                providers: [
                    {
                        provide: THY_STEPPER_COMPONENT,
                        useExisting: ThyStepperComponent
                    }
                ]
            },] }
];
ThyStepperComponent.propDecorators = {
    thySelectedIndex: [{ type: Input }],
    thySelected: [{ type: Input }],
    thyShowStepHeader: [{ type: Input }],
    selectionChange: [{ type: Output }],
    stepHeaders: [{ type: ViewChildren, args: [ThyStepHeaderComponent,] }],
    steps: [{ type: ContentChildren, args: [ThyStepComponent,] }],
    thyStepper: [{ type: HostBinding, args: ['class.thy-stepper',] }]
};

/** Button that moves to the next step in a stepper workflow. */
class ThyStepperNextDirective {
    constructor(stepper) {
        this.stepper = stepper;
    }
    click($event) {
        this.stepper.next();
    }
}
ThyStepperNextDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyStepperNext]'
            },] }
];
ThyStepperNextDirective.ctorParameters = () => [
    { type: ThyStepperComponent }
];
ThyStepperNextDirective.propDecorators = {
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/** Button that moves to the previous step in a stepper workflow. */
class ThyStepperPreviousDirective {
    constructor(stepper) {
        this.stepper = stepper;
    }
    click($event) {
        this.stepper.previous();
    }
}
ThyStepperPreviousDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyStepperPrevious]'
            },] }
];
ThyStepperPreviousDirective.ctorParameters = () => [
    { type: ThyStepperComponent }
];
ThyStepperPreviousDirective.propDecorators = {
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};

class ThyStepperModule {
}
ThyStepperModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyStepHeaderComponent, ThyStepperComponent, ThyStepComponent, ThyStepperNextDirective, ThyStepperPreviousDirective],
                entryComponents: [],
                imports: [CommonModule],
                exports: [ThyStepperComponent, ThyStepComponent, ThyStepHeaderComponent, ThyStepperNextDirective, ThyStepperPreviousDirective],
                providers: []
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { THY_STEPPER_COMPONENT, ThyStepComponent, ThyStepHeaderComponent, ThyStepperComponent, ThyStepperModule, ThyStepperNextDirective, ThyStepperPreviousDirective };
//# sourceMappingURL=ngx-tethys-stepper.js.map

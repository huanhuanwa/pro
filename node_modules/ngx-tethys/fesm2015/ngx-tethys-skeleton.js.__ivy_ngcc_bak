import { Component, Inject, PLATFORM_ID, HostBinding, Input, ContentChild, ViewChild, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { PortalModule } from '@angular/cdk/portal';
import { generateRandomStr } from 'ngx-tethys/util';

class ThySkeletonComponent {
    constructor(platformId) {
        this.platformId = platformId;
        this.addSkeletonClass = true;
        this.thyAnimate = true;
        this.thyBaseUrl = '';
        this.thyWidth = '100%';
        this.thyHeight = '100%';
        this.thyViewBoxWidth = 400;
        this.thyViewBoxHeight = 130;
        this.thySpeed = 2;
        this.thyPreserveAspectRatio = 'none'; // xMidYMid meet
        this.thyPrimaryColor = '#f0f0f0';
        this.thySecondaryColor = '#e0e0e0';
        this.thyPrimaryOpacity = 1;
        this.thySecondaryOpacity = 1;
        this.thyIgnoreBaseUrl = false;
        this.thyLoadingDone = false;
        this.contentTemplates = [];
        this.idClip = generateRandomStr();
        this.idGradient = generateRandomStr();
        this.defaultAnimation = ['-3; 1', '-2; 2', '-1; 3'];
        this.rtlAnimation = ['1; -3', '2; -2', '3; -1'];
    }
    ngOnInit() {
        this.animationValues = this.thyRtl ? this.rtlAnimation : this.defaultAnimation;
        if (this.thyBaseUrl === '' && !this.thyIgnoreBaseUrl && isPlatformBrowser(this.platformId)) {
            this.thyBaseUrl = window.location.pathname;
        }
        this.setFillStyle();
        this.setClipPath();
    }
    ngOnChanges(changes) {
        if (changes['thyBaseUrl']) {
            if (changes['thyBaseUrl'].previousValue !== changes['thyBaseUrl'].currentValue) {
                this.setFillStyle();
                this.setClipPath();
            }
        }
    }
    setFillStyle() {
        this.fillStyle = {
            fill: `url(${this.thyBaseUrl}#${this.idGradient})`
        };
    }
    setClipPath() {
        this.clipPath = `url(${this.thyBaseUrl}#${this.idClip})`;
    }
    assignInputProperties(input) {
        this.thyAnimate = input.thyAnimate;
        this.thyBaseUrl = input.thyBaseUrl;
        this.thyHeight = input.thyHeight;
        this.thyWidth = input.thyWidth;
        this.thyViewBoxHeight = input.thyViewBoxHeight;
        this.thyViewBoxWidth = input.thyViewBoxWidth;
        this.thyPreserveAspectRatio = input.thyPreserveAspectRatio;
        this.thyPrimaryColor = input.thyPrimaryColor;
        this.thyPrimaryOpacity = input.thyPrimaryOpacity;
        this.thySecondaryColor = input.thySecondaryColor;
        this.thySecondaryOpacity = input.thySecondaryOpacity;
        this.thyRtl = this.thyRtl;
        this.thySpeed = this.thySpeed;
        this.thyUniqueKey = this.thyUniqueKey;
    }
    addTemplate(template) {
        if (template) {
            this.contentTemplates.push(template);
        }
    }
}
ThySkeletonComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-skeleton',
                template: "<svg\n  *ngIf=\"!thyLoadingDone\"\n  attr.viewBox=\"0 0 {{ thyViewBoxWidth }} {{ thyViewBoxHeight }}\"\n  [attr.preserveAspectRatio]=\"thyPreserveAspectRatio\"\n  [ngStyle]=\"thyStyle\"\n  [attr.height]=\"thyHeight\"\n  [attr.width]=\"thyWidth\"\n>\n  <rect\n    [attr.clip-path]=\"clipPath\"\n    [ngStyle]=\"fillStyle\"\n    x=\"0\"\n    y=\"0\"\n    [attr.width]=\"thyWidth\"\n    [attr.height]=\"thyHeight\"\n  />\n\n  <defs>\n    <clipPath [attr.id]=\"idClip\">\n      <ng-container *ngIf=\"contentTemplates\">\n        <ng-container *ngFor=\"let content of contentTemplates\">\n          <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"customTemplate\">\n        <ng-container *ngTemplateOutlet=\"customTemplate\"></ng-container>\n      </ng-container>\n    </clipPath>\n\n    <linearGradient [attr.id]=\"idGradient\">\n      <stop offset=\"0%\" [attr.stop-color]=\"thyPrimaryColor\" [attr.stop-opacity]=\"thyPrimaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[0]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n\n      <stop offset=\"50%\" [attr.stop-color]=\"thySecondaryColor\" [attr.stop-opacity]=\"thySecondaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[1]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n\n      <stop offset=\"100%\" [attr.stop-color]=\"thyPrimaryColor\" [attr.stop-opacity]=\"thyPrimaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[2]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n    </linearGradient>\n  </defs>\n</svg>\n<ng-container *ngIf=\"thyLoadingDone\">\n  <ng-content></ng-content>\n</ng-container>\n"
            },] }
];
ThySkeletonComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
ThySkeletonComponent.propDecorators = {
    addSkeletonClass: [{ type: HostBinding, args: ['class.thy-skeleton',] }],
    thyAnimate: [{ type: Input }],
    thyBaseUrl: [{ type: Input }],
    thyWidth: [{ type: Input }],
    thyHeight: [{ type: Input }],
    thyViewBoxWidth: [{ type: Input }],
    thyViewBoxHeight: [{ type: Input }],
    thySpeed: [{ type: Input }],
    thyPreserveAspectRatio: [{ type: Input }],
    thyPrimaryColor: [{ type: Input }],
    thySecondaryColor: [{ type: Input }],
    thyPrimaryOpacity: [{ type: Input }],
    thySecondaryOpacity: [{ type: Input }],
    thyUniqueKey: [{ type: Input }],
    thyRtl: [{ type: Input }],
    thyStyle: [{ type: Input }],
    thyIgnoreBaseUrl: [{ type: Input }],
    thyLoadingDone: [{ type: Input }],
    customTemplate: [{ type: ContentChild, args: ['content',] }]
};

class ThySkeletonListComponent {
    constructor(skeletonComponent) {
        this.skeletonComponent = skeletonComponent;
    }
    ngOnInit() {
        this.skeletonComponent.addTemplate(this.contentTemplateRef);
    }
}
ThySkeletonListComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-skeleton-list-template',
                template: `
        <ng-template #content>
            <svg:rect x="0" y="0" rx="3" ry="3" width="250" height="10" />
            <svg:rect x="20" y="20" rx="3" ry="3" width="220" height="10" />
            <svg:rect x="20" y="40" rx="3" ry="3" width="170" height="10" />
            <svg:rect x="0" y="60" rx="3" ry="3" width="250" height="10" />
            <svg:rect x="20" y="80" rx="3" ry="3" width="200" height="10" />
            <svg:rect x="20" y="100" rx="3" ry="3" width="80" height="10" />
        </ng-template>
    `
            },] }
];
ThySkeletonListComponent.ctorParameters = () => [
    { type: ThySkeletonComponent }
];
ThySkeletonListComponent.propDecorators = {
    contentTemplateRef: [{ type: ViewChild, args: ['content', { static: true },] }]
};

class ThySkeletonBulletListComponent {
    constructor(skeletonComponent) {
        this.skeletonComponent = skeletonComponent;
        this.thyCount = 5;
        this.items = [];
    }
    ngOnInit() {
        for (let i = 0; i <= this.thyCount; i++) {
            this.items.push({
                circle: {
                    cx: 10,
                    cy: i * 30 + 20,
                    r: 8
                },
                rect: {
                    x: 25,
                    y: i * 2 * 15 + 15,
                    rx: 5,
                    ry: 5,
                    width: '90%',
                    height: 10
                }
            });
        }
        this.skeletonComponent.addTemplate(this.contentTemplateRef);
    }
}
ThySkeletonBulletListComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-skeleton-bullet-list-template',
                template: `
        <ng-template #content>
            <ng-container *ngFor="let item of items">
                <svg:circle [attr.cx]="item.circle.cx" [attr.cy]="item.circle.cy" r="8" />
                <svg:rect [attr.x]="item.rect.x" [attr.y]="item.rect.y" rx="5" ry="5" width="90%" height="10" />
            </ng-container>
        </ng-template>
    `
            },] }
];
ThySkeletonBulletListComponent.ctorParameters = () => [
    { type: ThySkeletonComponent }
];
ThySkeletonBulletListComponent.propDecorators = {
    thyCount: [{ type: Input }],
    contentTemplateRef: [{ type: ViewChild, args: ['content', { static: true },] }]
};

class ThySkeletonTitleComponent {
    constructor(skeletonComponent) {
        this.skeletonComponent = skeletonComponent;
        this.width = 100;
        this.height = 10;
    }
    set thyWidth(value) {
        if (value) {
            this.width = value;
        }
    }
    set thyHeight(value) {
        if (value) {
            this.height = value;
        }
    }
    ngOnInit() {
        this.skeletonComponent.addTemplate(this.contentTemplateRef);
    }
}
ThySkeletonTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-skeleton-title-template,[thySkeletonTitleTemplate]',
                template: `
        <ng-template #content>
            <svg:rect x="15" y="13" rx="4" ry="4" [attr.width]="width" [attr.height]="height" />
        </ng-template>
    `,
                exportAs: 'thySkeletonTitleTemplate'
            },] }
];
ThySkeletonTitleComponent.ctorParameters = () => [
    { type: ThySkeletonComponent }
];
ThySkeletonTitleComponent.propDecorators = {
    contentTemplateRef: [{ type: ViewChild, args: ['content', { static: true },] }],
    thyWidth: [{ type: Input }],
    thyHeight: [{ type: Input }]
};

class ThySkeletonAvatarComponent {
    constructor(skeletonComponent) {
        this.skeletonComponent = skeletonComponent;
    }
    ngOnInit() {
        this.skeletonComponent.addTemplate(this.contentTemplateRef);
    }
}
ThySkeletonAvatarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-skeleton-avatar-template,[thySkeletonAvatarTemplate]',
                template: `
        <ng-template #content>
            <svg:circle cx="30" cy="30" r="30" />
        </ng-template>
    `
            },] }
];
ThySkeletonAvatarComponent.ctorParameters = () => [
    { type: ThySkeletonComponent }
];
ThySkeletonAvatarComponent.propDecorators = {
    contentTemplateRef: [{ type: ViewChild, args: ['content', { static: true },] }]
};

class ThySkeletonParagraphComponent {
    constructor(skeletonComponent) {
        this.skeletonComponent = skeletonComponent;
    }
    ngOnInit() {
        this.skeletonComponent.addTemplate(this.contentTemplateRef);
    }
}
ThySkeletonParagraphComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-skeleton-paragraph-template,[thySkeletonParagraphTemplate]',
                template: `
        <ng-template #content>
            <svg:rect x="0" y="0" rx="2" ry="2" width="38%" height="10" />
            <svg:rect x="20" y="20" rx="2" ry="2" width="92%" height="10" />
            <svg:rect x="20" y="40" rx="2" ry="2" width="92%" height="10" />
            <svg:rect x="0" y="60" rx="2" ry="2" width="61%" height="10" />
        </ng-template>
    `,
                exportAs: 'thySkeletonParagraphTemplate'
            },] }
];
ThySkeletonParagraphComponent.ctorParameters = () => [
    { type: ThySkeletonComponent }
];
ThySkeletonParagraphComponent.propDecorators = {
    contentTemplateRef: [{ type: ViewChild, args: ['content', { static: true },] }]
};

class ThySkeletonModule {
}
ThySkeletonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ThySkeletonComponent,
                    ThySkeletonListComponent,
                    ThySkeletonBulletListComponent,
                    ThySkeletonAvatarComponent,
                    ThySkeletonTitleComponent,
                    ThySkeletonParagraphComponent
                ],
                imports: [CommonModule, PortalModule],
                entryComponents: [ThySkeletonComponent],
                exports: [
                    ThySkeletonComponent,
                    ThySkeletonListComponent,
                    ThySkeletonBulletListComponent,
                    ThySkeletonTitleComponent,
                    ThySkeletonAvatarComponent,
                    ThySkeletonParagraphComponent
                ],
                providers: []
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThySkeletonAvatarComponent, ThySkeletonBulletListComponent, ThySkeletonComponent, ThySkeletonListComponent, ThySkeletonModule, ThySkeletonParagraphComponent, ThySkeletonTitleComponent };
//# sourceMappingURL=ngx-tethys-skeleton.js.map

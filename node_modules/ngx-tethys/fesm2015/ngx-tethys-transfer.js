import { EventEmitter, Component, ViewEncapsulation, HostBinding, Input, Output, ContentChild, IterableDiffers, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { moveItemInArray, transferArrayItem, DragDropModule } from '@angular/cdk/drag-drop';
import { ThyButtonModule } from 'ngx-tethys/button';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyListModule } from 'ngx-tethys/list';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyFlexibleTextModule } from 'ngx-tethys/flexible-text';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/icon';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/flexible-text';
import * as ɵngcc4 from '@angular/cdk/drag-drop';
import * as ɵngcc5 from 'ngx-tethys/list';
import * as ɵngcc6 from 'ngx-tethys/shared';

const _c0 = ["renderTemplate"];
const _c1 = ["renderLeftTemplate"];
const _c2 = ["renderRightTemplate"];
function ThyTransferComponent_ng_template_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "thy-icon", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ThyTransferComponent_ng_template_1_ng_template_3_Template(rf, ctx) { }
function ThyTransferComponent_ng_template_1_thy_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 15);
} }
const _c3 = function (a0) { return { "un-select-item": a0 }; };
const _c4 = function (a0) { return { $implicit: a0 }; };
function ThyTransferComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵlistener("click", function ThyTransferComponent_ng_template_1_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const item_r6 = ctx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onSelect(item_r6.direction === "left" ? "left" : "right", { item: item_r6 }); });
    ɵngcc0.ɵɵtemplate(1, ThyTransferComponent_ng_template_1_ng_container_1_Template, 2, 0, "ng-container", 10);
    ɵngcc0.ɵɵelementStart(2, "div", 11);
    ɵngcc0.ɵɵtemplate(3, ThyTransferComponent_ng_template_1_ng_template_3_Template, 0, 0, "ng-template", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, ThyTransferComponent_ng_template_1_thy_icon_4_Template, 1, 0, "thy-icon", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r6 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r4 = ɵngcc0.ɵɵreference(12);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.thyLeftDraggable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c3, item_r6.direction !== "right"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(7, _c4, item_r6));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r6.direction === "right");
} }
function ThyTransferComponent_ng_template_9_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "thy-icon", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ThyTransferComponent_ng_template_9_ng_template_2_Template(rf, ctx) { }
function ThyTransferComponent_ng_template_9_a_3_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 18);
    ɵngcc0.ɵɵlistener("click", function ThyTransferComponent_ng_template_9_a_3_Template_a_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const item_r12 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.onSelect("right", { item: item_r12 }); });
    ɵngcc0.ɵɵelement(1, "thy-icon", 19);
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTransferComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyTransferComponent_ng_template_9_ng_container_0_Template, 2, 0, "ng-container", 10);
    ɵngcc0.ɵɵelementStart(1, "div", 16);
    ɵngcc0.ɵɵtemplate(2, ThyTransferComponent_ng_template_9_ng_template_2_Template, 0, 0, "ng-template", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, ThyTransferComponent_ng_template_9_a_3_Template, 2, 0, "a", 17);
} if (rf & 2) {
    const item_r12 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r4 = ɵngcc0.ɵɵreference(12);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.thyRightDraggable);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(4, _c4, item_r12));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r12.direction === "right" && !item_r12.isFixed);
} }
function ThyTransferComponent_ng_template_11_0_ng_template_0_Template(rf, ctx) { }
function ThyTransferComponent_ng_template_11_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyTransferComponent_ng_template_11_0_ng_template_0_Template, 0, 0, "ng-template", 12);
} if (rf & 2) {
    const item_r19 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r20 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r20.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c4, item_r19));
} }
function ThyTransferComponent_ng_template_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "thy-flexible-text", 20);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r19 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyTooltipContent", item_r19.title);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r19.title, " ");
} }
function ThyTransferComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyTransferComponent_ng_template_11_0_Template, 1, 4, undefined, 10);
    ɵngcc0.ɵɵtemplate(1, ThyTransferComponent_ng_template_11_ng_container_1_Template, 3, 2, "ng-container", 10);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.templateRef);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.templateRef);
} }
function ThyTransferListComponent_ng_container_3_ng_container_2_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 11);
} }
function ThyTransferListComponent_ng_container_3_ng_container_2_thy_list_item_5_ng_template_1_Template(rf, ctx) { }
const _c5 = function (a0) { return { active: a0 }; };
function ThyTransferListComponent_ng_container_3_ng_container_2_thy_list_item_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "thy-list-item", 12);
    ɵngcc0.ɵɵtemplate(1, ThyTransferListComponent_ng_container_3_ng_container_2_thy_list_item_5_ng_template_1_Template, 0, 0, "ng-template", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r8 = ctx.$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("cdkDragData", item_r8)("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c5, item_r8.checked));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r7.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(6, _c4, item_r8));
} }
function ThyTransferListComponent_ng_container_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "thy-list", 10);
    ɵngcc0.ɵɵlistener("cdkDropListDropped", function ThyTransferListComponent_ng_container_3_ng_container_2_Template_thy_list_cdkDropListDropped_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.drop($event); });
    ɵngcc0.ɵɵtemplate(4, ThyTransferListComponent_ng_container_3_ng_container_2_div_4_Template, 1, 0, "div", 7);
    ɵngcc0.ɵɵtemplate(5, ThyTransferListComponent_ng_container_3_ng_container_2_thy_list_item_5_Template, 2, 8, "thy-list-item", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 9);
    ɵngcc0.ɵɵtext(7, "\u672A\u9501\u5B9A");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("\u9501\u5B9A (\u4E0A\u9650", ctx_r3.maxLock, "\u4E2A)");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("cdkDropListData", ctx_r3.lockItems)("cdkDropListEnterPredicate", ctx_r3.lockListEnterPredicate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.lockItems.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.lockItems);
} }
function ThyTransferListComponent_ng_container_3_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 11);
} }
function ThyTransferListComponent_ng_container_3_thy_list_item_5_ng_template_1_Template(rf, ctx) { }
function ThyTransferListComponent_ng_container_3_thy_list_item_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "thy-list-item", 12);
    ɵngcc0.ɵɵtemplate(1, ThyTransferListComponent_ng_container_3_thy_list_item_5_ng_template_1_Template, 0, 0, "ng-template", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r12 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("cdkDragData", item_r12)("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c5, item_r12.checked));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(6, _c4, item_r12));
} }
function ThyTransferListComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵtemplate(2, ThyTransferListComponent_ng_container_3_ng_container_2_Template, 8, 5, "ng-container", 5);
    ɵngcc0.ɵɵelementStart(3, "thy-list", 6);
    ɵngcc0.ɵɵlistener("cdkDropListDropped", function ThyTransferListComponent_ng_container_3_Template_thy_list_cdkDropListDropped_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.drop($event); });
    ɵngcc0.ɵɵtemplate(4, ThyTransferListComponent_ng_container_3_div_4_Template, 1, 0, "div", 7);
    ɵngcc0.ɵɵtemplate(5, ThyTransferListComponent_ng_container_3_thy_list_item_5_Template, 2, 8, "thy-list-item", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("cdkDropListGroupDisabled", !ctx_r0.draggable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.canLock);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("cdkDropListDisabled", !ctx_r0.draggable)("cdkDropListData", ctx_r0.unlockItems);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.unlockItems.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.unlockItems);
} }
function ThyTransferListComponent_ng_template_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c6 = function (a0, a1, a2) { return { $implicit: a0, onSelectItem: a1, onUnselectItem: a2 }; };
function ThyTransferListComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵtemplate(1, ThyTransferListComponent_ng_template_4_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.contentRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c6, ctx_r2.items, ctx_r2.onSelectItem, ctx_r2.onUnselectItem));
} }
var TransferDirection;
(function (TransferDirection) {
    TransferDirection["left"] = "left";
    TransferDirection["right"] = "right";
})(TransferDirection || (TransferDirection = {}));

class ThyTransferComponent {
    constructor() {
        this.hostClass = 'thy-transfer';
        this.leftDataSource = [];
        this.rightDataSource = [];
        this.allDataSource = [];
        this.rightDraggable = false;
        this._autoMove = true;
        this.thyDraggableUpdate = new EventEmitter();
        this.thyChange = new EventEmitter();
    }
    set thyData(value) {
        if (value) {
            this.initializeTransferData(value);
        }
    }
    // @Input() transferToRight
    set thyTitles(value) {
        this.leftTitle = value[0] || '';
        this.rightTitle = value[1] || '';
    }
    // Currently not implemented, in order to support the selections move
    set thyAutoMove(value) {
        this._autoMove = value;
    }
    ngOnInit() { }
    initializeTransferData(data = []) {
        this.allDataSource = [];
        this.leftDataSource = [];
        this.rightDataSource = [];
        data.forEach(item => {
            this.allDataSource.push(item);
            if (item.direction === TransferDirection.left) {
                this.leftDataSource.push(item);
            }
            if (item.direction === TransferDirection.right) {
                this.rightDataSource.push(item);
            }
        });
    }
    onSelect(from, event) {
        if (event.item.isFixed) {
            return;
        }
        const to = from === TransferDirection.left ? TransferDirection.right : TransferDirection.left;
        event.item.checked = !event.item.checked;
        if (this._autoMove) {
            this.onMove(to);
        }
    }
    selectItem(event) {
        this.onSelect(TransferDirection.left, event);
    }
    unselectItem(event) {
        this.onSelect(TransferDirection.right, event);
    }
    groupListByIsLock(list = []) {
        const lock = [], unlock = [];
        list.forEach(item => {
            if (item.isLock) {
                lock.push(item);
            }
            else {
                unlock.push(item);
            }
        });
        return { lock: lock, unlock: unlock };
    }
    onMove(to) {
        const fromDataSource = to === TransferDirection.right ? this.leftDataSource : this.rightDataSource;
        const toDataSource = to === TransferDirection.right ? this.rightDataSource : this.leftDataSource;
        const selections = fromDataSource.filter(item => item.checked);
        const changeEvent = {
            from: to === TransferDirection.right ? TransferDirection.left : TransferDirection.right,
            to: to,
            items: [...selections]
        };
        selections.forEach(item => {
            const index = fromDataSource.indexOf(item);
            const removed = fromDataSource.splice(index, 1)[0];
            removed.checked = !removed.checked;
            removed.direction = to;
            toDataSource.push(removed);
        });
        this.thyChange.emit(Object.assign(Object.assign({}, changeEvent), { left: this.groupListByIsLock(this.leftDataSource), right: this.groupListByIsLock(this.rightDataSource) }));
    }
    onDragUpdate(direction, event) {
        const otherDirectionData = direction === TransferDirection.left ? this.rightDataSource : this.leftDataSource;
        const otherListData = this.groupListByIsLock(otherDirectionData);
        this.thyDraggableUpdate.emit(Object.assign(Object.assign({}, event.dragEvent), { left: direction === TransferDirection.left ? event.listData : otherListData, right: direction === TransferDirection.right ? event.listData : otherListData }));
    }
}
ThyTransferComponent.ɵfac = function ThyTransferComponent_Factory(t) { return new (t || ThyTransferComponent)(); };
ThyTransferComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTransferComponent, selectors: [["thy-transfer"]], contentQueries: function ThyTransferComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.leftContentRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rightContentRef = _t.first);
    } }, hostVars: 2, hostBindings: function ThyTransferComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.hostClass);
    } }, inputs: { thyData: "thyData", thyTitles: "thyTitles", thyAutoMove: "thyAutoMove", thyrenderLeftTemplateRef: "thyrenderLeftTemplateRef", thyrenderRightTemplateRef: "thyrenderRightTemplateRef", thyRightCanLock: "thyRightCanLock", thyRightLockMax: "thyRightLockMax", thyLeftDraggable: "thyLeftDraggable", thyRightDraggable: "thyRightDraggable" }, outputs: { thyDraggableUpdate: "thyDraggableUpdate", thyChange: "thyChange" }, decls: 13, vars: 12, consts: [[3, "items", "title", "draggable", "renderContentRef", "template", "draggableUpdate", "selectItem", "unselectItem"], ["leftTemplateRef", ""], [1, "thy-transfer-operation"], [1, "thy-transfer-operation-body"], ["thyIconName", "angle-right", 1, "operation-link"], ["thyIconName", "angle-left", 1, "operation-link"], [3, "items", "title", "draggable", "canLock", "maxLock", "template", "renderContentRef", "draggableUpdate", "selectItem", "unselectItem"], ["rightTemplateRef", ""], ["thyTransferListItem", ""], [1, "list-item-content", 3, "click"], [4, "ngIf"], [1, "item-name", 3, "ngClass"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "text-primary item-status", "thyIconName", "check", 4, "ngIf"], ["thyIconName", "drag", 1, "drag-handle"], ["thyIconName", "check", 1, "text-primary", "item-status"], [1, "item-name"], ["class", "link-secondary", 3, "click", 4, "ngIf"], [1, "link-secondary", 3, "click"], ["thyIconName", "close", 1, "item-status"], [3, "thyTooltipContent"]], template: function ThyTransferComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "thy-transfer-list", 0);
        ɵngcc0.ɵɵlistener("draggableUpdate", function ThyTransferComponent_Template_thy_transfer_list_draggableUpdate_0_listener($event) { return ctx.onDragUpdate("left", $event); })("selectItem", function ThyTransferComponent_Template_thy_transfer_list_selectItem_0_listener($event) { return ctx.selectItem($event); })("unselectItem", function ThyTransferComponent_Template_thy_transfer_list_unselectItem_0_listener($event) { return ctx.unselectItem($event); });
        ɵngcc0.ɵɵtemplate(1, ThyTransferComponent_ng_template_1_Template, 5, 9, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelement(5, "thy-icon", 4);
        ɵngcc0.ɵɵelement(6, "br");
        ɵngcc0.ɵɵelement(7, "thy-icon", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "thy-transfer-list", 6);
        ɵngcc0.ɵɵlistener("draggableUpdate", function ThyTransferComponent_Template_thy_transfer_list_draggableUpdate_8_listener($event) { return ctx.onDragUpdate("right", $event); })("selectItem", function ThyTransferComponent_Template_thy_transfer_list_selectItem_8_listener($event) { return ctx.selectItem($event); })("unselectItem", function ThyTransferComponent_Template_thy_transfer_list_unselectItem_8_listener($event) { return ctx.unselectItem($event); });
        ɵngcc0.ɵɵtemplate(9, ThyTransferComponent_ng_template_9_Template, 4, 6, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, ThyTransferComponent_ng_template_11_Template, 2, 2, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(2);
        const _r2 = ɵngcc0.ɵɵreference(10);
        ɵngcc0.ɵɵproperty("items", ctx.allDataSource)("title", ctx.leftTitle)("draggable", ctx.thyLeftDraggable)("renderContentRef", ctx.leftContentRef)("template", _r0);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("items", ctx.rightDataSource)("title", ctx.rightTitle)("draggable", ctx.thyRightDraggable)("canLock", ctx.thyRightCanLock)("maxLock", ctx.thyRightLockMax)("template", _r2)("renderContentRef", ctx.rightContentRef);
    } }, directives: function () { return [ThyTransferListComponent, ɵngcc1.ThyIconComponent, ɵngcc2.NgIf, ɵngcc2.NgClass, ɵngcc2.NgTemplateOutlet, ɵngcc3.ThyFlexibleTextComponent]; }, encapsulation: 2 });
ThyTransferComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }],
    thyData: [{ type: Input }],
    thyrenderLeftTemplateRef: [{ type: Input }],
    thyrenderRightTemplateRef: [{ type: Input }],
    thyTitles: [{ type: Input }],
    thyRightCanLock: [{ type: Input }],
    thyRightLockMax: [{ type: Input }],
    thyAutoMove: [{ type: Input }],
    thyLeftDraggable: [{ type: Input }],
    thyRightDraggable: [{ type: Input }],
    thyDraggableUpdate: [{ type: Output }],
    thyChange: [{ type: Output }],
    templateRef: [{ type: ContentChild, args: ['renderTemplate',] }],
    leftContentRef: [{ type: ContentChild, args: ['renderLeftTemplate',] }],
    rightContentRef: [{ type: ContentChild, args: ['renderRightTemplate',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTransferComponent, [{
        type: Component,
        args: [{
                selector: 'thy-transfer',
                template: "<thy-transfer-list\n  [items]=\"allDataSource\"\n  [title]=\"leftTitle\"\n  [draggable]=\"thyLeftDraggable\"\n  [renderContentRef]=\"leftContentRef\"\n  (draggableUpdate)=\"onDragUpdate('left', $event)\"\n  [template]=\"leftTemplateRef\"\n  (selectItem)=\"selectItem($event)\"\n  (unselectItem)=\"unselectItem($event)\"\n>\n  <ng-template #leftTemplateRef let-item>\n    <div (click)=\"onSelect(item.direction === 'left' ? 'left' : 'right', { item: item })\" class=\"list-item-content\">\n      <ng-container *ngIf=\"thyLeftDraggable\">\n        <thy-icon thyIconName=\"drag\" class=\"drag-handle\"></thy-icon>\n      </ng-container>\n      <div class=\"item-name\" [ngClass]=\"{ 'un-select-item': item.direction !== 'right' }\">\n        <ng-template [ngTemplateOutlet]=\"thyTransferListItem\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n      </div>\n      <thy-icon *ngIf=\"item.direction === 'right'\" class=\"text-primary item-status\" thyIconName=\"check\"></thy-icon>\n    </div>\n  </ng-template>\n</thy-transfer-list>\n\n<div class=\"thy-transfer-operation\">\n  <div class=\"thy-transfer-operation-body\">\n    <thy-icon thyIconName=\"angle-right\" class=\"operation-link\"></thy-icon>\n    <br />\n    <thy-icon thyIconName=\"angle-left\" class=\"operation-link\"></thy-icon>\n  </div>\n</div>\n\n<thy-transfer-list\n  [items]=\"rightDataSource\"\n  [title]=\"rightTitle\"\n  [draggable]=\"thyRightDraggable\"\n  (draggableUpdate)=\"onDragUpdate('right', $event)\"\n  [canLock]=\"thyRightCanLock\"\n  [maxLock]=\"thyRightLockMax\"\n  [template]=\"rightTemplateRef\"\n  [renderContentRef]=\"rightContentRef\"\n  (selectItem)=\"selectItem($event)\"\n  (unselectItem)=\"unselectItem($event)\"\n>\n  <ng-template #rightTemplateRef let-item>\n    <ng-container *ngIf=\"thyRightDraggable\">\n      <thy-icon thyIconName=\"drag\" class=\"drag-handle\"></thy-icon>\n    </ng-container>\n    <div class=\"item-name\">\n      <ng-template [ngTemplateOutlet]=\"thyTransferListItem\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n    </div>\n    <a class=\"link-secondary\" *ngIf=\"item.direction === 'right' && !item.isFixed\" (click)=\"onSelect('right', { item: item })\">\n      <thy-icon class=\"item-status\" thyIconName=\"close\"></thy-icon>\n    </a>\n  </ng-template>\n</thy-transfer-list>\n\n<ng-template #thyTransferListItem let-item>\n  <ng-template *ngIf=\"templateRef\" [ngTemplateOutlet]=\"templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n  <ng-container *ngIf=\"!templateRef\">\n    <thy-flexible-text [thyTooltipContent]=\"item.title\">\n      {{ item.title }}\n    </thy-flexible-text>\n  </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return []; }, { hostClass: [{
            type: HostBinding,
            args: ['class']
        }], thyDraggableUpdate: [{
            type: Output
        }], thyChange: [{
            type: Output
        }], thyData: [{
            type: Input
        }], thyTitles: [{
            type: Input
        }], thyAutoMove: [{
            type: Input
        }], thyrenderLeftTemplateRef: [{
            type: Input
        }], thyrenderRightTemplateRef: [{
            type: Input
        }], thyRightCanLock: [{
            type: Input
        }], thyRightLockMax: [{
            type: Input
        }], thyLeftDraggable: [{
            type: Input
        }], thyRightDraggable: [{
            type: Input
        }], templateRef: [{
            type: ContentChild,
            args: ['renderTemplate']
        }], leftContentRef: [{
            type: ContentChild,
            args: ['renderLeftTemplate']
        }], rightContentRef: [{
            type: ContentChild,
            args: ['renderRightTemplate']
        }] }); })();

class ThyTransferListComponent {
    constructor(root, differs) {
        this.root = root;
        this.differs = differs;
        this.lockItems = [];
        this.unlockItems = [];
        this.draggableUpdate = new EventEmitter();
        this.selectItem = new EventEmitter();
        this.unselectItem = new EventEmitter();
        this.hostClass = 'thy-transfer-list';
        this.lockListEnterPredicate = () => {
            return this.lockItems.length < this.maxLock;
        };
        this.onSelectItem = (item) => {
            this.selectItem.emit({ item });
        };
        this.onUnselectItem = (item) => {
            this.unselectItem.emit({ item });
        };
    }
    ngOnInit() {
        this._combineTransferData();
        if (this.canLock) {
            this._lockDiff = this.differs.find(this.lockItems).create();
            this._unlockDiff = this.differs.find(this.unlockItems).create();
        }
        else {
            this._unlockDiff = this.differs.find(this.unlockItems).create();
        }
        this._diff = this.differs.find(this.items).create();
    }
    _combineTransferData() {
        this.lockItems = [];
        this.unlockItems = [];
        if (this.canLock) {
            (this.items || []).forEach(item => {
                if (item.isLock) {
                    this.lockItems.push(item);
                }
                else {
                    this.unlockItems.push(item);
                }
            });
        }
        else {
            this.unlockItems = this.items;
        }
    }
    _afterChangeItems(changes, items) {
        // 数据发生变化时，更改order值
        changes.forEachAddedItem(record => {
            record.item.order = record.currentIndex;
        });
        changes.forEachRemovedItem(() => {
            items.forEach((item, index) => {
                item.order = index;
            });
        });
        changes.forEachMovedItem(() => {
            items.forEach((item, index) => {
                item.order = index;
            });
        });
    }
    ngDoCheck() {
        const changes = this._diff.diff(this.items);
        if (changes) {
            this._afterChangeItems(changes, this.items);
            this._combineTransferData();
        }
        if (this._lockDiff) {
            const lockChanges = this._lockDiff.diff(this.lockItems);
            if (lockChanges) {
                this._afterChangeItems(lockChanges, this.lockItems);
            }
        }
        const unlockChanges = this._unlockDiff.diff(this.unlockItems);
        if (unlockChanges) {
            this._afterChangeItems(unlockChanges, this.unlockItems);
        }
    }
    drop(event) {
        if (event.previousContainer === event.container) {
            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
        }
        else {
            transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);
            (event.previousContainer.data || []).forEach(item => {
                item.isLock = event.previousContainer.id === 'lock';
            });
            (event.container.data || []).forEach(item => {
                item.isLock = event.container.id === 'lock';
            });
        }
        const dragEvent = {
            model: event.item.data,
            models: event.container.data,
            oldIndex: event.previousIndex,
            newIndex: event.currentIndex
        };
        this.draggableUpdate.emit({
            dragEvent: dragEvent,
            listData: { lock: this.lockItems, unlock: this.unlockItems }
        });
    }
}
ThyTransferListComponent.ɵfac = function ThyTransferListComponent_Factory(t) { return new (t || ThyTransferListComponent)(ɵngcc0.ɵɵdirectiveInject(ThyTransferComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };
ThyTransferListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTransferListComponent, selectors: [["thy-transfer-list"]], hostVars: 2, hostBindings: function ThyTransferListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.hostClass);
    } }, inputs: { title: "title", items: "items", draggable: "draggable", canLock: "canLock", maxLock: "maxLock", template: "template", contentRef: ["renderContentRef", "contentRef"] }, outputs: { draggableUpdate: "draggableUpdate", selectItem: "selectItem", unselectItem: "unselectItem" }, decls: 6, vars: 4, consts: [[1, "thy-transfer-list-header"], [1, "thy-transfer-list-header-title"], [4, "ngIf", "ngIfElse"], ["renderContent", ""], ["cdkDropListGroup", "", 1, "thy-transfer-list-body", 3, "cdkDropListGroupDisabled"], [4, "ngIf"], ["cdkDropList", "", "thyDragDrop", "", "id", "unlock", 1, "thy-transfer-list-content", 3, "cdkDropListDisabled", "cdkDropListData", "cdkDropListDropped"], ["class", "cdk-drop-list-empty", 4, "ngIf"], ["class", "thy-transfer-list-content-item text-truncate", "cdkDrag", "", 3, "cdkDragData", "ngClass", 4, "ngFor", "ngForOf"], [1, "thy-transfer-list-group-name"], ["cdkDropList", "", "thyDragDrop", "", "id", "lock", 1, "thy-transfer-list-content", 3, "cdkDropListData", "cdkDropListEnterPredicate", "cdkDropListDropped"], [1, "cdk-drop-list-empty"], ["cdkDrag", "", 1, "thy-transfer-list-content-item", "text-truncate", 3, "cdkDragData", "ngClass"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "thy-transfer-list-body"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function ThyTransferListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ThyTransferListComponent_ng_container_3_Template, 6, 6, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(4, ThyTransferListComponent_ng_template_4_Template, 2, 6, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(5);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2("", ctx.title, " \u00B7 ", ctx.items == null ? null : ctx.items.length, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.contentRef)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc4.CdkDropListGroup, ɵngcc5.ThyListComponent, ɵngcc4.CdkDropList, ɵngcc6.ThyDragDropDirective, ɵngcc2.NgForOf, ɵngcc5.ThyListItemComponent, ɵngcc4.CdkDrag, ɵngcc2.NgClass, ɵngcc2.NgTemplateOutlet], encapsulation: 2 });
ThyTransferListComponent.ctorParameters = () => [
    { type: ThyTransferComponent },
    { type: IterableDiffers }
];
ThyTransferListComponent.propDecorators = {
    title: [{ type: Input }],
    items: [{ type: Input }],
    draggable: [{ type: Input }],
    canLock: [{ type: Input }],
    maxLock: [{ type: Input }],
    template: [{ type: Input }],
    contentRef: [{ type: Input, args: ['renderContentRef',] }],
    draggableUpdate: [{ type: Output }],
    selectItem: [{ type: Output }],
    unselectItem: [{ type: Output }],
    hostClass: [{ type: HostBinding, args: ['class',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTransferListComponent, [{
        type: Component,
        args: [{
                selector: 'thy-transfer-list',
                template: "<div class=\"thy-transfer-list-header\">\n  <span class=\"thy-transfer-list-header-title\">{{ title }} \u00B7 {{ items?.length }}</span>\n</div>\n<ng-container *ngIf=\"!contentRef; else renderContent\">\n  <div class=\"thy-transfer-list-body\" cdkDropListGroup [cdkDropListGroupDisabled]=\"!draggable\">\n    <ng-container *ngIf=\"canLock\">\n      <div class=\"thy-transfer-list-group-name\">\u9501\u5B9A (\u4E0A\u9650{{ maxLock }}\u4E2A)</div>\n      <thy-list\n        class=\"thy-transfer-list-content\"\n        cdkDropList\n        thyDragDrop\n        id=\"lock\"\n        [cdkDropListData]=\"lockItems\"\n        (cdkDropListDropped)=\"drop($event)\"\n        [cdkDropListEnterPredicate]=\"lockListEnterPredicate\"\n      >\n        <div class=\"cdk-drop-list-empty\" *ngIf=\"lockItems.length === 0\"></div>\n        <thy-list-item\n          class=\"thy-transfer-list-content-item text-truncate\"\n          cdkDrag\n          [cdkDragData]=\"item\"\n          *ngFor=\"let item of lockItems\"\n          [ngClass]=\"{ active: item.checked }\"\n        >\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n        </thy-list-item>\n      </thy-list>\n\n      <div class=\"thy-transfer-list-group-name\">\u672A\u9501\u5B9A</div>\n    </ng-container>\n    <thy-list\n      class=\"thy-transfer-list-content\"\n      cdkDropList\n      thyDragDrop\n      [cdkDropListDisabled]=\"!draggable\"\n      id=\"unlock\"\n      [cdkDropListData]=\"unlockItems\"\n      (cdkDropListDropped)=\"drop($event)\"\n    >\n      <div class=\"cdk-drop-list-empty\" *ngIf=\"unlockItems.length === 0\"></div>\n      <thy-list-item\n        class=\"thy-transfer-list-content-item text-truncate\"\n        cdkDrag\n        [cdkDragData]=\"item\"\n        *ngFor=\"let item of unlockItems\"\n        [ngClass]=\"{ active: item.checked }\"\n      >\n        <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n      </thy-list-item>\n    </thy-list>\n  </div>\n</ng-container>\n\n<ng-template #renderContent>\n  <div class=\"thy-transfer-list-body\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        contentRef;\n        context: {\n          $implicit: items,\n          onSelectItem: onSelectItem,\n          onUnselectItem: onUnselectItem\n        }\n      \"\n    ></ng-container>\n  </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ThyTransferComponent }, { type: ɵngcc0.IterableDiffers }]; }, { draggableUpdate: [{
            type: Output
        }], selectItem: [{
            type: Output
        }], unselectItem: [{
            type: Output
        }], hostClass: [{
            type: HostBinding,
            args: ['class']
        }], title: [{
            type: Input
        }], items: [{
            type: Input
        }], draggable: [{
            type: Input
        }], canLock: [{
            type: Input
        }], maxLock: [{
            type: Input
        }], template: [{
            type: Input
        }], contentRef: [{
            type: Input,
            args: ['renderContentRef']
        }] }); })();

class ThyTransferModule {
}
ThyTransferModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyTransferModule });
ThyTransferModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyTransferModule_Factory(t) { return new (t || ThyTransferModule)(); }, imports: [[CommonModule, ThyButtonModule, DragDropModule, ThyIconModule, ThyListModule, ThySharedModule, ThyFlexibleTextModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyTransferModule, { declarations: function () { return [ThyTransferComponent, ThyTransferListComponent]; }, imports: function () { return [CommonModule, ThyButtonModule, DragDropModule, ThyIconModule, ThyListModule, ThySharedModule, ThyFlexibleTextModule]; }, exports: function () { return [ThyTransferComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTransferModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyTransferComponent, ThyTransferListComponent],
                imports: [CommonModule, ThyButtonModule, DragDropModule, ThyIconModule, ThyListModule, ThySharedModule, ThyFlexibleTextModule],
                exports: [ThyTransferComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyTransferComponent, ThyTransferListComponent, ThyTransferModule, TransferDirection };

//# sourceMappingURL=ngx-tethys-transfer.js.map
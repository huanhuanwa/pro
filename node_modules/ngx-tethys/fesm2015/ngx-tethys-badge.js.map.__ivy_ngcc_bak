{"version":3,"file":"ngx-tethys-badge.js","sources":["../../src/badge/badge.component.ts","../../src/badge/badge.module.ts","../../src/badge/ngx-tethys-badge.ts"],"sourcesContent":["import { coerceBooleanProperty } from 'ngx-tethys/util';\n\nimport { Component, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nconst BadgeMutexType = ['thy-badge-count', 'thy-badge-dot', 'thy-badge-hollow'];\nconst BadgeMutexTheme = ['thy-badge-primary', 'thy-badge-warning', 'thy-badge-danger', 'thy-badge-secondary'];\nconst BadgeMutexSize = ['thy-badge-lg', 'thy-badge-sm'];\n\n@Component({\n    selector: 'thy-badge,[thyBadge]',\n    templateUrl: './badge.component.html'\n})\nexport class ThyBadgeComponent implements OnInit {\n    displayContent = '';\n\n    badgeClassName = '';\n\n    private nativeElement: any;\n\n    private _initialized = false;\n\n    private badgeClassNameMap = {\n        'thy-badge-count': true,\n        'thy-badge-dot': false,\n        'thy-badge-hollow': false,\n        'thy-badge-lg': false,\n        'thy-badge-sm': false,\n        'thy-badge-danger': true,\n        'thy-badge-primary': false,\n        'thy-badge-warning': false,\n        'thy-badge-secondary': false,\n        'thy-badge-sup': true,\n        'thy-badge-multiple-words': false\n    };\n\n    st: {\n        value: number | string | any;\n        isValueOfString: boolean;\n        isSetValue: boolean;\n        isValueKeepShow: boolean;\n        max: {\n            is: boolean;\n            value: number;\n        };\n        isElement: boolean;\n        isSup: boolean;\n        isShowBadge: boolean;\n    } = {\n        value: '',\n        isValueOfString: false,\n        isSetValue: false,\n        isValueKeepShow: false,\n        max: {\n            is: false,\n            value: null\n        },\n        isElement: false,\n        isSup: false,\n        isShowBadge: true\n    };\n\n    public textColor: string;\n\n    public backgroundColor: string;\n\n    constructor(private elementRef: ElementRef) {\n        this.nativeElement = this.elementRef.nativeElement;\n        this.st.isElement = this.nativeElement.localName === 'thy-badge';\n    }\n\n    @HostBinding('class.thy-badge-container') containerClassName = true;\n\n    @Input()\n    set thyType(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n        switch (value) {\n            case 'danger':\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n            case 'primary':\n                this.badgeClassNameMap['thy-badge-primary'] = true;\n                break;\n            case 'warning':\n                this.badgeClassNameMap['thy-badge-warning'] = true;\n                break;\n            case 'secondary':\n                this.badgeClassNameMap['thy-badge-secondary'] = true;\n                break;\n            default:\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyCount(value: number) {\n        this.st.value = value;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyContext(value: string) {\n        this.st.value = value;\n        this.st.isValueOfString = true;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyMaxCount(value: number) {\n        this.st.max.is = true;\n        this.st.max.value = value;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thySize(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexSize);\n        switch (value) {\n            case 'lg':\n                this.badgeClassNameMap['thy-badge-lg'] = true;\n                break;\n            case 'sm':\n                this.badgeClassNameMap['thy-badge-sm'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsDot(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-dot'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsHollow(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-hollow'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyKeepShow(value: boolean) {\n        this.st.isValueKeepShow = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n        }\n    }\n\n    @Input()\n    set thyTextColor(value: string) {\n        this.textColor = value;\n    }\n\n    @Input()\n    set thyBackgroundColor(value: string) {\n        this.backgroundColor = value;\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n    }\n\n    ngOnInit() {\n        let childNodeCount = 0;\n        this.nativeElement.childNodes.forEach((n: HTMLElement) => {\n            if (['#comment'].indexOf(n.nodeName) < 0) {\n                childNodeCount++;\n            }\n        });\n        this.st.isSup = childNodeCount > 0;\n\n        this.combineBadgeClassName();\n\n        if (this.st.isSetValue) {\n            this.combineBadgeDisplayContent();\n        }\n\n        this._initialized = true;\n    }\n\n    private combineBadgeClassName() {\n        this.badgeClassNameMap['thy-badge-sup'] = this.st.isSup;\n        this.explorationValueLength();\n\n        const _badgeClassNames = [];\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (this.badgeClassNameMap[key]) {\n                    _badgeClassNames.push(key);\n                }\n            }\n        }\n        this.badgeClassName = _badgeClassNames.join(' ');\n    }\n\n    private combineBadgeDisplayContent() {\n        this.displayContent = this.st.value;\n        if (this.st.value && this.st.max.is && this.st.value > this.st.max.value) {\n            this.displayContent = `${this.st.max.value}+`;\n        }\n\n        if (!this.st.value && !this.st.isValueKeepShow) {\n            this.st.isShowBadge = false;\n        } else {\n            this.st.isShowBadge = true;\n        }\n    }\n\n    private explorationValueLength() {\n        if (this.st.value && this.st.value.toString().length > 1 && this.st.isSup) {\n            this.badgeClassNameMap['thy-badge-multiple-words'] = true;\n        }\n    }\n\n    private resetBadgeClassNameMap(mutexArray: any) {\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (mutexArray.includes(key)) {\n                    this.badgeClassNameMap[key] = false;\n                }\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyBadgeComponent } from './badge.component';\n\n@NgModule({\n    declarations: [\n        ThyBadgeComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        ThyBadgeComponent\n    ]\n})\n\nexport class ThyBadgeModule {\n        constructor() { }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
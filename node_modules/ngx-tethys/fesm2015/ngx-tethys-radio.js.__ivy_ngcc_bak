import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding, Input, Optional, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { UpdateHostClassService, ThyTranslate } from 'ngx-tethys/core';
import { ThyFormCheckBaseComponent } from 'ngx-tethys/shared';
import { coerceBooleanProperty } from 'ngx-tethys/util';

const buttonGroupSizeMap = {
    sm: ['btn-group-sm'],
    lg: ['btn-group-lg']
};
const radioGroupLayoutMap = {
    flex: ['radio-group-layout-flex']
};
class ThyRadioGroupComponent {
    constructor(updateHostClassService, elementRef, changeDetectorRef) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.thyRadioGroup = true;
        this.isButtonGroup = false;
        this.isButtonGroupOutline = false;
        this.radios = [];
        this.onChange = () => null;
        this.onTouched = () => null;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        this._size = size;
    }
    set thyLayout(layout) {
        this._layout = layout;
    }
    set thyDisabled(value) {
        this.setDisabledState(value);
    }
    addRadio(radio) {
        this.radios.push(radio);
        radio.thyChecked = radio.thyValue === this._innerValue;
    }
    updateValue(value, emit) {
        this._innerValue = value;
        this.radios.forEach(radio => {
            radio.thyChecked = radio.thyValue === this._innerValue;
        });
        if (emit) {
            this.onChange(value);
        }
        this.changeDetectorRef.detectChanges();
    }
    writeValue(value) {
        this.updateValue(value, false);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.radios.forEach(radio => {
            radio.setDisabledState(isDisabled);
        });
    }
    setGroup() {
        if (!this.isButtonGroup && !this.isButtonGroupOutline) {
            this.isButtonGroup = true;
            this.isButtonGroupOutline = true;
        }
    }
    ngOnInit() {
        this._setClasses();
    }
    _setClasses() {
        const classNames = [];
        if (buttonGroupSizeMap[this._size]) {
            classNames.push(buttonGroupSizeMap[this._size]);
        }
        if (radioGroupLayoutMap[this._layout]) {
            classNames.push(radioGroupLayoutMap[this._layout]);
        }
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyRadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-radio-group',
                template: "<ng-content></ng-content>",
                providers: [
                    UpdateHostClassService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyRadioGroupComponent),
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyRadioGroupComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
ThyRadioGroupComponent.propDecorators = {
    thyRadioGroup: [{ type: HostBinding, args: ['class.thy-radio-group',] }],
    isButtonGroup: [{ type: HostBinding, args: ['class.btn-group',] }],
    isButtonGroupOutline: [{ type: HostBinding, args: ['class.btn-group-outline-default',] }],
    thySize: [{ type: Input }],
    thyLayout: [{ type: Input }],
    thyDisabled: [{ type: Input }]
};

class ThyRadioComponent extends ThyFormCheckBaseComponent {
    constructor(thyTranslate, thyRadioGroupComponent, changeDetectorRef) {
        super(thyTranslate, changeDetectorRef);
        this.thyTranslate = thyTranslate;
        this.thyRadioGroupComponent = thyRadioGroupComponent;
    }
    set thyChecked(value) {
        this.writeValue(coerceBooleanProperty(value));
        this.changeDetectorRef.markForCheck();
    }
    ngOnInit() {
        if (this.thyRadioGroupComponent) {
            this.thyRadioGroupComponent.addRadio(this);
        }
    }
    change() {
        if (this.thyRadioGroupComponent) {
            this.thyRadioGroupComponent.updateValue(this.thyValue, true);
        }
        else {
            this.updateValue(!this._innerValue);
        }
    }
}
ThyRadioComponent.decorators = [
    { type: Component, args: [{
                selector: '[thy-radio],[thyRadio]',
                template: "<input\n  class=\"form-check-input\"\n  [checked]=\"_isChecked\"\n  (change)=\"change()\"\n  type=\"radio\"\n  [disabled]=\"_disabled\"\n  [attr.name]=\"name\"\n  [ngClass]=\"{ 'form-check-no-label-text': !_labelText }\"\n/>\n<span class=\"form-check-label\" *ngIf=\"_labelText\">{{ _labelText }}</span>\n<ng-content></ng-content>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyRadioComponent),
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyRadioComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: ThyRadioGroupComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
ThyRadioComponent.propDecorators = {
    thyValue: [{ type: Input }]
};

class ThyRadioButtonComponent extends ThyRadioComponent {
    constructor(thyTranslate, thyRadioGroupComponent, changeDetectorRef) {
        super(thyTranslate, thyRadioGroupComponent, changeDetectorRef);
        this.isButton = true;
        this.isActive = false;
    }
    set thyChecked(value) {
        this.isActive = !!value;
        this.writeValue(coerceBooleanProperty(value));
    }
    ngOnInit() {
        this._isFormCheck = false;
        if (this.thyRadioGroupComponent) {
            this.thyRadioGroupComponent.addRadio(this);
            this.thyRadioGroupComponent.setGroup();
        }
    }
    click($event) {
        this.change();
    }
}
ThyRadioButtonComponent.decorators = [
    { type: Component, args: [{
                selector: '[thy-radio-button],[thyRadioButton]',
                template: "<ng-container> {{ _labelText }}</ng-container>\n<ng-content></ng-content>\n"
            },] }
];
ThyRadioButtonComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: ThyRadioGroupComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
ThyRadioButtonComponent.propDecorators = {
    isButton: [{ type: HostBinding, args: ['class.btn',] }],
    isActive: [{ type: HostBinding, args: ['class.active',] }],
    thyValue: [{ type: Input }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};

class ThyRadioModule {
}
ThyRadioModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [
                    ThyRadioComponent,
                    ThyRadioGroupComponent,
                    ThyRadioButtonComponent
                ],
                exports: [
                    ThyRadioComponent,
                    ThyRadioGroupComponent,
                    ThyRadioButtonComponent
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyRadioButtonComponent, ThyRadioComponent, ThyRadioGroupComponent, ThyRadioModule };
//# sourceMappingURL=ngx-tethys-radio.js.map

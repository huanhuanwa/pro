import { ThyEmptyModule } from 'ngx-tethys/empty';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyInputModule } from 'ngx-tethys/input';
import { ThyLabelModule } from 'ngx-tethys/label';
import { ThyLoadingModule } from 'ngx-tethys/loading';
import { THY_OPTION_PARENT_COMPONENT, ThyOptionComponent, ThySelectOptionGroupComponent, ThySharedModule, ThySelectCommonModule, ThyOptionModule } from 'ngx-tethys/shared';
import { Overlay, ViewportRuler, ScrollDispatcher, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';
import { CommonModule } from '@angular/common';
import { InjectionToken, EventEmitter, Component, forwardRef, ChangeDetectionStrategy, NgZone, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, HostBinding, Output, Input, ContentChild, ContentChildren, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { __decorate, __metadata } from 'tslib';
import { ScrollToService, getFlexiblePositions, UpdateHostClassService, InputBoolean } from 'ngx-tethys/core';
import { coerceBooleanProperty, ENTER, isFunction, DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, SPACE, hasModifierKey, HOME, END, A, helpers, isArray } from 'ngx-tethys/util';
import { Subject, defer, merge, timer } from 'rxjs';
import { take, switchMap, map, filter, takeUntil, startWith } from 'rxjs/operators';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { SelectionModel } from '@angular/cdk/collections';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/cdk/overlay';
import * as ɵngcc3 from 'ngx-tethys/shared';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from 'ngx-tethys/loading';
import * as ɵngcc6 from 'ngx-tethys/empty';
import * as ɵngcc7 from '@angular/forms';
import * as ɵngcc8 from 'ngx-tethys/input';
import * as ɵngcc9 from 'ngx-tethys/icon';

const _c0 = ["selectedDisplay"];
const _c1 = ["trigger"];
const _c2 = ["panel"];
function ThySelectCustomComponent_ng_template_3_ng_container_1_ng_container_4_thy_empty_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-empty", 13);
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("thyMessage", ctx_r9.emptySearchMessageText);
} }
function ThySelectCustomComponent_ng_template_3_ng_container_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "thy-loading", 10);
    ɵngcc0.ɵɵelementStart(2, "div", 11);
    ɵngcc0.ɵɵtemplate(3, ThySelectCustomComponent_ng_template_3_ng_container_1_ng_container_4_thy_empty_3_Template, 1, 1, "thy-empty", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyDone", ctx_r8.thyLoadState);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.thyLoadState);
} }
function ThySelectCustomComponent_ng_template_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 7, 8);
    ɵngcc0.ɵɵlistener("thyOnScrolled", function ThySelectCustomComponent_ng_template_3_ng_container_1_Template_div_thyOnScrolled_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onOptionsScrolled($event); });
    ɵngcc0.ɵɵprojection(3);
    ɵngcc0.ɵɵtemplate(4, ThySelectCustomComponent_ng_template_3_ng_container_1_ng_container_4_Template, 4, 2, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyEnable", ctx_r3.thyEnableScrollLoad);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isHiddenOptions);
} }
function ThySelectCustomComponent_ng_template_3_ng_template_2_thy_empty_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-empty", 13);
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("thyMessage", ctx_r12.emptyStateText);
} }
function ThySelectCustomComponent_ng_template_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-loading", 10);
    ɵngcc0.ɵɵelementStart(1, "div", 11);
    ɵngcc0.ɵɵtemplate(2, ThySelectCustomComponent_ng_template_3_ng_template_2_thy_empty_2_Template, 1, 1, "thy-empty", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("thyDone", ctx_r5.thyLoadState);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.thyLoadState);
} }
function ThySelectCustomComponent_ng_template_3_div_4_1_ng_template_0_Template(rf, ctx) { }
function ThySelectCustomComponent_ng_template_3_div_4_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThySelectCustomComponent_ng_template_3_div_4_1_ng_template_0_Template, 0, 0, "ng-template", 14);
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r13.thyFooterTemplate);
} }
function ThySelectCustomComponent_ng_template_3_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, ThySelectCustomComponent_ng_template_3_div_4_1_Template, 1, 1, undefined, 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r6.thyFooterClass ? ctx_r6.thyFooterClass : "thy-custom-select-footer");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.thyFooterTemplate);
} }
function ThySelectCustomComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵlistener("mousemove", function ThySelectCustomComponent_ng_template_3_Template_div_mousemove_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.dropDownMouseMove($event); });
    ɵngcc0.ɵɵtemplate(1, ThySelectCustomComponent_ng_template_3_ng_container_1_Template, 5, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, ThySelectCustomComponent_ng_template_3_ng_template_2_Template, 3, 2, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(4, ThySelectCustomComponent_ng_template_3_div_4_Template, 2, 3, "div", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(3);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r2.dropDownClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.options.length > 0 || ctx_r2.optionGroups.length > 0)("ngIfElse", _r4);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.thyFooterTemplate);
} }
const _c3 = ["*"];
function ThySelectComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 3);
    ɵngcc0.ɵɵlistener("click", function ThySelectComponent_a_3_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.clearSelectValue($event); });
    ɵngcc0.ɵɵelement(1, "thy-icon", 4);
    ɵngcc0.ɵɵelementEnd();
} }
const THY_SELECT_SCROLL_STRATEGY = new InjectionToken('thy-select-scroll-strategy');
const THY_SELECT_SCROLL_STRATEGY_FACTORY = (overlay) => {
    return () => overlay.scrollStrategies.reposition();
};
const THY_SELECT_SCROLL_STRATEGY_PROVIDER = {
    provide: THY_SELECT_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: THY_SELECT_SCROLL_STRATEGY_FACTORY
};

const SELECT_PANEL_MAX_HEIGHT = 300;
const SELECT_OPTION_MAX_HEIGHT = 40;
const SELECT_OPTION_GROUP_MAX_HEIGHT = 30;
const SELECT_PANEL_PADDING_TOP = 10;
const noop$1 = () => { };
const ɵ0$1 = noop$1;
class ThySelectCustomComponent {
    constructor(ngZone, elementRef, updateHostClassService, viewportRuler, changeDetectorRef, scrollDispatcher, overlay, scrollStrategyFactory) {
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.viewportRuler = viewportRuler;
        this.changeDetectorRef = changeDetectorRef;
        this.scrollDispatcher = scrollDispatcher;
        this.overlay = overlay;
        this.scrollStrategyFactory = scrollStrategyFactory;
        this.disabled = false;
        this.mode = '';
        this.emptyStateText = '无任何选项';
        this.emptySearchMessageText = '没有匹配到任何选项';
        this.scrollTop = 0;
        this.modalValue = null;
        this.defaultOffset = 4;
        this.destroy$ = new Subject();
        this.onTouchedCallback = noop$1;
        this.onChangeCallback = noop$1;
        this.optionSelectionChanges = defer(() => {
            if (this.options) {
                return merge(...this.options.map(option => option.selectionChange));
            }
            return this.ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelectionChanges));
        });
        this.isSelectCustom = true;
        this.isSelect = true;
        this.panelOpen = false;
        this.tabIndex = '0';
        this.thyOnSearch = new EventEmitter();
        this.thyOnScrollToBottom = new EventEmitter();
        this.thyOnExpandStatusChange = new EventEmitter();
        this.thyLoadState = true;
        this.thyEnableScrollLoad = false;
        this.thyAllowClear = false;
        this.thyPlacement = 'bottom';
        this.thyFooterClass = 'thy-custom-select-footer';
        this.thyHasBackdrop = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
        this.buildScrollStrategy();
    }
    set thyMode(value) {
        this.mode = value;
        this.instanceSelectionModel();
        this.getPositions();
        this.setDropDownClass();
    }
    get thyMode() {
        return this.mode;
    }
    get thySize() {
        return this.size;
    }
    set thySize(value) {
        this.size = value;
    }
    set thyEmptyStateText(value) {
        this.emptyStateText = value;
    }
    set thyEmptySearchMessageText(value) {
        this.emptySearchMessageText = value;
    }
    set thyDisabled(value) {
        this.disabled = coerceBooleanProperty(value);
    }
    handleKeydown(event) {
        if (!this.disabled) {
            if (event.keyCode === ENTER) {
                event.stopPropagation();
            }
            this.panelOpen ? this.handleOpenKeydown(event) : this.handleClosedKeydown(event);
        }
    }
    onDocumentClick(event) {
        if (!this.elementRef.nativeElement.contains(event.target) && this.panelOpen) {
            this.close();
        }
    }
    get optionsChanges$() {
        let previousOptions = this.options.toArray();
        return this.options.changes.pipe(map(data => {
            return this.options.toArray();
        }), filter(data => {
            const res = previousOptions.length !== data.length || previousOptions.some((op, index) => op !== data[index]);
            previousOptions = data;
            return res;
        }));
    }
    buildScrollStrategy() {
        if (this.scrollStrategyFactory && isFunction(this.scrollStrategyFactory)) {
            this.scrollStrategy = this.scrollStrategyFactory();
        }
        else {
            this.scrollStrategy = this.overlay.scrollStrategies.reposition();
        }
    }
    writeValue(value) {
        this.modalValue = value;
        if (this.options && this.options.length > 0) {
            this.setSelectionByModelValue(this.modalValue);
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    ngOnInit() {
        this.getPositions();
        this.viewportRuler
            .change()
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            if (this.panelOpen) {
                this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();
                this.changeDetectorRef.markForCheck();
            }
        });
        if (!this.selectionModel) {
            this.instanceSelectionModel();
        }
        this.setDropDownClass();
    }
    ngAfterContentInit() {
        this.optionsChanges$.pipe(startWith(null), takeUntil(this.destroy$)).subscribe(data => {
            this.resetOptions();
            this.initializeSelection();
            this.initKeyManager();
            this.highlightCorrectOption(false);
            this.changeDetectorRef.markForCheck();
        });
        if (this.thyAutoExpand) {
            timer().subscribe(() => {
                this.changeDetectorRef.markForCheck();
                this.open();
                this.focus();
            });
        }
    }
    get isHiddenOptions() {
        return this.options.toArray().every(option => option.hidden);
    }
    onAttached() {
        this.cdkConnectedOverlay.positionChange.pipe(take(1)).subscribe(() => {
            if (this.panel) {
                if (this.keyManager.activeItem) {
                    ScrollToService.scrollToElement(this.keyManager.activeItem.element.nativeElement, this.panel.nativeElement);
                    this.changeDetectorRef.detectChanges();
                }
                else {
                    if (!this.empty) {
                        ScrollToService.scrollToElement(this.selectionModel.selected[0].element.nativeElement, this.panel.nativeElement);
                        this.changeDetectorRef.detectChanges();
                    }
                }
            }
        });
    }
    dropDownMouseMove(event) {
        if (this.keyManager.activeItem) {
            this.keyManager.setActiveItem(-1);
        }
    }
    onOptionsScrolled(elementRef) {
        const scroll = this.elementRef.nativeElement.scrollTop, height = this.elementRef.nativeElement.clientHeight, scrollHeight = this.elementRef.nativeElement.scrollHeight;
        if (scroll + height + 10 >= scrollHeight) {
            this.ngZone.run(() => {
                this.thyOnScrollToBottom.emit();
            });
        }
    }
    focus(options) {
        this.elementRef.nativeElement.focus(options);
    }
    onSearchFilter(searchText) {
        searchText = searchText.trim();
        if (this.thyServerSearch) {
            this.thyOnSearch.emit(searchText);
        }
        else {
            const options = this.options.toArray();
            options.forEach(option => {
                if (option.matchSearchText(searchText)) {
                    option.showOption();
                }
                else {
                    option.hideOption();
                }
            });
            this.highlightCorrectOption(false);
            this.updateCdkConnectedOverlayPositions();
        }
    }
    remove($event) {
        $event.$eventOrigin.stopPropagation();
        if (this.disabled) {
            return;
        }
        if (!this.options.find(option => option === $event.item)) {
            $event.item.deselect();
            // fix option unselect can not emit changes;
            this.onSelect($event.item, true);
        }
        else {
            $event.item.deselect();
        }
    }
    clearSelectValue(event) {
        if (event) {
            event.stopPropagation();
        }
        if (this.disabled) {
            return;
        }
        this.selectionModel.clear();
        this.changeDetectorRef.markForCheck();
        this.emitModelValueChange();
    }
    updateCdkConnectedOverlayPositions() {
        setTimeout(() => {
            if (this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef) {
                this.cdkConnectedOverlay.overlayRef.updatePosition();
            }
        });
    }
    get selected() {
        return this.isMultiple ? this.selectionModel.selected : this.selectionModel.selected[0];
    }
    get isMultiple() {
        return this.mode === 'multiple';
    }
    get empty() {
        return !this.selectionModel || this.selectionModel.isEmpty();
    }
    getItemCount() {
        return this.options.length + this.optionGroups.length;
    }
    toggle(event) {
        this.panelOpen ? this.close() : this.open();
    }
    open() {
        if (this.disabled || !this.options || this.panelOpen) {
            return;
        }
        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();
        this.panelOpen = true;
        this.highlightCorrectOption();
        this.thyOnExpandStatusChange.emit(this.panelOpen);
    }
    close() {
        if (this.panelOpen) {
            this.panelOpen = false;
            this.thyOnExpandStatusChange.emit(this.panelOpen);
            this.focus();
            this.changeDetectorRef.markForCheck();
        }
    }
    emitModelValueChange() {
        const selectedValues = this.selectionModel.selected;
        const changeValue = selectedValues.map((option) => {
            return option.thyValue;
        });
        if (this.isMultiple) {
            this.modalValue = changeValue;
        }
        else {
            if (changeValue.length === 0) {
                this.modalValue = null;
            }
            else {
                this.modalValue = changeValue[0];
            }
        }
        this.onChangeCallback(this.modalValue);
        this.updateCdkConnectedOverlayPositions();
    }
    highlightCorrectOption(fromOpenPanel = true) {
        if (this.keyManager && this.panelOpen) {
            if (fromOpenPanel) {
                if (this.keyManager.activeItem) {
                    return;
                }
                if (this.empty) {
                    this.keyManager.setFirstItemActive();
                }
                else {
                    this.keyManager.setActiveItem(this.selectionModel.selected[0]);
                }
            }
            else {
                // always set first option active
                this.keyManager.setFirstItemActive();
            }
        }
    }
    initKeyManager() {
        if (this.keyManager && this.keyManager.activeItem) {
            this.keyManager.activeItem.setInactiveStyles();
        }
        this.keyManager = new ActiveDescendantKeyManager(this.options)
            .withTypeAhead()
            .withWrap()
            .withVerticalOrientation()
            .withAllowedModifierKeys(['shiftKey']);
        this.keyManager.tabOut.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.focus();
            this.close();
        });
        this.keyManager.change.pipe(takeUntil(this.destroy$)).subscribe(() => {
            if (this.panelOpen && this.panel) {
                if (this.keyManager.activeItem) {
                    ScrollToService.scrollToElement(this.keyManager.activeItem.element.nativeElement, this.panel.nativeElement);
                }
            }
            else if (!this.panelOpen && !this.isMultiple && this.keyManager.activeItem) {
                this.keyManager.activeItem.selectViaInteraction();
            }
        });
    }
    handleClosedKeydown(event) {
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;
        const isOpenKey = keyCode === ENTER || keyCode === SPACE;
        const manager = this.keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((isOpenKey && !hasModifierKey(event)) || ((this.isMultiple || event.altKey) && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.open();
        }
        else if (!this.isMultiple) {
            const previouslySelectedOption = this.selected;
            if (keyCode === HOME || keyCode === END) {
                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();
                event.preventDefault();
            }
            else {
                manager.onKeydown(event);
            }
        }
    }
    handleOpenKeydown(event) {
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;
        const manager = this.keyManager;
        if (keyCode === HOME || keyCode === END) {
            event.preventDefault();
            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();
        }
        else if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.close();
        }
        else if ((keyCode === ENTER || keyCode === SPACE) && (manager.activeItem || !this.empty) && !hasModifierKey(event)) {
            event.preventDefault();
            if (!manager.activeItem) {
                if (manager.activeItemIndex === -1 && !this.empty) {
                    manager.setActiveItem(this.selectionModel.selected[0]);
                }
            }
            manager.activeItem.selectViaInteraction();
        }
        else if (this.isMultiple && keyCode === A && event.ctrlKey) {
            event.preventDefault();
            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);
            this.options.forEach(option => {
                if (!option.disabled) {
                    hasDeselectedOptions ? option.select() : option.deselect();
                }
            });
        }
        else {
            if (manager.activeItemIndex === -1 && !this.empty) {
                manager.setActiveItem(this.selectionModel.selected[0]);
            }
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (this.isMultiple &&
                isArrowKey &&
                event.shiftKey &&
                manager.activeItem &&
                manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem.selectViaInteraction();
            }
        }
    }
    getPositions() {
        this.dropDownPositions = getFlexiblePositions(this.thyPlacement, this.defaultOffset);
    }
    instanceSelectionModel() {
        if (this.selectionModel) {
            this.selectionModel.clear();
        }
        this.selectionModel = new SelectionModel(this.isMultiple);
        if (this.selectionModelSubscription) {
            this.selectionModelSubscription.unsubscribe();
            this.selectionModelSubscription = null;
        }
        this.selectionModelSubscription = this.selectionModel.changed.pipe(takeUntil(this.destroy$)).subscribe(event => {
            event.added.forEach(option => option.select());
            event.removed.forEach(option => option.deselect());
        });
    }
    resetOptions() {
        const changedOrDestroyed$ = merge(this.optionsChanges$, this.destroy$);
        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed$)).subscribe((event) => {
            this.onSelect(event.option, event.isUserInput);
            if (event.isUserInput && !this.isMultiple && this.panelOpen) {
                this.close();
                this.focus();
            }
        });
    }
    initializeSelection() {
        Promise.resolve().then(() => {
            this.setSelectionByModelValue(this.modalValue);
        });
    }
    setDropDownClass() {
        let modeClass = '';
        if (this.isMultiple) {
            modeClass = `thy-select-dropdown-${this.mode}`;
        }
        else {
            modeClass = `thy-select-dropdown-single`;
        }
        this.dropDownClass = {
            [`thy-select-dropdown`]: true,
            [modeClass]: true
        };
    }
    setSelectionByModelValue(modalValue) {
        if (helpers.isUndefinedOrNull(modalValue)) {
            if (this.selectionModel.selected.length > 0) {
                this.selectionModel.clear();
                this.changeDetectorRef.markForCheck();
            }
            return;
        }
        if (this.isMultiple) {
            if (isArray(modalValue)) {
                const selected = [...this.selectionModel.selected];
                this.selectionModel.clear();
                modalValue.forEach(itemValue => {
                    const option = this.options.find(_option => _option.thyValue === itemValue) ||
                        selected.find(_option => _option.thyValue === itemValue);
                    if (option) {
                        this.selectionModel.select(option);
                    }
                });
            }
        }
        else {
            const selectedOption = this.options.find(option => {
                return option.thyValue === modalValue;
            });
            if (selectedOption) {
                this.selectionModel.select(selectedOption);
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    onSelect(option, isUserInput) {
        const wasSelected = this.selectionModel.isSelected(option);
        if (option.thyValue == null && !this.isMultiple) {
            option.deselect();
            this.selectionModel.clear();
        }
        else {
            if (wasSelected !== option.selected) {
                option.selected ? this.selectionModel.select(option) : this.selectionModel.deselect(option);
            }
            if (isUserInput) {
                this.keyManager.setActiveItem(option);
            }
            if (this.isMultiple) {
                this.sortValues();
                if (isUserInput) {
                    this.focus();
                }
            }
        }
        if (wasSelected !== this.selectionModel.isSelected(option)) {
            this.emitModelValueChange();
        }
        this.changeDetectorRef.markForCheck();
    }
    sortValues() {
        if (this.isMultiple) {
            const options = this.options.toArray();
            if (this.thySortComparator) {
                this.selectionModel.sort((a, b) => {
                    return this.thySortComparator(a, b, options);
                });
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ThySelectCustomComponent.ɵfac = function ThySelectCustomComponent_Factory(t) { return new (t || ThySelectCustomComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(THY_SELECT_SCROLL_STRATEGY, 8)); };
ThySelectCustomComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySelectCustomComponent, selectors: [["thy-custom-select"]], contentQueries: function ThySelectCustomComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyOptionComponent, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThySelectOptionGroupComponent, false);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selectedValueDisplayRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);
    } }, viewQuery: function ThySelectCustomComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(CdkConnectedOverlay, true);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c2, true, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cdkConnectedOverlay = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);
    } }, hostVars: 7, hostBindings: function ThySelectCustomComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function ThySelectCustomComponent_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); })("click", function ThySelectCustomComponent_click_HostBindingHandler($event) { return ctx.onDocumentClick($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵclassProp("thy-select-custom", ctx.isSelectCustom)("thy-select", ctx.isSelect)("menu-is-opened", ctx.panelOpen);
    } }, inputs: { thyLoadState: "thyLoadState", thyEnableScrollLoad: "thyEnableScrollLoad", thyAllowClear: "thyAllowClear", thyPlacement: "thyPlacement", thyFooterClass: "thyFooterClass", thyHasBackdrop: "thyHasBackdrop", thyMode: "thyMode", thySize: "thySize", thyEmptyStateText: "thyEmptyStateText", thyEmptySearchMessageText: "thyEmptySearchMessageText", thyDisabled: "thyDisabled", thyShowSearch: "thyShowSearch", thyPlaceHolder: "thyPlaceHolder", thyServerSearch: "thyServerSearch", thySortComparator: "thySortComparator", thyFooterTemplate: "thyFooterTemplate", thyAutoExpand: "thyAutoExpand" }, outputs: { thyOnSearch: "thyOnSearch", thyOnScrollToBottom: "thyOnScrollToBottom", thyOnExpandStatusChange: "thyOnExpandStatusChange" }, exportAs: ["thyCustomSelect"], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: THY_OPTION_PARENT_COMPONENT,
                useExisting: ThySelectCustomComponent
            },
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThySelectCustomComponent),
                multi: true
            },
            UpdateHostClassService
        ])], ngContentSelectors: _c3, decls: 4, vars: 15, consts: [["cdk-overlay-origin", "", "thySelectControl", "", 3, "thyPanelOpened", "thySelectedOptions", "thyIsMultiple", "thyShowSearch", "thyAllowClear", "thySize", "thyPlaceholder", "customDisplayTemplate", "thyDisabled", "click", "thyOnClear", "thyOnRemove", "thyOnSearch"], ["origin", "cdkOverlayOrigin", "trigger", ""], ["cdk-connected-overlay", "", "cdkConnectedOverlayBackdropClass", "cdk-overlay-transparent-backdrop", 3, "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayWidth", "cdkConnectedOverlayScrollStrategy", "attach", "detach"], ["thyStopPropagation", "", 3, "ngClass", "mousemove"], [4, "ngIf", "ngIfElse"], ["emptyPlaceholder", ""], [3, "class", 4, "ngIf"], ["thyScroll", "", 1, "thy-select-dropdown-options", 3, "thyEnable", "thyOnScrolled"], ["panel", ""], [4, "ngIf"], ["thySize", "sm", 3, "thyDone"], [1, "thy-select-empty-content"], ["thySize", "sm", 3, "thyMessage", 4, "ngIf"], ["thySize", "sm", 3, "thyMessage"], [3, "ngTemplateOutlet"]], template: function ThySelectCustomComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("click", function ThySelectCustomComponent_Template_div_click_0_listener($event) { return ctx.toggle($event); })("thyOnClear", function ThySelectCustomComponent_Template_div_thyOnClear_0_listener($event) { return ctx.clearSelectValue($event); })("thyOnRemove", function ThySelectCustomComponent_Template_div_thyOnRemove_0_listener($event) { return ctx.remove($event); })("thyOnSearch", function ThySelectCustomComponent_Template_div_thyOnSearch_0_listener($event) { return ctx.onSearchFilter($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ThySelectCustomComponent_ng_template_3_Template, 5, 4, "ng-template", 2);
        ɵngcc0.ɵɵlistener("attach", function ThySelectCustomComponent_Template_ng_template_attach_3_listener() { return ctx.onAttached(); })("detach", function ThySelectCustomComponent_Template_ng_template_detach_3_listener() { return ctx.close(); });
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("thyPanelOpened", ctx.panelOpen)("thySelectedOptions", ctx.selected)("thyIsMultiple", ctx.isMultiple)("thyShowSearch", ctx.thyShowSearch)("thyAllowClear", ctx.thyAllowClear)("thySize", ctx.thySize)("thyPlaceholder", ctx.thyPlaceHolder)("customDisplayTemplate", ctx.selectedValueDisplayRef)("thyDisabled", ctx.disabled);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("cdkConnectedOverlayHasBackdrop", ctx.thyHasBackdrop)("cdkConnectedOverlayPositions", ctx.dropDownPositions)("cdkConnectedOverlayOrigin", _r0)("cdkConnectedOverlayOpen", ctx.panelOpen)("cdkConnectedOverlayWidth", ctx.triggerRect == null ? null : ctx.triggerRect.width)("cdkConnectedOverlayScrollStrategy", ctx.scrollStrategy);
    } }, directives: [ɵngcc2.CdkOverlayOrigin, ɵngcc3.ThySelectControlComponent, ɵngcc2.CdkConnectedOverlay, ɵngcc3.ThyStopPropagationDirective, ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc3.ThyScrollDirective, ɵngcc5.ThyLoadingComponent, ɵngcc6.ThyEmptyComponent, ɵngcc4.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
ThySelectCustomComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: UpdateHostClassService },
    { type: ViewportRuler },
    { type: ChangeDetectorRef },
    { type: ScrollDispatcher },
    { type: Overlay },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_SELECT_SCROLL_STRATEGY,] }] }
];
ThySelectCustomComponent.propDecorators = {
    cdkConnectedOverlay: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: true },] }],
    isSelectCustom: [{ type: HostBinding, args: ['class.thy-select-custom',] }],
    isSelect: [{ type: HostBinding, args: ['class.thy-select',] }],
    panelOpen: [{ type: HostBinding, args: ['class.menu-is-opened',] }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    thyOnSearch: [{ type: Output }],
    thyOnScrollToBottom: [{ type: Output }],
    thyOnExpandStatusChange: [{ type: Output }],
    thyShowSearch: [{ type: Input }],
    thyPlaceHolder: [{ type: Input }],
    thyServerSearch: [{ type: Input }],
    thyLoadState: [{ type: Input }],
    thyMode: [{ type: Input }],
    thySize: [{ type: Input }],
    thyEmptyStateText: [{ type: Input }],
    thyEmptySearchMessageText: [{ type: Input }],
    thyEnableScrollLoad: [{ type: Input }],
    thyAllowClear: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    thySortComparator: [{ type: Input }],
    thyFooterTemplate: [{ type: Input }],
    thyPlacement: [{ type: Input }],
    thyFooterClass: [{ type: Input }],
    selectedValueDisplayRef: [{ type: ContentChild, args: ['selectedDisplay',] }],
    thyAutoExpand: [{ type: Input }],
    thyHasBackdrop: [{ type: Input }],
    trigger: [{ type: ViewChild, args: ['trigger', { read: ElementRef, static: true },] }],
    panel: [{ type: ViewChild, args: ['panel', { read: ElementRef },] }],
    options: [{ type: ContentChildren, args: [ThyOptionComponent, { descendants: true },] }],
    optionGroups: [{ type: ContentChildren, args: [ThySelectOptionGroupComponent,] }],
    handleKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThySelectCustomComponent.prototype, "thyHasBackdrop", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySelectCustomComponent, [{
        type: Component,
        args: [{
                selector: 'thy-custom-select',
                template: "<div\n  cdk-overlay-origin\n  thySelectControl\n  (click)=\"toggle($event)\"\n  #origin=\"cdkOverlayOrigin\"\n  #trigger\n  [thyPanelOpened]=\"panelOpen\"\n  [thySelectedOptions]=\"selected\"\n  [thyIsMultiple]=\"isMultiple\"\n  [thyShowSearch]=\"thyShowSearch\"\n  [thyAllowClear]=\"thyAllowClear\"\n  [thySize]=\"thySize\"\n  [thyPlaceholder]=\"thyPlaceHolder\"\n  [customDisplayTemplate]=\"selectedValueDisplayRef\"\n  [thyDisabled]=\"disabled\"\n  (thyOnClear)=\"clearSelectValue($event)\"\n  (thyOnRemove)=\"remove($event)\"\n  (thyOnSearch)=\"onSearchFilter($event)\"\n></div>\n\n<ng-template\n  cdk-connected-overlay\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayHasBackdrop]=\"thyHasBackdrop\"\n  [cdkConnectedOverlayPositions]=\"dropDownPositions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"panelOpen\"\n  [cdkConnectedOverlayWidth]=\"triggerRect?.width\"\n  [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n  (attach)=\"onAttached()\"\n  (detach)=\"close()\"\n>\n  <div thyStopPropagation [ngClass]=\"dropDownClass\" (mousemove)=\"dropDownMouseMove($event)\">\n    <ng-container *ngIf=\"options.length > 0 || optionGroups.length > 0; else emptyPlaceholder\">\n      <div\n        #panel\n        class=\"thy-select-dropdown-options\"\n        thyScroll\n        (thyOnScrolled)=\"onOptionsScrolled($event)\"\n        [thyEnable]=\"thyEnableScrollLoad\"\n      >\n        <ng-content></ng-content>\n        <ng-container *ngIf=\"isHiddenOptions\">\n          <thy-loading [thyDone]=\"thyLoadState\" thySize=\"sm\"></thy-loading>\n          <div class=\"thy-select-empty-content\">\n            <thy-empty *ngIf=\"thyLoadState\" [thyMessage]=\"emptySearchMessageText\" thySize=\"sm\"></thy-empty>\n          </div>\n        </ng-container>\n      </div>\n    </ng-container>\n    <ng-template #emptyPlaceholder>\n      <thy-loading [thyDone]=\"thyLoadState\" thySize=\"sm\"></thy-loading>\n      <div class=\"thy-select-empty-content\">\n        <thy-empty *ngIf=\"thyLoadState\" [thyMessage]=\"emptyStateText\" thySize=\"sm\"></thy-empty>\n      </div>\n    </ng-template>\n    <div *ngIf=\"thyFooterTemplate\" [class]=\"thyFooterClass ? thyFooterClass : 'thy-custom-select-footer'\">\n      <ng-template *ngIf=\"thyFooterTemplate\" [ngTemplateOutlet]=\"thyFooterTemplate\"></ng-template>\n    </div>\n  </div>\n</ng-template>\n",
                exportAs: 'thyCustomSelect',
                providers: [
                    {
                        provide: THY_OPTION_PARENT_COMPONENT,
                        useExisting: ThySelectCustomComponent
                    },
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThySelectCustomComponent),
                        multi: true
                    },
                    UpdateHostClassService
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc2.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc2.Overlay }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_SELECT_SCROLL_STRATEGY]
            }] }]; }, { isSelectCustom: [{
            type: HostBinding,
            args: ['class.thy-select-custom']
        }], isSelect: [{
            type: HostBinding,
            args: ['class.thy-select']
        }], panelOpen: [{
            type: HostBinding,
            args: ['class.menu-is-opened']
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], thyOnSearch: [{
            type: Output
        }], thyOnScrollToBottom: [{
            type: Output
        }], thyOnExpandStatusChange: [{
            type: Output
        }], thyLoadState: [{
            type: Input
        }], thyEnableScrollLoad: [{
            type: Input
        }], thyAllowClear: [{
            type: Input
        }], thyPlacement: [{
            type: Input
        }], thyFooterClass: [{
            type: Input
        }], thyHasBackdrop: [{
            type: Input
        }], thyMode: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thyEmptyStateText: [{
            type: Input
        }], thyEmptySearchMessageText: [{
            type: Input
        }], thyDisabled: [{
            type: Input
        }], handleKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onDocumentClick: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }], cdkConnectedOverlay: [{
            type: ViewChild,
            args: [CdkConnectedOverlay, { static: true }]
        }], thyShowSearch: [{
            type: Input
        }], thyPlaceHolder: [{
            type: Input
        }], thyServerSearch: [{
            type: Input
        }], thySortComparator: [{
            type: Input
        }], thyFooterTemplate: [{
            type: Input
        }], selectedValueDisplayRef: [{
            type: ContentChild,
            args: ['selectedDisplay']
        }], thyAutoExpand: [{
            type: Input
        }], trigger: [{
            type: ViewChild,
            args: ['trigger', { read: ElementRef, static: true }]
        }], panel: [{
            type: ViewChild,
            args: ['panel', { read: ElementRef }]
        }], options: [{
            type: ContentChildren,
            args: [ThyOptionComponent, { descendants: true }]
        }], optionGroups: [{
            type: ContentChildren,
            args: [ThySelectOptionGroupComponent]
        }] }); })();

const noop = () => { };
const ɵ0 = noop;
class ThySelectComponent {
    constructor(elementRef, updateHostClassService) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        // The internal data model
        this._innerValue = null;
        this._disabled = false;
        this._expandOptions = false;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this._isSelect = true;
        this.thyAllowClear = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(value) {
        this._size = value;
    }
    writeValue(obj) {
        if (obj !== this._innerValue) {
            this._innerValue = obj;
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
    }
    ngModelChange() {
        this.onChangeCallback(this._innerValue);
    }
    ngOnInit() {
        const classes = this._size ? [`thy-select-${this._size}`] : [];
        this.updateHostClassService.updateClass(classes);
    }
    clearSelectValue(event) {
        event.stopPropagation();
        this._innerValue = '';
        this.onChangeCallback(this._innerValue);
    }
}
ThySelectComponent.ɵfac = function ThySelectComponent_Factory(t) { return new (t || ThySelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService)); };
ThySelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySelectComponent, selectors: [["thy-select"]], hostVars: 2, hostBindings: function ThySelectComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-select", ctx._isSelect);
    } }, inputs: { thyAllowClear: "thyAllowClear", thySize: "thySize", name: "name" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThySelectComponent),
                multi: true
            },
            UpdateHostClassService
        ])], ngContentSelectors: _c3, decls: 4, vars: 6, consts: [["thyInput", "", 3, "thySize", "disabled", "ngModel", "ngModelChange"], ["thyIconName", "angle-down"], ["class", "thy-select-remove remove-link", "href", "javascript:;", 3, "click", 4, "ngIf"], ["href", "javascript:;", 1, "thy-select-remove", "remove-link", 3, "click"], ["thyIconName", "close-circle-bold-fill", 1, "remove-link-icon"]], template: function ThySelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "select", 0);
        ɵngcc0.ɵɵlistener("ngModelChange", function ThySelectComponent_Template_select_ngModelChange_0_listener($event) { return ctx._innerValue = $event; })("ngModelChange", function ThySelectComponent_Template_select_ngModelChange_0_listener() { return ctx.ngModelChange(); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "thy-icon", 1);
        ɵngcc0.ɵɵtemplate(3, ThySelectComponent_a_3_Template, 2, 0, "a", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-select-selection-allow-clear", ctx.thyAllowClear);
        ɵngcc0.ɵɵproperty("thySize", ctx._size)("disabled", ctx._disabled)("ngModel", ctx._innerValue);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyAllowClear && ctx._innerValue);
    } }, directives: [ɵngcc7.SelectControlValueAccessor, ɵngcc8.ThyInputDirective, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc9.ThyIconComponent, ɵngcc4.NgIf], encapsulation: 2 });
ThySelectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThySelectComponent.propDecorators = {
    _isSelect: [{ type: HostBinding, args: ['class.thy-select',] }],
    thySize: [{ type: Input }],
    name: [{ type: Input }],
    thyAllowClear: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySelectComponent, [{
        type: Component,
        args: [{
                selector: 'thy-select',
                template: "<select\n  thyInput\n  [thySize]=\"_size\"\n  [disabled]=\"_disabled\"\n  [(ngModel)]=\"_innerValue\"\n  (ngModelChange)=\"ngModelChange()\"\n  [class.thy-select-selection-allow-clear]=\"thyAllowClear\"\n>\n  <ng-content></ng-content>\n</select>\n<thy-icon thyIconName=\"angle-down\"></thy-icon>\n<a\n  class=\"thy-select-remove remove-link\"\n  href=\"javascript:;\"\n  (click)=\"clearSelectValue($event)\"\n  *ngIf=\"thyAllowClear && _innerValue\"\n>\n  <thy-icon class=\"remove-link-icon\" thyIconName=\"close-circle-bold-fill\"></thy-icon>\n</a>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThySelectComponent),
                        multi: true
                    },
                    UpdateHostClassService
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.UpdateHostClassService }]; }, { _isSelect: [{
            type: HostBinding,
            args: ['class.thy-select']
        }], thyAllowClear: [{
            type: Input
        }], thySize: [{
            type: Input
        }], name: [{
            type: Input
        }] }); })();

class ThySelectModule {
}
ThySelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThySelectModule });
ThySelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThySelectModule_Factory(t) { return new (t || ThySelectModule)(); }, providers: [THY_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[
            CommonModule,
            FormsModule,
            ThyInputModule,
            ThyLabelModule,
            OverlayModule,
            ThyLoadingModule,
            ThySharedModule,
            ThyIconModule,
            ThyEmptyModule,
            ThySelectCommonModule,
            ThyOptionModule
        ], ThyOptionModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThySelectModule, { declarations: function () { return [ThySelectComponent, ThySelectCustomComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        ThyInputModule,
        ThyLabelModule,
        OverlayModule,
        ThyLoadingModule,
        ThySharedModule,
        ThyIconModule,
        ThyEmptyModule,
        ThySelectCommonModule,
        ThyOptionModule]; }, exports: function () { return [ThySelectComponent, ThySelectCustomComponent, ThyOptionModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySelectModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ThyInputModule,
                    ThyLabelModule,
                    OverlayModule,
                    ThyLoadingModule,
                    ThySharedModule,
                    ThyIconModule,
                    ThyEmptyModule,
                    ThySelectCommonModule,
                    ThyOptionModule
                ],
                declarations: [ThySelectComponent, ThySelectCustomComponent],
                exports: [ThySelectComponent, ThySelectCustomComponent, ThyOptionModule],
                providers: [THY_SELECT_SCROLL_STRATEGY_PROVIDER]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { THY_SELECT_SCROLL_STRATEGY, THY_SELECT_SCROLL_STRATEGY_FACTORY, THY_SELECT_SCROLL_STRATEGY_PROVIDER, ThySelectComponent, ThySelectCustomComponent, ThySelectModule };

//# sourceMappingURL=ngx-tethys-select.js.map
import { EventEmitter, Directive, Inject, ElementRef, ViewContainerRef, Output, Input, HostListener, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { coerceElement } from '@angular/cdk/coercion';
import { TooltipService } from 'ngx-tethys/tooltip';
import { ThyNotifyService } from 'ngx-tethys/notify';

class ThyCopyDirective {
    constructor(document, tooltipService, elementRef, viewContainerRef, notifyService) {
        this.document = document;
        this.tooltipService = tooltipService;
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.notifyService = notifyService;
        // 默认为点击标签，可传复制目标标签
        this.thyCopy = new EventEmitter();
        this.thyCopySuccessText = '复制成功';
        this.thyCopyTips = '点击复制';
    }
    ngOnInit() {
        this.tooltipService.attach(this.elementRef, this.viewContainerRef, 'hover');
        this.tooltipService.thyTooltipDirective.content = this.thyCopyTips ? this.thyCopyTips : '点击复制';
    }
    getContent(event) {
        if (typeof this.thyCopyContent === 'string') {
            return this.thyCopyContent;
        }
        else {
            const target = this.thyCopyContent ? coerceElement(this.thyCopyContent) : event.target;
            return target.value || target.textContent;
        }
    }
    onClick(event) {
        const textarea = this.document.createElement('textarea');
        this.document.body.appendChild(textarea);
        textarea.value = this.getContent(event);
        textarea.select();
        try {
            document.execCommand('copy', false, null);
            this.thyCopy.emit({ isSuccess: true, event });
            this.notifyService.success(this.thyCopySuccessText);
        }
        catch (err) {
            this.thyCopy.emit({ isSuccess: false, event });
            this.notifyService.error('复制失败');
        }
        finally {
            textarea.remove();
        }
    }
    ngOnDestroy() {
        this.tooltipService.detach();
    }
}
ThyCopyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyCopy]',
                providers: [TooltipService, ThyNotifyService]
            },] }
];
ThyCopyDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: TooltipService },
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: ThyNotifyService }
];
ThyCopyDirective.propDecorators = {
    thyCopy: [{ type: Output }],
    thyCopySuccessText: [{ type: Input }],
    thyCopyTips: [{ type: Input }],
    thyCopyContent: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

class ThyCopyModule {
}
ThyCopyModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyCopyDirective],
                imports: [CommonModule],
                exports: [ThyCopyDirective]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyCopyDirective, ThyCopyModule };
//# sourceMappingURL=ngx-tethys-copy.js.map

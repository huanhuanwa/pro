import { ThyButtonModule } from 'ngx-tethys/button';
import { ThyFlexibleTextModule } from 'ngx-tethys/flexible-text';
import { ThyIconModule } from 'ngx-tethys/icon';
import { CommonModule } from '@angular/common';
import { Component, HostBinding, EventEmitter, ElementRef, Output, ContentChild, ViewChild, Input, HostListener, NgModule } from '@angular/core';
import { UpdateHostClassService, ThyTranslate } from 'ngx-tethys/core';
import { coerceBooleanProperty, htmlElementIsEmpty } from 'ngx-tethys/util';

class ThyPropertyOperationGroupComponent {
    constructor() {
        this._isPropertyOperationGroup = true;
    }
}
ThyPropertyOperationGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-property-operation-group',
                template: "<ng-content></ng-content>\n"
            },] }
];
ThyPropertyOperationGroupComponent.ctorParameters = () => [];
ThyPropertyOperationGroupComponent.propDecorators = {
    _isPropertyOperationGroup: [{ type: HostBinding, args: ['class.thy-property-operation-group',] }]
};

class ThyPropertyOperationComponent {
    constructor(thyTranslate, updateHostClassService, elementRef) {
        this.thyTranslate = thyTranslate;
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.initialized = false;
        this.onlyHasTips = false;
        this.showClose = false;
        this.labelHideWhenHasValue = false;
        this.thyOnRemove = new EventEmitter();
        this.thyClick = new EventEmitter();
        this._isPropertyOperation = true;
    }
    set thyLabelText(value) {
        this.labelText = value;
    }
    set thyValue(value) {
        this.value = value;
        this.setOnlyHasTips();
    }
    set thyLabelTextTranslateKey(value) {
        this.labelText = this.thyTranslate.instant(value);
    }
    set thyIcon(value) {
        this.icon = value;
    }
    set thyShowClose(value) {
        this.showClose = coerceBooleanProperty(value);
    }
    // 支持有值时，label不显示
    set thyLabelHasValue(value) {
        this.labelHideWhenHasValue = !coerceBooleanProperty(value);
    }
    set thyLabelHideWhenHasValue(value) {
        this.labelHideWhenHasValue = coerceBooleanProperty(value);
    }
    set thyType(value) {
        this.type = value;
        this.setHostClass();
    }
    setHostClass(first = false) {
        if (!this.initialized && !first) {
            return;
        }
        this.updateHostClassService.updateClass(this.type ? [`thy-property-operation-${this.type}`] : []);
    }
    setOnlyHasTips(first = false) {
        if (!this.initialized && !first) {
            return;
        }
        if (this.value) {
            this.onlyHasTips = false;
        }
        else if (htmlElementIsEmpty(this.contentElement.nativeElement)) {
            this.onlyHasTips = true;
        }
        else {
            this.onlyHasTips = false;
        }
    }
    ngOnInit() {
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this.setHostClass(true);
    }
    onclick(event) {
        if (!this.disabled) {
            this.thyClick.emit(event);
        }
    }
    ngAfterContentInit() {
        this.setOnlyHasTips(true);
        this.initialized = true;
    }
    remove($event) {
        $event.stopPropagation();
        this.thyOnRemove.emit($event);
    }
}
ThyPropertyOperationComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-property-operation',
                template: "<div class=\"thy-operation-icon\">\n  <ng-container *ngTemplateOutlet=\"operationIcon\"></ng-container>\n  <button\n    *ngIf=\"icon\"\n    [ngClass]=\"{ disabled: disabled }\"\n    [thyButtonIcon]=\"icon\"\n    [thyShape]=\"onlyHasTips ? 'circle-thick-dashed' : 'circle-thick-solid'\"\n  ></button>\n</div>\n<div class=\"thy-operation-content\" [ngClass]=\"{ 'only-has-tips': onlyHasTips }\">\n  <div #contentElement>\n    <ng-content></ng-content>\n  </div>\n  <ng-container *ngIf=\"value\">\n    <span thyFlexibleText [thyTooltipContent]=\"value\">{{ value }}</span>\n  </ng-container>\n\n  <div class=\"thy-tips\" *ngIf=\"!value || (!labelHideWhenHasValue && value)\">{{ labelText }}</div>\n</div>\n<span *ngIf=\"showClose && !disabled\" (click)=\"remove($event)\" class=\"close-link close-link-danger\">\n  <thy-icon thyIconName=\"close\" class=\" close-link-sm\"></thy-icon>\n</span>\n",
                providers: [UpdateHostClassService]
            },] }
];
ThyPropertyOperationComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyPropertyOperationComponent.propDecorators = {
    thyOnRemove: [{ type: Output }],
    thyClick: [{ type: Output }],
    _isPropertyOperation: [{ type: HostBinding, args: ['class.thy-property-operation',] }],
    operationIcon: [{ type: ContentChild, args: ['operationIcon',] }],
    contentElement: [{ type: ViewChild, args: ['contentElement', { static: true },] }],
    thyLabelText: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyLabelTextTranslateKey: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thyShowClose: [{ type: Input }],
    thyLabelHasValue: [{ type: Input }],
    thyLabelHideWhenHasValue: [{ type: Input }],
    thyType: [{ type: Input }],
    active: [{ type: HostBinding, args: ['class.active',] }, { type: Input, args: ['thyActive',] }],
    disabled: [{ type: HostBinding, args: ['class.thy-property-operation-disabled',] }, { type: Input, args: ['thyDisabled',] }],
    onclick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

class ThyPropertyOperationModule {
}
ThyPropertyOperationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent],
                imports: [CommonModule, ThyButtonModule, ThyIconModule, ThyFlexibleTextModule],
                exports: [ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent, ThyPropertyOperationModule };
//# sourceMappingURL=ngx-tethys-property-operation.js.map

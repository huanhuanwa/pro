import { EventEmitter, Component, ElementRef, Renderer2, HostBinding, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { coerceBooleanProperty, helpers } from 'ngx-tethys/util';
import { ThyIconModule } from 'ngx-tethys/icon';

const labelTypeClassesMap = {
    default: ['thy-label', 'thy-label-default'],
    primary: ['thy-label', 'thy-label-primary'],
    success: ['thy-label', 'thy-label-success'],
    info: ['thy-label', 'thy-label-info'],
    warning: ['thy-label', 'thy-label-warning'],
    danger: ['thy-label', 'thy-label-danger']
};
class ThyLabelComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._thyHasHover = false;
        this._classNameSM = false;
        this._classNameDM = false;
        this._classNameLG = false;
        this._typeClassNames = [];
        this._backgroundOpacity = 0.1;
        this.thyOnRemove = new EventEmitter();
        this.nativeElement = this.el.nativeElement;
    }
    set thySize(value) {
        this._classNameSM = value === 'sm';
        this._classNameDM = value === 'md';
        this._classNameLG = value === 'lg';
    }
    set thyHasHover(value) {
        this._thyHasHover = coerceBooleanProperty(value);
    }
    set thyLabel(value) {
        this._type = value;
        this._setClassesByType();
    }
    set thyLabelColor(color) {
        this._color = color;
        this._setLabelCustomColor();
    }
    set thyBackgroundOpacity(opacity) {
        if (opacity && opacity > 0 && this._backgroundOpacity !== opacity) {
            this._backgroundOpacity = opacity;
            this._setLabelCustomColor();
        }
    }
    set thyLabelType(labelType) {
        this._labelType = labelType;
        this._setClassesByType();
    }
    set thyBeforeIcon(icon) {
        this._icon = icon;
        if (this._icon) {
            if (this._icon.includes('wtf')) {
                const iconPrefix = this.thyIconPrefix || 'wtf';
                this.beforeIconClass = [iconPrefix, `${this._icon}`];
            }
            else {
                this.beforeIconName = `${this._icon}`;
            }
        }
        else {
            this.beforeIconClass = null;
            this.beforeIconName = null;
        }
    }
    set thyAfterIcon(icon) {
        this._icon = icon;
        if (this._icon) {
            if (this._icon.includes('wtf')) {
                const iconPrefix = this.thyIconPrefix || 'wtf';
                this.afterIconClass = [iconPrefix, `${this._icon}`];
            }
            else {
                this.afterIconName = `${this._icon}`;
            }
        }
        else {
            this.afterIconClass = null;
            this.afterIconName = null;
        }
    }
    _setClassesByType() {
        let classNames = null;
        if (labelTypeClassesMap[this._type]) {
            classNames = labelTypeClassesMap[this._type];
        }
        else {
            classNames = ['thy-label'];
            classNames.push(`thy-label-${this._type}`);
        }
        if (this._labelType) {
            classNames = [...classNames, `thy-label-${this._labelType}`];
        }
        // remove old classes
        this._typeClassNames.forEach(className => {
            this._removeClass(className);
        });
        // add new classes
        this._typeClassNames = classNames;
        this._typeClassNames.forEach(className => {
            this._addClass(className);
        });
    }
    _setLabelCustomColor() {
        if (this._color) {
            if (this._type.indexOf('emboss') > -1) {
                if (this._type === 'emboss-status') {
                    this.el.nativeElement.style.color = '#333';
                }
                else {
                    this.el.nativeElement.style.color = this._color;
                }
                this.el.nativeElement.style.backgroundColor = helpers.hexToRgb(this._color, this._backgroundOpacity);
            }
            else if (this._type.indexOf('outline') > -1) {
                this.el.nativeElement.style.color = this._color;
                this.el.nativeElement.style.borderColor = this._color;
            }
            else {
                this.el.nativeElement.style.backgroundColor = this._color;
            }
        }
    }
    _addClass(className) {
        this.renderer.addClass(this.nativeElement, className);
    }
    _removeClass(className) {
        this.renderer.removeClass(this.nativeElement, className);
    }
    remove() {
        this.thyOnRemove.emit();
    }
}
ThyLabelComponent.decorators = [
    { type: Component, args: [{
                selector: '[thyLabel]',
                template: "<thy-icon class=\"mr-1\" [thyIconName]=\"beforeIconName\" [ngStyle]=\"{ color: _color }\" *ngIf=\"beforeIconName\"></thy-icon>\n<i class=\"mr-1\" [ngClass]=\"beforeIconClass\" [ngStyle]=\"{ color: _color }\" *ngIf=\"beforeIconClass\"></i>\n<ng-content></ng-content>\n<ng-content></ng-content>\n<thy-icon\n  class=\"ml-1\"\n  [thyIconName]=\"afterIconName\"\n  (click)=\"remove()\"\n  [ngStyle]=\"{ color: _color }\"\n  *ngIf=\"afterIconName\"\n></thy-icon>\n<i class=\"ml-1\" [ngClass]=\"afterIconClass\" *ngIf=\"afterIconClass\" (click)=\"remove()\"></i>\n"
            },] }
];
ThyLabelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ThyLabelComponent.propDecorators = {
    _thyHasHover: [{ type: HostBinding, args: ['class.label-has-hover',] }],
    _classNameSM: [{ type: HostBinding, args: ['class.thy-label--sm',] }],
    _classNameDM: [{ type: HostBinding, args: ['class.thy-label--md',] }],
    _classNameLG: [{ type: HostBinding, args: ['class.thy-label--lg',] }],
    thyIconPrefix: [{ type: Input }],
    thySize: [{ type: Input, args: ['thySize',] }],
    thyOnRemove: [{ type: Output }],
    thyHasHover: [{ type: Input, args: ['thyHasHover',] }],
    thyLabel: [{ type: Input }],
    thyLabelColor: [{ type: Input }],
    thyBackgroundOpacity: [{ type: Input }],
    thyLabelType: [{ type: Input }],
    thyBeforeIcon: [{ type: Input }],
    thyAfterIcon: [{ type: Input }]
};

class ThyLabelModule {
}
ThyLabelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyLabelComponent],
                imports: [CommonModule, ThyIconModule],
                exports: [ThyLabelComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyLabelComponent, ThyLabelModule };
//# sourceMappingURL=ngx-tethys-label.js.map

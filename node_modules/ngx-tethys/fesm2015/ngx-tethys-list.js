import { Component, Input, HostBinding, EventEmitter, forwardRef, ChangeDetectionStrategy, Renderer2, ElementRef, NgZone, ContentChildren, Output, ContentChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { __decorate, __metadata } from 'tslib';
import { InputBoolean, ScrollToService, UpdateHostClassService } from 'ngx-tethys/core';
import { THY_LIST_OPTION_PARENT_COMPONENT, ThyListOptionComponent, ThyOptionModule } from 'ngx-tethys/shared';
import { coerceBooleanProperty, dom, helpers, keycodes } from 'ngx-tethys/util';
import { Subscription } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { SelectionModel } from '@angular/cdk/collections';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThyAvatarModule } from 'ngx-tethys/avatar';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/avatar';

const _c0 = ["*"];
const _c1 = ["metaAvatar"];
const _c2 = ["metaTitle"];
const _c3 = ["metaDescription"];
function ThyListItemMetaComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "thy-avatar", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thySrc", ctx_r0.thyAvatar);
} }
function ThyListItemMetaComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.thyTitle);
} }
function ThyListItemMetaComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.thyDescription);
} }
class ThyListComponent {
    constructor() {
        this._isDivided = false;
        this._isList = true;
    }
    set thyDivided(value) {
        this._isDivided = value;
    }
}
ThyListComponent.ɵfac = function ThyListComponent_Factory(t) { return new (t || ThyListComponent)(); };
ThyListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyListComponent, selectors: [["thy-list"]], hostVars: 4, hostBindings: function ThyListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-list-divided", ctx._isDivided)("thy-list", ctx._isList);
    } }, inputs: { thyDivided: "thyDivided" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyListComponent.ctorParameters = () => [];
ThyListComponent.propDecorators = {
    thyDivided: [{ type: Input }],
    _isDivided: [{ type: HostBinding, args: [`class.thy-list-divided`,] }],
    _isList: [{ type: HostBinding, args: [`class.thy-list`,] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], ThyListComponent.prototype, "thyDivided", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyListComponent, [{
        type: Component,
        args: [{
                selector: 'thy-list',
                template: '<ng-content></ng-content>'
            }]
    }], function () { return []; }, { _isDivided: [{
            type: HostBinding,
            args: [`class.thy-list-divided`]
        }], _isList: [{
            type: HostBinding,
            args: [`class.thy-list`]
        }], thyDivided: [{
            type: Input
        }] }); })();

class ThyListItemComponent {
    constructor() {
        this._isListItem = true;
    }
}
ThyListItemComponent.ɵfac = function ThyListItemComponent_Factory(t) { return new (t || ThyListItemComponent)(); };
ThyListItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyListItemComponent, selectors: [["thy-list-item"], ["", "thy-list-item", ""]], hostVars: 2, hostBindings: function ThyListItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-list-item", ctx._isListItem);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyListItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyListItemComponent.ctorParameters = () => [];
ThyListItemComponent.propDecorators = {
    _isListItem: [{ type: HostBinding, args: [`class.thy-list-item`,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyListItemComponent, [{
        type: Component,
        args: [{
                selector: 'thy-list-item,[thy-list-item]',
                template: '<ng-content></ng-content>'
            }]
    }], function () { return []; }, { _isListItem: [{
            type: HostBinding,
            args: [`class.thy-list-item`]
        }] }); })();

const listSizesMap = {
    sm: 'thy-list-sm'
};
class ThySelectionListComponent {
    constructor(renderer, elementRef, ngZone, updateHostClassService) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.updateHostClassService = updateHostClassService;
        this._selectionChangesUnsubscribe$ = Subscription.EMPTY;
        this.layout = 'list';
        this._isList = true;
        this._isSelectionList = true;
        this.multiple = true;
        this.isLayoutGrid = false;
        this.spaceEnabled = true;
        /** Emits a change event whenever the selected state of an option changes. */
        this.thySelectionChange = new EventEmitter();
        this._onTouched = () => { };
        this._onChange = (_) => { };
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thyMultiple(value) {
        const previousValue = this.multiple;
        this.multiple = coerceBooleanProperty(value);
        if (previousValue !== this.multiple) {
            this._instanceSelectionModel();
        }
    }
    set thyLayout(value) {
        this.layout = value;
        this.isLayoutGrid = value === 'grid';
    }
    set thyAutoActiveFirstItem(value) {
        this.autoActiveFirstItem = coerceBooleanProperty(value);
    }
    set thySize(value) {
        this._setListSize(value);
    }
    /** Whether keydown space toggle focused option */
    set thySpaceKeyEnabled(value) {
        this.spaceEnabled = coerceBooleanProperty(value);
    }
    _emitChangeEvent(option, event) {
        this.thySelectionChange.emit({
            source: this,
            value: option.thyValue,
            option: option,
            event: event,
            selected: this.isSelected(option)
        });
    }
    _emitModelValueChange() {
        if (this.options) {
            let selectedValues = this.selectionModel.selected;
            if (this.thyUniqueKey) {
                selectedValues = selectedValues.map(selectedValue => {
                    const selectedOption = this.options.find(option => {
                        return option.thyValue[this.thyUniqueKey] === selectedValue;
                    });
                    if (selectedOption) {
                        return selectedOption.thyValue;
                    }
                    else {
                        return this._modelValues.find(value => {
                            return value[this.thyUniqueKey] === selectedValue;
                        });
                    }
                });
            }
            this._modelValues = selectedValues;
            let changeValue = selectedValues;
            if (!this.multiple && selectedValues && selectedValues.length > 0) {
                changeValue = selectedValues[0];
            }
            this._onChange(changeValue);
        }
    }
    _toggleFocusedOption(event) {
        if (this._keyManager.activeItem) {
            this.ngZone.run(() => {
                this.toggleOption(this._keyManager.activeItem, event);
            });
        }
    }
    _initializeFocusKeyManager() {
        this._keyManager = new ActiveDescendantKeyManager(this.options)
            .withWrap()
            // .withTypeAhead()
            // Allow disabled items to be focusable. For accessibility reasons, there must be a way for
            // screenreader users, that allows reading the different options of the list.
            .skipPredicate(() => false);
    }
    _instanceSelectionModel() {
        this.selectionModel = new SelectionModel(this.multiple);
    }
    _getElementBySelector(element) {
        return dom.getHTMLElementBySelector(element, this.elementRef);
    }
    _compareValue(value1, value2) {
        if (this.thyCompareWith) {
            const compareFn = this.thyCompareWith;
            return compareFn(value1, value2);
        }
        else if (this.thyUniqueKey) {
            return value1 && value1[this.thyUniqueKey] === value2 && value2[this.thyUniqueKey];
        }
        else {
            return value1 === value2;
        }
    }
    _getOptionSelectionValue(option) {
        if (option.thyValue) {
            return this.thyUniqueKey ? option.thyValue[this.thyUniqueKey] : option.thyValue;
        }
        else {
            return option;
        }
    }
    _setSelectionByValues(values) {
        this.selectionModel.clear();
        values.forEach(value => {
            if (this.thyUniqueKey) {
                this.selectionModel.select(value[this.thyUniqueKey]);
            }
            else {
                this.selectionModel.select(value);
            }
        });
    }
    _setAllOptionsSelected(toIsSelected) {
        // Keep track of whether anything changed, because we only want to
        // emit the changed event when something actually changed.
        let hasChanged = false;
        this.options.forEach(option => {
            const fromIsSelected = this.selectionModel.isSelected(option.thyValue);
            if (fromIsSelected !== toIsSelected) {
                hasChanged = true;
                this.selectionModel.toggle(option.thyValue);
            }
        });
        if (hasChanged) {
            this._emitModelValueChange();
        }
    }
    _getOptionByValue(value) {
        return this.options.find(option => {
            return this._compareValue(option.thyValue, value);
        });
    }
    _getActiveOption() {
        if (this._keyManager.activeItem) {
            return this._getOptionByValue(this._keyManager.activeItem.thyValue);
        }
        else {
            return null;
        }
    }
    _setListSize(size) {
        for (const key in listSizesMap) {
            if (listSizesMap.hasOwnProperty(key)) {
                this.updateHostClassService.removeClass(listSizesMap[key]);
            }
        }
        if (size) {
            this.updateHostClassService.addClass(listSizesMap[size]);
        }
    }
    ngOnInit() {
        const bindKeyEventElement = this._getElementBySelector(this.thyBindKeyEventContainer);
        this.ngZone.runOutsideAngular(() => {
            this._bindKeyEventUnsubscribe = this.renderer.listen(bindKeyEventElement, 'keydown', this.onKeydown.bind(this));
        });
        this._instanceSelectionModel();
    }
    writeValue(value) {
        if (value) {
            if (this.multiple && !helpers.isArray(value)) {
                throw new Error(`multiple selection ngModel must be array.`);
            }
            if (!this.multiple && helpers.isArray(value)) {
                throw new Error(`single selection ngModel not be array.`);
            }
        }
        const values = helpers.isArray(value) ? value : value ? [value] : [];
        this._modelValues = values;
        if (this.options) {
            this._setSelectionByValues(values);
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onKeydown(event) {
        if (this.thyBeforeKeydown) {
            // stop key down event
            const isContinue = this.thyBeforeKeydown(event);
            if (!isContinue) {
                return;
            }
        }
        const keyCode = event.keyCode || event.which;
        const manager = this._keyManager;
        const previousFocusIndex = manager.activeItemIndex;
        switch (keyCode) {
            case keycodes.SPACE:
            case keycodes.ENTER:
                if (keyCode === keycodes.SPACE && !this.spaceEnabled) {
                    return;
                }
                this._toggleFocusedOption(event);
                // Always prevent space from scrolling the page since the list has focus
                event.preventDefault();
                break;
            default:
                manager.onKeydown(event);
        }
        if ((keyCode === keycodes.UP_ARROW || keyCode === keycodes.DOWN_ARROW) &&
            event.shiftKey &&
            manager.activeItemIndex !== previousFocusIndex) {
            this._toggleFocusedOption(event);
        }
    }
    toggleOption(option, event) {
        if (option && !option.disabled) {
            this.selectionModel.toggle(this._getOptionSelectionValue(option));
            // Emit a change event because the focused option changed its state through user
            // interaction.
            this._emitModelValueChange();
            this._emitChangeEvent(option, event);
        }
    }
    setActiveOption(option) {
        this._keyManager.updateActiveItem(option); // .updateActiveItemIndex(this._getOptionIndex(option));
    }
    scrollIntoView(option) {
        const scrollContainerElement = dom.getHTMLElementBySelector(this.thyScrollContainer, this.elementRef);
        ScrollToService.scrollToElement(option.element.nativeElement, scrollContainerElement);
    }
    isSelected(option) {
        return this.selectionModel.isSelected(this._getOptionSelectionValue(option));
    }
    clearActiveItem() {
        if (this._keyManager.activeItem) {
            this._keyManager.setActiveItem(-1);
        }
    }
    determineClearActiveItem() {
        if (!this._getActiveOption()) {
            this.clearActiveItem();
        }
    }
    /** Selects all of the options. */
    selectAll() {
        this._setAllOptionsSelected(true);
    }
    /** Deselects all of the options. */
    deselectAll() {
        this._setAllOptionsSelected(false);
    }
    ngAfterContentInit() {
        this._initializeFocusKeyManager();
        this.options.changes.pipe(startWith(true)).subscribe(() => {
            if (this.autoActiveFirstItem) {
                if (!this._keyManager.activeItem || this.options.toArray().indexOf(this._keyManager.activeItem) < 0) {
                    this._keyManager.setFirstItemActive();
                }
            }
        });
        // if (this._tempValues) {
        //     this._setSelectionByValues(this._tempValues);
        //     this._tempValues = null;
        // }
    }
    ngOnDestroy() {
        this._selectionChangesUnsubscribe$.unsubscribe();
        if (this._bindKeyEventUnsubscribe) {
            this._bindKeyEventUnsubscribe();
        }
    }
}
ThySelectionListComponent.ɵfac = function ThySelectionListComponent_Factory(t) { return new (t || ThySelectionListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService)); };
ThySelectionListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySelectionListComponent, selectors: [["thy-selection-list"], ["", "thy-selection-list", ""]], contentQueries: function ThySelectionListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyListOptionComponent, false);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);
    } }, hostVars: 8, hostBindings: function ThySelectionListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-list", ctx._isList)("thy-selection-list", ctx._isSelectionList)("thy-multiple-selection-list", ctx.multiple)("thy-grid-list", ctx.isLayoutGrid);
    } }, inputs: { thyMultiple: "thyMultiple", thyLayout: "thyLayout", thyAutoActiveFirstItem: "thyAutoActiveFirstItem", thySize: "thySize", thySpaceKeyEnabled: "thySpaceKeyEnabled", thyBindKeyEventContainer: "thyBindKeyEventContainer", thyScrollContainer: "thyScrollContainer", thyBeforeKeydown: "thyBeforeKeydown", thyUniqueKey: "thyUniqueKey", thyCompareWith: "thyCompareWith" }, outputs: { thySelectionChange: "thySelectionChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            UpdateHostClassService,
            {
                provide: THY_LIST_OPTION_PARENT_COMPONENT,
                useExisting: ThySelectionListComponent
            },
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThySelectionListComponent),
                multi: true
            }
        ])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThySelectionListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ThySelectionListComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: UpdateHostClassService }
];
ThySelectionListComponent.propDecorators = {
    _isList: [{ type: HostBinding, args: [`class.thy-list`,] }],
    _isSelectionList: [{ type: HostBinding, args: [`class.thy-selection-list`,] }],
    multiple: [{ type: HostBinding, args: [`class.thy-multiple-selection-list`,] }],
    isLayoutGrid: [{ type: HostBinding, args: [`class.thy-grid-list`,] }],
    options: [{ type: ContentChildren, args: [ThyListOptionComponent,] }],
    thyMultiple: [{ type: Input }],
    thyBindKeyEventContainer: [{ type: Input }],
    thyScrollContainer: [{ type: Input }],
    thyBeforeKeydown: [{ type: Input }],
    thyUniqueKey: [{ type: Input }],
    thyCompareWith: [{ type: Input }],
    thyLayout: [{ type: Input }],
    thyAutoActiveFirstItem: [{ type: Input }],
    thySize: [{ type: Input }],
    thySpaceKeyEnabled: [{ type: Input }],
    thySelectionChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySelectionListComponent, [{
        type: Component,
        args: [{
                selector: 'thy-selection-list,[thy-selection-list]',
                template: '<ng-content></ng-content>',
                providers: [
                    UpdateHostClassService,
                    {
                        provide: THY_LIST_OPTION_PARENT_COMPONENT,
                        useExisting: ThySelectionListComponent
                    },
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThySelectionListComponent),
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.UpdateHostClassService }]; }, { _isList: [{
            type: HostBinding,
            args: [`class.thy-list`]
        }], _isSelectionList: [{
            type: HostBinding,
            args: [`class.thy-selection-list`]
        }], multiple: [{
            type: HostBinding,
            args: [`class.thy-multiple-selection-list`]
        }], isLayoutGrid: [{
            type: HostBinding,
            args: [`class.thy-grid-list`]
        }], thySelectionChange: [{
            type: Output
        }], thyMultiple: [{
            type: Input
        }], thyLayout: [{
            type: Input
        }], thyAutoActiveFirstItem: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thySpaceKeyEnabled: [{
            type: Input
        }], options: [{
            type: ContentChildren,
            args: [ThyListOptionComponent]
        }], thyBindKeyEventContainer: [{
            type: Input
        }], thyScrollContainer: [{
            type: Input
        }], thyBeforeKeydown: [{
            type: Input
        }], thyUniqueKey: [{
            type: Input
        }], thyCompareWith: [{
            type: Input
        }] }); })();

class ThyListItemMetaComponent {
    constructor() {
        this.className = `thy-list-item-meta`;
    }
}
ThyListItemMetaComponent.ɵfac = function ThyListItemMetaComponent_Factory(t) { return new (t || ThyListItemMetaComponent)(); };
ThyListItemMetaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyListItemMetaComponent, selectors: [["thy-list-item-meta"], ["", "thy-list-item-meta", ""]], contentQueries: function ThyListItemMetaComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatarTemplateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.titleTemplateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.descriptionTemplateRef = _t.first);
    } }, hostVars: 2, hostBindings: function ThyListItemMetaComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.className);
    } }, inputs: { thyAvatar: "thyAvatar", thyTitle: "thyTitle", thyDescription: "thyDescription" }, decls: 7, vars: 6, consts: [[1, "thy-list-item-meta-avatar"], [4, "ngIf", "ngIfElse"], [1, "thy-list-item-meta-content"], [1, "thy-list-item-meta-title"], [1, "thy-list-item-meta-description"], [3, "thySrc"]], template: function ThyListItemMetaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ThyListItemMetaComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ThyListItemMetaComponent_ng_container_4_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵtemplate(6, ThyListItemMetaComponent_ng_container_6_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyAvatar)("ngIfElse", ctx.avatarTemplateRef);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyTitle)("ngIfElse", ctx.titleTemplateRef);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyDescription)("ngIfElse", ctx.descriptionTemplateRef);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ThyAvatarComponent], encapsulation: 2, changeDetection: 0 });
ThyListItemMetaComponent.ctorParameters = () => [];
ThyListItemMetaComponent.propDecorators = {
    thyAvatar: [{ type: Input }],
    thyTitle: [{ type: Input }],
    thyDescription: [{ type: Input }],
    avatarTemplateRef: [{ type: ContentChild, args: ['metaAvatar',] }],
    titleTemplateRef: [{ type: ContentChild, args: ['metaTitle',] }],
    descriptionTemplateRef: [{ type: ContentChild, args: ['metaDescription',] }],
    className: [{ type: HostBinding, args: ['class',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyListItemMetaComponent, [{
        type: Component,
        args: [{
                selector: 'thy-list-item-meta,[thy-list-item-meta]',
                template: "<div class=\"thy-list-item-meta-avatar\">\n  <ng-container *ngIf=\"thyAvatar; else avatarTemplateRef\">\n    <thy-avatar [thySrc]=\"thyAvatar\"></thy-avatar>\n  </ng-container>\n</div>\n<div class=\"thy-list-item-meta-content\">\n  <div class=\"thy-list-item-meta-title\">\n    <ng-container *ngIf=\"thyTitle; else titleTemplateRef\">{{ thyTitle }}</ng-container>\n  </div>\n  <div class=\"thy-list-item-meta-description\">\n    <ng-container *ngIf=\"thyDescription; else descriptionTemplateRef\">{{ thyDescription }}</ng-container>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { className: [{
            type: HostBinding,
            args: ['class']
        }], thyAvatar: [{
            type: Input
        }], thyTitle: [{
            type: Input
        }], thyDescription: [{
            type: Input
        }], avatarTemplateRef: [{
            type: ContentChild,
            args: ['metaAvatar']
        }], titleTemplateRef: [{
            type: ContentChild,
            args: ['metaTitle']
        }], descriptionTemplateRef: [{
            type: ContentChild,
            args: ['metaDescription']
        }] }); })();

class ThyListModule {
}
ThyListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyListModule });
ThyListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyListModule_Factory(t) { return new (t || ThyListModule)(); }, imports: [[CommonModule, ThyOptionModule, ThyAvatarModule], ThyOptionModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyListModule, { declarations: function () { return [ThyListComponent, ThyListItemComponent, ThySelectionListComponent, ThyListItemMetaComponent]; }, imports: function () { return [CommonModule, ThyOptionModule, ThyAvatarModule]; }, exports: function () { return [ThyListComponent, ThyListItemComponent, ThySelectionListComponent, ThyListItemMetaComponent, ThyOptionModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyListModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyListComponent, ThyListItemComponent, ThySelectionListComponent, ThyListItemMetaComponent],
                imports: [CommonModule, ThyOptionModule, ThyAvatarModule],
                exports: [ThyListComponent, ThyListItemComponent, ThySelectionListComponent, ThyListItemMetaComponent, ThyOptionModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyListComponent, ThyListItemComponent, ThyListItemMetaComponent, ThyListModule, ThySelectionListComponent };

//# sourceMappingURL=ngx-tethys-list.js.map
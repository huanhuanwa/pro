import { Component, HostBinding, Input, ContentChild, Optional, Host, Renderer2, ElementRef, NgZone, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { ThyIconModule } from 'ngx-tethys/icon';

class ThyLayoutComponent {
    constructor() {
        this.thyLayoutClass = true;
        this.hasSidebar = false;
    }
}
ThyLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-layout',
                template: `
    <ng-content></ng-content>
  `
            },] }
];
ThyLayoutComponent.propDecorators = {
    thyLayoutClass: [{ type: HostBinding, args: ['class.thy-layout',] }],
    hasSidebar: [{ type: HostBinding, args: ['class.thy-layout--has-sidebar',] }]
};

class ThyHeaderComponent {
    constructor() {
        this.thyLayoutHeaderClass = true;
        this._thyHasBorder = false;
        this._thySizeSm = false;
        this.thyIconPrefix = 'wtf';
    }
    set thyHasBorder(value) {
        this._thyHasBorder = coerceBooleanProperty(value);
    }
    set thySize(value) {
        this._thySizeSm = value === 'sm';
    }
    set thyIcon(value) {
        if (value) {
            if (value.includes('wtf')) {
                this.iconClass = `${this.thyIconPrefix} ${value}`;
            }
            else {
                this.svgIconName = value;
            }
        }
        else {
            this.iconClass = null;
            this.svgIconName = null;
        }
    }
    ngOnInit() { }
}
ThyHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-header',
                preserveWhitespaces: false,
                template: "<div class=\"layout-header-title\">\n  <ng-template [ngTemplateOutlet]=\"titleTemplateRef\"></ng-template>\n  <ng-container *ngIf=\"!titleTemplateRef\">\n    <thy-icon *ngIf=\"svgIconName; else iconFont\" class=\"prefix-icon\" [thyIconName]=\"svgIconName\"></thy-icon>\n    <ng-template #iconFont>\n      <i *ngIf=\"iconClass\" class=\"prefix-icon\" [ngClass]=\"iconClass\"></i>\n    </ng-template>\n    <span class=\"title-name\">{{ thyTitle }}</span></ng-container\n  >\n</div>\n<div class=\"layout-header-content\">\n  <ng-template [ngTemplateOutlet]=\"contentTemplateRef\"></ng-template>\n</div>\n<div class=\"layout-header-operation\">\n  <ng-template [ngTemplateOutlet]=\"operationTemplateRef\"></ng-template>\n</div>\n"
            },] }
];
ThyHeaderComponent.ctorParameters = () => [];
ThyHeaderComponent.propDecorators = {
    thyLayoutHeaderClass: [{ type: HostBinding, args: ['class.thy-layout-header',] }],
    _thyHasBorder: [{ type: HostBinding, args: ['class.header-has-border',] }],
    _thySizeSm: [{ type: HostBinding, args: ['class.thy-layout-header-sm',] }],
    thyHasBorder: [{ type: Input, args: ['thyHasBorder',] }],
    thySize: [{ type: Input, args: ['thySize',] }],
    thyTitle: [{ type: Input }],
    thyIconPrefix: [{ type: Input }],
    thyIcon: [{ type: Input, args: ['thyIcon',] }],
    titleTemplateRef: [{ type: ContentChild, args: ['headerTitle',] }],
    contentTemplateRef: [{ type: ContentChild, args: ['headerContent',] }],
    operationTemplateRef: [{ type: ContentChild, args: ['headerOperation',] }]
};

class ThyContentComponent {
    constructor() {
        this._isLayoutContent = true;
    }
}
ThyContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-content',
                preserveWhitespaces: false,
                template: `
    <ng-content></ng-content>
    `
            },] }
];
ThyContentComponent.propDecorators = {
    _isLayoutContent: [{ type: HostBinding, args: ['class.thy-layout-content',] }]
};

const LG_WIDTH = 300;
class ThySidebarComponent {
    constructor(thyLayoutComponent, renderer, elementRef, ngZone) {
        this.thyLayoutComponent = thyLayoutComponent;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.thyLayoutSidebarClass = true;
        this.thyLayoutSidebarClearBorderRightClass = false;
        this.sidebarIsolated = false;
    }
    set thyWidth(value) {
        if (value === 'lg') {
            value = LG_WIDTH;
        }
        this.thyLayoutSidebarWidth = value;
        this.widthPassive = value;
    }
    set thyHasBorderRight(value) {
        this.thyLayoutSidebarClearBorderRightClass = !coerceBooleanProperty(value);
    }
    set thyIsolated(value) {
        this.sidebarIsolated = coerceBooleanProperty(value);
    }
    set thyIsDraggableWidth(value) {
        if (coerceBooleanProperty(value)) {
            this.thyLayoutSidebarPointerEvents = 'all';
        }
    }
    ngOnInit() {
        if (this.thyLayoutComponent) {
            this.thyLayoutComponent.hasSidebar = true;
        }
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                this.widthPassive = this.elementRef.nativeElement.clientWidth;
                this.renderer.setStyle(this.dragRef.nativeElement, 'left', this.numberConvertToFloor(this.widthPassive) + 'px');
            }, 0);
        });
    }
    dragStartedHandler() {
        this.dragStartedX = this.dragRef.nativeElement.getBoundingClientRect().x;
    }
    dragEndedHandler() {
        const x = this.dragRef.nativeElement.getBoundingClientRect().x;
        this.widthPassive = this.numberConvertToFloor(this.widthPassive * 1 + (x - this.dragStartedX));
        this.thyLayoutSidebarWidth = this.widthPassive;
    }
    numberConvertToFloor(value) {
        let result = Math.floor(value * 1);
        if (result < 1) {
            result = 1;
        }
        return result;
    }
}
ThySidebarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-sidebar',
                preserveWhitespaces: false,
                template: `
        <ng-content></ng-content>
        <div
            class="sidebar-drag"
            #dragRef
            cdkDrag
            cdkDragLockAxis="x"
            cdkDragBoundary=".thy-layout"
            (cdkDragStarted)="dragStartedHandler()"
            (cdkDragEnded)="dragEndedHandler()"
        ></div>
    `
            },] }
];
ThySidebarComponent.ctorParameters = () => [
    { type: ThyLayoutComponent, decorators: [{ type: Optional }, { type: Host }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone }
];
ThySidebarComponent.propDecorators = {
    thyLayoutSidebarClass: [{ type: HostBinding, args: ['class.thy-layout-sidebar',] }],
    thyLayoutSidebarClearBorderRightClass: [{ type: HostBinding, args: ['class.thy-layout-sidebar--clear-border-right',] }],
    thyLayoutSidebarWidth: [{ type: HostBinding, args: ['style.width.px',] }],
    thyLayoutSidebarPointerEvents: [{ type: HostBinding, args: ['style.pointer-events',] }],
    sidebarIsolated: [{ type: HostBinding, args: ['class.thy-layout-sidebar-isolated',] }],
    thyWidth: [{ type: Input, args: ['thyWidth',] }],
    thyHasBorderRight: [{ type: Input, args: ['thyHasBorderRight',] }],
    thyIsolated: [{ type: Input, args: ['thyIsolated',] }],
    thyIsDraggableWidth: [{ type: Input, args: ['thyIsDraggableWidth',] }],
    dragRef: [{ type: ViewChild, args: ['dragRef', { static: true },] }]
};

class ThyContentSectionComponent {
    constructor() {
        this.thyLayoutContentSectionClass = true;
    }
}
ThyContentSectionComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-content-section',
                preserveWhitespaces: false,
                template: `
    <ng-content></ng-content>
    `
            },] }
];
ThyContentSectionComponent.propDecorators = {
    thyLayoutContentSectionClass: [{ type: HostBinding, args: ['class.thy-layout-content-section',] }]
};

class ThyContentMainComponent {
    constructor() {
        this.thyLayoutContentClass = true;
    }
}
ThyContentMainComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-content-main',
                preserveWhitespaces: false,
                template: `
    <ng-content></ng-content>
    `
            },] }
];
ThyContentMainComponent.propDecorators = {
    thyLayoutContentClass: [{ type: HostBinding, args: ['class.thy-layout-content-main',] }]
};

class ThyLayoutModule {
}
ThyLayoutModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ThyLayoutComponent,
                    ThyHeaderComponent,
                    ThyContentComponent,
                    ThySidebarComponent,
                    ThyContentSectionComponent,
                    ThyContentMainComponent
                ],
                imports: [CommonModule, DragDropModule, ThyIconModule],
                exports: [
                    ThyLayoutComponent,
                    ThyHeaderComponent,
                    ThyContentComponent,
                    ThySidebarComponent,
                    ThyContentSectionComponent,
                    ThyContentMainComponent
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyContentComponent, ThyContentMainComponent, ThyContentSectionComponent, ThyHeaderComponent, ThyLayoutComponent, ThyLayoutModule, ThySidebarComponent };
//# sourceMappingURL=ngx-tethys-layout.js.map

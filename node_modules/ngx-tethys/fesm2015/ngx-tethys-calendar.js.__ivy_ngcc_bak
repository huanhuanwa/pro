import { EventEmitter, Component, ChangeDetectorRef, HostBinding, Input, Output, Directive, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, ContentChild, TemplateRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyIconModule } from 'ngx-tethys/icon';
import { getYear, getMonth, fromUnixTime } from 'date-fns';
import { getUnixTime, startOfMonth, endOfMonth, TinyDate } from 'ngx-tethys/util';
import { __decorate, __metadata } from 'tslib';
import { InputBoolean } from 'ngx-tethys/core';
import { LibPackerModule } from 'ngx-tethys/date-picker';
import { ThySelectModule } from 'ngx-tethys/select';
import { ThyRadioModule } from 'ngx-tethys/radio';
import { ThyButtonModule } from 'ngx-tethys/button';
import { ThyDateRangeModule } from 'ngx-tethys/date-range';

class ThyCalendarHeaderComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.className = true;
        // @Output() readonly modeChange: EventEmitter<'month' | 'year'> = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.monthChange = new EventEmitter();
        this.dateRangeChange = new EventEmitter();
        this.dateRanges = [
            {
                key: 'month',
                text: getYear(new Date()) + '年' + (getMonth(new Date()) + 1) + '月',
                begin: getUnixTime(startOfMonth(new Date())),
                end: getUnixTime(endOfMonth(new Date())),
                timestamp: {
                    interval: 1,
                    unit: 'month'
                }
            }
        ];
    }
    // @Input() mode: 'month' | 'year' = 'month';
    // @Input() fullscreen = true;
    set currentDate(value) {
        this.setDate(value);
    }
    ngOnInit() { }
    onChangeMonth(month) {
        const currentMonth = fromUnixTime(month.begin).getMonth();
        this.monthChange.emit(currentMonth);
    }
    onChangeYear(year) {
        const currentYear = fromUnixTime(year.begin).getFullYear();
        this.yearChange.emit(currentYear);
    }
    onChangeRange(dateRange) {
        this.isCurrentDate(this._currentDate);
        this.onChangeYear(dateRange);
        this.onChangeMonth(dateRange);
        this.dateRangeChange.emit(dateRange);
    }
    backToday() {
        this._currentDate = new TinyDate();
        this.date = Object.assign({}, this.dateRanges[0]);
        this.onChangeRange(this.date);
        this.cdr.detectChanges();
    }
    setDate(value) {
        this.isCurrentDate(value);
        if (this.isCurrent) {
            this._currentDate = value;
            const dateRange = Object.assign(Object.assign({}, this.dateRanges[0]), { key: 'exception', text: getYear(this._currentDate.nativeDate) + '年' + (getMonth(this._currentDate.nativeDate) + 1) + '月', begin: getUnixTime(startOfMonth(this._currentDate.nativeDate)), end: getUnixTime(endOfMonth(this._currentDate.nativeDate)) });
            this.date = dateRange;
        }
        else {
            this._currentDate = new TinyDate();
            this.date = Object.assign({}, this.dateRanges[0]);
        }
    }
    isCurrentDate(currentDate) {
        this.isCurrent = currentDate.getMonth() !== getMonth(new Date()) || currentDate.getYear() !== getYear(new Date());
    }
}
ThyCalendarHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-calendar-header',
                template: "<div class=\"thy-calendar-full-header-left\">\n  <thy-date-range\n    class=\"select-date-range\"\n    [ngModel]=\"date\"\n    [thyHiddenMenu]=\"true\"\n    [thyCustomKey]=\"'exception'\"\n    [thyPickerFormat]=\"'yyyy\u5E74MM\u6708'\"\n    (ngModelChange)=\"onChangeRange($event)\"\n  ></thy-date-range>\n  <button *ngIf=\"isCurrent\" thyButton=\"outline-default-square\" thySize=\"md\" (click)=\"backToday()\">\n    \u4ECA\u5929\n  </button>\n</div>\n<div class=\"thy-calendar-full-header-right\">\n  <ng-container *ngTemplateOutlet=\"$any(operationRender); context: { $implicit: operationRender }\">\n    <span>{{ operationRender | json }}</span>\n  </ng-container>\n</div>\n"
            },] }
];
ThyCalendarHeaderComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyCalendarHeaderComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-calendar-full-header-container',] }],
    currentDate: [{ type: Input }],
    operationRender: [{ type: Input }],
    yearChange: [{ type: Output }],
    monthChange: [{ type: Output }],
    dateRangeChange: [{ type: Output }]
};

class ThyDateCellDirective {
}
ThyDateCellDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyDateCell]',
                exportAs: 'thyDateCell'
            },] }
];
class ThyMonthCellDirective {
}
ThyMonthCellDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyMonthCell]',
                exportAs: 'thyMonthCell'
            },] }
];
class ThyDateFullCellDirective {
}
ThyDateFullCellDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyDateFullCell]',
                exportAs: 'thyDateFullCell'
            },] }
];
class ThyMonthFullCellDirective {
}
ThyMonthFullCellDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyMonthFullCell]',
                exportAs: 'thyMonthFullCell'
            },] }
];
class ThyCalendarHeaderOperationDirective {
}
ThyCalendarHeaderOperationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyCalendarHeaderOperation]',
                exportAs: 'thyCalendarHeaderOperation'
            },] }
];

class ThyCalendarComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.className = true;
        this.className1 = true;
        // @HostBinding('class.thy-pick-calendar-mini') className2 = !thyFullscreen;
        this.thyMode = 'month';
        this.thyModeChange = new EventEmitter();
        this.thyPanelChange = new EventEmitter();
        this.thySelectChange = new EventEmitter();
        this.thyValueChange = new EventEmitter();
        this.thyDateRangeChange = new EventEmitter();
        this.thyFullscreen = true;
        this.currentDate = new TinyDate();
        this.prefixCls = 'thy-calendar-full';
        this.onChangeFn = () => { };
        this.onTouchFn = () => { };
    }
    get dateCell() {
        return (this.thyDateCell || this.thyDateCellChild);
    }
    get headerOperation() {
        return (this.thyCalendarHeaderOperation || this.thyCalendarHeaderOperationChild);
    }
    ngOnInit() { }
    // onModeChange(mode: CalendarMode): void {
    //     this.thyModeChange.emit(mode);
    //     this.thyPanelChange.emit({ date: this.currentDate.nativeDate, mode });
    // }
    onYearSelect(year) {
        const date = this.currentDate.setYear(year);
        this.updateDate(date);
    }
    onMonthSelect(month) {
        const date = this.currentDate.setMonth(month);
        this.updateDate(date);
    }
    onDateSelect(date) {
        // Only currentDate is enough in calendar
        // this.value = date;
        this.updateDate(date);
    }
    onDateRangeSelect(date) {
        this.thyDateRangeChange.emit(date);
    }
    writeValue(value) {
        this.updateDate(new TinyDate(value), false);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchFn = fn;
    }
    updateDate(date, touched = true) {
        this.currentDate = date;
        if (touched) {
            this.onChangeFn(date.nativeDate);
            this.onTouchFn();
            this.thySelectChange.emit(date.nativeDate);
            this.thyValueChange.emit(date.nativeDate);
        }
    }
    ngOnChanges(changes) {
        if (changes.thyValue) {
            this.updateDate(new TinyDate(this.thyValue), false);
        }
    }
}
ThyCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-calendar',
                template: "<thy-calendar-header\n  [operationRender]=\"headerOperation\"\n  (monthChange)=\"onMonthSelect($event)\"\n  (yearChange)=\"onYearSelect($event)\"\n  (dateRangeChange)=\"onDateRangeSelect($event)\"\n  [currentDate]=\"currentDate\"\n></thy-calendar-header>\n\n<div class=\"thy-calendar-panel\">\n  <div class=\"thy-calendar-{{ thyMode === 'month' ? 'date' : 'month' }}-panel\">\n    <div class=\"thy-calendar-body\">\n      <ng-container *ngIf=\"thyMode === 'month'; then monthModeTable; else yearModeTable\"></ng-container>\n    </div>\n  </div>\n</div>\n<ng-template #monthModeTable>\n  <date-table\n    [prefixCls]=\"prefixCls\"\n    [value]=\"currentDate\"\n    [selectedValue]=\"currentDate\"\n    [dateCellRender]=\"dateCell\"\n    [disabledDate]=\"thyDisabledDate\"\n    (valueChange)=\"onDateSelect($event)\"\n  ></date-table>\n</ng-template>\n\n<ng-template #yearModeTable>\n  <month-table [value]=\"currentDate\" (valueChange)=\"onDateSelect($event)\"></month-table>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ThyCalendarComponent), multi: true }]
            },] }
];
ThyCalendarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyCalendarComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-calendar-container',] }],
    className1: [{ type: HostBinding, args: ['class.thy-calendar-full',] }],
    thyMode: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyDisabledDate: [{ type: Input }],
    thyModeChange: [{ type: Output }],
    thyPanelChange: [{ type: Output }],
    thySelectChange: [{ type: Output }],
    thyValueChange: [{ type: Output }],
    thyDateRangeChange: [{ type: Output }],
    thyDateCell: [{ type: Input }],
    thyDateCellChild: [{ type: ContentChild, args: [ThyDateCellDirective, { read: TemplateRef },] }],
    thyCalendarHeaderOperation: [{ type: Input }],
    thyCalendarHeaderOperationChild: [{ type: ContentChild, args: [ThyCalendarHeaderOperationDirective, { read: TemplateRef },] }],
    thyFullscreen: [{ type: Input }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThyCalendarComponent.prototype, "thyFullscreen", void 0);

class ThyCalendarModule {
}
ThyCalendarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ThySharedModule,
                    ThyIconModule,
                    LibPackerModule,
                    ThySelectModule,
                    ThyRadioModule,
                    ThyButtonModule,
                    ThyDateRangeModule
                ],
                declarations: [
                    ThyCalendarHeaderComponent,
                    ThyCalendarComponent,
                    ThyDateCellDirective,
                    ThyDateFullCellDirective,
                    ThyMonthCellDirective,
                    ThyMonthFullCellDirective,
                    ThyCalendarHeaderOperationDirective
                ],
                exports: [
                    ThyCalendarHeaderComponent,
                    ThyCalendarComponent,
                    ThyDateCellDirective,
                    ThyDateFullCellDirective,
                    ThyMonthCellDirective,
                    ThyMonthFullCellDirective,
                    ThyCalendarHeaderOperationDirective
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyCalendarComponent, ThyCalendarHeaderComponent, ThyCalendarHeaderOperationDirective, ThyCalendarModule, ThyDateCellDirective, ThyDateFullCellDirective, ThyMonthCellDirective, ThyMonthFullCellDirective };
//# sourceMappingURL=ngx-tethys-calendar.js.map

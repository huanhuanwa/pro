import { EventEmitter, Component, ChangeDetectorRef, HostBinding, Input, Output, Directive, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, ContentChild, TemplateRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyIconModule } from 'ngx-tethys/icon';
import { getYear, getMonth, fromUnixTime } from 'date-fns';
import { getUnixTime, startOfMonth, endOfMonth, TinyDate } from 'ngx-tethys/util';
import { __decorate, __metadata } from 'tslib';
import { InputBoolean } from 'ngx-tethys/core';
import { LibPackerModule } from 'ngx-tethys/date-picker';
import { ThySelectModule } from 'ngx-tethys/select';
import { ThyRadioModule } from 'ngx-tethys/radio';
import { ThyButtonModule } from 'ngx-tethys/button';
import { ThyDateRangeModule } from 'ngx-tethys/date-range';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/date-range';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from 'ngx-tethys/button';
import * as ɵngcc5 from 'ngx-tethys/date-picker';

function ThyCalendarHeaderComponent_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function ThyCalendarHeaderComponent_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.backToday(); });
    ɵngcc0.ɵɵtext(1, " \u4ECA\u5929 ");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyCalendarHeaderComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r1.operationRender));
} }
const _c0 = function (a0) { return { $implicit: a0 }; };
function ThyCalendarComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ThyCalendarComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "date-table", 6);
    ɵngcc0.ɵɵlistener("valueChange", function ThyCalendarComponent_ng_template_5_Template_date_table_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onDateSelect($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("prefixCls", ctx_r2.prefixCls)("value", ctx_r2.currentDate)("selectedValue", ctx_r2.currentDate)("dateCellRender", ctx_r2.dateCell)("disabledDate", ctx_r2.thyDisabledDate);
} }
function ThyCalendarComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "month-table", 7);
    ɵngcc0.ɵɵlistener("valueChange", function ThyCalendarComponent_ng_template_7_Template_month_table_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onDateSelect($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r4.currentDate);
} }
class ThyCalendarHeaderComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.className = true;
        // @Output() readonly modeChange: EventEmitter<'month' | 'year'> = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.monthChange = new EventEmitter();
        this.dateRangeChange = new EventEmitter();
        this.dateRanges = [
            {
                key: 'month',
                text: getYear(new Date()) + '年' + (getMonth(new Date()) + 1) + '月',
                begin: getUnixTime(startOfMonth(new Date())),
                end: getUnixTime(endOfMonth(new Date())),
                timestamp: {
                    interval: 1,
                    unit: 'month'
                }
            }
        ];
    }
    // @Input() mode: 'month' | 'year' = 'month';
    // @Input() fullscreen = true;
    set currentDate(value) {
        this.setDate(value);
    }
    ngOnInit() { }
    onChangeMonth(month) {
        const currentMonth = fromUnixTime(month.begin).getMonth();
        this.monthChange.emit(currentMonth);
    }
    onChangeYear(year) {
        const currentYear = fromUnixTime(year.begin).getFullYear();
        this.yearChange.emit(currentYear);
    }
    onChangeRange(dateRange) {
        this.isCurrentDate(this._currentDate);
        this.onChangeYear(dateRange);
        this.onChangeMonth(dateRange);
        this.dateRangeChange.emit(dateRange);
    }
    backToday() {
        this._currentDate = new TinyDate();
        this.date = Object.assign({}, this.dateRanges[0]);
        this.onChangeRange(this.date);
        this.cdr.detectChanges();
    }
    setDate(value) {
        this.isCurrentDate(value);
        if (this.isCurrent) {
            this._currentDate = value;
            const dateRange = Object.assign(Object.assign({}, this.dateRanges[0]), { key: 'exception', text: getYear(this._currentDate.nativeDate) + '年' + (getMonth(this._currentDate.nativeDate) + 1) + '月', begin: getUnixTime(startOfMonth(this._currentDate.nativeDate)), end: getUnixTime(endOfMonth(this._currentDate.nativeDate)) });
            this.date = dateRange;
        }
        else {
            this._currentDate = new TinyDate();
            this.date = Object.assign({}, this.dateRanges[0]);
        }
    }
    isCurrentDate(currentDate) {
        this.isCurrent = currentDate.getMonth() !== getMonth(new Date()) || currentDate.getYear() !== getYear(new Date());
    }
}
ThyCalendarHeaderComponent.ɵfac = function ThyCalendarHeaderComponent_Factory(t) { return new (t || ThyCalendarHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyCalendarHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyCalendarHeaderComponent, selectors: [["thy-calendar-header"]], hostVars: 2, hostBindings: function ThyCalendarHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-calendar-full-header-container", ctx.className);
    } }, inputs: { currentDate: "currentDate", operationRender: "operationRender" }, outputs: { yearChange: "yearChange", monthChange: "monthChange", dateRangeChange: "dateRangeChange" }, decls: 5, vars: 9, consts: [[1, "thy-calendar-full-header-left"], [1, "select-date-range", 3, "ngModel", "thyHiddenMenu", "thyCustomKey", "thyPickerFormat", "ngModelChange"], ["thyButton", "outline-default-square", "thySize", "md", 3, "click", 4, "ngIf"], [1, "thy-calendar-full-header-right"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["thyButton", "outline-default-square", "thySize", "md", 3, "click"]], template: function ThyCalendarHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "thy-date-range", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function ThyCalendarHeaderComponent_Template_thy_date_range_ngModelChange_1_listener($event) { return ctx.onChangeRange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, ThyCalendarHeaderComponent_button_2_Template, 2, 0, "button", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ThyCalendarHeaderComponent_ng_container_4_Template, 4, 3, "ng-container", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.date)("thyHiddenMenu", true)("thyCustomKey", "exception")("thyPickerFormat", "yyyy\u5E74MM\u6708");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isCurrent);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.operationRender)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(7, _c0, ctx.operationRender));
    } }, directives: [ɵngcc1.ThyDateRangeComponent, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.ThyButtonComponent], pipes: [ɵngcc3.JsonPipe], encapsulation: 2 });
ThyCalendarHeaderComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyCalendarHeaderComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-calendar-full-header-container',] }],
    currentDate: [{ type: Input }],
    operationRender: [{ type: Input }],
    yearChange: [{ type: Output }],
    monthChange: [{ type: Output }],
    dateRangeChange: [{ type: Output }]
};

class ThyDateCellDirective {
}
ThyDateCellDirective.ɵfac = function ThyDateCellDirective_Factory(t) { return new (t || ThyDateCellDirective)(); };
ThyDateCellDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDateCellDirective, selectors: [["", "thyDateCell", ""]], exportAs: ["thyDateCell"] });
class ThyMonthCellDirective {
}
ThyMonthCellDirective.ɵfac = function ThyMonthCellDirective_Factory(t) { return new (t || ThyMonthCellDirective)(); };
ThyMonthCellDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMonthCellDirective, selectors: [["", "thyMonthCell", ""]], exportAs: ["thyMonthCell"] });
class ThyDateFullCellDirective {
}
ThyDateFullCellDirective.ɵfac = function ThyDateFullCellDirective_Factory(t) { return new (t || ThyDateFullCellDirective)(); };
ThyDateFullCellDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDateFullCellDirective, selectors: [["", "thyDateFullCell", ""]], exportAs: ["thyDateFullCell"] });
class ThyMonthFullCellDirective {
}
ThyMonthFullCellDirective.ɵfac = function ThyMonthFullCellDirective_Factory(t) { return new (t || ThyMonthFullCellDirective)(); };
ThyMonthFullCellDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMonthFullCellDirective, selectors: [["", "thyMonthFullCell", ""]], exportAs: ["thyMonthFullCell"] });
class ThyCalendarHeaderOperationDirective {
}
ThyCalendarHeaderOperationDirective.ɵfac = function ThyCalendarHeaderOperationDirective_Factory(t) { return new (t || ThyCalendarHeaderOperationDirective)(); };
ThyCalendarHeaderOperationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyCalendarHeaderOperationDirective, selectors: [["", "thyCalendarHeaderOperation", ""]], exportAs: ["thyCalendarHeaderOperation"] });

class ThyCalendarComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.className = true;
        this.className1 = true;
        // @HostBinding('class.thy-pick-calendar-mini') className2 = !thyFullscreen;
        this.thyMode = 'month';
        this.thyModeChange = new EventEmitter();
        this.thyPanelChange = new EventEmitter();
        this.thySelectChange = new EventEmitter();
        this.thyValueChange = new EventEmitter();
        this.thyDateRangeChange = new EventEmitter();
        this.thyFullscreen = true;
        this.currentDate = new TinyDate();
        this.prefixCls = 'thy-calendar-full';
        this.onChangeFn = () => { };
        this.onTouchFn = () => { };
    }
    get dateCell() {
        return (this.thyDateCell || this.thyDateCellChild);
    }
    get headerOperation() {
        return (this.thyCalendarHeaderOperation || this.thyCalendarHeaderOperationChild);
    }
    ngOnInit() { }
    // onModeChange(mode: CalendarMode): void {
    //     this.thyModeChange.emit(mode);
    //     this.thyPanelChange.emit({ date: this.currentDate.nativeDate, mode });
    // }
    onYearSelect(year) {
        const date = this.currentDate.setYear(year);
        this.updateDate(date);
    }
    onMonthSelect(month) {
        const date = this.currentDate.setMonth(month);
        this.updateDate(date);
    }
    onDateSelect(date) {
        // Only currentDate is enough in calendar
        // this.value = date;
        this.updateDate(date);
    }
    onDateRangeSelect(date) {
        this.thyDateRangeChange.emit(date);
    }
    writeValue(value) {
        this.updateDate(new TinyDate(value), false);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchFn = fn;
    }
    updateDate(date, touched = true) {
        this.currentDate = date;
        if (touched) {
            this.onChangeFn(date.nativeDate);
            this.onTouchFn();
            this.thySelectChange.emit(date.nativeDate);
            this.thyValueChange.emit(date.nativeDate);
        }
    }
    ngOnChanges(changes) {
        if (changes.thyValue) {
            this.updateDate(new TinyDate(this.thyValue), false);
        }
    }
}
ThyCalendarComponent.ɵfac = function ThyCalendarComponent_Factory(t) { return new (t || ThyCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyCalendarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyCalendarComponent, selectors: [["thy-calendar"]], contentQueries: function ThyCalendarComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyDateCellDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyCalendarHeaderOperationDirective, true, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thyDateCellChild = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thyCalendarHeaderOperationChild = _t.first);
    } }, hostVars: 4, hostBindings: function ThyCalendarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-calendar-container", ctx.className)("thy-calendar-full", ctx.className1);
    } }, inputs: { thyMode: "thyMode", thyFullscreen: "thyFullscreen", thyValue: "thyValue", thyDisabledDate: "thyDisabledDate", thyDateCell: "thyDateCell", thyCalendarHeaderOperation: "thyCalendarHeaderOperation" }, outputs: { thyModeChange: "thyModeChange", thyPanelChange: "thyPanelChange", thySelectChange: "thySelectChange", thyValueChange: "thyValueChange", thyDateRangeChange: "thyDateRangeChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ThyCalendarComponent), multi: true }]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 9, vars: 8, consts: [[3, "operationRender", "currentDate", "monthChange", "yearChange", "dateRangeChange"], [1, "thy-calendar-panel"], [1, "thy-calendar-body"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["monthModeTable", ""], ["yearModeTable", ""], [3, "prefixCls", "value", "selectedValue", "dateCellRender", "disabledDate", "valueChange"], [3, "value", "valueChange"]], template: function ThyCalendarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "thy-calendar-header", 0);
        ɵngcc0.ɵɵlistener("monthChange", function ThyCalendarComponent_Template_thy_calendar_header_monthChange_0_listener($event) { return ctx.onMonthSelect($event); })("yearChange", function ThyCalendarComponent_Template_thy_calendar_header_yearChange_0_listener($event) { return ctx.onYearSelect($event); })("dateRangeChange", function ThyCalendarComponent_Template_thy_calendar_header_dateRangeChange_0_listener($event) { return ctx.onDateRangeSelect($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵtemplate(4, ThyCalendarComponent_ng_container_4_Template, 1, 0, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, ThyCalendarComponent_ng_template_5_Template, 1, 5, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(7, ThyCalendarComponent_ng_template_7_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(6);
        const _r3 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵproperty("operationRender", ctx.headerOperation)("currentDate", ctx.currentDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassMapInterpolate1("thy-calendar-", ctx.thyMode === "month" ? "date" : "month", "-panel");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyMode === "month")("ngIfThen", _r1)("ngIfElse", _r3);
    } }, directives: [ThyCalendarHeaderComponent, ɵngcc3.NgIf, ɵngcc5.DateTableComponent, ɵngcc5.MonthTableComponent], encapsulation: 2, changeDetection: 0 });
ThyCalendarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyCalendarComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-calendar-container',] }],
    className1: [{ type: HostBinding, args: ['class.thy-calendar-full',] }],
    thyMode: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyDisabledDate: [{ type: Input }],
    thyModeChange: [{ type: Output }],
    thyPanelChange: [{ type: Output }],
    thySelectChange: [{ type: Output }],
    thyValueChange: [{ type: Output }],
    thyDateRangeChange: [{ type: Output }],
    thyDateCell: [{ type: Input }],
    thyDateCellChild: [{ type: ContentChild, args: [ThyDateCellDirective, { read: TemplateRef },] }],
    thyCalendarHeaderOperation: [{ type: Input }],
    thyCalendarHeaderOperationChild: [{ type: ContentChild, args: [ThyCalendarHeaderOperationDirective, { read: TemplateRef },] }],
    thyFullscreen: [{ type: Input }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThyCalendarComponent.prototype, "thyFullscreen", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCalendarHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'thy-calendar-header',
                template: "<div class=\"thy-calendar-full-header-left\">\n  <thy-date-range\n    class=\"select-date-range\"\n    [ngModel]=\"date\"\n    [thyHiddenMenu]=\"true\"\n    [thyCustomKey]=\"'exception'\"\n    [thyPickerFormat]=\"'yyyy\u5E74MM\u6708'\"\n    (ngModelChange)=\"onChangeRange($event)\"\n  ></thy-date-range>\n  <button *ngIf=\"isCurrent\" thyButton=\"outline-default-square\" thySize=\"md\" (click)=\"backToday()\">\n    \u4ECA\u5929\n  </button>\n</div>\n<div class=\"thy-calendar-full-header-right\">\n  <ng-container *ngTemplateOutlet=\"$any(operationRender); context: { $implicit: operationRender }\">\n    <span>{{ operationRender | json }}</span>\n  </ng-container>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { className: [{
            type: HostBinding,
            args: ['class.thy-calendar-full-header-container']
        }], yearChange: [{
            type: Output
        }], monthChange: [{
            type: Output
        }], dateRangeChange: [{
            type: Output
        }], currentDate: [{
            type: Input
        }], operationRender: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDateCellDirective, [{
        type: Directive,
        args: [{
                selector: '[thyDateCell]',
                exportAs: 'thyDateCell'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMonthCellDirective, [{
        type: Directive,
        args: [{
                selector: '[thyMonthCell]',
                exportAs: 'thyMonthCell'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDateFullCellDirective, [{
        type: Directive,
        args: [{
                selector: '[thyDateFullCell]',
                exportAs: 'thyDateFullCell'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMonthFullCellDirective, [{
        type: Directive,
        args: [{
                selector: '[thyMonthFullCell]',
                exportAs: 'thyMonthFullCell'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCalendarHeaderOperationDirective, [{
        type: Directive,
        args: [{
                selector: '[thyCalendarHeaderOperation]',
                exportAs: 'thyCalendarHeaderOperation'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCalendarComponent, [{
        type: Component,
        args: [{
                selector: 'thy-calendar',
                template: "<thy-calendar-header\n  [operationRender]=\"headerOperation\"\n  (monthChange)=\"onMonthSelect($event)\"\n  (yearChange)=\"onYearSelect($event)\"\n  (dateRangeChange)=\"onDateRangeSelect($event)\"\n  [currentDate]=\"currentDate\"\n></thy-calendar-header>\n\n<div class=\"thy-calendar-panel\">\n  <div class=\"thy-calendar-{{ thyMode === 'month' ? 'date' : 'month' }}-panel\">\n    <div class=\"thy-calendar-body\">\n      <ng-container *ngIf=\"thyMode === 'month'; then monthModeTable; else yearModeTable\"></ng-container>\n    </div>\n  </div>\n</div>\n<ng-template #monthModeTable>\n  <date-table\n    [prefixCls]=\"prefixCls\"\n    [value]=\"currentDate\"\n    [selectedValue]=\"currentDate\"\n    [dateCellRender]=\"dateCell\"\n    [disabledDate]=\"thyDisabledDate\"\n    (valueChange)=\"onDateSelect($event)\"\n  ></date-table>\n</ng-template>\n\n<ng-template #yearModeTable>\n  <month-table [value]=\"currentDate\" (valueChange)=\"onDateSelect($event)\"></month-table>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ThyCalendarComponent), multi: true }]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { className: [{
            type: HostBinding,
            args: ['class.thy-calendar-container']
        }], className1: [{
            type: HostBinding,
            args: ['class.thy-calendar-full']
        }], thyMode: [{
            type: Input
        }], thyModeChange: [{
            type: Output
        }], thyPanelChange: [{
            type: Output
        }], thySelectChange: [{
            type: Output
        }], thyValueChange: [{
            type: Output
        }], thyDateRangeChange: [{
            type: Output
        }], thyFullscreen: [{
            type: Input
        }], thyValue: [{
            type: Input
        }], thyDisabledDate: [{
            type: Input
        }], thyDateCell: [{
            type: Input
        }], thyDateCellChild: [{
            type: ContentChild,
            args: [ThyDateCellDirective, { read: TemplateRef }]
        }], thyCalendarHeaderOperation: [{
            type: Input
        }], thyCalendarHeaderOperationChild: [{
            type: ContentChild,
            args: [ThyCalendarHeaderOperationDirective, { read: TemplateRef }]
        }] }); })();

class ThyCalendarModule {
}
ThyCalendarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyCalendarModule });
ThyCalendarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyCalendarModule_Factory(t) { return new (t || ThyCalendarModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            ThySharedModule,
            ThyIconModule,
            LibPackerModule,
            ThySelectModule,
            ThyRadioModule,
            ThyButtonModule,
            ThyDateRangeModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyCalendarModule, { declarations: function () { return [ThyCalendarHeaderComponent, ThyCalendarComponent, ThyDateCellDirective, ThyDateFullCellDirective, ThyMonthCellDirective, ThyMonthFullCellDirective, ThyCalendarHeaderOperationDirective]; }, imports: function () { return [CommonModule,
        FormsModule,
        ThySharedModule,
        ThyIconModule,
        LibPackerModule,
        ThySelectModule,
        ThyRadioModule,
        ThyButtonModule,
        ThyDateRangeModule]; }, exports: function () { return [ThyCalendarHeaderComponent, ThyCalendarComponent, ThyDateCellDirective, ThyDateFullCellDirective, ThyMonthCellDirective, ThyMonthFullCellDirective, ThyCalendarHeaderOperationDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCalendarModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ThySharedModule,
                    ThyIconModule,
                    LibPackerModule,
                    ThySelectModule,
                    ThyRadioModule,
                    ThyButtonModule,
                    ThyDateRangeModule
                ],
                declarations: [
                    ThyCalendarHeaderComponent,
                    ThyCalendarComponent,
                    ThyDateCellDirective,
                    ThyDateFullCellDirective,
                    ThyMonthCellDirective,
                    ThyMonthFullCellDirective,
                    ThyCalendarHeaderOperationDirective
                ],
                exports: [
                    ThyCalendarHeaderComponent,
                    ThyCalendarComponent,
                    ThyDateCellDirective,
                    ThyDateFullCellDirective,
                    ThyMonthCellDirective,
                    ThyMonthFullCellDirective,
                    ThyCalendarHeaderOperationDirective
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyCalendarComponent, ThyCalendarHeaderComponent, ThyCalendarHeaderOperationDirective, ThyCalendarModule, ThyDateCellDirective, ThyDateFullCellDirective, ThyMonthCellDirective, ThyMonthFullCellDirective };

//# sourceMappingURL=ngx-tethys-calendar.js.map
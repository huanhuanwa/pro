import { CommonModule } from '@angular/common';
import { InjectionToken, Component, ViewEncapsulation, ElementRef, Inject, HostBinding, Input, ChangeDetectionStrategy, ViewChildren, NgModule } from '@angular/core';
import { ThyTooltipModule } from 'ngx-tethys/tooltip';
import { UpdateHostClassService } from 'ngx-tethys/core';

const THY_PROGRESS_COMPONENT = new InjectionToken('THY_PROGRESS_COMPONENT');
class ThyProgressBarComponent {
    constructor(updateHostClassService, elementRef, progress) {
        this.updateHostClassService = updateHostClassService;
        this.progress = progress;
        this.isProgressBar = true;
        this.percent = 0;
        this.color = '';
        updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thyType(type) {
        // this.type = type;
        this.updateHostClassService.updateClass(type ? [`progress-bar-${type}`, `bg-${type}`] : []);
    }
    set thyValue(value) {
        if (!value && value !== 0) {
            return;
        }
        this.value = value;
        this.recalculatePercentage();
    }
    set thyColor(color) {
        this.color = color || '';
    }
    recalculatePercentage() {
        this.percent = +((this.value / this.progress.max) * 100).toFixed(2);
        // if (this.progress && this.progress.bars) {
        //     const totalPercentage = this.progress.bars.reduce(function(total: number, bar): number {
        //         return total + bar.percent;
        //     }, 0);
        //     if (totalPercentage > 100) {
        //         this.percent -= totalPercentage - 100;
        //     }
        // }
    }
}
ThyProgressBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-progress-bar',
                template: "<ng-content></ng-content>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [UpdateHostClassService]
            },] }
];
ThyProgressBarComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [THY_PROGRESS_COMPONENT,] }] }
];
ThyProgressBarComponent.propDecorators = {
    isProgressBar: [{ type: HostBinding, args: [`class.progress-bar`,] }],
    percent: [{ type: HostBinding, args: ['style.width.%',] }],
    color: [{ type: HostBinding, args: ['style.background-color',] }],
    thyTips: [{ type: Input }],
    thyType: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyColor: [{ type: Input }]
};

class ThyProgressComponent {
    constructor(updateHostClassService, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.bars = [];
        this.max = 100;
        this.isStacked = false;
        this.isProgress = true;
        this.updateHostClassService.initializeElement(elementRef);
    }
    set barsQueryList(value) {
        this.bars = value.toArray();
    }
    set thyValue(value) {
        this.isStacked = Array.isArray(value);
        this.value = value;
        // 自动求和计算 max
        if (this.isStacked) {
            this.thyMax = value.reduce((total, item) => {
                return total + item.value;
            }, 0);
        }
    }
    set thySize(size) {
        this.updateHostClassService.updateClass(size ? [`progress-${size}`] : []);
    }
    set thyMax(max) {
        this.max = max;
        this.bars.forEach(bar => {
            bar.recalculatePercentage();
        });
    }
}
ThyProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-progress',
                template: "<ng-container *ngIf=\"isStacked; else general\">\n  <thy-progress-bar\n    *ngFor=\"let item of value\"\n    [thyType]=\"item.type\"\n    [ngClass]=\"{ 'cursor-pointer': item.tips || thyTips }\"\n    [thyTooltip]=\"item.tips || thyTips\"\n    [thyTooltipTemplateContext]=\"item\"\n    [thyTooltipDisabled]=\"!thyTips && !item.tips\"\n    [thyColor]=\"item.color\"\n    [thyValue]=\"item.value\"\n    >{{ item.label }}\n  </thy-progress-bar>\n</ng-container>\n\n<ng-template #general>\n  <thy-progress-bar\n    *ngIf=\"value\"\n    [thyType]=\"thyType\"\n    [ngClass]=\"{ 'cursor-pointer': thyTips }\"\n    [thyTooltip]=\"thyTips\"\n    [thyTooltipTemplateContext]=\"value\"\n    [thyTooltipDisabled]=\"!thyTips\"\n    [thyValue]=\"value\"\n  >\n    <ng-content></ng-content>\n  </thy-progress-bar>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    UpdateHostClassService,
                    {
                        provide: THY_PROGRESS_COMPONENT,
                        useExisting: ThyProgressComponent
                    }
                ]
            },] }
];
ThyProgressComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyProgressComponent.propDecorators = {
    max: [{ type: HostBinding, args: ['attr.max',] }],
    isStacked: [{ type: HostBinding, args: [`class.progress-stacked`,] }],
    isProgress: [{ type: HostBinding, args: [`class.progress`,] }],
    barsQueryList: [{ type: ViewChildren, args: [ThyProgressBarComponent,] }],
    thyType: [{ type: Input }],
    thyTips: [{ type: Input }],
    thyValue: [{ type: Input }],
    thySize: [{ type: Input }],
    thyMax: [{ type: Input }]
};

class ThyProgressModule {
}
ThyProgressModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyProgressComponent, ThyProgressBarComponent],
                imports: [CommonModule, ThyTooltipModule],
                exports: [ThyProgressComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { THY_PROGRESS_COMPONENT, ThyProgressBarComponent, ThyProgressComponent, ThyProgressModule };
//# sourceMappingURL=ngx-tethys-progress.js.map

import { Directive, Input, HostListener, Component, ViewEncapsulation, HostBinding, ElementRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ThyPopover, ThyPopoverModule } from 'ngx-tethys/popover';
import { coerceBooleanProperty, camelCase } from 'ngx-tethys/util';
import { fromEvent } from 'rxjs';
import { debounceTime, shareReplay, takeUntil } from 'rxjs/operators';
import { UpdateHostClassService, mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { ThyPositioningService } from 'ngx-tethys/positioning';

var ActionEnum;
(function (ActionEnum) {
    ActionEnum["click"] = "click";
    ActionEnum["contextmenu"] = "contextmenu";
})(ActionEnum || (ActionEnum = {}));
class ThyActionMenuToggleDirective {
    constructor(thyPopover) {
        this.thyPopover = thyPopover;
        this._action = ActionEnum.click;
        this._stopPropagation = false;
        this._thyContainerClass = '';
    }
    set thyActionMenuToggle(value) {
        this._templateRef = value;
    }
    set thyPlacement(value) {
        this._placement = value;
    }
    set thyAction(value) {
        this._action = value;
    }
    set thyStopPropagation(value) {
        this._stopPropagation = coerceBooleanProperty(value);
    }
    set thyContainerClass(value) {
        this._thyContainerClass = value;
    }
    onClick(event) {
        if (this._action === ActionEnum.click) {
            this._show.bind(this)(event);
        }
    }
    onRightClick(event) {
        if (this._action === ActionEnum.contextmenu) {
            this._show.bind(this)(event);
            return false;
        }
        return true;
    }
    _show(event) {
        if (this._stopPropagation) {
            event.stopPropagation();
        }
        this.thyPopover.open(this._templateRef, {
            origin: event.currentTarget,
            insideClosable: true,
            placement: this._placement ? camelCase(this._placement.split(' ')) : 'bottomLeft',
            panelClass: this._thyContainerClass,
            originActiveClass: this.thyOriginActiveClass
        });
    }
}
ThyActionMenuToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuToggle]'
            },] }
];
ThyActionMenuToggleDirective.ctorParameters = () => [
    { type: ThyPopover }
];
ThyActionMenuToggleDirective.propDecorators = {
    thyActionMenuToggle: [{ type: Input }],
    thyPlacement: [{ type: Input }],
    thyAction: [{ type: Input }],
    thyStopPropagation: [{ type: Input }],
    thyContainerClass: [{ type: Input }],
    thyOriginActiveClass: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onRightClick: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
};

class ThyActionMenuComponent {
    constructor() {
        this.className = true;
        this.themeClassName = false;
        this.styleWidth = '';
    }
    set thyTheme(value) {
        this.themeClassName = value === 'group';
    }
    set thyWidth(value) {
        this.styleWidth = value;
    }
}
ThyActionMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-action-menu',
                template: `
        <ng-content></ng-content>
    `,
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyActionMenuComponent.ctorParameters = () => [];
ThyActionMenuComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.action-menu',] }],
    themeClassName: [{ type: HostBinding, args: ['class.action-menu--group',] }],
    styleWidth: [{ type: HostBinding, args: ['style.width',] }],
    thyTheme: [{ type: Input }],
    thyWidth: [{ type: Input }]
};
class ThyActionMenuGroupComponent {
    constructor() {
        this.isGroup = true;
    }
    set thyTitle(value) {
        this.groupTitle = value;
    }
}
ThyActionMenuGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-action-menu-group',
                template: `
        <div class="action-menu-group-title">{{ groupTitle }}</div>
        <ng-content></ng-content>
    `
            },] }
];
ThyActionMenuGroupComponent.ctorParameters = () => [];
ThyActionMenuGroupComponent.propDecorators = {
    isGroup: [{ type: HostBinding, args: ['class.action-menu-group',] }],
    thyTitle: [{ type: Input }]
};
class ThyActionMenuDividerComponent {
    constructor() {
        this.className = true;
        this.isCrossing = false;
    }
    set thyTitle(value) {
        this.title = value;
    }
    set thyType(value) {
        this.isCrossing = value === 'crossing';
    }
}
ThyActionMenuDividerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-action-menu-divider',
                template: `
        <div class="action-menu-divider-title">{{ title }}</div>
    `
            },] }
];
ThyActionMenuDividerComponent.ctorParameters = () => [];
ThyActionMenuDividerComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.action-menu-divider',] }],
    isCrossing: [{ type: HostBinding, args: ['class.action-menu-divider-crossing',] }],
    thyTitle: [{ type: Input }],
    thyType: [{ type: Input }]
};
class ThyActionMenuDividerTitleDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuDividerTitleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuDividerTitle]'
            },] }
];
ThyActionMenuDividerTitleDirective.ctorParameters = () => [];
ThyActionMenuDividerTitleDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.action-menu-divider-title',] }]
};

class ThyActionMenuItemDirective {
    constructor(elementRef, updateHostClassService) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.className = true;
        this.disabled = false;
        this.danger = false;
        this.success = false;
    }
    set thyDisabled(value) {
        this.disabled = coerceBooleanProperty(value);
    }
    set thyType(value) {
        this[value] = true;
    }
    onClick(event) {
        if (this.disabled) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    ngOnInit() {
        this.updateHostClassService.initializeElement(this.elementRef);
    }
    updateClass(classes) {
        this.updateHostClassService.updateClass(classes);
    }
    getWidth() {
        return this.elementRef.nativeElement.offsetWidth;
    }
    getElement() {
        return this.elementRef.nativeElement;
    }
    bindMouseenterEvent() {
        return fromEvent(this.elementRef.nativeElement, 'mouseenter').pipe(debounceTime(100), shareReplay());
    }
}
ThyActionMenuItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItem]',
                providers: [UpdateHostClassService]
            },] }
];
ThyActionMenuItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThyActionMenuItemDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.action-menu-item',] }],
    disabled: [{ type: HostBinding, args: ['class.action-menu-item--disabled',] }],
    danger: [{ type: HostBinding, args: ['class.action-menu-item--danger',] }],
    success: [{ type: HostBinding, args: ['class.action-menu-item--success',] }],
    thyDisabled: [{ type: Input }],
    thyType: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
class ThyActionMenuItemIconDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemIcon]'
            },] }
];
ThyActionMenuItemIconDirective.ctorParameters = () => [];
ThyActionMenuItemIconDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.icon',] }]
};
class ThyActionMenuItemNameDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemNameDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemName]'
            },] }
];
ThyActionMenuItemNameDirective.ctorParameters = () => [];
ThyActionMenuItemNameDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.name',] }]
};
class ThyActionMenuItemMetaDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemMetaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemMeta]'
            },] }
];
ThyActionMenuItemMetaDirective.ctorParameters = () => [];
ThyActionMenuItemMetaDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.meta',] }]
};
class ThyActionMenuItemInfoDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemInfoDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemInfo]'
            },] }
];
ThyActionMenuItemInfoDirective.ctorParameters = () => [];
ThyActionMenuItemInfoDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.info',] }]
};
class ThyActionMenuItemExtendIconDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemExtendIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemExtendIcon]'
            },] }
];
ThyActionMenuItemExtendIconDirective.ctorParameters = () => [];
ThyActionMenuItemExtendIconDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.extend-icon',] }]
};
class ThyActionMenuItemActiveDirective {
    constructor() {
        this._isActive = false;
    }
    set thyActionMenuItemActive(value) {
        this._isActive = coerceBooleanProperty(value);
    }
}
ThyActionMenuItemActiveDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemActive]'
            },] }
];
ThyActionMenuItemActiveDirective.ctorParameters = () => [];
ThyActionMenuItemActiveDirective.propDecorators = {
    _isActive: [{ type: HostBinding, args: ['class.active',] }],
    thyActionMenuItemActive: [{ type: Input }]
};

const _MixinBase = mixinUnsubscribe(MixinBase);
class ThyActionMenuSubItemDirective extends _MixinBase {
    constructor(actionMenuItem, positioningService) {
        super();
        this.actionMenuItem = actionMenuItem;
        this.positioningService = positioningService;
        this.className = true;
        this.thyActionMenuSubItem = 'right';
    }
    ngOnInit() {
        let direction = this.thyActionMenuSubItem || 'right';
        if (this.thyActionMenuSubItem === 'auto') {
            this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
            this.actionMenuItem
                .bindMouseenterEvent()
                .pipe(takeUntil(this.ngUnsubscribe$))
                .subscribe(() => {
                const element = this.actionMenuItem.getElement();
                const offset = this.positioningService.offset(element);
                if (document.documentElement.clientWidth < offset.left + offset.width + offset.width) {
                    direction = 'left';
                }
                else {
                    direction = 'right';
                }
                this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
            });
        }
        else {
            this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyActionMenuSubItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuSubItem]',
                providers: []
            },] }
];
ThyActionMenuSubItemDirective.ctorParameters = () => [
    { type: ThyActionMenuItemDirective },
    { type: ThyPositioningService }
];
ThyActionMenuSubItemDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.action-menu-sub-item',] }],
    thyActionMenuSubItem: [{ type: Input }]
};

class ThyActionMenuModule {
}
ThyActionMenuModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ThyActionMenuToggleDirective,
                    ThyActionMenuComponent,
                    ThyActionMenuDividerComponent,
                    ThyActionMenuItemDirective,
                    ThyActionMenuItemIconDirective,
                    ThyActionMenuItemNameDirective,
                    ThyActionMenuItemExtendIconDirective,
                    ThyActionMenuItemMetaDirective,
                    ThyActionMenuItemInfoDirective,
                    ThyActionMenuSubItemDirective,
                    ThyActionMenuDividerTitleDirective,
                    ThyActionMenuItemActiveDirective,
                    ThyActionMenuGroupComponent
                ],
                imports: [CommonModule, ThyPopoverModule],
                providers: [],
                exports: [
                    ThyActionMenuToggleDirective,
                    ThyActionMenuComponent,
                    ThyActionMenuDividerComponent,
                    ThyActionMenuItemDirective,
                    ThyActionMenuItemIconDirective,
                    ThyActionMenuItemNameDirective,
                    ThyActionMenuItemExtendIconDirective,
                    ThyActionMenuItemMetaDirective,
                    ThyActionMenuItemInfoDirective,
                    ThyActionMenuSubItemDirective,
                    ThyActionMenuDividerTitleDirective,
                    ThyActionMenuItemActiveDirective,
                    ThyActionMenuGroupComponent
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ActionEnum, ThyActionMenuComponent, ThyActionMenuDividerComponent, ThyActionMenuDividerTitleDirective, ThyActionMenuGroupComponent, ThyActionMenuItemActiveDirective, ThyActionMenuItemDirective, ThyActionMenuItemExtendIconDirective, ThyActionMenuItemIconDirective, ThyActionMenuItemInfoDirective, ThyActionMenuItemMetaDirective, ThyActionMenuItemNameDirective, ThyActionMenuModule, ThyActionMenuSubItemDirective, ThyActionMenuToggleDirective };
//# sourceMappingURL=ngx-tethys-action-menu.js.map

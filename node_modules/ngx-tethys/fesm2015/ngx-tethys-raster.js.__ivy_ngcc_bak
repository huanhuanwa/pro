import { Directive, Renderer2, ElementRef, Input, Optional, Host, NgModule } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { mixinUnsubscribe, MixinBase, UpdateHostClassService } from 'ngx-tethys/core';
import { isString } from 'ngx-tethys/util';
import { takeUntil } from 'rxjs/operators';

const _MixinBase$1 = mixinUnsubscribe(MixinBase);
class ThyRowDirective extends _MixinBase$1 {
    constructor(renderer, elementRef) {
        super();
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.thyAlign = null;
        this.thyJustify = null;
        this.actualGutter$ = new ReplaySubject(1);
    }
    ngOnInit() {
        this._setGutterStyle();
    }
    ngOnChanges() {
        this._setGutterStyle();
    }
    ngAfterViewInit() { }
    _setGutterStyle() {
        const [horizontalGutter, verticalGutter] = this._getGutter();
        this.actualGutter$.next([horizontalGutter, verticalGutter]);
        const renderGutter = (name, gutter) => {
            const nativeElement = this.elementRef.nativeElement;
            this.renderer.setStyle(nativeElement, name, `-${gutter / 2}px`);
        };
        if (horizontalGutter > 0) {
            renderGutter('margin-left', horizontalGutter);
            renderGutter('margin-right', horizontalGutter);
        }
        if (verticalGutter > 0) {
            renderGutter('margin-top', verticalGutter);
            renderGutter('margin-bottom', verticalGutter);
        }
    }
    _getGutter() {
        if (isString(this.thyGutter)) {
            throw Error(`thyGutter value can not be string type`);
        }
        return [this.thyGutter, 0];
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyRow]',
                host: {
                    class: 'thy-row'
                }
            },] }
];
ThyRowDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ThyRowDirective.propDecorators = {
    thyGutter: [{ type: Input }],
    thyAlign: [{ type: Input }],
    thyJustify: [{ type: Input }]
};

const _MixinBase = mixinUnsubscribe(MixinBase);
class ThyColDirective extends _MixinBase {
    constructor(elementRef, renderer, updateHostClassService, thyRowDirective) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.updateHostClassService = updateHostClassService;
        this.thyRowDirective = thyRowDirective;
        this.thyFlex = null;
        this.thySpan = 24;
        this.thyOrder = null;
        this.thyOffset = null;
        this.thyPush = null;
        this.thyPull = null;
        this.thyXs = null;
        this.thySm = null;
        this.thyMd = null;
        this.thyLg = null;
        this.thyXl = null;
        this.thyXXl = null;
        this.updateHostClassService.initializeElement(this.elementRef);
    }
    ngOnInit() {
        this._setHostClassMap();
    }
    ngOnChanges(changes) {
        this._setHostClassMap();
    }
    ngAfterViewInit() {
        if (this.thyRowDirective) {
            this.thyRowDirective.actualGutter$.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(([horizontalGutter, verticalGutter]) => {
                const renderGutter = (name, gutter) => {
                    const nativeElement = this.elementRef.nativeElement;
                    this.renderer.setStyle(nativeElement, name, `${gutter / 2}px`);
                };
                if (horizontalGutter > 0) {
                    renderGutter('padding-left', horizontalGutter);
                    renderGutter('padding-right', horizontalGutter);
                }
                if (verticalGutter > 0) {
                    renderGutter('padding-top', verticalGutter);
                    renderGutter('padding-bottom', verticalGutter);
                }
            });
        }
    }
    _setHostClassMap() {
        this.updateHostClassService.updateClassByMap({
            [`thy-col-${this.thySpan}`]: true
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyColDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyCol]',
                providers: [UpdateHostClassService],
                host: {
                    class: 'thy-col'
                }
            },] }
];
ThyColDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: UpdateHostClassService },
    { type: ThyRowDirective, decorators: [{ type: Optional }, { type: Host }] }
];
ThyColDirective.propDecorators = {
    thyFlex: [{ type: Input }],
    thySpan: [{ type: Input }],
    thyOrder: [{ type: Input }],
    thyOffset: [{ type: Input }],
    thyPush: [{ type: Input }],
    thyPull: [{ type: Input }],
    thyXs: [{ type: Input }],
    thySm: [{ type: Input }],
    thyMd: [{ type: Input }],
    thyLg: [{ type: Input }],
    thyXl: [{ type: Input }],
    thyXXl: [{ type: Input }]
};

class ThyRasterModule {
}
ThyRasterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyRowDirective, ThyColDirective],
                exports: [ThyRowDirective, ThyColDirective],
                imports: []
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyColDirective, ThyRasterModule, ThyRowDirective };
//# sourceMappingURL=ngx-tethys-raster.js.map

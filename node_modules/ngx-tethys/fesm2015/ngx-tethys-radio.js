import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding, Input, Optional, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { UpdateHostClassService, ThyTranslate } from 'ngx-tethys/core';
import { ThyFormCheckBaseComponent } from 'ngx-tethys/shared';
import { coerceBooleanProperty } from 'ngx-tethys/util';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["*"];
const _c1 = ["thy-radio", ""];
function ThyRadioComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0._labelText);
} }
const _c2 = function (a0) { return { "form-check-no-label-text": a0 }; };
const _c3 = ["thy-radio-button", ""];
const buttonGroupSizeMap = {
    sm: ['btn-group-sm'],
    lg: ['btn-group-lg']
};
const radioGroupLayoutMap = {
    flex: ['radio-group-layout-flex']
};
class ThyRadioGroupComponent {
    constructor(updateHostClassService, elementRef, changeDetectorRef) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.thyRadioGroup = true;
        this.isButtonGroup = false;
        this.isButtonGroupOutline = false;
        this.radios = [];
        this.onChange = () => null;
        this.onTouched = () => null;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        this._size = size;
    }
    set thyLayout(layout) {
        this._layout = layout;
    }
    set thyDisabled(value) {
        this.setDisabledState(value);
    }
    addRadio(radio) {
        this.radios.push(radio);
        radio.thyChecked = radio.thyValue === this._innerValue;
    }
    updateValue(value, emit) {
        this._innerValue = value;
        this.radios.forEach(radio => {
            radio.thyChecked = radio.thyValue === this._innerValue;
        });
        if (emit) {
            this.onChange(value);
        }
        this.changeDetectorRef.detectChanges();
    }
    writeValue(value) {
        this.updateValue(value, false);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.radios.forEach(radio => {
            radio.setDisabledState(isDisabled);
        });
    }
    setGroup() {
        if (!this.isButtonGroup && !this.isButtonGroupOutline) {
            this.isButtonGroup = true;
            this.isButtonGroupOutline = true;
        }
    }
    ngOnInit() {
        this._setClasses();
    }
    _setClasses() {
        const classNames = [];
        if (buttonGroupSizeMap[this._size]) {
            classNames.push(buttonGroupSizeMap[this._size]);
        }
        if (radioGroupLayoutMap[this._layout]) {
            classNames.push(radioGroupLayoutMap[this._layout]);
        }
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyRadioGroupComponent.ɵfac = function ThyRadioGroupComponent_Factory(t) { return new (t || ThyRadioGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyRadioGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyRadioGroupComponent, selectors: [["thy-radio-group"]], hostVars: 6, hostBindings: function ThyRadioGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-radio-group", ctx.thyRadioGroup)("btn-group", ctx.isButtonGroup)("btn-group-outline-default", ctx.isButtonGroupOutline);
    } }, inputs: { thySize: "thySize", thyLayout: "thyLayout", thyDisabled: "thyDisabled" }, features: [ɵngcc0.ɵɵProvidersFeature([
            UpdateHostClassService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThyRadioGroupComponent),
                multi: true
            }
        ])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyRadioGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ThyRadioGroupComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
ThyRadioGroupComponent.propDecorators = {
    thyRadioGroup: [{ type: HostBinding, args: ['class.thy-radio-group',] }],
    isButtonGroup: [{ type: HostBinding, args: ['class.btn-group',] }],
    isButtonGroupOutline: [{ type: HostBinding, args: ['class.btn-group-outline-default',] }],
    thySize: [{ type: Input }],
    thyLayout: [{ type: Input }],
    thyDisabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyRadioGroupComponent, [{
        type: Component,
        args: [{
                selector: 'thy-radio-group',
                template: "<ng-content></ng-content>",
                providers: [
                    UpdateHostClassService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyRadioGroupComponent),
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { thyRadioGroup: [{
            type: HostBinding,
            args: ['class.thy-radio-group']
        }], isButtonGroup: [{
            type: HostBinding,
            args: ['class.btn-group']
        }], isButtonGroupOutline: [{
            type: HostBinding,
            args: ['class.btn-group-outline-default']
        }], thySize: [{
            type: Input
        }], thyLayout: [{
            type: Input
        }], thyDisabled: [{
            type: Input
        }] }); })();

class ThyRadioComponent extends ThyFormCheckBaseComponent {
    constructor(thyTranslate, thyRadioGroupComponent, changeDetectorRef) {
        super(thyTranslate, changeDetectorRef);
        this.thyTranslate = thyTranslate;
        this.thyRadioGroupComponent = thyRadioGroupComponent;
    }
    set thyChecked(value) {
        this.writeValue(coerceBooleanProperty(value));
        this.changeDetectorRef.markForCheck();
    }
    ngOnInit() {
        if (this.thyRadioGroupComponent) {
            this.thyRadioGroupComponent.addRadio(this);
        }
    }
    change() {
        if (this.thyRadioGroupComponent) {
            this.thyRadioGroupComponent.updateValue(this.thyValue, true);
        }
        else {
            this.updateValue(!this._innerValue);
        }
    }
}
ThyRadioComponent.ɵfac = function ThyRadioComponent_Factory(t) { return new (t || ThyRadioComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyTranslate), ɵngcc0.ɵɵdirectiveInject(ThyRadioGroupComponent, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyRadioComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyRadioComponent, selectors: [["", "thy-radio", ""], ["", "thyRadio", ""]], inputs: { thyValue: "thyValue" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThyRadioComponent),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c1, ngContentSelectors: _c0, decls: 3, vars: 7, consts: [["type", "radio", 1, "form-check-input", 3, "checked", "disabled", "ngClass", "change"], ["class", "form-check-label", 4, "ngIf"], [1, "form-check-label"]], template: function ThyRadioComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "input", 0);
        ɵngcc0.ɵɵlistener("change", function ThyRadioComponent_Template_input_change_0_listener() { return ctx.change(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(1, ThyRadioComponent_span_1_Template, 2, 1, "span", 1);
        ɵngcc0.ɵɵprojection(2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("checked", ctx._isChecked)("disabled", ctx._disabled)("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c2, !ctx._labelText));
        ɵngcc0.ɵɵattribute("name", ctx.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx._labelText);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgIf], encapsulation: 2, changeDetection: 0 });
ThyRadioComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: ThyRadioGroupComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
ThyRadioComponent.propDecorators = {
    thyValue: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyRadioComponent, [{
        type: Component,
        args: [{
                selector: '[thy-radio],[thyRadio]',
                template: "<input\n  class=\"form-check-input\"\n  [checked]=\"_isChecked\"\n  (change)=\"change()\"\n  type=\"radio\"\n  [disabled]=\"_disabled\"\n  [attr.name]=\"name\"\n  [ngClass]=\"{ 'form-check-no-label-text': !_labelText }\"\n/>\n<span class=\"form-check-label\" *ngIf=\"_labelText\">{{ _labelText }}</span>\n<ng-content></ng-content>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyRadioComponent),
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.ThyTranslate }, { type: ThyRadioGroupComponent, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { thyValue: [{
            type: Input
        }] }); })();

class ThyRadioButtonComponent extends ThyRadioComponent {
    constructor(thyTranslate, thyRadioGroupComponent, changeDetectorRef) {
        super(thyTranslate, thyRadioGroupComponent, changeDetectorRef);
        this.isButton = true;
        this.isActive = false;
    }
    set thyChecked(value) {
        this.isActive = !!value;
        this.writeValue(coerceBooleanProperty(value));
    }
    ngOnInit() {
        this._isFormCheck = false;
        if (this.thyRadioGroupComponent) {
            this.thyRadioGroupComponent.addRadio(this);
            this.thyRadioGroupComponent.setGroup();
        }
    }
    click($event) {
        this.change();
    }
}
ThyRadioButtonComponent.ɵfac = function ThyRadioButtonComponent_Factory(t) { return new (t || ThyRadioButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyTranslate), ɵngcc0.ɵɵdirectiveInject(ThyRadioGroupComponent, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyRadioButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyRadioButtonComponent, selectors: [["", "thy-radio-button", ""], ["", "thyRadioButton", ""]], hostVars: 4, hostBindings: function ThyRadioButtonComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyRadioButtonComponent_click_HostBindingHandler($event) { return ctx.click($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("btn", ctx.isButton)("active", ctx.isActive);
    } }, inputs: { thyValue: "thyValue" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c3, ngContentSelectors: _c0, decls: 3, vars: 1, template: function ThyRadioButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵprojection(2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx._labelText, "");
    } }, encapsulation: 2 });
ThyRadioButtonComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: ThyRadioGroupComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
ThyRadioButtonComponent.propDecorators = {
    isButton: [{ type: HostBinding, args: ['class.btn',] }],
    isActive: [{ type: HostBinding, args: ['class.active',] }],
    thyValue: [{ type: Input }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyRadioButtonComponent, [{
        type: Component,
        args: [{
                selector: '[thy-radio-button],[thyRadioButton]',
                template: "<ng-container> {{ _labelText }}</ng-container>\n<ng-content></ng-content>\n"
            }]
    }], function () { return [{ type: ɵngcc1.ThyTranslate }, { type: ThyRadioGroupComponent, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { isButton: [{
            type: HostBinding,
            args: ['class.btn']
        }], isActive: [{
            type: HostBinding,
            args: ['class.active']
        }], click: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], thyValue: [{
            type: Input
        }] }); })();

class ThyRadioModule {
}
ThyRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyRadioModule });
ThyRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyRadioModule_Factory(t) { return new (t || ThyRadioModule)(); }, imports: [[
            CommonModule,
            FormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyRadioModule, { declarations: function () { return [ThyRadioComponent, ThyRadioGroupComponent, ThyRadioButtonComponent]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [ThyRadioComponent, ThyRadioGroupComponent, ThyRadioButtonComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyRadioModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [
                    ThyRadioComponent,
                    ThyRadioGroupComponent,
                    ThyRadioButtonComponent
                ],
                exports: [
                    ThyRadioComponent,
                    ThyRadioGroupComponent,
                    ThyRadioButtonComponent
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyRadioButtonComponent, ThyRadioComponent, ThyRadioGroupComponent, ThyRadioModule };

//# sourceMappingURL=ngx-tethys-radio.js.map
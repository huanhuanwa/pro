import { Injectable, EventEmitter, Component, ViewEncapsulation, forwardRef, ElementRef, Input, HostBinding, Output, ContentChild, NgZone, ChangeDetectorRef, ViewChild, ViewContainerRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { coerceArray, helpers } from 'ngx-tethys/util';
import { Subject } from 'rxjs';
import { SelectionModel } from '@angular/cdk/collections';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyDropPosition, ThyDragDropModule } from 'ngx-tethys/drag-drop';
import { filter, takeUntil } from 'rxjs/operators';
import { ThyInputModule } from 'ngx-tethys/input';
import { ThyButtonModule } from 'ngx-tethys/button';
import { ThySharedModule, ThyOptionModule } from 'ngx-tethys/shared';
import { ThyListModule } from 'ngx-tethys/list';
import { ThyLoadingModule } from 'ngx-tethys/loading';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyCheckboxModule } from 'ngx-tethys/checkbox';

var ThyTreeNodeCheckState;
(function (ThyTreeNodeCheckState) {
    ThyTreeNodeCheckState[ThyTreeNodeCheckState["unchecked"] = 0] = "unchecked";
    ThyTreeNodeCheckState[ThyTreeNodeCheckState["checked"] = 1] = "checked";
    ThyTreeNodeCheckState[ThyTreeNodeCheckState["indeterminate"] = 2] = "indeterminate";
})(ThyTreeNodeCheckState || (ThyTreeNodeCheckState = {}));
class ThyTreeIcons {
}

function checkStateResolve(node) {
    const checkedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);
    const unCheckedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.unchecked);
    if (checkedNodes.length === node.children.length) {
        return ThyTreeNodeCheckState.checked;
    }
    else if (unCheckedNodes.length === node.children.length) {
        return ThyTreeNodeCheckState.unchecked;
    }
    else {
        return ThyTreeNodeCheckState.indeterminate;
    }
}
class ThyTreeService {
    constructor() {
        this.checkStateResolve = checkStateResolve;
        this.$statusChange = new Subject();
    }
    _getParallelTreeNodes(nodes, list = []) {
        (nodes || []).forEach(node => {
            list.push(node);
            this._getParallelTreeNodes(node.children || [], list);
        });
        return list;
    }
    setCheckStateResolve(resolve = checkStateResolve) {
        this.checkStateResolve = resolve;
    }
    resetSortedTreeNodes(treeNodes, parent) {
        treeNodes.forEach(node => {
            node.level = node.parentNode ? node.parentNode.level + 1 : 0;
            node.origin.children = node.children.map(n => n.origin);
            node.parentNode = parent;
            this.resetSortedTreeNodes(node.children, node);
        });
    }
    getTreeNode(key) {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.find(n => n.key === key);
    }
    getExpandedNodes() {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.filter(n => n.isExpanded);
    }
    getCheckedNodes() {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);
    }
    deleteTreeNode(node) {
        const children = node.parentNode ? node.parentNode.children : this.treeNodes;
        const index = children.findIndex(n => n.key === node.key);
        if (index > -1) {
            children.splice(index, 1);
        }
    }
    expandTreeNodes(keyOrKeys) {
        const keys = coerceArray(keyOrKeys);
        const needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(node => {
            return keys.indexOf(node.key) > -1;
        });
        needExpandNodes.forEach(node => {
            node.setExpanded(true);
        });
    }
    statusChanged() {
        return this.$statusChange.asObservable();
    }
    // 设置节点选中状态
    setNodeChecked(node, checked, propagateUp = true, propagateDown = true) {
        node.isChecked = checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;
        node.origin.checked = checked;
        if (propagateDown && node.children) {
            node.children.forEach(subNode => {
                this.setNodeChecked(subNode, checked, false, true);
            });
        }
        if (propagateUp) {
            this.syncNodeCheckState(node.parentNode);
        }
    }
    syncNodeCheckState(node) {
        if (node) {
            node.isChecked = this.checkStateResolve(node);
            this.syncNodeCheckState(node.parentNode);
        }
    }
    ngOnDestroy() {
        this.$statusChange.complete();
        this.$statusChange = null;
    }
}
ThyTreeService.decorators = [
    { type: Injectable }
];
ThyTreeService.ctorParameters = () => [];

class ThyTreeNode {
    constructor(node, parent = null, service) {
        this.level = 0;
        this.title = node.title;
        this.key = node.key;
        this.children = [];
        this.parentNode = parent;
        this.level = parent ? parent.level + 1 : this.level;
        this.origin = node;
        this.isDisabled = node.disabled || false;
        this.isExpanded = node.expanded || false;
        this.isChecked = node.checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;
        this.isLoading = false;
        if (node.children) {
            node.children.forEach(childNode => {
                this.children.push(new ThyTreeNode(childNode, this));
            });
        }
        this.service = service;
    }
    get treeService() {
        if (this.service) {
            return this.service;
        }
        else if (this.parentNode) {
            return this.parentNode.treeService;
        }
    }
    setKey(key) {
        this.origin.key = key;
        this.key = key;
    }
    setTitle(title) {
        this.origin.title = title;
        this.title = title;
    }
    setExpanded(expanded, propagate = false) {
        this.origin.expanded = expanded;
        this.isExpanded = expanded;
        if (propagate && this.children) {
            this.children.forEach(n => n.setExpanded(expanded, propagate));
        }
    }
    setLoading(loading) {
        this.isLoading = loading;
    }
    setChecked(checked, propagateUp = true, propagateDown = true) {
        this.treeService.setNodeChecked(this, checked, propagateUp, propagateDown);
    }
    syncNodeCheckState() {
        this.treeService.syncNodeCheckState(this);
    }
    getParentNode() {
        return this.parentNode;
    }
    getChildren() {
        return this.children;
    }
    addChildren(children, index = -1) {
        children = helpers.coerceArray(children);
        (children || []).forEach((childNode, i) => {
            if (index === -1) {
                this.children.push(new ThyTreeNode(childNode, this));
            }
            else {
                this.children.splice(index + i, 0, new ThyTreeNode(childNode, this, this.treeService));
            }
        });
        this.origin.children = this.getChildren().map(n => n.origin);
        this.setLoading(false);
        this.treeService.$statusChange.next({
            eventName: 'addChildren',
            node: this
        });
    }
}

const treeTypeClassMap = {
    default: ['thy-tree-default'],
    especial: ['thy-tree-especial']
};
class ThyTreeComponent {
    constructor(elementRef, updateHostClassService, thyTreeService) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.thyTreeService = thyTreeService;
        this._draggable = false;
        this.thyShowExpand = true;
        this.thyMultiple = false;
        this.thyAsync = false;
        this._thyType = 'default';
        this.thyIcons = {};
        this.thyTitleTruncate = true;
        this.thyOnClick = new EventEmitter();
        this.thyOnCheckboxChange = new EventEmitter();
        this.thyOnExpandChange = new EventEmitter();
        this.thyOnDragDrop = new EventEmitter();
        this.thyTreeClass = true;
        this.beforeDragOver = (event) => {
            return this.isShowExpand(event.item) || (!this.isShowExpand(event.item) && event.position !== ThyDropPosition.in);
        };
        this._onTouched = () => { };
        this._onChange = (_) => { };
    }
    set thyNodes(value) {
        this._expandedKeys = this.getExpandedNodes().map(node => node.key);
        this._selectedKeys = this.getSelectedNodes().map(node => node.key);
        this.treeNodes = (value || []).map(node => new ThyTreeNode(node, null, this.thyTreeService));
        this.thyTreeService.treeNodes = this.treeNodes;
        this.thyTreeService.expandTreeNodes(this._expandedKeys);
        this._selectTreeNodes(this._selectedKeys);
    }
    set thyDraggable(value) {
        this._draggable = value;
    }
    get thyDraggable() {
        return this._draggable;
    }
    set thyCheckStateResolve(resolve) {
        this.thyTreeService.setCheckStateResolve(resolve);
    }
    set thyType(type) {
        this._thyType = type;
        if (type === 'especial') {
            this.thyIcons = { expand: 'minus-square', collapse: 'plus-square' };
        }
    }
    get thyType() {
        return this._thyType;
    }
    set thySelectedKeys(keys) {
        this._selectedKeys = keys;
    }
    set templateRef(template) {
        if (template) {
            this._templateRef = template;
        }
    }
    get templateRef() {
        return this._templateRef;
    }
    set emptyChildrenTemplateRef(template) {
        if (template) {
            this._emptyChildrenTemplateRef = template;
        }
    }
    get emptyChildrenTemplateRef() {
        return this._emptyChildrenTemplateRef;
    }
    ngOnChanges(changes) {
        if (changes.thyType && !changes.thyType.isFirstChange()) {
            this._setTreeType();
        }
        if (changes.thyMultiple && !changes.thyMultiple.isFirstChange()) {
            this._instanceSelectionModel();
        }
    }
    ngOnInit() {
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this._setTreeType();
        this._setTreeSize();
        this._instanceSelectionModel();
        this._selectTreeNodes(this._selectedKeys);
    }
    _setTreeType() {
        if (this.thyType) {
            this.updateHostClassService.addClass(treeTypeClassMap[this.thyType]);
        }
    }
    _setTreeSize() {
        if (this.thySize) {
            this.updateHostClassService.addClass(`thy-tree-${this.thySize}`);
        }
    }
    _instanceSelectionModel() {
        this._selectionModel = new SelectionModel(this.thyMultiple);
    }
    _selectTreeNodes(keys) {
        (keys || []).forEach(key => {
            const node = this.thyTreeService.getTreeNode(key);
            if (node) {
                this.selectTreeNode(this.thyTreeService.getTreeNode(key));
            }
        });
    }
    isSelected(node) {
        return this._selectionModel.isSelected(node);
    }
    toggleTreeNode(node) {
        if (node && !node.isDisabled) {
            this._selectionModel.toggle(node);
        }
    }
    trackByFn(index, item) {
        return item.key || index;
    }
    onDragStart(event) {
        if (this.isShowExpand(event.item) && event.item.isExpanded) {
            event.item.setExpanded(false);
        }
    }
    onDragDrop(event) {
        if (!this.isShowExpand(event.item) && event.position === ThyDropPosition.in) {
            return;
        }
        const parent = event.previousItem.parentNode;
        if (parent) {
            parent.children = parent.children.filter(item => item !== event.previousItem);
        }
        else {
            this.treeNodes = this.treeNodes.filter(item => item !== event.previousItem);
        }
        switch (event.position) {
            case ThyDropPosition.in:
                event.item.addChildren(event.previousItem.origin);
                break;
            case ThyDropPosition.after:
            case ThyDropPosition.before:
                const targetParent = event.item.parentNode;
                const index = event.position === ThyDropPosition.before ? 0 : 1;
                if (targetParent) {
                    targetParent.addChildren(event.previousItem.origin, targetParent.children.indexOf(event.item) + index);
                }
                else {
                    this.treeNodes.splice(this.treeNodes.indexOf(event.item) + index, 0, event.previousItem);
                }
                break;
        }
        this.thyTreeService.resetSortedTreeNodes(this.treeNodes);
        let afterNode = null;
        let targetNode = null;
        if (event.position === ThyDropPosition.before) {
            afterNode = event.containerItems[event.currentIndex - 1];
            targetNode = event.item.parentNode;
        }
        else if (event.position === ThyDropPosition.after) {
            afterNode = event.containerItems[event.currentIndex];
            targetNode = event.item.parentNode;
        }
        else {
            afterNode = event.item.children[event.item.children.length - 2];
            targetNode = event.item;
        }
        this.thyOnDragDrop.emit({
            event,
            currentIndex: event.currentIndex,
            dragNode: event.previousItem,
            targetNode: targetNode,
            afterNode: afterNode
        });
    }
    isShowExpand(node) {
        if (helpers.isFunction(this.thyShowExpand)) {
            return this.thyShowExpand(node);
        }
        else {
            return this.thyShowExpand;
        }
    }
    writeValue(value) {
        this.thyNodes = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // region Public Functions
    selectTreeNode(node) {
        this._selectionModel.select(node);
    }
    getRootNodes() {
        return this.treeNodes;
    }
    getTreeNode(key) {
        return this.thyTreeService.getTreeNode(key);
    }
    getSelectedNode() {
        return this._selectionModel ? this._selectionModel.selected[0] : null;
    }
    getSelectedNodes() {
        return this._selectionModel ? this._selectionModel.selected : [];
    }
    getExpandedNodes() {
        return this.thyTreeService.getExpandedNodes();
    }
    getCheckedNodes() {
        return this.thyTreeService.getCheckedNodes();
    }
    addTreeNode(node, parent, index = -1) {
        if (parent) {
            parent.addChildren(node, index);
        }
        else {
            if (index > -1) {
                this.treeNodes.splice(index, 0, new ThyTreeNode(node, null, this.thyTreeService));
            }
            else {
                this.treeNodes.push(new ThyTreeNode(node, null, this.thyTreeService));
            }
        }
    }
    deleteTreeNode(node) {
        if (this.isSelected(node)) {
            this._selectionModel.toggle(node);
        }
        this.thyTreeService.deleteTreeNode(node);
    }
    expandAllNodes() {
        const nodes = this.getRootNodes();
        nodes.forEach(n => n.setExpanded(true, true));
    }
    collapsedAllNodes() {
        const nodes = this.getRootNodes();
        nodes.forEach(n => n.setExpanded(false, true));
    }
}
ThyTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tree',
                template: "<div\n  [thyDropContainer]=\"treeNodes\"\n  [thyDropContainerDisabled]=\"!thyDraggable\"\n  [thyBeforeDragStart]=\"thyBeforeDragStart\"\n  [thyBeforeDragOver]=\"beforeDragOver\"\n  [thyBeforeDragDrop]=\"thyBeforeDragDrop\"\n  (thyDragStarted)=\"onDragStart($event)\"\n  (thyDragDropped)=\"onDragDrop($event)\"\n>\n  <thy-tree-node\n    [thyDrag]=\"node\"\n    *ngFor=\"let node of treeNodes; trackBy: trackByFn; let i = index\"\n    [node]=\"node\"\n    [templateRef]=\"templateRef\"\n    [emptyChildrenTemplateRef]=\"emptyChildrenTemplate\"\n    [thyAsync]=\"thyAsync\"\n    [thyDraggable]=\"thyDraggable\"\n    [thyCheckable]=\"thyCheckable\"\n    [thyMultiple]=\"thyMultiple\"\n    [thyTitleTruncate]=\"thyTitleTruncate\"\n    (thyOnClick)=\"thyOnClick.emit($event)\"\n    (thyOnExpandChange)=\"thyOnExpandChange.emit($event)\"\n    (thyOnCheckboxChange)=\"thyOnCheckboxChange.emit($event)\"\n  >\n  </thy-tree-node>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyTreeComponent),
                        multi: true
                    },
                    ThyTreeService,
                    UpdateHostClassService
                ]
            },] }
];
ThyTreeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService },
    { type: ThyTreeService }
];
ThyTreeComponent.propDecorators = {
    thyNodes: [{ type: Input }],
    thyShowExpand: [{ type: Input }],
    thyMultiple: [{ type: HostBinding, args: [`class.thy-multiple-selection-list`,] }, { type: Input }],
    thyDraggable: [{ type: HostBinding, args: ['class.thy-tree-draggable',] }, { type: Input }],
    thyCheckable: [{ type: Input }],
    thyCheckStateResolve: [{ type: Input }],
    thyAsync: [{ type: Input }],
    thyType: [{ type: Input }],
    thyIcons: [{ type: Input }],
    thySize: [{ type: Input }],
    thyTitleTruncate: [{ type: Input }],
    thySelectedKeys: [{ type: Input }],
    thyBeforeDragStart: [{ type: Input }],
    thyBeforeDragDrop: [{ type: Input }],
    thyOnClick: [{ type: Output }],
    thyOnCheckboxChange: [{ type: Output }],
    thyOnExpandChange: [{ type: Output }],
    thyOnDragDrop: [{ type: Output }],
    templateRef: [{ type: ContentChild, args: ['treeNodeTemplate', { static: true },] }],
    emptyChildrenTemplate: [{ type: ContentChild, args: ['emptyChildrenTemplate', { static: true },] }],
    thyTreeClass: [{ type: HostBinding, args: ['class.thy-tree',] }]
};

class ThyTreeNodeComponent {
    constructor(root, thyTreeService, ngZone, cdr) {
        this.root = root;
        this.thyTreeService = thyTreeService;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.thyAsync = false;
        this.thyMultiple = false;
        this.thyDraggable = false;
        this.thyCheckable = false;
        this.thyOnClick = new EventEmitter();
        this.thyOnExpandChange = new EventEmitter();
        this.thyOnCheckboxChange = new EventEmitter();
        this.thyTreeNodeClass = true;
        this.destroy$ = new Subject();
        this.checkState = ThyTreeNodeCheckState;
        this.thyTreeService
            .statusChanged()
            .pipe(filter(data => data.node.key === this.node.key), takeUntil(this.destroy$))
            .subscribe(() => {
            this.markForCheck();
        });
    }
    get nodeIcon() {
        return this.node.origin.icon;
    }
    get nodeIconStyle() {
        return this.node.origin.iconStyle;
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    changeDragIconVisibility(event, showDragIcon) {
        const nodeElement = event.target;
        const dragIcon = nodeElement.querySelector('.thy-tree-drag-icon');
        if (dragIcon) {
            dragIcon.style.visibility = showDragIcon ? 'visible' : 'hidden';
        }
    }
    nodeMouseEnter(event) {
        if (!this.root.thyDraggable || this.node.isDisabled) {
            return;
        }
        else if (this.root.thyDraggable && !this.root.thyBeforeDragStart) {
            this.changeDragIconVisibility(event, true);
        }
        else {
            const containerItems = this.node.getParentNode() ? this.node.getParentNode().getChildren() : this.root.treeNodes;
            const dragStartEvent = {
                event: event,
                item: this.node,
                containerItems,
                currentIndex: containerItems.indexOf(this.node)
            };
            this.changeDragIconVisibility(event, this.root.thyBeforeDragStart(dragStartEvent));
        }
    }
    nodeMouseLeave(event) {
        if (!this.root.thyDraggable || this.node.isDisabled) {
            return;
        }
        else {
            this.changeDragIconVisibility(event, false);
        }
    }
    clickNode(event) {
        if (!this.root.thyMultiple) {
            this.root.selectTreeNode(this.node);
        }
        else {
            this.root.toggleTreeNode(this.node);
        }
        this.thyOnClick.emit({
            eventName: 'click',
            event: event,
            node: this.node
        });
    }
    clickNodeCheck(event) {
        event.stopPropagation();
        if (this.node.isChecked === ThyTreeNodeCheckState.unchecked || this.node.isChecked === ThyTreeNodeCheckState.indeterminate) {
            this.node.setChecked(true);
        }
        else {
            this.node.setChecked(false);
        }
        this.thyOnCheckboxChange.emit({
            eventName: 'checkboxChange',
            event: event,
            node: this.node
        });
    }
    expandNode(event) {
        event.stopPropagation();
        this.node.setExpanded(!this.node.isExpanded);
        if (this.root.thyShowExpand) {
            this.thyOnExpandChange.emit({
                eventName: 'expand',
                event: event,
                node: this.node
            });
            if (this.thyAsync && this.node.children.length === 0) {
                this.node.setLoading(true);
            }
        }
    }
    isShowExpand(node) {
        return this.root.isShowExpand(node);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ThyTreeNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tree-node',
                template: "<div\n  thyDragContent\n  class=\"thy-tree-node-wrapper thy-sortable-item\"\n  [class.active]=\"root.isSelected(node)\"\n  [class.disabled]=\"node.isDisabled\"\n  (click)=\"clickNode($event)\"\n  (mouseenter)=\"nodeMouseEnter($event)\"\n  (mouseleave)=\"nodeMouseLeave($event)\"\n>\n  <span *ngIf=\"thyDraggable\" class=\"thy-tree-drag-icon thy-sortable-handle\">\n    <thy-icon thyIconName=\"drag\"></thy-icon>\n  </span>\n  <span class=\"thy-tree-expand\" (click)=\"expandNode($event)\">\n    <ng-container *ngIf=\"isShowExpand(node)\">\n      <ng-container *ngIf=\"(node.children && node.children.length > 0) || thyAsync || emptyChildrenTemplateRef\">\n        <thy-icon\n          *ngIf=\"root.thyIcons?.expand && root.thyIcons?.collapse; else defaultIcon\"\n          class=\"thy-tree-expand-icon\"\n          [thyIconName]=\"node.isExpanded ? root.thyIcons.expand : root.thyIcons.collapse\"\n        ></thy-icon>\n        <ng-template #defaultIcon>\n          <thy-icon class=\"thy-tree-expand-icon\" [class.collapse]=\"!node.isExpanded\" thyIconName=\"caret-right-down\"></thy-icon>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n  </span>\n\n  <span class=\"thy-tree-node-content\">\n    <input\n      *ngIf=\"thyCheckable\"\n      type=\"checkbox\"\n      class=\"thy-tree-node-check\"\n      [class.form-check-indeterminate]=\"node.isChecked === checkState.indeterminate\"\n      [checked]=\"node.isChecked === checkState.checked\"\n      [disabled]=\"node.isDisabled\"\n      (click)=\"clickNodeCheck($event)\"\n    />\n    <ng-container *ngIf=\"!templateRef\">\n      <ng-container *ngIf=\"nodeIcon\">\n        <span class=\"thy-tree-node-icon\"> <i [ngClass]=\"nodeIcon\" [ngStyle]=\"nodeIconStyle\"></i></span>\n      </ng-container>\n      <span [title]=\"node.title\" class=\"thy-tree-node-title\" [class.truncate]=\"thyTitleTruncate\"> {{ node.title }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"templateRef\">\n      <ng-template\n        [ngTemplateOutlet]=\"templateRef\"\n        [ngTemplateOutletContext]=\"{ $implicit: node, node: node, origin: node?.origin }\"\n      ></ng-template>\n    </ng-container>\n  </span>\n</div>\n<div\n  class=\"thy-tree-node-children\"\n  *ngIf=\"isShowExpand(node) && node.isExpanded\"\n  [thyDropContainer]=\"node.children\"\n  [thyDropContainerDisabled]=\"!root.thyDraggable\"\n  [thyBeforeDragStart]=\"root.thyBeforeDragStart\"\n  [thyBeforeDragOver]=\"root.beforeDragOver\"\n  [thyBeforeDragDrop]=\"root.thyBeforeDragDrop\"\n  (thyDragDropped)=\"root.onDragDrop($event)\"\n  (thyDragStarted)=\"root.onDragStart($event)\"\n>\n  <thy-tree-node\n    *ngFor=\"let node of node.children; trackBy: root.trackByFn; let i = index\"\n    [node]=\"node\"\n    [thyDrag]=\"node\"\n    [templateRef]=\"templateRef\"\n    [thyAsync]=\"thyAsync\"\n    [thyMultiple]=\"thyMultiple\"\n    [thyDraggable]=\"thyDraggable\"\n    [thyCheckable]=\"thyCheckable\"\n    [thyTitleTruncate]=\"thyTitleTruncate\"\n    (thyOnClick)=\"thyOnClick.emit($event)\"\n    (thyOnCheckboxChange)=\"thyOnCheckboxChange.emit($event)\"\n    (thyOnExpandChange)=\"thyOnExpandChange.emit($event)\"\n  >\n  </thy-tree-node>\n  <ng-container *ngIf=\"thyAsync\">\n    <thy-loading *ngIf=\"node.isLoading\" [thyDone]=\"!node.isLoading\"></thy-loading>\n  </ng-container>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTreeNodeComponent.ctorParameters = () => [
    { type: ThyTreeComponent },
    { type: ThyTreeService },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
ThyTreeNodeComponent.propDecorators = {
    node: [{ type: Input }],
    thyAsync: [{ type: Input }],
    thyMultiple: [{ type: Input }],
    thyDraggable: [{ type: Input }],
    thyCheckable: [{ type: Input }],
    thyTitleTruncate: [{ type: Input }],
    templateRef: [{ type: Input }],
    emptyChildrenTemplateRef: [{ type: Input }],
    thyOnClick: [{ type: Output }],
    thyOnExpandChange: [{ type: Output }],
    thyOnCheckboxChange: [{ type: Output }],
    childrenTreeTemplateRef: [{ type: ContentChild, args: ['childrenTree',] }],
    titleInputElementRef: [{ type: ViewChild, args: ['title',] }],
    thyTreeNodeClass: [{ type: HostBinding, args: ['class.thy-tree-node',] }]
};

class ThyTreeReplaceRegionComponent {
    constructor(root, viewRef) {
        this.root = root;
        this.viewRef = viewRef;
    }
    ngOnInit() { }
}
ThyTreeReplaceRegionComponent.decorators = [
    { type: Component, args: [{
                selector: '[ThyTreeReplaceRegion]',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTreeReplaceRegionComponent.ctorParameters = () => [
    { type: ThyTreeComponent },
    { type: ViewContainerRef }
];
ThyTreeReplaceRegionComponent.propDecorators = {
    thyInstance: [{ type: Input }]
};

class ThyTreeModule {
}
ThyTreeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],
                imports: [
                    CommonModule,
                    ThyInputModule,
                    ThyButtonModule,
                    ThySharedModule,
                    FormsModule,
                    ThyListModule,
                    ThyOptionModule,
                    ThyLoadingModule,
                    ThyIconModule,
                    ThyDragDropModule,
                    ThyCheckboxModule
                ],
                entryComponents: [ThyTreeComponent],
                exports: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],
                providers: [ThyTreeService]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyTreeComponent, ThyTreeIcons, ThyTreeModule, ThyTreeNode, ThyTreeNodeCheckState, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent, ThyTreeService };
//# sourceMappingURL=ngx-tethys-tree.js.map

import { CommonModule } from '@angular/common';
import { Component, ElementRef, HostBinding, Input, ContentChild, NgModule } from '@angular/core';
import { ThySharedModule } from 'ngx-tethys/shared';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyIconModule } from 'ngx-tethys/icon';

class ThyVoteComponent {
    constructor(elementRef, updateHostClassService) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this._initialized = false;
        this._isRound = false;
        this.class = true;
        this._hasVoted = true;
        this.thyIcon = 'thumb-up';
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(value) {
        this._size = value;
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    set thyVote(value) {
        this._type = value;
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    set thyRound(value) {
        this._isRound = coerceBooleanProperty(value);
    }
    set thyLayout(value) {
        this._layout = value;
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    set thyHasVoted(value) {
        this._hasVoted = coerceBooleanProperty(value);
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    ngOnInit() {
        this._setClassesByType();
        this._initialized = true;
    }
    _setClassesByType() {
        const classNames = [];
        if (!this._type) {
            this._type = 'primary';
        }
        if (!this._layout) {
            this._layout = 'horizontal';
        }
        if (!this._size) {
            this._size = 'default';
        }
        if (this._isRound) {
            classNames.push('thy-vote-round');
        }
        classNames.push(`thy-vote-${this._type}`);
        classNames.push(`thy-vote-${this._layout}`);
        classNames.push(`thy-vote-${this._layout}-size-${this._size}`);
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyVoteComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-vote,[thyVote]',
                template: "<thy-icon *ngIf=\"!voteIcon\" [thyIconName]=\"thyIcon\" [thyIconType]=\"_hasVoted ? 'fill' : ''\"></thy-icon>\n<ng-container *ngIf=\"voteIcon\" [ngTemplateOutlet]=\"voteIcon\"></ng-container>\n<div>{{ thyVoteCount }}</div>\n",
                providers: [UpdateHostClassService]
            },] }
];
ThyVoteComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThyVoteComponent.propDecorators = {
    class: [{ type: HostBinding, args: [`class.thy-vote`,] }],
    _hasVoted: [{ type: HostBinding, args: [`class.has-voted`,] }],
    thySize: [{ type: Input }],
    thyVote: [{ type: Input }],
    thyRound: [{ type: Input }],
    thyLayout: [{ type: Input }],
    thyVoteCount: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thyHasVoted: [{ type: Input }],
    voteIcon: [{ type: ContentChild, args: ['voteIcon',] }]
};

class ThyVoteModule {
}
ThyVoteModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyVoteComponent],
                imports: [CommonModule, ThySharedModule, ThyIconModule],
                exports: [ThyVoteComponent],
                providers: []
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyVoteComponent, ThyVoteModule };
//# sourceMappingURL=ngx-tethys-vote.js.map

import { Injectable, Component, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, HostBinding, Input, ContentChild, ViewEncapsulation, ContentChildren, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyIconModule } from 'ngx-tethys/icon';
import { takeUntil } from 'rxjs/operators';
import { ReplaySubject, Subject } from 'rxjs';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["dot"];
const _c1 = ["description"];
const _c2 = ["timelineItem"];
function ThyTimelineItemComponent_ng_template_0_3_ng_template_0_Template(rf, ctx) { }
function ThyTimelineItemComponent_ng_template_0_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyTimelineItemComponent_ng_template_0_3_ng_template_0_Template, 0, 0, "ng-template", 7);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.dot);
} }
function ThyTimelineItemComponent_ng_template_0_7_ng_template_0_Template(rf, ctx) { }
function ThyTimelineItemComponent_ng_template_0_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyTimelineItemComponent_ng_template_0_7_ng_template_0_Template, 0, 0, "ng-template", 7);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r3.description);
} }
function ThyTimelineItemComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelement(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵtemplate(3, ThyTimelineItemComponent_ng_template_0_3_Template, 1, 1, undefined, 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 5);
    ɵngcc0.ɵɵprojection(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 6);
    ɵngcc0.ɵɵtemplate(7, ThyTimelineItemComponent_ng_template_0_7_Template, 1, 1, undefined, 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("thy-timeline-item-reverse-last", ctx_r1.isLast && ctx_r1.reverse)("thy-timeline-item-last", ctx_r1.isLast)("thy-timeline-item-reverse-first", ctx_r1.isFirst && ctx_r1.reverse)("thy-timeline-item-right", (ctx_r1.thyPosition || ctx_r1.position) === "right")("thy-timeline-item-left", (ctx_r1.thyPosition || ctx_r1.position) === "left");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("thy-timeline-item-dot-primary", ctx_r1.color === "primary")("thy-timeline-item-dot-success", ctx_r1.color === "success")("thy-timeline-item-dot-warning", ctx_r1.color === "warning")("thy-timeline-item-dot-danger", ctx_r1.color === "danger")("thy-timeline-item-dot-info", ctx_r1.color === "info")("thy-timeline-item-dot-custom", !!ctx_r1.dot);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.dot);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.description);
} }
const _c3 = ["*"];
function ThyTimelineComponent_ng_container_1_ng_template_1_Template(rf, ctx) { }
function ThyTimelineComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTimelineComponent_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", item_r1.template);
} }
class ThyTimelineService {
    constructor() {
        this.check$ = new ReplaySubject(1);
    }
    markForCheck() {
        this.check$.next();
    }
}
ThyTimelineService.ɵfac = function ThyTimelineService_Factory(t) { return new (t || ThyTimelineService)(); };
ThyTimelineService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyTimelineService, factory: ThyTimelineService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTimelineService, [{
        type: Injectable
    }], function () { return []; }, null); })();

class ThyTimelineItemComponent {
    constructor(cdr, timelineService) {
        this.cdr = cdr;
        this.timelineService = timelineService;
        this.color = 'primary';
        this.isLast = false;
        this.isFirst = false;
        this.reverse = false;
    }
    set thyColor(value) {
        if (value) {
            this.color = value;
        }
    }
    detectChanges() {
        this.cdr.detectChanges();
    }
    ngOnChanges(changes) {
        this.timelineService.markForCheck();
    }
    ngOnInit() { }
}
ThyTimelineItemComponent.ɵfac = function ThyTimelineItemComponent_Factory(t) { return new (t || ThyTimelineItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ThyTimelineService)); };
ThyTimelineItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTimelineItemComponent, selectors: [["thy-timeline-item"]], contentQueries: function ThyTimelineItemComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dot = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.description = _t.first);
    } }, viewQuery: function ThyTimelineItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, hostVars: 2, hostBindings: function ThyTimelineItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.className);
    } }, inputs: { thyColor: "thyColor", thyPosition: "thyPosition" }, exportAs: ["ThyTimelineItem"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 2, vars: 0, consts: [["timelineItem", ""], [1, "thy-timeline-item"], [1, "thy-timeline-item-tail"], [1, "thy-timeline-item-dot"], [4, "ngIf"], [1, "thy-timeline-item-content"], [1, "thy-timeline-item-content-other-side"], [3, "ngTemplateOutlet"]], template: function ThyTimelineItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyTimelineItemComponent_ng_template_0_Template, 8, 24, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
ThyTimelineItemComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ThyTimelineService }
];
ThyTimelineItemComponent.propDecorators = {
    template: [{ type: ViewChild, args: ['timelineItem', { static: false },] }],
    className: [{ type: HostBinding, args: ['class',] }],
    thyColor: [{ type: Input }],
    thyPosition: [{ type: Input }],
    dot: [{ type: ContentChild, args: ['dot', { static: false },] }],
    description: [{ type: ContentChild, args: ['description', { static: false },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTimelineItemComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'thy-timeline-item',
                template: "<ng-template #timelineItem>\n  <div\n    class=\"thy-timeline-item\"\n    [class.thy-timeline-item-reverse-last]=\"isLast && reverse\"\n    [class.thy-timeline-item-last]=\"isLast\"\n    [class.thy-timeline-item-reverse-first]=\"isFirst && reverse\"\n    [class.thy-timeline-item-right]=\"(thyPosition || position) === 'right'\"\n    [class.thy-timeline-item-left]=\"(thyPosition || position) === 'left'\"\n  >\n    <div class=\"thy-timeline-item-tail\"></div>\n    <div\n      class=\"thy-timeline-item-dot\"\n      [class.thy-timeline-item-dot-primary]=\"color === 'primary'\"\n      [class.thy-timeline-item-dot-success]=\"color === 'success'\"\n      [class.thy-timeline-item-dot-warning]=\"color === 'warning'\"\n      [class.thy-timeline-item-dot-danger]=\"color === 'danger'\"\n      [class.thy-timeline-item-dot-info]=\"color === 'info'\"\n      [class.thy-timeline-item-dot-custom]=\"!!dot\"\n    >\n      <ng-template *ngIf=\"dot\" [ngTemplateOutlet]=\"dot\"></ng-template>\n    </div>\n    <div class=\"thy-timeline-item-content\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"thy-timeline-item-content-other-side\">\n      <ng-template *ngIf=\"description\" [ngTemplateOutlet]=\"description\"></ng-template>\n    </div>\n  </div>\n</ng-template>\n",
                exportAs: 'ThyTimelineItem'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ThyTimelineService }]; }, { thyColor: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['timelineItem', { static: false }]
        }], className: [{
            type: HostBinding,
            args: ['class']
        }], thyPosition: [{
            type: Input
        }], dot: [{
            type: ContentChild,
            args: ['dot', { static: false }]
        }], description: [{
            type: ContentChild,
            args: ['description', { static: false }]
        }] }); })();

var ThyTimeModes;
(function (ThyTimeModes) {
    ThyTimeModes["left"] = "left";
    ThyTimeModes["right"] = "right";
    ThyTimeModes["center"] = "center";
})(ThyTimeModes || (ThyTimeModes = {}));
class ThyTimelineComponent {
    constructor(cdr, timelineService) {
        this.cdr = cdr;
        this.timelineService = timelineService;
        this.thyDirection = 'vertical';
        this.timelineItems = [];
        this.destroy$ = new Subject();
        this.isTimeline = true;
        this.rightTimeline = false;
        this.centerTimeline = false;
        this.templateTimeline = false;
        this.horizontal = false;
    }
    ngOnChanges(changes) {
        const { thyMode, thyReverse } = changes;
        if (thyMode && !this.horizontal) {
            if (thyMode.currentValue === 'right') {
                this.rightTimeline = !this.templateTimeline;
                this.centerTimeline = false;
            }
            else if (thyMode.currentValue === 'center') {
                this.centerTimeline = true;
                this.rightTimeline = false;
            }
            else {
                this.rightTimeline = false;
                this.centerTimeline = false;
            }
        }
        if ((simpleChangeActivated(thyMode) && !this.horizontal) || simpleChangeActivated(thyReverse)) {
            this.updateChildren();
        }
    }
    ngOnInit() {
        this.horizontal = this.thyDirection === 'horizontal' ? true : false;
        this.timelineService.check$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.cdr.markForCheck();
        });
    }
    ngAfterContentInit() {
        this.updateChildren();
        this.listOfItems.changes.subscribe(() => {
            this.updateChildren();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    updateChildren() {
        if (this.listOfItems && this.listOfItems.length) {
            const length = this.listOfItems.length;
            this.listOfItems.forEach((item, index) => {
                item.isLast = !this.thyReverse ? index === length - 1 : index === 0;
                item.isFirst = this.thyReverse ? index === length - 1 : index === 0;
                item.reverse = this.thyReverse;
                if (!this.horizontal) {
                    item.position = getTimelineItemPosition(index, this.thyMode);
                }
                if (item.description || (item.thyPosition && !this.horizontal)) {
                    this.templateTimeline = true;
                }
                item.detectChanges();
            });
            this.timelineItems = this.thyReverse ? this.listOfItems.toArray().reverse() : this.listOfItems.toArray();
        }
        this.cdr.markForCheck();
    }
}
ThyTimelineComponent.ɵfac = function ThyTimelineComponent_Factory(t) { return new (t || ThyTimelineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ThyTimelineService)); };
ThyTimelineComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTimelineComponent, selectors: [["thy-timeline"]], contentQueries: function ThyTimelineComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyTimelineItemComponent, false);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listOfItems = _t);
    } }, hostVars: 10, hostBindings: function ThyTimelineComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-timeline", ctx.isTimeline)("thy-timeline-right", ctx.rightTimeline)("thy-timeline-center", ctx.centerTimeline)("thy-timeline-template", ctx.templateTimeline)("thy-timeline-horizontal", ctx.horizontal);
    } }, inputs: { thyDirection: "thyDirection", thyReverse: "thyReverse", thyMode: "thyMode" }, features: [ɵngcc0.ɵɵProvidersFeature([ThyTimelineService]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 3, vars: 1, consts: [[4, "ngFor", "ngForOf"], [3, "ngTemplateOutlet"]], template: function ThyTimelineComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtemplate(1, ThyTimelineComponent_ng_container_1_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.timelineItems);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
ThyTimelineComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ThyTimelineService }
];
ThyTimelineComponent.propDecorators = {
    thyReverse: [{ type: Input }],
    thyMode: [{ type: Input }],
    thyDirection: [{ type: Input }],
    isTimeline: [{ type: HostBinding, args: [`class.thy-timeline`,] }],
    rightTimeline: [{ type: HostBinding, args: [`class.thy-timeline-right`,] }],
    centerTimeline: [{ type: HostBinding, args: [`class.thy-timeline-center`,] }],
    templateTimeline: [{ type: HostBinding, args: [`class.thy-timeline-template`,] }],
    horizontal: [{ type: HostBinding, args: [`class.thy-timeline-horizontal`,] }],
    listOfItems: [{ type: ContentChildren, args: [ThyTimelineItemComponent,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTimelineComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'thy-timeline',
                providers: [ThyTimelineService],
                template: `
        <ng-container>
            <ng-container *ngFor="let item of timelineItems">
                <ng-template [ngTemplateOutlet]="item.template"></ng-template>
            </ng-container>
            <ng-content></ng-content>
        </ng-container>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ThyTimelineService }]; }, { thyDirection: [{
            type: Input
        }], isTimeline: [{
            type: HostBinding,
            args: [`class.thy-timeline`]
        }], rightTimeline: [{
            type: HostBinding,
            args: [`class.thy-timeline-right`]
        }], centerTimeline: [{
            type: HostBinding,
            args: [`class.thy-timeline-center`]
        }], templateTimeline: [{
            type: HostBinding,
            args: [`class.thy-timeline-template`]
        }], horizontal: [{
            type: HostBinding,
            args: [`class.thy-timeline-horizontal`]
        }], thyReverse: [{
            type: Input
        }], thyMode: [{
            type: Input
        }], listOfItems: [{
            type: ContentChildren,
            args: [ThyTimelineItemComponent]
        }] }); })();
function simpleChangeActivated(simpleChange) {
    return !!(simpleChange && (simpleChange.previousValue !== simpleChange.currentValue || simpleChange.isFirstChange()));
}
function getTimelineItemPosition(index, mode) {
    return mode === 'left' ? 'left' : mode === 'right' ? 'right' : mode === 'center' && index % 2 === 0 ? 'left' : 'right';
}

class ThyTimelineModule {
}
ThyTimelineModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyTimelineModule });
ThyTimelineModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyTimelineModule_Factory(t) { return new (t || ThyTimelineModule)(); }, providers: [], imports: [[CommonModule, ThySharedModule, ThyIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyTimelineModule, { declarations: function () { return [ThyTimelineComponent, ThyTimelineItemComponent]; }, imports: function () { return [CommonModule, ThySharedModule, ThyIconModule]; }, exports: function () { return [ThyTimelineComponent, ThyTimelineItemComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTimelineModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyTimelineComponent, ThyTimelineItemComponent],
                entryComponents: [],
                imports: [CommonModule, ThySharedModule, ThyIconModule],
                exports: [ThyTimelineComponent, ThyTimelineItemComponent],
                providers: []
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyTimeModes, ThyTimelineComponent, ThyTimelineItemComponent, ThyTimelineModule, ThyTimelineService };

//# sourceMappingURL=ngx-tethys-timeline.js.map
import { CommonModule } from '@angular/common';
import { Component, ViewEncapsulation, ElementRef, Input, HostBinding, ChangeDetectionStrategy, Renderer2, NgModule } from '@angular/core';
import { ThyIconModule } from 'ngx-tethys/icon';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/icon';

const _c0 = ["*"];
const _c1 = ["thy-button-icon", ""];
function ThyButtonIconComponent_thy_icon_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("color", ctx_r0.thyColor)("border-color", ctx_r0.thyColor);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r0.svgIconName);
} }
function ThyButtonIconComponent_ng_template_1_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 4);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("color", ctx_r3.thyColor)("border-color", ctx_r3.thyColor);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.iconClasses);
} }
function ThyButtonIconComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyButtonIconComponent_ng_template_1_i_0_Template, 1, 5, "i", 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.iconClasses);
} }
const _c2 = ["thy-button", ""];
function ThyButtonComponent_thy_icon_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r0.svgIconName);
} }
function ThyButtonComponent_ng_template_1_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 4);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3._iconClass);
} }
function ThyButtonComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyButtonComponent_ng_template_1_i_0_Template, 1, 1, "i", 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2._iconClass);
} }
const buttonGroupSizeMap = {
    sm: ['btn-group-sm'],
    md: ['btn-group-md'],
    lg: ['btn-group-lg'],
    xs: ['btn-group-xs']
};
const buttonGroupTypeMap = {
    'outline-primary': ['btn-group-outline-primary'],
    'outline-default': ['btn-group-outline-default']
};
class ThyButtonGroupComponent {
    constructor(updateHostClassService, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.initialized = false;
        this._isButtonGroup = true;
        this.thyClearMinWidthClassName = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        this.size = size;
        if (this.initialized) {
            this.setClasses();
        }
    }
    set thyType(type) {
        this.type = type;
        if (this.initialized) {
            this.setClasses();
        }
    }
    set thyClearMinWidth(value) {
        this.thyClearMinWidthClassName = coerceBooleanProperty(value);
    }
    ngOnInit() {
        this.setClasses();
        this.initialized = true;
    }
    setClasses() {
        let classNames = [];
        if (buttonGroupTypeMap[this.type]) {
            classNames = [...buttonGroupTypeMap[this.type]];
        }
        if (buttonGroupSizeMap[this.size]) {
            classNames.push(buttonGroupSizeMap[this.size]);
        }
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyButtonGroupComponent.ɵfac = function ThyButtonGroupComponent_Factory(t) { return new (t || ThyButtonGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyButtonGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyButtonGroupComponent, selectors: [["thy-button-group"]], hostVars: 4, hostBindings: function ThyButtonGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("btn-group", ctx._isButtonGroup)("btn-group-clear-min-width", ctx.thyClearMinWidthClassName);
    } }, inputs: { thySize: "thySize", thyType: "thyType", thyClearMinWidth: "thyClearMinWidth" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyButtonGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyButtonGroupComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyButtonGroupComponent.propDecorators = {
    thySize: [{ type: Input }],
    thyType: [{ type: Input }],
    thyClearMinWidth: [{ type: Input }],
    _isButtonGroup: [{ type: HostBinding, args: ['class.btn-group',] }],
    thyClearMinWidthClassName: [{ type: HostBinding, args: [`class.btn-group-clear-min-width`,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyButtonGroupComponent, [{
        type: Component,
        args: [{
                selector: 'thy-button-group',
                template: '<ng-content></ng-content>',
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { _isButtonGroup: [{
            type: HostBinding,
            args: ['class.btn-group']
        }], thyClearMinWidthClassName: [{
            type: HostBinding,
            args: [`class.btn-group-clear-min-width`]
        }], thySize: [{
            type: Input
        }], thyType: [{
            type: Input
        }], thyClearMinWidth: [{
            type: Input
        }] }); })();

const sizeClassesMap = {
    lg: ['btn-icon-lg'],
    sm: ['btn-icon-sm'],
    xs: ['btn-icon-xs']
};
const shapeClassesMap = {
    'circle-dashed': ['btn-icon-circle', 'circle-dashed'],
    'circle-solid': ['btn-icon-circle', 'circle-solid'],
    'circle-thick-dashed': ['btn-icon-circle', 'circle-dashed', 'border-thick'],
    'circle-thick-solid': ['btn-icon-circle', 'circle-solid', 'border-thick'],
    'self-icon': ['btn-icon-self-circle']
};
const themeClassesMap = {
    'danger-weak': ['btn-icon-danger-weak']
};
class ThyButtonIconComponent {
    constructor(elementRef, updateHostClassService) {
        this.updateHostClassService = updateHostClassService;
        this.initialized = false;
        this.iconPrefix = 'wtf';
        this._isBtn = true;
        this._isBtnIcon = true;
        this._isLighted = false;
        this._isActive = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        this.size = size;
        this.setClasses();
    }
    // 字体前缀，默认 wtf
    set thyIcon(icon) {
        this.setIconClass(icon);
    }
    set thyButtonIcon(icon) {
        this.setIconClass(icon);
    }
    set thyShape(value) {
        this.shape = value;
        this.setClasses();
    }
    set thyLight(value) {
        this._isLighted = coerceBooleanProperty(value);
    }
    set thyActive(value) {
        this._isActive = coerceBooleanProperty(value);
    }
    set thyTheme(value) {
        this.theme = value;
        this.setClasses();
    }
    setIconClass(icon) {
        if (icon) {
            if (icon.includes('wtf')) {
                const classes = icon.split(' ');
                if (classes.length === 1) {
                    classes.unshift('wtf');
                }
                this.iconClasses = classes;
                this.svgIconName = null;
            }
            else {
                this.svgIconName = icon;
            }
        }
        else {
            this.iconClasses = null;
            this.svgIconName = null;
        }
    }
    setClasses(first = false) {
        // 设置样式判断是否已经初始化，未初始化直接返回，除非是初次调用
        // 只有 ngOnInit 调用会传入 first = true
        if (!first && !this.initialized) {
            return;
        }
        const classes = sizeClassesMap[this.size] ? [...sizeClassesMap[this.size]] : [];
        if (this.shape && shapeClassesMap[this.shape]) {
            shapeClassesMap[this.shape].forEach((className) => {
                classes.push(className);
            });
        }
        if (this.theme && themeClassesMap[this.theme]) {
            themeClassesMap[this.theme].forEach((className) => {
                classes.push(className);
            });
        }
        this.updateHostClassService.updateClass(classes);
    }
    ngOnInit() {
        this.setClasses(true);
        this.initialized = true;
    }
}
ThyButtonIconComponent.ɵfac = function ThyButtonIconComponent_Factory(t) { return new (t || ThyButtonIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService)); };
ThyButtonIconComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyButtonIconComponent, selectors: [["", "thy-button-icon", ""], ["", "thyButtonIcon", ""]], hostVars: 8, hostBindings: function ThyButtonIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("btn", ctx._isBtn)("btn-icon", ctx._isBtnIcon)("btn-icon-light", ctx._isLighted)("btn-icon-active", ctx._isActive);
    } }, inputs: { thySize: "thySize", thyIcon: "thyIcon", thyButtonIcon: "thyButtonIcon", thyShape: "thyShape", thyLight: "thyLight", thyActive: "thyActive", thyTheme: "thyTheme", thyColor: "thyColor" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], attrs: _c1, ngContentSelectors: _c0, decls: 4, vars: 2, consts: [[3, "thyIconName", "color", "borderColor", 4, "ngIf", "ngIfElse"], ["iconFont", ""], [3, "thyIconName"], [3, "ngClass", "color", "borderColor", 4, "ngIf"], [3, "ngClass"]], template: function ThyButtonIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyButtonIconComponent_thy_icon_0_Template, 1, 5, "thy-icon", 0);
        ɵngcc0.ɵɵtemplate(1, ThyButtonIconComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵprojection(3);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.svgIconName)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ThyIconComponent, ɵngcc2.NgClass], encapsulation: 2, changeDetection: 0 });
ThyButtonIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThyButtonIconComponent.propDecorators = {
    thySize: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thyButtonIcon: [{ type: Input }],
    thyShape: [{ type: Input }],
    thyLight: [{ type: Input }],
    thyActive: [{ type: Input }],
    thyTheme: [{ type: Input }],
    _isBtn: [{ type: HostBinding, args: ['class.btn',] }],
    _isBtnIcon: [{ type: HostBinding, args: ['class.btn-icon',] }],
    _isLighted: [{ type: HostBinding, args: ['class.btn-icon-light',] }],
    _isActive: [{ type: HostBinding, args: ['class.btn-icon-active',] }],
    thyColor: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyButtonIconComponent, [{
        type: Component,
        args: [{
                selector: '[thy-button-icon],[thyButtonIcon]',
                template: "<thy-icon\n  *ngIf=\"svgIconName; else iconFont\"\n  [thyIconName]=\"svgIconName\"\n  [style.color]=\"thyColor\"\n  [style.borderColor]=\"thyColor\"\n></thy-icon>\n<ng-template #iconFont>\n  <i [ngClass]=\"iconClasses\" *ngIf=\"iconClasses\" [style.color]=\"thyColor\" [style.borderColor]=\"thyColor\"></i>\n</ng-template>\n<ng-content></ng-content>\n",
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.UpdateHostClassService }]; }, { _isBtn: [{
            type: HostBinding,
            args: ['class.btn']
        }], _isBtnIcon: [{
            type: HostBinding,
            args: ['class.btn-icon']
        }], _isLighted: [{
            type: HostBinding,
            args: ['class.btn-icon-light']
        }], _isActive: [{
            type: HostBinding,
            args: ['class.btn-icon-active']
        }], thySize: [{
            type: Input
        }], thyIcon: [{
            type: Input
        }], thyButtonIcon: [{
            type: Input
        }], thyShape: [{
            type: Input
        }], thyLight: [{
            type: Input
        }], thyActive: [{
            type: Input
        }], thyTheme: [{
            type: Input
        }], thyColor: [{
            type: Input
        }] }); })();

const btnTypeClassesMap = {
    primary: ['btn', 'btn-primary'],
    secondary: ['btn', 'btn-primary', 'btn-md'],
    info: ['btn', 'btn-info'],
    warning: ['btn', 'btn-warning'],
    danger: ['btn', 'btn-danger'],
    'outline-primary': ['btn', 'btn-outline-primary'],
    'outline-default': ['btn', 'btn-outline-default'],
    link: ['btn', 'btn-link'],
    'link-info': ['btn', 'btn-link', 'btn-link-info'],
    'link-secondary': ['btn', 'btn-link', 'btn-link-primary-weak'],
    'link-danger-weak': ['btn', 'btn-link', 'btn-link-danger-weak'],
    'link-danger': ['btn', 'btn-link', 'btn-link-danger'],
    'link-success': ['btn', 'btn-link', 'btn-link-success'] // 成功按钮
};
class ThyButtonComponent {
    constructor(elementRef, renderer, updateHostClassService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.updateHostClassService = updateHostClassService;
        this._initialized = false;
        // 圆角方形
        this._isRadiusSquare = false;
        this._nativeElement = this.elementRef.nativeElement;
        this.updateHostClassService.initializeElement(this._nativeElement);
    }
    _setBtnType(value) {
        if (value) {
            if (value.includes('-square')) {
                this._type = value.replace('-square', '');
                this._isRadiusSquare = true;
            }
            else {
                this._type = value;
            }
            if (this._initialized) {
                this._setClasses();
            }
        }
    }
    set thyButton(value) {
        this._setBtnType(value);
    }
    set thyType(value) {
        this._setBtnType(value);
    }
    set thyLoading(value) {
        const newLoading = coerceBooleanProperty(value);
        // from false to true
        if (!this._loading && newLoading) {
            this._loading = newLoading;
            this._originalText = this._nativeElement.innerText;
            this._setLoadingStatus();
        }
        else {
            this._loading = newLoading;
            this._setLoadingStatus();
        }
    }
    set thyLoadingText(value) {
        if (this._loadingText !== value) {
            this._loadingText = value;
            if (this._loading) {
                this.renderer.setProperty(this._nativeElement, 'innerText', this._loadingText);
            }
        }
    }
    set thySize(size) {
        this._size = size;
        if (this._initialized) {
            this._setClasses();
        }
    }
    set thyIcon(icon) {
        this._icon = icon;
        if (this._icon) {
            if (icon.includes('wtf')) {
                const classes = this._icon.split(' ');
                if (classes.length === 1) {
                    classes.unshift('wtf');
                }
                this._iconClass = classes;
            }
            else {
                this.svgIconName = icon;
            }
        }
        else {
            this._iconClass = null;
            this.svgIconName = null;
        }
    }
    set thySquare(value) {
        this._isRadiusSquare = coerceBooleanProperty(value);
    }
    _setLoadingStatus() {
        // let disabled = false;
        let innerText;
        if (this._loading) {
            // disabled = true;
            innerText = this._loadingText ? this._loadingText : null;
        }
        else {
            // disabled = false;
            innerText = this._originalText ? this._originalText : null;
        }
        // this.renderer.setProperty(this._nativeElement, 'disabled', disabled);
        this._setClasses();
        if (innerText) {
            this.renderer.setProperty(this._nativeElement, 'innerText', innerText);
        }
    }
    _setClasses() {
        let classNames = null;
        if (btnTypeClassesMap[this._type]) {
            classNames = [...btnTypeClassesMap[this._type]];
        }
        else {
            classNames = ['btn'];
            if (this._type) {
                classNames.push(`btn-${this._type}`);
            }
            // console.error(`button type (${this._type}) is not support`);
        }
        if (this._size) {
            classNames.push(`btn-${this._size}`);
        }
        if (this._icon) {
            classNames.push('btn-has-icon');
        }
        if (this._isRadiusSquare) {
            classNames.push('btn-square');
        }
        if (this._loading) {
            classNames.push('loading');
        }
        this.updateHostClassService.updateClass(classNames);
    }
    ngOnInit() {
        this._setClasses();
        this._initialized = true;
    }
}
ThyButtonComponent.ɵfac = function ThyButtonComponent_Factory(t) { return new (t || ThyButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService)); };
ThyButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyButtonComponent, selectors: [["", "thy-button", ""], ["", "thyButton", ""]], inputs: { thyButton: "thyButton", thyType: "thyType", thyLoading: "thyLoading", thyLoadingText: "thyLoadingText", thySize: "thySize", thyIcon: "thyIcon", thySquare: "thySquare" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], attrs: _c2, ngContentSelectors: _c0, decls: 4, vars: 2, consts: [[3, "thyIconName", 4, "ngIf", "ngIfElse"], ["iconFont", ""], [3, "thyIconName"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"]], template: function ThyButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyButtonComponent_thy_icon_0_Template, 1, 1, "thy-icon", 0);
        ɵngcc0.ɵɵtemplate(1, ThyButtonComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵprojection(3);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.svgIconName)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ThyIconComponent, ɵngcc2.NgClass], encapsulation: 2, changeDetection: 0 });
ThyButtonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: UpdateHostClassService }
];
ThyButtonComponent.propDecorators = {
    thyButton: [{ type: Input }],
    thyType: [{ type: Input }],
    thyLoading: [{ type: Input }],
    thyLoadingText: [{ type: Input }],
    thySize: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thySquare: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyButtonComponent, [{
        type: Component,
        args: [{
                selector: '[thy-button],[thyButton]',
                template: "<thy-icon *ngIf=\"svgIconName; else iconFont\" [thyIconName]=\"svgIconName\"></thy-icon>\n<ng-template #iconFont>\n  <i [ngClass]=\"_iconClass\" *ngIf=\"_iconClass\"></i>\n</ng-template>\n<ng-content></ng-content>\n",
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.UpdateHostClassService }]; }, { thyButton: [{
            type: Input
        }], thyType: [{
            type: Input
        }], thyLoading: [{
            type: Input
        }], thyLoadingText: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thyIcon: [{
            type: Input
        }], thySquare: [{
            type: Input
        }] }); })();

class ThyButtonModule {
}
ThyButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyButtonModule });
ThyButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyButtonModule_Factory(t) { return new (t || ThyButtonModule)(); }, imports: [[CommonModule, ThyIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyButtonModule, { declarations: function () { return [ThyButtonComponent, ThyButtonIconComponent, ThyButtonGroupComponent]; }, imports: function () { return [CommonModule, ThyIconModule]; }, exports: function () { return [ThyButtonComponent, ThyButtonIconComponent, ThyButtonGroupComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyButtonComponent, ThyButtonIconComponent, ThyButtonGroupComponent],
                imports: [CommonModule, ThyIconModule],
                exports: [ThyButtonComponent, ThyButtonIconComponent, ThyButtonGroupComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyButtonComponent, ThyButtonGroupComponent, ThyButtonIconComponent, ThyButtonModule };

//# sourceMappingURL=ngx-tethys-button.js.map
import { CommonModule } from '@angular/common';
import { InjectionToken, Component, ViewEncapsulation, ElementRef, Inject, HostBinding, Input, ChangeDetectionStrategy, ViewChildren, NgModule } from '@angular/core';
import { ThyTooltipModule } from 'ngx-tethys/tooltip';
import { UpdateHostClassService } from 'ngx-tethys/core';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/tooltip';

const _c0 = ["*"];
const _c1 = function (a0) { return { "cursor-pointer": a0 }; };
function ThyProgressComponent_ng_container_0_thy_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "thy-progress-bar", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("thyType", item_r4.type)("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c1, item_r4.tips || ctx_r3.thyTips))("thyTooltip", item_r4.tips || ctx_r3.thyTips)("thyTooltipTemplateContext", item_r4)("thyTooltipDisabled", !ctx_r3.thyTips && !item_r4.tips)("thyColor", item_r4.color)("thyValue", item_r4.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", item_r4.label, " ");
} }
function ThyProgressComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyProgressComponent_ng_container_0_thy_progress_bar_1_Template, 2, 10, "thy-progress-bar", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.value);
} }
function ThyProgressComponent_ng_template_1_thy_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "thy-progress-bar", 5);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("thyType", ctx_r5.thyType)("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c1, ctx_r5.thyTips))("thyTooltip", ctx_r5.thyTips)("thyTooltipTemplateContext", ctx_r5.value)("thyTooltipDisabled", !ctx_r5.thyTips)("thyValue", ctx_r5.value);
} }
function ThyProgressComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyProgressComponent_ng_template_1_thy_progress_bar_0_Template, 2, 8, "thy-progress-bar", 4);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.value);
} }
const THY_PROGRESS_COMPONENT = new InjectionToken('THY_PROGRESS_COMPONENT');
class ThyProgressBarComponent {
    constructor(updateHostClassService, elementRef, progress) {
        this.updateHostClassService = updateHostClassService;
        this.progress = progress;
        this.isProgressBar = true;
        this.percent = 0;
        this.color = '';
        updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thyType(type) {
        // this.type = type;
        this.updateHostClassService.updateClass(type ? [`progress-bar-${type}`, `bg-${type}`] : []);
    }
    set thyValue(value) {
        if (!value && value !== 0) {
            return;
        }
        this.value = value;
        this.recalculatePercentage();
    }
    set thyColor(color) {
        this.color = color || '';
    }
    recalculatePercentage() {
        this.percent = +((this.value / this.progress.max) * 100).toFixed(2);
        // if (this.progress && this.progress.bars) {
        //     const totalPercentage = this.progress.bars.reduce(function(total: number, bar): number {
        //         return total + bar.percent;
        //     }, 0);
        //     if (totalPercentage > 100) {
        //         this.percent -= totalPercentage - 100;
        //     }
        // }
    }
}
ThyProgressBarComponent.ɵfac = function ThyProgressBarComponent_Factory(t) { return new (t || ThyProgressBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_PROGRESS_COMPONENT)); };
ThyProgressBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyProgressBarComponent, selectors: [["thy-progress-bar"]], hostVars: 6, hostBindings: function ThyProgressBarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.percent, "%")("background-color", ctx.color);
        ɵngcc0.ɵɵclassProp("progress-bar", ctx.isProgressBar);
    } }, inputs: { thyType: "thyType", thyValue: "thyValue", thyColor: "thyColor", thyTips: "thyTips" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyProgressBarComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [THY_PROGRESS_COMPONENT,] }] }
];
ThyProgressBarComponent.propDecorators = {
    isProgressBar: [{ type: HostBinding, args: [`class.progress-bar`,] }],
    percent: [{ type: HostBinding, args: ['style.width.%',] }],
    color: [{ type: HostBinding, args: ['style.background-color',] }],
    thyTips: [{ type: Input }],
    thyType: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyColor: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyProgressBarComponent, [{
        type: Component,
        args: [{
                selector: 'thy-progress-bar',
                template: "<ng-content></ng-content>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [THY_PROGRESS_COMPONENT]
            }] }]; }, { isProgressBar: [{
            type: HostBinding,
            args: [`class.progress-bar`]
        }], percent: [{
            type: HostBinding,
            args: ['style.width.%']
        }], color: [{
            type: HostBinding,
            args: ['style.background-color']
        }], thyType: [{
            type: Input
        }], thyValue: [{
            type: Input
        }], thyColor: [{
            type: Input
        }], thyTips: [{
            type: Input
        }] }); })();

class ThyProgressComponent {
    constructor(updateHostClassService, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.bars = [];
        this.max = 100;
        this.isStacked = false;
        this.isProgress = true;
        this.updateHostClassService.initializeElement(elementRef);
    }
    set barsQueryList(value) {
        this.bars = value.toArray();
    }
    set thyValue(value) {
        this.isStacked = Array.isArray(value);
        this.value = value;
        // 自动求和计算 max
        if (this.isStacked) {
            this.thyMax = value.reduce((total, item) => {
                return total + item.value;
            }, 0);
        }
    }
    set thySize(size) {
        this.updateHostClassService.updateClass(size ? [`progress-${size}`] : []);
    }
    set thyMax(max) {
        this.max = max;
        this.bars.forEach(bar => {
            bar.recalculatePercentage();
        });
    }
}
ThyProgressComponent.ɵfac = function ThyProgressComponent_Factory(t) { return new (t || ThyProgressComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyProgressComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyProgressComponent, selectors: [["thy-progress"]], viewQuery: function ThyProgressComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(ThyProgressBarComponent, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.barsQueryList = _t);
    } }, hostVars: 5, hostBindings: function ThyProgressComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("max", ctx.max);
        ɵngcc0.ɵɵclassProp("progress-stacked", ctx.isStacked)("progress", ctx.isProgress);
    } }, inputs: { thyValue: "thyValue", thyMax: "thyMax", thySize: "thySize", thyType: "thyType", thyTips: "thyTips" }, features: [ɵngcc0.ɵɵProvidersFeature([
            UpdateHostClassService,
            {
                provide: THY_PROGRESS_COMPONENT,
                useExisting: ThyProgressComponent
            }
        ])], ngContentSelectors: _c0, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["general", ""], [3, "thyType", "ngClass", "thyTooltip", "thyTooltipTemplateContext", "thyTooltipDisabled", "thyColor", "thyValue", 4, "ngFor", "ngForOf"], [3, "thyType", "ngClass", "thyTooltip", "thyTooltipTemplateContext", "thyTooltipDisabled", "thyColor", "thyValue"], [3, "thyType", "ngClass", "thyTooltip", "thyTooltipTemplateContext", "thyTooltipDisabled", "thyValue", 4, "ngIf"], [3, "thyType", "ngClass", "thyTooltip", "thyTooltipTemplateContext", "thyTooltipDisabled", "thyValue"]], template: function ThyProgressComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyProgressComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, ThyProgressComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isStacked)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf, ThyProgressBarComponent, ɵngcc2.NgClass, ɵngcc3.ThyTooltipDirective], encapsulation: 2, changeDetection: 0 });
ThyProgressComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyProgressComponent.propDecorators = {
    max: [{ type: HostBinding, args: ['attr.max',] }],
    isStacked: [{ type: HostBinding, args: [`class.progress-stacked`,] }],
    isProgress: [{ type: HostBinding, args: [`class.progress`,] }],
    barsQueryList: [{ type: ViewChildren, args: [ThyProgressBarComponent,] }],
    thyType: [{ type: Input }],
    thyTips: [{ type: Input }],
    thyValue: [{ type: Input }],
    thySize: [{ type: Input }],
    thyMax: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyProgressComponent, [{
        type: Component,
        args: [{
                selector: 'thy-progress',
                template: "<ng-container *ngIf=\"isStacked; else general\">\n  <thy-progress-bar\n    *ngFor=\"let item of value\"\n    [thyType]=\"item.type\"\n    [ngClass]=\"{ 'cursor-pointer': item.tips || thyTips }\"\n    [thyTooltip]=\"item.tips || thyTips\"\n    [thyTooltipTemplateContext]=\"item\"\n    [thyTooltipDisabled]=\"!thyTips && !item.tips\"\n    [thyColor]=\"item.color\"\n    [thyValue]=\"item.value\"\n    >{{ item.label }}\n  </thy-progress-bar>\n</ng-container>\n\n<ng-template #general>\n  <thy-progress-bar\n    *ngIf=\"value\"\n    [thyType]=\"thyType\"\n    [ngClass]=\"{ 'cursor-pointer': thyTips }\"\n    [thyTooltip]=\"thyTips\"\n    [thyTooltipTemplateContext]=\"value\"\n    [thyTooltipDisabled]=\"!thyTips\"\n    [thyValue]=\"value\"\n  >\n    <ng-content></ng-content>\n  </thy-progress-bar>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    UpdateHostClassService,
                    {
                        provide: THY_PROGRESS_COMPONENT,
                        useExisting: ThyProgressComponent
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { max: [{
            type: HostBinding,
            args: ['attr.max']
        }], isStacked: [{
            type: HostBinding,
            args: [`class.progress-stacked`]
        }], isProgress: [{
            type: HostBinding,
            args: [`class.progress`]
        }], barsQueryList: [{
            type: ViewChildren,
            args: [ThyProgressBarComponent]
        }], thyValue: [{
            type: Input
        }], thyMax: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thyType: [{
            type: Input
        }], thyTips: [{
            type: Input
        }] }); })();

class ThyProgressModule {
}
ThyProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyProgressModule });
ThyProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyProgressModule_Factory(t) { return new (t || ThyProgressModule)(); }, imports: [[CommonModule, ThyTooltipModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyProgressModule, { declarations: function () { return [ThyProgressComponent, ThyProgressBarComponent]; }, imports: function () { return [CommonModule, ThyTooltipModule]; }, exports: function () { return [ThyProgressComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyProgressModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyProgressComponent, ThyProgressBarComponent],
                imports: [CommonModule, ThyTooltipModule],
                exports: [ThyProgressComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { THY_PROGRESS_COMPONENT, ThyProgressBarComponent, ThyProgressComponent, ThyProgressModule };

//# sourceMappingURL=ngx-tethys-progress.js.map
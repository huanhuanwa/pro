{"version":3,"file":"ngx-tethys-tree.js","sources":["../../src/tree/tree.class.ts","../../src/tree/tree.service.ts","../../src/tree/tree-node.class.ts","../../src/tree/tree.component.ts","../../src/tree/tree-node.component.ts","../../src/tree/tree-replace-region.component.ts","../../src/tree/tree.module.ts","../../src/tree/ngx-tethys-tree.ts"],"sourcesContent":["import { ThyDragDropEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\n\nexport enum ThyTreeNodeCheckState {\n    unchecked = 0,\n    checked = 1,\n    indeterminate = 2\n}\n\nexport interface ThyTreeNodeData<T = any> {\n    key?: number | string;\n\n    title?: string;\n\n    icon?: string;\n\n    iconStyle?: {\n        [key: string]: any;\n    };\n\n    children?: ThyTreeNodeData<T>[];\n\n    origin?: any;\n\n    expanded?: boolean;\n\n    disabled?: boolean;\n\n    checked?: boolean;\n\n    data?: T;\n\n    [key: string]: any;\n}\n\nexport interface ThyTreeEmitEvent<T = any> {\n    eventName: string;\n\n    node?: ThyTreeNode<T>;\n\n    event?: Event | any;\n\n    dragNode?: ThyTreeNode<T>;\n\n    targetNode?: ThyTreeNode<T>;\n}\n\nexport interface ThyTreeDragDropEvent<T = any> {\n    event?: ThyDragDropEvent;\n\n    currentIndex?: number;\n\n    dragNode?: ThyTreeNode<T>;\n\n    targetNode?: ThyTreeNode<T>;\n\n    afterNode?: ThyTreeNode<T>;\n}\n\nexport class ThyTreeIcons {\n    expand?: string;\n\n    collapse?: string;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { ThyTreeNodeCheckState } from './tree.class';\nimport { Subject } from 'rxjs';\nimport { ThyTreeNode } from './tree-node.class';\nimport { coerceArray } from 'ngx-tethys/util';\n\nfunction checkStateResolve(node: ThyTreeNode) {\n    const checkedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);\n    const unCheckedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.unchecked);\n    if (checkedNodes.length === node.children.length) {\n        return ThyTreeNodeCheckState.checked;\n    } else if (unCheckedNodes.length === node.children.length) {\n        return ThyTreeNodeCheckState.unchecked;\n    } else {\n        return ThyTreeNodeCheckState.indeterminate;\n    }\n}\n\n@Injectable()\nexport class ThyTreeService implements OnDestroy {\n    public treeNodes: ThyTreeNode[];\n\n    private checkStateResolve: (node: ThyTreeNode) => ThyTreeNodeCheckState = checkStateResolve;\n\n    $statusChange = new Subject<ThyTreeFormatEmitEvent>();\n\n    constructor() {}\n\n    private _getParallelTreeNodes(nodes: ThyTreeNode[], list: ThyTreeNode[] = []) {\n        (nodes || []).forEach(node => {\n            list.push(node);\n            this._getParallelTreeNodes(node.children || [], list);\n        });\n        return list;\n    }\n\n    setCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState = checkStateResolve) {\n        this.checkStateResolve = resolve;\n    }\n\n    public resetSortedTreeNodes(treeNodes: ThyTreeNode[], parent?: ThyTreeNode) {\n        treeNodes.forEach(node => {\n            node.level = node.parentNode ? node.parentNode.level + 1 : 0;\n            node.origin.children = node.children.map(n => n.origin);\n            node.parentNode = parent;\n            this.resetSortedTreeNodes(node.children, node);\n        });\n    }\n\n    public getTreeNode(key: string | number) {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.find(n => n.key === key);\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isExpanded);\n    }\n\n    public getCheckedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        const children = node.parentNode ? node.parentNode.children : this.treeNodes;\n        const index = children.findIndex(n => n.key === node.key);\n        if (index > -1) {\n            children.splice(index, 1);\n        }\n    }\n\n    public expandTreeNodes(keyOrKeys: string | number | (string | number)[]) {\n        const keys = coerceArray(keyOrKeys);\n        const needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(node => {\n            return keys.indexOf(node.key) > -1;\n        });\n        needExpandNodes.forEach(node => {\n            node.setExpanded(true);\n        });\n    }\n\n    public statusChanged() {\n        return this.$statusChange.asObservable();\n    }\n\n    // 设置节点选中状态\n    public setNodeChecked(node: ThyTreeNode, checked: boolean, propagateUp = true, propagateDown = true) {\n        node.isChecked = checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;\n        node.origin.checked = checked;\n        if (propagateDown && node.children) {\n            node.children.forEach(subNode => {\n                this.setNodeChecked(subNode, checked, false, true);\n            });\n        }\n        if (propagateUp) {\n            this.syncNodeCheckState(node.parentNode);\n        }\n    }\n\n    public syncNodeCheckState(node: ThyTreeNode) {\n        if (node) {\n            node.isChecked = this.checkStateResolve(node);\n            this.syncNodeCheckState(node.parentNode);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.$statusChange.complete();\n        this.$statusChange = null;\n    }\n}\n\nexport interface ThyTreeFormatEmitEvent {\n    eventName: string;\n    node: ThyTreeNode;\n    event?: MouseEvent | DragEvent;\n}\n","import { ThyTreeNodeData, ThyTreeNodeCheckState } from './tree.class';\nimport { ThyTreeService } from './tree.service';\nimport { helpers } from 'ngx-tethys/util';\n\nexport class ThyTreeNode<T = any> {\n    key?: number | string;\n\n    title?: string;\n\n    children: ThyTreeNode[];\n\n    parentNode: ThyTreeNode;\n\n    level = 0;\n\n    origin: ThyTreeNodeData<T>;\n\n    isExpanded: boolean;\n\n    isChecked: ThyTreeNodeCheckState;\n\n    isLoading: boolean;\n\n    isDisabled: boolean;\n\n    private readonly service: ThyTreeService;\n\n    get treeService(): ThyTreeService {\n        if (this.service) {\n            return this.service;\n        } else if (this.parentNode) {\n            return this.parentNode.treeService;\n        }\n    }\n\n    constructor(node: ThyTreeNodeData, parent: ThyTreeNode = null, service?: ThyTreeService) {\n        this.title = node.title;\n        this.key = node.key;\n        this.children = [];\n        this.parentNode = parent;\n        this.level = parent ? parent.level + 1 : this.level;\n        this.origin = node;\n        this.isDisabled = node.disabled || false;\n        this.isExpanded = node.expanded || false;\n        this.isChecked = node.checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;\n        this.isLoading = false;\n        if (node.children) {\n            node.children.forEach(childNode => {\n                this.children.push(new ThyTreeNode(childNode, this));\n            });\n        }\n        this.service = service;\n    }\n\n    public setKey(key: string) {\n        this.origin.key = key;\n        this.key = key;\n    }\n\n    public setTitle(title: string) {\n        this.origin.title = title;\n        this.title = title;\n    }\n\n    public setExpanded(expanded: boolean, propagate = false) {\n        this.origin.expanded = expanded;\n        this.isExpanded = expanded;\n        if (propagate && this.children) {\n            this.children.forEach(n => n.setExpanded(expanded, propagate));\n        }\n    }\n\n    public setLoading(loading: boolean): void {\n        this.isLoading = loading;\n    }\n\n    public setChecked(checked: boolean, propagateUp = true, propagateDown = true) {\n        this.treeService.setNodeChecked(this, checked, propagateUp, propagateDown);\n    }\n\n    public syncNodeCheckState() {\n        this.treeService.syncNodeCheckState(this);\n    }\n\n    public getParentNode(): ThyTreeNode {\n        return this.parentNode;\n    }\n\n    public getChildren(): ThyTreeNode[] {\n        return this.children;\n    }\n\n    public addChildren(children: ThyTreeNodeData | ThyTreeNodeData[], index: number = -1): void {\n        children = helpers.coerceArray(children);\n        ((children as ThyTreeNodeData[]) || []).forEach((childNode: ThyTreeNodeData, i: number) => {\n            if (index === -1) {\n                this.children.push(new ThyTreeNode(childNode, this));\n            } else {\n                this.children.splice(index + i, 0, new ThyTreeNode(childNode, this, this.treeService));\n            }\n        });\n\n        this.origin.children = this.getChildren().map(n => n.origin);\n        this.setLoading(false);\n        this.treeService.$statusChange.next({\n            eventName: 'addChildren',\n            node: this\n        });\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    ElementRef,\n    ViewEncapsulation,\n    TemplateRef,\n    OnInit,\n    OnChanges,\n    EventEmitter,\n    ContentChild,\n    HostBinding,\n    forwardRef,\n    SimpleChanges\n} from '@angular/core';\nimport { ThyTreeNodeData, ThyTreeEmitEvent, ThyTreeDragDropEvent, ThyTreeIcons, ThyTreeNodeCheckState } from './tree.class';\nimport { helpers } from 'ngx-tethys/util';\nimport { ThyTreeService } from './tree.service';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { ThyDragDropEvent, ThyDropPosition, ThyDragOverEvent, ThyDragStartEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\n\ntype ThyTreeSize = 'sm' | '';\n\ntype ThyTreeType = 'default' | 'especial';\n\nconst treeTypeClassMap: any = {\n    default: ['thy-tree-default'],\n    especial: ['thy-tree-especial']\n};\n\n@Component({\n    selector: 'thy-tree',\n    templateUrl: './tree.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ThyTreeComponent),\n            multi: true\n        },\n        ThyTreeService,\n        UpdateHostClassService\n    ]\n})\nexport class ThyTreeComponent implements ControlValueAccessor, OnInit, OnChanges {\n    private _templateRef: TemplateRef<any>;\n\n    private _emptyChildrenTemplateRef: TemplateRef<any>;\n\n    private _draggable = false;\n\n    private _expandedKeys: (string | number)[];\n\n    private _selectedKeys: (string | number)[];\n\n    public _selectionModel: SelectionModel<ThyTreeNode>;\n\n    public treeNodes: ThyTreeNode[];\n\n    @Input()\n    set thyNodes(value: ThyTreeNodeData[]) {\n        this._expandedKeys = this.getExpandedNodes().map(node => node.key);\n        this._selectedKeys = this.getSelectedNodes().map(node => node.key);\n        this.treeNodes = (value || []).map(node => new ThyTreeNode(node, null, this.thyTreeService));\n        this.thyTreeService.treeNodes = this.treeNodes;\n        this.thyTreeService.expandTreeNodes(this._expandedKeys);\n        this._selectTreeNodes(this._selectedKeys);\n    }\n\n    @Input() thyShowExpand: boolean | ((_: ThyTreeNodeData) => boolean) = true;\n\n    @HostBinding(`class.thy-multiple-selection-list`)\n    @Input()\n    thyMultiple = false;\n\n    @HostBinding('class.thy-tree-draggable')\n    @Input()\n    set thyDraggable(value: boolean) {\n        this._draggable = value;\n    }\n\n    get thyDraggable() {\n        return this._draggable;\n    }\n\n    @Input() thyCheckable: boolean;\n\n    @Input() set thyCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState) {\n        this.thyTreeService.setCheckStateResolve(resolve);\n    }\n\n    @Input() thyAsync = false;\n\n    private _thyType: ThyTreeType = 'default';\n\n    @Input()\n    set thyType(type: ThyTreeType) {\n        this._thyType = type;\n        if (type === 'especial') {\n            this.thyIcons = { expand: 'minus-square', collapse: 'plus-square' };\n        }\n    }\n\n    get thyType() {\n        return this._thyType;\n    }\n\n    @Input() thyIcons: ThyTreeIcons = {};\n\n    @Input() thySize: ThyTreeSize;\n\n    @Input() thyTitleTruncate = true;\n\n    @Input() set thySelectedKeys(keys: string[]) {\n        this._selectedKeys = keys;\n    }\n\n    @Input() thyBeforeDragStart: (e: ThyDragStartEvent) => boolean;\n\n    @Input() thyBeforeDragDrop: (e: ThyDragDropEvent) => boolean;\n\n    @Output() thyOnClick: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnExpandChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnDragDrop: EventEmitter<ThyTreeDragDropEvent> = new EventEmitter<ThyTreeDragDropEvent>();\n\n    @ContentChild('treeNodeTemplate', { static: true })\n    set templateRef(template: TemplateRef<any>) {\n        if (template) {\n            this._templateRef = template;\n        }\n    }\n\n    get templateRef() {\n        return this._templateRef;\n    }\n\n    @ContentChild('emptyChildrenTemplate', { static: true }) emptyChildrenTemplate: TemplateRef<any>;\n    set emptyChildrenTemplateRef(template: TemplateRef<any>) {\n        if (template) {\n            this._emptyChildrenTemplateRef = template;\n        }\n    }\n\n    get emptyChildrenTemplateRef() {\n        return this._emptyChildrenTemplateRef;\n    }\n\n    @HostBinding('class.thy-tree') thyTreeClass = true;\n\n    beforeDragOver = (event: ThyDragOverEvent<ThyTreeNode>) => {\n        return this.isShowExpand(event.item) || (!this.isShowExpand(event.item) && event.position !== ThyDropPosition.in);\n    };\n\n    private _onTouched: () => void = () => {};\n\n    private _onChange: (value: any) => void = (_: any) => {};\n\n    constructor(\n        private elementRef: ElementRef,\n        private updateHostClassService: UpdateHostClassService,\n        public thyTreeService: ThyTreeService\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.thyType && !changes.thyType.isFirstChange()) {\n            this._setTreeType();\n        }\n        if (changes.thyMultiple && !changes.thyMultiple.isFirstChange()) {\n            this._instanceSelectionModel();\n        }\n    }\n\n    ngOnInit(): void {\n        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);\n        this._setTreeType();\n        this._setTreeSize();\n        this._instanceSelectionModel();\n        this._selectTreeNodes(this._selectedKeys);\n    }\n\n    private _setTreeType() {\n        if (this.thyType) {\n            this.updateHostClassService.addClass(treeTypeClassMap[this.thyType]);\n        }\n    }\n\n    private _setTreeSize() {\n        if (this.thySize) {\n            this.updateHostClassService.addClass(`thy-tree-${this.thySize}`);\n        }\n    }\n\n    private _instanceSelectionModel() {\n        this._selectionModel = new SelectionModel<any>(this.thyMultiple);\n    }\n\n    private _selectTreeNodes(keys: (string | number)[]) {\n        (keys || []).forEach(key => {\n            const node = this.thyTreeService.getTreeNode(key);\n            if (node) {\n                this.selectTreeNode(this.thyTreeService.getTreeNode(key));\n            }\n        });\n    }\n\n    public isSelected(node: ThyTreeNode) {\n        return this._selectionModel.isSelected(node);\n    }\n\n    public toggleTreeNode(node: ThyTreeNode) {\n        if (node && !node.isDisabled) {\n            this._selectionModel.toggle(node);\n        }\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.key || index;\n    }\n\n    public onDragStart(event: ThyDragStartEvent<ThyTreeNode>) {\n        if (this.isShowExpand(event.item) && event.item.isExpanded) {\n            event.item.setExpanded(false);\n        }\n    }\n\n    public onDragDrop(event: ThyDragDropEvent<ThyTreeNode>) {\n        if (!this.isShowExpand(event.item) && event.position === ThyDropPosition.in) {\n            return;\n        }\n        const parent = event.previousItem.parentNode;\n        if (parent) {\n            parent.children = parent.children.filter(item => item !== event.previousItem);\n        } else {\n            this.treeNodes = this.treeNodes.filter(item => item !== event.previousItem);\n        }\n        switch (event.position) {\n            case ThyDropPosition.in:\n                event.item.addChildren(event.previousItem.origin);\n                break;\n            case ThyDropPosition.after:\n            case ThyDropPosition.before:\n                const targetParent = event.item.parentNode;\n                const index = event.position === ThyDropPosition.before ? 0 : 1;\n                if (targetParent) {\n                    targetParent.addChildren(event.previousItem.origin, targetParent.children.indexOf(event.item) + index);\n                } else {\n                    this.treeNodes.splice(this.treeNodes.indexOf(event.item) + index, 0, event.previousItem);\n                }\n                break;\n        }\n        this.thyTreeService.resetSortedTreeNodes(this.treeNodes);\n\n        let afterNode = null;\n        let targetNode = null;\n        if (event.position === ThyDropPosition.before) {\n            afterNode = event.containerItems[event.currentIndex - 1];\n            targetNode = event.item.parentNode;\n        } else if (event.position === ThyDropPosition.after) {\n            afterNode = event.containerItems[event.currentIndex];\n            targetNode = event.item.parentNode;\n        } else {\n            afterNode = event.item.children[event.item.children.length - 2];\n            targetNode = event.item;\n        }\n        this.thyOnDragDrop.emit({\n            event,\n            currentIndex: event.currentIndex,\n            dragNode: event.previousItem,\n            targetNode: targetNode,\n            afterNode: afterNode\n        });\n    }\n\n    public isShowExpand(node: ThyTreeNode) {\n        if (helpers.isFunction(this.thyShowExpand)) {\n            return (this.thyShowExpand as Function)(node);\n        } else {\n            return this.thyShowExpand;\n        }\n    }\n\n    writeValue(value: ThyTreeNodeData[]): void {\n        this.thyNodes = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n\n    // region Public Functions\n\n    public selectTreeNode(node: ThyTreeNode) {\n        this._selectionModel.select(node);\n    }\n\n    public getRootNodes(): ThyTreeNode[] {\n        return this.treeNodes;\n    }\n\n    public getTreeNode(key: string) {\n        return this.thyTreeService.getTreeNode(key);\n    }\n\n    public getSelectedNode(): ThyTreeNode {\n        return this._selectionModel ? this._selectionModel.selected[0] : null;\n    }\n\n    public getSelectedNodes(): ThyTreeNode[] {\n        return this._selectionModel ? this._selectionModel.selected : [];\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        return this.thyTreeService.getExpandedNodes();\n    }\n\n    public getCheckedNodes(): ThyTreeNode[] {\n        return this.thyTreeService.getCheckedNodes();\n    }\n\n    public addTreeNode(node: ThyTreeNodeData, parent?: ThyTreeNode, index = -1) {\n        if (parent) {\n            parent.addChildren(node, index);\n        } else {\n            if (index > -1) {\n                this.treeNodes.splice(index, 0, new ThyTreeNode(node, null, this.thyTreeService));\n            } else {\n                this.treeNodes.push(new ThyTreeNode(node, null, this.thyTreeService));\n            }\n        }\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        if (this.isSelected(node)) {\n            this._selectionModel.toggle(node);\n        }\n        this.thyTreeService.deleteTreeNode(node);\n    }\n\n    public expandAllNodes() {\n        const nodes = this.getRootNodes();\n        nodes.forEach(n => n.setExpanded(true, true));\n    }\n\n    public collapsedAllNodes() {\n        const nodes = this.getRootNodes();\n        nodes.forEach(n => n.setExpanded(false, true));\n    }\n\n    // endregion\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    Input,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    Output,\n    EventEmitter,\n    NgZone,\n    OnDestroy,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeData, ThyTreeNodeCheckState, ThyTreeEmitEvent } from './tree.class';\nimport { ThyTreeNode } from './tree-node.class';\nimport { ThyTreeService } from './tree.service';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ThyDragStartEvent } from 'ngx-tethys/drag-drop';\n\n@Component({\n    selector: 'thy-tree-node',\n    templateUrl: './tree-node.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeNodeComponent implements OnDestroy {\n    @Input() node: ThyTreeNode;\n\n    @Input() thyAsync = false;\n\n    @Input() thyMultiple = false;\n\n    @Input() thyDraggable = false;\n\n    @Input() thyCheckable = false;\n\n    @Input() thyTitleTruncate: boolean;\n\n    @Input() templateRef: TemplateRef<any>;\n\n    @Input() emptyChildrenTemplateRef: TemplateRef<any>;\n\n    @Output() thyOnClick: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnExpandChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @ContentChild('childrenTree') childrenTreeTemplateRef: TemplateRef<any>;\n\n    @ViewChild('title') titleInputElementRef: ElementRef<HTMLInputElement>;\n\n    @HostBinding('class.thy-tree-node') thyTreeNodeClass = true;\n\n    public get nodeIcon() {\n        return this.node.origin.icon;\n    }\n\n    public get nodeIconStyle() {\n        return this.node.origin.iconStyle;\n    }\n\n    private _showExpand: boolean | ((_: ThyTreeNode) => boolean);\n\n    destroy$ = new Subject();\n\n    checkState = ThyTreeNodeCheckState;\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    constructor(\n        public root: ThyTreeComponent,\n        public thyTreeService: ThyTreeService,\n        private ngZone: NgZone,\n        private cdr: ChangeDetectorRef\n    ) {\n        this.thyTreeService\n            .statusChanged()\n            .pipe(\n                filter(data => data.node.key === this.node.key),\n                takeUntil(this.destroy$)\n            )\n            .subscribe(() => {\n                this.markForCheck();\n            });\n    }\n\n    private changeDragIconVisibility(event: Event, showDragIcon: boolean): void {\n        const nodeElement = event.target as HTMLElement;\n        const dragIcon = nodeElement.querySelector('.thy-tree-drag-icon') as HTMLElement;\n        if (dragIcon) {\n            dragIcon.style.visibility = showDragIcon ? 'visible' : 'hidden';\n        }\n    }\n\n    public nodeMouseEnter(event: Event) {\n        if (!this.root.thyDraggable || this.node.isDisabled) {\n            return;\n        } else if (this.root.thyDraggable && !this.root.thyBeforeDragStart) {\n            this.changeDragIconVisibility(event, true);\n        } else {\n            const containerItems = this.node.getParentNode() ? this.node.getParentNode().getChildren() : this.root.treeNodes;\n            const dragStartEvent: ThyDragStartEvent = {\n                event: event as DragEvent,\n                item: this.node,\n                containerItems,\n                currentIndex: containerItems.indexOf(this.node)\n            };\n            this.changeDragIconVisibility(event, this.root.thyBeforeDragStart(dragStartEvent));\n        }\n    }\n\n    public nodeMouseLeave(event: Event) {\n        if (!this.root.thyDraggable || this.node.isDisabled) {\n            return;\n        } else {\n            this.changeDragIconVisibility(event, false);\n        }\n    }\n\n    public clickNode(event: Event) {\n        if (!this.root.thyMultiple) {\n            this.root.selectTreeNode(this.node);\n        } else {\n            this.root.toggleTreeNode(this.node);\n        }\n        this.thyOnClick.emit({\n            eventName: 'click',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public clickNodeCheck(event: Event) {\n        event.stopPropagation();\n        if (this.node.isChecked === ThyTreeNodeCheckState.unchecked || this.node.isChecked === ThyTreeNodeCheckState.indeterminate) {\n            this.node.setChecked(true);\n        } else {\n            this.node.setChecked(false);\n        }\n        this.thyOnCheckboxChange.emit({\n            eventName: 'checkboxChange',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public expandNode(event: Event) {\n        event.stopPropagation();\n        this.node.setExpanded(!this.node.isExpanded);\n        if (this.root.thyShowExpand) {\n            this.thyOnExpandChange.emit({\n                eventName: 'expand',\n                event: event,\n                node: this.node\n            });\n            if (this.thyAsync && this.node.children.length === 0) {\n                this.node.setLoading(true);\n            }\n        }\n    }\n\n    public isShowExpand(node: ThyTreeNode) {\n        return this.root.isShowExpand(node);\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ViewContainerRef,\n    Input,\n    OnInit\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\n\n@Component({\n    selector: '[ThyTreeReplaceRegion]',\n    template: '<ng-content></ng-content>',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeReplaceRegionComponent implements OnInit {\n    @Input() thyInstance: any;\n\n    constructor(\n        private root: ThyTreeComponent,\n        private viewRef: ViewContainerRef\n    ) {}\n\n    ngOnInit(): void {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeComponent } from './tree-node.component';\nimport { ThyTreeReplaceRegionComponent } from './tree-replace-region.component';\nimport { ThyInputModule } from 'ngx-tethys/input';\nimport { ThyButtonModule } from 'ngx-tethys/button';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyTreeService } from './tree.service';\nimport { ThyListModule } from 'ngx-tethys/list';\nimport { ThyOptionModule } from 'ngx-tethys/shared';\nimport { FormsModule } from '@angular/forms';\nimport { ThyLoadingModule } from 'ngx-tethys/loading';\nimport { ThyIconModule } from 'ngx-tethys/icon';\nimport { ThyDragDropModule } from 'ngx-tethys/drag-drop';\nimport { ThyCheckboxModule } from 'ngx-tethys/checkbox';\n\n@NgModule({\n    declarations: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],\n    imports: [\n        CommonModule,\n        ThyInputModule,\n        ThyButtonModule,\n        ThySharedModule,\n        FormsModule,\n        ThyListModule,\n        ThyOptionModule,\n        ThyLoadingModule,\n        ThyIconModule,\n        ThyDragDropModule,\n        ThyCheckboxModule\n    ],\n    entryComponents: [ThyTreeComponent],\n    exports: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],\n    providers: [ThyTreeService]\n})\nexport class ThyTreeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
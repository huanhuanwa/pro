import { Injectable, EventEmitter, Component, ChangeDetectionStrategy, ElementRef, HostBinding, Output, Input, Pipe, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { coerceBooleanProperty, isString } from 'ngx-tethys/util';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ThyIconModule } from 'ngx-tethys/icon';

class ThyAvatarService {
    constructor() {
        this.ignoreAvatarSrcPaths = [`default.png`];
    }
}
class ThyDefaultAvatarService extends ThyAvatarService {
    avatarSrcTransform(src, size) {
        return src;
    }
    nameTransform(name) {
        return name;
    }
}
ThyDefaultAvatarService.decorators = [
    { type: Injectable }
];

const sizeArray = [22, 24, 28, 32, 36, 48, 68, 110, 160];
const DEFAULT_SIZE = 36;
const thyAvatarSizeMap = {
    xxs: 22,
    xs: 24,
    sm: 32,
    md: 36,
    lg: 48
};
class ThyAvatarComponent {
    constructor(updateHostClassService, elementRef, thyAvatarService, domSanitizer) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.thyAvatarService = thyAvatarService;
        this.domSanitizer = domSanitizer;
        this._showRemove = false;
        this._isAvatar = true;
        this.thyOnRemove = new EventEmitter();
        this.thyError = new EventEmitter();
        updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySrc(value) {
        this._setAvatarSrc(value);
    }
    set thyName(value) {
        // this._name = value;
        this._setAvatarName(value);
    }
    set thySize(value) {
        if (thyAvatarSizeMap[value]) {
            this._setAvatarSize(thyAvatarSizeMap[value]);
        }
        else {
            this._setAvatarSize(value * 1);
        }
    }
    set thyShowRemove(value) {
        this._showRemove = coerceBooleanProperty(value);
    }
    _setAvatarSize(size) {
        if (sizeArray.indexOf(size) > -1) {
            this._size = size;
        }
        else {
            this._size = this.findClosestSize(sizeArray, size);
        }
    }
    findClosestSize(sizes, value) {
        let left = 0, right = sizes.length - 1, middle, result;
        while (left <= right) {
            middle = Math.floor((left + right) / 2);
            if (right - left <= 1) {
                result = sizes[right];
                break;
            }
            result = sizes[middle];
            if (result === value) {
                return value;
            }
            else if (result > value) {
                right = middle;
            }
            else {
                left = middle;
            }
        }
        return value - sizes[left] < sizes[right] - value ? sizes[left] : sizes[right];
    }
    _setAvatarSrc(src) {
        if (src && this.thyAvatarService.ignoreAvatarSrcPaths.indexOf(src) < 0) {
            this._src = src;
        }
        else {
            this._src = null;
        }
    }
    _setAvatarName(value) {
        const name = this.thyAvatarService.nameTransform(value);
        if (isString(name)) {
            this.avatarName = name;
        }
        else {
            this.avatarName = value;
            this.avatarNameSafeHtml = name;
        }
    }
    ngOnInit() {
        if (!this._size) {
            this._setAvatarSize(DEFAULT_SIZE);
        }
        this.updateHostClassService.updateClass([`thy-avatar-${this._size}`]);
    }
    remove($event) {
        this.thyOnRemove.emit($event);
    }
    avatarImgError($event) {
        this._setAvatarSrc(null);
        this.thyError.emit($event);
    }
}
ThyAvatarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-avatar',
                template: "<img\n  *ngIf=\"_src\"\n  [src]=\"_src | thyAvatarSrc: _size\"\n  class=\"avatar-avatar\"\n  [ngClass]=\"thyImgClass\"\n  alt=\"{{ avatarName || '' }}\"\n  (error)=\"avatarImgError($event)\"\n/>\n<span *ngIf=\"!_src\" class=\"avatar-default\" [ngStyle]=\"avatarName | avatarBgColor\">\n  <div>{{ avatarName | avatarShortName }}</div>\n</span>\n<ng-container *ngIf=\"thyShowName\">\n  <div *ngIf=\"!avatarNameSafeHtml\" class=\"avatar-name\">{{ avatarName }}</div>\n  <div *ngIf=\"avatarNameSafeHtml\" class=\"avatar-name\" [innerHtml]=\"avatarNameSafeHtml\"></div>\n</ng-container>\n<a *ngIf=\"_showRemove\" (click)=\"remove($event)\" href=\"javascript:;\" class=\"remove-link avatar-remove\"\n  ><thy-icon class=\"remove-link-icon\" thyIconName=\"close-circle-bold-fill\"></thy-icon\n></a>\n<div *ngIf=\"thyDisabled\" class=\"thy-avatar-disabled\">\n  <thy-icon class=\"thy-avatar-disabled-icon\" thyIconName=\"ban\"></thy-icon>\n</div>\n",
                providers: [UpdateHostClassService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyAvatarComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: ThyAvatarService },
    { type: DomSanitizer }
];
ThyAvatarComponent.propDecorators = {
    _isAvatar: [{ type: HostBinding, args: ['class.thy-avatar',] }],
    thyOnRemove: [{ type: Output }],
    thyError: [{ type: Output }],
    thyShowName: [{ type: Input }],
    thySrc: [{ type: Input }],
    thyName: [{ type: Input }],
    thySize: [{ type: Input }],
    thyShowRemove: [{ type: Input }],
    thyImgClass: [{ type: Input }],
    thyDisabled: [{ type: Input }]
};

class AvatarShortNamePipe {
    transform(name) {
        if (!name) {
            return;
        }
        name = name.trim();
        if (/^[\u4e00-\u9fa5]+$/.test(name)) {
            if (name.length > 2) {
                return name.substr(name.length - 2, 2);
            }
        }
        if (/^[a-zA-Z\/ ]+$/.test(name)) {
            if (name.indexOf(' ') > 0) {
                const ens = name.split(' ');
                return (ens[0].substr(0, 1) + ens[1].substr(0, 1)).toUpperCase();
            }
        }
        if (name.length > 2) {
            return name.substr(0, 2).toUpperCase();
        }
        return name.toUpperCase();
    }
}
AvatarShortNamePipe.decorators = [
    { type: Pipe, args: [{ name: 'avatarShortName' },] }
];
class AvatarBgColorPipe {
    transform(name) {
        if (!name) {
            return;
        }
        const colors = [
            '#56abfb',
            '#5dcfff',
            '#84e17e',
            '#73d897',
            '#ff9f73',
            '#fa8888',
            '#fb7fb7',
            '#9a7ef4',
            '#868af6'
        ];
        const nameArray = name.split('');
        const code = name && name.length > 0
            ? nameArray.reduce(function (result, item) {
                result.value += item.charCodeAt(0);
                return result;
            }, { value: 0 }).value
            : 0;
        return {
            'background-color': colors[code % 9]
        };
    }
}
AvatarBgColorPipe.decorators = [
    { type: Pipe, args: [{ name: 'avatarBgColor' },] }
];
class AvatarSrcPipe {
    constructor(thyAvatarService) {
        this.thyAvatarService = thyAvatarService;
    }
    transform(src, size) {
        return this.thyAvatarService.avatarSrcTransform(src, size);
    }
}
AvatarSrcPipe.decorators = [
    { type: Pipe, args: [{ name: 'thyAvatarSrc' },] }
];
AvatarSrcPipe.ctorParameters = () => [
    { type: ThyAvatarService }
];
const AvatarPipes = [AvatarShortNamePipe, AvatarBgColorPipe, AvatarSrcPipe];

class ThyAvatarModule {
}
ThyAvatarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyAvatarComponent, AvatarPipes],
                imports: [CommonModule, ThyIconModule],
                providers: [
                    {
                        provide: ThyAvatarService,
                        useClass: ThyDefaultAvatarService
                    }
                ],
                exports: [ThyAvatarComponent, AvatarPipes]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AvatarBgColorPipe, AvatarPipes, AvatarShortNamePipe, AvatarSrcPipe, ThyAvatarComponent, ThyAvatarModule, ThyAvatarService, ThyDefaultAvatarService, thyAvatarSizeMap };
//# sourceMappingURL=ngx-tethys-avatar.js.map

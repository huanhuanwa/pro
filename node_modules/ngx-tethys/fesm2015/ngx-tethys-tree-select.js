import { Component, forwardRef, ElementRef, Renderer2, NgZone, HostBinding, ContentChild, ViewChild, Input, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';
import { ThyLabelModule } from 'ngx-tethys/label';
import { getFlexiblePositions } from 'ngx-tethys/core';
import { warnDeprecation, isObject, isArray, produce } from 'ngx-tethys/util';
import { of } from 'rxjs';
import { take } from 'rxjs/operators';
import { ThyListModule } from 'ngx-tethys/list';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyEmptyModule } from 'ngx-tethys/empty';
import { ThySelectCommonModule } from 'ngx-tethys/shared';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
import * as ɵngcc2 from 'ngx-tethys/shared';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from 'ngx-tethys/empty';
import * as ɵngcc5 from 'ngx-tethys/icon';

const _c0 = ["thyTreeSelectTriggerDisplay"];
const _c1 = ["treeNodeTemplate"];
const _c2 = ["customDisplayTemplate"];
function ThyTreeSelectComponent_ng_template_2_ng_container_0_ng_template_1_Template(rf, ctx) { }
const _c3 = function (a0) { return { $implicit: a0 }; };
function ThyTreeSelectComponent_ng_template_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTreeSelectComponent_ng_template_2_ng_container_0_ng_template_1_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const node_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.thyTreeSelectTriggerDisplayRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c3, node_r4));
} }
function ThyTreeSelectComponent_ng_template_2_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const node_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r4[ctx_r7.thyShowKey], " ");
} }
function ThyTreeSelectComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyTreeSelectComponent_ng_template_2_ng_container_0_Template, 2, 4, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(1, ThyTreeSelectComponent_ng_template_2_ng_template_1_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r6 = ɵngcc0.ɵɵreference(2);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.thyTreeSelectTriggerDisplayRef)("ngIfElse", _r6);
} }
function ThyTreeSelectComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-tree-select-nodes", 7);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("treeNodes", ctx_r3.treeNodes);
} }
function ThyTreeSelectNodesComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 5);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    const _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c3, ctx_r5.treeNodes));
} }
function ThyTreeSelectNodesComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtemplate(1, ThyTreeSelectNodesComponent_div_0_ng_container_1_Template, 1, 4, "ng-container", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r0.treeNodes == null ? null : ctx_r0.treeNodes.length) > 0);
} }
function ThyTreeSelectNodesComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-empty", 6);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("thyMessage", ctx_r2.parent.thyEmptyOptionsText);
} }
function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_ng_template_1_Template(rf, ctx) { }
function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_6_ng_template_0_Template(rf, ctx) { }
function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_6_ng_template_0_Template, 0, 0, "ng-template", 5);
} if (rf & 2) {
    const node_r8 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r13.treeNodeTemplateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c3, node_r8));
} }
function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const node_r8 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r8[ctx_r15.showKey], " ");
} }
function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 17);
    ɵngcc0.ɵɵelement(1, "i", 18);
    ɵngcc0.ɵɵelementEnd();
} }
const _c4 = function (a0) { return { active: a0 }; };
const _c5 = function (a0) { return { "padding-left.px": a0 }; };
function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 10);
    ɵngcc0.ɵɵlistener("click", function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const node_r8 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.selectTreeNode($event, node_r8); });
    ɵngcc0.ɵɵtemplate(1, ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_ng_template_1_Template, 0, 0, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(3, "span", 11);
    ɵngcc0.ɵɵlistener("click", function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_Template_span_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const node_r8 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.nodeExpandToggle($event, node_r8); });
    ɵngcc0.ɵɵelement(4, "thy-icon", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 13);
    ɵngcc0.ɵɵtemplate(6, ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_6_Template, 1, 4, undefined, 14);
    ɵngcc0.ɵɵtemplate(7, ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_ng_template_7_Template, 1, 1, "ng-template", null, 15, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_span_9_Template, 2, 0, "span", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r14 = ɵngcc0.ɵɵreference(8);
    const node_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("disabled", ctx_r9.treeNodeIsDisable(node_r8));
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c4, ctx_r9.treeNodeIsSelected(node_r8)))("ngStyle", ɵngcc0.ɵɵpureFunction1(12, _c5, 20 * node_r8.level + ctx_r9.parent.icons.gap));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassProp("invisible", !((node_r8.children == null ? null : node_r8.children.length) > 0 || node_r8[ctx_r9.childCountKey] && node_r8[ctx_r9.childCountKey] > 0));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r9.treeNodeIsExpand(node_r8) ? ctx_r9.parent.icons.expand : ctx_r9.parent.icons.collapse);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.treeNodeTemplateRef)("ngIfElse", _r14);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.isMultiple);
} }
function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 5);
} if (rf & 2) {
    const node_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵnextContext(2);
    const _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c3, node_r8.children));
} }
function ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_a_1_Template, 10, 14, "a", 9);
    ɵngcc0.ɵɵtemplate(2, ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_ng_container_2_Template, 1, 4, "ng-container", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const node_r8 = ctx.$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.treeNodeIsHidden(node_r8));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.treeNodeIsExpand(node_r8) && (node_r8.children == null ? null : node_r8.children.length) > 0);
} }
function ThyTreeSelectNodesComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtemplate(1, ThyTreeSelectNodesComponent_ng_template_3_ng_container_1_Template, 3, 2, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const nodes_r6 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", nodes_r6);
} }
function filterTreeData(treeNodes, searchText, searchKey = 'name') {
    const filterNodes = (node, result) => {
        if (node[searchKey] && node[searchKey].indexOf(searchText) !== -1) {
            result.push(node);
            return result;
        }
        if (Array.isArray(node.children)) {
            const nodes = node.children.reduce((previous, current) => filterNodes(current, previous), []);
            if (nodes.length) {
                const parentNode = Object.assign(Object.assign({}, node), { children: nodes, expand: true });
                result.push(parentNode);
            }
        }
        return result;
    };
    const treeData = treeNodes.reduce((previous, current) => filterNodes(current, previous), []);
    return treeData;
}
class ThyTreeSelectComponent {
    constructor(elementRef, renderer, ngZone) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.treeSelectClass = true;
        this.isTreeSelect = true;
        // 菜单是否展开
        this.expandTreeSelectOptions = false;
        this.isMulti = false;
        this.selectedNodes = [];
        this.flattenTreeNodes = [];
        this.cdkConnectOverlayWidth = 0;
        this.icons = {
            expand: 'angle-down',
            collapse: 'angle-right',
            gap: 15
        };
        this.initialled = false;
        this.valueIsObject = false;
        this.thyPrimaryKey = '_id';
        this.thyShowKey = 'name';
        this.thyChildCountKey = 'childCount';
        this.thyMultiple = false;
        this.thyDisable = false;
        this.thyPlaceholder = '请选择节点';
        this.thyEmptyOptionsText = '暂时没有数据可选';
        this.thyHiddenNodeKey = 'hidden';
        this.thyDisableNodeKey = 'disabled';
        this.thyAsyncNode = false;
        this.thyShowWholeName = false;
        this.thyShowSearch = false;
        this.thyHiddenNodeFn = (node) => node.hidden;
        this.thyDisableNodeFn = (node) => node.disabled;
        this.thyGetNodeChildren = (node) => of([]);
        // TODO: 是否可以取消选中的node
        // @Input() thyUnRemoveSelectedNodeFn: Function;
        this.onModelChange = () => { };
        this.onModelTouch = () => { };
    }
    set thyTreeNodes(value) {
        this.treeNodes = value;
        this.originTreeNodes = value;
        if (this.initialled) {
            this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
            this.setSelectedNodes();
        }
    }
    get placeholder() {
        return this.thyPlaceholder;
    }
    set thyIconType(type) {
        warnDeprecation('This parameter has been deprecation');
        // if (type === 'especial') {
        //     this.icons = { expand: 'minus-square', collapse: 'plus-square', gap: 20 };
        // } else {
        //     this.icons = { expand: 'caret-right-down', collapse: 'caret-right', gap: 15 };
        // }
    }
    _getNgModelType() {
        if (this.thyMultiple) {
            this.valueIsObject = !this.selectedValue[0] || isObject(this.selectedValue[0]);
        }
        else {
            this.valueIsObject = isObject(this.selectedValue);
        }
    }
    writeValue(value) {
        this.selectedValue = value;
        if (value) {
            this._getNgModelType();
        }
        this.setSelectedNodes();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouch = fn;
    }
    onDocumentClick(event) {
        event.stopPropagation();
        if (!this.elementRef.nativeElement.contains(event.target) && this.expandTreeSelectOptions) {
            this.expandTreeSelectOptions = false;
        }
    }
    ngOnInit() {
        this.positions = getFlexiblePositions('bottom', 4);
        this.isMulti = this.thyMultiple;
        this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
        this.setSelectedNodes();
        this.initialled = true;
        this.init();
    }
    get selectedValueObject() {
        return this.thyMultiple ? this.selectedNodes : this.selectedNode;
    }
    searchValue(searchText) {
        this.treeNodes = filterTreeData(this.originTreeNodes, searchText.trim(), this.thyShowKey);
    }
    setPosition() {
        this.ngZone.onStable
            .asObservable()
            .pipe(take(1))
            .subscribe(() => {
            this.cdkConnectedOverlay.overlayRef.updatePosition();
        });
    }
    init() {
        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
    }
    flattenNodes(nodes = [], resultNodes = [], parentPrimaryValue = []) {
        resultNodes = resultNodes.concat(nodes);
        let nodesLeafs = [];
        (nodes || []).forEach(item => {
            item.parentValues = parentPrimaryValue;
            item.level = item.parentValues.length;
            if (item.children && isArray(item.children)) {
                const nodeLeafs = this.flattenNodes(item.children, resultNodes, [...parentPrimaryValue, item[this.thyPrimaryKey]]);
                nodesLeafs = [...nodesLeafs, ...nodeLeafs];
            }
        });
        return [...nodes, ...nodesLeafs];
    }
    _findTreeNode(value) {
        return (this.flattenTreeNodes || []).find(item => item[this.thyPrimaryKey] === value);
    }
    getShowNodeName() {
        if (this.thyShowWholeName) {
            let wholeName = '';
            (this.selectedNode.parentValues || []).forEach((item, index) => {
                const node = this._findTreeNode(item);
                wholeName = `${wholeName}${node[this.thyShowKey]} > `;
            });
            return `${wholeName}${this.selectedNode[this.thyShowKey]}`;
        }
        else {
            return this.selectedNode[this.thyShowKey];
        }
    }
    setSelectedNodes() {
        if (this.selectedValue) {
            // 多选数据初始化
            if (this.thyMultiple) {
                if (this.selectedValue.length > 0) {
                    if (this.valueIsObject && Object.keys(this.selectedValue[0]).indexOf(this.thyPrimaryKey) >= 0) {
                        this.selectedNodes = this.selectedValue.map((item) => {
                            return this._findTreeNode(item[this.thyPrimaryKey]);
                        });
                    }
                    else {
                        this.selectedNodes = this.selectedValue.map((item) => {
                            return this._findTreeNode(item);
                        });
                    }
                }
            }
            else {
                // 单选数据初始化
                if (this.valueIsObject) {
                    if (Object.keys(this.selectedValue).indexOf(this.thyPrimaryKey) >= 0) {
                        this.selectedNode = this._findTreeNode(this.selectedValue[this.thyPrimaryKey]);
                    }
                }
                else {
                    this.selectedNode = this._findTreeNode(this.selectedValue);
                }
            }
        }
        else {
            this.selectedNodes = [];
            this.selectedNode = null;
        }
    }
    openSelectPop() {
        if (this.thyDisable) {
            return;
        }
        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
        this.expandTreeSelectOptions = !this.expandTreeSelectOptions;
    }
    close() {
        this.expandTreeSelectOptions = false;
    }
    clearSelectedValue(event) {
        event.stopPropagation();
        this.selectedValue = null;
        this.selectedNode = null;
        this.selectedNodes = [];
        this.onModelChange(this.selectedValue);
    }
    _changeSelectValue() {
        if (this.valueIsObject) {
            this.selectedValue = this.thyMultiple ? this.selectedNodes : this.selectedNode;
        }
        else {
            this.selectedValue = this.thyMultiple
                ? this.selectedNodes.map(item => item[this.thyPrimaryKey])
                : this.selectedNode[this.thyPrimaryKey];
        }
        this.onModelChange(this.selectedValue);
    }
    removeMultipleSelectedNode(event) {
        this.removeSelectedNode(event.item, event.$event);
    }
    // thyMultiple = true 时，移除数据时调用
    removeSelectedNode(node, event) {
        if (event) {
            event.stopPropagation();
        }
        if (this.thyDisable) {
            return;
        }
        if (this.thyMultiple) {
            this.selectedNodes = produce(this.selectedNodes).remove((item) => {
                return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];
            });
            this._changeSelectValue();
        }
    }
    selectNode(node) {
        if (!this.thyMultiple) {
            this.selectedNode = node;
            this.expandTreeSelectOptions = false;
        }
        else {
            if (this.selectedNodes.find(item => {
                return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];
            })) {
                this.removeSelectedNode(node);
            }
            else {
                this.selectedNodes = produce(this.selectedNodes).add(node);
            }
        }
        this._changeSelectValue();
    }
    getNodeChildren(node) {
        const result = this.thyGetNodeChildren(node);
        if (result && result.subscribe) {
            result.pipe().subscribe((data) => {
                const nodes = this.flattenNodes(data, this.flattenTreeNodes, [...node.parentValues, node[this.thyPrimaryKey]]);
                const otherNodes = nodes.filter((item) => {
                    return !this.flattenTreeNodes.find(hasItem => {
                        return hasItem[this.thyPrimaryKey] === item[this.thyPrimaryKey];
                    });
                });
                this.flattenTreeNodes = [...this.flattenTreeNodes, ...otherNodes];
                node.children = data;
            });
            return result;
        }
    }
}
ThyTreeSelectComponent.ɵfac = function ThyTreeSelectComponent_Factory(t) { return new (t || ThyTreeSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ThyTreeSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTreeSelectComponent, selectors: [["thy-tree-select"]], contentQueries: function ThyTreeSelectComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thyTreeSelectTriggerDisplayRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeTemplateRef = _t.first);
    } }, viewQuery: function ThyTreeSelectComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(CdkOverlayOrigin, true);
        ɵngcc0.ɵɵstaticViewQuery(CdkConnectedOverlay, true);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cdkOverlayOrigin = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cdkConnectedOverlay = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customDisplayTemplate = _t.first);
    } }, hostVars: 8, hostBindings: function ThyTreeSelectComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyTreeSelectComponent_click_HostBindingHandler($event) { return ctx.onDocumentClick($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-select-custom", ctx.treeSelectClass)("thy-select", ctx.isTreeSelect)("menu-is-opened", ctx.expandTreeSelectOptions)("thy-select-custom--multiple", ctx.isMulti);
    } }, inputs: { thyPrimaryKey: "thyPrimaryKey", thyShowKey: "thyShowKey", thyChildCountKey: "thyChildCountKey", thyMultiple: "thyMultiple", thyDisable: "thyDisable", thyPlaceholder: "thyPlaceholder", thyEmptyOptionsText: "thyEmptyOptionsText", thyHiddenNodeKey: "thyHiddenNodeKey", thyDisableNodeKey: "thyDisableNodeKey", thyAsyncNode: "thyAsyncNode", thyShowWholeName: "thyShowWholeName", thyShowSearch: "thyShowSearch", thyHiddenNodeFn: "thyHiddenNodeFn", thyDisableNodeFn: "thyDisableNodeFn", thyGetNodeChildren: "thyGetNodeChildren", thyTreeNodes: "thyTreeNodes", thyIconType: "thyIconType", thyAllowClear: "thyAllowClear", thySize: "thySize" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThyTreeSelectComponent),
                multi: true
            }
        ])], decls: 5, vars: 14, consts: [["cdkOverlayOrigin", "", "thySelectControl", "", 3, "thyPanelOpened", "thySelectedOptions", "thyIsMultiple", "thyAllowClear", "thySize", "thyPlaceholder", "customDisplayTemplate", "thyShowSearch", "thyDisabled", "click", "thyOnClear", "thyOnRemove", "thyOnSearch"], ["origin", "cdkOverlayOrigin"], ["customDisplayTemplate", ""], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayWidth", "cdkConnectedOverlayOpen", "detach"], [4, "ngIf", "ngIfElse"], ["noneTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "treeNodes"]], template: function ThyTreeSelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("click", function ThyTreeSelectComponent_Template_div_click_0_listener() { return ctx.openSelectPop(); })("thyOnClear", function ThyTreeSelectComponent_Template_div_thyOnClear_0_listener($event) { return ctx.clearSelectedValue($event); })("thyOnRemove", function ThyTreeSelectComponent_Template_div_thyOnRemove_0_listener($event) { return ctx.removeMultipleSelectedNode($event); })("thyOnSearch", function ThyTreeSelectComponent_Template_div_thyOnSearch_0_listener($event) { return ctx.searchValue($event); });
        ɵngcc0.ɵɵtemplate(2, ThyTreeSelectComponent_ng_template_2_Template, 3, 2, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ThyTreeSelectComponent_ng_template_4_Template, 1, 1, "ng-template", 3);
        ɵngcc0.ɵɵlistener("detach", function ThyTreeSelectComponent_Template_ng_template_detach_4_listener() { return ctx.close(); });
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("thyPanelOpened", ctx.expandTreeSelectOptions)("thySelectedOptions", ctx.selectedValueObject)("thyIsMultiple", ctx.thyMultiple)("thyAllowClear", ctx.thyAllowClear)("thySize", ctx.thySize)("thyPlaceholder", ctx.placeholder)("customDisplayTemplate", _r1)("thyShowSearch", ctx.thyShowSearch)("thyDisabled", ctx.thyDisable);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("cdkConnectedOverlayHasBackdrop", false)("cdkConnectedOverlayPositions", ctx.positions)("cdkConnectedOverlayOrigin", _r0)("cdkConnectedOverlayWidth", ctx.cdkConnectOverlayWidth)("cdkConnectedOverlayOpen", ctx.expandTreeSelectOptions);
    } }, directives: function () { return [ɵngcc1.CdkOverlayOrigin, ɵngcc2.ThySelectControlComponent, ɵngcc1.CdkConnectedOverlay, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ThyTreeSelectNodesComponent]; }, encapsulation: 2 });
ThyTreeSelectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
ThyTreeSelectComponent.propDecorators = {
    treeSelectClass: [{ type: HostBinding, args: ['class.thy-select-custom',] }],
    isTreeSelect: [{ type: HostBinding, args: ['class.thy-select',] }],
    expandTreeSelectOptions: [{ type: HostBinding, args: ['class.menu-is-opened',] }],
    isMulti: [{ type: HostBinding, args: ['class.thy-select-custom--multiple',] }],
    thyTreeSelectTriggerDisplayRef: [{ type: ContentChild, args: ['thyTreeSelectTriggerDisplay',] }],
    treeNodeTemplateRef: [{ type: ContentChild, args: ['treeNodeTemplate',] }],
    cdkOverlayOrigin: [{ type: ViewChild, args: [CdkOverlayOrigin, { static: true },] }],
    cdkConnectedOverlay: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: true },] }],
    customDisplayTemplate: [{ type: ViewChild, args: ['customDisplayTemplate', { static: true },] }],
    thyTreeNodes: [{ type: Input }],
    thyPrimaryKey: [{ type: Input }],
    thyShowKey: [{ type: Input }],
    thyChildCountKey: [{ type: Input }],
    thyAllowClear: [{ type: Input }],
    thyMultiple: [{ type: Input }],
    thyDisable: [{ type: Input }],
    thyPlaceholder: [{ type: Input }],
    thySize: [{ type: Input }],
    thyEmptyOptionsText: [{ type: Input }],
    thyHiddenNodeKey: [{ type: Input }],
    thyDisableNodeKey: [{ type: Input }],
    thyAsyncNode: [{ type: Input }],
    thyShowWholeName: [{ type: Input }],
    thyShowSearch: [{ type: Input }],
    thyIconType: [{ type: Input }],
    thyHiddenNodeFn: [{ type: Input }],
    thyDisableNodeFn: [{ type: Input }],
    thyGetNodeChildren: [{ type: Input }],
    onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeSelectComponent, [{
        type: Component,
        args: [{
                selector: 'thy-tree-select',
                template: "<div\n  cdkOverlayOrigin\n  thySelectControl\n  (click)=\"openSelectPop()\"\n  #origin=\"cdkOverlayOrigin\"\n  [thyPanelOpened]=\"expandTreeSelectOptions\"\n  [thySelectedOptions]=\"selectedValueObject\"\n  [thyIsMultiple]=\"thyMultiple\"\n  [thyAllowClear]=\"thyAllowClear\"\n  [thySize]=\"thySize\"\n  [thyPlaceholder]=\"placeholder\"\n  [customDisplayTemplate]=\"customDisplayTemplate\"\n  [thyShowSearch]=\"thyShowSearch\"\n  [thyDisabled]=\"thyDisable\"\n  (thyOnClear)=\"clearSelectedValue($event)\"\n  (thyOnRemove)=\"removeMultipleSelectedNode($event)\"\n  (thyOnSearch)=\"searchValue($event)\"\n>\n  <ng-template #customDisplayTemplate let-node>\n    <ng-container *ngIf=\"thyTreeSelectTriggerDisplayRef; else noneTemplate\">\n      <ng-template [ngTemplateOutlet]=\"thyTreeSelectTriggerDisplayRef\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n    </ng-container>\n    <ng-template #noneTemplate>\n      {{ node[thyShowKey] }}\n    </ng-template>\n  </ng-template>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayHasBackdrop]=\"false\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayWidth]=\"cdkConnectOverlayWidth\"\n  [cdkConnectedOverlayOpen]=\"expandTreeSelectOptions\"\n  (detach)=\"close()\"\n>\n  <thy-tree-select-nodes [treeNodes]=\"treeNodes\"></thy-tree-select-nodes>\n</ng-template>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyTreeSelectComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { treeSelectClass: [{
            type: HostBinding,
            args: ['class.thy-select-custom']
        }], isTreeSelect: [{
            type: HostBinding,
            args: ['class.thy-select']
        }], expandTreeSelectOptions: [{
            type: HostBinding,
            args: ['class.menu-is-opened']
        }], isMulti: [{
            type: HostBinding,
            args: ['class.thy-select-custom--multiple']
        }], thyPrimaryKey: [{
            type: Input
        }], thyShowKey: [{
            type: Input
        }], thyChildCountKey: [{
            type: Input
        }], thyMultiple: [{
            type: Input
        }], thyDisable: [{
            type: Input
        }], thyPlaceholder: [{
            type: Input
        }], thyEmptyOptionsText: [{
            type: Input
        }], thyHiddenNodeKey: [{
            type: Input
        }], thyDisableNodeKey: [{
            type: Input
        }], thyAsyncNode: [{
            type: Input
        }], thyShowWholeName: [{
            type: Input
        }], thyShowSearch: [{
            type: Input
        }], thyHiddenNodeFn: [{
            type: Input
        }], thyDisableNodeFn: [{
            type: Input
        }], thyGetNodeChildren: [{
            type: Input
        }], thyTreeNodes: [{
            type: Input
        }], thyIconType: [{
            type: Input
        }], onDocumentClick: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }], thyTreeSelectTriggerDisplayRef: [{
            type: ContentChild,
            args: ['thyTreeSelectTriggerDisplay']
        }], treeNodeTemplateRef: [{
            type: ContentChild,
            args: ['treeNodeTemplate']
        }], cdkOverlayOrigin: [{
            type: ViewChild,
            args: [CdkOverlayOrigin, { static: true }]
        }], cdkConnectedOverlay: [{
            type: ViewChild,
            args: [CdkConnectedOverlay, { static: true }]
        }], customDisplayTemplate: [{
            type: ViewChild,
            args: ['customDisplayTemplate', { static: true }]
        }], thyAllowClear: [{
            type: Input
        }], thySize: [{
            type: Input
        }] }); })();

class ThyTreeSelectNodesComponent {
    constructor(parent) {
        this.parent = parent;
        this.primaryKey = this.parent.thyPrimaryKey;
        this.showKey = this.parent.thyShowKey;
        this.isMultiple = this.parent.thyMultiple;
        this.valueIsObject = this.parent.valueIsObject;
        this.selectedValue = this.parent.selectedValue;
        this.childCountKey = this.parent.thyChildCountKey;
        this.treeNodeTemplateRef = this.parent.treeNodeTemplateRef;
    }
    ngOnInit() {
        this.class = this.isMultiple ? 'thy-tree-select-dropdown thy-tree-select-dropdown-multiple' : 'thy-tree-select-dropdown';
    }
    treeNodeIsSelected(node) {
        if (this.parent.thyMultiple) {
            return (this.parent.selectedNodes || []).find(item => {
                return item[this.primaryKey] === node[this.primaryKey];
            });
        }
        else {
            return this.parent.selectedNode && this.parent.selectedNode[this.primaryKey] === node[this.primaryKey];
        }
    }
    treeNodeIsHidden(node) {
        if (this.parent.thyHiddenNodeKey) {
            return node[this.parent.thyHiddenNodeKey];
        }
        if (this.parent.thyHiddenNodeFn) {
            return this.parent.thyHiddenNodeFn(node);
        }
        return false;
    }
    treeNodeIsDisable(node) {
        if (this.parent.thyDisableNodeKey) {
            return node[this.parent.thyDisableNodeKey];
        }
        if (this.parent.thyDisableNodeFn) {
            return this.parent.thyDisableNodeFn(node);
        }
        return false;
    }
    treeNodeIsExpand(node) {
        let isSelectedNodeParent = false;
        if (this.parent.thyMultiple) {
            isSelectedNodeParent = !!(this.parent.selectedNodes || []).find(item => {
                return item.parentValues.indexOf(node[this.primaryKey]) > -1;
            });
        }
        else {
            isSelectedNodeParent = this.parent.selectedNode
                ? this.parent.selectedNode.parentValues.indexOf(node[this.primaryKey]) > -1
                : false;
        }
        const isExpand = node.expand || (Object.keys(node).indexOf('expand') < 0 && isSelectedNodeParent);
        node.expand = isExpand;
        return isExpand;
    }
    getNodeChildren(node) {
        return this.parent.getNodeChildren(node);
    }
    selectTreeNode(event, node) {
        event.stopPropagation();
        if (this.treeNodeIsDisable(node)) {
            return;
        }
        this.parent.selectNode(node);
    }
    nodeExpandToggle(event, node) {
        event.stopPropagation();
        if (Object.keys(node).indexOf('expand') > -1) {
            node.expand = !node.expand;
        }
        else {
            if (this.treeNodeIsExpand(node)) {
                node.expand = false;
            }
            else {
                node.expand = true;
            }
        }
        if (node.expand && this.parent.thyAsyncNode) {
            this.getNodeChildren(node).subscribe(() => {
                this.parent.setPosition();
            });
        }
        this.parent.setPosition();
    }
}
ThyTreeSelectNodesComponent.ɵfac = function ThyTreeSelectNodesComponent_Factory(t) { return new (t || ThyTreeSelectNodesComponent)(ɵngcc0.ɵɵdirectiveInject(ThyTreeSelectComponent)); };
ThyTreeSelectNodesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTreeSelectNodesComponent, selectors: [["thy-tree-select-nodes"]], hostVars: 2, hostBindings: function ThyTreeSelectNodesComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.class);
    } }, inputs: { treeNodes: "treeNodes" }, decls: 5, vars: 2, consts: [["class", "thy-tree-select-options", 4, "ngIf", "ngIfElse"], ["emptyPlaceholder", ""], ["treeSelectNode", ""], [1, "thy-tree-select-options"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["thySize", "sm", 1, "thy-select-empty-content", 3, "thyMessage"], [1, "thy-tree-select-node"], [4, "ngFor", "ngForOf"], ["class", "thy-option-item", 3, "ngClass", "disabled", "ngStyle", "click", 4, "ngIf"], [1, "thy-option-item", 3, "ngClass", "ngStyle", "click"], [1, "thy-tree-select-option-icon", 3, "click"], [1, "node-expand-icon", 3, "thyIconName"], [1, "thy-tree-select-option-text"], [4, "ngIf", "ngIfElse"], ["defaultNodeText", ""], ["class", "checked-icon", 4, "ngIf"], [1, "checked-icon"], [1, "wtf", "wtf-checked"]], template: function ThyTreeSelectNodesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ThyTreeSelectNodesComponent_div_0_Template, 2, 1, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ThyTreeSelectNodesComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(3, ThyTreeSelectNodesComponent_ng_template_3_Template, 2, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.treeNodes == null ? null : ctx.treeNodes.length) > 0)("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.ThyEmptyComponent, ɵngcc3.NgForOf, ɵngcc3.NgClass, ɵngcc3.NgStyle, ɵngcc5.ThyIconComponent], encapsulation: 2 });
ThyTreeSelectNodesComponent.ctorParameters = () => [
    { type: ThyTreeSelectComponent }
];
ThyTreeSelectNodesComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    treeNodes: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeSelectNodesComponent, [{
        type: Component,
        args: [{
                selector: 'thy-tree-select-nodes',
                template: "<div class=\"thy-tree-select-options\" *ngIf=\"treeNodes?.length > 0; else emptyPlaceholder\">\n  <ng-container\n    *ngIf=\"treeNodes?.length > 0\"\n    [ngTemplateOutlet]=\"treeSelectNode\"\n    [ngTemplateOutletContext]=\"{ $implicit: treeNodes }\"\n  ></ng-container>\n</div>\n<ng-template #emptyPlaceholder>\n  <thy-empty class=\"thy-select-empty-content\" thySize=\"sm\" [thyMessage]=\"parent.thyEmptyOptionsText\"></thy-empty>\n</ng-template>\n<ng-template #treeSelectNode let-nodes>\n  <div class=\"thy-tree-select-node\">\n    <ng-container *ngFor=\"let node of nodes\">\n      <a\n        class=\"thy-option-item\"\n        [ngClass]=\"{ active: treeNodeIsSelected(node) }\"\n        [class.disabled]=\"treeNodeIsDisable(node)\"\n        [ngStyle]=\"{ 'padding-left.px': 20 * node.level + parent.icons.gap }\"\n        (click)=\"selectTreeNode($event, node)\"\n        *ngIf=\"!treeNodeIsHidden(node)\"\n      >\n        <ng-template #treeSelectNode> </ng-template>\n        <span\n          class=\"thy-tree-select-option-icon\"\n          [class.invisible]=\"!(node.children?.length > 0 || (node[childCountKey] && node[childCountKey] > 0))\"\n          (click)=\"nodeExpandToggle($event, node)\"\n        >\n          <thy-icon\n            class=\"node-expand-icon\"\n            [thyIconName]=\"treeNodeIsExpand(node) ? parent.icons.expand : parent.icons.collapse\"\n          ></thy-icon>\n        </span>\n        <span class=\"thy-tree-select-option-text\">\n          <ng-template\n            *ngIf=\"treeNodeTemplateRef; else defaultNodeText\"\n            [ngTemplateOutlet]=\"treeNodeTemplateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: node }\"\n          ></ng-template>\n          <ng-template #defaultNodeText>\n            {{ node[showKey] }}\n          </ng-template>\n        </span>\n        <span class=\"checked-icon\" *ngIf=\"isMultiple\">\n          <i class=\"wtf wtf-checked\"></i>\n        </span>\n      </a>\n      <ng-container\n        *ngIf=\"treeNodeIsExpand(node) && node.children?.length > 0\"\n        [ngTemplateOutlet]=\"treeSelectNode\"\n        [ngTemplateOutletContext]=\"{ $implicit: node.children }\"\n      ></ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ThyTreeSelectComponent }]; }, { class: [{
            type: HostBinding,
            args: ['class']
        }], treeNodes: [{
            type: Input
        }] }); })();

class ThyTreeSelectModule {
}
ThyTreeSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyTreeSelectModule });
ThyTreeSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyTreeSelectModule_Factory(t) { return new (t || ThyTreeSelectModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            OverlayModule,
            ThyLabelModule,
            ThyListModule,
            ThyIconModule,
            ThyEmptyModule,
            ThySelectCommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyTreeSelectModule, { declarations: function () { return [ThyTreeSelectComponent, ThyTreeSelectNodesComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        OverlayModule,
        ThyLabelModule,
        ThyListModule,
        ThyIconModule,
        ThyEmptyModule,
        ThySelectCommonModule]; }, exports: function () { return [ThyTreeSelectComponent, ThyTreeSelectNodesComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeSelectModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    OverlayModule,
                    ThyLabelModule,
                    ThyListModule,
                    ThyIconModule,
                    ThyEmptyModule,
                    ThySelectCommonModule
                ],
                declarations: [ThyTreeSelectComponent, ThyTreeSelectNodesComponent],
                exports: [ThyTreeSelectComponent, ThyTreeSelectNodesComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyTreeSelectComponent, ThyTreeSelectModule, ThyTreeSelectNodesComponent, filterTreeData };

//# sourceMappingURL=ngx-tethys-tree-select.js.map
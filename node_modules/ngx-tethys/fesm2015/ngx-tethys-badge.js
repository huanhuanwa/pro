import { Component, ElementRef, HostBinding, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { coerceBooleanProperty } from 'ngx-tethys/util';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ThyBadgeComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("thy-badge ", ctx_r0.badgeClassName, "");
    ɵngcc0.ɵɵstyleProp("color", ctx_r0.textColor)("background-color", ctx_r0.backgroundColor);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.displayContent);
} }
const _c0 = ["*"];
const BadgeMutexType = ['thy-badge-count', 'thy-badge-dot', 'thy-badge-hollow'];
const BadgeMutexTheme = ['thy-badge-primary', 'thy-badge-warning', 'thy-badge-danger', 'thy-badge-secondary'];
const BadgeMutexSize = ['thy-badge-lg', 'thy-badge-sm'];
class ThyBadgeComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.displayContent = '';
        this.badgeClassName = '';
        this._initialized = false;
        this.badgeClassNameMap = {
            'thy-badge-count': true,
            'thy-badge-dot': false,
            'thy-badge-hollow': false,
            'thy-badge-lg': false,
            'thy-badge-sm': false,
            'thy-badge-danger': true,
            'thy-badge-primary': false,
            'thy-badge-warning': false,
            'thy-badge-secondary': false,
            'thy-badge-sup': true,
            'thy-badge-multiple-words': false
        };
        this.st = {
            value: '',
            isValueOfString: false,
            isSetValue: false,
            isValueKeepShow: false,
            max: {
                is: false,
                value: null
            },
            isElement: false,
            isSup: false,
            isShowBadge: true
        };
        this.containerClassName = true;
        this.nativeElement = this.elementRef.nativeElement;
        this.st.isElement = this.nativeElement.localName === 'thy-badge';
    }
    set thyType(value) {
        this.resetBadgeClassNameMap(BadgeMutexTheme);
        switch (value) {
            case 'danger':
                this.badgeClassNameMap['thy-badge-danger'] = true;
                break;
            case 'primary':
                this.badgeClassNameMap['thy-badge-primary'] = true;
                break;
            case 'warning':
                this.badgeClassNameMap['thy-badge-warning'] = true;
                break;
            case 'secondary':
                this.badgeClassNameMap['thy-badge-secondary'] = true;
                break;
            default:
                this.badgeClassNameMap['thy-badge-danger'] = true;
                break;
        }
        if (this._initialized) {
            this.combineBadgeClassName();
        }
    }
    set thyCount(value) {
        this.st.value = value;
        this.st.isSetValue = true;
        if (this._initialized) {
            this.combineBadgeDisplayContent();
            this.combineBadgeClassName();
        }
    }
    set thyContext(value) {
        this.st.value = value;
        this.st.isValueOfString = true;
        this.st.isSetValue = true;
        if (this._initialized) {
            this.combineBadgeDisplayContent();
            this.combineBadgeClassName();
        }
    }
    set thyMaxCount(value) {
        this.st.max.is = true;
        this.st.max.value = value;
        if (this._initialized) {
            this.combineBadgeDisplayContent();
            this.combineBadgeClassName();
        }
    }
    set thySize(value) {
        this.resetBadgeClassNameMap(BadgeMutexSize);
        switch (value) {
            case 'lg':
                this.badgeClassNameMap['thy-badge-lg'] = true;
                break;
            case 'sm':
                this.badgeClassNameMap['thy-badge-sm'] = true;
                break;
        }
        if (this._initialized) {
            this.combineBadgeClassName();
        }
    }
    set thyIsDot(value) {
        this.resetBadgeClassNameMap(BadgeMutexType);
        this.badgeClassNameMap['thy-badge-dot'] = coerceBooleanProperty(value);
        if (this._initialized) {
            this.combineBadgeClassName();
        }
    }
    set thyIsHollow(value) {
        this.resetBadgeClassNameMap(BadgeMutexType);
        this.badgeClassNameMap['thy-badge-hollow'] = coerceBooleanProperty(value);
        if (this._initialized) {
            this.combineBadgeClassName();
        }
    }
    set thyKeepShow(value) {
        this.st.isValueKeepShow = coerceBooleanProperty(value);
        if (this._initialized) {
            this.combineBadgeDisplayContent();
        }
    }
    set thyTextColor(value) {
        this.textColor = value;
    }
    set thyBackgroundColor(value) {
        this.backgroundColor = value;
        this.resetBadgeClassNameMap(BadgeMutexTheme);
    }
    ngOnInit() {
        let childNodeCount = 0;
        this.nativeElement.childNodes.forEach((n) => {
            if (['#comment'].indexOf(n.nodeName) < 0) {
                childNodeCount++;
            }
        });
        this.st.isSup = childNodeCount > 0;
        this.combineBadgeClassName();
        if (this.st.isSetValue) {
            this.combineBadgeDisplayContent();
        }
        this._initialized = true;
    }
    combineBadgeClassName() {
        this.badgeClassNameMap['thy-badge-sup'] = this.st.isSup;
        this.explorationValueLength();
        const _badgeClassNames = [];
        for (const key in this.badgeClassNameMap) {
            if (this.badgeClassNameMap.hasOwnProperty(key)) {
                if (this.badgeClassNameMap[key]) {
                    _badgeClassNames.push(key);
                }
            }
        }
        this.badgeClassName = _badgeClassNames.join(' ');
    }
    combineBadgeDisplayContent() {
        this.displayContent = this.st.value;
        if (this.st.value && this.st.max.is && this.st.value > this.st.max.value) {
            this.displayContent = `${this.st.max.value}+`;
        }
        if (!this.st.value && !this.st.isValueKeepShow) {
            this.st.isShowBadge = false;
        }
        else {
            this.st.isShowBadge = true;
        }
    }
    explorationValueLength() {
        if (this.st.value && this.st.value.toString().length > 1 && this.st.isSup) {
            this.badgeClassNameMap['thy-badge-multiple-words'] = true;
        }
    }
    resetBadgeClassNameMap(mutexArray) {
        for (const key in this.badgeClassNameMap) {
            if (this.badgeClassNameMap.hasOwnProperty(key)) {
                if (mutexArray.includes(key)) {
                    this.badgeClassNameMap[key] = false;
                }
            }
        }
    }
}
ThyBadgeComponent.ɵfac = function ThyBadgeComponent_Factory(t) { return new (t || ThyBadgeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyBadgeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyBadgeComponent, selectors: [["thy-badge"], ["", "thyBadge", ""]], hostVars: 2, hostBindings: function ThyBadgeComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-badge-container", ctx.containerClassName);
    } }, inputs: { thyType: "thyType", thyCount: "thyCount", thyContext: "thyContext", thyMaxCount: "thyMaxCount", thySize: "thySize", thyIsDot: "thyIsDot", thyIsHollow: "thyIsHollow", thyKeepShow: "thyKeepShow", thyTextColor: "thyTextColor", thyBackgroundColor: "thyBackgroundColor" }, ngContentSelectors: _c0, decls: 3, vars: 1, consts: [[3, "class", "color", "backgroundColor", 4, "ngIf"]], template: function ThyBadgeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtemplate(1, ThyBadgeComponent_span_1_Template, 2, 8, "span", 0);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵprojection(2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.st.isShowBadge);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
ThyBadgeComponent.ctorParameters = () => [
    { type: ElementRef }
];
ThyBadgeComponent.propDecorators = {
    containerClassName: [{ type: HostBinding, args: ['class.thy-badge-container',] }],
    thyType: [{ type: Input }],
    thyCount: [{ type: Input }],
    thyContext: [{ type: Input }],
    thyMaxCount: [{ type: Input }],
    thySize: [{ type: Input }],
    thyIsDot: [{ type: Input }],
    thyIsHollow: [{ type: Input }],
    thyKeepShow: [{ type: Input }],
    thyTextColor: [{ type: Input }],
    thyBackgroundColor: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyBadgeComponent, [{
        type: Component,
        args: [{
                selector: 'thy-badge,[thyBadge]',
                template: "<ng-container>\n  <span\n    *ngIf=\"st.isShowBadge\"\n    class=\"thy-badge {{ badgeClassName }}\"\n    [style.color]=\"textColor\"\n    [style.backgroundColor]=\"backgroundColor\"\n    >{{ displayContent }}</span\n  >\n</ng-container>\n<ng-content></ng-content>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { containerClassName: [{
            type: HostBinding,
            args: ['class.thy-badge-container']
        }], thyType: [{
            type: Input
        }], thyCount: [{
            type: Input
        }], thyContext: [{
            type: Input
        }], thyMaxCount: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thyIsDot: [{
            type: Input
        }], thyIsHollow: [{
            type: Input
        }], thyKeepShow: [{
            type: Input
        }], thyTextColor: [{
            type: Input
        }], thyBackgroundColor: [{
            type: Input
        }] }); })();

class ThyBadgeModule {
    constructor() { }
}
ThyBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyBadgeModule });
ThyBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyBadgeModule_Factory(t) { return new (t || ThyBadgeModule)(); }, imports: [[
            CommonModule
        ]] });
ThyBadgeModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyBadgeModule, { declarations: function () { return [ThyBadgeComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ThyBadgeComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyBadgeModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ThyBadgeComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    ThyBadgeComponent
                ]
            }]
    }], function () { return []; }, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyBadgeComponent, ThyBadgeModule };

//# sourceMappingURL=ngx-tethys-badge.js.map
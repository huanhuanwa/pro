{"version":3,"file":"ngx-tethys-store.js","sources":["../../src/store/types.ts","../../src/store/internals/static-injector.ts","../../src/store/module.ts","../../src/store/plugins/redux_devtools.ts","../../src/store/action-state.ts","../../src/store/root-store.ts","../../src/store/utils.ts","../../src/store/action.ts","../../src/store/store.ts","../../src/store/entity-store.ts","../../src/store/ngx-tethys-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const META_KEY = '__THY_META__';\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\n\nexport interface StoreMetaInfo {\n    actions: any;\n    path: string;\n    children: any[];\n    instance: any;\n}\n\nexport interface ActionResult {}\n\n// export type Newable<T> = { new (...args: any[]): T };\n","import { Injector } from '@angular/core';\n\nclass ThyStoreModuleIsNotImported extends Error {\n    constructor() {\n        super(`You've forgotten to import \"ThyStoreModule\"!`);\n    }\n}\n\nlet injector: Injector | null = null;\n\nfunction assertDefined<T>(actual: T | null | undefined): asserts actual is T {\n    if (actual == null) {\n        throw new ThyStoreModuleIsNotImported();\n    }\n}\n\nexport function setInjector(parentInjector: Injector): void {\n    injector = parentInjector;\n}\n\n/**\n * Ensure that we don't keep any references in case of the bootstrapped\n * module is destroyed via `NgModuleRef.destroy()`.\n */\nexport function clearInjector(): void {\n    injector = null;\n}\n\nexport function getInjector(): Injector {\n    assertDefined(injector);\n    return injector;\n}\n","import { NgModule, ModuleWithProviders, Type, Injector, NgModuleRef } from '@angular/core';\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN } from './types';\nimport { Store } from './store';\nimport { clearInjector, setInjector } from './internals/static-injector';\n\n@NgModule()\nexport class ThyRootStoreModule {\n    constructor(ngModuleRef: NgModuleRef<any>) {\n        setInjector(ngModuleRef.injector);\n        ngModuleRef.onDestroy(clearInjector);\n    }\n}\n\n@NgModule()\nexport class ThyFeatureStoreModule {}\n\n@NgModule({})\nexport class ThyStoreModule {\n    static forRoot(stores: Type<Store>[] = []): ModuleWithProviders<ThyRootStoreModule> {\n        return {\n            ngModule: ThyRootStoreModule,\n            providers: [\n                ...stores,\n                {\n                    provide: ROOT_STATE_TOKEN,\n                    useValue: stores\n                }\n            ]\n        };\n    }\n\n    static forFeature(stores: Type<Store>[] = []): ModuleWithProviders<ThyFeatureStoreModule> {\n        return {\n            ngModule: ThyFeatureStoreModule,\n            providers: [\n                ...stores,\n                {\n                    provide: FEATURE_STATE_TOKEN,\n                    multi: true,\n                    useValue: stores\n                }\n            ]\n        };\n    }\n}\n","export abstract class StorePlugin {\n    // abstract handleNewState(state: Readonly<object>): void;\n    abstract handleNewState(actionName: string, state: Readonly<object>): void;\n    abstract isConnectSuccessed(): boolean;\n}\n/**\n * @internal\n */\nexport interface ReduxDevtoolsInstance {\n    send(action: string, state: object): void;\n}\n\nexport function tinyStateVersion(): string {\n    return 'v0.6.0';\n}\n\nexport class ReduxDevtoolsPlugin implements StorePlugin {\n    private _devTools: ReduxDevtoolsInstance | null = null;\n\n    _window = window;\n    constructor(\n    ) {\n        if (this._window == null) {\n            return;\n        }\n        const globalDevtools: { connect(config: any): ReduxDevtoolsInstance } | undefined =\n            (this._window as any)['__REDUX_DEVTOOLS_EXTENSION__'] ||\n            (this._window as any)['devToolsExtension'];\n\n        if (!globalDevtools) {\n            console.log(`未安装Chrome浏览器的拓展插件: Redux DevTools.`);\n            console.log(`插件下载地址: https://www.chromefor.com/redux-devtools_v2-17-0/`);\n            return;\n        }\n        this._devTools = globalDevtools.connect({\n            name: `NgxStore ${tinyStateVersion()}`\n        });\n    }\n\n    handleNewState(actionName: string, state: object): void {\n        if (this.isConnectSuccessed()) {\n            this._devTools.send(actionName, state);\n        }\n    }\n\n    isConnectSuccessed(): boolean {\n        if (this._devTools === null) {\n            return false;\n        }\n        return true;\n    }\n}\n\nfunction getReduxDevToolsPlugin(): any {\n    if (!window[`___ReduxDevtoolsPlugin___`]) {\n        window[`___ReduxDevtoolsPlugin___`] = new ReduxDevtoolsPlugin();\n    }\n    return window[`___ReduxDevtoolsPlugin___`];\n}\n\nexport default getReduxDevToolsPlugin;\n","// @dynamic\nexport class ActionState {\n    private static actionName = '';\n\n    public static changeAction(actionName: string) {\n        this.actionName = actionName;\n    }\n\n    public static getActionName() {\n        return this.actionName;\n    }\n}\n","import { Store } from './store';\nimport { Inject, SkipSelf, Optional, OnDestroy, isDevMode, Injectable } from '@angular/core';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport getReduxDevToolsPlugin, { StorePlugin } from './plugins/redux_devtools';\nimport { ActionState } from './action-state';\n\nexport type StoreInstanceMap = Map<string, Store<any>>; // Map key：string，value：状态数据\n\nlet rootStore: RootStore;\n/**\n * @internal\n */\n@Injectable()\nexport class RootStore {\n    private connectSuccessed = false;\n    /**\n     * 数据流 数据是一个Map，k,v键值对，关键字->状态数据\n     */\n    private readonly _containers = new BehaviorSubject<StoreInstanceMap>(new Map<string, Store<any>>());\n    private _plugin: StorePlugin = getReduxDevToolsPlugin();\n    private _combinedStateSubscription: Subscription = new Subscription();\n\n    constructor() {\n        if (this._plugin.isConnectSuccessed()) {\n            this.connectSuccessed = true;\n            this._assignCombinedState(); // 最终调用handleNewState\n            console.log(`是否在Angular开发环境：${isDevMode()}, 初始化root-store`);\n        }\n    }\n\n    private _assignCombinedState() {\n        this._combinedStateSubscription = this._containers\n            .pipe(switchMap(containers => this._getCombinedState(containers)))\n            .pipe(\n                map(states => {\n                    const actionName = ActionState.getActionName();\n                    const state = states.reduce((acc, curr) => {\n                        acc[curr.containerName] = curr.state;\n                        return acc;\n                    }, <{ [key: string]: any }>{});\n                    return { state: state, actionName: actionName };\n                })\n            )\n            .subscribe(c => {\n                this._plugin.handleNewState(c.actionName, c.state);\n            });\n    }\n\n    /**\n     * 合并数据流\n     * 合并状态数据，把状态数据转换为这样的数据：{ containerName: string, state: any }，并且\n     * 通过combineLatest合并成一个数据数据流，这样状态数据只有涉及更新，那么这边就会得到通知\n     * @param containers 状态数据的Map\n     */\n    private _getCombinedState(containers: StoreInstanceMap) {\n        return combineLatest(\n            ...Array.from(containers.entries()).map(([containerName, container]) => {\n                return container.state$.pipe(\n                    map(state => ({ containerName, state })),\n                    tap(data => {})\n                );\n            })\n        );\n    }\n\n    /**\n     * @internal\n     */\n    ngOnDestroy() {\n        this._combinedStateSubscription.unsubscribe();\n    }\n\n    /**\n     * @internal\n     */\n    registerStore(store: Store<any>) {\n        if (!this.connectSuccessed) {\n            return;\n        }\n        const containers = new Map(this._containers.value);\n        if (containers.has(store.getStoreInstanceId())) {\n            throw new Error(\n                `Store: Store with duplicate instance ID found! ${store.getStoreInstanceId()}` +\n                    ` is already registered. Please check your getStoreInstanceId() methods!`\n            );\n        }\n        containers.set(store.getStoreInstanceId(), store);\n        this._containers.next(containers);\n    }\n\n    existStoreInstanceId(instanceId: string): boolean {\n        const containers = new Map(this._containers.value);\n        if (containers.has(instanceId)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @internal\n     */\n    unregisterStore(store: Store<any>) {\n        if (!this.connectSuccessed) {\n            return;\n        }\n        const containers = new Map(this._containers.value);\n        containers.delete(store.getStoreInstanceId());\n        this._containers.next(containers);\n    }\n}\n\nexport function getSingletonRootStore() {\n    if (!rootStore) {\n        rootStore = new RootStore();\n    }\n    return rootStore;\n}\n","import { StoreMetaInfo, META_KEY } from './types';\n\nexport function findAndCreateStoreMetadata(target: any): StoreMetaInfo {\n    if (!target.hasOwnProperty(META_KEY)) {\n        const defaultMetadata: StoreMetaInfo = {\n            actions: {},\n            path: null,\n            children: [],\n            instance: null\n        };\n        target[META_KEY] = defaultMetadata;\n    }\n    return target[META_KEY];\n}\n","import { META_KEY } from './types';\nimport { findAndCreateStoreMetadata } from './utils';\nimport { Observable, Observer, of, throwError } from 'rxjs';\nimport { map, shareReplay, catchError, exhaustMap } from 'rxjs/operators';\nimport { ActionState } from './action-state';\nimport { ActionContext, ActionStatus } from './actions-stream';\n\nexport interface DecoratorActionOptions {\n    type: string;\n    payload?: any;\n}\n\n/**\n * Decorates a method with a action information.\n */\nexport function Action(action?: DecoratorActionOptions | string) {\n    return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\n        const meta = findAndCreateStoreMetadata(target);\n\n        // default use function name as action type\n        if (!action) {\n            action = {\n                type: name\n            };\n        }\n        // support string for type\n        if (typeof action === 'string') {\n            action = {\n                type: action\n            };\n        }\n        const type = action.type;\n\n        if (!action.type) {\n            throw new Error(`Action ${action.type} is missing a static \"type\" property`);\n        }\n\n        const originalFn = descriptor.value;\n        meta.actions[type] = {\n            fn: name,\n            originalFn: originalFn,\n            type\n        };\n\n        descriptor.value = function(...args: any[]) {\n            ActionState.changeAction(`${target.constructor.name}-${name}`);\n            let result = originalFn.call(this, ...args);\n            if (result instanceof Observable) {\n                result = result.pipe(\n                    catchError(error => {\n                        return of({ status: ActionStatus.Errored, action: action, error: error });\n                    }),\n                    shareReplay(),\n                    exhaustMap((result: ActionContext | any) => {\n                        if (result && result.status === ActionStatus.Errored) {\n                            return throwError(result.error);\n                        } else {\n                            return of(result);\n                        }\n                    })\n                );\n                result.subscribe();\n            }\n            return result;\n        };\n    };\n}\n","import { Observable, Observer, BehaviorSubject, from, of, PartialObserver, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';\nimport { META_KEY, StoreMetaInfo } from './types';\nimport { helpers } from 'ngx-tethys/util';\nimport { getSingletonRootStore, RootStore } from './root-store';\nimport { OnDestroy, isDevMode, Injectable } from '@angular/core';\nimport { ActionState } from './action-state';\nimport { Action } from './action';\n\ninterface Action {\n    type: string;\n    payload?: any;\n}\n\n@Injectable()\nexport class Store<T = unknown> implements Observer<T>, OnDestroy {\n    initialStateCache: any;\n\n    public state$: BehaviorSubject<T>;\n\n    public reduxToolEnabled = isDevMode();\n\n    private _defaultStoreInstanceId: string;\n\n    constructor(initialState: any) {\n        this._defaultStoreInstanceId = this._getClassName();\n        this.state$ = new BehaviorSubject<T>(initialState);\n        this.initialStateCache = { ...initialState };\n        if (this.reduxToolEnabled) {\n            const rootStore: RootStore = getSingletonRootStore();\n            ActionState.changeAction(`Add-${this._defaultStoreInstanceId}`);\n            rootStore.registerStore(this);\n        }\n    }\n\n    get snapshot() {\n        return this.state$.getValue();\n    }\n\n    public dispatch(type: string, payload?: any): Observable<any> {\n        ActionState.changeAction(`${this._defaultStoreInstanceId}-${type}`);\n        const result = this._dispatch({\n            type: type,\n            payload: payload\n        });\n        result.subscribe();\n        return result;\n    }\n\n    private _dispatch(action: any): Observable<any> {\n        const meta = this[META_KEY] as StoreMetaInfo;\n        if (!meta) {\n            throw new Error(`${META_KEY} is not found, current store has not action`);\n        }\n        const actionMeta = meta.actions[action.type];\n        if (!actionMeta) {\n            throw new Error(`${action.type} is not found`);\n        }\n        // let result: any = this[actionMeta.fn](this.snapshot, action.payload);\n        let result: any = actionMeta.originalFn.call(this, this.snapshot, action.payload);\n\n        if (result instanceof Promise) {\n            result = from(result);\n        }\n\n        if (result instanceof Observable) {\n            result = result.pipe(map(r => r));\n        } else {\n            result = new Observable((observer: Observer<any>) => {\n                observer.next({});\n            });\n        }\n        return result.pipe(shareReplay());\n    }\n\n    select<TResult>(selector: (state: T) => TResult): Observable<TResult> | Observable<TResult>;\n    select(selector: string | any): Observable<any> {\n        return this.state$.pipe(map(selector), distinctUntilChanged());\n    }\n\n    next(state: T) {\n        this.state$.next(state);\n    }\n\n    error(error: any) {\n        this.state$.error(error);\n    }\n\n    complete() {\n        this.state$.complete();\n    }\n\n    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription {\n        return this.state$.subscribe(next, error, complete);\n    }\n\n    /**\n     * set store new state\n     *\n     * @example\n     * this.setState(newState);\n     * this.setState({ users: produce(this.snapshot.users).add(user) });\n     * this.setState((state) => {\n     *    return {\n     *        users: produce(state.users).add(user)\n     *    }\n     * });\n     * @param fn\n     */\n    setState(fn: Partial<T> | ((newState: T) => Partial<T>)): void {\n        if (helpers.isFunction(fn)) {\n            this.next({\n                ...this.snapshot,\n                ...(fn as any)(this.snapshot)\n            });\n        } else {\n            this.next({\n                ...this.snapshot,\n                ...(fn as T)\n            });\n        }\n    }\n\n    getState(): T {\n        return this.snapshot;\n    }\n\n    @Action()\n    clearState() {\n        this.setState(this.initialStateCache);\n    }\n\n    ngOnDestroy() {\n        if (this.reduxToolEnabled) {\n            const rootStore: RootStore = getSingletonRootStore();\n            rootStore.unregisterStore(this);\n        }\n    }\n\n    /**\n     * You can override this method if you want to give your container instance a custom id.\n     * The returned id must be unique in the application.\n     */\n    getStoreInstanceId(): string {\n        return this._defaultStoreInstanceId;\n    }\n\n    private _getClassName(): string {\n        const name = this.constructor.name || /function (.+)\\(/.exec(this.constructor + '')[1];\n        if (this.reduxToolEnabled) {\n            const rootStore: RootStore = getSingletonRootStore();\n            if (!rootStore.existStoreInstanceId(name)) {\n                return name;\n            }\n            let j = 0;\n            for (let i = 1; i < 20; i++) {\n                if (!rootStore.existStoreInstanceId(`${name}-${i}`)) {\n                    j = i;\n                    break;\n                }\n            }\n            return `${name}-${j}`;\n        }\n        return name;\n    }\n}\n","import { Store } from './store';\nimport { Id, PaginationInfo } from 'ngx-tethys/types';\nimport { helpers, produce } from 'ngx-tethys/util';\nimport { mergeReferences, buildReferencesKeyBy, ReferenceArrayExtractAllowKeys } from 'ngx-tethys/util';\nimport { map } from 'rxjs/operators';\nimport { ReferencesIdDictionary, OnCombineRefsFn } from './references';\n\nexport interface EntityStoreOptions<TEntity = unknown, TReferences = unknown> {\n    idKey?: string;\n    referencesIdKeys?: ReferenceArrayExtractAllowKeys<TReferences>;\n}\n\nexport interface EntityAddOptions {\n    prepend?: boolean;\n    // 如果是最后追加，自动跳转到最后一页\n    autoGotoLastPage?: boolean;\n}\n\nexport interface EntityState<TEntity, TReferences = unknown> {\n    pagination?: PaginationInfo;\n    entities: TEntity[];\n    references?: TReferences;\n}\n\nexport class EntityStore<TState extends EntityState<TEntity, TReferences>, TEntity, TReferences = unknown> extends Store<TState> {\n    protected options: EntityStoreOptions<TEntity, TReferences>;\n\n    private internalReferencesIdMap: ReferencesIdDictionary<TReferences>;\n\n    get entities() {\n        return this.snapshot.entities;\n    }\n\n    entities$ = this.select(state => {\n        return state.entities;\n    });\n\n    entitiesWithRefs$ = this.entities$.pipe(\n        map(entities => {\n            if (!entities) {\n                return entities;\n            }\n            return entities.map(entity => {\n                const newEntity = { ...entity };\n\n                if (this['onCombineRefs']) {\n                    if (!newEntity['refs']) {\n                        newEntity['refs'] = {};\n                    }\n                    this['onCombineRefs'](newEntity, this.internalReferencesIdMap, this.snapshot.references);\n                } else {\n                    throw new Error(`onCombineRefs is not empty`);\n                }\n                return newEntity;\n            });\n        })\n    );\n\n    private resetPagination(pagination: PaginationInfo, count: number) {\n        pagination.count = count;\n        // 向上取整 21 / 20 = 1.05 = 2 pageCount is 2\n        const pageCount = Math.ceil(pagination.count / pagination.pageSize);\n        pagination.pageCount = pageCount;\n        this.snapshot.pagination = { ...pagination };\n    }\n\n    private increasePagination(amount: number) {\n        const pagination = this.snapshot.pagination;\n        this.resetPagination(pagination, pagination.count + amount);\n    }\n\n    private decreasePagination(amount: number) {\n        const pagination = this.snapshot.pagination;\n        if (pagination) {\n            this.resetPagination(pagination, pagination.count - amount);\n        }\n    }\n\n    private buildReferencesIdMap() {\n        if (this.snapshot.references) {\n            this.internalReferencesIdMap = buildReferencesKeyBy(this.snapshot.references, this.options.referencesIdKeys);\n        }\n    }\n\n    constructor(\n        initialState: EntityState<TEntity, TReferences> = {\n            entities: [] as TEntity[]\n        },\n        options: EntityStoreOptions<TEntity, TReferences> = { idKey: '_id' }\n    ) {\n        super(initialState);\n        this.options = { idKey: '_id', ...options };\n        if (!this.options.idKey) {\n            throw new Error(`idKey is required in EntityStore`);\n        }\n        this.buildReferencesIdMap();\n    }\n\n    /**\n     *\n     * Replace current collection with provided collection\n     *\n     * @example\n     * this.store.initialize([Entity, Entity], pagination: PaginationInfo);\n     *\n     */\n    initialize(entities: TEntity[], pagination?: PaginationInfo) {\n        const state = this.snapshot;\n        state.entities = entities || [];\n        state.pagination = pagination;\n        this.next(state);\n    }\n\n    /**\n     *\n     * Replace current collection with provided collection with references\n     *\n     * @example\n     * this.store.initializeWithReferences([Entity, Entity], references: TReferences, pagination: PaginationInfo);\n     *\n     */\n    initializeWithReferences(entities: TEntity[], references: TReferences, pagination?: PaginationInfo) {\n        const state = this.snapshot;\n        state.entities = entities || [];\n        state.pagination = pagination;\n        state.references = references;\n        this.buildReferencesIdMap();\n        this.next(state);\n    }\n\n    /**\n     * Add entity or entities for internal\n     * @param entity\n     * @param references\n     * @param addOptions\n     */\n    private addInternal(entity: TEntity | TEntity[], references?: Partial<TReferences>, addOptions?: EntityAddOptions) {\n        const addEntities = helpers.coerceArray(entity);\n        if (addEntities.length === 0) {\n            return;\n        }\n\n        const state = this.snapshot;\n        state.entities = produce(state.entities).add(addEntities, addOptions);\n        if (state.references) {\n            mergeReferences(state.references, references, this.options.referencesIdKeys);\n            this.buildReferencesIdMap();\n        }\n        if (state.pagination) {\n            this.increasePagination(addEntities.length);\n            if (addOptions && !addOptions.prepend && addOptions.autoGotoLastPage) {\n                state.pagination.pageIndex = state.pagination.pageCount;\n            }\n        }\n        this.next(state);\n    }\n\n    /**\n     * Add an entity or entities to the store.\n     *\n     * @example\n     * this.store.add(Entity);\n     * this.store.add([Entity, Entity]);\n     * this.store.add(Entity, { prepend: true });\n     */\n    add(entity: TEntity | TEntity[], addOptions?: EntityAddOptions) {\n        this.addInternal(entity, undefined, addOptions);\n    }\n\n    /**\n     * Add an entity or entities to the store with references.\n     *\n     * @example\n     * this.store.add(Entity);\n     * this.store.add([Entity, Entity]);\n     * this.store.add(Entity, { prepend: true });\n     */\n    addWithReferences(entity: TEntity | TEntity[], references: Partial<TReferences>, addOptions?: EntityAddOptions) {\n        this.addInternal(entity, references, addOptions);\n    }\n\n    /**\n     *\n     * Update an entity or entities in the store.\n     *\n     * @example\n     * this.store.update(3, {\n     *   name: 'New Name'\n     * }, references);\n     *\n     *  this.store.update(3, entity => {\n     *    return {\n     *      ...entity,\n     *      name: 'New Name'\n     *    }\n     *  }, references);\n     *\n     * this.store.update([1,2,3], {\n     *   name: 'New Name'\n     * }, references);\n     */\n    private updateInternal(\n        idsOrFn: Id | Id[] | null,\n        // | Partial<TState>\n        // | ((state: Readonly<TState>) => Partial<TState>)\n        // | ((entity: Readonly<TEntity>) => boolean),\n        newStateOrFn: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>,\n        references?: TReferences\n    ): void {\n        const ids = helpers.coerceArray(idsOrFn);\n\n        const state = this.snapshot;\n        for (let i = 0; i < state.entities.length; i++) {\n            const oldEntity = state.entities[i];\n            if (ids.indexOf(oldEntity[this.options.idKey]) > -1) {\n                const newState = helpers.isFunction(newStateOrFn) ? (newStateOrFn as any)(oldEntity) : newStateOrFn;\n                state.entities[i] = { ...(oldEntity as any), ...newState };\n            }\n        }\n        state.entities = [...state.entities];\n        if (state.references) {\n            mergeReferences(state.references, references, this.options.referencesIdKeys);\n            this.buildReferencesIdMap();\n        }\n        this.next(state);\n    }\n\n    /**\n     *\n     * Update an entity or entities in the store with references.\n     *\n     * @example\n     * this.store.update(3, {\n     *   name: 'New Name'\n     * }, references);\n     *\n     *  this.store.update(3, entity => {\n     *    return {\n     *      ...entity,\n     *      name: 'New Name'\n     *    }\n     *  }, references);\n     *\n     * this.store.update([1,2,3], {\n     *   name: 'New Name'\n     * }, references);\n     */\n    update(idsOrFn: Id | Id[] | null, newStateOrFn: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>): void {\n        this.updateInternal(idsOrFn, newStateOrFn, undefined);\n    }\n\n    /**\n     *\n     * Update an entity or entities in the store with references.\n     *\n     * @example\n     * this.store.updateWithReferences(3, {\n     *   name: 'New Name'\n     * }, references);\n     *\n     *  this.store.updateWithReferences(3, entity => {\n     *    return {\n     *      ...entity,\n     *      name: 'New Name'\n     *    }\n     *  }, references);\n     *\n     * this.store.updateWithReferences([1,2,3], {\n     *   name: 'New Name'\n     * }, references);\n     */\n    updateWithReferences(\n        idsOrFn: Id | Id[] | null,\n        newStateOrFn: ((entity: Readonly<TEntity>) => Partial<TEntity>) | Partial<TEntity>,\n        references: TReferences\n    ): void {\n        this.updateInternal(idsOrFn, newStateOrFn, references);\n    }\n\n    /**\n     *\n     * Remove one or more entities from the store:\n     *\n     * @example\n     * this.store.remove(5);\n     * this.store.remove([1,2,3]);\n     * this.store.remove(entity => entity.id === 1);\n     */\n    remove(id: Id | Id[]): void;\n    remove(predicate: (entity: Readonly<TEntity>) => boolean): void;\n    remove(idsOrFn?: Id | Id[] | ((entity: Readonly<TEntity>) => boolean)): void {\n        const state = this.snapshot;\n        const originalLength = state.entities.length;\n        state.entities = produce(state.entities, this.options).remove(idsOrFn);\n        this.decreasePagination(originalLength - state.entities.length);\n        this.next(state);\n    }\n\n    trackBy = (_index: number, entity: TEntity) => {\n        return entity[this.options.idKey];\n    };\n\n    clearPagination() {\n        const state = this.snapshot;\n        state.pagination = null;\n        this.next(state);\n    }\n\n    clear() {\n        const state = this.snapshot;\n        state.entities = [];\n        state.pagination = null;\n        state.references = null;\n        this.next(state);\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
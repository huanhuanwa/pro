{"version":3,"file":"ngx-tethys-autocomplete.js","sources":["../../src/autocomplete/overlay/autocomplete.config.ts","../../src/autocomplete/overlay/autocomplete-animations.ts","../../src/autocomplete/overlay/autocomplete.options.ts","../../src/autocomplete/overlay/autocomplete-container.component.ts","../../src/autocomplete/overlay/autocomplete-ref.ts","../../src/autocomplete/overlay/autocomplete.service.ts","../../src/autocomplete/autocomplete.component.ts","../../src/autocomplete/autocomplete.trigger.directive.ts","../../src/autocomplete/module.ts","../../src/autocomplete/ngx-tethys-autocomplete.ts"],"sourcesContent":["import { ElementRef, ViewContainerRef, InjectionToken } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ThyPlacement, ThyAbstractOverlayConfig } from 'ngx-tethys/core';\nimport { ScrollStrategy, PositionStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';\n\nexport class ThyAutocompleteConfig<TData = any> extends ThyAbstractOverlayConfig<TData> {\n    /** Origin Element, for overlay flexible connected to */\n    origin: ElementRef<any> | HTMLElement;\n\n    /** Placement be relative to origin, topCenter, topLeft, topRight, bottomCenter, bottomLeft, bottomRight ...*/\n    placement?: ThyPlacement;\n\n    /** Click inside can been close */\n    insideClosable?: boolean;\n\n    /** Offset be relative to origin, default is 4*/\n    offset?: number;\n\n    /** Manually close it, default rules is which auto close last autocomplete when open a new unless set manualClosure as true */\n    manualClosure?: boolean;\n\n    /** Origin active class when autocomplete is opened */\n    originActiveClass?: string | string[];\n\n    /**\n     * 滚动策略\n     */\n    scrollStrategy?: ScrollStrategy;\n\n    /** Click outside can been close */\n    outsideClosable?: boolean;\n}\n\nexport const THY_AUTOCOMPLETE_DEFAULT_CONFIG = new InjectionToken<ThyAutocompleteConfig>('thy-autocomplete-default-config');\n\nexport const THY_AUTOCOMPLETE_DEFAULT_CONFIG_PROVIDER = {\n    provide: THY_AUTOCOMPLETE_DEFAULT_CONFIG,\n    useValue: {\n        hasBackdrop: false,\n        panelClass: '',\n        closeOnNavigation: true,\n        insideClosable: true,\n        manualClosure: false,\n        outsideClosable: true,\n        originActiveClass: 'thy-autocomplete-origin-active'\n    }\n};\n","import { animate, state, style, transition, trigger, AnimationTriggerMetadata } from '@angular/animations';\n\nconst animationBody = [\n    state('void, exit', style({ opacity: 0, transform: 'scale(0.1)' })),\n    state('enter', style({ transform: 'none' }))\n];\n\n/**\n * Animations used by ThyAutocomplete.\n * @docs-private\n */\nexport const thyAutocompleteAnimations: {\n    readonly autocompleteContainer: AnimationTriggerMetadata;\n} = {\n    autocompleteContainer: trigger('autocompleteContainer', animationBody)\n};\n","import { ThyUpperOverlayOptions } from 'ngx-tethys/core';\n\nexport const autocompleteUpperOverlayOptions: ThyUpperOverlayOptions = {\n    name: 'autocomplete',\n    animationEnabled: true,\n    disposeWhenClose: true\n};\n","import {\n    Component,\n    ComponentRef,\n    ViewChild,\n    EmbeddedViewRef,\n    Inject,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    ChangeDetectorRef,\n    OnInit,\n    AfterViewInit,\n    NgZone,\n    TemplateRef\n} from '@angular/core';\nimport { ComponentPortal, TemplatePortal, CdkPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport { AnimationEvent } from '@angular/animations';\n\nimport { ThyAutocompleteConfig } from './autocomplete.config';\nimport { thyAutocompleteAnimations } from './autocomplete-animations';\nimport { ThyAbstractOverlayContainer } from 'ngx-tethys/core';\nimport { autocompleteUpperOverlayOptions } from './autocomplete.options';\nimport { Observable, fromEvent, timer } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { ThyClickDispatcher } from 'ngx-tethys/core';\n\n@Component({\n    selector: 'thy-autocomplete-container',\n    templateUrl: './autocomplete-container.component.html',\n    animations: [thyAutocompleteAnimations.autocompleteContainer],\n    host: {\n        class: 'thy-autocomplete-container',\n        tabindex: '-1',\n        '[attr.role]': `'autocomplete'`,\n        '[@autocompleteContainer]': 'animationState',\n        '(@autocompleteContainer.start)': 'onAnimationStart($event)',\n        '(@autocompleteContainer.done)': 'onAnimationDone($event)'\n    }\n})\nexport class ThyAutocompleteContainerComponent extends ThyAbstractOverlayContainer implements AfterViewInit {\n    @ViewChild(CdkPortalOutlet, { static: true })\n    portalOutlet: CdkPortalOutlet;\n\n    /** State of the autocomplete animation. */\n    animationState: 'void' | 'enter' | 'exit' = 'enter';\n\n    /** Emits when an animation state changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    animationOpeningDone: Observable<AnimationEvent>;\n    animationClosingDone: Observable<AnimationEvent>;\n\n    beforeAttachPortal(): void {}\n\n    constructor(\n        private elementRef: ElementRef,\n        @Inject(DOCUMENT) private document: any,\n        public config: ThyAutocompleteConfig,\n        changeDetectorRef: ChangeDetectorRef,\n        private thyClickDispatcher: ThyClickDispatcher,\n        private ngZone: NgZone\n    ) {\n        super(autocompleteUpperOverlayOptions, changeDetectorRef);\n\n        this.animationOpeningDone = this.animationStateChanged.pipe(\n            filter((event: AnimationEvent) => {\n                return event.phaseName === 'done' && event.toState === 'enter';\n            })\n        );\n        this.animationClosingDone = this.animationStateChanged.pipe(\n            filter((event: AnimationEvent) => {\n                return event.phaseName === 'done' && event.toState === 'exit';\n            })\n        );\n    }\n\n    ngAfterViewInit() {}\n\n    /** Callback, invoked whenever an animation on the host completes. */\n    onAnimationDone(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    /** Callback, invoked when an animation on the host starts. */\n    onAnimationStart(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    startExitAnimation(): void {\n        this.animationState = 'exit';\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { ThyAutocompleteContainerComponent } from './autocomplete-container.component';\nimport { ThyAbstractOverlayRef, ThyAbstractInternalOverlayRef, ThyUpperOverlayPosition } from 'ngx-tethys/core';\nimport { autocompleteUpperOverlayOptions } from './autocomplete.options';\nimport { ThyAutocompleteConfig } from './autocomplete.config';\n\nexport abstract class ThyAutocompleteRef<T, TResult = any> extends ThyAbstractOverlayRef<T, ThyAutocompleteContainerComponent, TResult> {}\n\nexport class ThyInternalAutocompleteRef<T, TResult = any>\n    extends ThyAbstractInternalOverlayRef<T, ThyAutocompleteContainerComponent, TResult>\n    implements ThyAutocompleteRef<T, TResult> {\n    constructor(overlayRef: OverlayRef, containerInstance: ThyAutocompleteContainerComponent, config: ThyAutocompleteConfig) {\n        super(autocompleteUpperOverlayOptions, overlayRef, containerInstance, config);\n    }\n\n    /**\n     * Updates the autocomplete's position.\n     * @param position New autocomplete position.\n     */\n    updatePosition(): this {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n}\n","import {\n    ComponentType,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollDispatcher,\n    OverlayContainer,\n    FlexibleConnectedPositionStrategy\n} from '@angular/cdk/overlay';\nimport { TemplateRef, ViewContainerRef, Injectable, ElementRef, Injector, OnDestroy, Inject, NgZone } from '@angular/core';\nimport { coerceElement, coerceArray } from '@angular/cdk/coercion';\nimport { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { ThyAutocompleteContainerComponent } from './autocomplete-container.component';\nimport { ThyAutocompleteConfig, THY_AUTOCOMPLETE_DEFAULT_CONFIG } from './autocomplete.config';\nimport { ThyAutocompleteRef, ThyInternalAutocompleteRef } from './autocomplete-ref';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { of, Subject } from 'rxjs';\nimport { getFlexiblePositions, ThyAbstractOverlayService, ThyAbstractOverlayRef } from 'ngx-tethys/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { isArray } from 'ngx-tethys/util';\nimport { autocompleteUpperOverlayOptions } from './autocomplete.options';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { Platform } from '@angular/cdk/platform';\nimport { StaticProvider } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyAutocompleteService extends ThyAbstractOverlayService<ThyAutocompleteConfig, ThyAutocompleteContainerComponent>\n    implements OnDestroy {\n    private readonly ngUnsubscribe$ = new Subject();\n\n    private originInstancesMap = new Map<\n        ElementRef | HTMLElement,\n        {\n            config: ThyAutocompleteConfig;\n            autocompleteRef: ThyAutocompleteRef<any, any>;\n        }\n    >();\n\n    private buildPositionStrategy<TData>(config: ThyAutocompleteConfig<TData>): PositionStrategy {\n        const positionStrategy = new FlexibleConnectedPositionStrategy(\n            config.origin,\n            this._viewportRuler,\n            this._document,\n            this._platform,\n            this._overlayContainer\n        );\n        const positions = getFlexiblePositions(config.placement, config.offset, 'thy-autocomplete');\n        positionStrategy.withPositions(positions);\n        positionStrategy.withGrowAfterOpen(true);\n        positionStrategy.positionChanges.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(change => {\n            if (change.scrollableViewProperties.isOverlayClipped) {\n                // After position changes occur and the overlay is clipped by\n                // a parent scrollable then close the tooltip.\n                this.ngZone.run(() => this.close());\n            }\n        });\n        return positionStrategy;\n    }\n\n    protected buildOverlayConfig<TData>(config: ThyAutocompleteConfig<TData>): OverlayConfig {\n        const strategy = this.buildPositionStrategy(config);\n        const overlayConfig = this.buildBaseOverlayConfig(config);\n        overlayConfig.positionStrategy = strategy;\n        overlayConfig.scrollStrategy = config.scrollStrategy || this.overlay.scrollStrategies.block();\n        overlayConfig.width = config.width;\n        return overlayConfig;\n    }\n\n    protected attachUpperOverlayContainer(overlay: OverlayRef, config: ThyAutocompleteConfig<any>): ThyAutocompleteContainerComponent {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this.injector,\n            providers: [{ provide: ThyAutocompleteConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(ThyAutocompleteContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlay.attach<ThyAutocompleteContainerComponent>(containerPortal);\n        return containerRef.instance;\n    }\n\n    protected createUpperOverlayRef<T>(\n        overlayRef: OverlayRef,\n        containerInstance: ThyAutocompleteContainerComponent,\n        config: ThyAutocompleteConfig<any>\n    ): ThyInternalAutocompleteRef<T> {\n        return new ThyInternalAutocompleteRef<T>(overlayRef, containerInstance, config);\n    }\n\n    protected createInjector<T>(\n        config: ThyAutocompleteConfig,\n        autocompleteRef: ThyAutocompleteRef<T>,\n        autocompleteContainer: ThyAutocompleteContainerComponent\n    ): Injector {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injectionTokens: StaticProvider[] = [\n            {\n                provide: ThyAutocompleteContainerComponent,\n                useValue: autocompleteContainer\n            },\n            {\n                provide: ThyAutocompleteRef,\n                useValue: autocompleteRef\n            }\n        ];\n\n        if (config.direction && (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n            injectionTokens.push({\n                provide: Directionality,\n                useValue: {\n                    value: config.direction,\n                    change: of()\n                }\n            });\n        }\n\n        return Injector.create({ parent: userInjector || this.injector, providers: injectionTokens });\n    }\n\n    private originElementAddActiveClass(config: ThyAutocompleteConfig) {\n        if (config.originActiveClass) {\n            coerceElement<HTMLElement>(config.origin).classList.add(...coerceArray(config.originActiveClass));\n        }\n    }\n\n    private originElementRemoveActiveClass(config: ThyAutocompleteConfig) {\n        if (config.originActiveClass) {\n            coerceElement<HTMLElement>(config.origin).classList.remove(...coerceArray(config.originActiveClass));\n        }\n    }\n\n    constructor(\n        overlay: Overlay,\n        injector: Injector,\n        @Inject(THY_AUTOCOMPLETE_DEFAULT_CONFIG) defaultConfig: ThyAutocompleteConfig,\n        private scrollDispatcher: ScrollDispatcher,\n        private ngZone: NgZone,\n        private _viewportRuler: ViewportRuler,\n        @Inject(DOCUMENT) private _document: any,\n        private _platform: Platform,\n        private _overlayContainer: OverlayContainer\n    ) {\n        super(autocompleteUpperOverlayOptions, overlay, injector, defaultConfig);\n    }\n\n    open<T, TData = any, TResult = any>(\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n        config?: ThyAutocompleteConfig<TData>\n    ): ThyAutocompleteRef<T, TResult> {\n        const originElement = coerceElement(config.origin);\n        const autocompleteRef = this.openUpperOverlay(componentOrTemplateRef, config) as ThyAutocompleteRef<T>;\n        config = autocompleteRef.containerInstance.config;\n        autocompleteRef.afterClosed().subscribe(() => {\n            this.originElementRemoveActiveClass(config);\n            this.originInstancesMap.delete(originElement);\n        });\n\n        this.originElementAddActiveClass(config);\n        this.originInstancesMap.set(originElement, {\n            config,\n            autocompleteRef\n        });\n\n        return autocompleteRef;\n    }\n\n    ngOnDestroy() {\n        this.dispose();\n    }\n}\n","import {\n    Component,\n    TemplateRef,\n    ViewChild,\n    ChangeDetectionStrategy,\n    ContentChildren,\n    QueryList,\n    OnInit,\n    Output,\n    EventEmitter,\n    NgZone,\n    OnDestroy,\n    AfterContentInit,\n    ChangeDetectorRef,\n    Input,\n    ElementRef\n} from '@angular/core';\nimport { Constructor, ThyUnsubscribe } from 'ngx-tethys/core';\nimport { defer, merge, Observable, timer } from 'rxjs';\nimport { take, switchMap, takeUntil, startWith } from 'rxjs/operators';\nimport { MixinBase, mixinUnsubscribe } from 'ngx-tethys/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    THY_OPTION_PARENT_COMPONENT,\n    IThyOptionParentComponent,\n    ThyOptionComponent,\n    ThyOptionSelectionChangeEvent\n} from 'ngx-tethys/shared';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Event object that is emitted when an autocomplete option is activated. */\nexport interface ThyAutocompleteActivatedEvent {\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: ThyAutocompleteComponent;\n\n    /** Option that was selected. */\n    option: ThyOptionComponent | null;\n}\n\nconst _MixinBase: Constructor<ThyUnsubscribe> & typeof MixinBase = mixinUnsubscribe(MixinBase);\n@Component({\n    selector: 'thy-autocomplete',\n    templateUrl: 'autocomplete.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: THY_OPTION_PARENT_COMPONENT,\n            useExisting: ThyAutocompleteComponent\n        }\n    ]\n})\nexport class ThyAutocompleteComponent extends _MixinBase implements IThyOptionParentComponent, OnInit, AfterContentInit, OnDestroy {\n    dropDownClass: { [key: string]: boolean };\n\n    isMultiple = false;\n\n    mode = '';\n\n    isEmptyOptions = false;\n\n    selectionModel: SelectionModel<ThyOptionComponent>;\n\n    isOpened = false;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<ThyOptionComponent>;\n\n    @ViewChild('contentTemplate', { static: true })\n    contentTemplateRef: TemplateRef<any>;\n\n    // scroll element container\n    @ViewChild('panel')\n    optionsContainer: ElementRef<any>;\n\n    @ContentChildren(ThyOptionComponent, { descendants: true }) options: QueryList<ThyOptionComponent>;\n\n    readonly optionSelectionChanges: Observable<ThyOptionSelectionChangeEvent> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map(option => option.selectionChange));\n        }\n        return this.ngZone.onStable.asObservable().pipe(\n            take(1),\n            switchMap(() => this.optionSelectionChanges)\n        );\n    }) as Observable<ThyOptionSelectionChangeEvent>;\n\n    @Input()\n    thyEmptyText = '没有任何数据';\n\n    @Input()\n    get thyAutoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n    set thyAutoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    private _autoActiveFirstOption: boolean;\n\n    @Output() thyOptionSelected: EventEmitter<ThyOptionSelectionChangeEvent> = new EventEmitter<ThyOptionSelectionChangeEvent>();\n\n    @Output() readonly thyOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    @Output() readonly thyClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits whenever an option is activated using the keyboard. */\n    @Output() readonly thyOptionActivated: EventEmitter<ThyAutocompleteActivatedEvent> = new EventEmitter<ThyAutocompleteActivatedEvent>();\n\n    constructor(private ngZone: NgZone, private changeDetectorRef: ChangeDetectorRef) {\n        super();\n    }\n\n    ngOnInit() {\n        this.setDropDownClass();\n        this.instanceSelectionModel();\n    }\n\n    ngAfterContentInit() {\n        this.options.changes.pipe(startWith(null), takeUntil(this.ngUnsubscribe$)).subscribe(() => {\n            this.resetOptions();\n            timer().subscribe(() => {\n                this.isEmptyOptions = this.options.length <= 0;\n                this.changeDetectorRef.detectChanges();\n            });\n            this.initKeyManager();\n        });\n    }\n\n    initKeyManager() {\n        const changedOrDestroyed$ = merge(this.options.changes, this.ngUnsubscribe$);\n        this.keyManager = new ActiveDescendantKeyManager<ThyOptionComponent>(this.options).withWrap();\n        this.keyManager.change.pipe(takeUntil(changedOrDestroyed$)).subscribe(index => {\n            this.thyOptionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n    }\n\n    open() {\n        this.isOpened = true;\n        this.changeDetectorRef.markForCheck();\n        this.thyOpened.emit();\n    }\n\n    close() {\n        this.isOpened = false;\n        this.thyClosed.emit();\n    }\n\n    private resetOptions() {\n        const changedOrDestroyed$ = merge(this.options.changes, this.ngUnsubscribe$);\n\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed$)).subscribe((event: ThyOptionSelectionChangeEvent) => {\n            this.onSelect(event.option, event.isUserInput);\n        });\n    }\n\n    private instanceSelectionModel() {\n        if (this.selectionModel) {\n            this.selectionModel.clear();\n        }\n        this.selectionModel = new SelectionModel<ThyOptionComponent>(this.isMultiple);\n        this.selectionModel.changed.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n    }\n\n    private onSelect(option: ThyOptionComponent, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.thyValue == null && !this.isMultiple) {\n            option.deselect();\n            this.selectionModel.clear();\n        } else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this.selectionModel.select(option) : this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            // if (this.isMultiple) {\n            //     this.sortValues();\n            //     if (isUserInput) {\n            //         this.focus();\n            //     }\n            // }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.thyOptionSelected.emit(new ThyOptionSelectionChangeEvent(option, false));\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private setDropDownClass() {\n        let modeClass = '';\n        if (this.isMultiple) {\n            modeClass = `thy-select-dropdown-${this.mode}`;\n        } else {\n            modeClass = `thy-select-dropdown-single`;\n        }\n        this.dropDownClass = {\n            [`thy-select-dropdown`]: true,\n            [modeClass]: true\n        };\n    }\n\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    Injectable,\n    NgZone,\n    OnDestroy,\n    Input,\n    OnInit,\n    ViewContainerRef,\n    HostBinding,\n    Optional,\n    Inject,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { OverlayRef, Overlay } from '@angular/cdk/overlay';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ThyOverlayDirectiveBase, ThyPlacement } from 'ngx-tethys/core';\nimport { ThyAutocompleteService } from './overlay/autocomplete.service';\nimport { ThyAutocompleteRef } from './overlay/autocomplete-ref';\nimport { ThyAutocompleteComponent } from './autocomplete.component';\nimport { ThyOptionComponent, ThyOptionSelectionChangeEvent } from 'ngx-tethys/shared';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, Observable, merge, fromEvent, of, Subscription } from 'rxjs';\nimport { ESCAPE, UP_ARROW, ENTER, DOWN_ARROW, TAB } from 'ngx-tethys/util';\nimport { filter, map, take, tap, delay, switchMap } from 'rxjs/operators';\nimport { ScrollToService } from 'ngx-tethys/core';\nimport { warnDeprecation } from 'ngx-tethys/util';\n\n@Directive({\n    selector: 'input[thyAutocompleteTrigger], textarea[thyAutocompleteTrigger]',\n    exportAs: 'thyAutocompleteTrigger',\n    host: {\n        '(input)': 'handleInput($event)',\n        '(focusin)': 'onFocus()',\n        '(keydown)': 'onKeydown($event)'\n    }\n})\nexport class ThyAutocompleteTriggerDirective implements OnInit, OnDestroy {\n    protected overlayRef: OverlayRef;\n\n    private autocompleteRef: ThyAutocompleteRef<ThyAutocompleteComponent>;\n\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    private closingActionsSubscription: Subscription;\n\n    private _autocompleteComponent: ThyAutocompleteComponent;\n\n    @HostBinding(`class.thy-autocomplete-opened`) panelOpened = false;\n\n    @Input('thyAutocompleteComponent')\n    set autocompleteComponent(data: ThyAutocompleteComponent) {\n        this._autocompleteComponent = data;\n    }\n\n    @Input('thyAutocomplete')\n    set autocomplete(data: ThyAutocompleteComponent) {\n        warnDeprecation(`The property thyAutocomplete will be deprecated, please use thyAutocompleteComponent instead.`);\n        this._autocompleteComponent = data;\n    }\n\n    get autocompleteComponent() {\n        return this._autocompleteComponent;\n    }\n\n    @Input() thyOffset = 4;\n\n    @Input() thyAutocompleteWidth: number;\n\n    @Input() thyPlacement: ThyPlacement = 'bottomLeft';\n\n    get activeOption(): ThyOptionComponent | null {\n        if (this.autocompleteComponent && this.autocompleteComponent.keyManager) {\n            return this.autocompleteComponent.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelClosingActions(): Observable<ThyOptionSelectionChangeEvent | null> {\n        return merge(\n            this.autocompleteComponent.thyOptionSelected,\n            this.autocompleteComponent.keyManager.tabOut.pipe(filter(() => this.panelOpened)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ? this.overlayRef.detachments().pipe(filter(() => this.panelOpened)) : of()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map(event => (event instanceof ThyOptionSelectionChangeEvent ? event : null))\n        );\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private overlay: Overlay,\n        private autocompleteService: ThyAutocompleteService,\n        private viewContainerRef: ViewContainerRef,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        private cdr: ChangeDetectorRef\n    ) {}\n\n    ngOnInit(): void {}\n\n    onFocus() {\n        if (this.canOpen()) {\n            this.openPanel();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpened) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocompleteComponent) {\n            const prevActiveItem = this.autocompleteComponent.keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpened || keyCode === TAB) {\n                this.autocompleteComponent.keyManager.onKeydown(event);\n            } else if (isArrowKey && this.canOpen()) {\n                this.openPanel();\n            }\n            if (\n                (isArrowKey || this.autocompleteComponent.keyManager.activeItem !== prevActiveItem) &&\n                this.autocompleteComponent.keyManager.activeItem\n            ) {\n                ScrollToService.scrollToElement(\n                    this.autocompleteComponent.keyManager.activeItem.element.nativeElement,\n                    this.autocompleteComponent.optionsContainer.nativeElement\n                );\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent) {\n        if (this.canOpen() && document.activeElement === event.target) {\n            this.openPanel();\n        }\n    }\n\n    openPanel() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            return;\n        }\n        const overlayRef = this.createOverlay();\n        this.overlayRef = overlayRef;\n        overlayRef.keydownEvents().subscribe(event => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                this.resetActiveItem();\n                this.closeKeyEventStream.next();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        });\n        this.panelOpened = true;\n        this.autocompleteComponent.open();\n    }\n\n    closePanel() {\n        if (this.autocompleteRef) {\n            this.autocompleteRef.close();\n            this.cdr.detectChanges();\n            this.closingActionsSubscription.unsubscribe();\n        }\n    }\n\n    createOverlay(): OverlayRef {\n        const config = Object.assign({\n            origin: this.elementRef.nativeElement,\n            viewContainerRef: this.viewContainerRef,\n            placement: this.thyPlacement,\n            offset: this.thyOffset,\n            scrollStrategy: this.overlay.scrollStrategies.reposition(),\n            width: this.thyAutocompleteWidth || this.elementRef.nativeElement.clientWidth\n        });\n        this.autocompleteRef = this.autocompleteService.open(this.autocompleteComponent.contentTemplateRef, config);\n        this.autocompleteRef.afterClosed().subscribe(() => {\n            this.panelOpened = false;\n            this.autocompleteComponent.close();\n        });\n        // delay 200ms to prevent emit document click rightnow\n        this.autocompleteRef\n            .afterOpened()\n            .pipe(delay(200))\n            .subscribe(() => {\n                this.closingActionsSubscription = this.subscribeToClosingActions();\n            });\n        return this.autocompleteRef.getOverlayRef();\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.ngZone.onStable.asObservable().pipe(take(1));\n        const optionChanges = this.autocompleteComponent.options.changes.pipe(\n            // Defer emitting to the stream until the next tick, because changing\n            // bindings in here will cause \"changed after checked\" errors.\n            delay(0)\n        );\n        // When the zone is stable initially, and when the option list changes...\n        return (\n            merge(firstStable, optionChanges)\n                .pipe(\n                    // create a new stream of panelClosingActions, replacing any previous streams\n                    // that were created, and flatten it so our stream only emits closing events...\n                    switchMap(() => {\n                        this.resetActiveItem();\n\n                        if (this.panelOpened) {\n                            this.overlayRef.updatePosition();\n                        }\n                        return this.panelClosingActions;\n                    }),\n                    // when the first closing event occurs...\n                    take(1)\n                )\n                // set the value, close the panel, and complete.\n                .subscribe(event => this.setValueAndClose(event))\n        );\n    }\n\n    private setValueAndClose(event: ThyOptionSelectionChangeEvent | null): void {\n        if (event && event.option) {\n            this.setValue(event.option.thyLabelText);\n        }\n        this.closePanel();\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        return merge(\n            fromEvent(this.document, 'click') as Observable<MouseEvent>,\n            fromEvent(this.document, 'touchend') as Observable<TouchEvent>\n        ).pipe(\n            filter(event => {\n                // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n                // fall back to check the first element in the path of the click event.\n                const clickTarget = event.target as HTMLElement;\n                const formField: any = null;\n\n                return (\n                    this.panelOpened &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    !!this.overlayRef &&\n                    !this.overlayRef.overlayElement.contains(clickTarget)\n                );\n            })\n        );\n    }\n\n    private setValue(value: string) {\n        this.elementRef.nativeElement.value = value;\n        this.elementRef.nativeElement.focus();\n    }\n\n    private canOpen(): boolean {\n        const element: HTMLInputElement = this.elementRef.nativeElement;\n        return !element.readOnly && !element.disabled;\n    }\n\n    private resetActiveItem(): void {\n        this.autocompleteComponent.keyManager.setActiveItem(this.autocompleteComponent.thyAutoActiveFirstOption ? 0 : -1);\n    }\n\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.closeKeyEventStream.complete();\n        this.destroyPanel();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ThyAutocompleteTriggerDirective } from './autocomplete.trigger.directive';\nimport { ThyInputModule } from 'ngx-tethys/input';\nimport { ThyAutocompleteComponent } from './autocomplete.component';\nimport { ThyLabelModule } from 'ngx-tethys/label';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { ThyLoadingModule } from 'ngx-tethys/loading';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyIconModule } from 'ngx-tethys/icon';\nimport { ThyEmptyModule } from 'ngx-tethys/empty';\nimport { ThyAutocompleteContainerComponent } from './overlay/autocomplete-container.component';\nimport { THY_AUTOCOMPLETE_DEFAULT_CONFIG_PROVIDER } from './overlay/autocomplete.config';\nimport { ThyOptionModule } from 'ngx-tethys/shared';\nimport { PortalModule } from '@angular/cdk/portal';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ThyInputModule,\n        ThyLabelModule,\n        OverlayModule,\n        PortalModule,\n        ThyLoadingModule,\n        ThySharedModule,\n        ThyIconModule,\n        ThyEmptyModule,\n        ThyOptionModule\n    ],\n    declarations: [ThyAutocompleteTriggerDirective, ThyAutocompleteComponent, ThyAutocompleteContainerComponent],\n    entryComponents: [ThyAutocompleteContainerComponent],\n    exports: [ThyAutocompleteTriggerDirective, ThyAutocompleteComponent, ThyAutocompleteContainerComponent, ThyOptionModule],\n    providers: [THY_AUTOCOMPLETE_DEFAULT_CONFIG_PROVIDER]\n})\nexport class ThyAutocompleteModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;MAKa,qBAAmC,SAAQ,wBAA+B;CA0BtF;MAEY,+BAA+B,GAAG,IAAI,cAAc,CAAwB,iCAAiC,EAAE;WAI9G;IACN,WAAW,EAAE,KAAK;IAClB,UAAU,EAAE,EAAE;IACd,iBAAiB,EAAE,IAAI;IACvB,cAAc,EAAE,IAAI;IACpB,aAAa,EAAE,KAAK;IACpB,eAAe,EAAE,IAAI;IACrB,iBAAiB,EAAE,gCAAgC;;MAT9C,wCAAwC,GAAG;IACpD,OAAO,EAAE,+BAA+B;IACxC,QAAQ,IAQP;;;AC3CL,MAAM,aAAa,GAAG;IAClB,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC;IACnE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;CAC/C,CAAC;AAEF;;;;MAIa,yBAAyB,GAElC;IACA,qBAAqB,EAAE,OAAO,CAAC,uBAAuB,EAAE,aAAa,CAAC;;;ACZnE,MAAM,+BAA+B,GAA2B;IACnE,IAAI,EAAE,cAAc;IACpB,gBAAgB,EAAE,IAAI;IACtB,gBAAgB,EAAE,IAAI;CACzB;;MCkCY,iCAAkC,SAAQ,2BAA2B;IAe9E,YACY,UAAsB,EACJ,QAAa,EAChC,MAA6B,EACpC,iBAAoC,EAC5B,kBAAsC,EACtC,MAAc;QAEtB,KAAK,CAAC,+BAA+B,EAAE,iBAAiB,CAAC,CAAC;QAPlD,eAAU,GAAV,UAAU,CAAY;QACJ,aAAQ,GAAR,QAAQ,CAAK;QAChC,WAAM,GAAN,MAAM,CAAuB;QAE5B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,WAAM,GAAN,MAAM,CAAQ;;QAhB1B,mBAAc,GAA8B,OAAO,CAAC;;QAGpD,0BAAqB,GAAG,IAAI,YAAY,EAAkB,CAAC;QAiBvD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CACvD,MAAM,CAAC,CAAC,KAAqB;YACzB,OAAO,KAAK,CAAC,SAAS,KAAK,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC;SAClE,CAAC,CACL,CAAC;QACF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CACvD,MAAM,CAAC,CAAC,KAAqB;YACzB,OAAO,KAAK,CAAC,SAAS,KAAK,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC;SACjE,CAAC,CACL,CAAC;KACL;IAtBD,kBAAkB,MAAW;IAwB7B,eAAe,MAAK;;IAGpB,eAAe,CAAC,KAAqB;QACjC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC1C;;IAGD,gBAAgB,CAAC,KAAqB;QAClC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC1C;IAED,kBAAkB;QACd,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;QAC7B,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KACzC;;;YAjEJ,SAAS,SAAC;gBACP,QAAQ,EAAE,4BAA4B;gBACtC,yDAAsD;gBACtD,UAAU,EAAE,CAAC,yBAAyB,CAAC,qBAAqB,CAAC;gBAC7D,IAAI,EAAE;oBACF,KAAK,EAAE,4BAA4B;oBACnC,QAAQ,EAAE,IAAI;oBACd,aAAa,EAAE,gBAAgB;oBAC/B,0BAA0B,EAAE,gBAAgB;oBAC5C,gCAAgC,EAAE,0BAA0B;oBAC5D,+BAA+B,EAAE,yBAAyB;iBAC7D;aACJ;;;YAjCG,UAAU;4CAmDL,MAAM,SAAC,QAAQ;YAtCf,qBAAqB;YAV1B,iBAAiB;YAgBZ,kBAAkB;YAbvB,MAAM;;;2BA6BL,SAAS,SAAC,eAAe,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;MCnC1B,kBAAqC,SAAQ,qBAAoE;CAAG;MAE7H,0BACT,SAAQ,6BAA4E;IAEpF,YAAY,UAAsB,EAAE,iBAAoD,EAAE,MAA6B;QACnH,KAAK,CAAC,+BAA+B,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,CAAC,CAAC;KACjF;;;;;IAMD,cAAc;QACV,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC;KACf;;;MCQQ,sBAAuB,SAAQ,yBAAmF;IAuG3H,YACI,OAAgB,EAChB,QAAkB,EACuB,aAAoC,EACrE,gBAAkC,EAClC,MAAc,EACd,cAA6B,EACX,SAAc,EAChC,SAAmB,EACnB,iBAAmC;QAE3C,KAAK,CAAC,+BAA+B,EAAE,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAPjE,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAe;QACX,cAAS,GAAT,SAAS,CAAK;QAChC,cAAS,GAAT,SAAS,CAAU;QACnB,sBAAiB,GAAjB,iBAAiB,CAAkB;QA9G9B,mBAAc,GAAG,IAAI,OAAO,EAAE,CAAC;QAExC,uBAAkB,GAAG,IAAI,GAAG,EAMjC,CAAC;KAyGH;IAvGO,qBAAqB,CAAQ,MAAoC;QACrE,MAAM,gBAAgB,GAAG,IAAI,iCAAiC,CAC1D,MAAM,CAAC,MAAM,EACb,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,iBAAiB,CACzB,CAAC;QACF,MAAM,SAAS,GAAG,oBAAoB,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;QAC5F,gBAAgB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC1C,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACzC,gBAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM;YAClF,IAAI,MAAM,CAAC,wBAAwB,CAAC,gBAAgB,EAAE;;;gBAGlD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;aACvC;SACJ,CAAC,CAAC;QACH,OAAO,gBAAgB,CAAC;KAC3B;IAES,kBAAkB,CAAQ,MAAoC;QACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAC1D,aAAa,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QAC1C,aAAa,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAC9F,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QACnC,OAAO,aAAa,CAAC;KACxB;IAES,2BAA2B,CAAC,OAAmB,EAAE,MAAkC;QACzF,MAAM,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC;QAC3F,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC7B,MAAM,EAAE,YAAY,IAAI,IAAI,CAAC,QAAQ;YACrC,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;SACpE,CAAC,CAAC;QACH,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,iCAAiC,EAAE,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAClH,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAoC,eAAe,CAAC,CAAC;QACxF,OAAO,YAAY,CAAC,QAAQ,CAAC;KAChC;IAES,qBAAqB,CAC3B,UAAsB,EACtB,iBAAoD,EACpD,MAAkC;QAElC,OAAO,IAAI,0BAA0B,CAAI,UAAU,EAAE,iBAAiB,EAAE,MAAM,CAAC,CAAC;KACnF;IAES,cAAc,CACpB,MAA6B,EAC7B,eAAsC,EACtC,qBAAwD;QAExD,MAAM,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC;QAC3F,MAAM,eAAe,GAAqB;YACtC;gBACI,OAAO,EAAE,iCAAiC;gBAC1C,QAAQ,EAAE,qBAAqB;aAClC;YACD;gBACI,OAAO,EAAE,kBAAkB;gBAC3B,QAAQ,EAAE,eAAe;aAC5B;SACJ,CAAC;QAEF,IAAI,MAAM,CAAC,SAAS,KAAK,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,GAAG,CAAwB,cAAc,EAAE,IAAI,CAAC,CAAC,EAAE;YACvG,eAAe,CAAC,IAAI,CAAC;gBACjB,OAAO,EAAE,cAAc;gBACvB,QAAQ,EAAE;oBACN,KAAK,EAAE,MAAM,CAAC,SAAS;oBACvB,MAAM,EAAE,EAAE,EAAE;iBACf;aACJ,CAAC,CAAC;SACN;QAED,OAAO,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;KACjG;IAEO,2BAA2B,CAAC,MAA6B;QAC7D,IAAI,MAAM,CAAC,iBAAiB,EAAE;YAC1B,aAAa,CAAc,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;SACrG;KACJ;IAEO,8BAA8B,CAAC,MAA6B;QAChE,IAAI,MAAM,CAAC,iBAAiB,EAAE;YAC1B,aAAa,CAAc,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;SACxG;KACJ;IAgBD,IAAI,CACA,sBAAyD,EACzD,MAAqC;QAErC,MAAM,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnD,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,MAAM,CAA0B,CAAC;QACvG,MAAM,GAAG,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC;QAClD,eAAe,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC;YACpC,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC;YAC5C,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;SACjD,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,aAAa,EAAE;YACvC,MAAM;YACN,eAAe;SAClB,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;KAC1B;IAED,WAAW;QACP,IAAI,CAAC,OAAO,EAAE,CAAC;KAClB;;;;YA/IJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YA3BG,OAAO;YAQqD,QAAQ;YAI/D,qBAAqB,uBA0HrB,MAAM,SAAC,+BAA+B;YAlI3C,gBAAgB;YAIyE,MAAM;YAY1F,aAAa;4CAsHb,MAAM,SAAC,QAAQ;YApHf,QAAQ;YAjBb,gBAAgB;;;ACiCpB,MAAM,UAAU,GAAmD,gBAAgB,CAAC,SAAS,CAAC,CAAC;MAYlF,wBAAyB,SAAQ,UAAU;IAwDpD,YAAoB,MAAc,EAAU,iBAAoC;QAC5E,KAAK,EAAE,CAAC;QADQ,WAAM,GAAN,MAAM,CAAQ;QAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;QArDhF,eAAU,GAAG,KAAK,CAAC;QAEnB,SAAI,GAAG,EAAE,CAAC;QAEV,mBAAc,GAAG,KAAK,CAAC;QAIvB,aAAQ,GAAG,KAAK,CAAC;QAcR,2BAAsB,GAA8C,KAAK,CAAC;YAC/E,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,OAAO,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;aACvE;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAC3C,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,CAC/C,CAAC;SACL,CAA8C,CAAC;QAGhD,iBAAY,GAAG,QAAQ,CAAC;QAWd,sBAAiB,GAAgD,IAAI,YAAY,EAAiC,CAAC;QAE1G,cAAS,GAAuB,IAAI,YAAY,EAAQ,CAAC;QAEzD,cAAS,GAAuB,IAAI,YAAY,EAAQ,CAAC;;QAGzD,uBAAkB,GAAgD,IAAI,YAAY,EAAiC,CAAC;KAItI;IApBD,IACI,wBAAwB;QACxB,OAAO,IAAI,CAAC,sBAAsB,CAAC;KACtC;IACD,IAAI,wBAAwB,CAAC,KAAc;QACvC,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAC9D;IAgBD,QAAQ;QACJ,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,sBAAsB,EAAE,CAAC;KACjC;IAED,kBAAkB;QACd,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC;YACjF,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,KAAK,EAAE,CAAC,SAAS,CAAC;gBACd,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC;gBAC/C,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;aAC1C,CAAC,CAAC;YACH,IAAI,CAAC,cAAc,EAAE,CAAC;SACzB,CAAC,CAAC;KACN;IAED,cAAc;QACV,MAAM,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC7E,IAAI,CAAC,UAAU,GAAG,IAAI,0BAA0B,CAAqB,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC9F,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK;YACvE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;SACjG,CAAC,CAAC;KACN;IAED,IAAI;QACA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;QACtC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;KACzB;IAED,KAAK;QACD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;KACzB;IAEO,YAAY;QAChB,MAAM,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7E,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,KAAoC;YAC5G,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;SAClD,CAAC,CAAC;KACN;IAEO,sBAAsB;QAC1B,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;SAC/B;QACD,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAqB,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK;YAC5E,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;YAC/C,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SACtD,CAAC,CAAC;KACN;IAEO,QAAQ,CAAC,MAA0B,EAAE,WAAoB;QAC7D,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAE3D,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC7C,MAAM,CAAC,QAAQ,EAAE,CAAC;YAClB,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;SAC/B;aAAM;YACH,IAAI,WAAW,KAAK,MAAM,CAAC,QAAQ,EAAE;gBACjC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aAC/F;YAED,IAAI,WAAW,EAAE;gBACb,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;aACzC;;;;;;;SAQJ;QAED,IAAI,WAAW,KAAK,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,6BAA6B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;SACjF;QACD,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KACzC;IAEO,gBAAgB;QACpB,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,SAAS,GAAG,uBAAuB,IAAI,CAAC,IAAI,EAAE,CAAC;SAClD;aAAM;YACH,SAAS,GAAG,4BAA4B,CAAC;SAC5C;QACD,IAAI,CAAC,aAAa,GAAG;YACjB,CAAC,qBAAqB,GAAG,IAAI;YAC7B,CAAC,SAAS,GAAG,IAAI;SACpB,CAAC;KACL;IAED,WAAW;QACP,KAAK,CAAC,WAAW,EAAE,CAAC;KACvB;;;YAzKJ,SAAS,SAAC;gBACP,QAAQ,EAAE,kBAAkB;gBAC5B,yTAA0C;gBAC1C,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,SAAS,EAAE;oBACP;wBACI,OAAO,EAAE,2BAA2B;wBACpC,WAAW,EAAE,wBAAwB;qBACxC;iBACJ;aACJ;;;YAzCG,MAAM;YAGN,iBAAiB;;;iCAuDhB,SAAS,SAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;+BAI7C,SAAS,SAAC,OAAO;sBAGjB,eAAe,SAAC,kBAAkB,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;2BAYzD,KAAK;uCAGL,KAAK;gCASL,MAAM;wBAEN,MAAM;wBAEN,MAAM;iCAGN,MAAM;;;MCpEE,+BAA+B;IAuDxC,YACY,UAAsB,EACtB,MAAc,EACd,OAAgB,EAChB,mBAA2C,EAC3C,gBAAkC,EACJ,QAAa,EAC3C,GAAsB;QANtB,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAS;QAChB,wBAAmB,GAAnB,mBAAmB,CAAwB;QAC3C,qBAAgB,GAAhB,gBAAgB,CAAkB;QACJ,aAAQ,GAAR,QAAQ,CAAK;QAC3C,QAAG,GAAH,GAAG,CAAmB;QAzDjB,wBAAmB,GAAG,IAAI,OAAO,EAAQ,CAAC;QAMb,gBAAW,GAAG,KAAK,CAAC;QAiBzD,cAAS,GAAG,CAAC,CAAC;QAId,iBAAY,GAAiB,YAAY,CAAC;KA+B/C;IAlDJ,IACI,qBAAqB,CAAC,IAA8B;QACpD,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;KACtC;IAED,IACI,YAAY,CAAC,IAA8B;QAC3C,eAAe,CAAC,+FAA+F,CAAC,CAAC;QACjH,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;KACtC;IAED,IAAI,qBAAqB;QACrB,OAAO,IAAI,CAAC,sBAAsB,CAAC;KACtC;IAQD,IAAI,YAAY;QACZ,IAAI,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE;YACrE,OAAO,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,UAAU,CAAC;SAC3D;QAED,OAAO,IAAI,CAAC;KACf;IAED,IAAI,mBAAmB;QACnB,OAAO,KAAK,CACR,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAC5C,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,CAAC,EACjF,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,qBAAqB,EAAE,EAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,EAAE,CAC9F,CAAC,IAAI;;QAEF,GAAG,CAAC,KAAK,KAAK,KAAK,YAAY,6BAA6B,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,CAChF,CAAC;KACL;IAYD,QAAQ,MAAW;IAEnB,OAAO;QACH,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAChB,IAAI,CAAC,SAAS,EAAE,CAAC;SACpB;KACJ;IAED,SAAS,CAAC,KAAoB;QAC1B,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;;;;;QAM9B,IAAI,OAAO,KAAK,MAAM,EAAE;YACpB,KAAK,CAAC,cAAc,EAAE,CAAC;SAC1B;QACD,IAAI,IAAI,CAAC,YAAY,IAAI,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE;YAC5D,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC;YACzC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,KAAK,CAAC,cAAc,EAAE,CAAC;SAC1B;aAAM,IAAI,IAAI,CAAC,qBAAqB,EAAE;YACnC,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,UAAU,CAAC;YACxE,MAAM,UAAU,GAAG,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,UAAU,CAAC;YAClE,IAAI,IAAI,CAAC,WAAW,IAAI,OAAO,KAAK,GAAG,EAAE;gBACrC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aAC1D;iBAAM,IAAI,UAAU,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;gBACrC,IAAI,CAAC,SAAS,EAAE,CAAC;aACpB;YACD,IACI,CAAC,UAAU,IAAI,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,UAAU,KAAK,cAAc;gBAClF,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,UAAU,EAClD;gBACE,eAAe,CAAC,eAAe,CAC3B,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,EACtE,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,aAAa,CAC5D,CAAC;aACL;SACJ;KACJ;IAED,WAAW,CAAC,KAAoB;QAC5B,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,QAAQ,CAAC,aAAa,KAAK,KAAK,CAAC,MAAM,EAAE;YAC3D,IAAI,CAAC,SAAS,EAAE,CAAC;SACpB;KACJ;IAED,SAAS;QACL,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE;YAClD,OAAO;SACV;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,UAAU,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,KAAK;;;YAGtC,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,KAAK,KAAK,CAAC,OAAO,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;gBAC1E,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;;;gBAGhC,KAAK,CAAC,eAAe,EAAE,CAAC;gBACxB,KAAK,CAAC,cAAc,EAAE,CAAC;aAC1B;SACJ,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;KACrC;IAED,UAAU;QACN,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;YAC7B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;YACzB,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC;SACjD;KACJ;IAED,aAAa;QACT,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;YACzB,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,aAAa;YACrC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,SAAS,EAAE,IAAI,CAAC,YAAY;YAC5B,MAAM,EAAE,IAAI,CAAC,SAAS;YACtB,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE;YAC1D,KAAK,EAAE,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW;SAChF,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;QAC5G,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC;YACzC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;SACtC,CAAC,CAAC;;QAEH,IAAI,CAAC,eAAe;aACf,WAAW,EAAE;aACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAChB,SAAS,CAAC;YACP,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;SACtE,CAAC,CAAC;QACP,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;KAC/C;;;;;IAMO,yBAAyB;QAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,MAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI;;;QAGjE,KAAK,CAAC,CAAC,CAAC,CACX,CAAC;;QAEF,QACI,KAAK,CAAC,WAAW,EAAE,aAAa,CAAC;aAC5B,IAAI;;;QAGD,SAAS,CAAC;YACN,IAAI,CAAC,eAAe,EAAE,CAAC;YAEvB,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;aACpC;YACD,OAAO,IAAI,CAAC,mBAAmB,CAAC;SACnC,CAAC;;QAEF,IAAI,CAAC,CAAC,CAAC,CACV;;aAEA,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EACvD;KACL;IAEO,gBAAgB,CAAC,KAA2C;QAChE,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;YACvB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,UAAU,EAAE,CAAC;KACrB;;IAGO,qBAAqB;QACzB,OAAO,KAAK,CACR,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAA2B,EAC3D,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAA2B,CACjE,CAAC,IAAI,CACF,MAAM,CAAC,KAAK;;;YAGR,MAAM,WAAW,GAAG,KAAK,CAAC,MAAqB,CAAC;YAChD,MAAM,SAAS,GAAQ,IAAI,CAAC;YAE5B,QACI,IAAI,CAAC,WAAW;gBAChB,WAAW,KAAK,IAAI,CAAC,UAAU,CAAC,aAAa;iBAC5C,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;gBAChD,CAAC,CAAC,IAAI,CAAC,UAAU;gBACjB,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,EACvD;SACL,CAAC,CACL,CAAC;KACL;IAEO,QAAQ,CAAC,KAAa;QAC1B,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACzC;IAEO,OAAO;QACX,MAAM,OAAO,GAAqB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAChE,OAAO,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;KACjD;IAEO,eAAe;QACnB,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACrH;IAEO,YAAY;QAChB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;KACJ;IAED,WAAW;QACP,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC;QACpC,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;;;YAxQJ,SAAS,SAAC;gBACP,QAAQ,EAAE,iEAAiE;gBAC3E,QAAQ,EAAE,wBAAwB;gBAClC,IAAI,EAAE;oBACF,SAAS,EAAE,qBAAqB;oBAChC,WAAW,EAAE,WAAW;oBACxB,WAAW,EAAE,mBAAmB;iBACnC;aACJ;;;YAnCG,UAAU;YAEV,MAAM;YAWW,OAAO;YAGnB,sBAAsB;YAV3B,gBAAgB;4CA2FX,QAAQ,YAAI,MAAM,SAAC,QAAQ;YAvFhC,iBAAiB;;;0BAqChB,WAAW,SAAC,+BAA+B;oCAE3C,KAAK,SAAC,0BAA0B;2BAKhC,KAAK,SAAC,iBAAiB;wBAUvB,KAAK;mCAEL,KAAK;2BAEL,KAAK;;;MClCG,qBAAqB;;;YAnBjC,QAAQ,SAAC;gBACN,OAAO,EAAE;oBACL,YAAY;oBACZ,WAAW;oBACX,cAAc;oBACd,cAAc;oBACd,aAAa;oBACb,YAAY;oBACZ,gBAAgB;oBAChB,eAAe;oBACf,aAAa;oBACb,cAAc;oBACd,eAAe;iBAClB;gBACD,YAAY,EAAE,CAAC,+BAA+B,EAAE,wBAAwB,EAAE,iCAAiC,CAAC;gBAC5G,eAAe,EAAE,CAAC,iCAAiC,CAAC;gBACpD,OAAO,EAAE,CAAC,+BAA+B,EAAE,wBAAwB,EAAE,iCAAiC,EAAE,eAAe,CAAC;gBACxH,SAAS,EAAE,CAAC,wCAAwC,CAAC;aACxD;;;ACnCD;;;;;;"}
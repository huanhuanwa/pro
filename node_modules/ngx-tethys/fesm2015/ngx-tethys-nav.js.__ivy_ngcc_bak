import { Component, ElementRef, Input, HostBinding, Directive, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { ThyIconModule } from 'ngx-tethys/icon';

const navTypeClassesMap = {
    primary: ['nav-primary'],
    secondary: ['nav-secondary'],
    thirdly: ['nav-thirdly'],
    'secondary-divider': ['nav-secondary-divider']
};
const navSizeClassesMap = {
    sm: 'nav-sm'
};
const navHorizontalClassesMap = {
    left: '',
    center: 'justify-content-center',
    right: 'justify-content-end'
};
class ThyNavComponent {
    constructor(updateHostClass, elementRef) {
        this.updateHostClass = updateHostClass;
        this.elementRef = elementRef;
        this._initialized = false;
        this._isVertical = false;
        this._isFill = false;
        this.updateHostClass.initializeElement(elementRef.nativeElement);
    }
    set thyType(type) {
        this._type = type || 'primary';
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thySize(size) {
        this._size = size;
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thyHorizontal(horizontal) {
        this._horizontal = horizontal;
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thyVertical(value) {
        this._isVertical = value;
    }
    set thyFill(value) {
        this._isFill = value;
    }
    _updateClasses() {
        let classNames = [];
        if (navTypeClassesMap[this._type]) {
            classNames = [...navTypeClassesMap[this._type]];
        }
        if (navSizeClassesMap[this._size]) {
            classNames.push(navSizeClassesMap[this._size]);
        }
        if (navHorizontalClassesMap[this._horizontal]) {
            classNames.push(navHorizontalClassesMap[this._horizontal]);
        }
        this.updateHostClass.updateClass(classNames);
    }
    ngOnInit() {
        this._initialized = true;
        this._updateClasses();
    }
}
ThyNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-nav',
                template: `
        <ng-content></ng-content>
    `,
                host: {
                    class: 'thy-nav'
                },
                providers: [UpdateHostClassService]
            },] }
];
ThyNavComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyNavComponent.propDecorators = {
    thyType: [{ type: Input }],
    thySize: [{ type: Input }],
    thyHorizontal: [{ type: Input }],
    thyVertical: [{ type: Input }],
    thyFill: [{ type: Input }],
    _isVertical: [{ type: HostBinding, args: ['class.thy-nav--vertical',] }],
    _isFill: [{ type: HostBinding, args: ['class.thy-nav--fill',] }]
};

class ThyNavLinkDirective {
    constructor() {
        this.navLinkActive = false;
        this.navLinkClass = true;
        // @HostBinding('attr.href') navLinkHref = 'javascript:;';
    }
    set thyNavLinkActive(active) {
        this.navLinkActive = coerceBooleanProperty(active);
    }
}
ThyNavLinkDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyNavLink]'
            },] }
];
ThyNavLinkDirective.propDecorators = {
    thyNavLinkActive: [{ type: Input }],
    navLinkActive: [{ type: HostBinding, args: ['class.active',] }],
    navLinkClass: [{ type: HostBinding, args: ['class.nav-link',] }]
};

class ThyIconNavComponent {
    constructor(updateHostClassService, changeDetectorRef, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.changeDetectorRef = changeDetectorRef;
        this.initialized = false;
        this.isIconNav = true;
        this.updateHostClassService.initializeElement(elementRef);
    }
    set thyType(type) {
        this.type = type;
        this.updateClasses();
        this.changeDetectorRef.markForCheck();
    }
    updateClasses(bypassInitialized) {
        if (!bypassInitialized && !this.initialized) {
            return;
        }
        this.updateHostClassService.updateClass(this.type ? [`thy-icon-nav-${this.type}`] : []);
    }
    ngOnInit() {
        this.initialized = true;
        this.updateClasses(true);
    }
}
ThyIconNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-icon-nav',
                template: "<ng-content></ng-content>\n",
                providers: [UpdateHostClassService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyIconNavComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
ThyIconNavComponent.propDecorators = {
    isIconNav: [{ type: HostBinding, args: [`class.thy-icon-nav`,] }],
    thyType: [{ type: Input }]
};

class ThyIconNavLinkComponent {
    constructor() {
        this.navLinkActive = false;
        this.navLinkClass = true;
    }
    set thyIconNavLinkIcon(icon) {
        this.icon = icon;
    }
    set thyIconNavLinkActive(active) {
        this.navLinkActive = coerceBooleanProperty(active);
    }
}
ThyIconNavLinkComponent.decorators = [
    { type: Component, args: [{
                selector: '[thyIconNavLink]',
                template: '<ng-content></ng-content><thy-icon *ngIf="icon" [thyIconName]="icon"></thy-icon>'
            },] }
];
ThyIconNavLinkComponent.propDecorators = {
    navLinkActive: [{ type: HostBinding, args: ['class.active',] }],
    navLinkClass: [{ type: HostBinding, args: ['class.thy-icon-nav-link',] }],
    thyIconNavLinkIcon: [{ type: Input }],
    thyIconNavLinkActive: [{ type: Input }]
};

class ThyNavModule {
}
ThyNavModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyNavComponent, ThyNavLinkDirective, ThyIconNavComponent, ThyIconNavLinkComponent],
                imports: [CommonModule, ThyIconModule],
                exports: [ThyNavComponent, ThyNavLinkDirective, ThyIconNavComponent, ThyIconNavLinkComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyIconNavComponent, ThyIconNavLinkComponent, ThyNavComponent, ThyNavLinkDirective, ThyNavModule };
//# sourceMappingURL=ngx-tethys-nav.js.map

{"version":3,"file":"ngx-tethys-fullscreen.js","sources":["../../src/fullscreen/fullscreen.config.ts","../../src/fullscreen/fullscreen-ref.ts","../../src/fullscreen/fullscreen.service.ts","../../src/fullscreen/fullscreen.component.ts","../../src/fullscreen/fullscreen.module.ts","../../src/fullscreen/ngx-tethys-fullscreen.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\n\nexport interface ThyFullscreenConfig {\n    /**\n     * immersive 模式使用了浏览器提供的全屏，整个窗体都全屏，emulated 模式为仿真的，只会在 body 区域全屏，默认 immersive\n     */\n    mode?: ThyFullscreenMode;\n    /**\n     * 需要全屏的目标元素，可以是选择器，可以是 HTML Element, 也可以是 Angular 的 ElementRef\n     */\n    target: string | Element | ElementRef;\n    /**\n     * 目标元素已经打开全屏的样式\n     */\n    targetLaunchededClasse?: string;\n    /**\n     * emulated 模式下的目标元素全屏的容器，默认是 body\n     */\n    emulatedContainer?: string | Element | ElementRef;\n}\n\nexport enum ThyFullscreenMode {\n    immersive = 'immersive',\n    emulated = 'emulated'\n}\n","import { coerceElement } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ElementRef, Inject } from '@angular/core';\nimport { fromEvent, merge, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyFullscreenConfig, ThyFullscreenMode } from './fullscreen.config';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\nexport class ThyFullscreenRef<TResult = unknown> {\n    fullscreenConfig: ThyFullscreenConfig;\n\n    private isFullscreen = false;\n\n    private ngUnsubscribe$ = new Subject();\n\n    private readonly _afterLaunched = new Subject<TResult>();\n\n    private readonly _afterExited = new Subject<TResult>();\n\n    constructor(@Inject(DOCUMENT) protected document: any) {}\n\n    private onFullscreenChange() {\n        const isFullScreen = this.isImmersiveFullscreen();\n        if (isFullScreen) {\n            this.launchNormalFullscreen();\n        } else {\n            this.exitNormalFullscreen();\n        }\n    }\n\n    private resetElement(element: string | Element | ElementRef) {\n        const targetType = typeof element;\n        if (targetType === 'string') {\n            return this.document.querySelector(`.${element}`);\n        } else {\n            return coerceElement(element);\n        }\n    }\n\n    private isImmersiveFullscreen() {\n        const doc = this.document;\n        return !!(doc['fullscreenElement'] || doc['mozFullScreenElement'] || doc['webkitFullscreenElement'] || doc['msFullscreenElement']);\n    }\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (event.keyCode === ESCAPE) {\n            if (this.isFullscreen && this.fullscreenConfig.mode === ThyFullscreenMode.emulated) {\n                this.exitNormalFullscreen();\n            }\n        }\n    }\n\n    private launchNormalFullscreen() {\n        const targetElement = this.resetElement(this.fullscreenConfig.target);\n        const classes = this.fullscreenConfig.targetLaunchededClasse;\n        const container = this.fullscreenConfig.emulatedContainer;\n        if (container) {\n            const containerElement = this.resetElement(container);\n            const containerClientRect = containerElement.getBoundingClientRect();\n            const targetClientRect = targetElement.getBoundingClientRect();\n            const distanceX = containerClientRect.left - targetClientRect.left;\n            const distanceY = containerClientRect.top - targetClientRect.top;\n            targetElement.style.transform = `translate(${distanceX}px, ${distanceY}px)`;\n            targetElement.style.width = `${containerClientRect.width}px`;\n            targetElement.style.height = `${containerClientRect.height}px`;\n        } else {\n            targetElement.classList.add('thy-fullscreen');\n        }\n        targetElement.classList.add('thy-fullscreen-active');\n        if (classes && classes.length) {\n            targetElement.classList.add(classes);\n        }\n        this.isFullscreen = true;\n        this._afterLaunched.next();\n    }\n\n    private exitNormalFullscreen() {\n        const targetElement = this.resetElement(this.fullscreenConfig.target);\n        const classes = this.fullscreenConfig.targetLaunchededClasse;\n        const container = this.fullscreenConfig.emulatedContainer;\n        if (container) {\n            targetElement.style.transform = ``;\n            targetElement.style.width = ``;\n            targetElement.style.height = ``;\n        } else {\n            targetElement.classList.remove('thy-fullscreen');\n        }\n        targetElement.classList.remove('thy-fullscreen-active');\n        if (classes && classes.length) {\n            targetElement.classList.remove(classes);\n        }\n\n        this.isFullscreen = false;\n        this._afterExited.next();\n\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n    protected launchImmersiveFullscreen() {\n        const docElement = this.document.documentElement;\n\n        if (docElement.requestFullscreen) {\n            docElement.requestFullscreen();\n        } else if (docElement['mozRequestFullScreen']) {\n            docElement['mozRequestFullScreen']();\n        } else if (docElement['webkitRequestFullscreen']) {\n            docElement['webkitRequestFullscreen']();\n        } else if (docElement['msRequestFullscreen']) {\n            docElement['msRequestFullscreen']();\n        }\n    }\n\n    protected exitImmersiveFullscreen() {\n        const doc = this.document;\n        if (doc['exitFullscreen']) {\n            doc['exitFullscreen']();\n        } else if (doc['mozCancelFullScreen']) {\n            doc['mozCancelFullScreen']();\n        } else if (doc['webkitExitFullscreen']) {\n            doc['webkitExitFullscreen']();\n        } else if (doc['msExitFullscreen']) {\n            doc['msExitFullscreen']();\n        }\n    }\n\n    launch() {\n        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {\n            merge(\n                fromEvent(this.document, 'fullscreenchange'),\n                fromEvent(this.document, 'MSFullscreenChange'),\n                fromEvent(this.document, 'webkitfullscreenchange')\n            )\n                .pipe(takeUntil(this.ngUnsubscribe$))\n                .subscribe(() => {\n                    this.onFullscreenChange();\n                });\n            this.launchImmersiveFullscreen();\n        } else {\n            fromEvent(this.document, 'keydown')\n                .pipe(takeUntil(this.ngUnsubscribe$))\n                .subscribe(event => {\n                    this.handleKeyDown(event as KeyboardEvent);\n                });\n            this.launchNormalFullscreen();\n        }\n    }\n\n    exit() {\n        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {\n            this.exitImmersiveFullscreen();\n        } else {\n            this.exitNormalFullscreen();\n        }\n    }\n\n    afterLaunched(): Observable<TResult> {\n        return this._afterLaunched.asObservable();\n    }\n\n    afterExited(): Observable<TResult> {\n        return this._afterExited.asObservable();\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { ThyFullscreenRef } from './fullscreen-ref';\nimport { ThyFullscreenConfig, ThyFullscreenMode } from './fullscreen.config';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyFullscreen {\n    constructor(@Inject(DOCUMENT) protected document: any) {}\n\n    private fullscreenRefs: ThyFullscreenRef[] = [];\n\n    /**\n     * 开始全屏\n     * @param config\n     */\n    launch<TResult = unknown>(config: ThyFullscreenConfig): ThyFullscreenRef<TResult> {\n        config.mode = config.mode || ThyFullscreenMode.immersive;\n        const fullscreenRef = new ThyFullscreenRef<TResult>(this.document);\n        fullscreenRef.fullscreenConfig = config;\n        fullscreenRef.launch();\n        this.fullscreenRefs.push(fullscreenRef);\n        fullscreenRef.afterExited().subscribe(() => {\n            const index = this.fullscreenRefs.indexOf(fullscreenRef);\n            if (index > -1) {\n                this.fullscreenRefs.splice(index, 1);\n            }\n        });\n\n        return fullscreenRef;\n    }\n\n    /**\n     * 退出最后一个 ThyFullscreenRef 的全屏\n     * @param config\n     */\n    exit() {\n        const lastFullscreenRef = this.fullscreenRefs[this.fullscreenRefs.length - 1];\n        lastFullscreenRef.exit();\n    }\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyFullscreenMode } from './fullscreen.config';\nimport { ThyFullscreen } from './fullscreen.service';\n@Component({\n    selector: 'thy-fullscreen, [thyFullscreen]',\n    templateUrl: './fullscreen.component.html'\n})\nexport class ThyFullscreenComponent implements OnInit, AfterViewInit, OnDestroy {\n    @Input() thyMode: ThyFullscreenMode = ThyFullscreenMode.immersive;\n\n    @Input() thyFullscreenClasses: string;\n\n    @Output() thyFullscreenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private ngUnsubscribe$ = new Subject();\n\n    constructor(private elementRef: ElementRef, private service: ThyFullscreen) {}\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');\n        if (btnLaunch) {\n            btnLaunch.addEventListener('click', this.handleFullscreen);\n        }\n    }\n\n    // 点击打开或关闭全屏\n    private handleFullscreen = () => {\n        const targetElement = this.elementRef.nativeElement.querySelector('[fullscreen-target]');\n        const containerElement = this.elementRef.nativeElement.querySelector('[fullscreen-container]');\n        const fullscreen = targetElement.classList.contains('thy-fullscreen-active');\n\n        if (fullscreen) {\n            this.service.exit();\n        } else {\n            const fullscreenRef = this.service.launch({\n                mode: this.thyMode,\n                target: targetElement,\n                targetLaunchededClasse: this.thyFullscreenClasses,\n                emulatedContainer: containerElement\n            });\n\n            this.thyFullscreenChange.emit(true);\n\n            fullscreenRef.afterExited().subscribe(() => {\n                this.thyFullscreenChange.emit(false);\n            });\n        }\n    };\n\n    ngOnDestroy() {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n\n        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');\n        if (btnLaunch) {\n            btnLaunch.removeEventListener('click', this.handleFullscreen);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyFullscreenComponent } from './fullscreen.component';\n@NgModule({\n    declarations: [ThyFullscreenComponent],\n    imports: [CommonModule],\n    exports: [ThyFullscreenComponent]\n})\nexport class ThyFullscreenModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
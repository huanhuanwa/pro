import { ThyButtonModule } from 'ngx-tethys/button';
import { ThyFlexibleTextModule } from 'ngx-tethys/flexible-text';
import { ThyIconModule } from 'ngx-tethys/icon';
import { CommonModule } from '@angular/common';
import { Component, HostBinding, EventEmitter, ElementRef, Output, ContentChild, ViewChild, Input, HostListener, NgModule } from '@angular/core';
import { UpdateHostClassService, ThyTranslate } from 'ngx-tethys/core';
import { coerceBooleanProperty, htmlElementIsEmpty } from 'ngx-tethys/util';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/button';
import * as ɵngcc4 from 'ngx-tethys/flexible-text';
import * as ɵngcc5 from 'ngx-tethys/icon';

const _c0 = ["*"];
const _c1 = ["operationIcon"];
const _c2 = ["contentElement"];
function ThyPropertyOperationComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c3 = function (a0) { return { disabled: a0 }; };
function ThyPropertyOperationComponent_button_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "button", 8);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c3, ctx_r1.disabled))("thyButtonIcon", ctx_r1.icon)("thyShape", ctx_r1.onlyHasTips ? "circle-thick-dashed" : "circle-thick-solid");
} }
function ThyPropertyOperationComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyTooltipContent", ctx_r3.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.value);
} }
function ThyPropertyOperationComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.labelText);
} }
function ThyPropertyOperationComponent_span_9_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 11);
    ɵngcc0.ɵɵlistener("click", function ThyPropertyOperationComponent_span_9_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.remove($event); });
    ɵngcc0.ɵɵelement(1, "thy-icon", 12);
    ɵngcc0.ɵɵelementEnd();
} }
const _c4 = function (a0) { return { "only-has-tips": a0 }; };
class ThyPropertyOperationGroupComponent {
    constructor() {
        this._isPropertyOperationGroup = true;
    }
}
ThyPropertyOperationGroupComponent.ɵfac = function ThyPropertyOperationGroupComponent_Factory(t) { return new (t || ThyPropertyOperationGroupComponent)(); };
ThyPropertyOperationGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyPropertyOperationGroupComponent, selectors: [["thy-property-operation-group"]], hostVars: 2, hostBindings: function ThyPropertyOperationGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-property-operation-group", ctx._isPropertyOperationGroup);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyPropertyOperationGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyPropertyOperationGroupComponent.ctorParameters = () => [];
ThyPropertyOperationGroupComponent.propDecorators = {
    _isPropertyOperationGroup: [{ type: HostBinding, args: ['class.thy-property-operation-group',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyPropertyOperationGroupComponent, [{
        type: Component,
        args: [{
                selector: 'thy-property-operation-group',
                template: "<ng-content></ng-content>\n"
            }]
    }], function () { return []; }, { _isPropertyOperationGroup: [{
            type: HostBinding,
            args: ['class.thy-property-operation-group']
        }] }); })();

class ThyPropertyOperationComponent {
    constructor(thyTranslate, updateHostClassService, elementRef) {
        this.thyTranslate = thyTranslate;
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.initialized = false;
        this.onlyHasTips = false;
        this.showClose = false;
        this.labelHideWhenHasValue = false;
        this.thyOnRemove = new EventEmitter();
        this.thyClick = new EventEmitter();
        this._isPropertyOperation = true;
    }
    set thyLabelText(value) {
        this.labelText = value;
    }
    set thyValue(value) {
        this.value = value;
        this.setOnlyHasTips();
    }
    set thyLabelTextTranslateKey(value) {
        this.labelText = this.thyTranslate.instant(value);
    }
    set thyIcon(value) {
        this.icon = value;
    }
    set thyShowClose(value) {
        this.showClose = coerceBooleanProperty(value);
    }
    // 支持有值时，label不显示
    set thyLabelHasValue(value) {
        this.labelHideWhenHasValue = !coerceBooleanProperty(value);
    }
    set thyLabelHideWhenHasValue(value) {
        this.labelHideWhenHasValue = coerceBooleanProperty(value);
    }
    set thyType(value) {
        this.type = value;
        this.setHostClass();
    }
    setHostClass(first = false) {
        if (!this.initialized && !first) {
            return;
        }
        this.updateHostClassService.updateClass(this.type ? [`thy-property-operation-${this.type}`] : []);
    }
    setOnlyHasTips(first = false) {
        if (!this.initialized && !first) {
            return;
        }
        if (this.value) {
            this.onlyHasTips = false;
        }
        else if (htmlElementIsEmpty(this.contentElement.nativeElement)) {
            this.onlyHasTips = true;
        }
        else {
            this.onlyHasTips = false;
        }
    }
    ngOnInit() {
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this.setHostClass(true);
    }
    onclick(event) {
        if (!this.disabled) {
            this.thyClick.emit(event);
        }
    }
    ngAfterContentInit() {
        this.setOnlyHasTips(true);
        this.initialized = true;
    }
    remove($event) {
        $event.stopPropagation();
        this.thyOnRemove.emit($event);
    }
}
ThyPropertyOperationComponent.ɵfac = function ThyPropertyOperationComponent_Factory(t) { return new (t || ThyPropertyOperationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyTranslate), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyPropertyOperationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyPropertyOperationComponent, selectors: [["thy-property-operation"]], contentQueries: function ThyPropertyOperationComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.operationIcon = _t.first);
    } }, viewQuery: function ThyPropertyOperationComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c2, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);
    } }, hostVars: 6, hostBindings: function ThyPropertyOperationComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyPropertyOperationComponent_click_HostBindingHandler($event) { return ctx.onclick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-property-operation", ctx._isPropertyOperation)("active", ctx.active)("thy-property-operation-disabled", ctx.disabled);
    } }, inputs: { thyLabelText: "thyLabelText", thyValue: "thyValue", thyLabelTextTranslateKey: "thyLabelTextTranslateKey", thyIcon: "thyIcon", thyShowClose: "thyShowClose", thyLabelHasValue: "thyLabelHasValue", thyLabelHideWhenHasValue: "thyLabelHideWhenHasValue", thyType: "thyType", active: ["thyActive", "active"], disabled: ["thyDisabled", "disabled"] }, outputs: { thyOnRemove: "thyOnRemove", thyClick: "thyClick" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], ngContentSelectors: _c0, decls: 10, vars: 8, consts: [[1, "thy-operation-icon"], [4, "ngTemplateOutlet"], [3, "ngClass", "thyButtonIcon", "thyShape", 4, "ngIf"], [1, "thy-operation-content", 3, "ngClass"], ["contentElement", ""], [4, "ngIf"], ["class", "thy-tips", 4, "ngIf"], ["class", "close-link close-link-danger", 3, "click", 4, "ngIf"], [3, "ngClass", "thyButtonIcon", "thyShape"], ["thyFlexibleText", "", 3, "thyTooltipContent"], [1, "thy-tips"], [1, "close-link", "close-link-danger", 3, "click"], ["thyIconName", "close", 1, "close-link-sm"]], template: function ThyPropertyOperationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ThyPropertyOperationComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, ThyPropertyOperationComponent_button_2_Template, 1, 5, "button", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", null, 4);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ThyPropertyOperationComponent_ng_container_7_Template, 3, 2, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(8, ThyPropertyOperationComponent_div_8_Template, 2, 1, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, ThyPropertyOperationComponent_span_9_Template, 2, 0, "span", 7);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.operationIcon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c4, ctx.onlyHasTips));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.value || !ctx.labelHideWhenHasValue && ctx.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showClose && !ctx.disabled);
    } }, directives: [ɵngcc2.NgTemplateOutlet, ɵngcc2.NgIf, ɵngcc2.NgClass, ɵngcc3.ThyButtonIconComponent, ɵngcc4.ThyFlexibleTextComponent, ɵngcc5.ThyIconComponent], encapsulation: 2 });
ThyPropertyOperationComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyPropertyOperationComponent.propDecorators = {
    thyOnRemove: [{ type: Output }],
    thyClick: [{ type: Output }],
    _isPropertyOperation: [{ type: HostBinding, args: ['class.thy-property-operation',] }],
    operationIcon: [{ type: ContentChild, args: ['operationIcon',] }],
    contentElement: [{ type: ViewChild, args: ['contentElement', { static: true },] }],
    thyLabelText: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyLabelTextTranslateKey: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thyShowClose: [{ type: Input }],
    thyLabelHasValue: [{ type: Input }],
    thyLabelHideWhenHasValue: [{ type: Input }],
    thyType: [{ type: Input }],
    active: [{ type: HostBinding, args: ['class.active',] }, { type: Input, args: ['thyActive',] }],
    disabled: [{ type: HostBinding, args: ['class.thy-property-operation-disabled',] }, { type: Input, args: ['thyDisabled',] }],
    onclick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyPropertyOperationComponent, [{
        type: Component,
        args: [{
                selector: 'thy-property-operation',
                template: "<div class=\"thy-operation-icon\">\n  <ng-container *ngTemplateOutlet=\"operationIcon\"></ng-container>\n  <button\n    *ngIf=\"icon\"\n    [ngClass]=\"{ disabled: disabled }\"\n    [thyButtonIcon]=\"icon\"\n    [thyShape]=\"onlyHasTips ? 'circle-thick-dashed' : 'circle-thick-solid'\"\n  ></button>\n</div>\n<div class=\"thy-operation-content\" [ngClass]=\"{ 'only-has-tips': onlyHasTips }\">\n  <div #contentElement>\n    <ng-content></ng-content>\n  </div>\n  <ng-container *ngIf=\"value\">\n    <span thyFlexibleText [thyTooltipContent]=\"value\">{{ value }}</span>\n  </ng-container>\n\n  <div class=\"thy-tips\" *ngIf=\"!value || (!labelHideWhenHasValue && value)\">{{ labelText }}</div>\n</div>\n<span *ngIf=\"showClose && !disabled\" (click)=\"remove($event)\" class=\"close-link close-link-danger\">\n  <thy-icon thyIconName=\"close\" class=\" close-link-sm\"></thy-icon>\n</span>\n",
                providers: [UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc1.ThyTranslate }, { type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { thyOnRemove: [{
            type: Output
        }], thyClick: [{
            type: Output
        }], _isPropertyOperation: [{
            type: HostBinding,
            args: ['class.thy-property-operation']
        }], thyLabelText: [{
            type: Input
        }], thyValue: [{
            type: Input
        }], thyLabelTextTranslateKey: [{
            type: Input
        }], thyIcon: [{
            type: Input
        }], thyShowClose: [{
            type: Input
        }], thyLabelHasValue: [{
            type: Input
        }], thyLabelHideWhenHasValue: [{
            type: Input
        }], thyType: [{
            type: Input
        }], onclick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], operationIcon: [{
            type: ContentChild,
            args: ['operationIcon']
        }], contentElement: [{
            type: ViewChild,
            args: ['contentElement', { static: true }]
        }], active: [{
            type: HostBinding,
            args: ['class.active']
        }, {
            type: Input,
            args: ['thyActive']
        }], disabled: [{
            type: HostBinding,
            args: ['class.thy-property-operation-disabled']
        }, {
            type: Input,
            args: ['thyDisabled']
        }] }); })();

class ThyPropertyOperationModule {
}
ThyPropertyOperationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyPropertyOperationModule });
ThyPropertyOperationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyPropertyOperationModule_Factory(t) { return new (t || ThyPropertyOperationModule)(); }, imports: [[CommonModule, ThyButtonModule, ThyIconModule, ThyFlexibleTextModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyPropertyOperationModule, { declarations: function () { return [ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent]; }, imports: function () { return [CommonModule, ThyButtonModule, ThyIconModule, ThyFlexibleTextModule]; }, exports: function () { return [ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyPropertyOperationModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent],
                imports: [CommonModule, ThyButtonModule, ThyIconModule, ThyFlexibleTextModule],
                exports: [ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent, ThyPropertyOperationModule };

//# sourceMappingURL=ngx-tethys-property-operation.js.map
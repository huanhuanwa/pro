import * as i2 from '@angular/router';
import { Router } from '@angular/router';
import { helpers } from 'ngx-tethys/util';
import * as i5 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i1 from 'ngx-tethys/popover';
import { ThyPopover, ThyPopoverModule } from 'ngx-tethys/popover';
import * as i0 from '@angular/core';
import { Injectable, RendererFactory2, NgZone, Inject, Directive, ElementRef, Input, Component, HostBinding, NgModule } from '@angular/core';
import { fromEvent, ReplaySubject, Subject } from 'rxjs';
import * as i4 from '@angular/cdk/overlay';
import { Overlay } from '@angular/cdk/overlay';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyButtonModule } from 'ngx-tethys/button';
import { take } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/popover';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/cdk/overlay';
import * as ɵngcc4 from '@angular/common';

function ThyGuiderHintComponent_ng_container_8_ng_template_1_Template(rf, ctx) { }
function ThyGuiderHintComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyGuiderHintComponent_ng_container_8_ng_template_1_Template, 0, 0, "ng-template", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.descriptionTemplateRef);
} }
function ThyGuiderHintComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.descriptionString);
} }
const _c0 = function (a0) { return { active: a0 }; };
function ThyGuiderHintComponent_span_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 15);
} if (rf & 2) {
    const i_r10 = ctx.index;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c0, i_r10 === ctx_r3.stepRef.stepIndex));
} }
function ThyGuiderHintComponent_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "a", 16);
    ɵngcc0.ɵɵlistener("click", function ThyGuiderHintComponent_ng_container_15_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.prev(); });
    ɵngcc0.ɵɵtext(2, "\u4E0A\u4E00\u6B65");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ThyGuiderHintComponent_ng_container_16_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "a", 17);
    ɵngcc0.ɵɵlistener("click", function ThyGuiderHintComponent_ng_container_16_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.next(); });
    ɵngcc0.ɵɵtext(2, "\u4E0B\u4E00\u6B65");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ThyGuiderHintComponent_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 17);
    ɵngcc0.ɵɵlistener("click", function ThyGuiderHintComponent_ng_template_17_Template_a_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.end(); });
    ɵngcc0.ɵɵtext(1, "\u5B8C\u6210");
    ɵngcc0.ɵɵelementEnd();
} }
class ThyGuiderManager {
    constructor() {
        this.targetListMap = {};
    }
    updateActive(key, guiderRef) {
        this.activeStepKey = key;
        this.thyGuiderRef = guiderRef;
    }
    addStepTarget(key, el) {
        this.targetListMap[key] = el;
    }
    removeStepTarget(key) {
        delete this.targetListMap[key];
    }
    getActiveTarget(key) {
        return this.targetListMap[key];
    }
    getActive() {
        return {
            key: this.activeStepKey,
            guiderRef: this.thyGuiderRef
        };
    }
}
ThyGuiderManager.ɵfac = function ThyGuiderManager_Factory(t) { return new (t || ThyGuiderManager)(); };
ThyGuiderManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyGuiderManager_Factory() { return new ThyGuiderManager(); }, token: ThyGuiderManager, providedIn: "root" });
ThyGuiderManager.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyGuiderManager, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

const pointContainerSize = 28;
class ThyGuiderStepRef {
    constructor(step, stepIndex, rendererFactory, popover, guiderManager, overlay, document) {
        this.step = step;
        this.stepIndex = stepIndex;
        this.rendererFactory = rendererFactory;
        this.popover = popover;
        this.guiderManager = guiderManager;
        this.overlay = overlay;
        this.document = document;
        this.renderer = this.rendererFactory.createRenderer(null, null);
    }
    show(guiderRef) {
        this.guiderRef = guiderRef;
        this.createPoint(this.step, guiderRef);
    }
    dispose() {
        this.removeLastPointContainer();
        this.removeTip();
    }
    getTargetElement(step) {
        let targetElement;
        if (step.target) {
            targetElement = this.document.querySelector(step.target);
        }
        else {
            targetElement = this.guiderManager.getActiveTarget(step.key);
        }
        return targetElement;
    }
    createPoint(step, guiderRef) {
        var _a;
        // target 为空并且 guiderManager 中的 targetMap 也没有此step 的 key，或者 target 直接为 坐标数组
        // 则执行无 target 的显示
        if (!this.isTipHasTarget(step)) {
            this.createTip(this.step);
            return;
        }
        const targetElement = this.getTargetElement(step);
        if (helpers.isNull(targetElement)) {
            throw new Error(`there is no target called ${step.target}`);
        }
        this.targetElementObserver = fromEvent(targetElement, 'click').subscribe(() => {
            guiderRef.targetClicked().next(step);
        });
        const positionValue = (_a = targetElement === null || targetElement === void 0 ? void 0 : targetElement.style) === null || _a === void 0 ? void 0 : _a.position;
        if (!positionValue || positionValue === 'static') {
            this.renderer.setStyle(targetElement, 'position', 'relative');
        }
        this.setStyleForPointContainer(step, targetElement);
    }
    setStyleForPointContainer(step, targetElement) {
        const pointPosition = this.getPointPosition(step, targetElement);
        const pointContainer = this.setPointPosition(pointPosition);
        this.renderPoint(targetElement, pointContainer);
    }
    getPointPosition(step, targetElement) {
        const targetElementClientRect = targetElement.getBoundingClientRect();
        const { width: targetElementWidth, height: targetElementHeight } = targetElementClientRect;
        const pointOffset = step.pointOffset;
        // 只通过 pointOffset 控制 point 的位置，默认在 target 的右下角，
        // offset 的基点也为默认位置
        return [targetElementWidth + pointOffset[0], targetElementHeight + pointOffset[1]];
    }
    setPointPosition(pointPosition) {
        const currentPointContainer = this.renderer.createElement('div');
        this.renderer.addClass(currentPointContainer, 'thy-guider-highlight-container');
        if (this.guiderRef.config.pointClass) {
            this.addPointClass(currentPointContainer, this.guiderRef.config.pointClass);
        }
        this.renderer.setStyle(currentPointContainer, 'position', 'absolute');
        this.renderer.setStyle(currentPointContainer, 'left', pointPosition[0] + 'px');
        this.renderer.setStyle(currentPointContainer, 'top', pointPosition[1] + 'px');
        this.renderer.setStyle(currentPointContainer, 'transform', 'translate(-100%,-100%)');
        return currentPointContainer;
    }
    addPointClass(el, pointClass) {
        if (helpers.isString(pointClass)) {
            this.renderer.addClass(el, pointClass);
        }
        if (helpers.isArray(pointClass)) {
            pointClass.forEach(classItem => {
                this.renderer.addClass(el, classItem);
            });
        }
    }
    renderPoint(targetElement, pointContainer) {
        this.renderer.appendChild(targetElement, pointContainer);
        this.lastPointerContainer = pointContainer;
        this.lastTargetElement = targetElement;
        this.createTip(this.step);
    }
    removeLastPointContainer() {
        if (this.lastPointerContainer) {
            this.renderer.removeChild(this.document.body, this.lastPointerContainer);
            this.lastPointerContainer = undefined;
        }
    }
    createTip(step) {
        if (this.isTipHasTarget(step)) {
            this.tipWithTarget(step);
        }
        else {
            this.tipWithoutTarget(step);
        }
    }
    tipWithoutTarget(step) {
        const position = this.getTipPosition(step);
        this.lastPopoverRef = this.popover.open(this.guiderRef.config.hintComponent, {
            origin: null,
            originPosition: {
                x: position[0],
                y: position[1]
            },
            originActiveClass: '',
            panelClass: this.guiderRef.config.hintClass || '',
            backdropClosable: false,
            hasBackdrop: false,
            manualClosure: true,
            initialState: {
                guiderRef: this.guiderRef,
                stepRef: this
            },
            scrollStrategy: this.overlay.scrollStrategies.block()
        });
    }
    getTipPosition(step) {
        if (Array.isArray(step.target)) {
            return step.target;
        }
        return this.guiderRef.config.defaultPosition;
    }
    createTipContainer() {
        const tipContainer = this.renderer.createElement('div');
        this.renderer.addClass(tipContainer, 'thy-guider-content-container');
        this.renderer.setStyle(tipContainer, 'position', 'absolute');
        this.renderer.setStyle(tipContainer, 'top', '0px');
        this.renderer.setStyle(tipContainer, 'right', '0px');
        this.renderer.setStyle(tipContainer, 'bottom', '0px');
        this.renderer.setStyle(tipContainer, 'left', '0px');
        return tipContainer;
    }
    tipWithTarget(step) {
        let targetElement;
        if (step.target) {
            targetElement = this.document.querySelector(step.target);
        }
        else {
            targetElement = this.guiderManager.getActiveTarget(step.key);
        }
        const hintContainer = this.createTipContainer();
        this.renderer.appendChild(targetElement, hintContainer);
        this.lastTipContainer = hintContainer;
        const popoverConfig = {
            origin: hintContainer,
            placement: step.hintPlacement,
            panelClass: this.guiderRef.config.hintClass || '',
            backdropClosable: false,
            hasBackdrop: false,
            manualClosure: true,
            initialState: {
                guiderRef: this.guiderRef,
                stepRef: this
            },
            scrollStrategy: this.overlay.scrollStrategies.block()
        };
        const pointPosition = this.getPointPosition(step, targetElement);
        const hintOffset = this.getTipOffset(step, pointPosition, targetElement);
        if (hintOffset) {
            popoverConfig.offset = hintOffset;
        }
        this.lastPopoverRef = this.popover.open(this.guiderRef.config.hintComponent, popoverConfig);
    }
    getTipOffset(step, pointPosition, targetElement) {
        const hintPlacement = step.hintPlacement;
        const targetElementClientRect = targetElement.getBoundingClientRect();
        const { width: targetElementWidth, height: targetElementHeight } = targetElementClientRect;
        let hintOffset = step.hintOffset || 0;
        const pointXAxisOffset = pointPosition[0];
        const pointYAxisOffset = pointPosition[1];
        if (hintPlacement.startsWith('top')) {
            if (pointYAxisOffset < pointContainerSize) {
                hintOffset = hintOffset + Math.abs(pointYAxisOffset) + pointContainerSize;
            }
        }
        else if (hintPlacement.startsWith('bottom')) {
            if (pointYAxisOffset > targetElementHeight) {
                hintOffset = hintOffset + (pointYAxisOffset - targetElementHeight) + 10; // 10 为空隙量
            }
        }
        else if (hintPlacement.startsWith('left')) {
            if (pointXAxisOffset < 0) {
                hintOffset = hintOffset + Math.abs(pointXAxisOffset) + pointContainerSize;
            }
        }
        else if (hintPlacement.startsWith('right')) {
            if (pointXAxisOffset > targetElementWidth) {
                hintOffset = hintOffset + (pointXAxisOffset - targetElementWidth) + 10; // 10 为空隙量
            }
        }
        return hintOffset;
    }
    removeTip() {
        if (this.lastPopoverRef) {
            this.lastPopoverRef.close();
            this.lastPopoverRef = undefined;
        }
        if (this.lastTipContainer) {
            this.renderer.removeChild(this.document.body, this.lastTipContainer);
            this.lastTipContainer = undefined;
        }
        if (this.lastTargetElement && this.targetElementObserver) {
            this.targetElementObserver.unsubscribe();
            this.lastTargetElement = undefined;
            this.targetElementObserver = undefined;
        }
    }
    isTipHasTarget(step) {
        if (step.target) {
            return !Array.isArray(step.target);
        }
        else {
            return !!this.guiderManager.getActiveTarget(step.key);
        }
    }
}

class ThyGuiderConfig {
}
const defaultGuiderPositionConfig = {
    hintComponent: null,
    hintPlacement: 'rightBottom',
    defaultPosition: [0, 0],
    pointOffset: [0, 0],
    hintOffset: 4
};

class ThyGuiderRef {
    constructor(config, rendererFactory, popover, router, guiderManager, ngZone, overlay, document) {
        this.config = config;
        this.rendererFactory = rendererFactory;
        this.popover = popover;
        this.router = router;
        this.guiderManager = guiderManager;
        this.ngZone = ngZone;
        this.overlay = overlay;
        this.document = document;
        this.stepChange$ = new ReplaySubject();
        this.guiderEnded$ = new Subject();
        this.closed$ = new Subject();
        this.targetClicked$ = new Subject();
        this.stepsRef = config.steps.map((step, index) => {
            return new ThyGuiderStepRef(step, index, this.rendererFactory, this.popover, this.guiderManager, this.overlay, this.document);
        });
        this.steps = config.steps;
    }
    stepChange() {
        return this.stepChange$.asObservable();
    }
    ended() {
        return this.guiderEnded$;
    }
    closed() {
        return this.closed$;
    }
    targetClicked() {
        return this.targetClicked$;
    }
    start(startWith) {
        this.to(startWith);
        return this.stepChange();
    }
    next() {
        if (this.currentStepIndex + 1 > this.steps.length) {
            return;
        }
        this.to(this.currentStepIndex + 1);
    }
    previous() {
        if (this.currentStepIndex - 1 < 0) {
            return;
        }
        this.to(this.currentStepIndex - 1);
    }
    active(indexOrKey) {
        if (helpers.isNumber(indexOrKey)) {
            this.to(indexOrKey);
            return;
        }
        if (helpers.isString(indexOrKey)) {
            const index = this.steps.findIndex(step => step.key === indexOrKey);
            this.to(index);
            return;
        }
    }
    to(index) {
        this.removeExistedStep();
        if (!helpers.isNumber(index) || index >= this.steps.length || index < 0 || Number.isNaN(index)) {
            index = 0;
        }
        this.currentStep = this.steps[index];
        this.currentStepIndex = index;
        // update guiderManager
        this.guiderManager.updateActive(this.currentStep.key, this);
        if (this.currentStep.route && this.currentStep.route !== this.router.url) {
            this.ngZone.run(() => {
                this.router.navigateByUrl(this.currentStep.route);
            });
            return;
        }
        setTimeout(() => {
            this.drawStep();
            this.notifyStepClicked();
        }, 0);
    }
    close() {
        var _a;
        this.removeManagerActiveKey();
        (_a = this.stepsRef[this.currentStepIndex]) === null || _a === void 0 ? void 0 : _a.dispose();
        this.closed$.next(this.currentStep);
    }
    end() {
        this.close();
        this.guiderEnded$.next(this.currentStep);
        this.notifyGuiderIsFinished();
    }
    removeManagerActiveKey() {
        const activeKey = this.guiderManager.getActive().key;
        if (activeKey && this.steps.some(step => step.key === activeKey)) {
            this.guiderManager.updateActive('', undefined);
        }
    }
    notifyStepClicked() {
        this.stepChange$.next(this.currentStep);
    }
    drawStep() {
        this.removeExistedStep();
        this.stepsRef[this.currentStepIndex].show(this);
    }
    notifyGuiderIsFinished() {
        this.stepChange$.complete();
        // this.targetClicked().unsubscribe();
        this.currentStepIndex = 0;
    }
    removeExistedStep() {
        var _a;
        (_a = this.stepsRef[this.currentStepIndex]) === null || _a === void 0 ? void 0 : _a.dispose();
    }
}
ThyGuiderRef.ctorParameters = () => [
    { type: ThyGuiderConfig },
    { type: RendererFactory2 },
    { type: ThyPopover },
    { type: Router },
    { type: ThyGuiderManager },
    { type: NgZone },
    { type: Overlay },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];

class ThyGuider {
    constructor(rendererFactory, popover, router, guiderManager, ngZone, overlay, document) {
        this.rendererFactory = rendererFactory;
        this.popover = popover;
        this.router = router;
        this.guiderManager = guiderManager;
        this.ngZone = ngZone;
        this.overlay = overlay;
        this.document = document;
        this.guiderRefs = [];
    }
    create(config) {
        if (!config || !(config === null || config === void 0 ? void 0 : config.steps) || !helpers.isArray(config === null || config === void 0 ? void 0 : config.steps)) {
            throw new Error(`'config.steps' must be an array of length greater than 0`);
        }
        const normalizeConfig = this.normalizeConfig(config);
        this.guiderRef = new ThyGuiderRef(normalizeConfig, this.rendererFactory, this.popover, this.router, this.guiderManager, this.ngZone, this.overlay, this.document);
        this.guiderRef.closed().subscribe(() => {
            const index = this.guiderRefs.findIndex(guiderRef => guiderRef === this.guiderRef);
            this.guiderRefs.splice(index, 1);
        });
        this.guiderRefs.push(this.guiderRef);
        return this.guiderRef;
    }
    normalizeConfig(config) {
        const normalizeConfig = Object.assign({}, defaultGuiderPositionConfig, config);
        normalizeConfig.steps = normalizeConfig.steps.map(step => {
            return this.normalizeStep(step, normalizeConfig);
        });
        return normalizeConfig;
    }
    normalizeStep(step, config) {
        const tempStep = Object.assign({
            hintPlacement: config.hintPlacement,
            hintOffset: config.hintOffset,
            pointOffset: config.pointOffset
        }, step);
        return tempStep;
    }
    close() {
        if (this.guiderRefs.length > 0) {
            const lasGuiderRef = this.guiderRefs[this.guiderRefs.length - 1];
            if (lasGuiderRef) {
                lasGuiderRef.close();
                this.guiderRefs.pop();
            }
        }
    }
}
ThyGuider.ɵfac = function ThyGuider_Factory(t) { return new (t || ThyGuider)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(ɵngcc1.ThyPopover), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ThyGuiderManager), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(DOCUMENT)); };
ThyGuider.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyGuider_Factory() { return new ThyGuider(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.ThyPopover), i0.ɵɵinject(i2.Router), i0.ɵɵinject(ThyGuiderManager), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i4.Overlay), i0.ɵɵinject(i5.DOCUMENT)); }, token: ThyGuider, providedIn: "root" });
ThyGuider.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: ThyPopover },
    { type: Router },
    { type: ThyGuiderManager },
    { type: NgZone },
    { type: Overlay },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyGuider, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }, { type: ɵngcc1.ThyPopover }, { type: ɵngcc2.Router }, { type: ThyGuiderManager }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Overlay }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();

class ThyGuiderTargetDirective {
    constructor(guiderManager, el, ngZone) {
        this.guiderManager = guiderManager;
        this.el = el;
        this.ngZone = ngZone;
    }
    ngOnInit() {
        this.guiderManager.addStepTarget(this.target, this.el.nativeElement);
        this.ngZone.onStable.pipe(take(1)).subscribe(() => {
            const { key, guiderRef } = this.guiderManager.getActive();
            if (key === this.target) {
                const index = guiderRef.steps.findIndex(step => step.key === this.target);
                this.ngZone.run(() => {
                    guiderRef.active(index);
                });
            }
        });
    }
    ngAfterViewInit() { }
    ngOnDestroy() {
        const { guiderRef } = this.guiderManager.getActive();
        if (guiderRef) {
            guiderRef.close();
        }
        this.guiderManager.removeStepTarget(this.target);
    }
}
ThyGuiderTargetDirective.ɵfac = function ThyGuiderTargetDirective_Factory(t) { return new (t || ThyGuiderTargetDirective)(ɵngcc0.ɵɵdirectiveInject(ThyGuiderManager), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ThyGuiderTargetDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyGuiderTargetDirective, selectors: [["", "thyGuiderTarget", ""]], inputs: { target: ["thyGuiderTarget", "target"] }, exportAs: ["thyGuiderTarget"] });
ThyGuiderTargetDirective.ctorParameters = () => [
    { type: ThyGuiderManager },
    { type: ElementRef },
    { type: NgZone }
];
ThyGuiderTargetDirective.propDecorators = {
    target: [{ type: Input, args: ['thyGuiderTarget',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyGuiderTargetDirective, [{
        type: Directive,
        args: [{ selector: '[thyGuiderTarget]', exportAs: 'thyGuiderTarget' }]
    }], function () { return [{ type: ThyGuiderManager }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { target: [{
            type: Input,
            args: ['thyGuiderTarget']
        }] }); })();

class ThyGuiderHintComponent {
    constructor() {
        this.guiderHint = true;
    }
    ngOnInit() {
        this.setDescription(this.stepRef.step.data.description);
    }
    setDescription(value) {
        if (helpers.isString(value)) {
            this.descriptionString = value;
        }
        else {
            this.descriptionTemplateRef = value;
        }
    }
    jump() {
        this.guiderRef.end();
    }
    prev() {
        this.guiderRef.previous();
    }
    next() {
        this.guiderRef.next();
    }
    end() {
        this.guiderRef.end();
    }
    trackByFn(index, step) {
        return step.key || index;
    }
}
ThyGuiderHintComponent.ɵfac = function ThyGuiderHintComponent_Factory(t) { return new (t || ThyGuiderHintComponent)(); };
ThyGuiderHintComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyGuiderHintComponent, selectors: [["thy-guider-hint"]], hostVars: 2, hostBindings: function ThyGuiderHintComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-guider-tip-container", ctx.guiderHint);
    } }, decls: 19, vars: 10, consts: [[1, "thy-guider-tip-top"], [3, "src", "alt"], ["href", "javascript:;", 1, "thy-guider-tip-top-btn", 3, "click"], [1, "thy-guider-tip-content", "bg-white"], [1, "thy-guider-tip-content-title"], [1, "thy-guider-tip-content-description"], [4, "ngIf", "ngIfElse"], ["stringTemplateRef", ""], [1, "thy-guider-tip-step"], [1, "thy-guider-tip-step-pagination"], ["class", "pagination-item", 3, "ngClass", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "thy-guider-tip-step-btn"], [4, "ngIf"], ["finish", ""], [3, "ngTemplateOutlet"], [1, "pagination-item", 3, "ngClass"], ["href", "javascript:;", 1, "thy-guider-tip-step-pre", 3, "click"], ["href", "javascript:;", 1, "thy-guider-tip-step-next", 3, "click"]], template: function ThyGuiderHintComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "img", 1);
        ɵngcc0.ɵɵelementStart(2, "a", 2);
        ɵngcc0.ɵɵlistener("click", function ThyGuiderHintComponent_Template_a_click_2_listener() { return ctx.jump(); });
        ɵngcc0.ɵɵtext(3, "\u8DF3\u8FC7");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵtemplate(8, ThyGuiderHintComponent_ng_container_8_Template, 2, 1, "ng-container", 6);
        ɵngcc0.ɵɵtemplate(9, ThyGuiderHintComponent_ng_template_9_Template, 1, 1, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 8);
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵtemplate(13, ThyGuiderHintComponent_span_13_Template, 1, 3, "span", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 11);
        ɵngcc0.ɵɵtemplate(15, ThyGuiderHintComponent_ng_container_15_Template, 3, 0, "ng-container", 12);
        ɵngcc0.ɵɵtemplate(16, ThyGuiderHintComponent_ng_container_16_Template, 3, 0, "ng-container", 6);
        ɵngcc0.ɵɵtemplate(17, ThyGuiderHintComponent_ng_template_17_Template, 2, 0, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(10);
        const _r6 = ɵngcc0.ɵɵreference(18);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("src", ctx.stepRef.step.data.image, ɵngcc0.ɵɵsanitizeUrl)("alt", ctx.stepRef.step.data.title);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.stepRef.step.data.title);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.descriptionTemplateRef)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.guiderRef.steps)("ngForTrackBy", ctx.trackByFn);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.stepRef.stepIndex !== 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.stepRef.stepIndex !== ctx.guiderRef.steps.length - 1)("ngIfElse", _r6);
    } }, directives: [ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc4.NgTemplateOutlet, ɵngcc4.NgClass], encapsulation: 2 });
ThyGuiderHintComponent.ctorParameters = () => [];
ThyGuiderHintComponent.propDecorators = {
    guiderHint: [{ type: HostBinding, args: ['class.thy-guider-tip-container',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyGuiderHintComponent, [{
        type: Component,
        args: [{
                selector: 'thy-guider-hint',
                template: "<div class=\"thy-guider-tip-top\">\n  <img [src]=\"stepRef.step.data.image\" [alt]=\"stepRef.step.data.title\" />\n  <a href=\"javascript:;\" class=\"thy-guider-tip-top-btn\" (click)=\"jump()\">\u8DF3\u8FC7</a>\n</div>\n<div class=\"thy-guider-tip-content bg-white\">\n  <div class=\"thy-guider-tip-content-title\">{{ stepRef.step.data.title }}</div>\n  <div class=\"thy-guider-tip-content-description\">\n    <ng-container *ngIf=\"descriptionTemplateRef; else stringTemplateRef\">\n      <ng-template [ngTemplateOutlet]=\"descriptionTemplateRef\"></ng-template>\n    </ng-container>\n    <ng-template #stringTemplateRef>{{ descriptionString }}</ng-template>\n  </div>\n  <div class=\"thy-guider-tip-step\">\n    <div class=\"thy-guider-tip-step-pagination\">\n      <span\n        class=\"pagination-item\"\n        *ngFor=\"let step of guiderRef.steps; let i = index; trackBy: trackByFn\"\n        [ngClass]=\"{ active: i === stepRef.stepIndex }\"\n      ></span>\n    </div>\n    <div class=\"thy-guider-tip-step-btn\">\n      <ng-container *ngIf=\"stepRef.stepIndex !== 0\">\n        <a href=\"javascript:;\" (click)=\"prev()\" class=\"thy-guider-tip-step-pre\">\u4E0A\u4E00\u6B65</a>\n      </ng-container>\n      <ng-container *ngIf=\"stepRef.stepIndex !== guiderRef.steps.length - 1; else finish\">\n        <a href=\"javascript:;\" (click)=\"next()\" class=\"thy-guider-tip-step-next\">\u4E0B\u4E00\u6B65</a>\n      </ng-container>\n      <ng-template #finish>\n        <a href=\"javascript:;\" (click)=\"end()\" class=\"thy-guider-tip-step-next\">\u5B8C\u6210</a>\n      </ng-template>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { guiderHint: [{
            type: HostBinding,
            args: ['class.thy-guider-tip-container']
        }] }); })();
defaultGuiderPositionConfig.hintComponent = ThyGuiderHintComponent;

class ThyGuiderModule {
}
ThyGuiderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyGuiderModule });
ThyGuiderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyGuiderModule_Factory(t) { return new (t || ThyGuiderModule)(); }, providers: [ThyGuider], imports: [[CommonModule, ThySharedModule, ThyIconModule, ThyButtonModule, ThyPopoverModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyGuiderModule, { declarations: function () { return [ThyGuiderHintComponent, ThyGuiderTargetDirective]; }, imports: function () { return [CommonModule, ThySharedModule, ThyIconModule, ThyButtonModule, ThyPopoverModule]; }, exports: function () { return [ThyGuiderHintComponent, ThyGuiderTargetDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyGuiderModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, ThySharedModule, ThyIconModule, ThyButtonModule, ThyPopoverModule],
                declarations: [ThyGuiderHintComponent, ThyGuiderTargetDirective],
                exports: [ThyGuiderHintComponent, ThyGuiderTargetDirective],
                entryComponents: [ThyGuiderHintComponent],
                providers: [ThyGuider]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyGuider, ThyGuiderConfig, ThyGuiderHintComponent, ThyGuiderManager, ThyGuiderModule, ThyGuiderRef, ThyGuiderStepRef, ThyGuiderTargetDirective, defaultGuiderPositionConfig };

//# sourceMappingURL=ngx-tethys-guider.js.map
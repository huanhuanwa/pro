import { InjectionToken, ElementRef, Component, Inject, ChangeDetectorRef, Renderer2, ViewChild, Injectable, Injector, Optional, ViewEncapsulation, HostBinding, Input, ContentChild, Directive, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyAbstractOverlayConfig, ThyAbstractOverlayContainer, ThyAbstractOverlayRef, ThyAbstractInternalOverlayRef, ThyAbstractOverlayService } from 'ngx-tethys/core';
import { helpers, coerceArray, coerceBooleanProperty } from 'ngx-tethys/util';
import { Subject, of } from 'rxjs';
import { Directionality } from '@angular/cdk/bidi';
import { coerceElement } from '@angular/cdk/coercion';
import { ViewportRuler, OverlayRef, Overlay, OverlayModule } from '@angular/cdk/overlay';
import { CdkPortalOutlet, ComponentPortal, PortalModule } from '@angular/cdk/portal';
import { filter, startWith, takeUntil } from 'rxjs/operators';
import { transition, style, animate, state, trigger } from '@angular/animations';
import { ThyIconModule } from 'ngx-tethys/icon';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
import * as ɵngcc2 from '@angular/cdk/portal';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from 'ngx-tethys/icon';

function ThySlideContainerComponent_ng_template_0_Template(rf, ctx) { }
const _c0 = ["*"];
const _c1 = ["thyHeader"];
const _c2 = ["thyHeaderOperate"];
function ThySlideHeaderComponent_1_ng_template_0_Template(rf, ctx) { }
function ThySlideHeaderComponent_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThySlideHeaderComponent_1_ng_template_0_Template, 0, 0, "ng-template", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.headerTemplate);
} }
function ThySlideHeaderComponent_ng_template_2_thy_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 10);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r4.thyIcon);
} }
function ThySlideHeaderComponent_ng_template_2_ng_template_2_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i");
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMapInterpolate1("wft ", ctx_r8.thyIcon, "");
} }
function ThySlideHeaderComponent_ng_template_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThySlideHeaderComponent_ng_template_2_ng_template_2_i_0_Template, 1, 3, "i", 11);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.thyIcon);
} }
function ThySlideHeaderComponent_ng_template_2_7_ng_template_0_Template(rf, ctx) { }
function ThySlideHeaderComponent_ng_template_2_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThySlideHeaderComponent_ng_template_2_7_ng_template_0_Template, 0, 0, "ng-template", 2);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r7.headerOperateTemplate);
} }
function ThySlideHeaderComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "h3", 3);
    ɵngcc0.ɵɵtemplate(1, ThySlideHeaderComponent_ng_template_2_thy_icon_1_Template, 1, 1, "thy-icon", 4);
    ɵngcc0.ɵɵtemplate(2, ThySlideHeaderComponent_ng_template_2_ng_template_2_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 6);
    ɵngcc0.ɵɵelementContainerStart(6);
    ɵngcc0.ɵɵtemplate(7, ThySlideHeaderComponent_ng_template_2_7_Template, 1, 1, undefined, 7);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ThySlideHeaderComponent_ng_template_2_Template_button_click_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.closeModal($event); });
    ɵngcc0.ɵɵelement(9, "thy-icon", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r5 = ɵngcc0.ɵɵreference(3);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.isIconFont && ctx_r2.thyIcon)("ngIfElse", _r5);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.thyTitle, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.headerOperateTemplate);
} }
class ThySlideConfig extends ThyAbstractOverlayConfig {
}
class ThySlideOption extends ThySlideConfig {
}
const THY_SLIDE_DEFAULT_CONFIG = new InjectionToken('thy-slide-default-options');
const slideUpperOverlayOptions = {
    name: 'slide',
    animationEnabled: true,
    disposeWhenClose: true
};
const slideDefaultConfigValue = {
    hasBackdrop: true,
    backdropClass: 'thy-slide-backdrop',
    backdropClosable: true,
    closeOnNavigation: true,
    autoFocus: true,
    restoreFocus: true,
    from: 'right',
    panelClass: 'thy-slide',
    containerClass: '',
    role: 'slide',
    offset: 0,
    originActiveClass: 'thy-slide-origin-active',
    mode: 'over',
    drawerContainer: ''
};
const ɵ0 = {};
const THY_SLIDE_DEFAULT_CONFIG_PROVIDER = {
    provide: THY_SLIDE_DEFAULT_CONFIG,
    useValue: ɵ0
};

const animationBody = [
    transition('void => offsetLeft', [style({ width: 0 }), animate('0.2s ease-in')]),
    transition('offsetLeft => exit', [animate('0.2s', style({ width: 0 }))]),
    transition('void => offsetRight', [style({ width: 0 }), animate('0.2s ease')]),
    transition('offsetRight => exit', [animate('0.2s', style({ width: 0 }))]),
    transition('void => offsetTop', [style({ height: 0 }), animate('0.2s ease-in')]),
    transition('offsetTop => exit', [animate('0.2s', style({ height: 0 }))]),
    transition('void => offsetBottom', [style({ height: 0 }), animate('0.2s ease-in')]),
    transition('offsetBottom => exit', [animate('0.2s', style({ height: 0 }))]),
    state('left right top bottom', style({ transform: '*' })),
    transition('void => left', [style({ transform: 'translateX(-100%)' }), animate('0.2s ease-in')]),
    transition('left => exit', [animate('0.2s', style({ transform: 'translateX(-100%)' }))]),
    transition('void => right', [style({ transform: 'translateX(100%)' }), animate('0.2s ease-in')]),
    transition('right => exit', [animate('0.2s', style({ transform: 'translateX(100%)' }))]),
    transition('void => top', [style({ transform: 'translateY(-100%)' }), animate('0.2s ease-in')]),
    transition('top => exit', [animate('0.2s', style({ transform: 'translateY(-100%)' }))]),
    transition('void => bottom', [style({ transform: 'translateY(100%)' }), animate('0.2s ease-in')]),
    transition('bottom => exit', [animate('0.2s', style({ transform: 'translateY(100%)' }))])
];
const thySlideAnimations = {
    slideContainer: trigger('slideContainer', animationBody)
};

class ThySlideContainerComponent extends ThyAbstractOverlayContainer {
    constructor(elementRef, document, config, changeDetectorRef, renderer, viewportRuler) {
        super(slideUpperOverlayOptions, changeDetectorRef);
        this.elementRef = elementRef;
        this.document = document;
        this.config = config;
        this.renderer = renderer;
        this.viewportRuler = viewportRuler;
        this.animationState = 'void';
        this.slideContainerStyles = {};
        this.ngUnsubscribe$ = new Subject();
        this.animationOpeningDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === this.animationState;
        }));
        this.animationClosingDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === 'exit';
        }));
        this.setDrawerContainerElement();
        this.checkContainerWithinViewport();
        this.addDrawerContainerElementClass();
    }
    get isPush() {
        return this.config.mode === 'push' && !!this.drawerContainerElement;
    }
    get isSide() {
        return this.config.mode === 'side' && !!this.drawerContainerElement;
    }
    get isLeftOrRight() {
        return this.config.from === 'left' || this.config.from === 'right';
    }
    get hostOffset() {
        let offset = 0;
        if (this.isLeftOrRight) {
            offset = this.elementRef.nativeElement.clientWidth + this.config.offset || 0;
        }
        else {
            offset = this.elementRef.nativeElement.clientHeight + this.config.offset || 0;
        }
        return offset;
    }
    get transform() {
        switch (this.config.from) {
            case 'left':
                return `translateX(${this.hostOffset}px)`;
            case 'right':
                return `translateX(-${this.hostOffset}px)`;
            case 'top':
                return `translateY(${this.hostOffset}px)`;
            case 'bottom':
                return `translateY(${this.hostOffset}px)`;
        }
    }
    get drawerContainerElementClass() {
        return `thy-slide-${this.config.mode}-drawer-container`;
    }
    setDrawerContainerElement() {
        if (typeof this.config.drawerContainer === 'string') {
            this.drawerContainerElement = this.config.drawerContainer && document.querySelector(this.config.drawerContainer);
        }
        if (this.config.drawerContainer instanceof ElementRef) {
            this.drawerContainerElement = this.config.drawerContainer.nativeElement;
        }
        if (this.config.drawerContainer instanceof HTMLElement) {
            this.drawerContainerElement = this.config.drawerContainer;
        }
    }
    setSlideContainerStyles() {
        let width, height, top, left;
        const drawerContainerElementRect = (this.drawerContainerElement || document.body).getBoundingClientRect();
        if (this.isLeftOrRight) {
            height = drawerContainerElementRect.height;
            top = drawerContainerElementRect.top;
            this.renderer.setStyle(this.elementRef.nativeElement, 'top', `${top}px`);
        }
        else {
            width = drawerContainerElementRect.width;
            left = drawerContainerElementRect.left;
            this.renderer.setStyle(this.elementRef.nativeElement, 'left', `${left}px`);
        }
        this.slideContainerStyles = {
            width: width,
            height: height
        };
    }
    checkContainerWithinViewport() {
        this.viewportRuler
            .change(100)
            .pipe(startWith(null), takeUntil(this.ngUnsubscribe$))
            .subscribe(() => {
            this.setSlideContainerStyles();
        });
    }
    addDrawerContainerElementClass() {
        if (this.drawerContainerElement) {
            this.renderer.addClass(this.drawerContainerElement, this.drawerContainerElementClass);
        }
    }
    removeDrawerContainerElementClass() {
        if (this.drawerContainerElement) {
            this.renderer.removeClass(this.drawerContainerElement, this.drawerContainerElementClass);
        }
    }
    setDrawerContainerElementStyle() {
        if (this.isSide) {
            this.renderer.setStyle(this.drawerContainerElement, `margin-${this.config.from}`, `${this.hostOffset}px`);
        }
        else if (this.isPush) {
            this.renderer.setStyle(this.drawerContainerElement, `transform`, this.transform);
        }
    }
    removeDrawerContainerElementStyle() {
        if (this.isSide) {
            this.renderer.removeStyle(this.drawerContainerElement, `margin-${this.config.from}`);
        }
        else if (this.isPush) {
            this.renderer.removeStyle(this.drawerContainerElement, `transform`);
        }
    }
    beforeAttachPortal() {
        if (this.config.offset) {
            this.renderer.setStyle(this.elementRef.nativeElement, this.config.from, `${this.config.offset}px`);
            this.animationState = helpers.camelCase(['offset', this.config.from]);
        }
        else {
            this.animationState = this.config.from;
        }
        this.setDrawerContainerElementStyle();
    }
    beforeDetachPortal() {
        this.removeDrawerContainerElementStyle();
    }
    onAnimationDone(event) {
        this.animationStateChanged.emit(event);
    }
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    ngOnDestroy() {
        super.destroy();
        this.removeDrawerContainerElementClass();
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    }
}
ThySlideContainerComponent.ɵfac = function ThySlideContainerComponent_Factory(t) { return new (t || ThySlideContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ThySlideConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler)); };
ThySlideContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySlideContainerComponent, selectors: [["thy-slide-container"]], viewQuery: function ThySlideContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.portalOutlet = _t.first);
    } }, hostAttrs: ["tabindex", "-1", 1, "thy-slide-container"], hostVars: 14, hostBindings: function ThySlideContainerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵsyntheticHostListener("@slideContainer.start", function ThySlideContainerComponent_animation_slideContainer_start_HostBindingHandler($event) { return ctx.onAnimationStart($event); })("@slideContainer.done", function ThySlideContainerComponent_animation_slideContainer_done_HostBindingHandler($event) { return ctx.onAnimationDone($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", "slide");
        ɵngcc0.ɵɵsyntheticHostProperty("@slideContainer", ctx.animationState);
        ɵngcc0.ɵɵstyleProp("width", ctx.slideContainerStyles.width, "px")("height", ctx.slideContainerStyles.height, "px")("max-height", ctx.slideContainerStyles.height, "px");
        ɵngcc0.ɵɵclassProp("thy-slide-push", ctx.isPush)("thy-slide-side", ctx.isSide)("thy-slide-over", !ctx.isPush && !ctx.isSide);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkPortalOutlet", ""]], template: function ThySlideContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ThySlideContainerComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
    } }, directives: [ɵngcc2.CdkPortalOutlet], encapsulation: 2, data: { animation: [thySlideAnimations.slideContainer] } });
ThySlideContainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ThySlideConfig },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ViewportRuler }
];
ThySlideContainerComponent.propDecorators = {
    portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideContainerComponent, [{
        type: Component,
        args: [{
                selector: 'thy-slide-container',
                template: `
        <ng-template cdkPortalOutlet></ng-template>
    `,
                animations: [thySlideAnimations.slideContainer],
                host: {
                    class: 'thy-slide-container',
                    '[class.thy-slide-push]': 'isPush',
                    '[class.thy-slide-side]': 'isSide',
                    '[class.thy-slide-over]': '!isPush && !isSide',
                    tabindex: '-1',
                    '[attr.role]': `'slide'`,
                    '[@slideContainer]': 'animationState',
                    '(@slideContainer.start)': 'onAnimationStart($event)',
                    '(@slideContainer.done)': 'onAnimationDone($event)',
                    '[style.width.px]': 'slideContainerStyles.width',
                    '[style.height.px]': 'slideContainerStyles.height',
                    '[style.max-height.px]': 'slideContainerStyles.height'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ThySlideConfig }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.ViewportRuler }]; }, { portalOutlet: [{
            type: ViewChild,
            args: [CdkPortalOutlet, { static: true }]
        }] }); })();

class ThySlideRef extends ThyAbstractOverlayRef {
}
class ThyInternalSlideRef extends ThyAbstractInternalOverlayRef {
    constructor(overlayRef, containerInstance, config) {
        super(slideUpperOverlayOptions, overlayRef, containerInstance, config);
    }
    updatePosition(position) {
        return this.updateGlobalPosition(position);
    }
}
ThyInternalSlideRef.ɵfac = function ThyInternalSlideRef_Factory(t) { return new (t || ThyInternalSlideRef)(ɵngcc0.ɵɵinject(ɵngcc1.OverlayRef), ɵngcc0.ɵɵinject(ThySlideContainerComponent), ɵngcc0.ɵɵinject(ThySlideConfig)); };
ThyInternalSlideRef.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyInternalSlideRef, factory: ThyInternalSlideRef.ɵfac });
ThyInternalSlideRef.ctorParameters = () => [
    { type: OverlayRef },
    { type: ThySlideContainerComponent },
    { type: ThySlideConfig }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyInternalSlideRef, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.OverlayRef }, { type: ThySlideContainerComponent }, { type: ThySlideConfig }]; }, null); })();

class ThySlideService extends ThyAbstractOverlayService {
    constructor(overlay, injector, defaultConfig) {
        const slideDefaultConfig = Object.assign({}, slideDefaultConfigValue, defaultConfig);
        super(slideUpperOverlayOptions, overlay, injector, slideDefaultConfig);
    }
    originElementAddActiveClass(config) {
        if (config.origin) {
            coerceElement(config.origin).classList.add(...coerceArray(config.originActiveClass));
        }
    }
    originElementRemoveActiveClass(config) {
        if (config.origin) {
            coerceElement(config.origin).classList.remove(...coerceArray(config.originActiveClass));
        }
    }
    buildOverlayConfig(config) {
        const defaultClasses = ['thy-slide-overlay-pane', `thy-slide-${config.from}`];
        const overlayConfig = Object.assign(Object.assign({}, this.buildBaseOverlayConfig(config, defaultClasses)), { width: config.width });
        return overlayConfig;
    }
    attachUpperOverlayContainer(overlay, config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injector = Injector.create({
            parent: userInjector || this.injector,
            providers: [{ provide: ThySlideConfig, useValue: config }]
        });
        const containerPortal = new ComponentPortal(ThySlideContainerComponent, config.viewContainerRef, injector);
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    createUpperOverlayRef(overlayRef, containerInstance, config) {
        return new ThyInternalSlideRef(overlayRef, containerInstance, config);
    }
    createInjector(config, overlayRef, containerInstance) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injectionTokens = [
            { provide: ThySlideContainerComponent, useValue: containerInstance },
            { provide: ThySlideRef, useValue: overlayRef }
        ];
        if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {
            injectionTokens.push({
                provide: Directionality,
                useValue: {
                    value: config.direction,
                    change: of()
                }
            });
        }
        return Injector.create({ parent: userInjector || this.injector, providers: injectionTokens });
    }
    overlayIsOpened(config) {
        const openedOverlay = this.getUpperOverlayById(config.id);
        this.close(openedOverlay);
        return openedOverlay;
    }
    open(componentOrTemplateRef, config) {
        if (this.overlayIsOpened(config)) {
            return;
        }
        const slideRef = this.openUpperOverlay(componentOrTemplateRef, config);
        this.originElementAddActiveClass(slideRef.containerInstance.config);
        slideRef.afterClosed().subscribe(() => {
            this.originElementRemoveActiveClass(slideRef.containerInstance.config);
        });
        return slideRef;
    }
    ngOnDestroy() {
        this.dispose();
    }
}
ThySlideService.ɵfac = function ThySlideService_Factory(t) { return new (t || ThySlideService)(ɵngcc0.ɵɵinject(ɵngcc1.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(THY_SLIDE_DEFAULT_CONFIG, 8)); };
ThySlideService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThySlideService, factory: ThySlideService.ɵfac });
ThySlideService.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: ThySlideConfig, decorators: [{ type: Optional }, { type: Inject, args: [THY_SLIDE_DEFAULT_CONFIG,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.Injector }, { type: ThySlideConfig, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_SLIDE_DEFAULT_CONFIG]
            }] }]; }, null); })();

class ThySlideLayoutComponent {
    constructor() {
        this.slideLayout = true;
    }
    ngOnInit() { }
}
ThySlideLayoutComponent.ɵfac = function ThySlideLayoutComponent_Factory(t) { return new (t || ThySlideLayoutComponent)(); };
ThySlideLayoutComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySlideLayoutComponent, selectors: [["thy-slide-layout"]], hostVars: 2, hostBindings: function ThySlideLayoutComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-slide-layout", ctx.slideLayout);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThySlideLayoutComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThySlideLayoutComponent.ctorParameters = () => [];
ThySlideLayoutComponent.propDecorators = {
    slideLayout: [{ type: HostBinding, args: ['class.thy-slide-layout',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideLayoutComponent, [{
        type: Component,
        args: [{
                selector: 'thy-slide-layout',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return []; }, { slideLayout: [{
            type: HostBinding,
            args: ['class.thy-slide-layout']
        }] }); })();

class ThySlideHeaderComponent {
    constructor(thySlideService) {
        this.thySlideService = thySlideService;
        this.isIconFont = false;
        this._iconName = '';
        this.slideLayoutHeader = true;
    }
    set thyIcon(value) {
        this._iconName = value;
        if (value.includes('wtf')) {
            this.isIconFont = true;
        }
        else {
            this.isIconFont = false;
        }
    }
    get thyIcon() {
        return this._iconName;
    }
    ngOnInit() { }
    closeModal(event) {
        event.stopPropagation();
        this.thySlideService.close();
    }
}
ThySlideHeaderComponent.ɵfac = function ThySlideHeaderComponent_Factory(t) { return new (t || ThySlideHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ThySlideService)); };
ThySlideHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySlideHeaderComponent, selectors: [["thy-slide-header"]], contentQueries: function ThySlideHeaderComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerOperateTemplate = _t.first);
    } }, hostVars: 2, hostBindings: function ThySlideHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-slide-header", ctx.slideLayoutHeader);
    } }, inputs: { thyIcon: "thyIcon", thyTitle: "thyTitle" }, decls: 4, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["default", ""], [3, "ngTemplateOutlet"], [1, "thy-slide-header-title"], [3, "thyIconName", 4, "ngIf", "ngIfElse"], ["iconFont", ""], [1, "thy-slide-header-main"], [4, "ngIf"], ["type", "button", 1, "close", 3, "click"], ["thyIconName", "close"], [3, "thyIconName"], [3, "class", 4, "ngIf"]], template: function ThySlideHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtemplate(1, ThySlideHeaderComponent_1_Template, 1, 1, undefined, 0);
        ɵngcc0.ɵɵtemplate(2, ThySlideHeaderComponent_ng_template_2_Template, 10, 4, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerTemplate)("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.ThyIconComponent], encapsulation: 2 });
ThySlideHeaderComponent.ctorParameters = () => [
    { type: ThySlideService }
];
ThySlideHeaderComponent.propDecorators = {
    slideLayoutHeader: [{ type: HostBinding, args: ['class.thy-slide-header',] }],
    thyTitle: [{ type: Input }],
    thyIcon: [{ type: Input }],
    headerTemplate: [{ type: ContentChild, args: ['thyHeader',] }],
    headerOperateTemplate: [{ type: ContentChild, args: ['thyHeaderOperate',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'thy-slide-header',
                template: "<ng-container>\n  <ng-template *ngIf=\"headerTemplate; else default\" [ngTemplateOutlet]=\"headerTemplate\"></ng-template>\n  <ng-template #default>\n    <h3 class=\"thy-slide-header-title\">\n      <thy-icon *ngIf=\"!isIconFont && thyIcon; else iconFont\" [thyIconName]=\"thyIcon\"></thy-icon>\n      <ng-template #iconFont>\n        <i *ngIf=\"thyIcon\" class=\"wft {{ thyIcon }}\"></i>\n      </ng-template>\n      {{ thyTitle }}\n    </h3>\n\n    <div class=\"thy-slide-header-main\">\n      <ng-container>\n        <ng-template *ngIf=\"headerOperateTemplate\" [ngTemplateOutlet]=\"headerOperateTemplate\"> </ng-template>\n      </ng-container>\n    </div>\n    <button type=\"button\" class=\"close\" (click)=\"closeModal($event)\">\n      <thy-icon thyIconName=\"close\"></thy-icon>\n    </button>\n  </ng-template>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ThySlideService }]; }, { slideLayoutHeader: [{
            type: HostBinding,
            args: ['class.thy-slide-header']
        }], thyIcon: [{
            type: Input
        }], thyTitle: [{
            type: Input
        }], headerTemplate: [{
            type: ContentChild,
            args: ['thyHeader']
        }], headerOperateTemplate: [{
            type: ContentChild,
            args: ['thyHeaderOperate']
        }] }); })();

class ThySlideBodyComponent {
    constructor() {
        this.slideLayoutBody = true;
    }
    ngOnInit() { }
}
ThySlideBodyComponent.ɵfac = function ThySlideBodyComponent_Factory(t) { return new (t || ThySlideBodyComponent)(); };
ThySlideBodyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySlideBodyComponent, selectors: [["thy-slide-body"]], hostVars: 2, hostBindings: function ThySlideBodyComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-slide-body", ctx.slideLayoutBody);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThySlideBodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThySlideBodyComponent.propDecorators = {
    slideLayoutBody: [{ type: HostBinding, args: ['class.thy-slide-body',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideBodyComponent, [{
        type: Component,
        args: [{
                selector: 'thy-slide-body',
                template: `
        <ng-content></ng-content>
    `
            }]
    }], function () { return []; }, { slideLayoutBody: [{
            type: HostBinding,
            args: ['class.thy-slide-body']
        }] }); })();

class ThySlideBodySectionComponent {
    constructor() {
        this.thySlideBodyItem = true;
        this.hasDivider = false;
    }
    set thyDividerBorder(value) {
        this.hasDivider = coerceBooleanProperty(value);
    }
    ngOnInit() { }
}
ThySlideBodySectionComponent.ɵfac = function ThySlideBodySectionComponent_Factory(t) { return new (t || ThySlideBodySectionComponent)(); };
ThySlideBodySectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySlideBodySectionComponent, selectors: [["thy-slide-body-section"]], hostVars: 4, hostBindings: function ThySlideBodySectionComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-slide-body-section", ctx.thySlideBodyItem)("thy-slide-body-section-divider", ctx.hasDivider);
    } }, inputs: { thyDividerBorder: "thyDividerBorder" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThySlideBodySectionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThySlideBodySectionComponent.propDecorators = {
    thySlideBodyItem: [{ type: HostBinding, args: ['class.thy-slide-body-section',] }],
    hasDivider: [{ type: HostBinding, args: ['class.thy-slide-body-section-divider',] }],
    thyDividerBorder: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideBodySectionComponent, [{
        type: Component,
        args: [{
                selector: 'thy-slide-body-section',
                template: '<ng-content></ng-content>'
            }]
    }], function () { return []; }, { thySlideBodyItem: [{
            type: HostBinding,
            args: ['class.thy-slide-body-section']
        }], hasDivider: [{
            type: HostBinding,
            args: ['class.thy-slide-body-section-divider']
        }], thyDividerBorder: [{
            type: Input
        }] }); })();

class ThySlideFooterComponent {
    constructor() {
        this.slideLayoutFooter = true;
    }
    ngOnInit() { }
}
ThySlideFooterComponent.ɵfac = function ThySlideFooterComponent_Factory(t) { return new (t || ThySlideFooterComponent)(); };
ThySlideFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySlideFooterComponent, selectors: [["thy-slide-footer"]], hostVars: 2, hostBindings: function ThySlideFooterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-slide-footer", ctx.slideLayoutFooter);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThySlideFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThySlideFooterComponent.propDecorators = {
    slideLayoutFooter: [{ type: HostBinding, args: ['class.thy-slide-footer',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideFooterComponent, [{
        type: Component,
        args: [{
                selector: 'thy-slide-footer',
                template: '<ng-content></ng-content>'
            }]
    }], function () { return []; }, { slideLayoutFooter: [{
            type: HostBinding,
            args: ['class.thy-slide-footer']
        }] }); })();

class ThyDrawerContainerDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
ThyDrawerContainerDirective.ɵfac = function ThyDrawerContainerDirective_Factory(t) { return new (t || ThyDrawerContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyDrawerContainerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDrawerContainerDirective, selectors: [["", "thyDrawerContainer", ""]] });
ThyDrawerContainerDirective.ctorParameters = () => [
    { type: ElementRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDrawerContainerDirective, [{
        type: Directive,
        args: [{ selector: '[thyDrawerContainer]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();

class ThySlideModule {
}
ThySlideModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThySlideModule });
ThySlideModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThySlideModule_Factory(t) { return new (t || ThySlideModule)(); }, providers: [ThyInternalSlideRef, ThySlideService, THY_SLIDE_DEFAULT_CONFIG_PROVIDER], imports: [[CommonModule, ThySharedModule, ThyIconModule, OverlayModule, PortalModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThySlideModule, { declarations: function () { return [ThySlideContainerComponent, ThySlideLayoutComponent, ThySlideHeaderComponent, ThySlideBodyComponent, ThySlideBodySectionComponent, ThySlideFooterComponent, ThyDrawerContainerDirective]; }, imports: function () { return [CommonModule, ThySharedModule, ThyIconModule, OverlayModule, PortalModule]; }, exports: function () { return [ThySlideLayoutComponent, ThySlideHeaderComponent, ThySlideBodyComponent, ThySlideBodySectionComponent, ThySlideFooterComponent, ThyDrawerContainerDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ThySlideContainerComponent,
                    ThySlideLayoutComponent,
                    ThySlideHeaderComponent,
                    ThySlideBodyComponent,
                    ThySlideBodySectionComponent,
                    ThySlideFooterComponent,
                    ThyDrawerContainerDirective
                ],
                entryComponents: [ThySlideContainerComponent],
                imports: [CommonModule, ThySharedModule, ThyIconModule, OverlayModule, PortalModule],
                exports: [
                    ThySlideLayoutComponent,
                    ThySlideHeaderComponent,
                    ThySlideBodyComponent,
                    ThySlideBodySectionComponent,
                    ThySlideFooterComponent,
                    ThyDrawerContainerDirective
                ],
                providers: [ThyInternalSlideRef, ThySlideService, THY_SLIDE_DEFAULT_CONFIG_PROVIDER]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { THY_SLIDE_DEFAULT_CONFIG, THY_SLIDE_DEFAULT_CONFIG_PROVIDER, ThyDrawerContainerDirective, ThyInternalSlideRef, ThySlideBodyComponent, ThySlideBodySectionComponent, ThySlideConfig, ThySlideContainerComponent, ThySlideFooterComponent, ThySlideHeaderComponent, ThySlideLayoutComponent, ThySlideModule, ThySlideOption, ThySlideRef, ThySlideService, slideDefaultConfigValue, slideUpperOverlayOptions, thySlideAnimations, ɵ0 };

//# sourceMappingURL=ngx-tethys-slide.js.map
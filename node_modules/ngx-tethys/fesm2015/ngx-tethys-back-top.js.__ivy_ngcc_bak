import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, ChangeDetectorRef, NgZone, HostBinding, Input, Output, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { ThyIconModule } from 'ngx-tethys/icon';
import { Subject, fromEvent } from 'rxjs';
import { Platform } from '@angular/cdk/platform';
import { throttleTime, takeUntil } from 'rxjs/operators';
import { fadeMotion, ThyScrollService } from 'ngx-tethys/core';

class ThyBackTopComponent {
    constructor(doc, thyScrollService, platform, cdr, zone) {
        this.doc = doc;
        this.thyScrollService = thyScrollService;
        this.platform = platform;
        this.cdr = cdr;
        this.zone = zone;
        this.classNames = true;
        this.thyVisibilityHeight = 400;
        this.thyClick = new EventEmitter();
        this.visibleChange = new EventEmitter();
        this.visible = false;
        this.scrollListenerDestroy$ = new Subject();
        this.target = null;
    }
    ngOnInit() {
        this.registerScrollEvent();
    }
    clickBackTop() {
        this.thyScrollService.scrollTo(this.getTarget(), 0);
        this.thyClick.emit(true);
    }
    getTarget() {
        return this.target || window;
    }
    handleScroll() {
        if (this.visible === this.thyScrollService.getScroll(this.getTarget()) > this.thyVisibilityHeight) {
            return;
        }
        this.visible = !this.visible;
        this.cdr.detectChanges();
        this.zone.run(() => {
            this.visibleChange.emit(this.visible);
        });
    }
    registerScrollEvent() {
        if (!this.platform.isBrowser) {
            return;
        }
        this.scrollListenerDestroy$.next();
        this.handleScroll();
        this.zone.runOutsideAngular(() => {
            fromEvent(this.getTarget(), 'scroll')
                .pipe(throttleTime(50), takeUntil(this.scrollListenerDestroy$))
                .subscribe(() => this.handleScroll());
        });
    }
    ngOnDestroy() {
        this.scrollListenerDestroy$.next();
        this.scrollListenerDestroy$.complete();
    }
    ngOnChanges(changes) {
        const { thyContainer } = changes;
        if (thyContainer) {
            this.target = typeof this.thyContainer === 'string' ? this.doc.querySelector(this.thyContainer) : this.thyContainer;
            this.registerScrollEvent();
        }
    }
}
ThyBackTopComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-back-top,[thyBackTop]',
                template: "<div class=\"thy-back-top\" (click)=\"clickBackTop()\" @fadeMotion *ngIf=\"visible\">\n  <ng-template #defaultContent>\n    <div class=\"thy-back-top-content\">\n      <thy-icon class=\"back-top-icon text-muted font-size-lg\" thyIconName=\"arrow-up\"></thy-icon>\n    </div>\n  </ng-template>\n  <ng-template [ngTemplateOutlet]=\"thyTemplate || defaultContent\"></ng-template>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                animations: [fadeMotion]
            },] }
];
ThyBackTopComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ThyScrollService },
    { type: Platform },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
ThyBackTopComponent.propDecorators = {
    classNames: [{ type: HostBinding, args: ['class.thy-back-top-container',] }],
    thyTemplate: [{ type: Input }],
    thyVisibilityHeight: [{ type: Input }],
    thyContainer: [{ type: Input }],
    thyClick: [{ type: Output }],
    visibleChange: [{ type: Output }]
};

class ThyBackTopModule {
}
ThyBackTopModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyBackTopComponent],
                imports: [CommonModule, ThyIconModule],
                exports: [ThyBackTopComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyBackTopComponent, ThyBackTopModule };
//# sourceMappingURL=ngx-tethys-back-top.js.map

import { Directive, ViewContainerRef, Input, ElementRef, EventEmitter, NgZone, Renderer2, Output, ContentChildren, NgModule, ChangeDetectorRef, HostBinding, Component, ChangeDetectionStrategy, ViewChild, InjectionToken, Optional, Inject, HostListener, ViewEncapsulation, TemplateRef } from '@angular/core';
import { coerceBooleanProperty, keycodes, isUndefinedOrNull, ENTER, SPACE, hasModifierKey } from 'ngx-tethys/util';
import { Subject, Observable, fromEvent, merge, defer } from 'rxjs';
import { takeUntil, startWith, take, switchMap, debounceTime, map } from 'rxjs/operators';
import { CdkDrag } from '@angular/cdk/drag-drop';
import { mixinUnsubscribe, MixinBase, ThyTranslate, UpdateHostClassService, mixinDisabled } from 'ngx-tethys/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ThyIconModule } from 'ngx-tethys/icon';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/icon';
import * as ɵngcc4 from '@angular/forms';

const _c0 = ["inputElement"];
function ThySelectControlComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 8, 9);
    ɵngcc0.ɵɵlistener("compositionstart", function ThySelectControlComponent_ng_template_0_Template_input_compositionstart_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.isComposing = true; })("compositionend", function ThySelectControlComponent_ng_template_0_Template_input_compositionend_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.isComposing = false; })("input", function ThySelectControlComponent_ng_template_0_Template_input_input_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.updateWidth(); })("ngModelChange", function ThySelectControlComponent_ng_template_0_Template_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.setInputValue($event); })("keydown.backspace", function ThySelectControlComponent_ng_template_0_Template_input_keydown_backspace_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.handleBackspace($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.searchInputControlClass)("ngModel", ctx_r1.inputValue)("disabled", ctx_r1.thyDisabled);
} }
function ThySelectControlComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r2.placeholderStyle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.thyPlaceholder, " ");
} }
function ThySelectControlComponent_ng_container_4_li_2_ng_template_2_Template(rf, ctx) { }
function ThySelectControlComponent_ng_container_4_li_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r16 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r16.thyLabelText, " ");
} }
const _c1 = function (a0) { return { $implicit: a0 }; };
function ThySelectControlComponent_ng_container_4_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 14);
    ɵngcc0.ɵɵelementStart(1, "div", 15);
    ɵngcc0.ɵɵtemplate(2, ThySelectControlComponent_ng_container_4_li_2_ng_template_2_Template, 0, 0, "ng-template", 16, 17, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(4, ThySelectControlComponent_ng_container_4_li_2_ng_container_4_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 18);
    ɵngcc0.ɵɵlistener("click", function ThySelectControlComponent_ng_container_4_li_2_Template_span_click_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const item_r16 = ctx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.removeHandle(item_r16, $event); });
    ɵngcc0.ɵɵelement(6, "thy-icon", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r16 = ctx.$implicit;
    const _r17 = ɵngcc0.ɵɵreference(3);
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r14.choiceContentClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r14.customDisplayTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(5, _c1, item_r16.thyRawValue || item_r16.thyValue || item_r16));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r14.customDisplayTemplate)("ngIfElse", _r17);
} }
function ThySelectControlComponent_ng_container_4_ng_template_4_Template(rf, ctx) { }
function ThySelectControlComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "ul");
    ɵngcc0.ɵɵtemplate(2, ThySelectControlComponent_ng_container_4_li_2_Template, 7, 7, "li", 11);
    ɵngcc0.ɵɵelementStart(3, "li", 12);
    ɵngcc0.ɵɵtemplate(4, ThySelectControlComponent_ng_container_4_ng_template_4_Template, 0, 0, "ng-template", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.multipleSelectedValue)("ngForTrackBy", ctx_r3.trackValue);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
function ThySelectControlComponent_ng_template_5_ng_container_0_ng_template_2_Template(rf, ctx) { }
function ThySelectControlComponent_ng_template_5_ng_container_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r27.selectedValue == null ? null : ctx_r27.selectedValue.thyLabelText, " ");
} }
function ThySelectControlComponent_ng_template_5_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 21);
    ɵngcc0.ɵɵtemplate(2, ThySelectControlComponent_ng_template_5_ng_container_0_ng_template_2_Template, 0, 0, "ng-template", 16, 17, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(4, ThySelectControlComponent_ng_template_5_ng_container_0_ng_container_4_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r25 = ɵngcc0.ɵɵreference(3);
    const ctx_r23 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r23.selectedValueStyle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r23.customDisplayTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(5, _c1, ctx_r23.selectedValue.thyRawValue || ctx_r23.selectedValue.thyValue || ctx_r23.selectedValue));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r23.customDisplayTemplate)("ngIfElse", _r25);
} }
function ThySelectControlComponent_ng_template_5_ng_template_2_Template(rf, ctx) { }
function ThySelectControlComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThySelectControlComponent_ng_template_5_ng_container_0_Template, 5, 7, "ng-container", 20);
    ɵngcc0.ɵɵelementStart(1, "div", 12);
    ɵngcc0.ɵɵtemplate(2, ThySelectControlComponent_ng_template_5_ng_template_2_Template, 0, 0, "ng-template", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.isSelectedValue);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
function ThySelectControlComponent_span_9_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 22);
    ɵngcc0.ɵɵlistener("click", function ThySelectControlComponent_span_9_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.clearHandle($event); });
    ɵngcc0.ɵɵelement(1, "thy-icon", 23);
    ɵngcc0.ɵɵelementEnd();
} }
function ThyListOptionComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 1);
    ɵngcc0.ɵɵelement(1, "thy-icon", 2);
    ɵngcc0.ɵɵelementEnd();
} }
function ThyListOptionComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 1);
    ɵngcc0.ɵɵelement(1, "thy-icon", 3);
    ɵngcc0.ɵɵelementEnd();
} }
const _c2 = ["*"];
function ThyOptionComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementStart(2, "span", 2);
    ɵngcc0.ɵɵelement(3, "i", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ThyOptionComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 2);
    ɵngcc0.ɵɵelement(3, "i", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.thyLabelText);
} }
class ThyTranscludeDirective {
    constructor(viewRef) {
        this.viewRef = viewRef;
    }
    set thyTransclude(templateRef) {
        this._ngTransclude = templateRef;
        if (templateRef) {
            this.viewRef.createEmbeddedView(templateRef);
        }
    }
    get thyTransclude() {
        return this._ngTransclude;
    }
}
ThyTranscludeDirective.ɵfac = function ThyTranscludeDirective_Factory(t) { return new (t || ThyTranscludeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ThyTranscludeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyTranscludeDirective, selectors: [["", "thyTransclude", ""]], inputs: { thyTransclude: "thyTransclude" } });
ThyTranscludeDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
ThyTranscludeDirective.propDecorators = {
    thyTransclude: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTranscludeDirective, [{
        type: Directive,
        args: [{
                selector: '[thyTransclude]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { thyTransclude: [{
            type: Input
        }] }); })();

class ThyAutofocusDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // 自动选择，用于只读的 input 输入框，方便复制粘贴
        this._autoSelect = false;
    }
    set thyAutoSelect(value) {
        this._autoSelect = coerceBooleanProperty(value);
    }
    // auto focus current element
    set thyAutofocus(value) {
        if (coerceBooleanProperty(value) !== false) {
            setTimeout(() => {
                this.elementRef.nativeElement.focus();
                if (this._autoSelect && this.elementRef.nativeElement.select) {
                    this.elementRef.nativeElement.select();
                }
            });
        }
    }
}
ThyAutofocusDirective.ɵfac = function ThyAutofocusDirective_Factory(t) { return new (t || ThyAutofocusDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyAutofocusDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyAutofocusDirective, selectors: [["input", "thyAutofocus", ""], ["textarea", "thyAutofocus", ""]], inputs: { thyAutoSelect: "thyAutoSelect", thyAutofocus: "thyAutofocus" } });
ThyAutofocusDirective.ctorParameters = () => [
    { type: ElementRef }
];
ThyAutofocusDirective.propDecorators = {
    thyAutoSelect: [{ type: Input }],
    thyAutofocus: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyAutofocusDirective, [{
        type: Directive,
        args: [{
                selector: 'input[thyAutofocus],textarea[thyAutofocus]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { thyAutoSelect: [{
            type: Input
        }], thyAutofocus: [{
            type: Input
        }] }); })();

/**
 * 与 (keydown.enter) 区别是支持组合键，当按 Ctrl + Enter 或者 Command + Enter 也会触发
 */
class ThyEnterDirective {
    constructor(ngZone, elementRef, renderer) {
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.thyEnter = new EventEmitter();
    }
    onKeydown(event) {
        const keyCode = event.which || event.keyCode;
        if (keyCode === keycodes.ENTER) {
            this.ngZone.run(() => {
                this.thyEnter.emit(event);
            });
        }
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.onKeydown.bind(this));
        });
    }
}
ThyEnterDirective.ɵfac = function ThyEnterDirective_Factory(t) { return new (t || ThyEnterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyEnterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyEnterDirective, selectors: [["", "thyEnter", ""]], outputs: { thyEnter: "thyEnter" } });
ThyEnterDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 }
];
ThyEnterDirective.propDecorators = {
    thyEnter: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyEnterDirective, [{
        type: Directive,
        args: [{
                selector: '[thyEnter]'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { thyEnter: [{
            type: Output
        }] }); })();

class ThyCtrlEnterDirective {
    constructor(ngZone, elementRef, renderer) {
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.thyCtrlEnter = new EventEmitter();
    }
    onKeydown(event) {
        const keyCode = event.which || event.keyCode;
        if ((event.ctrlKey || event.metaKey) && keyCode === keycodes.ENTER) {
            event.preventDefault();
            this.ngZone.run(() => {
                this.thyCtrlEnter.emit(event);
            });
        }
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.onKeydown.bind(this));
        });
    }
}
ThyCtrlEnterDirective.ɵfac = function ThyCtrlEnterDirective_Factory(t) { return new (t || ThyCtrlEnterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyCtrlEnterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyCtrlEnterDirective, selectors: [["", "thyCtrlEnter", ""]], outputs: { thyCtrlEnter: "thyCtrlEnter" } });
ThyCtrlEnterDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 }
];
ThyCtrlEnterDirective.propDecorators = {
    thyCtrlEnter: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCtrlEnterDirective, [{
        type: Directive,
        args: [{
                selector: '[thyCtrlEnter]'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { thyCtrlEnter: [{
            type: Output
        }] }); })();

class ThyShowDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.thyShowChange = new EventEmitter();
    }
    unListenDocument() {
        if (this.unListenEvent) {
            this.unListenEvent();
            this.unListenEvent = null;
        }
    }
    set thyShow(condition) {
        if (condition) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'block');
            setTimeout(() => {
                this.unListenDocument = this.renderer.listen('document', 'click', event => {
                    if (!this.elementRef.nativeElement.contains(event.target)) {
                        this.thyShowChange.emit(false);
                        this.unListenDocument();
                    }
                });
            });
        }
        else {
            this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.unListenDocument();
        }
    }
    ngOnDestroy() {
        this.unListenDocument();
    }
}
ThyShowDirective.ɵfac = function ThyShowDirective_Factory(t) { return new (t || ThyShowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyShowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyShowDirective, selectors: [["", "thyShow", ""]], inputs: { thyShow: "thyShow" }, outputs: { thyShowChange: "thyShowChange" } });
ThyShowDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ThyShowDirective.propDecorators = {
    thyShowChange: [{ type: Output }],
    thyShow: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyShowDirective, [{
        type: Directive,
        args: [{ selector: '[thyShow]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { thyShowChange: [{
            type: Output
        }], thyShow: [{
            type: Input
        }] }); })();

/**
 * 将来会移动到 thy 组件库中
 */
class ThyStopPropagationDirective {
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._eventName = 'click';
        this.isStopPropagation = true;
    }
    set thyStopPropagation(value) {
        if (value === false || value === 'false') {
            this.isStopPropagation = false;
        }
        else {
            this.isStopPropagation = true;
            this._eventName = value || 'click';
        }
    }
    ngOnInit() {
        if (this.isStopPropagation) {
            this._listener = this._renderer.listen(this._elementRef.nativeElement, this._eventName, ($event) => {
                $event.stopPropagation();
            });
        }
    }
    ngOnDestroy() {
        if (this._listener) {
            this._listener();
        }
    }
}
ThyStopPropagationDirective.ɵfac = function ThyStopPropagationDirective_Factory(t) { return new (t || ThyStopPropagationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyStopPropagationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyStopPropagationDirective, selectors: [["", "thyStopPropagation", ""]], inputs: { thyStopPropagation: "thyStopPropagation" } });
ThyStopPropagationDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ThyStopPropagationDirective.propDecorators = {
    thyStopPropagation: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyStopPropagationDirective, [{
        type: Directive,
        args: [{
                selector: '[thyStopPropagation]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { thyStopPropagation: [{
            type: Input
        }] }); })();

class ThyContextMenuDirective {
    constructor(ngZone, elementRef, renderer) {
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.thyContextMenu = new EventEmitter();
    }
    rightClick(event) {
        event.preventDefault();
        this.ngZone.run(() => {
            this.thyContextMenu.emit(event);
        });
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.renderer.listen(this.elementRef.nativeElement, 'contextmenu', this.rightClick.bind(this));
        });
    }
}
ThyContextMenuDirective.ɵfac = function ThyContextMenuDirective_Factory(t) { return new (t || ThyContextMenuDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyContextMenuDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyContextMenuDirective, selectors: [["", "thyContextMenu", ""]], outputs: { thyContextMenu: "thyContextMenu" } });
ThyContextMenuDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 }
];
ThyContextMenuDirective.propDecorators = {
    thyContextMenu: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyContextMenuDirective, [{
        type: Directive,
        args: [{
                selector: '[thyContextMenu]'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { thyContextMenu: [{
            type: Output
        }] }); })();

class ThyScrollDirective {
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this._destroyed = new Subject();
        this._enable = true;
        this._initialled = false;
        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')
            .pipe(takeUntil(this._destroyed))
            .subscribe(observer)));
        this.thyOnScrolled = new EventEmitter();
    }
    set thyEnable(value) {
        this._enable = coerceBooleanProperty(value);
        if (this._initialled) {
            if (this._enable && this._subscription === null) {
                this._subscription = this._elementScrolled.subscribe(() => this.thyOnScrolled.emit(this.elementRef));
            }
            else {
                if (this._subscription) {
                    this._subscription.unsubscribe();
                    this._subscription = null;
                }
            }
        }
    }
    ngOnInit() {
        if (this._enable) {
            this._subscription = this._elementScrolled.subscribe(() => this.thyOnScrolled.emit(this.elementRef));
        }
        this._initialled = true;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    getElementRef() {
        return this.elementRef;
    }
}
ThyScrollDirective.ɵfac = function ThyScrollDirective_Factory(t) { return new (t || ThyScrollDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ThyScrollDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyScrollDirective, selectors: [["", "thyScroll", ""]], inputs: { thyEnable: "thyEnable" }, outputs: { thyOnScrolled: "thyOnScrolled" } });
ThyScrollDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
ThyScrollDirective.propDecorators = {
    thyEnable: [{ type: Input }],
    thyOnScrolled: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyScrollDirective, [{
        type: Directive,
        args: [{
                selector: '[thyScroll]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { thyOnScrolled: [{
            type: Output
        }], thyEnable: [{
            type: Input
        }] }); })();

const _MixinBase$1 = mixinUnsubscribe(MixinBase);
class ThyDragDropDirective extends _MixinBase$1 {
    constructor() {
        super();
    }
    ngAfterContentInit() {
        if (this.draggables) {
            this.draggables.changes.pipe(startWith(this.draggables)).subscribe(() => {
                super.ngOnDestroy();
                this.ngUnsubscribe$ = new Subject();
                merge(...this.draggables.toArray().map(dragRef => {
                    return dragRef.started;
                }))
                    .pipe(takeUntil(this.ngUnsubscribe$))
                    .subscribe(() => {
                    document.body.classList.add('thy-dragging-body');
                });
                merge(...this.draggables.toArray().map(dragRef => dragRef.released))
                    .pipe(takeUntil(this.ngUnsubscribe$))
                    .subscribe(() => {
                    document.body.classList.remove('thy-dragging-body');
                });
            });
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyDragDropDirective.ɵfac = function ThyDragDropDirective_Factory(t) { return new (t || ThyDragDropDirective)(); };
ThyDragDropDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDragDropDirective, selectors: [["", "thyDragDrop", ""]], contentQueries: function ThyDragDropDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDrag, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.draggables = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
ThyDragDropDirective.ctorParameters = () => [];
ThyDragDropDirective.propDecorators = {
    draggables: [{ type: ContentChildren, args: [CdkDrag, { descendants: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDragDropDirective, [{
        type: Directive,
        args: [{
                selector: '[thyDragDrop]'
            }]
    }], function () { return []; }, { draggables: [{
            type: ContentChildren,
            args: [CdkDrag, { descendants: true }]
        }] }); })();

class ThySharedModule {
}
ThySharedModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThySharedModule });
ThySharedModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThySharedModule_Factory(t) { return new (t || ThySharedModule)(); }, providers: [] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThySharedModule, { declarations: [ThyTranscludeDirective, ThyAutofocusDirective, ThyEnterDirective, ThyCtrlEnterDirective, ThyShowDirective, ThyStopPropagationDirective, ThyContextMenuDirective, ThyScrollDirective, ThyDragDropDirective], exports: [ThyTranscludeDirective, ThyAutofocusDirective, ThyEnterDirective, ThyCtrlEnterDirective, ThyShowDirective, ThyStopPropagationDirective, ThyContextMenuDirective, ThyScrollDirective, ThyDragDropDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySharedModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ThyTranscludeDirective,
                    ThyAutofocusDirective,
                    ThyEnterDirective,
                    ThyCtrlEnterDirective,
                    ThyShowDirective,
                    ThyStopPropagationDirective,
                    ThyContextMenuDirective,
                    ThyScrollDirective,
                    ThyDragDropDirective
                ],
                exports: [
                    ThyTranscludeDirective,
                    ThyAutofocusDirective,
                    ThyEnterDirective,
                    ThyCtrlEnterDirective,
                    ThyShowDirective,
                    ThyStopPropagationDirective,
                    ThyContextMenuDirective,
                    ThyScrollDirective,
                    ThyDragDropDirective
                ],
                providers: []
            }]
    }], null, null); })();

const noop = () => { };
const ɵ0 = noop;
class ThyFormCheckBaseComponent {
    constructor(thyTranslate, changeDetectorRef) {
        this.thyTranslate = thyTranslate;
        this.changeDetectorRef = changeDetectorRef;
        // The internal data model
        this._innerValue = null;
        this._disabled = false;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this._isFormCheck = true;
        this._isFormCheckInline = false;
        this._isChecked = false;
    }
    get _isNoText() {
        return this._isFormCheckInline && !this._labelText;
    }
    set thyInline(value) {
        this._isFormCheckInline = coerceBooleanProperty(value);
    }
    set thyLabelText(value) {
        this._labelText = value;
    }
    set thyLabelTextTranslateKey(value) {
        if (value) {
            this._labelText = this.thyTranslate.instant(value);
        }
        else {
            this._labelText = '';
        }
    }
    set thyDisabled(value) {
        this.setDisabledState(coerceBooleanProperty(value));
    }
    writeValue(obj) {
        if (obj !== this._innerValue) {
            this._innerValue = obj;
            this._isChecked = !!this._innerValue;
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
        this.markForCheck();
    }
    updateValue(value) {
        this._innerValue = value;
        this._isChecked = !!this._innerValue;
        this.onChangeCallback(value);
        this.markForCheck();
    }
    change() {
        this.updateValue(!this._innerValue);
    }
    markForCheck() {
        if (this.changeDetectorRef) {
            this.changeDetectorRef.markForCheck();
        }
    }
}
ThyFormCheckBaseComponent.ɵfac = function ThyFormCheckBaseComponent_Factory(t) { return new (t || ThyFormCheckBaseComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyTranslate), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyFormCheckBaseComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyFormCheckBaseComponent, hostVars: 8, hostBindings: function ThyFormCheckBaseComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("form-check", ctx._isFormCheck)("form-check-inline", ctx._isFormCheckInline)("form-check-checked", ctx._isChecked)("form-check-inline-no-label-text", ctx._isNoText);
    } }, inputs: { thyInline: "thyInline", thyLabelText: "thyLabelText", thyLabelTextTranslateKey: "thyLabelTextTranslateKey", thyDisabled: "thyDisabled" } });
ThyFormCheckBaseComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: ChangeDetectorRef }
];
ThyFormCheckBaseComponent.propDecorators = {
    _isFormCheck: [{ type: HostBinding, args: ['class.form-check',] }],
    _isFormCheckInline: [{ type: HostBinding, args: ['class.form-check-inline',] }],
    _isChecked: [{ type: HostBinding, args: ['class.form-check-checked',] }],
    _isNoText: [{ type: HostBinding, args: ['class.form-check-inline-no-label-text',] }],
    thyInline: [{ type: Input }],
    thyLabelText: [{ type: Input }],
    thyLabelTextTranslateKey: [{ type: Input }],
    thyDisabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormCheckBaseComponent, [{
        type: Directive
    }], function () { return [{ type: ɵngcc1.ThyTranslate }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _isFormCheck: [{
            type: HostBinding,
            args: ['class.form-check']
        }], _isFormCheckInline: [{
            type: HostBinding,
            args: ['class.form-check-inline']
        }], _isChecked: [{
            type: HostBinding,
            args: ['class.form-check-checked']
        }], _isNoText: [{
            type: HostBinding,
            args: ['class.form-check-inline-no-label-text']
        }], thyInline: [{
            type: Input
        }], thyLabelText: [{
            type: Input
        }], thyLabelTextTranslateKey: [{
            type: Input
        }], thyDisabled: [{
            type: Input
        }] }); })();

class ThySelectControlComponent {
    constructor(renderer, element, updateHostClassService) {
        this.renderer = renderer;
        this.element = element;
        this.updateHostClassService = updateHostClassService;
        this.inputValue = '';
        this.isComposing = false;
        this.panelOpened = false;
        this.isMultiple = false;
        this.showSearch = false;
        this.disabled = false;
        this.thyAllowClear = false;
        this.thyPlaceholder = '';
        this.thyOnSearch = new EventEmitter();
        this.thyOnRemove = new EventEmitter();
        this.thyOnClear = new EventEmitter();
        this.updateHostClassService.initializeElement(this.element.nativeElement);
    }
    get thyPanelOpened() {
        return this.panelOpened;
    }
    set thyPanelOpened(value) {
        this.panelOpened = value;
        if (this.panelOpened && this.thyShowSearch) {
            Promise.resolve(null).then(() => {
                this.inputElement.nativeElement.focus();
            });
        }
        if (!this.panelOpened && this.thyShowSearch) {
            Promise.resolve(null).then(() => {
                this.setInputValue('');
            });
        }
        this.setSelectControlClass();
    }
    get thyIsMultiple() {
        return this.isMultiple;
    }
    set thyIsMultiple(value) {
        this.isMultiple = value;
        this.setSelectControlClass();
    }
    get thyShowSearch() {
        return this.showSearch;
    }
    set thyShowSearch(value) {
        this.showSearch = value;
        this.setSelectControlClass();
    }
    get thySelectedOptions() {
        return this.selectedOptions;
    }
    set thySelectedOptions(value) {
        let sameValue = false;
        const oldValue = this.selectedOptions;
        if (this.isMultiple) {
            if (oldValue instanceof Array && value instanceof Array && oldValue.length === value.length) {
                sameValue = value.every((option, index) => option.thyValue === oldValue[index].thyValue);
            }
        }
        else {
            if (oldValue && value) {
                sameValue = oldValue.thyValue === value.thyValue;
            }
        }
        this.selectedOptions = value;
        if (this.panelOpened && this.thyShowSearch) {
            if (!sameValue) {
                Promise.resolve(null).then(() => {
                    this.setInputValue('');
                });
            }
            this.inputElement.nativeElement.focus();
        }
    }
    get thyDisabled() {
        return this.disabled;
    }
    set thyDisabled(value) {
        this.disabled = value;
        this.setSelectControlClass();
    }
    get thySize() {
        return this.size;
    }
    set thySize(value) {
        this.size = value;
        this.setSelectControlClass();
    }
    get selectedValueStyle() {
        let showSelectedValue = false;
        if (this.showSearch) {
            if (this.panelOpened) {
                showSelectedValue = !(this.isComposing || this.inputValue);
            }
            else {
                showSelectedValue = true;
            }
        }
        else {
            showSelectedValue = true;
        }
        return { display: showSelectedValue ? 'block' : 'none' };
    }
    get placeholderStyle() {
        let placeholder = true;
        if (this.isSelectedValue) {
            placeholder = false;
        }
        if (!this.thyPlaceholder) {
            placeholder = false;
        }
        if (this.isComposing || this.inputValue) {
            placeholder = false;
        }
        return { display: placeholder ? 'block' : 'none' };
    }
    get selectedValue() {
        return this.thySelectedOptions;
    }
    get multipleSelectedValue() {
        return this.thySelectedOptions;
    }
    get showClearIcon() {
        return this.thyAllowClear && this.isSelectedValue;
    }
    get isSelectedValue() {
        return ((!this.isMultiple && !isUndefinedOrNull(this.thySelectedOptions)) ||
            (this.isMultiple && this.thySelectedOptions.length > 0));
    }
    ngOnInit() {
        this.setSelectControlClass();
    }
    setSelectControlClass() {
        const modeType = this.isMultiple ? 'multiple' : 'single';
        const selectControlClass = {
            [`form-control`]: true,
            [`form-control-${this.thySize}`]: !!this.thySize,
            [`form-control-custom`]: true,
            [`select-control`]: true,
            [`select-control-${modeType}`]: true,
            [`select-control-show-search`]: this.showSearch,
            [`panel-is-opened`]: this.panelOpened,
            [`disabled`]: this.disabled
        };
        this.updateHostClassService.updateClassByMap(selectControlClass);
        this.searchInputControlClass = {
            [`form-control`]: true,
            [`form-control-${this.thySize}`]: !!this.thySize,
            [`search-input-field`]: true,
            [`hidden`]: !this.thyShowSearch
        };
        this.choiceContentClass = {
            [`choice-content`]: true,
            [`text-truncate`]: true,
            [`font-size-${this.thySize}`]: !!this.thySize
        };
    }
    setInputValue(value) {
        if (value !== this.inputValue) {
            this.inputValue = value;
            this.updateWidth();
            this.thyOnSearch.emit(this.inputValue);
        }
    }
    handleBackspace(event) {
        if (event.isComposing) {
            return;
        }
        if (this.inputValue.length === 0 && this.selectedOptions instanceof Array) {
            if (this.selectedOptions.length > 0) {
                this.removeHandle(this.selectedOptions[this.selectedOptions.length - 1], event);
            }
        }
    }
    updateWidth() {
        if (this.isMultiple && this.thyShowSearch) {
            if (this.inputValue || this.isComposing) {
                this.renderer.setStyle(this.inputElement.nativeElement, 'width', `${this.inputElement.nativeElement.scrollWidth}px`);
            }
            else {
                this.renderer.removeStyle(this.inputElement.nativeElement, 'width');
            }
        }
    }
    removeHandle(item, $event) {
        this.thyOnRemove.emit({ item: item, $eventOrigin: $event });
    }
    clearHandle($event) {
        this.thyOnClear.emit($event);
    }
    trackValue(_index, option) {
        return option.thyValue;
    }
}
ThySelectControlComponent.ɵfac = function ThySelectControlComponent_Factory(t) { return new (t || ThySelectControlComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService)); };
ThySelectControlComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySelectControlComponent, selectors: [["thy-select-control"], ["", "thySelectControl", ""]], viewQuery: function ThySelectControlComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
    } }, inputs: { thyAllowClear: "thyAllowClear", thyPlaceholder: "thyPlaceholder", thyPanelOpened: "thyPanelOpened", thyIsMultiple: "thyIsMultiple", thyShowSearch: "thyShowSearch", thySelectedOptions: "thySelectedOptions", thyDisabled: "thyDisabled", thySize: "thySize", customDisplayTemplate: "customDisplayTemplate" }, outputs: { thyOnSearch: "thyOnSearch", thyOnRemove: "thyOnRemove", thyOnClear: "thyOnClear" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], decls: 10, vars: 4, consts: [["inputTemplate", ""], [1, "select-control-rendered"], ["class", "text-placeholder text-truncate", 3, "ngStyle", 4, "ngIf"], [4, "ngIf", "ngIfElse"], ["single", ""], [1, "select-control-arrow"], ["thyIconName", "angle-down", 1, "font-size-base"], ["class", "select-control-clear remove-link", 3, "click", 4, "ngIf"], ["autocomplete", "something-new", 3, "ngClass", "ngModel", "disabled", "compositionstart", "compositionend", "input", "ngModelChange", "keydown.backspace"], ["inputElement", ""], [1, "text-placeholder", "text-truncate", 3, "ngStyle"], ["class", "choice", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "select-control-search"], [3, "ngTemplateOutlet"], [1, "choice"], [3, "ngClass"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["customDisplay", ""], [1, "choice-remove", "font-size-base", 3, "click"], ["thyIconName", "close", 1, "font-size-sm"], [4, "ngIf"], [1, "selected-value", "text-truncate", 3, "ngStyle"], [1, "select-control-clear", "remove-link", 3, "click"], ["thyIconName", "close-circle-bold-fill", 1, "remove-link-icon", "font-size-base"]], template: function ThySelectControlComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ThySelectControlComponent_ng_template_0_Template, 2, 3, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtemplate(3, ThySelectControlComponent_div_3_Template, 2, 2, "div", 2);
        ɵngcc0.ɵɵtemplate(4, ThySelectControlComponent_ng_container_4_Template, 5, 3, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(5, ThySelectControlComponent_ng_template_5_Template, 3, 2, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "span", 5);
        ɵngcc0.ɵɵelement(8, "thy-icon", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, ThySelectControlComponent_span_9_Template, 2, 0, "span", 7);
    } if (rf & 2) {
        const _r4 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSelectedValue);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isMultiple)("ngIfElse", _r4);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showClearIcon);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ThyIconComponent, ɵngcc4.DefaultValueAccessor, ɵngcc2.NgClass, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc2.NgStyle, ɵngcc2.NgForOf, ɵngcc2.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
ThySelectControlComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThySelectControlComponent.propDecorators = {
    thyPanelOpened: [{ type: Input }],
    thyIsMultiple: [{ type: Input }],
    thyShowSearch: [{ type: Input }],
    thySelectedOptions: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    customDisplayTemplate: [{ type: Input }],
    thyAllowClear: [{ type: Input }],
    thyPlaceholder: [{ type: Input }],
    thySize: [{ type: Input }],
    thyOnSearch: [{ type: Output }],
    thyOnRemove: [{ type: Output }],
    thyOnClear: [{ type: Output }],
    inputElement: [{ type: ViewChild, args: ['inputElement',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySelectControlComponent, [{
        type: Component,
        args: [{
                selector: 'thy-select-control,[thySelectControl]',
                template: "<ng-template #inputTemplate>\n  <input\n    #inputElement\n    (compositionstart)=\"isComposing = true\"\n    (compositionend)=\"isComposing = false\"\n    autocomplete=\"something-new\"\n    [ngClass]=\"searchInputControlClass\"\n    (input)=\"updateWidth()\"\n    [ngModel]=\"inputValue\"\n    (ngModelChange)=\"setInputValue($event)\"\n    (keydown.backspace)=\"handleBackspace($event)\"\n    [disabled]=\"thyDisabled\"\n  />\n</ng-template>\n\n<div class=\"select-control-rendered\">\n  <div class=\"text-placeholder text-truncate\" *ngIf=\"!isSelectedValue\" [ngStyle]=\"placeholderStyle\">\n    {{ thyPlaceholder }}\n  </div>\n  <ng-container *ngIf=\"isMultiple; else single\">\n    <ul>\n      <li class=\"choice\" *ngFor=\"let item of multipleSelectedValue; trackBy: trackValue\">\n        <div [ngClass]=\"choiceContentClass\">\n          <ng-template\n            #customDisplay\n            [ngTemplateOutlet]=\"customDisplayTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: item.thyRawValue || item.thyValue || item }\"\n          ></ng-template>\n          <ng-container *ngIf=\"!customDisplayTemplate; else customDisplay\">\n            {{ item.thyLabelText }}\n          </ng-container>\n        </div>\n        <span class=\"choice-remove font-size-base\" (click)=\"removeHandle(item, $event)\">\n          <thy-icon thyIconName=\"close\" class=\"font-size-sm\"></thy-icon>\n        </span>\n      </li>\n      <li class=\"select-control-search\">\n        <ng-template [ngTemplateOutlet]=\"inputTemplate\"></ng-template>\n      </li>\n    </ul>\n  </ng-container>\n  <ng-template #single>\n    <ng-container *ngIf=\"isSelectedValue\">\n      <div class=\"selected-value text-truncate\" [ngStyle]=\"selectedValueStyle\">\n        <ng-template\n          #customDisplay\n          [ngTemplateOutlet]=\"customDisplayTemplate\"\n          [ngTemplateOutletContext]=\"{\n            $implicit: selectedValue.thyRawValue || selectedValue.thyValue || selectedValue\n          }\"\n        ></ng-template>\n        <ng-container *ngIf=\"!customDisplayTemplate; else customDisplay\">\n          {{ selectedValue?.thyLabelText }}\n        </ng-container>\n      </div>\n    </ng-container>\n    <div class=\"select-control-search\">\n      <ng-template [ngTemplateOutlet]=\"inputTemplate\"></ng-template>\n    </div>\n  </ng-template>\n</div>\n<span class=\"select-control-arrow\">\n  <thy-icon thyIconName=\"angle-down\" class=\"font-size-base\"></thy-icon>\n</span>\n<span class=\"select-control-clear remove-link\" *ngIf=\"showClearIcon\" (click)=\"clearHandle($event)\">\n  <thy-icon class=\"remove-link-icon font-size-base\" thyIconName=\"close-circle-bold-fill\"></thy-icon>\n</span>\n",
                providers: [UpdateHostClassService],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.UpdateHostClassService }]; }, { thyAllowClear: [{
            type: Input
        }], thyPlaceholder: [{
            type: Input
        }], thyOnSearch: [{
            type: Output
        }], thyOnRemove: [{
            type: Output
        }], thyOnClear: [{
            type: Output
        }], thyPanelOpened: [{
            type: Input
        }], thyIsMultiple: [{
            type: Input
        }], thyShowSearch: [{
            type: Input
        }], thySelectedOptions: [{
            type: Input
        }], thyDisabled: [{
            type: Input
        }], thySize: [{
            type: Input
        }], customDisplayTemplate: [{
            type: Input
        }], inputElement: [{
            type: ViewChild,
            args: ['inputElement']
        }] }); })();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class ThySelectCommonModule {
}
ThySelectCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThySelectCommonModule });
ThySelectCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThySelectCommonModule_Factory(t) { return new (t || ThySelectCommonModule)(); }, imports: [[CommonModule, FormsModule, ThyIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThySelectCommonModule, { declarations: function () { return [ThySelectControlComponent]; }, imports: function () { return [CommonModule, FormsModule, ThyIconModule]; }, exports: function () { return [ThySelectControlComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySelectCommonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, ThyIconModule],
                exports: [ThySelectControlComponent],
                declarations: [ThySelectControlComponent]
            }]
    }], null, null); })();

/**
 * Injection token used to provide the parent component to options.
 */
const THY_OPTION_PARENT_COMPONENT = new InjectionToken('THY_OPTION_PARENT_COMPONENT');
/**
 * Injection token used to provide the parent component to options.
 */
const THY_OPTION_GROUP_COMPONENT = new InjectionToken('THY_OPTION_GROUP_COMPONENT');
/**
 * Injection token used to provide the parent component to options.
 */
const THY_LIST_OPTION_PARENT_COMPONENT = new InjectionToken('THY_LIST_OPTION_PARENT_COMPONENT');

let _uniqueIdCounter = 0;
class ThyListOptionComponent {
    constructor(element, changeDetector, 
    /** @docs-private */
    parentSelectionList) {
        this.element = element;
        this.changeDetector = changeDetector;
        this.parentSelectionList = parentSelectionList;
        this._role = 'option';
        this._tabIndex = -1;
        this.id = `thy-list-option-${_uniqueIdCounter++}`;
    }
    get _isListOption() {
        return this.parentSelectionList.layout === 'list';
    }
    get _parentLayout() {
        return this.parentSelectionList.layout === 'grid';
    }
    set thyDisabled(value) {
        this.disabled = coerceBooleanProperty(value);
    }
    /** Whether the option is selected. */
    get selected() {
        return this.parentSelectionList.isSelected(this);
    }
    onClick(event) {
        if (this.parentSelectionList.multiple || !this.parentSelectionList.isSelected(this)) {
            this.parentSelectionList.toggleOption(this, event);
            this.parentSelectionList.setActiveOption(this);
        }
    }
    // @HostListener('focus', ['$event'])
    // onFocus(event: Event) {
    //     this.parentSelectionList.setFocusedOption(this, event);
    // }
    /** Allows for programmatic focusing of the option. */
    // focus(origin?: FocusOrigin): void {
    //     this.element.nativeElement.focus();
    // }
    setActiveStyles() {
        this.element.nativeElement.classList.add('hover');
        this.parentSelectionList.scrollIntoView(this);
    }
    setInactiveStyles() {
        this.element.nativeElement.classList.remove('hover');
    }
    /**
     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.
     * @docs-private
     */
    getLabel() {
        return '';
    }
}
ThyListOptionComponent.ɵfac = function ThyListOptionComponent_Factory(t) { return new (t || ThyListOptionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(THY_LIST_OPTION_PARENT_COMPONENT, 8)); };
ThyListOptionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyListOptionComponent, selectors: [["thy-list-option"], ["", "thy-list-option", ""]], hostVars: 10, hostBindings: function ThyListOptionComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyListOptionComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx._role)("tabindex", ctx._tabIndex);
        ɵngcc0.ɵɵclassProp("thy-list-option", ctx._isListOption)("thy-grid-option", ctx._parentLayout)("disabled", ctx.disabled)("active", ctx.selected);
    } }, inputs: { id: "id", thyDisabled: "thyDisabled", thyValue: "thyValue" }, ngContentSelectors: _c2, decls: 3, vars: 2, consts: [["class", "checked-icon", 4, "ngIf"], [1, "checked-icon"], ["thyIconName", "check"], ["thyIconName", "check-circle-fill"]], template: function ThyListOptionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, ThyListOptionComponent_span_1_Template, 2, 0, "span", 0);
        ɵngcc0.ɵɵtemplate(2, ThyListOptionComponent_span_2_Template, 2, 0, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.parentSelectionList.multiple && ctx.parentSelectionList.layout === "list");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.parentSelectionList.layout === "grid");
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ThyIconComponent], encapsulation: 2 });
ThyListOptionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_LIST_OPTION_PARENT_COMPONENT,] }] }
];
ThyListOptionComponent.propDecorators = {
    _isListOption: [{ type: HostBinding, args: [`class.thy-list-option`,] }],
    _parentLayout: [{ type: HostBinding, args: [`class.thy-grid-option`,] }],
    _role: [{ type: HostBinding, args: [`attr.role`,] }],
    _tabIndex: [{ type: HostBinding, args: [`attr.tabindex`,] }],
    id: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    disabled: [{ type: HostBinding, args: [`class.disabled`,] }],
    selected: [{ type: HostBinding, args: [`class.active`,] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyListOptionComponent, [{
        type: Component,
        args: [{
                selector: 'thy-list-option,[thy-list-option]',
                template: "<ng-content></ng-content>\n<span class=\"checked-icon\" *ngIf=\"parentSelectionList.multiple && parentSelectionList.layout === 'list'\">\n  <thy-icon thyIconName=\"check\"></thy-icon>\n</span>\n<span *ngIf=\"parentSelectionList.layout === 'grid'\" class=\"checked-icon\">\n  <thy-icon thyIconName=\"check-circle-fill\"></thy-icon>\n</span>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_LIST_OPTION_PARENT_COMPONENT]
            }] }]; }, { _role: [{
            type: HostBinding,
            args: [`attr.role`]
        }], _tabIndex: [{
            type: HostBinding,
            args: [`attr.tabindex`]
        }], id: [{
            type: Input
        }], _isListOption: [{
            type: HostBinding,
            args: [`class.thy-list-option`]
        }], _parentLayout: [{
            type: HostBinding,
            args: [`class.thy-grid-option`]
        }], thyDisabled: [{
            type: Input
        }], disabled: [{
            type: HostBinding,
            args: [`class.disabled`]
        }], selected: [{
            type: HostBinding,
            args: [`class.active`]
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], thyValue: [{
            type: Input
        }] }); })();

const _MixinBase = mixinDisabled(MixinBase);
class ThyOptionGroupComponent extends _MixinBase {
    set thyDisabled(value) {
        this.thyDisabled = value;
    }
}
ThyOptionGroupComponent.ɵfac = function ThyOptionGroupComponent_Factory(t) { return ɵThyOptionGroupComponent_BaseFactory(t || ThyOptionGroupComponent); };
ThyOptionGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyOptionGroupComponent, selectors: [["thy-list-option-group"], ["", "thy-list-option-group", ""]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 1, vars: 0, template: function ThyOptionGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
const ɵThyOptionGroupComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(ThyOptionGroupComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyOptionGroupComponent, [{
        type: Component,
        args: [{
                selector: 'thy-list-option-group,[thy-list-option-group]',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], null, null); })();

class SelectOptionBase {
}

class ThyOptionSelectionChangeEvent {
    constructor(option, isUserInput = false) {
        this.option = option;
        this.isUserInput = isUserInput;
    }
}
class ThyOptionVisibleChangeEvent {
}
class ThyOptionComponent extends SelectOptionBase {
    constructor(element, parent, group, cdr) {
        super();
        this.element = element;
        this.parent = parent;
        this.group = group;
        this.cdr = cdr;
        this._selected = false;
        this._hidden = false;
        this._disabled = false;
        this._isOptionItem = true;
        this.selectionChange = new EventEmitter();
        this.visibleChange = new EventEmitter();
    }
    set thyDisabled(value) {
        this._disabled = value;
    }
    get thyDisabled() {
        return this._disabled;
    }
    get disabled() {
        return this.hidden || this._disabled;
    }
    get hidden() {
        return this._hidden;
    }
    get tabIndex() {
        return this.disabled ? '-1' : '0';
    }
    get selected() {
        return this._selected;
    }
    getHostElement() {
        return this.element.nativeElement;
    }
    onClick(event) {
        this.selectViaInteraction();
    }
    handleKeydown(event) {
        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {
            this.selectViaInteraction();
            event.preventDefault();
        }
    }
    selectViaInteraction() {
        if (!this.disabled) {
            this._selected = this.parent.isMultiple ? !this._selected : true;
            this.cdr.markForCheck();
            this.emitSelectionChangeEvent(true);
        }
    }
    select(event) {
        if (!this.disabled) {
            if (!this._selected) {
                this._selected = true;
                this.emitSelectionChangeEvent();
                this.cdr.markForCheck();
            }
        }
    }
    deselect() {
        if (this._selected) {
            this._selected = false;
            this.emitSelectionChangeEvent();
            this.cdr.markForCheck();
        }
    }
    hideOption() {
        if (!this._hidden) {
            this._hidden = true;
            this.visibleChange.emit({ option: this });
            this.cdr.markForCheck();
        }
    }
    showOption() {
        if (this._hidden) {
            this._hidden = false;
            this.visibleChange.emit({ option: this });
            this.cdr.markForCheck();
        }
    }
    matchSearchText(searchText) {
        if (this.thySearchKey) {
            if (this.thySearchKey.indexOf(searchText) >= 0) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (this.thyLabelText.indexOf(searchText) >= 0) {
                return true;
            }
            else {
                return false;
            }
        }
    }
    setActiveStyles() {
        this.getHostElement().classList.add('hover');
        this.cdr.markForCheck();
    }
    setInactiveStyles() {
        this.getHostElement().classList.remove('hover');
        this.cdr.markForCheck();
    }
    getLabel() {
        return '';
    }
    emitSelectionChangeEvent(isUserInput = false) {
        this.selectionChange.emit(new ThyOptionSelectionChangeEvent(this, isUserInput));
    }
    ngOnDestroy() { }
}
ThyOptionComponent.ɵfac = function ThyOptionComponent_Factory(t) { return new (t || ThyOptionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_OPTION_PARENT_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(THY_OPTION_GROUP_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyOptionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyOptionComponent, selectors: [["thy-option"]], viewQuery: function ThyOptionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, hostVars: 9, hostBindings: function ThyOptionComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyOptionComponent_click_HostBindingHandler($event) { return ctx.onClick($event); })("keydown", function ThyOptionComponent_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵclassProp("thy-option-item", ctx._isOptionItem)("disabled", ctx.thyDisabled)("hidden", ctx.hidden)("active", ctx.selected);
    } }, inputs: { thyDisabled: "thyDisabled", thyValue: "thyValue", thyRawValue: "thyRawValue", thyLabelText: "thyLabelText", thyShowOptionCustom: "thyShowOptionCustom", thySearchKey: "thySearchKey" }, outputs: { selectionChange: "selectionChange", visibleChange: "visibleChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["defaultOption", ""], [1, "checked-icon"], [1, "wtf", "wtf-checked"], [1, "text-truncate"]], template: function ThyOptionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyOptionComponent_ng_container_0_Template, 4, 0, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, ThyOptionComponent_ng_template_1_Template, 4, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyShowOptionCustom)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf], encapsulation: 2, changeDetection: 0 });
ThyOptionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_OPTION_PARENT_COMPONENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_OPTION_GROUP_COMPONENT,] }] },
    { type: ChangeDetectorRef }
];
ThyOptionComponent.propDecorators = {
    thyValue: [{ type: Input }],
    thyRawValue: [{ type: Input }],
    thyLabelText: [{ type: Input }],
    thyShowOptionCustom: [{ type: Input }],
    thySearchKey: [{ type: Input }],
    _isOptionItem: [{ type: HostBinding, args: ['class.thy-option-item',] }],
    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
    thyDisabled: [{ type: Input }, { type: HostBinding, args: [`class.disabled`,] }],
    hidden: [{ type: HostBinding, args: ['class.hidden',] }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    selected: [{ type: HostBinding, args: [`class.active`,] }],
    selectionChange: [{ type: Output }],
    visibleChange: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    handleKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyOptionComponent, [{
        type: Component,
        args: [{
                selector: 'thy-option',
                template: "<ng-container *ngIf=\"thyShowOptionCustom; else defaultOption\">\n  <ng-content></ng-content>\n  <span class=\"checked-icon\">\n    <i class=\"wtf wtf-checked\"></i>\n  </span>\n</ng-container>\n<ng-template #defaultOption>\n  <span class=\"text-truncate\">{{ thyLabelText }}</span>\n  <span class=\"checked-icon\">\n    <i class=\"wtf wtf-checked\"></i>\n  </span>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_OPTION_PARENT_COMPONENT]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_OPTION_GROUP_COMPONENT]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _isOptionItem: [{
            type: HostBinding,
            args: ['class.thy-option-item']
        }], selectionChange: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], thyDisabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: [`class.disabled`]
        }], hidden: [{
            type: HostBinding,
            args: ['class.hidden']
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], selected: [{
            type: HostBinding,
            args: [`class.active`]
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], handleKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], thyValue: [{
            type: Input
        }], thyRawValue: [{
            type: Input
        }], thyLabelText: [{
            type: Input
        }], thyShowOptionCustom: [{
            type: Input
        }], thySearchKey: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }] }); })();

class ThySelectOptionGroupComponent {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this._hidden = false;
        this._isOptionGroup = true;
        this._destroy$ = new Subject();
        this.optionVisibleChanges = defer(() => {
            if (this.options) {
                return merge(...this.options.map(option => option.visibleChange));
            }
            return this._ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionVisibleChanges));
        });
    }
    get hidden() {
        return this._hidden;
    }
    ngAfterContentInit() {
        this.options.changes.pipe(startWith(null), takeUntil(this._destroy$)).subscribe(() => {
            this._resetOptions();
        });
    }
    _resetOptions() {
        const changedOrDestroyed$ = merge(this.options.changes, this._destroy$);
        merge(...this.options.map(option => option.visibleChange))
            .pipe(takeUntil(changedOrDestroyed$), debounceTime(10), map((event) => {
            const hasOption = this.options.find(option => {
                if (!option.hidden) {
                    return true;
                }
            });
            if (hasOption) {
                return false;
            }
            else {
                return true;
            }
        }))
            .subscribe((data) => {
            this._hidden = data;
        });
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
}
ThySelectOptionGroupComponent.ɵfac = function ThySelectOptionGroupComponent_Factory(t) { return new (t || ThySelectOptionGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ThySelectOptionGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySelectOptionGroupComponent, selectors: [["thy-option-group"]], contentQueries: function ThySelectOptionGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyOptionComponent, false);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);
    } }, hostVars: 6, hostBindings: function ThySelectOptionGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-option-item-group", ctx._isOptionGroup)("thy-select-option-group-hidden", ctx.hidden)("disabled", ctx.thyDisabled);
    } }, inputs: { thyDisabled: "thyDisabled", thyGroupLabel: "thyGroupLabel" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: THY_OPTION_GROUP_COMPONENT,
                useExisting: ThySelectOptionGroupComponent
            }
        ])], ngContentSelectors: _c2, decls: 3, vars: 1, consts: [[1, "group-name", "text-desc"]], template: function ThySelectOptionGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.thyGroupLabel);
    } }, encapsulation: 2 });
ThySelectOptionGroupComponent.ctorParameters = () => [
    { type: NgZone }
];
ThySelectOptionGroupComponent.propDecorators = {
    thyDisabled: [{ type: Input }, { type: HostBinding, args: [`class.disabled`,] }],
    _isOptionGroup: [{ type: HostBinding, args: ['class.thy-option-item-group',] }],
    hidden: [{ type: HostBinding, args: ['class.thy-select-option-group-hidden',] }],
    thyGroupLabel: [{ type: Input }],
    options: [{ type: ContentChildren, args: [ThyOptionComponent,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySelectOptionGroupComponent, [{
        type: Component,
        args: [{
                selector: 'thy-option-group',
                template: "<span class=\"group-name text-desc\">{{ thyGroupLabel }}</span>\n<ng-content></ng-content>\n",
                providers: [
                    {
                        provide: THY_OPTION_GROUP_COMPONENT,
                        useExisting: ThySelectOptionGroupComponent
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, { _isOptionGroup: [{
            type: HostBinding,
            args: ['class.thy-option-item-group']
        }], hidden: [{
            type: HostBinding,
            args: ['class.thy-select-option-group-hidden']
        }], thyDisabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: [`class.disabled`]
        }], thyGroupLabel: [{
            type: Input
        }], options: [{
            type: ContentChildren,
            args: [ThyOptionComponent]
        }] }); })();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class ThyOptionModule {
}
ThyOptionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyOptionModule });
ThyOptionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyOptionModule_Factory(t) { return new (t || ThyOptionModule)(); }, imports: [[CommonModule, ThyIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyOptionModule, { declarations: function () { return [ThyListOptionComponent, ThyOptionGroupComponent, ThyOptionComponent, ThySelectOptionGroupComponent]; }, imports: function () { return [CommonModule, ThyIconModule]; }, exports: function () { return [ThyListOptionComponent, ThyOptionGroupComponent, ThyOptionComponent, ThySelectOptionGroupComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyOptionModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, ThyIconModule],
                exports: [ThyListOptionComponent, ThyOptionGroupComponent, ThyOptionComponent, ThySelectOptionGroupComponent],
                declarations: [ThyListOptionComponent, ThyOptionGroupComponent, ThyOptionComponent, ThySelectOptionGroupComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { SelectOptionBase, THY_LIST_OPTION_PARENT_COMPONENT, THY_OPTION_GROUP_COMPONENT, THY_OPTION_PARENT_COMPONENT, ThyAutofocusDirective, ThyContextMenuDirective, ThyCtrlEnterDirective, ThyDragDropDirective, ThyEnterDirective, ThyFormCheckBaseComponent, ThyListOptionComponent, ThyOptionComponent, ThyOptionGroupComponent, ThyOptionModule, ThyOptionSelectionChangeEvent, ThyOptionVisibleChangeEvent, ThyScrollDirective, ThySelectCommonModule, ThySelectControlComponent, ThySelectOptionGroupComponent, ThySharedModule, ThyShowDirective, ThyStopPropagationDirective, ThyTranscludeDirective, ɵ0 };

//# sourceMappingURL=ngx-tethys-shared.js.map
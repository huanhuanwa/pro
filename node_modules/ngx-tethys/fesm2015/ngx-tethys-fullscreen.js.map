{"version":3,"file":"ngx-tethys-fullscreen.js","sources":["../../src/fullscreen/fullscreen.config.ts","../../src/fullscreen/fullscreen-ref.ts","../../src/fullscreen/fullscreen.service.ts","../../src/fullscreen/fullscreen.component.ts","../../src/fullscreen/fullscreen.module.ts","../../src/fullscreen/ngx-tethys-fullscreen.ts"],"names":[],"mappings":"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","sourcesContent":["import { ElementRef } from '@angular/core';\n\nexport interface ThyFullscreenConfig {\n    /**\n     * immersive 模式使用了浏览器提供的全屏，整个窗体都全屏，emulated 模式为仿真的，只会在 body 区域全屏，默认 immersive\n     */\n    mode?: ThyFullscreenMode;\n    /**\n     * 需要全屏的目标元素，可以是选择器，可以是 HTML Element, 也可以是 Angular 的 ElementRef\n     */\n    target: string | Element | ElementRef;\n    /**\n     * 目标元素已经打开全屏的样式\n     */\n    targetLaunchededClasse?: string;\n    /**\n     * emulated 模式下的目标元素全屏的容器，默认是 body\n     */\n    emulatedContainer?: string | Element | ElementRef;\n}\n\nexport enum ThyFullscreenMode {\n    immersive = 'immersive',\n    emulated = 'emulated'\n}\n","import { coerceElement } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ElementRef, Inject } from '@angular/core';\nimport { fromEvent, merge, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyFullscreenConfig, ThyFullscreenMode } from './fullscreen.config';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\nexport class ThyFullscreenRef<TResult = unknown> {\n    fullscreenConfig: ThyFullscreenConfig;\n\n    private isFullscreen = false;\n\n    private ngUnsubscribe$ = new Subject();\n\n    private readonly _afterLaunched = new Subject<TResult>();\n\n    private readonly _afterExited = new Subject<TResult>();\n\n    constructor(@Inject(DOCUMENT) protected document: any) {}\n\n    private onFullscreenChange() {\n        const isFullScreen = this.isImmersiveFullscreen();\n        if (isFullScreen) {\n            this.launchNormalFullscreen();\n        } else {\n            this.exitNormalFullscreen();\n        }\n    }\n\n    private resetElement(element: string | Element | ElementRef) {\n        const targetType = typeof element;\n        if (targetType === 'string') {\n            return this.document.querySelector(`.${element}`);\n        } else {\n            return coerceElement(element);\n        }\n    }\n\n    private isImmersiveFullscreen() {\n        const doc = this.document;\n        return !!(doc['fullscreenElement'] || doc['mozFullScreenElement'] || doc['webkitFullscreenElement'] || doc['msFullscreenElement']);\n    }\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (event.keyCode === ESCAPE) {\n            if (this.isFullscreen && this.fullscreenConfig.mode === ThyFullscreenMode.emulated) {\n                this.exitNormalFullscreen();\n            }\n        }\n    }\n\n    private launchNormalFullscreen() {\n        const targetElement = this.resetElement(this.fullscreenConfig.target);\n        const classes = this.fullscreenConfig.targetLaunchededClasse;\n        const container = this.fullscreenConfig.emulatedContainer;\n        if (container) {\n            const containerElement = this.resetElement(container);\n            const containerClientRect = containerElement.getBoundingClientRect();\n            const targetClientRect = targetElement.getBoundingClientRect();\n            const distanceX = containerClientRect.left - targetClientRect.left;\n            const distanceY = containerClientRect.top - targetClientRect.top;\n            targetElement.style.transform = `translate(${distanceX}px, ${distanceY}px)`;\n            targetElement.style.width = `${containerClientRect.width}px`;\n            targetElement.style.height = `${containerClientRect.height}px`;\n        } else {\n            targetElement.classList.add('thy-fullscreen');\n        }\n        targetElement.classList.add('thy-fullscreen-active');\n        if (classes && classes.length) {\n            targetElement.classList.add(classes);\n        }\n        this.isFullscreen = true;\n        this._afterLaunched.next();\n    }\n\n    private exitNormalFullscreen() {\n        const targetElement = this.resetElement(this.fullscreenConfig.target);\n        const classes = this.fullscreenConfig.targetLaunchededClasse;\n        const container = this.fullscreenConfig.emulatedContainer;\n        if (container) {\n            targetElement.style.transform = ``;\n            targetElement.style.width = ``;\n            targetElement.style.height = ``;\n        } else {\n            targetElement.classList.remove('thy-fullscreen');\n        }\n        targetElement.classList.remove('thy-fullscreen-active');\n        if (classes && classes.length) {\n            targetElement.classList.remove(classes);\n        }\n\n        this.isFullscreen = false;\n        this._afterExited.next();\n\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n    protected launchImmersiveFullscreen() {\n        const docElement = this.document.documentElement;\n\n        if (docElement.requestFullscreen) {\n            docElement.requestFullscreen();\n        } else if (docElement['mozRequestFullScreen']) {\n            docElement['mozRequestFullScreen']();\n        } else if (docElement['webkitRequestFullscreen']) {\n            docElement['webkitRequestFullscreen']();\n        } else if (docElement['msRequestFullscreen']) {\n            docElement['msRequestFullscreen']();\n        }\n    }\n\n    protected exitImmersiveFullscreen() {\n        const doc = this.document;\n        if (doc['exitFullscreen']) {\n            doc['exitFullscreen']();\n        } else if (doc['mozCancelFullScreen']) {\n            doc['mozCancelFullScreen']();\n        } else if (doc['webkitExitFullscreen']) {\n            doc['webkitExitFullscreen']();\n        } else if (doc['msExitFullscreen']) {\n            doc['msExitFullscreen']();\n        }\n    }\n\n    launch() {\n        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {\n            merge(\n                fromEvent(this.document, 'fullscreenchange'),\n                fromEvent(this.document, 'MSFullscreenChange'),\n                fromEvent(this.document, 'webkitfullscreenchange')\n            )\n                .pipe(takeUntil(this.ngUnsubscribe$))\n                .subscribe(() => {\n                    this.onFullscreenChange();\n                });\n            this.launchImmersiveFullscreen();\n        } else {\n            fromEvent(this.document, 'keydown')\n                .pipe(takeUntil(this.ngUnsubscribe$))\n                .subscribe(event => {\n                    this.handleKeyDown(event as KeyboardEvent);\n                });\n            this.launchNormalFullscreen();\n        }\n    }\n\n    exit() {\n        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {\n            this.exitImmersiveFullscreen();\n        } else {\n            this.exitNormalFullscreen();\n        }\n    }\n\n    afterLaunched(): Observable<TResult> {\n        return this._afterLaunched.asObservable();\n    }\n\n    afterExited(): Observable<TResult> {\n        return this._afterExited.asObservable();\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { ThyFullscreenRef } from './fullscreen-ref';\nimport { ThyFullscreenConfig, ThyFullscreenMode } from './fullscreen.config';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyFullscreen {\n    constructor(@Inject(DOCUMENT) protected document: any) {}\n\n    private fullscreenRefs: ThyFullscreenRef[] = [];\n\n    /**\n     * 开始全屏\n     * @param config\n     */\n    launch<TResult = unknown>(config: ThyFullscreenConfig): ThyFullscreenRef<TResult> {\n        config.mode = config.mode || ThyFullscreenMode.immersive;\n        const fullscreenRef = new ThyFullscreenRef<TResult>(this.document);\n        fullscreenRef.fullscreenConfig = config;\n        fullscreenRef.launch();\n        this.fullscreenRefs.push(fullscreenRef);\n        fullscreenRef.afterExited().subscribe(() => {\n            const index = this.fullscreenRefs.indexOf(fullscreenRef);\n            if (index > -1) {\n                this.fullscreenRefs.splice(index, 1);\n            }\n        });\n\n        return fullscreenRef;\n    }\n\n    /**\n     * 退出最后一个 ThyFullscreenRef 的全屏\n     * @param config\n     */\n    exit() {\n        const lastFullscreenRef = this.fullscreenRefs[this.fullscreenRefs.length - 1];\n        lastFullscreenRef.exit();\n    }\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyFullscreenMode } from './fullscreen.config';\nimport { ThyFullscreen } from './fullscreen.service';\n@Component({\n    selector: 'thy-fullscreen, [thyFullscreen]',\n    templateUrl: './fullscreen.component.html'\n})\nexport class ThyFullscreenComponent implements OnInit, AfterViewInit, OnDestroy {\n    @Input() thyMode: ThyFullscreenMode = ThyFullscreenMode.immersive;\n\n    @Input() thyFullscreenClasses: string;\n\n    @Output() thyFullscreenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private ngUnsubscribe$ = new Subject();\n\n    constructor(private elementRef: ElementRef, private service: ThyFullscreen) {}\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');\n        if (btnLaunch) {\n            btnLaunch.addEventListener('click', this.handleFullscreen);\n        }\n    }\n\n    // 点击打开或关闭全屏\n    private handleFullscreen = () => {\n        const targetElement = this.elementRef.nativeElement.querySelector('[fullscreen-target]');\n        const containerElement = this.elementRef.nativeElement.querySelector('[fullscreen-container]');\n        const fullscreen = targetElement.classList.contains('thy-fullscreen-active');\n\n        if (fullscreen) {\n            this.service.exit();\n        } else {\n            const fullscreenRef = this.service.launch({\n                mode: this.thyMode,\n                target: targetElement,\n                targetLaunchededClasse: this.thyFullscreenClasses,\n                emulatedContainer: containerElement\n            });\n\n            this.thyFullscreenChange.emit(true);\n\n            fullscreenRef.afterExited().subscribe(() => {\n                this.thyFullscreenChange.emit(false);\n            });\n        }\n    };\n\n    ngOnDestroy() {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n\n        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');\n        if (btnLaunch) {\n            btnLaunch.removeEventListener('click', this.handleFullscreen);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyFullscreenComponent } from './fullscreen.component';\n@NgModule({\n    declarations: [ThyFullscreenComponent],\n    imports: [CommonModule],\n    exports: [ThyFullscreenComponent]\n})\nexport class ThyFullscreenModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
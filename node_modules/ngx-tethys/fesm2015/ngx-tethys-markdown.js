import { SecurityContext, Injectable, Directive, ElementRef, Input, HostBinding, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { mermaid, liteMarked, $, katex } from 'ngx-tethys/types';
import { coerceBooleanProperty } from 'ngx-tethys/util';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
class ThyMarkdownParserService {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    getEmojisRender() {
        return null;
    }
    setHighLightWords() {
        return [];
    }
    filterHTML(html) {
        return html;
    }
    sanitizeHTML(html) {
        return this.sanitizer.sanitize(SecurityContext.HTML, html);
    }
}
ThyMarkdownParserService.ɵfac = function ThyMarkdownParserService_Factory(t) { return new (t || ThyMarkdownParserService)(ɵngcc0.ɵɵinject(ɵngcc1.DomSanitizer)); };
ThyMarkdownParserService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyMarkdownParserService, factory: ThyMarkdownParserService.ɵfac });
ThyMarkdownParserService.ctorParameters = () => [
    { type: DomSanitizer }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownParserService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.DomSanitizer }]; }, null); })();

class ThyMarkdownParserDirective {
    constructor(elementRef, thyMarkdownParserService) {
        this.elementRef = elementRef;
        this.thyMarkdownParserService = thyMarkdownParserService;
        this.bypassSecurityTrustHtml = false;
        this.liteMarkedOptions = {
            gfm: true,
            tables: true,
            breaks: true,
            pedantic: false,
            sanitize: false,
            smartLists: true,
            smartypants: true,
            heading: true,
            link: true,
            list: true,
            wtlink: true,
            wthexcolor: true,
            wthexcolorRender: {
                className: 'msg-inline-color'
            },
            wtat: false,
            wthash: false,
            wtentity: true,
            wtentityRender: {
                className: 'slide-trigger'
            },
            wthashRender: {
                chlPrefix: '/messages/groups/'
            },
            wtexclamation: true,
            wtemoji: false,
            isParagraphDefault: true,
            isImageDefault: true,
            isBlockquoteDefault: true,
            isHrDefault: true,
            isStrongDefault: true,
            isEmDefault: true,
            isCodespanDefault: true,
            isCodeDefault: true,
            isDelDefault: true,
            isHtmlDefault: true,
            isTextEscape: true,
            isDef: true,
            isImgPreview: true
        };
    }
    set thyMarkdownParser(value) {
        if (value) {
            this.value = value;
            this.translateHTML();
        }
    }
    set thyBypassSecurityTrustHtml(value) {
        this.bypassSecurityTrustHtml = coerceBooleanProperty(value);
    }
    initGantt() {
        if (mermaid) {
            mermaid.parseError = function (err, hash) {
                mermaid.error = err;
            };
            mermaid.ganttConfig = {
                // Configuration for Gantt diagrams
                numberSectionStyles: 4,
                axisFormatter: [
                    [
                        '%I:%M',
                        function (d) {
                            // Within a day
                            return d.getHours();
                        }
                    ],
                    [
                        'w. %U',
                        function (d) {
                            // Monday a week
                            return d.getDay() === 1;
                        }
                    ],
                    [
                        '%a %d',
                        function (d) {
                            // Day within a week (not monday)
                            return d.getDay() && d.getDate() !== 1;
                        }
                    ],
                    [
                        '%b %d',
                        function (d) {
                            // within a month
                            return d.getDate() !== 1;
                        }
                    ],
                    [
                        '%m-%y',
                        function (d) {
                            // Month
                            return d.getMonth();
                        }
                    ]
                ]
            };
        }
    }
    initMarked() {
        // 设置marked
        const renderer = new liteMarked.Renderer();
        renderer.listitem = function (text) {
            if (!/^\[[ x]\]\s/.test(text)) {
                return liteMarked.Renderer.prototype.listitem(text);
            }
            // 任务列表
            const checkbox = $('<input type="checkbox" disabled/>');
            if (/^\[x\]\s/.test(text)) {
                // 完成的任务列表
                checkbox.attr('checked', true);
            }
            return $(liteMarked.Renderer.prototype.listitem(text.substring(3)))
                .addClass('task-list-item')
                .prepend(checkbox)[0].outerHTML;
        };
        renderer.codespan = function (text) {
            // inline code
            if (/^\$.+\$$/.test(text)) {
                // inline math
                const raw = /^\$(.+)\$$/.exec(text)[1];
                const line = raw
                    .replace(/&lt;/g, '<')
                    .replace(/&gt;/g, '>')
                    .replace(/&amp;/g, '&')
                    .replace(/&quot;/g, '"')
                    .replace(/&#39;/g, "'"); // unescape html characters
                try {
                    return katex.renderToString(line, { displayMode: false });
                }
                catch (err) {
                    return '<code>' + err + '</code>';
                }
            }
            return liteMarked.Renderer.prototype.codespan.apply(this, arguments);
        };
        renderer.code = function (code, language, escaped, line_number) {
            code = code.trim();
            const firstLine = code.split(/\n/)[0].trim();
            if (language === 'math') {
                // 数学公式
                let tex = '';
                code.split(/\n\n/).forEach(function (line) {
                    // 连续两个换行，则开始下一个公式
                    line = line.trim();
                    if (line.length > 0) {
                        try {
                            tex += katex.renderToString(line, { displayMode: true });
                        }
                        catch (err) {
                            tex += '<pre>' + err + '</pre>';
                        }
                    }
                });
                return '<div data-line="' + line_number + '">' + tex + '</div>';
            }
            else if (firstLine === 'gantt' || firstLine === 'sequenceDiagram' || firstLine.match(/^graph (?:TB|BT|RL|LR|TD);?$/)) {
                // mermaid
                if (firstLine === 'sequenceDiagram') {
                    code += '\n'; // 如果末尾没有空行，则语法错误
                }
                if (mermaid && mermaid.parse(code)) {
                    return '<div class="mermaid" data-line="' + line_number + '">' + code + '</div>';
                }
                else {
                    if (mermaid && mermaid.error) {
                        return '<pre data-line="' + line_number + '">' + mermaid.error + '</pre>';
                    }
                }
            }
            else {
                return liteMarked.Renderer.prototype.code.apply(this, arguments);
            }
        };
        renderer.html = function (html) {
            const result = liteMarked.Renderer.prototype.html.apply(this, arguments);
            const h = $(result.bold());
            return h.html();
        };
        renderer.paragraph = function (text) {
            const result = liteMarked.Renderer.prototype.paragraph.apply(this, arguments);
            const h = $(result.bold());
            return h.html();
        };
        liteMarked.setOptions(this.liteMarkedOptions);
    }
    initComponent() {
        // 初始化甘特图
        this.initGantt();
        // 初始解析器
        this.initMarked();
    }
    parseMarked(_value) {
        if (liteMarked && _value) {
            return liteMarked(_value);
        }
        else {
            return _value;
        }
    }
    parseMermaid() {
        if (mermaid) {
            mermaid.init();
        }
    }
    translateHTML() {
        this.initComponent();
        let _value = this.thyMarkdownParserService.filterHTML(this.value);
        _value = this.parseMarked(_value);
        if (!this.bypassSecurityTrustHtml) {
            _value = this.thyMarkdownParserService.sanitizeHTML(_value);
        }
        setTimeout(() => {
            this.parseMermaid();
        }, 100);
        this.elementRef.nativeElement.innerHTML = _value;
        $(this.elementRef.nativeElement)
            .find('a')
            .attr('target', function () {
            if (this.host !== location.host) {
                return '_blank';
            }
            else {
                let outer_path = [
                    'shared/',
                    'share/',
                    'club',
                    'videos',
                    'blog',
                    'plan',
                    'tour',
                    'mobile',
                    'security',
                    'uservoice',
                    'customers',
                    'press',
                    'help',
                    'guide',
                    'feedback',
                    'about',
                    'contact',
                    'privacy',
                    'terms'
                ].join(')|(/');
                outer_path = new RegExp('^(/' + outer_path + ')');
                if (outer_path.test(this.pathname)) {
                    return '_blank';
                }
            }
        });
    }
    ngOnInit() {
        const emojisRender = this.thyMarkdownParserService.getEmojisRender();
        if (emojisRender) {
            this.liteMarkedOptions.wtemoji = true;
            this.liteMarkedOptions.wtemojiRender = emojisRender;
        }
        this.translateHTML();
    }
}
ThyMarkdownParserDirective.ɵfac = function ThyMarkdownParserDirective_Factory(t) { return new (t || ThyMarkdownParserDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThyMarkdownParserService)); };
ThyMarkdownParserDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMarkdownParserDirective, selectors: [["", "thyMarkdownParser", ""]], inputs: { thyMarkdownParser: "thyMarkdownParser", thyBypassSecurityTrustHtml: "thyBypassSecurityTrustHtml" } });
ThyMarkdownParserDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyMarkdownParserService }
];
ThyMarkdownParserDirective.propDecorators = {
    thyMarkdownParser: [{ type: Input }],
    thyBypassSecurityTrustHtml: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownParserDirective, [{
        type: Directive,
        args: [{
                selector: '[thyMarkdownParser]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ThyMarkdownParserService }]; }, { thyMarkdownParser: [{
            type: Input
        }], thyBypassSecurityTrustHtml: [{
            type: Input
        }] }); })();

class ThyMarkdownPlanTextParserDirective {
    constructor(elementRef, thyMarkdownParserService) {
        this.elementRef = elementRef;
        this.thyMarkdownParserService = thyMarkdownParserService;
        this.value = '';
        this.prefix = '';
        this.liteMarkedOptions = {
            gfm: true,
            tables: false,
            breaks: true,
            pedantic: false,
            sanitize: false,
            smartLists: false,
            smartypants: false,
            heading: false,
            link: false,
            list: false,
            wtlink: true,
            wthexcolor: true,
            wthexcolorRender: {
                className: 'msg-inline-color'
            },
            wtat: true,
            wtatRender: {
                memberPrefix: this.prefix,
                className: 'slide-trigger'
            },
            wthash: true,
            wtentity: true,
            wtentityRender: {
                className: 'slide-trigger'
            },
            wthashRender: {
                chlPrefix: '/messages/groups/'
            },
            wtexclamation: true,
            wtemoji: false,
            isParagraphDefault: false,
            isImageDefault: false,
            isBlockquoteDefault: false,
            isHrDefault: false,
            isStrongDefault: false,
            isEmDefault: false,
            isCodespanDefault: false,
            isCodeDefault: false,
            isDelDefault: false,
            isHtmlDefault: false,
            isTextEscape: true
        };
        this.hasClass = true;
    }
    set thyMarkdownPlanText(value) {
        if (value) {
            this.value = value;
            this.translateHTML();
        }
    }
    translateHTML() {
        liteMarked.setOptions(this.liteMarkedOptions);
        let _value = liteMarked.toHTML(this.value, this.liteMarkedOptions.highLightWords);
        _value = this.thyMarkdownParserService.sanitizeHTML(_value);
        this.elementRef.nativeElement.innerHTML = _value;
    }
    ngOnInit() {
        const emojisRender = this.thyMarkdownParserService.getEmojisRender();
        if (emojisRender) {
            this.liteMarkedOptions.wtemoji = true;
            this.liteMarkedOptions.wtemojiRender = emojisRender;
        }
        const _highLightWords = this.thyMarkdownParserService.setHighLightWords();
        if (_highLightWords && _highLightWords instanceof Array) {
            this.liteMarkedOptions.highLightWords = _highLightWords;
        }
        this.translateHTML();
    }
}
ThyMarkdownPlanTextParserDirective.ɵfac = function ThyMarkdownPlanTextParserDirective_Factory(t) { return new (t || ThyMarkdownPlanTextParserDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThyMarkdownParserService)); };
ThyMarkdownPlanTextParserDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMarkdownPlanTextParserDirective, selectors: [["", "thyMarkdownPlanText", ""]], hostVars: 2, hostBindings: function ThyMarkdownPlanTextParserDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-markdown-plan-text", ctx.hasClass);
    } }, inputs: { thyMarkdownPlanText: "thyMarkdownPlanText" } });
ThyMarkdownPlanTextParserDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyMarkdownParserService }
];
ThyMarkdownPlanTextParserDirective.propDecorators = {
    thyMarkdownPlanText: [{ type: Input }],
    hasClass: [{ type: HostBinding, args: ['class.thy-markdown-plan-text',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownPlanTextParserDirective, [{
        type: Directive,
        args: [{
                selector: '[thyMarkdownPlanText]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ThyMarkdownParserService }]; }, { hasClass: [{
            type: HostBinding,
            args: ['class.thy-markdown-plan-text']
        }], thyMarkdownPlanText: [{
            type: Input
        }] }); })();

class ThyMarkdownModule {
}
ThyMarkdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyMarkdownModule });
ThyMarkdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyMarkdownModule_Factory(t) { return new (t || ThyMarkdownModule)(); }, providers: [ThyMarkdownParserService] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyMarkdownModule, { declarations: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective], exports: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownModule, [{
        type: NgModule,
        args: [{
                declarations: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective],
                exports: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective],
                providers: [ThyMarkdownParserService]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ThyMarkdownModule, ThyMarkdownParserDirective, ThyMarkdownParserService, ThyMarkdownPlanTextParserDirective };

//# sourceMappingURL=ngx-tethys-markdown.js.map
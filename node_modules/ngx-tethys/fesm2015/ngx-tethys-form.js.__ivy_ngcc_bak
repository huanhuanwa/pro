import { InjectionToken, Injectable, Optional, Inject, Directive, ElementRef, Renderer2, NgZone, Input, HostBinding, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChild, EventEmitter, Output, HostListener, forwardRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgForm, NG_ASYNC_VALIDATORS, Validators, NG_VALIDATORS, FormsModule } from '@angular/forms';
import { UpdateHostClassService, ThyTranslate, InputBoolean } from 'ngx-tethys/core';
import { helpers, keycodes, coerceBooleanProperty } from 'ngx-tethys/util';
import { ThyInputModule } from 'ngx-tethys/input';
import { __decorate, __metadata } from 'tslib';
import { of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { ThyAlertModule } from 'ngx-tethys/alert';
import { ThyIconModule } from 'ngx-tethys/icon';

const THY_VALIDATOR_CONFIG = new InjectionToken('VALIDATION_CONFIG');
const THY_FORM_CONFIG = new InjectionToken('THY_FORM_CONFIG');
const ɵ0 = { layout: 'horizontal', footerAlign: 'left' };
const THY_FORM_CONFIG_PROVIDER = {
    provide: THY_FORM_CONFIG,
    useValue: ɵ0
};

const ERROR_VALUE_REPLACE_REGEX = /\{(.+?)\}/g;
const INVALID_CLASS = 'is-invalid';
const INVALID_FEEDBACK_CLASS = 'invalid-feedback';
const defaultValidatorConfig = {
    showElementError: true,
    removeElementError: true,
    validationMessages: {}
};
const globalValidationMessages = {
    required: '该选项不能为空',
    maxlength: '该选项输入值长度不能大于{maxlength}',
    minlength: '该选项输入值长度不能小于{minlength}',
    thyUniqueCheck: '输入值已经存在，请重新输入',
    email: '输入邮件的格式不正确',
    confirm: '两次输入不一致',
    pattern: '该选项输入格式不正确',
    number: '必须输入数字',
    url: '输入URL格式不正确',
    max: '该选项输入值不能大于{max}',
    min: '该选项输入值不能小于{min}'
};
class ThyFormValidatorLoader {
    constructor(config) {
        this.config = Object.assign({}, defaultValidatorConfig, config);
    }
    getDefaultValidationMessage(key) {
        if (this.config.globalValidationMessages && this.config.globalValidationMessages[key]) {
            return this.config.globalValidationMessages[key];
        }
        else {
            return globalValidationMessages[key];
        }
    }
    get validationMessages() {
        return this.config.validationMessages;
    }
    getErrorMessage(name, key) {
        if (this.validationMessages[name] && this.validationMessages[name][key]) {
            return this.validationMessages[name][key];
        }
        else {
            return this.getDefaultValidationMessage(key);
        }
    }
    getErrorMessages(name, validationErrors) {
        const messages = [];
        for (const validationError in validationErrors) {
            if (validationErrors.hasOwnProperty(validationError)) {
                messages.push(this.getErrorMessage(name, validationError));
            }
        }
        return messages;
    }
    defaultShowError(element, errorMessages) {
        if (element && element.parentElement) {
            const documentFrag = document.createDocumentFragment();
            const divNode = document.createElement('DIV');
            const textNode = document.createTextNode(errorMessages[0]);
            divNode.appendChild(textNode);
            divNode.setAttribute('class', INVALID_FEEDBACK_CLASS);
            documentFrag.appendChild(divNode);
            element.parentElement.append(documentFrag);
        }
    }
    defaultRemoveError(element) {
        if (element && element.parentElement) {
            const invalidFeedback = element.parentElement.querySelector('.invalid-feedback');
            element.parentElement.removeChild(invalidFeedback);
        }
    }
    removeError(element) {
        element.classList.remove(INVALID_CLASS);
        if (helpers.isFunction(this.config.removeElementError)) {
            this.config.removeElementError(element);
        }
        else if (this.config.showElementError) {
            this.defaultRemoveError(element);
        }
        else {
            // do nothings
        }
    }
    showError(element, errorMessages) {
        element.classList.add(INVALID_CLASS);
        if (helpers.isFunction(this.config.showElementError)) {
            this.config.showElementError(element, errorMessages);
        }
        else if (this.config.showElementError) {
            this.defaultShowError(element, errorMessages);
        }
        else {
            // do nothings
        }
    }
    addValidationMessages(messages) {
        Object.assign(this.config.validationMessages, messages);
    }
    setGlobalValidationMessages(validationMessages) {
        this.config.globalValidationMessages = validationMessages;
    }
}
ThyFormValidatorLoader.decorators = [
    { type: Injectable }
];
ThyFormValidatorLoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_VALIDATOR_CONFIG,] }] }
];

class ThyFormValidatorService {
    constructor(thyFormValidateLoader) {
        this.thyFormValidateLoader = thyFormValidateLoader;
        this.errors = [];
        // 记录所有元素的验证信息
        this.validations = {};
    }
    _getElement(name) {
        const element = this._formElement[name];
        if (element) {
            return element;
        }
        else {
            return this._formElement.querySelector(`[name='${name}']`);
        }
    }
    _clearElementError(name) {
        if (this.validations[name] && this.validations[name].hasError) {
            this.validations[name].hasError = false;
            this.validations[name].errorMessages = [];
            this.thyFormValidateLoader.removeError(this._getElement(name));
        }
    }
    _tryGetValidation(name) {
        if (!this.validations[name]) {
            this._initializeFormControlValidation(name, this._ngForm.controls[name]);
        }
        return this.validations[name];
    }
    _addError(message) {
        this.errors.unshift(message);
    }
    _clearErrors() {
        this.errors = [];
    }
    _initializeFormControlValidation(name, control) {
        this.validations[name] = {
            hasError: false,
            errorMessages: []
        };
        control.valueChanges.subscribe(() => {
            this._clearElementError(name);
            this._clearErrors();
        });
    }
    _restFormControlValidation(name) {
        const validation = this.validations[name];
        if (validation) {
            validation.hasError = false;
            validation.errorMessages = [];
        }
    }
    _formatValidationMessage(name, message) {
        const control = this._ngForm.controls[name];
        if (control) {
            return message.replace(ERROR_VALUE_REPLACE_REGEX, (tag, key) => {
                if (key) {
                    return control.errors[key][key] || control.errors[key].requiredLength;
                }
            });
        }
        else {
            return message;
        }
    }
    _getValidationMessage(name, validationError) {
        let message = null;
        if (this._config &&
            this._config.validationMessages &&
            this._config.validationMessages[name] &&
            this._config.validationMessages[name][validationError]) {
            message = this._config.validationMessages[name][validationError];
        }
        else {
            message = this.thyFormValidateLoader.getErrorMessage(name, validationError);
        }
        return this._formatValidationMessage(name, message);
    }
    _getValidationMessages(name, validationErrors) {
        const messages = [];
        for (const validationError in validationErrors) {
            if (validationErrors.hasOwnProperty(validationError)) {
                messages.push(this._getValidationMessage(name, validationError));
            }
        }
        return messages;
    }
    _setControlValidationError(name, errorMessages) {
        const validation = this._tryGetValidation(name);
        validation.errorMessages = errorMessages;
        validation.hasError = true;
        this.thyFormValidateLoader.showError(this._getElement(name), errorMessages);
    }
    initialize(ngForm, formElement) {
        this._ngForm = ngForm;
        this._formElement = formElement;
    }
    setValidatorConfig(config) {
        this._config = config;
    }
    validateControl(name) {
        this._clearElementError(name);
        const control = this._ngForm.controls[name];
        if (control && control.invalid) {
            const errorMessages = this._getValidationMessages(name, control.errors);
            this._setControlValidationError(name, errorMessages);
        }
    }
    validateControls() {
        // 主要是 无法检测到 ngForm 的 controls 的变化，或者是我没有找到
        // 验证的时候循环 ngForm 的 controls 验证
        // 发现没有 validation 初始化一个，已经存在不会重新初始化，保存缓存数据
        for (const name in this._ngForm.controls) {
            if (this._ngForm.controls.hasOwnProperty(name)) {
                this._tryGetValidation(name);
                this.validateControl(name);
            }
        }
        // 移除已经不存在的 validation
        const names = Object.keys(this.validations);
        names.forEach(name => {
            if (!this._ngForm.controls[name]) {
                delete this.validations[name];
            }
        });
    }
    addError(message) {
        this._addError(message);
    }
    validate($event) {
        this._ngForm.onSubmit($event);
        this.validateControls();
        return this._ngForm.valid;
    }
    reset() {
        this._ngForm.reset();
        for (const name in this.validations) {
            if (this.validations.hasOwnProperty(name)) {
                this._restFormControlValidation(name);
                this._clearElementError(name);
            }
        }
    }
    setElementErrorMessage(name, message) {
        this._clearElementError(name);
        this._setControlValidationError(name, [message]);
    }
}
ThyFormValidatorService.decorators = [
    { type: Injectable }
];
ThyFormValidatorService.ctorParameters = () => [
    { type: ThyFormValidatorLoader }
];

// 1. submit 按 Enter 键提交, Textare或包含[contenteditable]属性的元素 除外，需要按 Ctrl | Command + Enter 提交
// 2. alwaysSubmit 不管是哪个元素 按 Enter 键都提交
// 3. forbidSubmit Enter 键禁止提交
// 默认 submit
var ThyEnterKeyMode;
(function (ThyEnterKeyMode) {
    ThyEnterKeyMode["submit"] = "submit";
    ThyEnterKeyMode["alwaysSubmit"] = "alwaysSubmit";
    ThyEnterKeyMode["forbidSubmit"] = "forbidSubmit";
})(ThyEnterKeyMode || (ThyEnterKeyMode = {}));
class ThyFormDirective {
    constructor(ngForm, elementRef, renderer, ngZone, updateHostClassService, validator, config) {
        this.ngForm = ngForm;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.updateHostClassService = updateHostClassService;
        this.validator = validator;
        this.config = config;
        this.initialized = false;
        this.wasValidated = false;
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this.layout = this.config.layout;
    }
    set thyLayout(value) {
        if (value) {
            this.layout = value;
            if (this.initialized) {
                this.updateClasses();
            }
        }
    }
    get thyLayout() {
        return this.layout;
    }
    get isHorizontal() {
        return this.layout === 'horizontal';
    }
    set thyFormValidatorConfig(config) {
        this.validator.setValidatorConfig(config);
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this._unsubscribe = this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.onKeydown.bind(this));
        });
        this.updateClasses();
        this.initialized = true;
        this.validator.initialize(this.ngForm, this.elementRef.nativeElement);
    }
    submit($event) {
        if (this.validator.validate($event)) {
            this.onSubmitSuccess($event);
        }
        else {
            // this.wasValidated = true;
        }
    }
    updateClasses() {
        this.updateHostClassService.updateClassByMap({
            [`thy-form-${this.thyLayout}`]: true
        });
    }
    submitRunInZone($event) {
        this.ngZone.run(() => {
            this.submit($event);
        });
    }
    onKeydown($event) {
        const currentInput = document.activeElement;
        const key = $event.which || $event.keyCode;
        if (key === keycodes.ENTER && currentInput.tagName) {
            if (!this.thyEnterKeyMode || this.thyEnterKeyMode === ThyEnterKeyMode.submit) {
                // TEXTAREA或包含[contenteditable]属性的元素 Ctrl + Enter 或者 Command + Enter 阻止默认行为并提交
                if (currentInput.tagName === 'TEXTAREA' || coerceBooleanProperty(currentInput.getAttribute('contenteditable'))) {
                    if ($event.ctrlKey || $event.metaKey) {
                        $event.preventDefault();
                        this.submitRunInZone($event);
                    }
                }
                else {
                    // 不是 TEXTAREA Enter 阻止默认行为并提交
                    $event.preventDefault();
                    this.submitRunInZone($event);
                }
            }
            else if (this.thyEnterKeyMode === ThyEnterKeyMode.alwaysSubmit) {
                $event.preventDefault();
                this.submitRunInZone($event);
            }
            else {
                // do nothing
            }
        }
    }
    ngOnDestroy() {
        if (this._unsubscribe) {
            this._unsubscribe();
            this._unsubscribe = null;
        }
    }
}
ThyFormDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyForm],[thy-form]',
                providers: [UpdateHostClassService, ThyFormValidatorService],
                exportAs: 'thyForm',
                host: {
                    class: 'thy-form'
                }
            },] }
];
ThyFormDirective.ctorParameters = () => [
    { type: NgForm },
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: UpdateHostClassService },
    { type: ThyFormValidatorService },
    { type: undefined, decorators: [{ type: Inject, args: [THY_FORM_CONFIG,] }] }
];
ThyFormDirective.propDecorators = {
    thyLayout: [{ type: Input }],
    thyEnterKeyMode: [{ type: Input }],
    thyFormValidatorConfig: [{ type: Input }],
    wasValidated: [{ type: HostBinding, args: ['class.was-validated',] }]
};

const internalIconMap = {
    date: 'wtf wtf-schedule-o'
};
class ThyFormGroupComponent {
    constructor(thyParentForm, thyTranslate) {
        this.thyParentForm = thyParentForm;
        this.thyTranslate = thyTranslate;
        this.labelRequired = false;
        this.labelPaddingTopClear = false;
        this._rowFill = false;
        this._isFormGroup = true;
        this.isHorizontal = true;
        this.hasFeedback = false;
    }
    set thyLabelText(value) {
        this.labelText = value;
    }
    set thyLabelTextTranslateKey(value) {
        if (value) {
            this.labelText = this.thyTranslate.instant(value);
        }
        else {
            this.labelText = '';
        }
    }
    set thyLabelRequired(value) {
        this.labelRequired = coerceBooleanProperty(value);
    }
    set thyLabelPaddingTopClear(value) {
        this.labelPaddingTopClear = coerceBooleanProperty(value);
    }
    set thyFeedbackIcon(value) {
        this.hasFeedback = true;
        if (internalIconMap[value]) {
            this.feedbackIcon = internalIconMap[value];
            this.feedbackSvgIconName = null;
        }
        else {
            this.feedbackSvgIconName = value;
            this.feedbackIcon = null;
        }
    }
    set thyTips(value) {
        this.tips = value;
    }
    set thyTipsTranslateKey(value) {
        this.tips = this.thyTranslate.instant(value);
    }
    set thyRowFill(value) {
        this._rowFill = coerceBooleanProperty(value);
    }
    ngOnInit() {
        this.isHorizontal = this.thyParentForm ? this.thyParentForm.isHorizontal : true;
    }
}
ThyFormGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-form-group',
                template: "<ng-container *ngIf=\"contentTemplateRef; else defaultTpl\">\n  <ng-container [ngTemplateOutlet]=\"contentTemplateRef\"></ng-container>\n  <ng-container *ngIf=\"feedbackSvgIconName; else iconFont\">\n    <thy-icon class=\"form-control-feedback\" [thyIconName]=\"feedbackSvgIconName\"></thy-icon>\n  </ng-container>\n</ng-container>\n<ng-template #defaultTpl>\n  <label\n    *ngIf=\"!(!isHorizontal && !labelText)\"\n    class=\"form-label \"\n    [ngClass]=\"{\n      'col-sm-2 col-form-label': isHorizontal,\n      'label-required': labelRequired,\n      'pt-0': labelPaddingTopClear\n    }\"\n    >{{ labelText }}</label\n  >\n  <div [ngClass]=\"{ 'col-sm-10 col-form-control': isHorizontal, 'position-relative': !isHorizontal }\">\n    <ng-content></ng-content>\n    <ng-container *ngIf=\"feedbackSvgIconName; else iconFont\">\n      <thy-icon class=\"form-control-feedback\" [thyIconName]=\"feedbackSvgIconName\"></thy-icon>\n    </ng-container>\n    <span *ngIf=\"tips\" class=\"form-text text-desc\">{{ tips }}</span>\n  </div>\n</ng-template>\n\n<ng-template #iconFont>\n  <span *ngIf=\"feedbackIcon\" class=\"form-control-feedback {{ feedbackIcon }}\"></span>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyFormGroupComponent.ctorParameters = () => [
    { type: ThyFormDirective, decorators: [{ type: Optional }] },
    { type: ThyTranslate }
];
ThyFormGroupComponent.propDecorators = {
    _rowFill: [{ type: HostBinding, args: ['class.row-fill',] }],
    _isFormGroup: [{ type: HostBinding, args: ['class.form-group',] }],
    isHorizontal: [{ type: HostBinding, args: ['class.row',] }],
    hasFeedback: [{ type: HostBinding, args: ['class.has-feedback',] }],
    thyLabelText: [{ type: Input }],
    thyLabelTextTranslateKey: [{ type: Input }],
    thyLabelRequired: [{ type: Input }],
    thyLabelPaddingTopClear: [{ type: Input }],
    thyFeedbackIcon: [{ type: Input }],
    thyTips: [{ type: Input }],
    thyTipsTranslateKey: [{ type: Input }],
    thyRowFill: [{ type: Input }],
    contentTemplateRef: [{ type: ContentChild, args: ['formGroup',] }]
};

class ThyFormGroupLabelDirective {
    constructor(thyTranslate) {
        this.thyTranslate = thyTranslate;
        this.labelRequired = false;
        this._isFormGroupLabel = true;
    }
    set thyLabelText(value) {
        this.labelText = value;
    }
    set thyLabelTranslateKey(translateKey) {
        if (translateKey) {
            this.labelText = this.thyTranslate.instant(translateKey);
        }
    }
    set thyLabelRequired(value) {
        this.labelRequired = coerceBooleanProperty(value);
    }
}
ThyFormGroupLabelDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyFormGroupLabel]'
            },] }
];
ThyFormGroupLabelDirective.ctorParameters = () => [
    { type: ThyTranslate }
];
ThyFormGroupLabelDirective.propDecorators = {
    labelRequired: [{ type: HostBinding, args: ['class.label-required',] }],
    _isFormGroupLabel: [{ type: HostBinding, args: ['class.col-form-label',] }],
    thyLabelText: [{ type: Input }],
    thyLabelTranslateKey: [{ type: Input }],
    thyLabelRequired: [{ type: Input }]
};

class ThyFormSubmitDirective {
    constructor(ngForm, thyFormDirective) {
        this.ngForm = ngForm;
        this.thyFormDirective = thyFormDirective;
        this.thyFormSubmit = new EventEmitter();
    }
    ngOnInit() {
        this.thyFormDirective.onSubmitSuccess = ($event) => {
            this.thyFormSubmit.emit($event);
        };
    }
    onSubmit($event) {
        this.thyFormDirective.submit($event);
    }
}
ThyFormSubmitDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyFormSubmit],[thy-form-submit]'
            },] }
];
ThyFormSubmitDirective.ctorParameters = () => [
    { type: NgForm },
    { type: ThyFormDirective }
];
ThyFormSubmitDirective.propDecorators = {
    thyFormSubmit: [{ type: Output }],
    onSubmit: [{ type: HostListener, args: ['click', ['$event'],] }]
};

class ThyFormGroupFooterComponent {
    constructor(thyParentForm, defaultConfig) {
        this.thyParentForm = thyParentForm;
        this.defaultConfig = defaultConfig;
        this._isFormGroup = true;
        this.isHorizontal = true;
        this.footerClassMap = {};
    }
    get align() {
        return !!this.thyAlign ? this.thyAlign : this.defaultConfig.footerAlign;
    }
    ngOnInit() {
        if (this.thyParentForm) {
            this.isHorizontal = this.thyParentForm.isHorizontal;
        }
        this.setFooterClassMap();
    }
    setFooterClassMap() {
        this.footerClassMap = {
            'form-group-footer': true,
            'col-sm-10 offset-sm-2 col-form-control': this.isHorizontal,
            [`form-group-footer-align-${this.align}`]: true
        };
    }
}
ThyFormGroupFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-form-group-footer',
                template: "<div [ngClass]=\"footerClassMap\">\n  <div class=\"btn-pair form-footer-actions\">\n    <ng-content></ng-content>\n  </div>\n\n  <div class=\"form-footer-description\" *ngIf=\"description\">\n    <ng-container [ngTemplateOutlet]=\"description\"></ng-container>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyFormGroupFooterComponent.ctorParameters = () => [
    { type: ThyFormDirective, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [THY_FORM_CONFIG,] }] }
];
ThyFormGroupFooterComponent.propDecorators = {
    _isFormGroup: [{ type: HostBinding, args: ['class.form-group',] }],
    isHorizontal: [{ type: HostBinding, args: ['class.row',] }],
    description: [{ type: ContentChild, args: ['description',] }],
    thyAlign: [{ type: Input }]
};

class ThyFormGroupErrorComponent {
    constructor(thyParentForm) {
        this.thyParentForm = thyParentForm;
        this.thyShowFirst = true;
        this.isHorizontal = true;
    }
    set thyErrors(errors) {
        this.errors = errors;
    }
    get thyErrors() {
        const errors = this.errors || this.thyParentForm.validator.errors;
        return errors && errors.length > 0 && this.thyShowFirst ? [errors[0]] : errors;
    }
    get _isFormGroup() {
        return this.thyErrors && this.thyErrors.length > 0;
    }
    ngOnInit() {
        if (this.thyParentForm) {
            this.isHorizontal = this.thyParentForm.isHorizontal;
        }
    }
}
ThyFormGroupErrorComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-form-group-error',
                template: "<div [ngClass]=\"{ 'col-sm-10 offset-sm-2 col-form-control': isHorizontal }\">\n  <thy-alert *ngFor=\"let error of thyErrors\" thyType=\"danger\" [thyMessage]=\"error\"></thy-alert>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyFormGroupErrorComponent.ctorParameters = () => [
    { type: ThyFormDirective, decorators: [{ type: Optional }] }
];
ThyFormGroupErrorComponent.propDecorators = {
    thyShowFirst: [{ type: Input }],
    thyErrors: [{ type: Input }],
    _isFormGroup: [{ type: HostBinding, args: ['class.form-group',] }],
    isHorizontal: [{ type: HostBinding, args: ['class.row',] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThyFormGroupErrorComponent.prototype, "thyShowFirst", void 0);

class ThyUniqueCheckValidator {
    constructor(elementRef, thyForm) {
        this.elementRef = elementRef;
        this.thyForm = thyForm;
    }
    validate(ctrl) {
        return this.thyUniqueCheck(ctrl.value).pipe(map((failed) => {
            setTimeout(() => {
                if (failed && this.thyForm && this.elementRef.nativeElement.name) {
                    this.thyForm.validator.validateControl(this.elementRef.nativeElement.name);
                }
            });
            return failed ? { thyUniqueCheck: failed } : null;
        }), catchError(() => of(null)));
    }
}
ThyUniqueCheckValidator.decorators = [
    { type: Directive, args: [{
                selector: '[thyUniqueCheck]',
                providers: [
                    {
                        provide: NG_ASYNC_VALIDATORS,
                        useExisting: ThyUniqueCheckValidator,
                        multi: true
                    }
                ]
            },] }
];
ThyUniqueCheckValidator.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyFormDirective, decorators: [{ type: Optional }] }
];
ThyUniqueCheckValidator.propDecorators = {
    thyUniqueCheck: [{ type: Input }]
};

class ThyMinDirective {
    set min(value) {
        this._validator = Validators.min(parseFloat(value));
    }
    validate(control) {
        return this._validator(control);
    }
}
ThyMinDirective.decorators = [
    { type: Directive, args: [{
                selector: '[min][formControlName],[min][formControl],[min][ngModel]',
                providers: [
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => ThyMinDirective),
                        multi: true
                    }
                ]
            },] }
];
ThyMinDirective.propDecorators = {
    min: [{ type: Input }]
};

class ThyMaxDirective {
    set max(value) {
        this._validator = Validators.max(parseFloat(value));
    }
    validate(control) {
        return this._validator(control);
    }
}
ThyMaxDirective.decorators = [
    { type: Directive, args: [{
                selector: '[max][formControlName],[max][formControl],[max][ngModel]',
                providers: [
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => ThyMaxDirective),
                        multi: true
                    }
                ]
            },] }
];
ThyMaxDirective.propDecorators = {
    max: [{ type: Input }]
};

function confirmValidator(value) {
    return (control) => {
        const isEqual = value === control.value;
        return !isEqual ? { confirm: { value: value, actual: control.value } } : null;
    };
}
class ThyConfirmValidatorDirective {
    validate(control) {
        return confirmValidator(this.confirm)(control);
    }
}
ThyConfirmValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[confirm]',
                providers: [{ provide: NG_VALIDATORS, useExisting: ThyConfirmValidatorDirective, multi: true }]
            },] }
];
ThyConfirmValidatorDirective.propDecorators = {
    confirm: [{ type: Input }]
};

class ThyFormModule {
    static forRoot(config) {
        return {
            ngModule: ThyFormModule,
            providers: [
                {
                    provide: THY_VALIDATOR_CONFIG,
                    useValue: config
                }
            ]
        };
    }
}
ThyFormModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, ThyInputModule, ThyAlertModule, ThyIconModule],
                declarations: [
                    ThyFormDirective,
                    ThyFormGroupComponent,
                    ThyFormGroupLabelDirective,
                    ThyFormSubmitDirective,
                    ThyFormGroupFooterComponent,
                    ThyUniqueCheckValidator,
                    ThyFormGroupErrorComponent,
                    ThyMinDirective,
                    ThyMaxDirective,
                    ThyConfirmValidatorDirective
                ],
                exports: [
                    ThyFormDirective,
                    ThyFormGroupComponent,
                    ThyFormGroupLabelDirective,
                    ThyFormSubmitDirective,
                    ThyFormGroupFooterComponent,
                    ThyUniqueCheckValidator,
                    ThyFormGroupErrorComponent,
                    ThyMinDirective,
                    ThyMaxDirective,
                    ThyConfirmValidatorDirective
                ],
                providers: [ThyFormValidatorLoader, THY_FORM_CONFIG_PROVIDER]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ERROR_VALUE_REPLACE_REGEX, THY_FORM_CONFIG, THY_FORM_CONFIG_PROVIDER, THY_VALIDATOR_CONFIG, ThyConfirmValidatorDirective, ThyEnterKeyMode, ThyFormDirective, ThyFormGroupComponent, ThyFormGroupErrorComponent, ThyFormGroupFooterComponent, ThyFormGroupLabelDirective, ThyFormModule, ThyFormSubmitDirective, ThyFormValidatorLoader, ThyFormValidatorService, ThyMaxDirective, ThyMinDirective, ThyUniqueCheckValidator, confirmValidator, ɵ0 };
//# sourceMappingURL=ngx-tethys-form.js.map

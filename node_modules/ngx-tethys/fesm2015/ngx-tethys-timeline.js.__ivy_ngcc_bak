import { Injectable, Component, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, HostBinding, Input, ContentChild, ViewEncapsulation, ContentChildren, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyIconModule } from 'ngx-tethys/icon';
import { takeUntil } from 'rxjs/operators';
import { ReplaySubject, Subject } from 'rxjs';

class ThyTimelineService {
    constructor() {
        this.check$ = new ReplaySubject(1);
    }
    markForCheck() {
        this.check$.next();
    }
}
ThyTimelineService.decorators = [
    { type: Injectable }
];

class ThyTimelineItemComponent {
    constructor(cdr, timelineService) {
        this.cdr = cdr;
        this.timelineService = timelineService;
        this.color = 'primary';
        this.isLast = false;
        this.isFirst = false;
        this.reverse = false;
    }
    set thyColor(value) {
        if (value) {
            this.color = value;
        }
    }
    detectChanges() {
        this.cdr.detectChanges();
    }
    ngOnChanges(changes) {
        this.timelineService.markForCheck();
    }
    ngOnInit() { }
}
ThyTimelineItemComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'thy-timeline-item',
                template: "<ng-template #timelineItem>\n  <div\n    class=\"thy-timeline-item\"\n    [class.thy-timeline-item-reverse-last]=\"isLast && reverse\"\n    [class.thy-timeline-item-last]=\"isLast\"\n    [class.thy-timeline-item-reverse-first]=\"isFirst && reverse\"\n    [class.thy-timeline-item-right]=\"(thyPosition || position) === 'right'\"\n    [class.thy-timeline-item-left]=\"(thyPosition || position) === 'left'\"\n  >\n    <div class=\"thy-timeline-item-tail\"></div>\n    <div\n      class=\"thy-timeline-item-dot\"\n      [class.thy-timeline-item-dot-primary]=\"color === 'primary'\"\n      [class.thy-timeline-item-dot-success]=\"color === 'success'\"\n      [class.thy-timeline-item-dot-warning]=\"color === 'warning'\"\n      [class.thy-timeline-item-dot-danger]=\"color === 'danger'\"\n      [class.thy-timeline-item-dot-info]=\"color === 'info'\"\n      [class.thy-timeline-item-dot-custom]=\"!!dot\"\n    >\n      <ng-template *ngIf=\"dot\" [ngTemplateOutlet]=\"dot\"></ng-template>\n    </div>\n    <div class=\"thy-timeline-item-content\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"thy-timeline-item-content-other-side\">\n      <ng-template *ngIf=\"description\" [ngTemplateOutlet]=\"description\"></ng-template>\n    </div>\n  </div>\n</ng-template>\n",
                exportAs: 'ThyTimelineItem'
            },] }
];
ThyTimelineItemComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ThyTimelineService }
];
ThyTimelineItemComponent.propDecorators = {
    template: [{ type: ViewChild, args: ['timelineItem', { static: false },] }],
    className: [{ type: HostBinding, args: ['class',] }],
    thyColor: [{ type: Input }],
    thyPosition: [{ type: Input }],
    dot: [{ type: ContentChild, args: ['dot', { static: false },] }],
    description: [{ type: ContentChild, args: ['description', { static: false },] }]
};

var ThyTimeModes;
(function (ThyTimeModes) {
    ThyTimeModes["left"] = "left";
    ThyTimeModes["right"] = "right";
    ThyTimeModes["center"] = "center";
})(ThyTimeModes || (ThyTimeModes = {}));
class ThyTimelineComponent {
    constructor(cdr, timelineService) {
        this.cdr = cdr;
        this.timelineService = timelineService;
        this.thyDirection = 'vertical';
        this.timelineItems = [];
        this.destroy$ = new Subject();
        this.isTimeline = true;
        this.rightTimeline = false;
        this.centerTimeline = false;
        this.templateTimeline = false;
        this.horizontal = false;
    }
    ngOnChanges(changes) {
        const { thyMode, thyReverse } = changes;
        if (thyMode && !this.horizontal) {
            if (thyMode.currentValue === 'right') {
                this.rightTimeline = !this.templateTimeline;
                this.centerTimeline = false;
            }
            else if (thyMode.currentValue === 'center') {
                this.centerTimeline = true;
                this.rightTimeline = false;
            }
            else {
                this.rightTimeline = false;
                this.centerTimeline = false;
            }
        }
        if ((simpleChangeActivated(thyMode) && !this.horizontal) || simpleChangeActivated(thyReverse)) {
            this.updateChildren();
        }
    }
    ngOnInit() {
        this.horizontal = this.thyDirection === 'horizontal' ? true : false;
        this.timelineService.check$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.cdr.markForCheck();
        });
    }
    ngAfterContentInit() {
        this.updateChildren();
        this.listOfItems.changes.subscribe(() => {
            this.updateChildren();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    updateChildren() {
        if (this.listOfItems && this.listOfItems.length) {
            const length = this.listOfItems.length;
            this.listOfItems.forEach((item, index) => {
                item.isLast = !this.thyReverse ? index === length - 1 : index === 0;
                item.isFirst = this.thyReverse ? index === length - 1 : index === 0;
                item.reverse = this.thyReverse;
                if (!this.horizontal) {
                    item.position = getTimelineItemPosition(index, this.thyMode);
                }
                if (item.description || (item.thyPosition && !this.horizontal)) {
                    this.templateTimeline = true;
                }
                item.detectChanges();
            });
            this.timelineItems = this.thyReverse ? this.listOfItems.toArray().reverse() : this.listOfItems.toArray();
        }
        this.cdr.markForCheck();
    }
}
ThyTimelineComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'thy-timeline',
                providers: [ThyTimelineService],
                template: `
        <ng-container>
            <ng-container *ngFor="let item of timelineItems">
                <ng-template [ngTemplateOutlet]="item.template"></ng-template>
            </ng-container>
            <ng-content></ng-content>
        </ng-container>
    `
            },] }
];
ThyTimelineComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ThyTimelineService }
];
ThyTimelineComponent.propDecorators = {
    thyReverse: [{ type: Input }],
    thyMode: [{ type: Input }],
    thyDirection: [{ type: Input }],
    isTimeline: [{ type: HostBinding, args: [`class.thy-timeline`,] }],
    rightTimeline: [{ type: HostBinding, args: [`class.thy-timeline-right`,] }],
    centerTimeline: [{ type: HostBinding, args: [`class.thy-timeline-center`,] }],
    templateTimeline: [{ type: HostBinding, args: [`class.thy-timeline-template`,] }],
    horizontal: [{ type: HostBinding, args: [`class.thy-timeline-horizontal`,] }],
    listOfItems: [{ type: ContentChildren, args: [ThyTimelineItemComponent,] }]
};
function simpleChangeActivated(simpleChange) {
    return !!(simpleChange && (simpleChange.previousValue !== simpleChange.currentValue || simpleChange.isFirstChange()));
}
function getTimelineItemPosition(index, mode) {
    return mode === 'left' ? 'left' : mode === 'right' ? 'right' : mode === 'center' && index % 2 === 0 ? 'left' : 'right';
}

class ThyTimelineModule {
}
ThyTimelineModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ThyTimelineComponent, ThyTimelineItemComponent],
                entryComponents: [],
                imports: [CommonModule, ThySharedModule, ThyIconModule],
                exports: [ThyTimelineComponent, ThyTimelineItemComponent],
                providers: []
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyTimeModes, ThyTimelineComponent, ThyTimelineItemComponent, ThyTimelineModule, ThyTimelineService };
//# sourceMappingURL=ngx-tethys-timeline.js.map

import { Component, HostBinding, EventEmitter, ViewChild, Input, Output, ElementRef, Renderer2, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { ThyPopover, ThyPopoverModule } from 'ngx-tethys/popover';
import { ThyIconModule } from 'ngx-tethys/icon';

class ThyMenuComponent {
    constructor() {
        this.isThyMenu = true;
    }
    ngOnInit() { }
}
ThyMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-menu,[thy-menu],[thyMenu]',
                template: "<ng-content></ng-content>"
            },] }
];
ThyMenuComponent.ctorParameters = () => [];
ThyMenuComponent.propDecorators = {
    isThyMenu: [{ type: HostBinding, args: ['class.thy-menu',] }]
};

class ThyMenuItemComponent {
    constructor() {
        this.isThyMenuItem = true;
    }
    ngOnInit() { }
}
ThyMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-menu-item,[thy-menu-item],[thyMenuItem]',
                template: "<div class=\"thy-menu-item-content\">\n  <ng-content></ng-content>\n</div>\n"
            },] }
];
ThyMenuItemComponent.ctorParameters = () => [];
ThyMenuItemComponent.propDecorators = {
    isThyMenuItem: [{ type: HostBinding, args: ['class.thy-menu-item',] }]
};

class ThyMenuGroupComponent {
    constructor(popover) {
        this.popover = popover;
        this.rightIconClass = 'more';
        this.iconClass = 'folder-bold';
        this.groupHeaderPaddingLeft = 0;
        this.isThyMenuGroup = true;
        this.showIcon = false;
        this.isCollapsed = true;
        this.thyTitle = '';
        this.thyShowAction = false;
        this.thyActionStopPropagation = true;
        this.thyOnActionClick = new EventEmitter();
    }
    set thyExpand(value) {
        this.isCollapsed = !!!value;
    }
    set thyShowIcon(value) {
        this.showIcon = value;
    }
    set thyIcon(value) {
        this.iconClass = value;
    }
    set thyActionIcon(value) {
        this.rightIconClass = value;
    }
    set thyActionMenu(value) {
        this._actionMenu = value;
    }
    ngOnInit() { }
    collapseGroup() {
        this.isCollapsed = !this.isCollapsed;
    }
    onActionClick(event) {
        if (this.thyActionStopPropagation) {
            event.stopPropagation();
        }
        if (this._actionMenu) {
            this.popover.open(this._actionMenu, {
                origin: event.currentTarget,
                insideClosable: true,
                placement: 'bottom'
            });
        }
        else {
            this.thyOnActionClick.emit(event);
        }
    }
}
ThyMenuGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-menu-group, [thy-menu-group],[thyMenuGroup]',
                template: "<div class=\"thy-menu-group-header\" (click)=\"collapseGroup()\">\n  <thy-icon thyIconName=\"caret-right-down\" class=\"thy-menu-group-arrow\"></thy-icon>\n  <thy-icon *ngIf=\"showIcon\" class=\"thy-menu-group-folder\" [thyIconName]=\"iconClass\"></thy-icon>\n  <span class=\"thy-menu-group-title\" [title]=\"thyTitle\">{{ thyTitle }}</span>\n  <thy-icon\n    *ngIf=\"thyShowAction\"\n    class=\"thy-menu-group-more\"\n    [thyIconName]=\"rightIconClass\"\n    (click)=\"onActionClick($event)\"\n  ></thy-icon>\n</div>\n<div class=\"thy-menu-group-body\" #thyMenuGroup [@detailsContentAnimation]=\"isCollapsed\">\n  <ng-content></ng-content>\n</div>\n",
                animations: [
                    trigger('detailsContentAnimation', [
                        state('void', style({
                            height: '*'
                        })),
                        state('1', style({
                            height: 0,
                            overflow: 'hidden'
                        })),
                        state('0', style({
                            height: '*'
                        })),
                        transition('* => *', animate('0ms ease-out'))
                    ])
                ]
            },] }
];
ThyMenuGroupComponent.ctorParameters = () => [
    { type: ThyPopover }
];
ThyMenuGroupComponent.propDecorators = {
    _thyMenuGroup: [{ type: ViewChild, args: ['thyMenuGroup', { static: true },] }],
    isThyMenuGroup: [{ type: HostBinding, args: ['class.thy-menu-group',] }],
    showIcon: [{ type: HostBinding, args: ['class.has-icon',] }],
    isCollapsed: [{ type: HostBinding, args: ['class.collapsed',] }],
    thyTitle: [{ type: Input }],
    thyExpand: [{ type: Input, args: ['thyExpand',] }],
    thyShowIcon: [{ type: Input, args: ['thyShowIcon',] }],
    thyIcon: [{ type: Input, args: ['thyIcon',] }],
    thyActionIcon: [{ type: Input, args: ['thyActionIcon',] }],
    thyShowAction: [{ type: Input }],
    thyActionStopPropagation: [{ type: Input }],
    thyOnActionClick: [{ type: Output }],
    thyActionMenu: [{ type: Input }]
};

class ThyMenuItemNameComponent {
    constructor() {
        this.isThyMenuItemName = true;
        this.thyOverflowEllipsis = true;
    }
    ngOnInit() { }
}
ThyMenuItemNameComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-menu-item-name,[thy-menu-item-name],[thyMenuItemName]',
                template: "<ng-content></ng-content>"
            },] }
];
ThyMenuItemNameComponent.ctorParameters = () => [];
ThyMenuItemNameComponent.propDecorators = {
    isThyMenuItemName: [{ type: HostBinding, args: ['class.thy-menu-item-name',] }],
    thyOverflowEllipsis: [{ type: HostBinding, args: ['class.thy-menu-item-name-ellipsis',] }, { type: Input }]
};

class ThyMenuItemIconComponent {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.isThyMenuItemIcon = true;
    }
    set thyColor(value) {
        if (value) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'color', value);
        }
    }
    ngOnInit() { }
}
ThyMenuItemIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-menu-item-icon,[thy-menu-item-icon],[thyMenuItemIcon]',
                template: "<ng-content></ng-content>"
            },] }
];
ThyMenuItemIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ThyMenuItemIconComponent.propDecorators = {
    isThyMenuItemIcon: [{ type: HostBinding, args: ['class.thy-menu-item-icon',] }],
    thyColor: [{ type: Input }]
};

class ThyMenuItemActionComponent {
    constructor(popover, renderer, elementRef) {
        this.popover = popover;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._boundEvent = false;
        this.isThyMenuItemIconMore = true;
        this.thyStopPropagation = true;
    }
    set thyActionMenu(value) {
        this._actionMenu = value;
        if (this._actionMenu) {
            this.bindClickEvent();
        }
    }
    bindClickEvent() {
        if (this._boundEvent) {
            return;
        }
        this._boundEvent = true;
        this.renderer.listen(this.elementRef.nativeElement, 'click', event => {
            if (this.thyStopPropagation) {
                event.stopPropagation();
            }
            if (this._actionMenu) {
                this.popover.open(this._actionMenu, {
                    origin: event.currentTarget,
                    insideClosable: true,
                    placement: 'bottom'
                });
            }
        });
    }
    ngOnInit() { }
}
ThyMenuItemActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-menu-item-action,[thy-menu-item-action],[thyMenuItemAction]',
                template: "<ng-content></ng-content>"
            },] }
];
ThyMenuItemActionComponent.ctorParameters = () => [
    { type: ThyPopover },
    { type: Renderer2 },
    { type: ElementRef }
];
ThyMenuItemActionComponent.propDecorators = {
    isThyMenuItemIconMore: [{ type: HostBinding, args: ['class.thy-menu-item-action',] }],
    thyActionMenu: [{ type: Input }],
    thyStopPropagation: [{ type: Input }]
};

class ThyMenuDividerComponent {
    constructor() {
        this.isThyMenuDivider = true;
    }
    ngOnInit() { }
}
ThyMenuDividerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-menu-divider,[thy-menu-divider],[thyMenuDivider]',
                template: "<ng-content></ng-content>"
            },] }
];
ThyMenuDividerComponent.ctorParameters = () => [];
ThyMenuDividerComponent.propDecorators = {
    isThyMenuDivider: [{ type: HostBinding, args: ['class.thy-menu-divider',] }]
};

class ThyMenuModule {
}
ThyMenuModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ThyMenuComponent,
                    ThyMenuGroupComponent,
                    ThyMenuItemComponent,
                    ThyMenuItemNameComponent,
                    ThyMenuItemIconComponent,
                    ThyMenuItemActionComponent,
                    ThyMenuDividerComponent
                ],
                imports: [CommonModule, ThyIconModule, ThyPopoverModule],
                exports: [
                    ThyMenuComponent,
                    ThyMenuGroupComponent,
                    ThyMenuItemComponent,
                    ThyMenuItemNameComponent,
                    ThyMenuItemIconComponent,
                    ThyMenuItemActionComponent,
                    ThyMenuDividerComponent
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyMenuComponent, ThyMenuDividerComponent, ThyMenuGroupComponent, ThyMenuItemActionComponent, ThyMenuItemComponent, ThyMenuItemIconComponent, ThyMenuItemNameComponent, ThyMenuModule };
//# sourceMappingURL=ngx-tethys-menu.js.map

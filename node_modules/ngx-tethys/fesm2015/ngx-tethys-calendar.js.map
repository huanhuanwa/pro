{"version":3,"file":"ngx-tethys-calendar.js","sources":["../../src/calendar/calendar-header.component.ts","../../src/calendar/calendar-cells.ts","../../src/calendar/calendar.component.ts","../../src/calendar/module.ts","../../src/calendar/ngx-tethys-calendar.ts"],"names":["DateCell","HeaderOperation"],"mappings":"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","sourcesContent":["import { fromUnixTime, getMonth, getYear } from 'date-fns';\nimport { DateRangeItemInfo } from 'ngx-tethys/date-range';\nimport { endOfMonth, FunctionProp, getUnixTime, startOfMonth, TinyDate } from 'ngx-tethys/util';\n\nimport { ChangeDetectorRef, Component, EventEmitter, HostBinding, Input, OnInit, Output, TemplateRef } from '@angular/core';\n\n@Component({\n    selector: 'thy-calendar-header',\n    templateUrl: './calendar-header.component.html'\n})\nexport class ThyCalendarHeaderComponent implements OnInit {\n    @HostBinding('class.thy-calendar-full-header-container') className = true;\n\n    // @Input() mode: 'month' | 'year' = 'month';\n\n    // @Input() fullscreen = true;\n\n    @Input()\n    set currentDate(value: TinyDate) {\n        this.setDate(value);\n    }\n\n    @Input() operationRender: FunctionProp<TemplateRef<any>>;\n\n    // @Output() readonly modeChange: EventEmitter<'month' | 'year'> = new EventEmitter();\n\n    @Output() readonly yearChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() readonly monthChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() readonly dateRangeChange: EventEmitter<DateRangeItemInfo> = new EventEmitter();\n\n    public dateRanges: DateRangeItemInfo[] = [\n        {\n            key: 'month',\n            text: getYear(new Date()) + '年' + (getMonth(new Date()) + 1) + '月',\n            begin: getUnixTime(startOfMonth(new Date())),\n            end: getUnixTime(endOfMonth(new Date())),\n            timestamp: {\n                interval: 1,\n                unit: 'month'\n            }\n        }\n    ];\n\n    public date: DateRangeItemInfo;\n\n    private _currentDate: TinyDate;\n\n    public isCurrent: boolean;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnInit(): void {}\n\n    onChangeMonth(month: DateRangeItemInfo) {\n        const currentMonth = fromUnixTime(month.begin).getMonth();\n        this.monthChange.emit(currentMonth);\n    }\n\n    onChangeYear(year: DateRangeItemInfo) {\n        const currentYear = fromUnixTime(year.begin).getFullYear();\n        this.yearChange.emit(currentYear);\n    }\n\n    onChangeRange(dateRange: DateRangeItemInfo) {\n        this.isCurrentDate(this._currentDate);\n        this.onChangeYear(dateRange);\n        this.onChangeMonth(dateRange);\n        this.dateRangeChange.emit(dateRange);\n    }\n\n    backToday() {\n        this._currentDate = new TinyDate();\n        this.date = { ...this.dateRanges[0] };\n        this.onChangeRange(this.date);\n        this.cdr.detectChanges();\n    }\n\n    setDate(value: TinyDate) {\n        this.isCurrentDate(value);\n        if (this.isCurrent) {\n            this._currentDate = value;\n            const dateRange = {\n                ...this.dateRanges[0],\n                key: 'exception',\n                text: getYear(this._currentDate.nativeDate) + '年' + (getMonth(this._currentDate.nativeDate) + 1) + '月',\n                begin: getUnixTime(startOfMonth(this._currentDate.nativeDate)),\n                end: getUnixTime(endOfMonth(this._currentDate.nativeDate))\n            };\n            this.date = dateRange;\n        } else {\n            this._currentDate = new TinyDate();\n            this.date = { ...this.dateRanges[0] };\n        }\n    }\n\n    isCurrentDate(currentDate: TinyDate) {\n        this.isCurrent = currentDate.getMonth() !== getMonth(new Date()) || currentDate.getYear() !== getYear(new Date());\n    }\n}\n","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[thyDateCell]',\n    exportAs: 'thyDateCell'\n})\nexport class ThyDateCellDirective {}\n\n@Directive({\n    selector: '[thyMonthCell]',\n    exportAs: 'thyMonthCell'\n})\nexport class ThyMonthCellDirective {}\n\n@Directive({\n    selector: '[thyDateFullCell]',\n    exportAs: 'thyDateFullCell'\n})\nexport class ThyDateFullCellDirective {}\n\n@Directive({\n    selector: '[thyMonthFullCell]',\n    exportAs: 'thyMonthFullCell'\n})\nexport class ThyMonthFullCellDirective {}\n\n@Directive({\n    selector: '[thyCalendarHeaderOperation]',\n    exportAs: 'thyCalendarHeaderOperation'\n})\nexport class ThyCalendarHeaderOperationDirective {}\n","import { InputBoolean } from 'ngx-tethys/core';\nimport { DateRangeItemInfo } from 'ngx-tethys/date-range';\nimport { TinyDate } from 'ngx-tethys/util';\n\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ThyCalendarHeaderOperationDirective as HeaderOperation, ThyDateCellDirective as DateCell } from './calendar-cells';\n\nexport type CalendarMode = 'month' | 'year';\ntype CalendarDateTemplate = TemplateRef<{ $implicit: Date }>;\n\n@Component({\n    selector: 'thy-calendar',\n    templateUrl: './calendar.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ThyCalendarComponent), multi: true }]\n})\nexport class ThyCalendarComponent implements OnInit, OnChanges {\n    @HostBinding('class.thy-calendar-container') className = true;\n\n    @HostBinding('class.thy-calendar-full') className1 = true;\n\n    // @HostBinding('class.thy-pick-calendar-mini') className2 = !thyFullscreen;\n\n    @Input() thyMode: CalendarMode = 'month';\n\n    @Input() thyValue?: Date;\n\n    @Input() thyDisabledDate?: (date: Date) => boolean;\n\n    @Output() thyModeChange: EventEmitter<CalendarMode> = new EventEmitter();\n\n    @Output() thyPanelChange: EventEmitter<{ date: Date; mode: CalendarMode }> = new EventEmitter();\n\n    @Output() thySelectChange: EventEmitter<Date> = new EventEmitter();\n\n    @Output() thyValueChange: EventEmitter<Date> = new EventEmitter();\n\n    @Output() thyDateRangeChange: EventEmitter<DateRangeItemInfo> = new EventEmitter();\n\n    @Input() thyDateCell?: CalendarDateTemplate;\n    @ContentChild(DateCell, { read: TemplateRef }) thyDateCellChild?: CalendarDateTemplate;\n    get dateCell(): CalendarDateTemplate {\n        return (this.thyDateCell || this.thyDateCellChild)!;\n    }\n\n    // @Input() thyDateFullCell?: CalendarDateTemplate;\n    // @ContentChild(DateFullCell, { read: TemplateRef }) thyDateFullCellChild?: CalendarDateTemplate;\n    // get dateFullCell(): CalendarDateTemplate {\n    //     return (this.thyDateFullCell || this.thyDateFullCellChild)!;\n    // }\n\n    // @Input() thyMonthCell?: CalendarDateTemplate;\n    // @ContentChild(MonthCell, { read: TemplateRef }) thyMonthCellChild?: CalendarDateTemplate;\n    // get monthCell(): CalendarDateTemplate {\n    //     return (this.thyMonthCell || this.thyMonthCellChild)!;\n    // }\n\n    // @Input() thyMonthFullCell?: CalendarDateTemplate;\n    // @ContentChild(MonthFullCell, { read: TemplateRef }) thyMonthFullCellChild?: CalendarDateTemplate;\n    // get monthFullCell(): CalendarDateTemplate {\n    //     return (this.thyMonthFullCell || this.thyMonthFullCellChild)!;\n    // }\n\n    @Input() thyCalendarHeaderOperation?: CalendarDateTemplate;\n    @ContentChild(HeaderOperation, { read: TemplateRef }) thyCalendarHeaderOperationChild?: CalendarDateTemplate;\n    get headerOperation(): CalendarDateTemplate {\n        return (this.thyCalendarHeaderOperation || this.thyCalendarHeaderOperationChild)!;\n    }\n\n    @Input() @InputBoolean() thyFullscreen = true;\n\n    public currentDate = new TinyDate();\n\n    public prefixCls = 'thy-calendar-full';\n\n    private onChangeFn: (date: Date) => void = () => {};\n\n    private onTouchFn: () => void = () => {};\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnInit(): void {}\n\n    // onModeChange(mode: CalendarMode): void {\n    //     this.thyModeChange.emit(mode);\n    //     this.thyPanelChange.emit({ date: this.currentDate.nativeDate, mode });\n    // }\n\n    onYearSelect(year: number): void {\n        const date = this.currentDate.setYear(year);\n        this.updateDate(date);\n    }\n\n    onMonthSelect(month: number): void {\n        const date = this.currentDate.setMonth(month);\n        this.updateDate(date);\n    }\n\n    onDateSelect(date: TinyDate): void {\n        // Only currentDate is enough in calendar\n        // this.value = date;\n        this.updateDate(date);\n    }\n\n    onDateRangeSelect(date: DateRangeItemInfo) {\n        this.thyDateRangeChange.emit(date);\n    }\n\n    writeValue(value: Date | null): void {\n        this.updateDate(new TinyDate(value as Date), false);\n        this.cdr.markForCheck();\n    }\n\n    registerOnChange(fn: (date: Date) => void): void {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchFn = fn;\n    }\n\n    private updateDate(date: TinyDate, touched: boolean = true): void {\n        this.currentDate = date;\n\n        if (touched) {\n            this.onChangeFn(date.nativeDate);\n            this.onTouchFn();\n            this.thySelectChange.emit(date.nativeDate);\n            this.thyValueChange.emit(date.nativeDate);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.thyValue) {\n            this.updateDate(new TinyDate(this.thyValue), false);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyIconModule } from 'ngx-tethys/icon';\nimport { ThyCalendarHeaderComponent } from './calendar-header.component';\nimport { ThyCalendarComponent } from './calendar.component';\nimport {\n    ThyCalendarHeaderOperationDirective,\n    ThyDateCellDirective,\n    ThyDateFullCellDirective,\n    ThyMonthCellDirective,\n    ThyMonthFullCellDirective\n} from './calendar-cells';\nimport { LibPackerModule } from 'ngx-tethys/date-picker';\nimport { ThySelectModule } from 'ngx-tethys/select';\nimport { ThyRadioModule } from 'ngx-tethys/radio';\nimport { ThyButtonModule } from 'ngx-tethys/button';\nimport { ThyDateRangeModule } from 'ngx-tethys/date-range';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ThySharedModule,\n        ThyIconModule,\n        LibPackerModule,\n        ThySelectModule,\n        ThyRadioModule,\n        ThyButtonModule,\n        ThyDateRangeModule\n    ],\n    declarations: [\n        ThyCalendarHeaderComponent,\n        ThyCalendarComponent,\n        ThyDateCellDirective,\n        ThyDateFullCellDirective,\n        ThyMonthCellDirective,\n        ThyMonthFullCellDirective,\n        ThyCalendarHeaderOperationDirective\n    ],\n    exports: [\n        ThyCalendarHeaderComponent,\n        ThyCalendarComponent,\n        ThyDateCellDirective,\n        ThyDateFullCellDirective,\n        ThyMonthCellDirective,\n        ThyMonthFullCellDirective,\n        ThyCalendarHeaderOperationDirective\n    ]\n})\nexport class ThyCalendarModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
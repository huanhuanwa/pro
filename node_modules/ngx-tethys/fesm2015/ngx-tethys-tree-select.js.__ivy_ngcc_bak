import { Component, forwardRef, ElementRef, Renderer2, NgZone, HostBinding, ContentChild, ViewChild, Input, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';
import { ThyLabelModule } from 'ngx-tethys/label';
import { getFlexiblePositions } from 'ngx-tethys/core';
import { warnDeprecation, isObject, isArray, produce } from 'ngx-tethys/util';
import { of } from 'rxjs';
import { take } from 'rxjs/operators';
import { ThyListModule } from 'ngx-tethys/list';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyEmptyModule } from 'ngx-tethys/empty';
import { ThySelectCommonModule } from 'ngx-tethys/shared';

function filterTreeData(treeNodes, searchText, searchKey = 'name') {
    const filterNodes = (node, result) => {
        if (node[searchKey] && node[searchKey].indexOf(searchText) !== -1) {
            result.push(node);
            return result;
        }
        if (Array.isArray(node.children)) {
            const nodes = node.children.reduce((previous, current) => filterNodes(current, previous), []);
            if (nodes.length) {
                const parentNode = Object.assign(Object.assign({}, node), { children: nodes, expand: true });
                result.push(parentNode);
            }
        }
        return result;
    };
    const treeData = treeNodes.reduce((previous, current) => filterNodes(current, previous), []);
    return treeData;
}
class ThyTreeSelectComponent {
    constructor(elementRef, renderer, ngZone) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.treeSelectClass = true;
        this.isTreeSelect = true;
        // 菜单是否展开
        this.expandTreeSelectOptions = false;
        this.isMulti = false;
        this.selectedNodes = [];
        this.flattenTreeNodes = [];
        this.cdkConnectOverlayWidth = 0;
        this.icons = {
            expand: 'angle-down',
            collapse: 'angle-right',
            gap: 15
        };
        this.initialled = false;
        this.valueIsObject = false;
        this.thyPrimaryKey = '_id';
        this.thyShowKey = 'name';
        this.thyChildCountKey = 'childCount';
        this.thyMultiple = false;
        this.thyDisable = false;
        this.thyPlaceholder = '请选择节点';
        this.thyEmptyOptionsText = '暂时没有数据可选';
        this.thyHiddenNodeKey = 'hidden';
        this.thyDisableNodeKey = 'disabled';
        this.thyAsyncNode = false;
        this.thyShowWholeName = false;
        this.thyShowSearch = false;
        this.thyHiddenNodeFn = (node) => node.hidden;
        this.thyDisableNodeFn = (node) => node.disabled;
        this.thyGetNodeChildren = (node) => of([]);
        // TODO: 是否可以取消选中的node
        // @Input() thyUnRemoveSelectedNodeFn: Function;
        this.onModelChange = () => { };
        this.onModelTouch = () => { };
    }
    set thyTreeNodes(value) {
        this.treeNodes = value;
        this.originTreeNodes = value;
        if (this.initialled) {
            this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
            this.setSelectedNodes();
        }
    }
    get placeholder() {
        return this.thyPlaceholder;
    }
    set thyIconType(type) {
        warnDeprecation('This parameter has been deprecation');
        // if (type === 'especial') {
        //     this.icons = { expand: 'minus-square', collapse: 'plus-square', gap: 20 };
        // } else {
        //     this.icons = { expand: 'caret-right-down', collapse: 'caret-right', gap: 15 };
        // }
    }
    _getNgModelType() {
        if (this.thyMultiple) {
            this.valueIsObject = !this.selectedValue[0] || isObject(this.selectedValue[0]);
        }
        else {
            this.valueIsObject = isObject(this.selectedValue);
        }
    }
    writeValue(value) {
        this.selectedValue = value;
        if (value) {
            this._getNgModelType();
        }
        this.setSelectedNodes();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouch = fn;
    }
    onDocumentClick(event) {
        event.stopPropagation();
        if (!this.elementRef.nativeElement.contains(event.target) && this.expandTreeSelectOptions) {
            this.expandTreeSelectOptions = false;
        }
    }
    ngOnInit() {
        this.positions = getFlexiblePositions('bottom', 4);
        this.isMulti = this.thyMultiple;
        this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
        this.setSelectedNodes();
        this.initialled = true;
        this.init();
    }
    get selectedValueObject() {
        return this.thyMultiple ? this.selectedNodes : this.selectedNode;
    }
    searchValue(searchText) {
        this.treeNodes = filterTreeData(this.originTreeNodes, searchText.trim(), this.thyShowKey);
    }
    setPosition() {
        this.ngZone.onStable
            .asObservable()
            .pipe(take(1))
            .subscribe(() => {
            this.cdkConnectedOverlay.overlayRef.updatePosition();
        });
    }
    init() {
        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
    }
    flattenNodes(nodes = [], resultNodes = [], parentPrimaryValue = []) {
        resultNodes = resultNodes.concat(nodes);
        let nodesLeafs = [];
        (nodes || []).forEach(item => {
            item.parentValues = parentPrimaryValue;
            item.level = item.parentValues.length;
            if (item.children && isArray(item.children)) {
                const nodeLeafs = this.flattenNodes(item.children, resultNodes, [...parentPrimaryValue, item[this.thyPrimaryKey]]);
                nodesLeafs = [...nodesLeafs, ...nodeLeafs];
            }
        });
        return [...nodes, ...nodesLeafs];
    }
    _findTreeNode(value) {
        return (this.flattenTreeNodes || []).find(item => item[this.thyPrimaryKey] === value);
    }
    getShowNodeName() {
        if (this.thyShowWholeName) {
            let wholeName = '';
            (this.selectedNode.parentValues || []).forEach((item, index) => {
                const node = this._findTreeNode(item);
                wholeName = `${wholeName}${node[this.thyShowKey]} > `;
            });
            return `${wholeName}${this.selectedNode[this.thyShowKey]}`;
        }
        else {
            return this.selectedNode[this.thyShowKey];
        }
    }
    setSelectedNodes() {
        if (this.selectedValue) {
            // 多选数据初始化
            if (this.thyMultiple) {
                if (this.selectedValue.length > 0) {
                    if (this.valueIsObject && Object.keys(this.selectedValue[0]).indexOf(this.thyPrimaryKey) >= 0) {
                        this.selectedNodes = this.selectedValue.map((item) => {
                            return this._findTreeNode(item[this.thyPrimaryKey]);
                        });
                    }
                    else {
                        this.selectedNodes = this.selectedValue.map((item) => {
                            return this._findTreeNode(item);
                        });
                    }
                }
            }
            else {
                // 单选数据初始化
                if (this.valueIsObject) {
                    if (Object.keys(this.selectedValue).indexOf(this.thyPrimaryKey) >= 0) {
                        this.selectedNode = this._findTreeNode(this.selectedValue[this.thyPrimaryKey]);
                    }
                }
                else {
                    this.selectedNode = this._findTreeNode(this.selectedValue);
                }
            }
        }
        else {
            this.selectedNodes = [];
            this.selectedNode = null;
        }
    }
    openSelectPop() {
        if (this.thyDisable) {
            return;
        }
        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
        this.expandTreeSelectOptions = !this.expandTreeSelectOptions;
    }
    close() {
        this.expandTreeSelectOptions = false;
    }
    clearSelectedValue(event) {
        event.stopPropagation();
        this.selectedValue = null;
        this.selectedNode = null;
        this.selectedNodes = [];
        this.onModelChange(this.selectedValue);
    }
    _changeSelectValue() {
        if (this.valueIsObject) {
            this.selectedValue = this.thyMultiple ? this.selectedNodes : this.selectedNode;
        }
        else {
            this.selectedValue = this.thyMultiple
                ? this.selectedNodes.map(item => item[this.thyPrimaryKey])
                : this.selectedNode[this.thyPrimaryKey];
        }
        this.onModelChange(this.selectedValue);
    }
    removeMultipleSelectedNode(event) {
        this.removeSelectedNode(event.item, event.$event);
    }
    // thyMultiple = true 时，移除数据时调用
    removeSelectedNode(node, event) {
        if (event) {
            event.stopPropagation();
        }
        if (this.thyDisable) {
            return;
        }
        if (this.thyMultiple) {
            this.selectedNodes = produce(this.selectedNodes).remove((item) => {
                return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];
            });
            this._changeSelectValue();
        }
    }
    selectNode(node) {
        if (!this.thyMultiple) {
            this.selectedNode = node;
            this.expandTreeSelectOptions = false;
        }
        else {
            if (this.selectedNodes.find(item => {
                return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];
            })) {
                this.removeSelectedNode(node);
            }
            else {
                this.selectedNodes = produce(this.selectedNodes).add(node);
            }
        }
        this._changeSelectValue();
    }
    getNodeChildren(node) {
        const result = this.thyGetNodeChildren(node);
        if (result && result.subscribe) {
            result.pipe().subscribe((data) => {
                const nodes = this.flattenNodes(data, this.flattenTreeNodes, [...node.parentValues, node[this.thyPrimaryKey]]);
                const otherNodes = nodes.filter((item) => {
                    return !this.flattenTreeNodes.find(hasItem => {
                        return hasItem[this.thyPrimaryKey] === item[this.thyPrimaryKey];
                    });
                });
                this.flattenTreeNodes = [...this.flattenTreeNodes, ...otherNodes];
                node.children = data;
            });
            return result;
        }
    }
}
ThyTreeSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tree-select',
                template: "<div\n  cdkOverlayOrigin\n  thySelectControl\n  (click)=\"openSelectPop()\"\n  #origin=\"cdkOverlayOrigin\"\n  [thyPanelOpened]=\"expandTreeSelectOptions\"\n  [thySelectedOptions]=\"selectedValueObject\"\n  [thyIsMultiple]=\"thyMultiple\"\n  [thyAllowClear]=\"thyAllowClear\"\n  [thySize]=\"thySize\"\n  [thyPlaceholder]=\"placeholder\"\n  [customDisplayTemplate]=\"customDisplayTemplate\"\n  [thyShowSearch]=\"thyShowSearch\"\n  [thyDisabled]=\"thyDisable\"\n  (thyOnClear)=\"clearSelectedValue($event)\"\n  (thyOnRemove)=\"removeMultipleSelectedNode($event)\"\n  (thyOnSearch)=\"searchValue($event)\"\n>\n  <ng-template #customDisplayTemplate let-node>\n    <ng-container *ngIf=\"thyTreeSelectTriggerDisplayRef; else noneTemplate\">\n      <ng-template [ngTemplateOutlet]=\"thyTreeSelectTriggerDisplayRef\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n    </ng-container>\n    <ng-template #noneTemplate>\n      {{ node[thyShowKey] }}\n    </ng-template>\n  </ng-template>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayHasBackdrop]=\"false\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayWidth]=\"cdkConnectOverlayWidth\"\n  [cdkConnectedOverlayOpen]=\"expandTreeSelectOptions\"\n  (detach)=\"close()\"\n>\n  <thy-tree-select-nodes [treeNodes]=\"treeNodes\"></thy-tree-select-nodes>\n</ng-template>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyTreeSelectComponent),
                        multi: true
                    }
                ]
            },] }
];
ThyTreeSelectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
ThyTreeSelectComponent.propDecorators = {
    treeSelectClass: [{ type: HostBinding, args: ['class.thy-select-custom',] }],
    isTreeSelect: [{ type: HostBinding, args: ['class.thy-select',] }],
    expandTreeSelectOptions: [{ type: HostBinding, args: ['class.menu-is-opened',] }],
    isMulti: [{ type: HostBinding, args: ['class.thy-select-custom--multiple',] }],
    thyTreeSelectTriggerDisplayRef: [{ type: ContentChild, args: ['thyTreeSelectTriggerDisplay',] }],
    treeNodeTemplateRef: [{ type: ContentChild, args: ['treeNodeTemplate',] }],
    cdkOverlayOrigin: [{ type: ViewChild, args: [CdkOverlayOrigin, { static: true },] }],
    cdkConnectedOverlay: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: true },] }],
    customDisplayTemplate: [{ type: ViewChild, args: ['customDisplayTemplate', { static: true },] }],
    thyTreeNodes: [{ type: Input }],
    thyPrimaryKey: [{ type: Input }],
    thyShowKey: [{ type: Input }],
    thyChildCountKey: [{ type: Input }],
    thyAllowClear: [{ type: Input }],
    thyMultiple: [{ type: Input }],
    thyDisable: [{ type: Input }],
    thyPlaceholder: [{ type: Input }],
    thySize: [{ type: Input }],
    thyEmptyOptionsText: [{ type: Input }],
    thyHiddenNodeKey: [{ type: Input }],
    thyDisableNodeKey: [{ type: Input }],
    thyAsyncNode: [{ type: Input }],
    thyShowWholeName: [{ type: Input }],
    thyShowSearch: [{ type: Input }],
    thyIconType: [{ type: Input }],
    thyHiddenNodeFn: [{ type: Input }],
    thyDisableNodeFn: [{ type: Input }],
    thyGetNodeChildren: [{ type: Input }],
    onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};

class ThyTreeSelectNodesComponent {
    constructor(parent) {
        this.parent = parent;
        this.primaryKey = this.parent.thyPrimaryKey;
        this.showKey = this.parent.thyShowKey;
        this.isMultiple = this.parent.thyMultiple;
        this.valueIsObject = this.parent.valueIsObject;
        this.selectedValue = this.parent.selectedValue;
        this.childCountKey = this.parent.thyChildCountKey;
        this.treeNodeTemplateRef = this.parent.treeNodeTemplateRef;
    }
    ngOnInit() {
        this.class = this.isMultiple ? 'thy-tree-select-dropdown thy-tree-select-dropdown-multiple' : 'thy-tree-select-dropdown';
    }
    treeNodeIsSelected(node) {
        if (this.parent.thyMultiple) {
            return (this.parent.selectedNodes || []).find(item => {
                return item[this.primaryKey] === node[this.primaryKey];
            });
        }
        else {
            return this.parent.selectedNode && this.parent.selectedNode[this.primaryKey] === node[this.primaryKey];
        }
    }
    treeNodeIsHidden(node) {
        if (this.parent.thyHiddenNodeKey) {
            return node[this.parent.thyHiddenNodeKey];
        }
        if (this.parent.thyHiddenNodeFn) {
            return this.parent.thyHiddenNodeFn(node);
        }
        return false;
    }
    treeNodeIsDisable(node) {
        if (this.parent.thyDisableNodeKey) {
            return node[this.parent.thyDisableNodeKey];
        }
        if (this.parent.thyDisableNodeFn) {
            return this.parent.thyDisableNodeFn(node);
        }
        return false;
    }
    treeNodeIsExpand(node) {
        let isSelectedNodeParent = false;
        if (this.parent.thyMultiple) {
            isSelectedNodeParent = !!(this.parent.selectedNodes || []).find(item => {
                return item.parentValues.indexOf(node[this.primaryKey]) > -1;
            });
        }
        else {
            isSelectedNodeParent = this.parent.selectedNode
                ? this.parent.selectedNode.parentValues.indexOf(node[this.primaryKey]) > -1
                : false;
        }
        const isExpand = node.expand || (Object.keys(node).indexOf('expand') < 0 && isSelectedNodeParent);
        node.expand = isExpand;
        return isExpand;
    }
    getNodeChildren(node) {
        return this.parent.getNodeChildren(node);
    }
    selectTreeNode(event, node) {
        event.stopPropagation();
        if (this.treeNodeIsDisable(node)) {
            return;
        }
        this.parent.selectNode(node);
    }
    nodeExpandToggle(event, node) {
        event.stopPropagation();
        if (Object.keys(node).indexOf('expand') > -1) {
            node.expand = !node.expand;
        }
        else {
            if (this.treeNodeIsExpand(node)) {
                node.expand = false;
            }
            else {
                node.expand = true;
            }
        }
        if (node.expand && this.parent.thyAsyncNode) {
            this.getNodeChildren(node).subscribe(() => {
                this.parent.setPosition();
            });
        }
        this.parent.setPosition();
    }
}
ThyTreeSelectNodesComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tree-select-nodes',
                template: "<div class=\"thy-tree-select-options\" *ngIf=\"treeNodes?.length > 0; else emptyPlaceholder\">\n  <ng-container\n    *ngIf=\"treeNodes?.length > 0\"\n    [ngTemplateOutlet]=\"treeSelectNode\"\n    [ngTemplateOutletContext]=\"{ $implicit: treeNodes }\"\n  ></ng-container>\n</div>\n<ng-template #emptyPlaceholder>\n  <thy-empty class=\"thy-select-empty-content\" thySize=\"sm\" [thyMessage]=\"parent.thyEmptyOptionsText\"></thy-empty>\n</ng-template>\n<ng-template #treeSelectNode let-nodes>\n  <div class=\"thy-tree-select-node\">\n    <ng-container *ngFor=\"let node of nodes\">\n      <a\n        class=\"thy-option-item\"\n        [ngClass]=\"{ active: treeNodeIsSelected(node) }\"\n        [class.disabled]=\"treeNodeIsDisable(node)\"\n        [ngStyle]=\"{ 'padding-left.px': 20 * node.level + parent.icons.gap }\"\n        (click)=\"selectTreeNode($event, node)\"\n        *ngIf=\"!treeNodeIsHidden(node)\"\n      >\n        <ng-template #treeSelectNode> </ng-template>\n        <span\n          class=\"thy-tree-select-option-icon\"\n          [class.invisible]=\"!(node.children?.length > 0 || (node[childCountKey] && node[childCountKey] > 0))\"\n          (click)=\"nodeExpandToggle($event, node)\"\n        >\n          <thy-icon\n            class=\"node-expand-icon\"\n            [thyIconName]=\"treeNodeIsExpand(node) ? parent.icons.expand : parent.icons.collapse\"\n          ></thy-icon>\n        </span>\n        <span class=\"thy-tree-select-option-text\">\n          <ng-template\n            *ngIf=\"treeNodeTemplateRef; else defaultNodeText\"\n            [ngTemplateOutlet]=\"treeNodeTemplateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: node }\"\n          ></ng-template>\n          <ng-template #defaultNodeText>\n            {{ node[showKey] }}\n          </ng-template>\n        </span>\n        <span class=\"checked-icon\" *ngIf=\"isMultiple\">\n          <i class=\"wtf wtf-checked\"></i>\n        </span>\n      </a>\n      <ng-container\n        *ngIf=\"treeNodeIsExpand(node) && node.children?.length > 0\"\n        [ngTemplateOutlet]=\"treeSelectNode\"\n        [ngTemplateOutletContext]=\"{ $implicit: node.children }\"\n      ></ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n"
            },] }
];
ThyTreeSelectNodesComponent.ctorParameters = () => [
    { type: ThyTreeSelectComponent }
];
ThyTreeSelectNodesComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    treeNodes: [{ type: Input }]
};

class ThyTreeSelectModule {
}
ThyTreeSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    OverlayModule,
                    ThyLabelModule,
                    ThyListModule,
                    ThyIconModule,
                    ThyEmptyModule,
                    ThySelectCommonModule
                ],
                declarations: [ThyTreeSelectComponent, ThyTreeSelectNodesComponent],
                exports: [ThyTreeSelectComponent, ThyTreeSelectNodesComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ThyTreeSelectComponent, ThyTreeSelectModule, ThyTreeSelectNodesComponent, filterTreeData };
//# sourceMappingURL=ngx-tethys-tree-select.js.map

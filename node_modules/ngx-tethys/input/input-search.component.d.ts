import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { InputSize } from './input.directive';
import * as ɵngcc0 from '@angular/core';
export declare type InputSearchTheme = 'ellipse' | '';
export declare const CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR: any;
export declare class ThyInputSearchComponent implements ControlValueAccessor {
    private cdr;
    onTouchedCallback: () => void;
    private onChangeCallback;
    disabled: boolean;
    autoFocus: boolean;
    _isSearchContainer: boolean;
    _isSearchEllipse: boolean;
    searchText: string;
    name: string;
    placeholder: string;
    set thyTheme(value: InputSearchTheme);
    set thySearchFocus(value: boolean);
    thySize: InputSize;
    clear: EventEmitter<Event>;
    constructor(cdr: ChangeDetectorRef);
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    searchModelChange(): void;
    clearSearchText(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyInputSearchComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyInputSearchComponent, "thy-input-search", never, { "name": "name"; "placeholder": "placeholder"; "thyTheme": "thyTheme"; "thySearchFocus": "thySearchFocus"; "thySize": "thySize"; }, { "clear": "clear"; }, never, never>;
}

//# sourceMappingURL=input-search.component.d.ts.map
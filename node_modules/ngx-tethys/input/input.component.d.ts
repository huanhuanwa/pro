import { EventEmitter, TemplateRef, NgZone, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any;
export declare class ThyInputComponent implements ControlValueAccessor, OnInit {
    private ngZone;
    placeholder: string;
    thySize: string;
    thyAutofocus: boolean;
    type: string;
    set thyType(value: string);
    thyLabelText: string;
    readonly: boolean;
    set thyAutocomplete(value: boolean);
    focus: EventEmitter<Event>;
    blur: EventEmitter<Event>;
    appendTemplate: TemplateRef<any>;
    prependTemplate: TemplateRef<any>;
    eyeTemplate: TemplateRef<any>;
    _type: string;
    value: string;
    autocomplete: boolean;
    showLabel: boolean;
    private onTouchedCallback;
    private onChangeCallback;
    _isSearchContainer: boolean;
    _isFormControl: boolean;
    _isFocus: boolean;
    disabled: boolean;
    constructor(ngZone: NgZone);
    ngOnInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    onModelChange(): void;
    onInputFocus(event: Event): void;
    onInputBlur(event: Event): void;
    isPassword(value: string): boolean;
    togglePasswordType(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyInputComponent, "thy-input", never, { "placeholder": "placeholder"; "thyAutofocus": "thyAutofocus"; "readonly": "readonly"; "thyType": "thyType"; "type": "type"; "thyAutocomplete": "thyAutocomplete"; "thySize": "thySize"; "thyLabelText": "thyLabelText"; }, { "focus": "focus"; "blur": "blur"; }, ["appendTemplate", "prependTemplate"], never>;
}

//# sourceMappingURL=input.component.d.ts.map
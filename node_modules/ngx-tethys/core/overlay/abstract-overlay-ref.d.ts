import { Observable } from 'rxjs';
import { ThyUpperOverlayPosition, ThyUpperOverlayOptions, ThyAbstractOverlayConfig } from './abstract-overlay.config';
import { OverlayRef, PositionStrategy } from '@angular/cdk/overlay';
import { ThyAbstractOverlayContainer } from './abstract-overlay-container';
export declare abstract class ThyAbstractOverlayRef<TComponent = unknown, TContainer extends ThyAbstractOverlayContainer = ThyAbstractOverlayContainer, TResult = any> {
    id: string;
    componentInstance: TComponent;
    backdropClosable: boolean;
    containerInstance: TContainer;
    abstract getOverlayRef(): OverlayRef;
    abstract close(dialogResult?: TResult): void;
    abstract afterOpened(): Observable<void>;
    abstract afterClosed(): Observable<TResult | undefined>;
    abstract beforeClosed(): Observable<TResult | undefined>;
    abstract keydownEvents(): Observable<KeyboardEvent>;
    abstract backdropClick(): Observable<MouseEvent>;
    abstract updatePosition(position?: ThyUpperOverlayPosition): this;
}
export declare abstract class ThyAbstractInternalOverlayRef<T, TContainer extends ThyAbstractOverlayContainer, TResult = undefined> extends ThyAbstractOverlayRef<T, TContainer, TResult> {
    private options;
    protected overlayRef: OverlayRef;
    protected config: ThyAbstractOverlayConfig;
    /** The instance of component opened into the dialog. */
    componentInstance: T;
    /** Whether the user is allowed to close the dialog. */
    backdropClosable: boolean | undefined;
    /** Subject for notifying the user that the dialog has finished opening. */
    private readonly _afterOpened;
    /** Subject for notifying the user that the dialog has finished closing. */
    private readonly _afterClosed;
    /** Subject for notifying the user that the dialog has started closing. */
    private readonly _beforeClosed;
    /** Result to be passed to afterClosed. */
    private _result;
    /** Fetches the position strategy object from the overlay ref. */
    protected getPositionStrategy(): PositionStrategy;
    constructor(options: ThyUpperOverlayOptions, overlayRef: OverlayRef, containerInstance: TContainer, config: ThyAbstractOverlayConfig);
    /**
     * Close the overlay.
     * @param overlayResult Optional result to return to the dialog opener.
     */
    close(overlayResult?: TResult): void;
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     */
    afterOpened(): Observable<void>;
    /**
     * Gets an observable that is notified when the dialog is finished closing.
     */
    afterClosed(): Observable<TResult | undefined>;
    /**
     * Gets an observable that is notified when the dialog has started closing.
     */
    beforeClosed(): Observable<TResult | undefined>;
    /**
     * Gets an observable that emits when the overlay's backdrop has been clicked.
     */
    backdropClick(): Observable<MouseEvent>;
    /**
     * Gets an observable that emits when keydown events are targeted on the overlay.
     */
    keydownEvents(): Observable<KeyboardEvent>;
    /** Get overlay ref */
    getOverlayRef(): OverlayRef;
    /**
     * Updates the overlay's position when is GlobalPositionStrategy
     * @param position New overlay position.
     */
    updateGlobalPosition(position?: ThyUpperOverlayPosition): this;
}

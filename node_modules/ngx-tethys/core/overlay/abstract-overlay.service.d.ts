import { FunctionProp } from 'ngx-tethys/util';
import { Subject } from 'rxjs';
import { ComponentType, Overlay, OverlayConfig, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';
import { Injector, TemplateRef } from '@angular/core';
import { ThyAbstractOverlayContainer } from './abstract-overlay-container';
import { ThyAbstractOverlayRef } from './abstract-overlay-ref';
import { ThyAbstractOverlayConfig, ThyUpperOverlayOptions } from './abstract-overlay.config';
export declare type ComponentTypeOrTemplateRef<T> = ComponentType<T> | TemplateRef<T>;
export declare abstract class ThyAbstractOverlayService<TConfig extends ThyAbstractOverlayConfig, TContainer extends ThyAbstractOverlayContainer> {
    protected options: ThyUpperOverlayOptions;
    protected overlay: Overlay;
    protected injector: Injector;
    protected defaultConfig: TConfig;
    scrollStrategy?: FunctionProp<ScrollStrategy>;
    private openedOverlays;
    private readonly _afterAllClosed;
    private readonly _afterOpened;
    constructor(options: ThyUpperOverlayOptions, // component name, e.g: dialog | popover | slide
    overlay: Overlay, injector: Injector, defaultConfig: TConfig, scrollStrategy?: FunctionProp<ScrollStrategy>);
    /** Build cdk overlay config by config */
    protected abstract buildOverlayConfig(config: TConfig): OverlayConfig;
    /** Attach overlay container to overlay*/
    protected abstract attachUpperOverlayContainer(overlay: OverlayRef, config: TConfig): TContainer;
    /** Create upper overlay ref by cdk overlay, container and config  */
    protected abstract createUpperOverlayRef<T>(overlayRef: OverlayRef, containerInstance: TContainer, config: TConfig): ThyAbstractOverlayRef<T, TContainer>;
    /** Create injector for component content */
    protected abstract createInjector<T>(config: TConfig, overlayRef: ThyAbstractOverlayRef<T, TContainer>, containerInstance: TContainer): Injector;
    abstract open<T, TData = undefined, TResult = undefined>(componentOrTemplateRef: ComponentTypeOrTemplateRef<T>, config?: ThyAbstractOverlayConfig<TData>): ThyAbstractOverlayRef<T, TContainer, TResult>;
    /** Attach component or template ref to overlay container */
    protected attachUpperOverlayContent<T, TResult>(componentOrTemplateRef: ComponentTypeOrTemplateRef<T>, containerInstance: TContainer, overlayRef: OverlayRef, config: TConfig): ThyAbstractOverlayRef<T, TContainer, TResult>;
    protected removeOpenedOverlay(upperOverlayRef: ThyAbstractOverlayRef<any, TContainer>): void;
    protected getUpperOverlayById(id: string): ThyAbstractOverlayRef<any, TContainer> | undefined;
    protected buildBaseOverlayConfig(config: TConfig, defaultPanelClass?: string | string[]): OverlayConfig;
    protected openUpperOverlay<T, TResult = any>(componentOrTemplateRef: ComponentTypeOrTemplateRef<T>, config?: TConfig): ThyAbstractOverlayRef<T, TContainer, TResult>;
    afterAllClosed(): Subject<void>;
    afterOpened(): Subject<ThyAbstractOverlayRef<any, TContainer, any>>;
    close<T>(result?: T): void;
    closeAll(): void;
    dispose(): void;
}

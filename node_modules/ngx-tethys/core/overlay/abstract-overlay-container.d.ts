import { CdkPortalOutlet, TemplatePortal, ComponentPortal } from '@angular/cdk/portal';
import { EmbeddedViewRef, ComponentRef, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { ThyUpperOverlayOptions, ThyAbstractOverlayConfig } from './abstract-overlay.config';
import { AnimationEvent } from '@angular/animations';
export declare function throwPopoverContentAlreadyAttachedError(name: string): void;
export declare abstract class ThyAbstractOverlayContainer {
    private options;
    protected changeDetectorRef: ChangeDetectorRef;
    id?: string;
    animationState: string;
    animationStateChanged: EventEmitter<AnimationEvent>;
    containerDestroy: Subject<void>;
    abstract config: ThyAbstractOverlayConfig;
    /**portal outlet */
    abstract portalOutlet: CdkPortalOutlet;
    /**
     * Opening overlay animation done
     */
    abstract animationOpeningDone: Observable<AnimationEvent>;
    /**
     * Closing overlay animation done
     */
    abstract animationClosingDone: Observable<AnimationEvent>;
    /** Before attach content(TemplatePortal or ComponentPortal) portal to portalOutlet*/
    abstract beforeAttachPortal(): void;
    /** Before detach content*/
    beforeDetachPortal(): void;
    constructor(options: ThyUpperOverlayOptions, changeDetectorRef: ChangeDetectorRef);
    /**
     * Attach a TemplatePortal as content to this overlay container.
     * @param portal Portal to be attached as the overlay content.
     */
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    /**
     * Attach a ComponentPortal as content to this overlay container.
     * @param portal Portal to be attached as the overlay content.
     */
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    startExitAnimation(): void;
    destroy(): void;
}

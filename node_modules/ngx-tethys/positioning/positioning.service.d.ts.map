{"version":3,"file":"positioning.service.d.ts","sources":["positioning.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ElementRef, NgZone } from '@angular/core';\nimport { NewClientRect } from './client-rect';\nexport declare enum PlacementTypes {\n    left = \"left\",\n    right = \"right\",\n    center = \"center\",\n    top = \"top\",\n    bottom = \"bottom\"\n}\nexport interface PositioningOptions {\n    /** The DOM element, ElementRef, or a selector string of an element which will be moved */\n    attach?: HTMLElement | ElementRef | string;\n    /** The DOM element, ElementRef, or a selector string of an element which the element will be attached to  */\n    target?: HTMLElement | ElementRef | string;\n    /**\n     * A string of the form 'vert-attachment horiz-attachment' or 'placement'\n     * - placement can be \"top\", \"bottom\", \"left\", \"right\"\n     * not yet supported:\n     * - vert-attachment can be any of 'top', 'middle', 'bottom'\n     * - horiz-attachment can be any of 'left', 'center', 'right'\n     */\n    placement?: string;\n    position?: {\n        top: number;\n        left: number;\n    };\n    /** A string of the form 'vert-offset horiz-offset'\n     * - vert-offset and horiz-offset can be of the form \"20px\" or \"55%\"\n     */\n    offset?: number;\n    /** If true component will be attached to body */\n    appendToBody?: boolean;\n    /** If true component auto adapt top or bottom */\n    autoAdapt?: boolean;\n}\nexport declare const defaultPositioningOptions: PositioningOptions;\nexport declare class ThyPositioningService {\n    private ngZone;\n    constructor(ngZone: NgZone);\n    static getHTMLElement(element: HTMLElement | ElementRef | string): HTMLElement;\n    private autoPosition;\n    private getAllStyles;\n    private getStyle;\n    private isStaticPositioned;\n    private offsetParent;\n    private calculateTopBottomPosition;\n    private calculateLeftRightPosition;\n    private autoAdaptTopBottom;\n    position(element: HTMLElement, round?: boolean): NewClientRect;\n    offset(element: HTMLElement, round?: boolean): NewClientRect;\n    /**\n     * 计算弹出层的位置\n     * @param hostElement 被追加的元素\n     * @param targetElement 弹出层内元素\n     * @param options 参数\n     */\n    calculatePosition(hostElement: HTMLElement, targetElement: HTMLElement, options: PositioningOptions): ClientRect;\n    setPosition(options: PositioningOptions): void;\n}\n"]}
import { ElementRef, Renderer2, EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare type ThyLabelType = 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger';
export declare class ThyLabelComponent {
    private el;
    private renderer;
    _thyHasHover: boolean;
    _classNameSM: boolean;
    _classNameDM: boolean;
    _classNameLG: boolean;
    thyIconPrefix: string;
    set thySize(value: string);
    private nativeElement;
    private _typeClassNames;
    private _labelClass?;
    private _type?;
    private _labelType?;
    private _icon;
    beforeIconName: string;
    beforeIconClass: string[];
    afterIconName: string;
    afterIconClass: string[];
    _color?: string;
    _backgroundOpacity?: number;
    thyOnRemove: EventEmitter<any>;
    constructor(el: ElementRef, renderer: Renderer2);
    set thyHasHover(value: string);
    set thyLabel(value: ThyLabelType);
    set thyLabelColor(color: string);
    set thyBackgroundOpacity(opacity: number);
    set thyLabelType(labelType: string);
    set thyBeforeIcon(icon: string);
    set thyAfterIcon(icon: string);
    private _setClassesByType;
    private _setLabelCustomColor;
    private _addClass;
    private _removeClass;
    remove(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyLabelComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyLabelComponent, "[thyLabel]", never, { "thySize": "thySize"; "thyHasHover": "thyHasHover"; "thyLabel": "thyLabel"; "thyLabelColor": "thyLabelColor"; "thyBackgroundOpacity": "thyBackgroundOpacity"; "thyLabelType": "thyLabelType"; "thyBeforeIcon": "thyBeforeIcon"; "thyAfterIcon": "thyAfterIcon"; "thyIconPrefix": "thyIconPrefix"; }, { "thyOnRemove": "thyOnRemove"; }, never, ["*", "*"]>;
}

//# sourceMappingURL=label.component.d.ts.map
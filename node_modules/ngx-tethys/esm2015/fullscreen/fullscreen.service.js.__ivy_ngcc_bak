import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { ThyFullscreenRef } from './fullscreen-ref';
import { ThyFullscreenMode } from './fullscreen.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ThyFullscreen {
    constructor(document) {
        this.document = document;
        this.fullscreenRefs = [];
    }
    /**
     * 开始全屏
     * @param config
     */
    launch(config) {
        config.mode = config.mode || ThyFullscreenMode.immersive;
        const fullscreenRef = new ThyFullscreenRef(this.document);
        fullscreenRef.fullscreenConfig = config;
        fullscreenRef.launch();
        this.fullscreenRefs.push(fullscreenRef);
        fullscreenRef.afterExited().subscribe(() => {
            const index = this.fullscreenRefs.indexOf(fullscreenRef);
            if (index > -1) {
                this.fullscreenRefs.splice(index, 1);
            }
        });
        return fullscreenRef;
    }
    /**
     * 退出最后一个 ThyFullscreenRef 的全屏
     * @param config
     */
    exit() {
        const lastFullscreenRef = this.fullscreenRefs[this.fullscreenRefs.length - 1];
        lastFullscreenRef.exit();
    }
}
ThyFullscreen.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyFullscreen_Factory() { return new ThyFullscreen(i0.ɵɵinject(i1.DOCUMENT)); }, token: ThyFullscreen, providedIn: "root" });
ThyFullscreen.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ThyFullscreen.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbHNjcmVlbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Z1bGxzY3JlZW4vZnVsbHNjcmVlbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQXVCLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUs3RSxNQUFNLE9BQU8sYUFBYTtJQUN0QixZQUF3QyxRQUFhO1FBQWIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUU3QyxtQkFBYyxHQUF1QixFQUFFLENBQUM7SUFGUSxDQUFDO0lBSXpEOzs7T0FHRztJQUNILE1BQU0sQ0FBb0IsTUFBMkI7UUFDakQsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztRQUN6RCxNQUFNLGFBQWEsR0FBRyxJQUFJLGdCQUFnQixDQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRSxhQUFhLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO1FBQ3hDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN4QyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN2QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN6RCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDWixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDeEM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0EsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlFLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7WUFuQ0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7NENBRWdCLE1BQU0sU0FBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaHlGdWxsc2NyZWVuUmVmIH0gZnJvbSAnLi9mdWxsc2NyZWVuLXJlZic7XG5pbXBvcnQgeyBUaHlGdWxsc2NyZWVuQ29uZmlnLCBUaHlGdWxsc2NyZWVuTW9kZSB9IGZyb20gJy4vZnVsbHNjcmVlbi5jb25maWcnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRoeUZ1bGxzY3JlZW4ge1xuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByb3RlY3RlZCBkb2N1bWVudDogYW55KSB7fVxuXG4gICAgcHJpdmF0ZSBmdWxsc2NyZWVuUmVmczogVGh5RnVsbHNjcmVlblJlZltdID0gW107XG5cbiAgICAvKipcbiAgICAgKiDlvIDlp4vlhajlsY9cbiAgICAgKiBAcGFyYW0gY29uZmlnXG4gICAgICovXG4gICAgbGF1bmNoPFRSZXN1bHQgPSB1bmtub3duPihjb25maWc6IFRoeUZ1bGxzY3JlZW5Db25maWcpOiBUaHlGdWxsc2NyZWVuUmVmPFRSZXN1bHQ+IHtcbiAgICAgICAgY29uZmlnLm1vZGUgPSBjb25maWcubW9kZSB8fCBUaHlGdWxsc2NyZWVuTW9kZS5pbW1lcnNpdmU7XG4gICAgICAgIGNvbnN0IGZ1bGxzY3JlZW5SZWYgPSBuZXcgVGh5RnVsbHNjcmVlblJlZjxUUmVzdWx0Pih0aGlzLmRvY3VtZW50KTtcbiAgICAgICAgZnVsbHNjcmVlblJlZi5mdWxsc2NyZWVuQ29uZmlnID0gY29uZmlnO1xuICAgICAgICBmdWxsc2NyZWVuUmVmLmxhdW5jaCgpO1xuICAgICAgICB0aGlzLmZ1bGxzY3JlZW5SZWZzLnB1c2goZnVsbHNjcmVlblJlZik7XG4gICAgICAgIGZ1bGxzY3JlZW5SZWYuYWZ0ZXJFeGl0ZWQoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmZ1bGxzY3JlZW5SZWZzLmluZGV4T2YoZnVsbHNjcmVlblJlZik7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZnVsbHNjcmVlblJlZnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bGxzY3JlZW5SZWY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6YCA5Ye65pyA5ZCO5LiA5LiqIFRoeUZ1bGxzY3JlZW5SZWYg55qE5YWo5bGPXG4gICAgICogQHBhcmFtIGNvbmZpZ1xuICAgICAqL1xuICAgIGV4aXQoKSB7XG4gICAgICAgIGNvbnN0IGxhc3RGdWxsc2NyZWVuUmVmID0gdGhpcy5mdWxsc2NyZWVuUmVmc1t0aGlzLmZ1bGxzY3JlZW5SZWZzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsYXN0RnVsbHNjcmVlblJlZi5leGl0KCk7XG4gICAgfVxufVxuIl19
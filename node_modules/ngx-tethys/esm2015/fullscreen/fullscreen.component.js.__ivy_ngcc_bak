import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { ThyFullscreenMode } from './fullscreen.config';
import { ThyFullscreen } from './fullscreen.service';
export class ThyFullscreenComponent {
    constructor(elementRef, service) {
        this.elementRef = elementRef;
        this.service = service;
        this.thyMode = ThyFullscreenMode.immersive;
        this.thyFullscreenChange = new EventEmitter();
        this.ngUnsubscribe$ = new Subject();
        // 点击打开或关闭全屏
        this.handleFullscreen = () => {
            const targetElement = this.elementRef.nativeElement.querySelector('[fullscreen-target]');
            const containerElement = this.elementRef.nativeElement.querySelector('[fullscreen-container]');
            const fullscreen = targetElement.classList.contains('thy-fullscreen-active');
            if (fullscreen) {
                this.service.exit();
            }
            else {
                const fullscreenRef = this.service.launch({
                    mode: this.thyMode,
                    target: targetElement,
                    targetLaunchededClasse: this.thyFullscreenClasses,
                    emulatedContainer: containerElement
                });
                this.thyFullscreenChange.emit(true);
                fullscreenRef.afterExited().subscribe(() => {
                    this.thyFullscreenChange.emit(false);
                });
            }
        };
    }
    ngOnInit() { }
    ngAfterViewInit() {
        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');
        if (btnLaunch) {
            btnLaunch.addEventListener('click', this.handleFullscreen);
        }
    }
    ngOnDestroy() {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');
        if (btnLaunch) {
            btnLaunch.removeEventListener('click', this.handleFullscreen);
        }
    }
}
ThyFullscreenComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-fullscreen, [thyFullscreen]',
                template: "<ng-content> </ng-content>\n"
            },] }
];
ThyFullscreenComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyFullscreen }
];
ThyFullscreenComponent.propDecorators = {
    thyMode: [{ type: Input }],
    thyFullscreenClasses: [{ type: Input }],
    thyFullscreenChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbHNjcmVlbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZnVsbHNjcmVlbi9mdWxsc2NyZWVuLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBS3JELE1BQU0sT0FBTyxzQkFBc0I7SUFTL0IsWUFBb0IsVUFBc0IsRUFBVSxPQUFzQjtRQUF0RCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBZTtRQVJqRSxZQUFPLEdBQXNCLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztRQUl4RCx3QkFBbUIsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUUzRSxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFhdkMsWUFBWTtRQUNKLHFCQUFnQixHQUFHLEdBQUcsRUFBRTtZQUM1QixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUN6RixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQy9GLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFFN0UsSUFBSSxVQUFVLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUN2QjtpQkFBTTtnQkFDSCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztvQkFDdEMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPO29CQUNsQixNQUFNLEVBQUUsYUFBYTtvQkFDckIsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLG9CQUFvQjtvQkFDakQsaUJBQWlCLEVBQUUsZ0JBQWdCO2lCQUN0QyxDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFcEMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7b0JBQ3ZDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3pDLENBQUMsQ0FBQyxDQUFDO2FBQ047UUFDTCxDQUFDLENBQUM7SUFqQzJFLENBQUM7SUFFOUUsUUFBUSxLQUFJLENBQUM7SUFFYixlQUFlO1FBQ1gsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDckYsSUFBSSxTQUFTLEVBQUU7WUFDWCxTQUFTLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQzlEO0lBQ0wsQ0FBQztJQTBCRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRS9CLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3JGLElBQUksU0FBUyxFQUFFO1lBQ1gsU0FBUyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNqRTtJQUNMLENBQUM7OztZQXhESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGlDQUFpQztnQkFDM0Msd0NBQTBDO2FBQzdDOzs7WUFSa0MsVUFBVTtZQUlwQyxhQUFhOzs7c0JBTWpCLEtBQUs7bUNBRUwsS0FBSztrQ0FFTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUaHlGdWxsc2NyZWVuTW9kZSB9IGZyb20gJy4vZnVsbHNjcmVlbi5jb25maWcnO1xuaW1wb3J0IHsgVGh5RnVsbHNjcmVlbiB9IGZyb20gJy4vZnVsbHNjcmVlbi5zZXJ2aWNlJztcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGh5LWZ1bGxzY3JlZW4sIFt0aHlGdWxsc2NyZWVuXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Z1bGxzY3JlZW4uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRoeUZ1bGxzY3JlZW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgQElucHV0KCkgdGh5TW9kZTogVGh5RnVsbHNjcmVlbk1vZGUgPSBUaHlGdWxsc2NyZWVuTW9kZS5pbW1lcnNpdmU7XG5cbiAgICBASW5wdXQoKSB0aHlGdWxsc2NyZWVuQ2xhc3Nlczogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpIHRoeUZ1bGxzY3JlZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIHByaXZhdGUgbmdVbnN1YnNjcmliZSQgPSBuZXcgU3ViamVjdCgpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHNlcnZpY2U6IFRoeUZ1bGxzY3JlZW4pIHt9XG5cbiAgICBuZ09uSW5pdCgpIHt9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGNvbnN0IGJ0bkxhdW5jaCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tmdWxsc2NyZWVuLWxhdW5jaF0nKTtcbiAgICAgICAgaWYgKGJ0bkxhdW5jaCkge1xuICAgICAgICAgICAgYnRuTGF1bmNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVGdWxsc2NyZWVuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIOeCueWHu+aJk+W8gOaIluWFs+mXreWFqOWxj1xuICAgIHByaXZhdGUgaGFuZGxlRnVsbHNjcmVlbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tmdWxsc2NyZWVuLXRhcmdldF0nKTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tmdWxsc2NyZWVuLWNvbnRhaW5lcl0nKTtcbiAgICAgICAgY29uc3QgZnVsbHNjcmVlbiA9IHRhcmdldEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0aHktZnVsbHNjcmVlbi1hY3RpdmUnKTtcblxuICAgICAgICBpZiAoZnVsbHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmV4aXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxzY3JlZW5SZWYgPSB0aGlzLnNlcnZpY2UubGF1bmNoKHtcbiAgICAgICAgICAgICAgICBtb2RlOiB0aGlzLnRoeU1vZGUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXRFbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhcmdldExhdW5jaGVkZWRDbGFzc2U6IHRoaXMudGh5RnVsbHNjcmVlbkNsYXNzZXMsXG4gICAgICAgICAgICAgICAgZW11bGF0ZWRDb250YWluZXI6IGNvbnRhaW5lckVsZW1lbnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnRoeUZ1bGxzY3JlZW5DaGFuZ2UuZW1pdCh0cnVlKTtcblxuICAgICAgICAgICAgZnVsbHNjcmVlblJlZi5hZnRlckV4aXRlZCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50aHlGdWxsc2NyZWVuQ2hhbmdlLmVtaXQoZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubmdVbnN1YnNjcmliZSQubmV4dCgpO1xuICAgICAgICB0aGlzLm5nVW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG5cbiAgICAgICAgY29uc3QgYnRuTGF1bmNoID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignW2Z1bGxzY3JlZW4tbGF1bmNoXScpO1xuICAgICAgICBpZiAoYnRuTGF1bmNoKSB7XG4gICAgICAgICAgICBidG5MYXVuY2gucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUZ1bGxzY3JlZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
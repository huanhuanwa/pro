import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { ThyFullscreenRef } from './fullscreen-ref';
import { ThyFullscreenMode } from './fullscreen.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as ɵngcc0 from '@angular/core';
export class ThyFullscreen {
    constructor(document) {
        this.document = document;
        this.fullscreenRefs = [];
    }
    /**
     * 开始全屏
     * @param config
     */
    launch(config) {
        config.mode = config.mode || ThyFullscreenMode.immersive;
        const fullscreenRef = new ThyFullscreenRef(this.document);
        fullscreenRef.fullscreenConfig = config;
        fullscreenRef.launch();
        this.fullscreenRefs.push(fullscreenRef);
        fullscreenRef.afterExited().subscribe(() => {
            const index = this.fullscreenRefs.indexOf(fullscreenRef);
            if (index > -1) {
                this.fullscreenRefs.splice(index, 1);
            }
        });
        return fullscreenRef;
    }
    /**
     * 退出最后一个 ThyFullscreenRef 的全屏
     * @param config
     */
    exit() {
        const lastFullscreenRef = this.fullscreenRefs[this.fullscreenRefs.length - 1];
        lastFullscreenRef.exit();
    }
}
ThyFullscreen.ɵfac = function ThyFullscreen_Factory(t) { return new (t || ThyFullscreen)(ɵngcc0.ɵɵinject(DOCUMENT)); };
ThyFullscreen.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyFullscreen_Factory() { return new ThyFullscreen(i0.ɵɵinject(i1.DOCUMENT)); }, token: ThyFullscreen, providedIn: "root" });
ThyFullscreen.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFullscreen, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbHNjcmVlbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZnVsbHNjcmVlbi9mdWxsc2NyZWVuLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFBdUIsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM3RTtBQUVzQjs7QUFFdEIsTUFBTSxPQUFPLGFBQWE7QUFDMUIsSUFBSSxZQUF3QyxRQUFhO0FBQUksUUFBakIsYUFBUSxHQUFSLFFBQVEsQ0FBSztBQUFDLFFBRTlDLG1CQUFjLEdBQXVCLEVBQUUsQ0FBQztBQUNwRCxJQUg0RCxDQUFDO0FBQzdELElBR0k7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksTUFBTSxDQUFvQixNQUEyQjtBQUFJLFFBQ3JELE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7QUFDakUsUUFBUSxNQUFNLGFBQWEsR0FBRyxJQUFJLGdCQUFnQixDQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzRSxRQUFRLGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7QUFDaEQsUUFBUSxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDL0IsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoRCxRQUFRLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQ25ELFlBQVksTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDckUsWUFBWSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtBQUM1QixnQkFBZ0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JELGFBQWE7QUFDYixRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsUUFDUSxPQUFPLGFBQWEsQ0FBQztBQUM3QixJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQUk7QUFDUixRQUFRLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RixRQUFRLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pDLElBQUksQ0FBQztBQUNMO3VIQUFDO0FBQ0QsNkxBbENLO0FBQUM7RUFITCxVQUFVLFNBQUMsa0JBQ1IsVUFBVSxFQUFFLE1BQU0sY0FDckIsdkVBRWUsNENBQUMsTUFBTSxTQUFDLFFBQVE7QUFBUTs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeUZ1bGxzY3JlZW5SZWYgfSBmcm9tICcuL2Z1bGxzY3JlZW4tcmVmJztcbmltcG9ydCB7IFRoeUZ1bGxzY3JlZW5Db25maWcsIFRoeUZ1bGxzY3JlZW5Nb2RlIH0gZnJvbSAnLi9mdWxsc2NyZWVuLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGh5RnVsbHNjcmVlbiB7XG4gICAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJvdGVjdGVkIGRvY3VtZW50OiBhbnkpIHt9XG5cbiAgICBwcml2YXRlIGZ1bGxzY3JlZW5SZWZzOiBUaHlGdWxsc2NyZWVuUmVmW10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIOW8gOWni+WFqOWxj1xuICAgICAqIEBwYXJhbSBjb25maWdcbiAgICAgKi9cbiAgICBsYXVuY2g8VFJlc3VsdCA9IHVua25vd24+KGNvbmZpZzogVGh5RnVsbHNjcmVlbkNvbmZpZyk6IFRoeUZ1bGxzY3JlZW5SZWY8VFJlc3VsdD4ge1xuICAgICAgICBjb25maWcubW9kZSA9IGNvbmZpZy5tb2RlIHx8IFRoeUZ1bGxzY3JlZW5Nb2RlLmltbWVyc2l2ZTtcbiAgICAgICAgY29uc3QgZnVsbHNjcmVlblJlZiA9IG5ldyBUaHlGdWxsc2NyZWVuUmVmPFRSZXN1bHQ+KHRoaXMuZG9jdW1lbnQpO1xuICAgICAgICBmdWxsc2NyZWVuUmVmLmZ1bGxzY3JlZW5Db25maWcgPSBjb25maWc7XG4gICAgICAgIGZ1bGxzY3JlZW5SZWYubGF1bmNoKCk7XG4gICAgICAgIHRoaXMuZnVsbHNjcmVlblJlZnMucHVzaChmdWxsc2NyZWVuUmVmKTtcbiAgICAgICAgZnVsbHNjcmVlblJlZi5hZnRlckV4aXRlZCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZnVsbHNjcmVlblJlZnMuaW5kZXhPZihmdWxsc2NyZWVuUmVmKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mdWxsc2NyZWVuUmVmcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnVsbHNjcmVlblJlZjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDpgIDlh7rmnIDlkI7kuIDkuKogVGh5RnVsbHNjcmVlblJlZiDnmoTlhajlsY9cbiAgICAgKiBAcGFyYW0gY29uZmlnXG4gICAgICovXG4gICAgZXhpdCgpIHtcbiAgICAgICAgY29uc3QgbGFzdEZ1bGxzY3JlZW5SZWYgPSB0aGlzLmZ1bGxzY3JlZW5SZWZzW3RoaXMuZnVsbHNjcmVlblJlZnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGxhc3RGdWxsc2NyZWVuUmVmLmV4aXQoKTtcbiAgICB9XG59XG4iXX0=
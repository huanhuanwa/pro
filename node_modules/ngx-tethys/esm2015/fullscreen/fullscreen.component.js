import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { ThyFullscreenMode } from './fullscreen.config';
import { ThyFullscreen } from './fullscreen.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './fullscreen.service';

const _c0 = ["*"];
export class ThyFullscreenComponent {
    constructor(elementRef, service) {
        this.elementRef = elementRef;
        this.service = service;
        this.thyMode = ThyFullscreenMode.immersive;
        this.thyFullscreenChange = new EventEmitter();
        this.ngUnsubscribe$ = new Subject();
        // 点击打开或关闭全屏
        this.handleFullscreen = () => {
            const targetElement = this.elementRef.nativeElement.querySelector('[fullscreen-target]');
            const containerElement = this.elementRef.nativeElement.querySelector('[fullscreen-container]');
            const fullscreen = targetElement.classList.contains('thy-fullscreen-active');
            if (fullscreen) {
                this.service.exit();
            }
            else {
                const fullscreenRef = this.service.launch({
                    mode: this.thyMode,
                    target: targetElement,
                    targetLaunchededClasse: this.thyFullscreenClasses,
                    emulatedContainer: containerElement
                });
                this.thyFullscreenChange.emit(true);
                fullscreenRef.afterExited().subscribe(() => {
                    this.thyFullscreenChange.emit(false);
                });
            }
        };
    }
    ngOnInit() { }
    ngAfterViewInit() {
        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');
        if (btnLaunch) {
            btnLaunch.addEventListener('click', this.handleFullscreen);
        }
    }
    ngOnDestroy() {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');
        if (btnLaunch) {
            btnLaunch.removeEventListener('click', this.handleFullscreen);
        }
    }
}
ThyFullscreenComponent.ɵfac = function ThyFullscreenComponent_Factory(t) { return new (t || ThyFullscreenComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyFullscreen)); };
ThyFullscreenComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFullscreenComponent, selectors: [["thy-fullscreen"], ["", "thyFullscreen", ""]], inputs: { thyMode: "thyMode", thyFullscreenClasses: "thyFullscreenClasses" }, outputs: { thyFullscreenChange: "thyFullscreenChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyFullscreenComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyFullscreenComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyFullscreen }
];
ThyFullscreenComponent.propDecorators = {
    thyMode: [{ type: Input }],
    thyFullscreenClasses: [{ type: Input }],
    thyFullscreenChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFullscreenComponent, [{
        type: Component,
        args: [{
                selector: 'thy-fullscreen, [thyFullscreen]',
                template: "<ng-content> </ng-content>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ThyFullscreen }]; }, { thyMode: [{
            type: Input
        }], thyFullscreenChange: [{
            type: Output
        }], thyFullscreenClasses: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbHNjcmVlbi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mdWxsc2NyZWVuL2Z1bGxzY3JlZW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0FBS3JELE1BQU0sT0FBTyxzQkFBc0I7QUFBRyxJQVNsQyxZQUFvQixVQUFzQixFQUFVLE9BQXNCO0FBQUksUUFBMUQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQVMsWUFBTyxHQUFQLE9BQU8sQ0FBZTtBQUFDLFFBUmxFLFlBQU8sR0FBc0IsaUJBQWlCLENBQUMsU0FBUyxDQUFDO0FBQ3RFLFFBR2Msd0JBQW1CLEdBQTBCLElBQUksWUFBWSxFQUFXLENBQUM7QUFDdkYsUUFDWSxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDM0MsUUFZSSxZQUFZO0FBQ2hCLFFBQVkscUJBQWdCLEdBQUcsR0FBRyxFQUFFO0FBQ3BDLFlBQVEsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDakcsWUFBUSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3ZHLFlBQVEsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNyRixZQUNRLElBQUksVUFBVSxFQUFFO0FBQ3hCLGdCQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEMsYUFBUztBQUFDLGlCQUFLO0FBQ2YsZ0JBQVksTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDdEQsb0JBQWdCLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTztBQUNsQyxvQkFBZ0IsTUFBTSxFQUFFLGFBQWE7QUFDckMsb0JBQWdCLHNCQUFzQixFQUFFLElBQUksQ0FBQyxvQkFBb0I7QUFDakUsb0JBQWdCLGlCQUFpQixFQUFFLGdCQUFnQjtBQUNuRCxpQkFBYSxDQUFDLENBQUM7QUFDZixnQkFDWSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELGdCQUNZLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQ3ZELG9CQUFnQixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JELGdCQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsYUFBUztBQUNULFFBQUksQ0FBQyxDQUFDO0FBQ04sSUFsQ2lGLENBQUM7QUFDbEYsSUFDSSxRQUFRLEtBQUksQ0FBQztBQUNqQixJQUNJLGVBQWU7QUFDbkIsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUM3RixRQUFRLElBQUksU0FBUyxFQUFFO0FBQ3ZCLFlBQVksU0FBUyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2RSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUF5QkksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQyxRQUFRLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDdkMsUUFDUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUM3RixRQUFRLElBQUksU0FBUyxFQUFFO0FBQ3ZCLFlBQVksU0FBUyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMxRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7a0RBekRDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsaUNBQWlDLGtCQUMzQyx3Q0FBMEMsY0FDN0M7Ozs7NkJBQ0k7QUFBQztBQUFnRCxZQVRuQixVQUFVO0FBQUksWUFJeEMsYUFBYTtBQUFHO0FBQUc7QUFFekIsc0JBSUUsS0FBSztBQUFLLG1DQUVWLEtBQUs7QUFBSyxrQ0FFVixNQUFNO0FBQUk7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGh5RnVsbHNjcmVlbk1vZGUgfSBmcm9tICcuL2Z1bGxzY3JlZW4uY29uZmlnJztcbmltcG9ydCB7IFRoeUZ1bGxzY3JlZW4gfSBmcm9tICcuL2Z1bGxzY3JlZW4uc2VydmljZSc7XG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1mdWxsc2NyZWVuLCBbdGh5RnVsbHNjcmVlbl0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9mdWxsc2NyZWVuLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlGdWxsc2NyZWVuQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIEBJbnB1dCgpIHRoeU1vZGU6IFRoeUZ1bGxzY3JlZW5Nb2RlID0gVGh5RnVsbHNjcmVlbk1vZGUuaW1tZXJzaXZlO1xuXG4gICAgQElucHV0KCkgdGh5RnVsbHNjcmVlbkNsYXNzZXM6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKSB0aHlGdWxsc2NyZWVuQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBwcml2YXRlIG5nVW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3QoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBzZXJ2aWNlOiBUaHlGdWxsc2NyZWVuKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7fVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBjb25zdCBidG5MYXVuY2ggPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZnVsbHNjcmVlbi1sYXVuY2hdJyk7XG4gICAgICAgIGlmIChidG5MYXVuY2gpIHtcbiAgICAgICAgICAgIGJ0bkxhdW5jaC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlRnVsbHNjcmVlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDngrnlh7vmiZPlvIDmiJblhbPpl63lhajlsY9cbiAgICBwcml2YXRlIGhhbmRsZUZ1bGxzY3JlZW4gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZnVsbHNjcmVlbi10YXJnZXRdJyk7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZnVsbHNjcmVlbi1jb250YWluZXJdJyk7XG4gICAgICAgIGNvbnN0IGZ1bGxzY3JlZW4gPSB0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygndGh5LWZ1bGxzY3JlZW4tYWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKGZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2VydmljZS5leGl0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmdWxsc2NyZWVuUmVmID0gdGhpcy5zZXJ2aWNlLmxhdW5jaCh7XG4gICAgICAgICAgICAgICAgbW9kZTogdGhpcy50aHlNb2RlLFxuICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0RWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YXJnZXRMYXVuY2hlZGVkQ2xhc3NlOiB0aGlzLnRoeUZ1bGxzY3JlZW5DbGFzc2VzLFxuICAgICAgICAgICAgICAgIGVtdWxhdGVkQ29udGFpbmVyOiBjb250YWluZXJFbGVtZW50XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy50aHlGdWxsc2NyZWVuQ2hhbmdlLmVtaXQodHJ1ZSk7XG5cbiAgICAgICAgICAgIGZ1bGxzY3JlZW5SZWYuYWZ0ZXJFeGl0ZWQoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGh5RnVsbHNjcmVlbkNoYW5nZS5lbWl0KGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLm5nVW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICAgICAgdGhpcy5uZ1Vuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuXG4gICAgICAgIGNvbnN0IGJ0bkxhdW5jaCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tmdWxsc2NyZWVuLWxhdW5jaF0nKTtcbiAgICAgICAgaWYgKGJ0bkxhdW5jaCkge1xuICAgICAgICAgICAgYnRuTGF1bmNoLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVGdWxsc2NyZWVuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
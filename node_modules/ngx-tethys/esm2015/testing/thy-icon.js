import { Sanitizer } from '@angular/core';
import { inject } from '@angular/core/testing';
import { ThyIconRegistry } from 'ngx-tethys/icon';
import { DomSanitizer } from '@angular/platform-browser';
export const bypassSanitizeProvider = {
    provide: Sanitizer,
    useValue: {
        sanitize: (context, html) => html
    }
};
export const defaultInlineIconSet = `
  <svg>
    <defs>
        <svg id="inbox"></svg>
        <svg id="close"></svg>
        <svg id="close-bold"></svg>
        <svg id="calendar-check"></svg>
        <svg id="calendar"></svg>
        <svg id="angle-down"></svg>
        <svg id="check"></svg>
        <svg id="application-fill"></svg>
        <svg id="angle-right"></svg>
        <svg id="minus-circle-fill"></svg>
        <svg id="check-circle-fill"></svg>
        <svg id="waring-fill"></svg>
        <svg id="close-circle-fill"></svg>
        <svg id="question-circle-fill"></svg>
        <svg id="more-bold"></svg>
        <svg id="filter"></svg>
        <svg id="close-circle-bold-fill"></svg>
    </defs>
  </svg>
`;
export const defaultSvgHtml = `
<svg viewBox="0 0 16 16" id="close1" xmlns="http://www.w3.org/2000/svg">
   <path d="M7.978 11.997l-.005.006L2.3 6.33l.83-.831 4.848 4.848L12.826 5.5l.83.83-5.673 5.673-.005-.006z"/>
</svg>`;
export const injectDefaultSvgIconSet = () => {
    inject([ThyIconRegistry, DomSanitizer], (iconRegistry, domSanitizer) => {
        iconRegistry.addSvgIconSetLiteral(domSanitizer.bypassSecurityTrustHtml(defaultInlineIconSet));
    })();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LWljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdGluZy90aHktaWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVksU0FBUyxFQUFtQixNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBYTtJQUM1QyxPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUU7UUFDTixRQUFRLEVBQUUsQ0FBQyxPQUF3QixFQUFFLElBQVksRUFBRSxFQUFFLENBQUMsSUFBSTtLQUM3RDtDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCbkMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRzs7O09BR3ZCLENBQUM7QUFFUixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLEVBQUU7SUFDeEMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsWUFBNkIsRUFBRSxZQUEwQixFQUFFLEVBQUU7UUFDbEcsWUFBWSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7SUFDbEcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNULENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyLCBTYW5pdGl6ZXIsIFNlY3VyaXR5Q29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IFRoeUljb25SZWdpc3RyeSB9IGZyb20gJ25neC10ZXRoeXMvaWNvbic7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuZXhwb3J0IGNvbnN0IGJ5cGFzc1Nhbml0aXplUHJvdmlkZXI6IFByb3ZpZGVyID0ge1xuICAgIHByb3ZpZGU6IFNhbml0aXplcixcbiAgICB1c2VWYWx1ZToge1xuICAgICAgICBzYW5pdGl6ZTogKGNvbnRleHQ6IFNlY3VyaXR5Q29udGV4dCwgaHRtbDogc3RyaW5nKSA9PiBodG1sXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRJbmxpbmVJY29uU2V0ID0gYFxuICA8c3ZnPlxuICAgIDxkZWZzPlxuICAgICAgICA8c3ZnIGlkPVwiaW5ib3hcIj48L3N2Zz5cbiAgICAgICAgPHN2ZyBpZD1cImNsb3NlXCI+PC9zdmc+XG4gICAgICAgIDxzdmcgaWQ9XCJjbG9zZS1ib2xkXCI+PC9zdmc+XG4gICAgICAgIDxzdmcgaWQ9XCJjYWxlbmRhci1jaGVja1wiPjwvc3ZnPlxuICAgICAgICA8c3ZnIGlkPVwiY2FsZW5kYXJcIj48L3N2Zz5cbiAgICAgICAgPHN2ZyBpZD1cImFuZ2xlLWRvd25cIj48L3N2Zz5cbiAgICAgICAgPHN2ZyBpZD1cImNoZWNrXCI+PC9zdmc+XG4gICAgICAgIDxzdmcgaWQ9XCJhcHBsaWNhdGlvbi1maWxsXCI+PC9zdmc+XG4gICAgICAgIDxzdmcgaWQ9XCJhbmdsZS1yaWdodFwiPjwvc3ZnPlxuICAgICAgICA8c3ZnIGlkPVwibWludXMtY2lyY2xlLWZpbGxcIj48L3N2Zz5cbiAgICAgICAgPHN2ZyBpZD1cImNoZWNrLWNpcmNsZS1maWxsXCI+PC9zdmc+XG4gICAgICAgIDxzdmcgaWQ9XCJ3YXJpbmctZmlsbFwiPjwvc3ZnPlxuICAgICAgICA8c3ZnIGlkPVwiY2xvc2UtY2lyY2xlLWZpbGxcIj48L3N2Zz5cbiAgICAgICAgPHN2ZyBpZD1cInF1ZXN0aW9uLWNpcmNsZS1maWxsXCI+PC9zdmc+XG4gICAgICAgIDxzdmcgaWQ9XCJtb3JlLWJvbGRcIj48L3N2Zz5cbiAgICAgICAgPHN2ZyBpZD1cImZpbHRlclwiPjwvc3ZnPlxuICAgICAgICA8c3ZnIGlkPVwiY2xvc2UtY2lyY2xlLWJvbGQtZmlsbFwiPjwvc3ZnPlxuICAgIDwvZGVmcz5cbiAgPC9zdmc+XG5gO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFN2Z0h0bWwgPSBgXG48c3ZnIHZpZXdCb3g9XCIwIDAgMTYgMTZcIiBpZD1cImNsb3NlMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgIDxwYXRoIGQ9XCJNNy45NzggMTEuOTk3bC0uMDA1LjAwNkwyLjMgNi4zM2wuODMtLjgzMSA0Ljg0OCA0Ljg0OEwxMi44MjYgNS41bC44My44My01LjY3MyA1LjY3My0uMDA1LS4wMDZ6XCIvPlxuPC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IGluamVjdERlZmF1bHRTdmdJY29uU2V0ID0gKCkgPT4ge1xuICAgIGluamVjdChbVGh5SWNvblJlZ2lzdHJ5LCBEb21TYW5pdGl6ZXJdLCAoaWNvblJlZ2lzdHJ5OiBUaHlJY29uUmVnaXN0cnksIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKSA9PiB7XG4gICAgICAgIGljb25SZWdpc3RyeS5hZGRTdmdJY29uU2V0TGl0ZXJhbChkb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoZGVmYXVsdElubGluZUljb25TZXQpKTtcbiAgICB9KSgpO1xufTtcbiJdfQ==
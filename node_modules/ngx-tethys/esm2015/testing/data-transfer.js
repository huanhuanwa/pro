function removeFromArray(array, item) {
    const index = array.indexOf(item);
    if (index >= 0) {
        array.splice(index, 1);
    }
}
export class FakeDataTransferItem {
    constructor(file, kind) {
        this.file = file;
        this.kind = kind;
    }
    getAsFile() {
        return this.file;
    }
    getAsString(callback) {
        throw new Error('Method not implemented.');
    }
    webkitGetAsEntry() {
        return this.file;
    }
}
export class FakeDataTransfer {
    constructor(files, items) {
        this.dataByFormat = {};
        this.dropEffect = 'none';
        this.effectAllowed = 'all';
        this.types = [];
        this.getData = function (dataFormat) {
            return this.dataByFormat[dataFormat];
        };
        this.setDragImage = function () {
            // don't do anything (the stub just makes sure there is no error thrown if someone tries to call the method)
        };
        this.files = files;
        this.items = items;
    }
    clearData(dataFormat) {
        if (dataFormat) {
            delete this.dataByFormat[dataFormat];
            removeFromArray(this.types, dataFormat);
        }
        else {
            this.dataByFormat = {};
            this.types = [];
        }
    }
    setData(dataFormat, data) {
        this.dataByFormat[dataFormat] = data;
        if (this.types.indexOf(dataFormat) < 0) {
            this.types.push(dataFormat);
        }
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10cmFuc2Zlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0aW5nL2RhdGEtdHJhbnNmZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxlQUFlLENBQUksS0FBVSxFQUFFLElBQU87SUFDM0MsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7UUFDWixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMxQjtBQUNMLENBQUM7QUFFRCxNQUFNLE9BQU8sb0JBQW9CO0lBTTdCLFlBQVksSUFBVSxFQUFFLElBQVk7UUFDaEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUFnQztRQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELGdCQUFnQjtRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCO0lBUXpCLFlBQVksS0FBYyxFQUFFLEtBQTBCO1FBUHRELGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLGVBQVUsR0FBc0MsTUFBTSxDQUFDO1FBQ3ZELGtCQUFhLEdBQXVHLEtBQUssQ0FBQztRQUUxSCxVQUFLLEdBQWEsRUFBRSxDQUFDO1FBa0JyQixZQUFPLEdBQUcsVUFBUyxVQUFrQjtZQUNqQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDO1FBWUYsaUJBQVksR0FBRztZQUNYLDRHQUE0RztRQUNoSCxDQUFDLENBQUM7UUE5QkUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFZLENBQUM7UUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFZLENBQUM7SUFDOUIsQ0FBQztJQUVELFNBQVMsQ0FBQyxVQUFrQjtRQUN4QixJQUFJLFVBQVUsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNyQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztTQUMzQzthQUFNO1lBQ0gsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDbkI7SUFDTCxDQUFDO0lBTUQsT0FBTyxDQUFDLFVBQWtCLEVBQUUsSUFBWTtRQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUVyQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FLSiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlbW92ZUZyb21BcnJheTxUPihhcnJheTogVFtdLCBpdGVtOiBUKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGYWtlRGF0YVRyYW5zZmVySXRlbSBpbXBsZW1lbnRzIERhdGFUcmFuc2Zlckl0ZW0ge1xuICAgIHByaXZhdGUgZmlsZTogRmlsZTtcblxuICAgIGtpbmQ6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlOiBGaWxlLCBraW5kOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5raW5kID0ga2luZDtcbiAgICB9XG5cbiAgICBnZXRBc0ZpbGUoKTogRmlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGU7XG4gICAgfVxuXG4gICAgZ2V0QXNTdHJpbmcoY2FsbGJhY2s6IEZ1bmN0aW9uU3RyaW5nQ2FsbGJhY2spOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cblxuICAgIHdlYmtpdEdldEFzRW50cnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmFrZURhdGFUcmFuc2ZlciBpbXBsZW1lbnRzIERhdGFUcmFuc2ZlciB7XG4gICAgZGF0YUJ5Rm9ybWF0ID0ge307XG4gICAgZHJvcEVmZmVjdDogJ25vbmUnIHwgJ2NvcHknIHwgJ2xpbmsnIHwgJ21vdmUnID0gJ25vbmUnO1xuICAgIGVmZmVjdEFsbG93ZWQ6ICdub25lJyB8ICdjb3B5JyB8ICdjb3B5TGluaycgfCAnY29weU1vdmUnIHwgJ2xpbmsnIHwgJ2xpbmtNb3ZlJyB8ICdtb3ZlJyB8ICdhbGwnIHwgJ3VuaW5pdGlhbGl6ZWQnID0gJ2FsbCc7XG4gICAgZmlsZXM6IEZpbGVMaXN0O1xuICAgIHR5cGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGl0ZW1zOiBEYXRhVHJhbnNmZXJJdGVtTGlzdDtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGVzPzogRmlsZVtdLCBpdGVtcz86IERhdGFUcmFuc2Zlckl0ZW1bXSkge1xuICAgICAgICB0aGlzLmZpbGVzID0gZmlsZXMgYXMgYW55O1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXMgYXMgYW55O1xuICAgIH1cblxuICAgIGNsZWFyRGF0YShkYXRhRm9ybWF0OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGRhdGFGb3JtYXQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRhdGFCeUZvcm1hdFtkYXRhRm9ybWF0XTtcbiAgICAgICAgICAgIHJlbW92ZUZyb21BcnJheSh0aGlzLnR5cGVzLCBkYXRhRm9ybWF0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YUJ5Rm9ybWF0ID0ge307XG4gICAgICAgICAgICB0aGlzLnR5cGVzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREYXRhID0gZnVuY3Rpb24oZGF0YUZvcm1hdDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFCeUZvcm1hdFtkYXRhRm9ybWF0XTtcbiAgICB9O1xuXG4gICAgc2V0RGF0YShkYXRhRm9ybWF0OiBzdHJpbmcsIGRhdGE6IHN0cmluZykge1xuICAgICAgICB0aGlzLmRhdGFCeUZvcm1hdFtkYXRhRm9ybWF0XSA9IGRhdGE7XG5cbiAgICAgICAgaWYgKHRoaXMudHlwZXMuaW5kZXhPZihkYXRhRm9ybWF0KSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMudHlwZXMucHVzaChkYXRhRm9ybWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHNldERyYWdJbWFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBkb24ndCBkbyBhbnl0aGluZyAodGhlIHN0dWIganVzdCBtYWtlcyBzdXJlIHRoZXJlIGlzIG5vIGVycm9yIHRocm93biBpZiBzb21lb25lIHRyaWVzIHRvIGNhbGwgdGhlIG1ldGhvZClcbiAgICB9O1xufVxuIl19
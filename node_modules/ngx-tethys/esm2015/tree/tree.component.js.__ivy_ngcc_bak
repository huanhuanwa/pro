import { Component, Input, Output, ElementRef, ViewEncapsulation, TemplateRef, EventEmitter, ContentChild, HostBinding, forwardRef } from '@angular/core';
import { ThyTreeIcons } from './tree.class';
import { helpers } from 'ngx-tethys/util';
import { ThyTreeService } from './tree.service';
import { SelectionModel } from '@angular/cdk/collections';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyDropPosition } from 'ngx-tethys/drag-drop';
import { ThyTreeNode } from './tree-node.class';
const treeTypeClassMap = {
    default: ['thy-tree-default'],
    especial: ['thy-tree-especial']
};
export class ThyTreeComponent {
    constructor(elementRef, updateHostClassService, thyTreeService) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.thyTreeService = thyTreeService;
        this._draggable = false;
        this.thyShowExpand = true;
        this.thyMultiple = false;
        this.thyAsync = false;
        this._thyType = 'default';
        this.thyIcons = {};
        this.thyTitleTruncate = true;
        this.thyOnClick = new EventEmitter();
        this.thyOnCheckboxChange = new EventEmitter();
        this.thyOnExpandChange = new EventEmitter();
        this.thyOnDragDrop = new EventEmitter();
        this.thyTreeClass = true;
        this.beforeDragOver = (event) => {
            return this.isShowExpand(event.item) || (!this.isShowExpand(event.item) && event.position !== ThyDropPosition.in);
        };
        this._onTouched = () => { };
        this._onChange = (_) => { };
    }
    set thyNodes(value) {
        this._expandedKeys = this.getExpandedNodes().map(node => node.key);
        this._selectedKeys = this.getSelectedNodes().map(node => node.key);
        this.treeNodes = (value || []).map(node => new ThyTreeNode(node, null, this.thyTreeService));
        this.thyTreeService.treeNodes = this.treeNodes;
        this.thyTreeService.expandTreeNodes(this._expandedKeys);
        this._selectTreeNodes(this._selectedKeys);
    }
    set thyDraggable(value) {
        this._draggable = value;
    }
    get thyDraggable() {
        return this._draggable;
    }
    set thyCheckStateResolve(resolve) {
        this.thyTreeService.setCheckStateResolve(resolve);
    }
    set thyType(type) {
        this._thyType = type;
        if (type === 'especial') {
            this.thyIcons = { expand: 'minus-square', collapse: 'plus-square' };
        }
    }
    get thyType() {
        return this._thyType;
    }
    set thySelectedKeys(keys) {
        this._selectedKeys = keys;
    }
    set templateRef(template) {
        if (template) {
            this._templateRef = template;
        }
    }
    get templateRef() {
        return this._templateRef;
    }
    set emptyChildrenTemplateRef(template) {
        if (template) {
            this._emptyChildrenTemplateRef = template;
        }
    }
    get emptyChildrenTemplateRef() {
        return this._emptyChildrenTemplateRef;
    }
    ngOnChanges(changes) {
        if (changes.thyType && !changes.thyType.isFirstChange()) {
            this._setTreeType();
        }
        if (changes.thyMultiple && !changes.thyMultiple.isFirstChange()) {
            this._instanceSelectionModel();
        }
    }
    ngOnInit() {
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this._setTreeType();
        this._setTreeSize();
        this._instanceSelectionModel();
        this._selectTreeNodes(this._selectedKeys);
    }
    _setTreeType() {
        if (this.thyType) {
            this.updateHostClassService.addClass(treeTypeClassMap[this.thyType]);
        }
    }
    _setTreeSize() {
        if (this.thySize) {
            this.updateHostClassService.addClass(`thy-tree-${this.thySize}`);
        }
    }
    _instanceSelectionModel() {
        this._selectionModel = new SelectionModel(this.thyMultiple);
    }
    _selectTreeNodes(keys) {
        (keys || []).forEach(key => {
            const node = this.thyTreeService.getTreeNode(key);
            if (node) {
                this.selectTreeNode(this.thyTreeService.getTreeNode(key));
            }
        });
    }
    isSelected(node) {
        return this._selectionModel.isSelected(node);
    }
    toggleTreeNode(node) {
        if (node && !node.isDisabled) {
            this._selectionModel.toggle(node);
        }
    }
    trackByFn(index, item) {
        return item.key || index;
    }
    onDragStart(event) {
        if (this.isShowExpand(event.item) && event.item.isExpanded) {
            event.item.setExpanded(false);
        }
    }
    onDragDrop(event) {
        if (!this.isShowExpand(event.item) && event.position === ThyDropPosition.in) {
            return;
        }
        const parent = event.previousItem.parentNode;
        if (parent) {
            parent.children = parent.children.filter(item => item !== event.previousItem);
        }
        else {
            this.treeNodes = this.treeNodes.filter(item => item !== event.previousItem);
        }
        switch (event.position) {
            case ThyDropPosition.in:
                event.item.addChildren(event.previousItem.origin);
                break;
            case ThyDropPosition.after:
            case ThyDropPosition.before:
                const targetParent = event.item.parentNode;
                const index = event.position === ThyDropPosition.before ? 0 : 1;
                if (targetParent) {
                    targetParent.addChildren(event.previousItem.origin, targetParent.children.indexOf(event.item) + index);
                }
                else {
                    this.treeNodes.splice(this.treeNodes.indexOf(event.item) + index, 0, event.previousItem);
                }
                break;
        }
        this.thyTreeService.resetSortedTreeNodes(this.treeNodes);
        let afterNode = null;
        let targetNode = null;
        if (event.position === ThyDropPosition.before) {
            afterNode = event.containerItems[event.currentIndex - 1];
            targetNode = event.item.parentNode;
        }
        else if (event.position === ThyDropPosition.after) {
            afterNode = event.containerItems[event.currentIndex];
            targetNode = event.item.parentNode;
        }
        else {
            afterNode = event.item.children[event.item.children.length - 2];
            targetNode = event.item;
        }
        this.thyOnDragDrop.emit({
            event,
            currentIndex: event.currentIndex,
            dragNode: event.previousItem,
            targetNode: targetNode,
            afterNode: afterNode
        });
    }
    isShowExpand(node) {
        if (helpers.isFunction(this.thyShowExpand)) {
            return this.thyShowExpand(node);
        }
        else {
            return this.thyShowExpand;
        }
    }
    writeValue(value) {
        this.thyNodes = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // region Public Functions
    selectTreeNode(node) {
        this._selectionModel.select(node);
    }
    getRootNodes() {
        return this.treeNodes;
    }
    getTreeNode(key) {
        return this.thyTreeService.getTreeNode(key);
    }
    getSelectedNode() {
        return this._selectionModel ? this._selectionModel.selected[0] : null;
    }
    getSelectedNodes() {
        return this._selectionModel ? this._selectionModel.selected : [];
    }
    getExpandedNodes() {
        return this.thyTreeService.getExpandedNodes();
    }
    getCheckedNodes() {
        return this.thyTreeService.getCheckedNodes();
    }
    addTreeNode(node, parent, index = -1) {
        if (parent) {
            parent.addChildren(node, index);
        }
        else {
            if (index > -1) {
                this.treeNodes.splice(index, 0, new ThyTreeNode(node, null, this.thyTreeService));
            }
            else {
                this.treeNodes.push(new ThyTreeNode(node, null, this.thyTreeService));
            }
        }
    }
    deleteTreeNode(node) {
        if (this.isSelected(node)) {
            this._selectionModel.toggle(node);
        }
        this.thyTreeService.deleteTreeNode(node);
    }
    expandAllNodes() {
        const nodes = this.getRootNodes();
        nodes.forEach(n => n.setExpanded(true, true));
    }
    collapsedAllNodes() {
        const nodes = this.getRootNodes();
        nodes.forEach(n => n.setExpanded(false, true));
    }
}
ThyTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tree',
                template: "<div\n  [thyDropContainer]=\"treeNodes\"\n  [thyDropContainerDisabled]=\"!thyDraggable\"\n  [thyBeforeDragStart]=\"thyBeforeDragStart\"\n  [thyBeforeDragOver]=\"beforeDragOver\"\n  [thyBeforeDragDrop]=\"thyBeforeDragDrop\"\n  (thyDragStarted)=\"onDragStart($event)\"\n  (thyDragDropped)=\"onDragDrop($event)\"\n>\n  <thy-tree-node\n    [thyDrag]=\"node\"\n    *ngFor=\"let node of treeNodes; trackBy: trackByFn; let i = index\"\n    [node]=\"node\"\n    [templateRef]=\"templateRef\"\n    [emptyChildrenTemplateRef]=\"emptyChildrenTemplate\"\n    [thyAsync]=\"thyAsync\"\n    [thyDraggable]=\"thyDraggable\"\n    [thyCheckable]=\"thyCheckable\"\n    [thyMultiple]=\"thyMultiple\"\n    [thyTitleTruncate]=\"thyTitleTruncate\"\n    (thyOnClick)=\"thyOnClick.emit($event)\"\n    (thyOnExpandChange)=\"thyOnExpandChange.emit($event)\"\n    (thyOnCheckboxChange)=\"thyOnCheckboxChange.emit($event)\"\n  >\n  </thy-tree-node>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyTreeComponent),
                        multi: true
                    },
                    ThyTreeService,
                    UpdateHostClassService
                ]
            },] }
];
ThyTreeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService },
    { type: ThyTreeService }
];
ThyTreeComponent.propDecorators = {
    thyNodes: [{ type: Input }],
    thyShowExpand: [{ type: Input }],
    thyMultiple: [{ type: HostBinding, args: [`class.thy-multiple-selection-list`,] }, { type: Input }],
    thyDraggable: [{ type: HostBinding, args: ['class.thy-tree-draggable',] }, { type: Input }],
    thyCheckable: [{ type: Input }],
    thyCheckStateResolve: [{ type: Input }],
    thyAsync: [{ type: Input }],
    thyType: [{ type: Input }],
    thyIcons: [{ type: Input }],
    thySize: [{ type: Input }],
    thyTitleTruncate: [{ type: Input }],
    thySelectedKeys: [{ type: Input }],
    thyBeforeDragStart: [{ type: Input }],
    thyBeforeDragDrop: [{ type: Input }],
    thyOnClick: [{ type: Output }],
    thyOnCheckboxChange: [{ type: Output }],
    thyOnExpandChange: [{ type: Output }],
    thyOnDragDrop: [{ type: Output }],
    templateRef: [{ type: ContentChild, args: ['treeNodeTemplate', { static: true },] }],
    emptyChildrenTemplate: [{ type: ContentChild, args: ['emptyChildrenTemplate', { static: true },] }],
    thyTreeClass: [{ type: HostBinding, args: ['class.thy-tree',] }]
};
//# sourceMappingURL=data:application/json;base64,
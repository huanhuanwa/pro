import { Injectable } from '@angular/core';
import { ThyTreeNodeCheckState } from './tree.class';
import { Subject } from 'rxjs';
import { coerceArray } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
function checkStateResolve(node) {
    const checkedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);
    const unCheckedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.unchecked);
    if (checkedNodes.length === node.children.length) {
        return ThyTreeNodeCheckState.checked;
    }
    else if (unCheckedNodes.length === node.children.length) {
        return ThyTreeNodeCheckState.unchecked;
    }
    else {
        return ThyTreeNodeCheckState.indeterminate;
    }
}
export class ThyTreeService {
    constructor() {
        this.checkStateResolve = checkStateResolve;
        this.$statusChange = new Subject();
    }
    _getParallelTreeNodes(nodes, list = []) {
        (nodes || []).forEach(node => {
            list.push(node);
            this._getParallelTreeNodes(node.children || [], list);
        });
        return list;
    }
    setCheckStateResolve(resolve = checkStateResolve) {
        this.checkStateResolve = resolve;
    }
    resetSortedTreeNodes(treeNodes, parent) {
        treeNodes.forEach(node => {
            node.level = node.parentNode ? node.parentNode.level + 1 : 0;
            node.origin.children = node.children.map(n => n.origin);
            node.parentNode = parent;
            this.resetSortedTreeNodes(node.children, node);
        });
    }
    getTreeNode(key) {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.find(n => n.key === key);
    }
    getExpandedNodes() {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.filter(n => n.isExpanded);
    }
    getCheckedNodes() {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);
    }
    deleteTreeNode(node) {
        const children = node.parentNode ? node.parentNode.children : this.treeNodes;
        const index = children.findIndex(n => n.key === node.key);
        if (index > -1) {
            children.splice(index, 1);
        }
    }
    expandTreeNodes(keyOrKeys) {
        const keys = coerceArray(keyOrKeys);
        const needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(node => {
            return keys.indexOf(node.key) > -1;
        });
        needExpandNodes.forEach(node => {
            node.setExpanded(true);
        });
    }
    statusChanged() {
        return this.$statusChange.asObservable();
    }
    // 设置节点选中状态
    setNodeChecked(node, checked, propagateUp = true, propagateDown = true) {
        node.isChecked = checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;
        node.origin.checked = checked;
        if (propagateDown && node.children) {
            node.children.forEach(subNode => {
                this.setNodeChecked(subNode, checked, false, true);
            });
        }
        if (propagateUp) {
            this.syncNodeCheckState(node.parentNode);
        }
    }
    syncNodeCheckState(node) {
        if (node) {
            node.isChecked = this.checkStateResolve(node);
            this.syncNodeCheckState(node.parentNode);
        }
    }
    ngOnDestroy() {
        this.$statusChange.complete();
        this.$statusChange = null;
    }
}
ThyTreeService.ɵfac = function ThyTreeService_Factory(t) { return new (t || ThyTreeService)(); };
ThyTreeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyTreeService, factory: ThyTreeService.ɵfac });
ThyTreeService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdHJlZS90cmVlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRTlDLFNBQVMsaUJBQWlCLENBQUMsSUFBaUI7QUFDNUMsSUFBSSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUsscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbEcsSUFBSSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUsscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdEcsSUFBSSxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDdEQsUUFBUSxPQUFPLHFCQUFxQixDQUFDLE9BQU8sQ0FBQztBQUM3QyxLQUFLO0FBQUMsU0FBSyxJQUFJLGNBQWMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDL0QsUUFBUSxPQUFPLHFCQUFxQixDQUFDLFNBQVMsQ0FBQztBQUMvQyxLQUFLO0FBQUMsU0FBSztBQUNYLFFBQVEsT0FBTyxxQkFBcUIsQ0FBQyxhQUFhLENBQUM7QUFDbkQsS0FBSztBQUNMLENBQUM7QUFHRCxNQUFNLE9BQU8sY0FBYztBQUFHLElBTzFCO0FBQWdCLFFBSlIsc0JBQWlCLEdB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RUFBRTtBQUM1QyxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzVDLGdCQUFnQixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ25FLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDZixTQUFTO0FBQ1QsUUFBUSxJQUFJLFdBQVcsRUFBRTtBQUN6QixZQUFZLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ1csa0JBQWtCLENBQUMsSUFBaUI7QUFDL0MsUUFBUSxJQUFJLElBQUksRUFBRTtBQUNsQixZQUFZLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFELFlBQVksSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQUssUUFDWixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3RDLFFBQVEsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDbEMsSUFBSSxDQUFDO0FBQ0w7MENBN0ZDLFVBQVU7MEdBQ1Q7QUFBQzs7O2dEQUF5QztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaHlUcmVlTm9kZUNoZWNrU3RhdGUgfSBmcm9tICcuL3RyZWUuY2xhc3MnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVGh5VHJlZU5vZGUgfSBmcm9tICcuL3RyZWUtbm9kZS5jbGFzcyc7XG5pbXBvcnQgeyBjb2VyY2VBcnJheSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbmZ1bmN0aW9uIGNoZWNrU3RhdGVSZXNvbHZlKG5vZGU6IFRoeVRyZWVOb2RlKSB7XG4gICAgY29uc3QgY2hlY2tlZE5vZGVzID0gbm9kZS5jaGlsZHJlbi5maWx0ZXIobiA9PiBuLmlzQ2hlY2tlZCA9PT0gVGh5VHJlZU5vZGVDaGVja1N0YXRlLmNoZWNrZWQpO1xuICAgIGNvbnN0IHVuQ2hlY2tlZE5vZGVzID0gbm9kZS5jaGlsZHJlbi5maWx0ZXIobiA9PiBuLmlzQ2hlY2tlZCA9PT0gVGh5VHJlZU5vZGVDaGVja1N0YXRlLnVuY2hlY2tlZCk7XG4gICAgaWYgKGNoZWNrZWROb2Rlcy5sZW5ndGggPT09IG5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBUaHlUcmVlTm9kZUNoZWNrU3RhdGUuY2hlY2tlZDtcbiAgICB9IGVsc2UgaWYgKHVuQ2hlY2tlZE5vZGVzLmxlbmd0aCA9PT0gbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFRoeVRyZWVOb2RlQ2hlY2tTdGF0ZS51bmNoZWNrZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRoeVRyZWVOb2RlQ2hlY2tTdGF0ZS5pbmRldGVybWluYXRlO1xuICAgIH1cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRoeVRyZWVTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwdWJsaWMgdHJlZU5vZGVzOiBUaHlUcmVlTm9kZVtdO1xuXG4gICAgcHJpdmF0ZSBjaGVja1N0YXRlUmVzb2x2ZTogKG5vZGU6IFRoeVRyZWVOb2RlKSA9PiBUaHlUcmVlTm9kZUNoZWNrU3RhdGUgPSBjaGVja1N0YXRlUmVzb2x2ZTtcblxuICAgICRzdGF0dXNDaGFuZ2UgPSBuZXcgU3ViamVjdDxUaHlUcmVlRm9ybWF0RW1pdEV2ZW50PigpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgcHJpdmF0ZSBfZ2V0UGFyYWxsZWxUcmVlTm9kZXMobm9kZXM6IFRoeVRyZWVOb2RlW10sIGxpc3Q6IFRoeVRyZWVOb2RlW10gPSBbXSkge1xuICAgICAgICAobm9kZXMgfHwgW10pLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICBsaXN0LnB1c2gobm9kZSk7XG4gICAgICAgICAgICB0aGlzLl9nZXRQYXJhbGxlbFRyZWVOb2Rlcyhub2RlLmNoaWxkcmVuIHx8IFtdLCBsaXN0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIHNldENoZWNrU3RhdGVSZXNvbHZlKHJlc29sdmU6IChub2RlOiBUaHlUcmVlTm9kZSkgPT4gVGh5VHJlZU5vZGVDaGVja1N0YXRlID0gY2hlY2tTdGF0ZVJlc29sdmUpIHtcbiAgICAgICAgdGhpcy5jaGVja1N0YXRlUmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0U29ydGVkVHJlZU5vZGVzKHRyZWVOb2RlczogVGh5VHJlZU5vZGVbXSwgcGFyZW50PzogVGh5VHJlZU5vZGUpIHtcbiAgICAgICAgdHJlZU5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICBub2RlLmxldmVsID0gbm9kZS5wYXJlbnROb2RlID8gbm9kZS5wYXJlbnROb2RlLmxldmVsICsgMSA6IDA7XG4gICAgICAgICAgICBub2RlLm9yaWdpbi5jaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4ubWFwKG4gPT4gbi5vcmlnaW4pO1xuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlID0gcGFyZW50O1xuICAgICAgICAgICAgdGhpcy5yZXNldFNvcnRlZFRyZWVOb2Rlcyhub2RlLmNoaWxkcmVuLCBub2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRyZWVOb2RlKGtleTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGFsbE5vZGVzID0gdGhpcy5fZ2V0UGFyYWxsZWxUcmVlTm9kZXModGhpcy50cmVlTm9kZXMpO1xuICAgICAgICByZXR1cm4gYWxsTm9kZXMuZmluZChuID0+IG4ua2V5ID09PSBrZXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRFeHBhbmRlZE5vZGVzKCk6IFRoeVRyZWVOb2RlW10ge1xuICAgICAgICBjb25zdCBhbGxOb2RlcyA9IHRoaXMuX2dldFBhcmFsbGVsVHJlZU5vZGVzKHRoaXMudHJlZU5vZGVzKTtcbiAgICAgICAgcmV0dXJuIGFsbE5vZGVzLmZpbHRlcihuID0+IG4uaXNFeHBhbmRlZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENoZWNrZWROb2RlcygpOiBUaHlUcmVlTm9kZVtdIHtcbiAgICAgICAgY29uc3QgYWxsTm9kZXMgPSB0aGlzLl9nZXRQYXJhbGxlbFRyZWVOb2Rlcyh0aGlzLnRyZWVOb2Rlcyk7XG4gICAgICAgIHJldHVybiBhbGxOb2Rlcy5maWx0ZXIobiA9PiBuLmlzQ2hlY2tlZCA9PT0gVGh5VHJlZU5vZGVDaGVja1N0YXRlLmNoZWNrZWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWxldGVUcmVlTm9kZShub2RlOiBUaHlUcmVlTm9kZSkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUucGFyZW50Tm9kZSA/IG5vZGUucGFyZW50Tm9kZS5jaGlsZHJlbiA6IHRoaXMudHJlZU5vZGVzO1xuICAgICAgICBjb25zdCBpbmRleCA9IGNoaWxkcmVuLmZpbmRJbmRleChuID0+IG4ua2V5ID09PSBub2RlLmtleSk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBjaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGV4cGFuZFRyZWVOb2RlcyhrZXlPcktleXM6IHN0cmluZyB8IG51bWJlciB8IChzdHJpbmcgfCBudW1iZXIpW10pIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IGNvZXJjZUFycmF5KGtleU9yS2V5cyk7XG4gICAgICAgIGNvbnN0IG5lZWRFeHBhbmROb2RlcyA9IHRoaXMuX2dldFBhcmFsbGVsVHJlZU5vZGVzKHRoaXMudHJlZU5vZGVzKS5maWx0ZXIobm9kZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ga2V5cy5pbmRleE9mKG5vZGUua2V5KSA+IC0xO1xuICAgICAgICB9KTtcbiAgICAgICAgbmVlZEV4cGFuZE5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICBub2RlLnNldEV4cGFuZGVkKHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdHVzQ2hhbmdlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHN0YXR1c0NoYW5nZS5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICAvLyDorr7nva7oioLngrnpgInkuK3nirbmgIFcbiAgICBwdWJsaWMgc2V0Tm9kZUNoZWNrZWQobm9kZTogVGh5VHJlZU5vZGUsIGNoZWNrZWQ6IGJvb2xlYW4sIHByb3BhZ2F0ZVVwID0gdHJ1ZSwgcHJvcGFnYXRlRG93biA9IHRydWUpIHtcbiAgICAgICAgbm9kZS5pc0NoZWNrZWQgPSBjaGVja2VkID8gVGh5VHJlZU5vZGVDaGVja1N0YXRlLmNoZWNrZWQgOiBUaHlUcmVlTm9kZUNoZWNrU3RhdGUudW5jaGVja2VkO1xuICAgICAgICBub2RlLm9yaWdpbi5jaGVja2VkID0gY2hlY2tlZDtcbiAgICAgICAgaWYgKHByb3BhZ2F0ZURvd24gJiYgbm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKHN1Yk5vZGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Tm9kZUNoZWNrZWQoc3ViTm9kZSwgY2hlY2tlZCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BhZ2F0ZVVwKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmNOb2RlQ2hlY2tTdGF0ZShub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN5bmNOb2RlQ2hlY2tTdGF0ZShub2RlOiBUaHlUcmVlTm9kZSkge1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5pc0NoZWNrZWQgPSB0aGlzLmNoZWNrU3RhdGVSZXNvbHZlKG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5zeW5jTm9kZUNoZWNrU3RhdGUobm9kZS5wYXJlbnROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLiRzdGF0dXNDaGFuZ2UuY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy4kc3RhdHVzQ2hhbmdlID0gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGh5VHJlZUZvcm1hdEVtaXRFdmVudCB7XG4gICAgZXZlbnROYW1lOiBzdHJpbmc7XG4gICAgbm9kZTogVGh5VHJlZU5vZGU7XG4gICAgZXZlbnQ/OiBNb3VzZUV2ZW50IHwgRHJhZ0V2ZW50O1xufVxuIl19
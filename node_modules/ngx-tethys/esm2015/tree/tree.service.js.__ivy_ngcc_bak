import { Injectable } from '@angular/core';
import { ThyTreeNodeCheckState } from './tree.class';
import { Subject } from 'rxjs';
import { coerceArray } from 'ngx-tethys/util';
function checkStateResolve(node) {
    const checkedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);
    const unCheckedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.unchecked);
    if (checkedNodes.length === node.children.length) {
        return ThyTreeNodeCheckState.checked;
    }
    else if (unCheckedNodes.length === node.children.length) {
        return ThyTreeNodeCheckState.unchecked;
    }
    else {
        return ThyTreeNodeCheckState.indeterminate;
    }
}
export class ThyTreeService {
    constructor() {
        this.checkStateResolve = checkStateResolve;
        this.$statusChange = new Subject();
    }
    _getParallelTreeNodes(nodes, list = []) {
        (nodes || []).forEach(node => {
            list.push(node);
            this._getParallelTreeNodes(node.children || [], list);
        });
        return list;
    }
    setCheckStateResolve(resolve = checkStateResolve) {
        this.checkStateResolve = resolve;
    }
    resetSortedTreeNodes(treeNodes, parent) {
        treeNodes.forEach(node => {
            node.level = node.parentNode ? node.parentNode.level + 1 : 0;
            node.origin.children = node.children.map(n => n.origin);
            node.parentNode = parent;
            this.resetSortedTreeNodes(node.children, node);
        });
    }
    getTreeNode(key) {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.find(n => n.key === key);
    }
    getExpandedNodes() {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.filter(n => n.isExpanded);
    }
    getCheckedNodes() {
        const allNodes = this._getParallelTreeNodes(this.treeNodes);
        return allNodes.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);
    }
    deleteTreeNode(node) {
        const children = node.parentNode ? node.parentNode.children : this.treeNodes;
        const index = children.findIndex(n => n.key === node.key);
        if (index > -1) {
            children.splice(index, 1);
        }
    }
    expandTreeNodes(keyOrKeys) {
        const keys = coerceArray(keyOrKeys);
        const needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(node => {
            return keys.indexOf(node.key) > -1;
        });
        needExpandNodes.forEach(node => {
            node.setExpanded(true);
        });
    }
    statusChanged() {
        return this.$statusChange.asObservable();
    }
    // 设置节点选中状态
    setNodeChecked(node, checked, propagateUp = true, propagateDown = true) {
        node.isChecked = checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;
        node.origin.checked = checked;
        if (propagateDown && node.children) {
            node.children.forEach(subNode => {
                this.setNodeChecked(subNode, checked, false, true);
            });
        }
        if (propagateUp) {
            this.syncNodeCheckState(node.parentNode);
        }
    }
    syncNodeCheckState(node) {
        if (node) {
            node.isChecked = this.checkStateResolve(node);
            this.syncNodeCheckState(node.parentNode);
        }
    }
    ngOnDestroy() {
        this.$statusChange.complete();
        this.$statusChange = null;
    }
}
ThyTreeService.decorators = [
    { type: Injectable }
];
ThyTreeService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,
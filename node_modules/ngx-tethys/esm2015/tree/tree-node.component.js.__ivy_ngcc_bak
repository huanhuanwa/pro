import { Component, ViewEncapsulation, ContentChild, TemplateRef, Input, HostBinding, ViewChild, ElementRef, Output, EventEmitter, NgZone, ChangeDetectorRef } from '@angular/core';
import { ThyTreeComponent } from './tree.component';
import { ThyTreeNodeCheckState } from './tree.class';
import { ThyTreeNode } from './tree-node.class';
import { ThyTreeService } from './tree.service';
import { takeUntil, filter } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class ThyTreeNodeComponent {
    constructor(root, thyTreeService, ngZone, cdr) {
        this.root = root;
        this.thyTreeService = thyTreeService;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.thyAsync = false;
        this.thyMultiple = false;
        this.thyDraggable = false;
        this.thyCheckable = false;
        this.thyOnClick = new EventEmitter();
        this.thyOnExpandChange = new EventEmitter();
        this.thyOnCheckboxChange = new EventEmitter();
        this.thyTreeNodeClass = true;
        this.destroy$ = new Subject();
        this.checkState = ThyTreeNodeCheckState;
        this.thyTreeService
            .statusChanged()
            .pipe(filter(data => data.node.key === this.node.key), takeUntil(this.destroy$))
            .subscribe(() => {
            this.markForCheck();
        });
    }
    get nodeIcon() {
        return this.node.origin.icon;
    }
    get nodeIconStyle() {
        return this.node.origin.iconStyle;
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    changeDragIconVisibility(event, showDragIcon) {
        const nodeElement = event.target;
        const dragIcon = nodeElement.querySelector('.thy-tree-drag-icon');
        if (dragIcon) {
            dragIcon.style.visibility = showDragIcon ? 'visible' : 'hidden';
        }
    }
    nodeMouseEnter(event) {
        if (!this.root.thyDraggable || this.node.isDisabled) {
            return;
        }
        else if (this.root.thyDraggable && !this.root.thyBeforeDragStart) {
            this.changeDragIconVisibility(event, true);
        }
        else {
            const containerItems = this.node.getParentNode() ? this.node.getParentNode().getChildren() : this.root.treeNodes;
            const dragStartEvent = {
                event: event,
                item: this.node,
                containerItems,
                currentIndex: containerItems.indexOf(this.node)
            };
            this.changeDragIconVisibility(event, this.root.thyBeforeDragStart(dragStartEvent));
        }
    }
    nodeMouseLeave(event) {
        if (!this.root.thyDraggable || this.node.isDisabled) {
            return;
        }
        else {
            this.changeDragIconVisibility(event, false);
        }
    }
    clickNode(event) {
        if (!this.root.thyMultiple) {
            this.root.selectTreeNode(this.node);
        }
        else {
            this.root.toggleTreeNode(this.node);
        }
        this.thyOnClick.emit({
            eventName: 'click',
            event: event,
            node: this.node
        });
    }
    clickNodeCheck(event) {
        event.stopPropagation();
        if (this.node.isChecked === ThyTreeNodeCheckState.unchecked || this.node.isChecked === ThyTreeNodeCheckState.indeterminate) {
            this.node.setChecked(true);
        }
        else {
            this.node.setChecked(false);
        }
        this.thyOnCheckboxChange.emit({
            eventName: 'checkboxChange',
            event: event,
            node: this.node
        });
    }
    expandNode(event) {
        event.stopPropagation();
        this.node.setExpanded(!this.node.isExpanded);
        if (this.root.thyShowExpand) {
            this.thyOnExpandChange.emit({
                eventName: 'expand',
                event: event,
                node: this.node
            });
            if (this.thyAsync && this.node.children.length === 0) {
                this.node.setLoading(true);
            }
        }
    }
    isShowExpand(node) {
        return this.root.isShowExpand(node);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ThyTreeNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tree-node',
                template: "<div\n  thyDragContent\n  class=\"thy-tree-node-wrapper thy-sortable-item\"\n  [class.active]=\"root.isSelected(node)\"\n  [class.disabled]=\"node.isDisabled\"\n  (click)=\"clickNode($event)\"\n  (mouseenter)=\"nodeMouseEnter($event)\"\n  (mouseleave)=\"nodeMouseLeave($event)\"\n>\n  <span *ngIf=\"thyDraggable\" class=\"thy-tree-drag-icon thy-sortable-handle\">\n    <thy-icon thyIconName=\"drag\"></thy-icon>\n  </span>\n  <span class=\"thy-tree-expand\" (click)=\"expandNode($event)\">\n    <ng-container *ngIf=\"isShowExpand(node)\">\n      <ng-container *ngIf=\"(node.children && node.children.length > 0) || thyAsync || emptyChildrenTemplateRef\">\n        <thy-icon\n          *ngIf=\"root.thyIcons?.expand && root.thyIcons?.collapse; else defaultIcon\"\n          class=\"thy-tree-expand-icon\"\n          [thyIconName]=\"node.isExpanded ? root.thyIcons.expand : root.thyIcons.collapse\"\n        ></thy-icon>\n        <ng-template #defaultIcon>\n          <thy-icon class=\"thy-tree-expand-icon\" [class.collapse]=\"!node.isExpanded\" thyIconName=\"caret-right-down\"></thy-icon>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n  </span>\n\n  <span class=\"thy-tree-node-content\">\n    <input\n      *ngIf=\"thyCheckable\"\n      type=\"checkbox\"\n      class=\"thy-tree-node-check\"\n      [class.form-check-indeterminate]=\"node.isChecked === checkState.indeterminate\"\n      [checked]=\"node.isChecked === checkState.checked\"\n      [disabled]=\"node.isDisabled\"\n      (click)=\"clickNodeCheck($event)\"\n    />\n    <ng-container *ngIf=\"!templateRef\">\n      <ng-container *ngIf=\"nodeIcon\">\n        <span class=\"thy-tree-node-icon\"> <i [ngClass]=\"nodeIcon\" [ngStyle]=\"nodeIconStyle\"></i></span>\n      </ng-container>\n      <span [title]=\"node.title\" class=\"thy-tree-node-title\" [class.truncate]=\"thyTitleTruncate\"> {{ node.title }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"templateRef\">\n      <ng-template\n        [ngTemplateOutlet]=\"templateRef\"\n        [ngTemplateOutletContext]=\"{ $implicit: node, node: node, origin: node?.origin }\"\n      ></ng-template>\n    </ng-container>\n  </span>\n</div>\n<div\n  class=\"thy-tree-node-children\"\n  *ngIf=\"isShowExpand(node) && node.isExpanded\"\n  [thyDropContainer]=\"node.children\"\n  [thyDropContainerDisabled]=\"!root.thyDraggable\"\n  [thyBeforeDragStart]=\"root.thyBeforeDragStart\"\n  [thyBeforeDragOver]=\"root.beforeDragOver\"\n  [thyBeforeDragDrop]=\"root.thyBeforeDragDrop\"\n  (thyDragDropped)=\"root.onDragDrop($event)\"\n  (thyDragStarted)=\"root.onDragStart($event)\"\n>\n  <thy-tree-node\n    *ngFor=\"let node of node.children; trackBy: root.trackByFn; let i = index\"\n    [node]=\"node\"\n    [thyDrag]=\"node\"\n    [templateRef]=\"templateRef\"\n    [thyAsync]=\"thyAsync\"\n    [thyMultiple]=\"thyMultiple\"\n    [thyDraggable]=\"thyDraggable\"\n    [thyCheckable]=\"thyCheckable\"\n    [thyTitleTruncate]=\"thyTitleTruncate\"\n    (thyOnClick)=\"thyOnClick.emit($event)\"\n    (thyOnCheckboxChange)=\"thyOnCheckboxChange.emit($event)\"\n    (thyOnExpandChange)=\"thyOnExpandChange.emit($event)\"\n  >\n  </thy-tree-node>\n  <ng-container *ngIf=\"thyAsync\">\n    <thy-loading *ngIf=\"node.isLoading\" [thyDone]=\"!node.isLoading\"></thy-loading>\n  </ng-container>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTreeNodeComponent.ctorParameters = () => [
    { type: ThyTreeComponent },
    { type: ThyTreeService },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
ThyTreeNodeComponent.propDecorators = {
    node: [{ type: Input }],
    thyAsync: [{ type: Input }],
    thyMultiple: [{ type: Input }],
    thyDraggable: [{ type: Input }],
    thyCheckable: [{ type: Input }],
    thyTitleTruncate: [{ type: Input }],
    templateRef: [{ type: Input }],
    emptyChildrenTemplateRef: [{ type: Input }],
    thyOnClick: [{ type: Output }],
    thyOnExpandChange: [{ type: Output }],
    thyOnCheckboxChange: [{ type: Output }],
    childrenTreeTemplateRef: [{ type: ContentChild, args: ['childrenTree',] }],
    titleInputElementRef: [{ type: ViewChild, args: ['title',] }],
    thyTreeNodeClass: [{ type: HostBinding, args: ['class.thy-tree-node',] }]
};
//# sourceMappingURL=data:application/json;base64,
import { ThyTreeNodeCheckState } from './tree.class';
import { helpers } from 'ngx-tethys/util';
export class ThyTreeNode {
    constructor(node, parent = null, service) {
        this.level = 0;
        this.title = node.title;
        this.key = node.key;
        this.children = [];
        this.parentNode = parent;
        this.level = parent ? parent.level + 1 : this.level;
        this.origin = node;
        this.isDisabled = node.disabled || false;
        this.isExpanded = node.expanded || false;
        this.isChecked = node.checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;
        this.isLoading = false;
        if (node.children) {
            node.children.forEach(childNode => {
                this.children.push(new ThyTreeNode(childNode, this));
            });
        }
        this.service = service;
    }
    get treeService() {
        if (this.service) {
            return this.service;
        }
        else if (this.parentNode) {
            return this.parentNode.treeService;
        }
    }
    setKey(key) {
        this.origin.key = key;
        this.key = key;
    }
    setTitle(title) {
        this.origin.title = title;
        this.title = title;
    }
    setExpanded(expanded, propagate = false) {
        this.origin.expanded = expanded;
        this.isExpanded = expanded;
        if (propagate && this.children) {
            this.children.forEach(n => n.setExpanded(expanded, propagate));
        }
    }
    setLoading(loading) {
        this.isLoading = loading;
    }
    setChecked(checked, propagateUp = true, propagateDown = true) {
        this.treeService.setNodeChecked(this, checked, propagateUp, propagateDown);
    }
    syncNodeCheckState() {
        this.treeService.syncNodeCheckState(this);
    }
    getParentNode() {
        return this.parentNode;
    }
    getChildren() {
        return this.children;
    }
    addChildren(children, index = -1) {
        children = helpers.coerceArray(children);
        (children || []).forEach((childNode, i) => {
            if (index === -1) {
                this.children.push(new ThyTreeNode(childNode, this));
            }
            else {
                this.children.splice(index + i, 0, new ThyTreeNode(childNode, this, this.treeService));
            }
        });
        this.origin.children = this.getChildren().map(n => n.origin);
        this.setLoading(false);
        this.treeService.$statusChange.next({
            eventName: 'addChildren',
            node: this
        });
    }
}
//# sourceMappingURL=data:application/json;base64,
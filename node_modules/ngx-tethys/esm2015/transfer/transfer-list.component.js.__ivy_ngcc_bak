import { Component, Input, Output, ViewEncapsulation, HostBinding, EventEmitter, TemplateRef, IterableDiffers } from '@angular/core';
import { ThyTransferComponent } from './transfer.component';
import { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';
export class ThyTransferListComponent {
    constructor(root, differs) {
        this.root = root;
        this.differs = differs;
        this.lockItems = [];
        this.unlockItems = [];
        this.draggableUpdate = new EventEmitter();
        this.selectItem = new EventEmitter();
        this.unselectItem = new EventEmitter();
        this.hostClass = 'thy-transfer-list';
        this.lockListEnterPredicate = () => {
            return this.lockItems.length < this.maxLock;
        };
        this.onSelectItem = (item) => {
            this.selectItem.emit({ item });
        };
        this.onUnselectItem = (item) => {
            this.unselectItem.emit({ item });
        };
    }
    ngOnInit() {
        this._combineTransferData();
        if (this.canLock) {
            this._lockDiff = this.differs.find(this.lockItems).create();
            this._unlockDiff = this.differs.find(this.unlockItems).create();
        }
        else {
            this._unlockDiff = this.differs.find(this.unlockItems).create();
        }
        this._diff = this.differs.find(this.items).create();
    }
    _combineTransferData() {
        this.lockItems = [];
        this.unlockItems = [];
        if (this.canLock) {
            (this.items || []).forEach(item => {
                if (item.isLock) {
                    this.lockItems.push(item);
                }
                else {
                    this.unlockItems.push(item);
                }
            });
        }
        else {
            this.unlockItems = this.items;
        }
    }
    _afterChangeItems(changes, items) {
        // 数据发生变化时，更改order值
        changes.forEachAddedItem(record => {
            record.item.order = record.currentIndex;
        });
        changes.forEachRemovedItem(() => {
            items.forEach((item, index) => {
                item.order = index;
            });
        });
        changes.forEachMovedItem(() => {
            items.forEach((item, index) => {
                item.order = index;
            });
        });
    }
    ngDoCheck() {
        const changes = this._diff.diff(this.items);
        if (changes) {
            this._afterChangeItems(changes, this.items);
            this._combineTransferData();
        }
        if (this._lockDiff) {
            const lockChanges = this._lockDiff.diff(this.lockItems);
            if (lockChanges) {
                this._afterChangeItems(lockChanges, this.lockItems);
            }
        }
        const unlockChanges = this._unlockDiff.diff(this.unlockItems);
        if (unlockChanges) {
            this._afterChangeItems(unlockChanges, this.unlockItems);
        }
    }
    drop(event) {
        if (event.previousContainer === event.container) {
            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
        }
        else {
            transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);
            (event.previousContainer.data || []).forEach(item => {
                item.isLock = event.previousContainer.id === 'lock';
            });
            (event.container.data || []).forEach(item => {
                item.isLock = event.container.id === 'lock';
            });
        }
        const dragEvent = {
            model: event.item.data,
            models: event.container.data,
            oldIndex: event.previousIndex,
            newIndex: event.currentIndex
        };
        this.draggableUpdate.emit({
            dragEvent: dragEvent,
            listData: { lock: this.lockItems, unlock: this.unlockItems }
        });
    }
}
ThyTransferListComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-transfer-list',
                template: "<div class=\"thy-transfer-list-header\">\n  <span class=\"thy-transfer-list-header-title\">{{ title }} \u00B7 {{ items?.length }}</span>\n</div>\n<ng-container *ngIf=\"!contentRef; else renderContent\">\n  <div class=\"thy-transfer-list-body\" cdkDropListGroup [cdkDropListGroupDisabled]=\"!draggable\">\n    <ng-container *ngIf=\"canLock\">\n      <div class=\"thy-transfer-list-group-name\">\u9501\u5B9A (\u4E0A\u9650{{ maxLock }}\u4E2A)</div>\n      <thy-list\n        class=\"thy-transfer-list-content\"\n        cdkDropList\n        thyDragDrop\n        id=\"lock\"\n        [cdkDropListData]=\"lockItems\"\n        (cdkDropListDropped)=\"drop($event)\"\n        [cdkDropListEnterPredicate]=\"lockListEnterPredicate\"\n      >\n        <div class=\"cdk-drop-list-empty\" *ngIf=\"lockItems.length === 0\"></div>\n        <thy-list-item\n          class=\"thy-transfer-list-content-item text-truncate\"\n          cdkDrag\n          [cdkDragData]=\"item\"\n          *ngFor=\"let item of lockItems\"\n          [ngClass]=\"{ active: item.checked }\"\n        >\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n        </thy-list-item>\n      </thy-list>\n\n      <div class=\"thy-transfer-list-group-name\">\u672A\u9501\u5B9A</div>\n    </ng-container>\n    <thy-list\n      class=\"thy-transfer-list-content\"\n      cdkDropList\n      thyDragDrop\n      [cdkDropListDisabled]=\"!draggable\"\n      id=\"unlock\"\n      [cdkDropListData]=\"unlockItems\"\n      (cdkDropListDropped)=\"drop($event)\"\n    >\n      <div class=\"cdk-drop-list-empty\" *ngIf=\"unlockItems.length === 0\"></div>\n      <thy-list-item\n        class=\"thy-transfer-list-content-item text-truncate\"\n        cdkDrag\n        [cdkDragData]=\"item\"\n        *ngFor=\"let item of unlockItems\"\n        [ngClass]=\"{ active: item.checked }\"\n      >\n        <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n      </thy-list-item>\n    </thy-list>\n  </div>\n</ng-container>\n\n<ng-template #renderContent>\n  <div class=\"thy-transfer-list-body\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        contentRef;\n        context: {\n          $implicit: items,\n          onSelectItem: onSelectItem,\n          onUnselectItem: onUnselectItem\n        }\n      \"\n    ></ng-container>\n  </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTransferListComponent.ctorParameters = () => [
    { type: ThyTransferComponent },
    { type: IterableDiffers }
];
ThyTransferListComponent.propDecorators = {
    title: [{ type: Input }],
    items: [{ type: Input }],
    draggable: [{ type: Input }],
    canLock: [{ type: Input }],
    maxLock: [{ type: Input }],
    template: [{ type: Input }],
    contentRef: [{ type: Input, args: ['renderContentRef',] }],
    draggableUpdate: [{ type: Output }],
    selectItem: [{ type: Output }],
    unselectItem: [{ type: Output }],
    hostClass: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,
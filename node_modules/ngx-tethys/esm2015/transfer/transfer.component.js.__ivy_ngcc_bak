import { Component, Input, Output, ViewEncapsulation, HostBinding, EventEmitter, ContentChild, TemplateRef } from '@angular/core';
import { TransferDirection } from './transfer.interface';
export class ThyTransferComponent {
    constructor() {
        this.hostClass = 'thy-transfer';
        this.leftDataSource = [];
        this.rightDataSource = [];
        this.allDataSource = [];
        this.rightDraggable = false;
        this._autoMove = true;
        this.thyDraggableUpdate = new EventEmitter();
        this.thyChange = new EventEmitter();
    }
    set thyData(value) {
        if (value) {
            this.initializeTransferData(value);
        }
    }
    // @Input() transferToRight
    set thyTitles(value) {
        this.leftTitle = value[0] || '';
        this.rightTitle = value[1] || '';
    }
    // Currently not implemented, in order to support the selections move
    set thyAutoMove(value) {
        this._autoMove = value;
    }
    ngOnInit() { }
    initializeTransferData(data = []) {
        this.allDataSource = [];
        this.leftDataSource = [];
        this.rightDataSource = [];
        data.forEach(item => {
            this.allDataSource.push(item);
            if (item.direction === TransferDirection.left) {
                this.leftDataSource.push(item);
            }
            if (item.direction === TransferDirection.right) {
                this.rightDataSource.push(item);
            }
        });
    }
    onSelect(from, event) {
        if (event.item.isFixed) {
            return;
        }
        const to = from === TransferDirection.left ? TransferDirection.right : TransferDirection.left;
        event.item.checked = !event.item.checked;
        if (this._autoMove) {
            this.onMove(to);
        }
    }
    selectItem(event) {
        this.onSelect(TransferDirection.left, event);
    }
    unselectItem(event) {
        this.onSelect(TransferDirection.right, event);
    }
    groupListByIsLock(list = []) {
        const lock = [], unlock = [];
        list.forEach(item => {
            if (item.isLock) {
                lock.push(item);
            }
            else {
                unlock.push(item);
            }
        });
        return { lock: lock, unlock: unlock };
    }
    onMove(to) {
        const fromDataSource = to === TransferDirection.right ? this.leftDataSource : this.rightDataSource;
        const toDataSource = to === TransferDirection.right ? this.rightDataSource : this.leftDataSource;
        const selections = fromDataSource.filter(item => item.checked);
        const changeEvent = {
            from: to === TransferDirection.right ? TransferDirection.left : TransferDirection.right,
            to: to,
            items: [...selections]
        };
        selections.forEach(item => {
            const index = fromDataSource.indexOf(item);
            const removed = fromDataSource.splice(index, 1)[0];
            removed.checked = !removed.checked;
            removed.direction = to;
            toDataSource.push(removed);
        });
        this.thyChange.emit(Object.assign(Object.assign({}, changeEvent), { left: this.groupListByIsLock(this.leftDataSource), right: this.groupListByIsLock(this.rightDataSource) }));
    }
    onDragUpdate(direction, event) {
        const otherDirectionData = direction === TransferDirection.left ? this.rightDataSource : this.leftDataSource;
        const otherListData = this.groupListByIsLock(otherDirectionData);
        this.thyDraggableUpdate.emit(Object.assign(Object.assign({}, event.dragEvent), { left: direction === TransferDirection.left ? event.listData : otherListData, right: direction === TransferDirection.right ? event.listData : otherListData }));
    }
}
ThyTransferComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-transfer',
                template: "<thy-transfer-list\n  [items]=\"allDataSource\"\n  [title]=\"leftTitle\"\n  [draggable]=\"thyLeftDraggable\"\n  [renderContentRef]=\"leftContentRef\"\n  (draggableUpdate)=\"onDragUpdate('left', $event)\"\n  [template]=\"leftTemplateRef\"\n  (selectItem)=\"selectItem($event)\"\n  (unselectItem)=\"unselectItem($event)\"\n>\n  <ng-template #leftTemplateRef let-item>\n    <div (click)=\"onSelect(item.direction === 'left' ? 'left' : 'right', { item: item })\" class=\"list-item-content\">\n      <ng-container *ngIf=\"thyLeftDraggable\">\n        <thy-icon thyIconName=\"drag\" class=\"drag-handle\"></thy-icon>\n      </ng-container>\n      <div class=\"item-name\" [ngClass]=\"{ 'un-select-item': item.direction !== 'right' }\">\n        <ng-template [ngTemplateOutlet]=\"thyTransferListItem\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n      </div>\n      <thy-icon *ngIf=\"item.direction === 'right'\" class=\"text-primary item-status\" thyIconName=\"check\"></thy-icon>\n    </div>\n  </ng-template>\n</thy-transfer-list>\n\n<div class=\"thy-transfer-operation\">\n  <div class=\"thy-transfer-operation-body\">\n    <thy-icon thyIconName=\"angle-right\" class=\"operation-link\"></thy-icon>\n    <br />\n    <thy-icon thyIconName=\"angle-left\" class=\"operation-link\"></thy-icon>\n  </div>\n</div>\n\n<thy-transfer-list\n  [items]=\"rightDataSource\"\n  [title]=\"rightTitle\"\n  [draggable]=\"thyRightDraggable\"\n  (draggableUpdate)=\"onDragUpdate('right', $event)\"\n  [canLock]=\"thyRightCanLock\"\n  [maxLock]=\"thyRightLockMax\"\n  [template]=\"rightTemplateRef\"\n  [renderContentRef]=\"rightContentRef\"\n  (selectItem)=\"selectItem($event)\"\n  (unselectItem)=\"unselectItem($event)\"\n>\n  <ng-template #rightTemplateRef let-item>\n    <ng-container *ngIf=\"thyRightDraggable\">\n      <thy-icon thyIconName=\"drag\" class=\"drag-handle\"></thy-icon>\n    </ng-container>\n    <div class=\"item-name\">\n      <ng-template [ngTemplateOutlet]=\"thyTransferListItem\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n    </div>\n    <a class=\"link-secondary\" *ngIf=\"item.direction === 'right' && !item.isFixed\" (click)=\"onSelect('right', { item: item })\">\n      <thy-icon class=\"item-status\" thyIconName=\"close\"></thy-icon>\n    </a>\n  </ng-template>\n</thy-transfer-list>\n\n<ng-template #thyTransferListItem let-item>\n  <ng-template *ngIf=\"templateRef\" [ngTemplateOutlet]=\"templateRef\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n  <ng-container *ngIf=\"!templateRef\">\n    <thy-flexible-text [thyTooltipContent]=\"item.title\">\n      {{ item.title }}\n    </thy-flexible-text>\n  </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTransferComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }],
    thyData: [{ type: Input }],
    thyrenderLeftTemplateRef: [{ type: Input }],
    thyrenderRightTemplateRef: [{ type: Input }],
    thyTitles: [{ type: Input }],
    thyRightCanLock: [{ type: Input }],
    thyRightLockMax: [{ type: Input }],
    thyAutoMove: [{ type: Input }],
    thyLeftDraggable: [{ type: Input }],
    thyRightDraggable: [{ type: Input }],
    thyDraggableUpdate: [{ type: Output }],
    thyChange: [{ type: Output }],
    templateRef: [{ type: ContentChild, args: ['renderTemplate',] }],
    leftContentRef: [{ type: ContentChild, args: ['renderLeftTemplate',] }],
    rightContentRef: [{ type: ContentChild, args: ['renderRightTemplate',] }]
};
//# sourceMappingURL=data:application/json;base64,
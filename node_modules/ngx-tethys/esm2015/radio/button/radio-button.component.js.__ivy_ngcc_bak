import { Component, HostBinding, HostListener, Input, Optional, ChangeDetectorRef } from '@angular/core';
import { ThyTranslate } from 'ngx-tethys/core';
import { ThyRadioGroupComponent } from './../group/radio-group.component';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { ThyRadioComponent } from '../radio.component';
export class ThyRadioButtonComponent extends ThyRadioComponent {
    constructor(thyTranslate, thyRadioGroupComponent, changeDetectorRef) {
        super(thyTranslate, thyRadioGroupComponent, changeDetectorRef);
        this.isButton = true;
        this.isActive = false;
    }
    set thyChecked(value) {
        this.isActive = !!value;
        this.writeValue(coerceBooleanProperty(value));
    }
    ngOnInit() {
        this._isFormCheck = false;
        if (this.thyRadioGroupComponent) {
            this.thyRadioGroupComponent.addRadio(this);
            this.thyRadioGroupComponent.setGroup();
        }
    }
    click($event) {
        this.change();
    }
}
ThyRadioButtonComponent.decorators = [
    { type: Component, args: [{
                selector: '[thy-radio-button],[thyRadioButton]',
                template: "<ng-container> {{ _labelText }}</ng-container>\n<ng-content></ng-content>\n"
            },] }
];
ThyRadioButtonComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: ThyRadioGroupComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
ThyRadioButtonComponent.propDecorators = {
    isButton: [{ type: HostBinding, args: ['class.btn',] }],
    isActive: [{ type: HostBinding, args: ['class.active',] }],
    thyValue: [{ type: Input }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yYWRpby9idXR0b24vcmFkaW8tYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFzQixXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0gsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTXZELE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxpQkFBaUI7SUFhMUQsWUFDSSxZQUEwQixFQUNkLHNCQUE4QyxFQUMxRCxpQkFBb0M7UUFFcEMsS0FBSyxDQUFDLFlBQVksRUFBRSxzQkFBc0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBakJ6QyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2IsYUFBUSxHQUFHLEtBQUssQ0FBQztJQWlCOUMsQ0FBQztJQVhELElBQUksVUFBVSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBVUQsUUFBUTtRQUNKLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQzdCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFDO0lBQ0wsQ0FBQztJQUdELEtBQUssQ0FBQyxNQUFrQjtRQUNwQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbEIsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUscUNBQXFDO2dCQUMvQyx1RkFBNEM7YUFDL0M7OztZQVJRLFlBQVk7WUFDWixzQkFBc0IsdUJBdUJ0QixRQUFRO1lBMUJtRSxpQkFBaUI7Ozt1QkFZaEcsV0FBVyxTQUFDLFdBQVc7dUJBQ3ZCLFdBQVcsU0FBQyxjQUFjO3VCQUkxQixLQUFLO29CQXVCTCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBPbkluaXQsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPcHRpb25hbCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVGh5VHJhbnNsYXRlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcbmltcG9ydCB7IFRoeVJhZGlvR3JvdXBDb21wb25lbnQgfSBmcm9tICcuLy4uL2dyb3VwL3JhZGlvLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuaW1wb3J0IHsgVGh5UmFkaW9Db21wb25lbnQgfSBmcm9tICcuLi9yYWRpby5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1t0aHktcmFkaW8tYnV0dG9uXSxbdGh5UmFkaW9CdXR0b25dJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcmFkaW8tYnV0dG9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlSYWRpb0J1dHRvbkNvbXBvbmVudCBleHRlbmRzIFRoeVJhZGlvQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmJ0bicpIGlzQnV0dG9uID0gdHJ1ZTtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFjdGl2ZScpIGlzQWN0aXZlID0gZmFsc2U7XG5cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSB0aHlWYWx1ZTogc3RyaW5nO1xuXG4gICAgc2V0IHRoeUNoZWNrZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9ICEhdmFsdWU7XG4gICAgICAgIHRoaXMud3JpdGVWYWx1ZShjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdGh5VHJhbnNsYXRlOiBUaHlUcmFuc2xhdGUsXG4gICAgICAgIEBPcHRpb25hbCgpIHRoeVJhZGlvR3JvdXBDb21wb25lbnQ6IFRoeVJhZGlvR3JvdXBDb21wb25lbnQsXG4gICAgICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxuICAgICkge1xuICAgICAgICBzdXBlcih0aHlUcmFuc2xhdGUsIHRoeVJhZGlvR3JvdXBDb21wb25lbnQsIGNoYW5nZURldGVjdG9yUmVmKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5faXNGb3JtQ2hlY2sgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMudGh5UmFkaW9Hcm91cENvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy50aHlSYWRpb0dyb3VwQ29tcG9uZW50LmFkZFJhZGlvKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy50aHlSYWRpb0dyb3VwQ29tcG9uZW50LnNldEdyb3VwKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gICAgY2xpY2soJGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoaXMuY2hhbmdlKCk7XG4gICAgfVxufVxuIl19
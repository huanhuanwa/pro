import { Component, forwardRef, HostBinding, Input, ElementRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { UpdateHostClassService } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';

const _c0 = ["*"];
const buttonGroupSizeMap = {
    sm: ['btn-group-sm'],
    lg: ['btn-group-lg']
};
const radioGroupLayoutMap = {
    flex: ['radio-group-layout-flex']
};
export class ThyRadioGroupComponent {
    constructor(updateHostClassService, elementRef, changeDetectorRef) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.thyRadioGroup = true;
        this.isButtonGroup = false;
        this.isButtonGroupOutline = false;
        this.radios = [];
        this.onChange = () => null;
        this.onTouched = () => null;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        this._size = size;
    }
    set thyLayout(layout) {
        this._layout = layout;
    }
    set thyDisabled(value) {
        this.setDisabledState(value);
    }
    addRadio(radio) {
        this.radios.push(radio);
        radio.thyChecked = radio.thyValue === this._innerValue;
    }
    updateValue(value, emit) {
        this._innerValue = value;
        this.radios.forEach(radio => {
            radio.thyChecked = radio.thyValue === this._innerValue;
        });
        if (emit) {
            this.onChange(value);
        }
        this.changeDetectorRef.detectChanges();
    }
    writeValue(value) {
        this.updateValue(value, false);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.radios.forEach(radio => {
            radio.setDisabledState(isDisabled);
        });
    }
    setGroup() {
        if (!this.isButtonGroup && !this.isButtonGroupOutline) {
            this.isButtonGroup = true;
            this.isButtonGroupOutline = true;
        }
    }
    ngOnInit() {
        this._setClasses();
    }
    _setClasses() {
        const classNames = [];
        if (buttonGroupSizeMap[this._size]) {
            classNames.push(buttonGroupSizeMap[this._size]);
        }
        if (radioGroupLayoutMap[this._layout]) {
            classNames.push(radioGroupLayoutMap[this._layout]);
        }
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyRadioGroupComponent.ɵfac = function ThyRadioGroupComponent_Factory(t) { return new (t || ThyRadioGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyRadioGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyRadioGroupComponent, selectors: [["thy-radio-group"]], hostVars: 6, hostBindings: function ThyRadioGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-radio-group", ctx.thyRadioGroup)("btn-group", ctx.isButtonGroup)("btn-group-outline-default", ctx.isButtonGroupOutline);
    } }, inputs: { thySize: "thySize", thyLayout: "thyLayout", thyDisabled: "thyDisabled" }, features: [ɵngcc0.ɵɵProvidersFeature([
            UpdateHostClassService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThyRadioGroupComponent),
                multi: true
            }
        ])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyRadioGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ThyRadioGroupComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
ThyRadioGroupComponent.propDecorators = {
    thyRadioGroup: [{ type: HostBinding, args: ['class.thy-radio-group',] }],
    isButtonGroup: [{ type: HostBinding, args: ['class.btn-group',] }],
    isButtonGroupOutline: [{ type: HostBinding, args: ['class.btn-group-outline-default',] }],
    thySize: [{ type: Input }],
    thyLayout: [{ type: Input }],
    thyDisabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyRadioGroupComponent, [{
        type: Component,
        args: [{
                selector: 'thy-radio-group',
                template: "<ng-content></ng-content>",
                providers: [
                    UpdateHostClassService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyRadioGroupComponent),
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { thyRadioGroup: [{
            type: HostBinding,
            args: ['class.thy-radio-group']
        }], isButtonGroup: [{
            type: HostBinding,
            args: ['class.btn-group']
        }], isButtonGroupOutline: [{
            type: HostBinding,
            args: ['class.btn-group-outline-default']
        }], thySize: [{
            type: Input
        }], thyLayout: [{
            type: Input
        }], thyDisabled: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
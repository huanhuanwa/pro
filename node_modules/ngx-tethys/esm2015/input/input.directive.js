import { Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
const inputGroupSizeMap = {
    xs: ['form-control-xs'],
    sm: ['form-control-sm'],
    md: ['form-control-md'],
    lg: ['form-control-lg']
};
export class ThyInputDirective {
    constructor(updateHostClassService, elementRef, render) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.render = render;
        this._isFormControl = true;
        this.initialized = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        if (size && inputGroupSizeMap[size]) {
            this.updateHostClassService.updateClass(inputGroupSizeMap[size]);
        }
        else {
            this.updateHostClassService.updateClass([]);
        }
    }
    set thyAutocomplete(value) {
        this.autocomplete = coerceBooleanProperty(value);
        if (this.initialized) {
            this.setAutocomplete();
        }
    }
    ngOnInit() {
        this.initialized = true;
        this.setAutocomplete();
    }
    setAutocomplete() {
        this.render.setAttribute(this.elementRef.nativeElement, 'autocomplete', this.autocomplete ? 'on' : 'off');
    }
}
ThyInputDirective.ɵfac = function ThyInputDirective_Factory(t) { return new (t || ThyInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyInputDirective, selectors: [["", "thyInput", ""]], hostVars: 2, hostBindings: function ThyInputDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("form-control", ctx._isFormControl);
    } }, inputs: { thySize: "thySize", thyAutocomplete: "thyAutocomplete" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])] });
ThyInputDirective.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: Renderer2 }
];
ThyInputDirective.propDecorators = {
    _isFormControl: [{ type: HostBinding, args: ['class.form-control',] }],
    thySize: [{ type: Input }],
    thyAutocomplete: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyInputDirective, [{
        type: Directive,
        args: [{
                selector: '[thyInput]',
                providers: [UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { _isFormControl: [{
            type: HostBinding,
            args: ['class.form-control']
        }], thySize: [{
            type: Input
        }], thyAutocomplete: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW5wdXQvaW5wdXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFJeEQsTUFBTSxpQkFBaUIsR0FBRztBQUMxQixJQUFJLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0FBQzNCLElBQUksRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUM7QUFDM0IsSUFBSSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztBQUMzQixJQUFJLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0FBQzNCLENBQUMsQ0FBQztBQU1GLE1BQU0sT0FBTyxpQkFBaUI7QUFBRyxJQXdCN0IsWUFBb0Isc0JBQThDLEVBQVUsVUFBc0IsRUFBVSxNQUFpQjtBQUNqSSxRQUR3QiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO0FBQUMsUUFBUyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFXO0FBQUMsUUF2QjNGLG1CQUFjLEdBQUcsSUFBSSxDQUFDO0FBQzdELFFBR1ksZ0JBQVcsR0FBRyxLQUFLLENBQUM7QUFDaEMsUUFtQlEsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoRixJQUFJLENBQUM7QUFDTCxJQXBCSSxJQUNJLE9BQU8sQ0FBQyxJQUFlO0FBQy9CLFFBQVEsSUFBSSxJQUFJLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDN0MsWUFBWSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0UsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksSUFDSSxlQUFlLENBQUMsS0FBYztBQUN0QyxRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekQsUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDOUIsWUFBWSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbkMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBS0ksUUFBUTtBQUNaLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDaEMsUUFBUSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0wsSUFDWSxlQUFlO0FBQzNCLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEgsSUFBSSxDQUFDO0FBQ0w7NkNBeENDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsWUFBWSxrQkFDdEIsU0FBUyxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FDdEM7OztnSkFDSTtBQUFDO0FBQTJDLFlBaEJ4QyxzQkFBc0I7QUFBSSxZQURmLFVBQVU7QUFBSSxZQUEwQixTQUFTO0FBQUc7QUFBRztBQUN6RCw2QkFpQmIsV0FBVyxTQUFDLG9CQUFvQjtBQUFPLHNCQU12QyxLQUFLO0FBQ1IsOEJBUUcsS0FBSztBQUNUOzs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbmV4cG9ydCB0eXBlIElucHV0U2l6ZSA9ICd4cycgfCAnc20nIHwgJ21kJyB8ICdsZycgfCAnJztcblxuY29uc3QgaW5wdXRHcm91cFNpemVNYXAgPSB7XG4gICAgeHM6IFsnZm9ybS1jb250cm9sLXhzJ10sXG4gICAgc206IFsnZm9ybS1jb250cm9sLXNtJ10sXG4gICAgbWQ6IFsnZm9ybS1jb250cm9sLW1kJ10sXG4gICAgbGc6IFsnZm9ybS1jb250cm9sLWxnJ11cbn07XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeUlucHV0XScsXG4gICAgcHJvdmlkZXJzOiBbVXBkYXRlSG9zdENsYXNzU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgVGh5SW5wdXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZm9ybS1jb250cm9sJykgX2lzRm9ybUNvbnRyb2wgPSB0cnVlO1xuXG4gICAgcHJpdmF0ZSBhdXRvY29tcGxldGU6IGJvb2xlYW47XG5cbiAgICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlTaXplKHNpemU6IElucHV0U2l6ZSkge1xuICAgICAgICBpZiAoc2l6ZSAmJiBpbnB1dEdyb3VwU2l6ZU1hcFtzaXplXSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUNsYXNzKGlucHV0R3JvdXBTaXplTWFwW3NpemVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVDbGFzcyhbXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlBdXRvY29tcGxldGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdXRvY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogVXBkYXRlSG9zdENsYXNzU2VydmljZSwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS5pbml0aWFsaXplRWxlbWVudChlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZXRBdXRvY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEF1dG9jb21wbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnYXV0b2NvbXBsZXRlJywgdGhpcy5hdXRvY29tcGxldGUgPyAnb24nIDogJ29mZicpO1xuICAgIH1cbn1cbiJdfQ==
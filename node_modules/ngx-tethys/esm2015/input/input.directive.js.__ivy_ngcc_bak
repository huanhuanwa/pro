import { Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
const inputGroupSizeMap = {
    xs: ['form-control-xs'],
    sm: ['form-control-sm'],
    md: ['form-control-md'],
    lg: ['form-control-lg']
};
export class ThyInputDirective {
    constructor(updateHostClassService, elementRef, render) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.render = render;
        this._isFormControl = true;
        this.initialized = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        if (size && inputGroupSizeMap[size]) {
            this.updateHostClassService.updateClass(inputGroupSizeMap[size]);
        }
        else {
            this.updateHostClassService.updateClass([]);
        }
    }
    set thyAutocomplete(value) {
        this.autocomplete = coerceBooleanProperty(value);
        if (this.initialized) {
            this.setAutocomplete();
        }
    }
    ngOnInit() {
        this.initialized = true;
        this.setAutocomplete();
    }
    setAutocomplete() {
        this.render.setAttribute(this.elementRef.nativeElement, 'autocomplete', this.autocomplete ? 'on' : 'off');
    }
}
ThyInputDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyInput]',
                providers: [UpdateHostClassService]
            },] }
];
ThyInputDirective.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: Renderer2 }
];
ThyInputDirective.propDecorators = {
    _isFormControl: [{ type: HostBinding, args: ['class.form-control',] }],
    thySize: [{ type: Input }],
    thyAutocomplete: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2lucHV0L2lucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUl4RCxNQUFNLGlCQUFpQixHQUFHO0lBQ3RCLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ3ZCLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ3ZCLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ3ZCLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0NBQzFCLENBQUM7QUFNRixNQUFNLE9BQU8saUJBQWlCO0lBd0IxQixZQUFvQixzQkFBOEMsRUFBVSxVQUFzQixFQUFVLE1BQWlCO1FBQXpHLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQXZCMUYsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFJakQsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFvQnhCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQW5CRCxJQUNJLE9BQU8sQ0FBQyxJQUFlO1FBQ3ZCLElBQUksSUFBSSxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0gsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7SUFFRCxJQUNJLGVBQWUsQ0FBQyxLQUFjO1FBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFNRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyxlQUFlO1FBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlHLENBQUM7OztZQXZDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO2FBQ3RDOzs7WUFmUSxzQkFBc0I7WUFEWCxVQUFVO1lBQThCLFNBQVM7Ozs2QkFrQmhFLFdBQVcsU0FBQyxvQkFBb0I7c0JBTWhDLEtBQUs7OEJBU0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuXG5leHBvcnQgdHlwZSBJbnB1dFNpemUgPSAneHMnIHwgJ3NtJyB8ICdtZCcgfCAnbGcnIHwgJyc7XG5cbmNvbnN0IGlucHV0R3JvdXBTaXplTWFwID0ge1xuICAgIHhzOiBbJ2Zvcm0tY29udHJvbC14cyddLFxuICAgIHNtOiBbJ2Zvcm0tY29udHJvbC1zbSddLFxuICAgIG1kOiBbJ2Zvcm0tY29udHJvbC1tZCddLFxuICAgIGxnOiBbJ2Zvcm0tY29udHJvbC1sZyddXG59O1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0aHlJbnB1dF0nLFxuICAgIHByb3ZpZGVyczogW1VwZGF0ZUhvc3RDbGFzc1NlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIFRoeUlucHV0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZvcm0tY29udHJvbCcpIF9pc0Zvcm1Db250cm9sID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgYXV0b2NvbXBsZXRlOiBib29sZWFuO1xuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5U2l6ZShzaXplOiBJbnB1dFNpemUpIHtcbiAgICAgICAgaWYgKHNpemUgJiYgaW5wdXRHcm91cFNpemVNYXBbc2l6ZV0pIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVDbGFzcyhpbnB1dEdyb3VwU2l6ZU1hcFtzaXplXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UudXBkYXRlQ2xhc3MoW10pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5QXV0b2NvbXBsZXRlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXV0b2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMikge1xuICAgICAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UuaW5pdGlhbGl6ZUVsZW1lbnQoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc2V0QXV0b2NvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRBdXRvY29tcGxldGUoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2F1dG9jb21wbGV0ZScsIHRoaXMuYXV0b2NvbXBsZXRlID8gJ29uJyA6ICdvZmYnKTtcbiAgICB9XG59XG4iXX0=
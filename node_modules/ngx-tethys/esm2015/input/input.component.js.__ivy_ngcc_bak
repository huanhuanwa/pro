import { Component, ContentChild, EventEmitter, forwardRef, HostBinding, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { take } from 'rxjs/operators';
export const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => ThyInputComponent),
    multi: true
};
const noop = () => { };
const ɵ0 = noop;
const password = 'password';
export class ThyInputComponent {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.placeholder = '';
        this.thyAutofocus = false;
        this.readonly = false;
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this._type = 'text';
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this._isSearchContainer = true;
        this._isFormControl = true;
        this._isFocus = false;
        this.disabled = false;
    }
    set thyType(value) {
        this.type = value;
    }
    set thyAutocomplete(value) {
        this.autocomplete = value;
    }
    ngOnInit() {
        this.ngZone.onStable.pipe(take(1)).subscribe(() => {
            if (this.isPassword(this.type)) {
                this.appendTemplate = this.eyeTemplate;
            }
        });
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onModelChange() {
        this.onChangeCallback(this.value);
    }
    onInputFocus(event) {
        this._isFocus = true;
        this.showLabel = true;
        this.focus.emit(event);
    }
    onInputBlur(event) {
        this._isFocus = false;
        this.showLabel = false;
        this.blur.emit(event);
    }
    isPassword(value) {
        return value === password;
    }
    togglePasswordType() {
        this.type = this.isPassword(this.type) ? 'text' : 'password';
    }
}
ThyInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-input',
                template: "<div #prepend class=\"input-prepend\" *ngIf=\"prependTemplate\">\n  <ng-template *ngTemplateOutlet=\"prependTemplate\"></ng-template>\n</div>\n<span class=\"input-label input-label-{{ thySize }}\" [class.active]=\"showLabel\">{{ thyLabelText }}</span>\n<input\n  #input\n  thyInput\n  [thySize]=\"thySize\"\n  [thyAutofocus]=\"thyAutofocus\"\n  [type]=\"type\"\n  [placeholder]=\"placeholder\"\n  [disabled]=\"disabled\"\n  [thyAutocomplete]=\"autocomplete\"\n  [(ngModel)]=\"value\"\n  (ngModelChange)=\"onModelChange()\"\n  (focus)=\"onInputFocus($event)\"\n  (blur)=\"onInputBlur($event)\"\n  [readonly]=\"readonly\"\n/>\n<div #append class=\"input-append\" *ngIf=\"appendTemplate\">\n  <ng-template *ngTemplateOutlet=\"appendTemplate\"></ng-template>\n</div>\n\n<ng-template #eye>\n  <a href=\"javascript:;\" class=\"link-secondary input-password-icon\" (click)=\"togglePasswordType()\">\n    <thy-icon *ngIf=\"isPassword(type)\" thyIconName=\"eye\"></thy-icon>\n    <thy-icon *ngIf=\"!isPassword(type)\" thyIconName=\"eye-invisible\"></thy-icon>\n  </a>\n</ng-template>\n",
                providers: [UpdateHostClassService, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyInputComponent.ctorParameters = () => [
    { type: NgZone }
];
ThyInputComponent.propDecorators = {
    placeholder: [{ type: Input }],
    thySize: [{ type: Input }],
    thyAutofocus: [{ type: Input }],
    type: [{ type: Input }],
    thyType: [{ type: Input }],
    thyLabelText: [{ type: Input }],
    readonly: [{ type: Input }],
    thyAutocomplete: [{ type: Input }],
    focus: [{ type: Output }],
    blur: [{ type: Output }],
    appendTemplate: [{ type: ContentChild, args: ['append',] }],
    prependTemplate: [{ type: ContentChild, args: ['prepend',] }],
    eyeTemplate: [{ type: ViewChild, args: ['eye', { static: true },] }],
    _isSearchContainer: [{ type: HostBinding, args: ['class.thy-input',] }],
    _isFormControl: [{ type: HostBinding, args: ['class.form-control',] }],
    _isFocus: [{ type: HostBinding, args: ['class.form-control-active',] }],
    disabled: [{ type: HostBinding, args: ['class.disabled',] }]
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,
import { Component, HostBinding, Input, ContentChild, TemplateRef, ElementRef, ViewEncapsulation } from '@angular/core';
import { ThyTranslate, UpdateHostClassService } from 'ngx-tethys/core';
const inputGroupSizeMap = {
    sm: ['input-group-sm'],
    lg: ['input-group-lg']
};
export class ThyInputGroupComponent {
    constructor(thyTranslate, updateHostClassService, elementRef) {
        this.thyTranslate = thyTranslate;
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this._isInputGroup = true;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thyAppendText(value) {
        this.appendText = value;
    }
    set thyAppendTextTranslateKey(value) {
        if (value) {
            this.appendText = this.thyTranslate.instant(value);
        }
    }
    set thyPrependText(value) {
        this.prependText = value;
    }
    set thyPrependTextTranslateKey(value) {
        if (value) {
            this.prependText = this.thyTranslate.instant(value);
        }
    }
    set thySize(size) {
        if (size && inputGroupSizeMap[size]) {
            this.updateHostClassService.updateClass(inputGroupSizeMap[size]);
        }
        else {
            this.updateHostClassService.updateClass([]);
        }
    }
}
ThyInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-input-group',
                template: "<div class=\"input-group-prepend\" *ngIf=\"prependText\">\n    <span class=\"input-group-text\">{{prependText}}</span>\n</div>\n<div class=\"input-group-prepend\" *ngIf=\"prependTemplate\">\n    <ng-template *ngTemplateOutlet=\"prependTemplate\"></ng-template>\n</div>\n<ng-content></ng-content>\n<div class=\"input-group-append\" *ngIf=\"appendText\">\n    <span class=\"input-group-text\">{{appendText}}</span>\n</div>\n<div class=\"input-group-append\" *ngIf=\"appendTemplate\">\n    <ng-template *ngTemplateOutlet=\"appendTemplate\"></ng-template>\n</div>",
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyInputGroupComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyInputGroupComponent.propDecorators = {
    _isInputGroup: [{ type: HostBinding, args: ['class.thy-input-group',] }],
    thyAppendText: [{ type: Input }],
    thyAppendTextTranslateKey: [{ type: Input }],
    thyPrependText: [{ type: Input }],
    thyPrependTextTranslateKey: [{ type: Input }],
    thySize: [{ type: Input }],
    appendTemplate: [{ type: ContentChild, args: ['append',] }],
    prependTemplate: [{ type: ContentChild, args: ['prepend',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2lucHV0L2lucHV0LWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFlBQVksRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBSXZFLE1BQU0saUJBQWlCLEdBQUc7SUFDdEIsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7SUFDdEIsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7Q0FDekIsQ0FBQztBQVFGLE1BQU0sT0FBTyxzQkFBc0I7SUE0Qy9CLFlBQ1ksWUFBMEIsRUFDMUIsc0JBQThDLEVBQzlDLFVBQXNCO1FBRnRCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQTFDSSxrQkFBYSxHQUFHLElBQUksQ0FBQztRQTRDdkQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBM0NELElBQ0ksYUFBYSxDQUFDLEtBQWE7UUFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQ0kseUJBQXlCLENBQUMsS0FBYTtRQUN2QyxJQUFJLEtBQUssRUFBRTtZQUNQLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEQ7SUFDTCxDQUFDO0lBRUQsSUFDSSxjQUFjLENBQUMsS0FBYTtRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFDSSwwQkFBMEIsQ0FBQyxLQUFhO1FBQ3hDLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN2RDtJQUNMLENBQUM7SUFFRCxJQUNJLE9BQU8sQ0FBQyxJQUFvQjtRQUM1QixJQUFJLElBQUksSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDcEU7YUFBTTtZQUNILElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDOzs7WUE1Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLDJqQkFBMkM7Z0JBQzNDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO2dCQUNuQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN4Qzs7O1lBZFEsWUFBWTtZQUFFLHNCQUFzQjtZQURzQixVQUFVOzs7NEJBcUJ4RSxXQUFXLFNBQUMsdUJBQXVCOzRCQUVuQyxLQUFLO3dDQUtMLEtBQUs7NkJBT0wsS0FBSzt5Q0FLTCxLQUFLO3NCQU9MLEtBQUs7NkJBU0wsWUFBWSxTQUFDLFFBQVE7OEJBRXJCLFlBQVksU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIENvbnRlbnRDaGlsZCwgVGVtcGxhdGVSZWYsIEVsZW1lbnRSZWYsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaHlUcmFuc2xhdGUsIFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBJbnB1dEdyb3VwU2l6ZSA9ICdzbScgfCAnbGcnIHwgJyc7XG5cbmNvbnN0IGlucHV0R3JvdXBTaXplTWFwID0ge1xuICAgIHNtOiBbJ2lucHV0LWdyb3VwLXNtJ10sXG4gICAgbGc6IFsnaW5wdXQtZ3JvdXAtbGcnXVxufTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktaW5wdXQtZ3JvdXAnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1ncm91cC5jb21wb25lbnQuaHRtbCcsXG4gICAgcHJvdmlkZXJzOiBbVXBkYXRlSG9zdENsYXNzU2VydmljZV0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBUaHlJbnB1dEdyb3VwQ29tcG9uZW50IHtcbiAgICBwdWJsaWMgYXBwZW5kVGV4dDogc3RyaW5nO1xuXG4gICAgcHVibGljIHByZXBlbmRUZXh0OiBzdHJpbmc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1pbnB1dC1ncm91cCcpIF9pc0lucHV0R3JvdXAgPSB0cnVlO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5QXBwZW5kVGV4dCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kVGV4dCA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUFwcGVuZFRleHRUcmFuc2xhdGVLZXkodmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kVGV4dCA9IHRoaXMudGh5VHJhbnNsYXRlLmluc3RhbnQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5UHJlcGVuZFRleHQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnByZXBlbmRUZXh0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5UHJlcGVuZFRleHRUcmFuc2xhdGVLZXkodmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJlcGVuZFRleHQgPSB0aGlzLnRoeVRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVNpemUoc2l6ZTogSW5wdXRHcm91cFNpemUpIHtcbiAgICAgICAgaWYgKHNpemUgJiYgaW5wdXRHcm91cFNpemVNYXBbc2l6ZV0pIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVDbGFzcyhpbnB1dEdyb3VwU2l6ZU1hcFtzaXplXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UudXBkYXRlQ2xhc3MoW10pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQENvbnRlbnRDaGlsZCgnYXBwZW5kJykgYXBwZW5kVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBAQ29udGVudENoaWxkKCdwcmVwZW5kJykgcHJlcGVuZFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgdGh5VHJhbnNsYXRlOiBUaHlUcmFuc2xhdGUsXG4gICAgICAgIHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogVXBkYXRlSG9zdENsYXNzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmXG4gICAgKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS5pbml0aWFsaXplRWxlbWVudChlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbn1cbiJdfQ==
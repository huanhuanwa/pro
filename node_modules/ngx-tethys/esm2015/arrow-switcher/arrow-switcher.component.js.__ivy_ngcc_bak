import { Component, HostBinding, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class ThyArrowSwitcherComponent {
    constructor(cd) {
        this.cd = cd;
        this._isArrowSwitcher = true;
        this._isSmallSize = false;
        this.thyPrevious = new EventEmitter();
        this.thyNext = new EventEmitter();
        this.index = 0;
        this.disabled = false;
        this.previousDisabled = false;
        this.nextDisabled = false;
    }
    set thyTotal(value) {
        if (value) {
            this.total = value;
            this.getDisabled();
        }
    }
    set thySize(size) {
        if (size === 'sm') {
            this._isSmallSize = true;
        }
    }
    ngOnInit() { }
    writeValue(value) {
        if (value >= 0) {
            this.index = value;
            this.getDisabled();
        }
        this.cd.markForCheck();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(isDisable) {
        this.disabled = isDisable;
    }
    getDisabled() {
        this.previousDisabled = this.index <= 0 || this.disabled;
        this.nextDisabled = this.index >= this.total - 1 || this.disabled;
    }
    onPreviousClick(event) {
        this.index--;
        this.onModelChange(this.index);
        this.getDisabled();
        this.thyPrevious.emit({ index: this.index, event });
    }
    onNextClick(event) {
        this.index++;
        this.onModelChange(this.index);
        this.getDisabled();
        this.thyNext.emit({ index: this.index, event });
    }
}
ThyArrowSwitcherComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-arrow-switcher',
                template: "<div class=\"switcher-wrapper\">\n  <button thyButtonIcon=\"angle-left\" [disabled]=\"previousDisabled\" (click)=\"onPreviousClick($event)\"></button>\n  <span>{{ index + 1 }} / {{ total }}</span>\n  <button thyButtonIcon=\"angle-right\" [disabled]=\"nextDisabled\" (click)=\"onNextClick($event)\"></button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyArrowSwitcherComponent),
                        multi: true
                    }
                ]
            },] }
];
ThyArrowSwitcherComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyArrowSwitcherComponent.propDecorators = {
    _isArrowSwitcher: [{ type: HostBinding, args: ['class.thy-arrow-switcher',] }],
    _isSmallSize: [{ type: HostBinding, args: ['class.thy-arrow-switcher-small',] }],
    thyPrevious: [{ type: Output }],
    thyNext: [{ type: Output }],
    thyTotal: [{ type: Input }],
    thySize: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyb3ctc3dpdGNoZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Fycm93LXN3aXRjaGVyL2Fycm93LXN3aXRjaGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWix1QkFBdUIsRUFFdkIsaUJBQWlCLEVBQ2pCLFVBQVUsRUFDYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFtQnpFLE1BQU0sT0FBTyx5QkFBeUI7SUFzQ2xDLFlBQW9CLEVBQXFCO1FBQXJCLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBckNBLHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUVsQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUkxRCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUF5QixDQUFDO1FBRXhELFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBeUIsQ0FBQztRQWlCOUQsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUVWLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIscUJBQWdCLEdBQUcsS0FBSyxDQUFDO1FBRXpCLGlCQUFZLEdBQUcsS0FBSyxDQUFDO0lBTXVCLENBQUM7SUEzQjdDLElBQ0ksUUFBUSxDQUFDLEtBQWE7UUFDdEIsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBRUQsSUFDSSxPQUFPLENBQUMsSUFBWTtRQUNwQixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDZixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNMLENBQUM7SUFnQkQsUUFBUSxLQUFJLENBQUM7SUFFYixVQUFVLENBQUMsS0FBYTtRQUNwQixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEI7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFjO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxFQUFjO1FBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxTQUFrQjtRQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUM5QixDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3pELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3RFLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBWTtRQUN4QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxXQUFXLENBQUMsS0FBWTtRQUNwQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7OztZQTNGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIseVVBQThDO2dCQUM5QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsU0FBUyxFQUFFO29CQUNQO3dCQUNJLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUM7d0JBQ3hELEtBQUssRUFBRSxJQUFJO3FCQUNkO2lCQUNKO2FBQ0o7OztZQXJCRyxpQkFBaUI7OzsrQkF1QmhCLFdBQVcsU0FBQywwQkFBMEI7MkJBRXRDLFdBQVcsU0FBQyxnQ0FBZ0M7MEJBSTVDLE1BQU07c0JBRU4sTUFBTTt1QkFFTixLQUFLO3NCQVFMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIE9uSW5pdCxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBmb3J3YXJkUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRoeUFycm93U3dpdGNoZXJFdmVudCB7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICBldmVudDogRXZlbnQ7XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGh5LWFycm93LXN3aXRjaGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXJyb3ctc3dpdGNoZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoeUFycm93U3dpdGNoZXJDb21wb25lbnQpLFxuICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgVGh5QXJyb3dTd2l0Y2hlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MudGh5LWFycm93LXN3aXRjaGVyJykgX2lzQXJyb3dTd2l0Y2hlciA9IHRydWU7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1hcnJvdy1zd2l0Y2hlci1zbWFsbCcpIF9pc1NtYWxsU2l6ZSA9IGZhbHNlO1xuXG4gICAgdG90YWw6IG51bWJlcjtcblxuICAgIEBPdXRwdXQoKSB0aHlQcmV2aW91cyA9IG5ldyBFdmVudEVtaXR0ZXI8VGh5QXJyb3dTd2l0Y2hlckV2ZW50PigpO1xuXG4gICAgQE91dHB1dCgpIHRoeU5leHQgPSBuZXcgRXZlbnRFbWl0dGVyPFRoeUFycm93U3dpdGNoZXJFdmVudD4oKTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVRvdGFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnRvdGFsID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmdldERpc2FibGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlTaXplKHNpemU6IHN0cmluZykge1xuICAgICAgICBpZiAoc2l6ZSA9PT0gJ3NtJykge1xuICAgICAgICAgICAgdGhpcy5faXNTbWFsbFNpemUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5kZXggPSAwO1xuXG4gICAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIHByZXZpb3VzRGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIG5leHREaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBvbk1vZGVsQ2hhbmdlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcblxuICAgIHByaXZhdGUgb25Nb2RlbFRvdWNoZWQ6ICgpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICAgIG5nT25Jbml0KCkge31cblxuICAgIHdyaXRlVmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAodmFsdWUgPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5pbmRleCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5nZXREaXNhYmxlZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UgPSBmbjtcbiAgICB9XG5cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLm9uTW9kZWxUb3VjaGVkID0gZm47XG4gICAgfVxuXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZTtcbiAgICB9XG5cbiAgICBnZXREaXNhYmxlZCgpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c0Rpc2FibGVkID0gdGhpcy5pbmRleCA8PSAwIHx8IHRoaXMuZGlzYWJsZWQ7XG4gICAgICAgIHRoaXMubmV4dERpc2FibGVkID0gdGhpcy5pbmRleCA+PSB0aGlzLnRvdGFsIC0gMSB8fCB0aGlzLmRpc2FibGVkO1xuICAgIH1cblxuICAgIG9uUHJldmlvdXNDbGljayhldmVudDogRXZlbnQpIHtcbiAgICAgICAgdGhpcy5pbmRleC0tO1xuICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UodGhpcy5pbmRleCk7XG4gICAgICAgIHRoaXMuZ2V0RGlzYWJsZWQoKTtcbiAgICAgICAgdGhpcy50aHlQcmV2aW91cy5lbWl0KHsgaW5kZXg6IHRoaXMuaW5kZXgsIGV2ZW50IH0pO1xuICAgIH1cblxuICAgIG9uTmV4dENsaWNrKGV2ZW50OiBFdmVudCkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZSh0aGlzLmluZGV4KTtcbiAgICAgICAgdGhpcy5nZXREaXNhYmxlZCgpO1xuICAgICAgICB0aGlzLnRoeU5leHQuZW1pdCh7IGluZGV4OiB0aGlzLmluZGV4LCBldmVudCB9KTtcbiAgICB9XG59XG4iXX0=
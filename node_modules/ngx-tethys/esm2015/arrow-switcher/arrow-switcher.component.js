import { Component, HostBinding, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/button';
export class ThyArrowSwitcherComponent {
    constructor(cd) {
        this.cd = cd;
        this._isArrowSwitcher = true;
        this._isSmallSize = false;
        this.thyPrevious = new EventEmitter();
        this.thyNext = new EventEmitter();
        this.index = 0;
        this.disabled = false;
        this.previousDisabled = false;
        this.nextDisabled = false;
    }
    set thyTotal(value) {
        if (value) {
            this.total = value;
            this.getDisabled();
        }
    }
    set thySize(size) {
        if (size === 'sm') {
            this._isSmallSize = true;
        }
    }
    ngOnInit() { }
    writeValue(value) {
        if (value >= 0) {
            this.index = value;
            this.getDisabled();
        }
        this.cd.markForCheck();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(isDisable) {
        this.disabled = isDisable;
    }
    getDisabled() {
        this.previousDisabled = this.index <= 0 || this.disabled;
        this.nextDisabled = this.index >= this.total - 1 || this.disabled;
    }
    onPreviousClick(event) {
        this.index--;
        this.onModelChange(this.index);
        this.getDisabled();
        this.thyPrevious.emit({ index: this.index, event });
    }
    onNextClick(event) {
        this.index++;
        this.onModelChange(this.index);
        this.getDisabled();
        this.thyNext.emit({ index: this.index, event });
    }
}
ThyArrowSwitcherComponent.ɵfac = function ThyArrowSwitcherComponent_Factory(t) { return new (t || ThyArrowSwitcherComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyArrowSwitcherComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyArrowSwitcherComponent, selectors: [["thy-arrow-switcher"]], hostVars: 4, hostBindings: function ThyArrowSwitcherComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-arrow-switcher", ctx._isArrowSwitcher)("thy-arrow-switcher-small", ctx._isSmallSize);
    } }, inputs: { thyTotal: "thyTotal", thySize: "thySize" }, outputs: { thyPrevious: "thyPrevious", thyNext: "thyNext" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThyArrowSwitcherComponent),
                multi: true
            }
        ])], decls: 5, vars: 4, consts: [[1, "switcher-wrapper"], ["thyButtonIcon", "angle-left", 3, "disabled", "click"], ["thyButtonIcon", "angle-right", 3, "disabled", "click"]], template: function ThyArrowSwitcherComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function ThyArrowSwitcherComponent_Template_button_click_1_listener($event) { return ctx.onPreviousClick($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "button", 2);
        ɵngcc0.ɵɵlistener("click", function ThyArrowSwitcherComponent_Template_button_click_4_listener($event) { return ctx.onNextClick($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.previousDisabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2("", ctx.index + 1, " / ", ctx.total, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.nextDisabled);
    } }, directives: [ɵngcc1.ThyButtonIconComponent], encapsulation: 2, changeDetection: 0 });
ThyArrowSwitcherComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyArrowSwitcherComponent.propDecorators = {
    _isArrowSwitcher: [{ type: HostBinding, args: ['class.thy-arrow-switcher',] }],
    _isSmallSize: [{ type: HostBinding, args: ['class.thy-arrow-switcher-small',] }],
    thyPrevious: [{ type: Output }],
    thyNext: [{ type: Output }],
    thyTotal: [{ type: Input }],
    thySize: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyArrowSwitcherComponent, [{
        type: Component,
        args: [{
                selector: 'thy-arrow-switcher',
                template: "<div class=\"switcher-wrapper\">\n  <button thyButtonIcon=\"angle-left\" [disabled]=\"previousDisabled\" (click)=\"onPreviousClick($event)\"></button>\n  <span>{{ index + 1 }} / {{ total }}</span>\n  <button thyButtonIcon=\"angle-right\" [disabled]=\"nextDisabled\" (click)=\"onNextClick($event)\"></button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyArrowSwitcherComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { _isArrowSwitcher: [{
            type: HostBinding,
            args: ['class.thy-arrow-switcher']
        }], _isSmallSize: [{
            type: HostBinding,
            args: ['class.thy-arrow-switcher-small']
        }], thyPrevious: [{
            type: Output
        }], thyNext: [{
            type: Output
        }], thyTotal: [{
            type: Input
        }], thySize: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyb3ctc3dpdGNoZXIuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXJyb3ctc3dpdGNoZXIvYXJyb3ctc3dpdGNoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLHVCQUF1QixFQUV2QixpQkFBaUIsRUFDakIsVUFBVSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBbUJ6RSxNQUFNLE9BQU8seUJBQXlCO0FBQUcsSUFzQ3JDLFlBQW9CLEVBQXFCO0FBQUksUUFBekIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7QUFBQyxRQXJDRCxxQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFDckUsUUFDbUQsaUJBQVksR0FBRyxLQUFLLENBQUM7QUFDeEUsUUFHYyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUF5QixDQUFDO0FBQ3RFLFFBQ2MsWUFBTyxHQUFHLElBQUksWUFBWSxFQUF5QixDQUFDO0FBQ2xFLFFBZ0JJLFVBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUNJLGFBQVEsR0FBRyxLQUFLLENBQUM7QUFDckIsUUFDSSxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFDN0IsUUFDSSxpQkFBWSxHQUFHLEtBQUssQ0FBQztBQUN6QixJQUtnRCxDQUFDO0FBQ2pELElBNUJJLElBQ0ksUUFBUSxDQUFDLEtBQWE7QUFDOUIsUUFBUSxJQUFJLEtBQUssRUFBRTtBQUNuQixZQUFZLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQy9CLFlBQVksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQy9CLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQ0ksT0FBTyxDQUFDLElBQVk7QUFDNUIsUUFBUSxJQUFJLElBQUksS0FBSyxJ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XG4gICAgQ29tcG9uZW50LFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgT25Jbml0LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIGZvcndhcmRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGh5QXJyb3dTd2l0Y2hlckV2ZW50IHtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIGV2ZW50OiBFdmVudDtcbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktYXJyb3ctc3dpdGNoZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hcnJvdy1zd2l0Y2hlci5jb21wb25lbnQuaHRtbCcsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGh5QXJyb3dTd2l0Y2hlckNvbXBvbmVudCksXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlBcnJvd1N3aXRjaGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktYXJyb3ctc3dpdGNoZXInKSBfaXNBcnJvd1N3aXRjaGVyID0gdHJ1ZTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudGh5LWFycm93LXN3aXRjaGVyLXNtYWxsJykgX2lzU21hbGxTaXplID0gZmFsc2U7XG5cbiAgICB0b3RhbDogbnVtYmVyO1xuXG4gICAgQE91dHB1dCgpIHRoeVByZXZpb3VzID0gbmV3IEV2ZW50RW1pdHRlcjxUaHlBcnJvd1N3aXRjaGVyRXZlbnQ+KCk7XG5cbiAgICBAT3V0cHV0KCkgdGh5TmV4dCA9IG5ldyBFdmVudEVtaXR0ZXI8VGh5QXJyb3dTd2l0Y2hlckV2ZW50PigpO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5VG90YWwodmFsdWU6IG51bWJlcikge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudG90YWwgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RGlzYWJsZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVNpemUoc2l6ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmIChzaXplID09PSAnc20nKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1NtYWxsU2l6ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleCA9IDA7XG5cbiAgICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgcHJldmlvdXNEaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgbmV4dERpc2FibGVkID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIG9uTW9kZWxDaGFuZ2U6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuXG4gICAgcHJpdmF0ZSBvbk1vZGVsVG91Y2hlZDogKCkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7fVxuXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmdldERpc2FibGVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZSA9IGZuO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMub25Nb2RlbFRvdWNoZWQgPSBmbjtcbiAgICB9XG5cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlO1xuICAgIH1cblxuICAgIGdldERpc2FibGVkKCkge1xuICAgICAgICB0aGlzLnByZXZpb3VzRGlzYWJsZWQgPSB0aGlzLmluZGV4IDw9IDAgfHwgdGhpcy5kaXNhYmxlZDtcbiAgICAgICAgdGhpcy5uZXh0RGlzYWJsZWQgPSB0aGlzLmluZGV4ID49IHRoaXMudG90YWwgLSAxIHx8IHRoaXMuZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgb25QcmV2aW91c0NsaWNrKGV2ZW50OiBFdmVudCkge1xuICAgICAgICB0aGlzLmluZGV4LS07XG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZSh0aGlzLmluZGV4KTtcbiAgICAgICAgdGhpcy5nZXREaXNhYmxlZCgpO1xuICAgICAgICB0aGlzLnRoeVByZXZpb3VzLmVtaXQoeyBpbmRleDogdGhpcy5pbmRleCwgZXZlbnQgfSk7XG4gICAgfVxuXG4gICAgb25OZXh0Q2xpY2soZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgdGhpcy5vbk1vZGVsQ2hhbmdlKHRoaXMuaW5kZXgpO1xuICAgICAgICB0aGlzLmdldERpc2FibGVkKCk7XG4gICAgICAgIHRoaXMudGh5TmV4dC5lbWl0KHsgaW5kZXg6IHRoaXMuaW5kZXgsIGV2ZW50IH0pO1xuICAgIH1cbn1cbiJdfQ==
import { ThyAbstractOverlayConfig } from 'ngx-tethys/core';
import { InjectionToken } from '@angular/core';
export class ThySlideConfig extends ThyAbstractOverlayConfig {
}
export class ThySlideOption extends ThySlideConfig {
}
export const THY_SLIDE_DEFAULT_CONFIG = new InjectionToken('thy-slide-default-options');
export const slideUpperOverlayOptions = {
    name: 'slide',
    animationEnabled: true,
    disposeWhenClose: true
};
export const slideDefaultConfigValue = {
    hasBackdrop: true,
    backdropClass: 'thy-slide-backdrop',
    backdropClosable: true,
    closeOnNavigation: true,
    autoFocus: true,
    restoreFocus: true,
    from: 'right',
    panelClass: 'thy-slide',
    containerClass: '',
    role: 'slide',
    offset: 0,
    originActiveClass: 'thy-slide-origin-active',
    mode: 'over',
    drawerContainer: ''
};
const ɵ0 = {};
export const THY_SLIDE_DEFAULT_CONFIG_PROVIDER = {
    provide: THY_SLIDE_DEFAULT_CONFIG,
    useValue: ɵ0
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NsaWRlL3NsaWRlLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQTBCLE1BQU0saUJBQWlCLENBQUM7QUFFbkYsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWdCM0QsTUFBTSxPQUFPLGNBQWUsU0FBUSx3QkFBd0I7Q0F5QjNEO0FBRUQsTUFBTSxPQUFPLGNBQWUsU0FBUSxjQUFjO0NBQUc7QUFFckQsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxjQUFjLENBQWlCLDJCQUEyQixDQUFDLENBQUM7QUFFeEcsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQTJCO0lBQzVELElBQUksRUFBRSxPQUFPO0lBQ2IsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QixnQkFBZ0IsRUFBRSxJQUFJO0NBQ3pCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUNuQyxXQUFXLEVBQUUsSUFBSTtJQUNqQixhQUFhLEVBQUUsb0JBQW9CO0lBQ25DLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsaUJBQWlCLEVBQUUsSUFBSTtJQUN2QixTQUFTLEVBQUUsSUFBSTtJQUNmLFlBQVksRUFBRSxJQUFJO0lBQ2xCLElBQUksRUFBRSxPQUFPO0lBQ2IsVUFBVSxFQUFFLFdBQVc7SUFDdkIsY0FBYyxFQUFFLEVBQUU7SUFDbEIsSUFBSSxFQUFFLE9BQU87SUFDYixNQUFNLEVBQUUsQ0FBQztJQUNULGlCQUFpQixFQUFFLHlCQUF5QjtJQUM1QyxJQUFJLEVBQUUsTUFBTTtJQUNaLGVBQWUsRUFBRSxFQUFFO0NBQ3RCLENBQUM7V0FJWSxFQUFFO0FBRmhCLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHO0lBQzdDLE9BQU8sRUFBRSx3QkFBd0I7SUFDakMsUUFBUSxJQUFJO0NBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRoeUFic3RyYWN0T3ZlcmxheUNvbmZpZywgVGh5VXBwZXJPdmVybGF5T3B0aW9ucyB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5cbmltcG9ydCB7IEVsZW1lbnRSZWYsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIFRoeVNsaWRlRnJvbVR5cGVzID1cbiAgICB8ICdsZWZ0J1xuICAgIHwgJ3JpZ2h0J1xuICAgIHwgJ3RvcCdcbiAgICB8ICdib3R0b20nXG4gICAgfCAndm9pZCdcbiAgICB8ICdleGl0J1xuICAgIHwgJ29mZnNldExlZnQnXG4gICAgfCAnb2Zmc2V0UmlnaHQnXG4gICAgfCAnb2Zmc2V0VG9wJ1xuICAgIHwgJ29mZnNldEJvdHRvbSc7XG5cbmV4cG9ydCB0eXBlIFRoeVNsaWRlTW9kZSA9ICdvdmVyJyB8ICdwdXNoJyB8ICdzaWRlJztcblxuZXhwb3J0IGNsYXNzIFRoeVNsaWRlQ29uZmlnIGV4dGVuZHMgVGh5QWJzdHJhY3RPdmVybGF5Q29uZmlnIHtcbiAgICAvKipcbiAgICAgKiBPcmlnaW4gRWxlbWVudCwgZm9yIG92ZXJsYXkgZmxleGlibGUgY29ubmVjdGVkIHRvXG4gICAgICovXG4gICAgb3JpZ2luPzogRWxlbWVudFJlZjxhbnk+IHwgSFRNTEVsZW1lbnQgfCBhbnk7XG4gICAgLyoqXG4gICAgICogc2V0IHRoZSBkaXJlY3Rpb24gd2hlbiBzbGlkZSBlbnRlclxuICAgICAqL1xuICAgIGZyb20/OiBUaHlTbGlkZUZyb21UeXBlcztcbiAgICAvKipcbiAgICAgKiDku47ot53nprvlsY/luZXovrnnvJggb2Zmc2V0IOWHuua7keWFpea7keWHuiwg5Y2V5L2NIHB4XG4gICAgICovXG4gICAgb2Zmc2V0PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIHNldCBjbGFzcyB0byB0cmlnZ2VyIGVsZW1lbnQuXG4gICAgICovXG4gICAgb3JpZ2luQWN0aXZlQ2xhc3M/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBzZXQgdGhlIGRyYXdlckNvbnRhaW5lciBieSBpZOOAgUhUTUxFbGVtZW50IG9yIEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LiBlLmcuIGRyYXdlckNvbnRhaW5lciA9ICcjb2Zmc2V0LWhvc3QnXG4gICAgICovXG4gICAgZHJhd2VyQ29udGFpbmVyPzogc3RyaW5nIHwgSFRNTEVsZW1lbnQgfCBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcbiAgICAvKipcbiAgICAgKiBzZXQgdGhlIHJlbmRlciB3YXkuIG9uZSBvZiAnb3Zlcicgb3IgJ3B1c2gnLiBEZWZhdWx0IGlzICdvdmVyJ1xuICAgICAqL1xuICAgIG1vZGU/OiBUaHlTbGlkZU1vZGU7XG59XG5cbmV4cG9ydCBjbGFzcyBUaHlTbGlkZU9wdGlvbiBleHRlbmRzIFRoeVNsaWRlQ29uZmlnIHt9XG5cbmV4cG9ydCBjb25zdCBUSFlfU0xJREVfREVGQVVMVF9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48VGh5U2xpZGVDb25maWc+KCd0aHktc2xpZGUtZGVmYXVsdC1vcHRpb25zJyk7XG5cbmV4cG9ydCBjb25zdCBzbGlkZVVwcGVyT3ZlcmxheU9wdGlvbnM6IFRoeVVwcGVyT3ZlcmxheU9wdGlvbnMgPSB7XG4gICAgbmFtZTogJ3NsaWRlJyxcbiAgICBhbmltYXRpb25FbmFibGVkOiB0cnVlLFxuICAgIGRpc3Bvc2VXaGVuQ2xvc2U6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBzbGlkZURlZmF1bHRDb25maWdWYWx1ZSA9IHtcbiAgICBoYXNCYWNrZHJvcDogdHJ1ZSxcbiAgICBiYWNrZHJvcENsYXNzOiAndGh5LXNsaWRlLWJhY2tkcm9wJyxcbiAgICBiYWNrZHJvcENsb3NhYmxlOiB0cnVlLFxuICAgIGNsb3NlT25OYXZpZ2F0aW9uOiB0cnVlLFxuICAgIGF1dG9Gb2N1czogdHJ1ZSxcbiAgICByZXN0b3JlRm9jdXM6IHRydWUsXG4gICAgZnJvbTogJ3JpZ2h0JyxcbiAgICBwYW5lbENsYXNzOiAndGh5LXNsaWRlJyxcbiAgICBjb250YWluZXJDbGFzczogJycsXG4gICAgcm9sZTogJ3NsaWRlJyxcbiAgICBvZmZzZXQ6IDAsXG4gICAgb3JpZ2luQWN0aXZlQ2xhc3M6ICd0aHktc2xpZGUtb3JpZ2luLWFjdGl2ZScsXG4gICAgbW9kZTogJ292ZXInLFxuICAgIGRyYXdlckNvbnRhaW5lcjogJydcbn07XG5cbmV4cG9ydCBjb25zdCBUSFlfU0xJREVfREVGQVVMVF9DT05GSUdfUFJPVklERVIgPSB7XG4gICAgcHJvdmlkZTogVEhZX1NMSURFX0RFRkFVTFRfQ09ORklHLFxuICAgIHVzZVZhbHVlOiB7fVxufTtcbiJdfQ==
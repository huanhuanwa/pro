import { ThyAbstractOverlayService } from 'ngx-tethys/core';
import { coerceArray } from 'ngx-tethys/util';
import { of } from 'rxjs';
import { Directionality } from '@angular/cdk/bidi';
import { coerceElement } from '@angular/cdk/coercion';
import { Overlay } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { ThySlideContainerComponent } from './slide-container.component';
import { ThyInternalSlideRef, ThySlideRef } from './slide-ref.service';
import { slideDefaultConfigValue, slideUpperOverlayOptions, THY_SLIDE_DEFAULT_CONFIG, ThySlideConfig } from './slide.config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
import * as ɵngcc2 from './slide.config';
export class ThySlideService extends ThyAbstractOverlayService {
    constructor(overlay, injector, defaultConfig) {
        const slideDefaultConfig = Object.assign({}, slideDefaultConfigValue, defaultConfig);
        super(slideUpperOverlayOptions, overlay, injector, slideDefaultConfig);
    }
    originElementAddActiveClass(config) {
        if (config.origin) {
            coerceElement(config.origin).classList.add(...coerceArray(config.originActiveClass));
        }
    }
    originElementRemoveActiveClass(config) {
        if (config.origin) {
            coerceElement(config.origin).classList.remove(...coerceArray(config.originActiveClass));
        }
    }
    buildOverlayConfig(config) {
        const defaultClasses = ['thy-slide-overlay-pane', `thy-slide-${config.from}`];
        const overlayConfig = Object.assign(Object.assign({}, this.buildBaseOverlayConfig(config, defaultClasses)), { width: config.width });
        return overlayConfig;
    }
    attachUpperOverlayContainer(overlay, config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injector = Injector.create({
            parent: userInjector || this.injector,
            providers: [{ provide: ThySlideConfig, useValue: config }]
        });
        const containerPortal = new ComponentPortal(ThySlideContainerComponent, config.viewContainerRef, injector);
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    createUpperOverlayRef(overlayRef, containerInstance, config) {
        return new ThyInternalSlideRef(overlayRef, containerInstance, config);
    }
    createInjector(config, overlayRef, containerInstance) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injectionTokens = [
            { provide: ThySlideContainerComponent, useValue: containerInstance },
            { provide: ThySlideRef, useValue: overlayRef }
        ];
        if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {
            injectionTokens.push({
                provide: Directionality,
                useValue: {
                    value: config.direction,
                    change: of()
                }
            });
        }
        return Injector.create({ parent: userInjector || this.injector, providers: injectionTokens });
    }
    overlayIsOpened(config) {
        const openedOverlay = this.getUpperOverlayById(config.id);
        this.close(openedOverlay);
        return openedOverlay;
    }
    open(componentOrTemplateRef, config) {
        if (this.overlayIsOpened(config)) {
            return;
        }
        const slideRef = this.openUpperOverlay(componentOrTemplateRef, config);
        this.originElementAddActiveClass(slideRef.containerInstance.config);
        slideRef.afterClosed().subscribe(() => {
            this.originElementRemoveActiveClass(slideRef.containerInstance.config);
        });
        return slideRef;
    }
    ngOnDestroy() {
        this.dispose();
    }
}
ThySlideService.ɵfac = function ThySlideService_Factory(t) { return new (t || ThySlideService)(ɵngcc0.ɵɵinject(ɵngcc1.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(THY_SLIDE_DEFAULT_CONFIG, 8)); };
ThySlideService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThySlideService, factory: ThySlideService.ɵfac });
ThySlideService.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: ThySlideConfig, decorators: [{ type: Optional }, { type: Inject, args: [THY_SLIDE_DEFAULT_CONFIG,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc2.ThySlideConfig, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_SLIDE_DEFAULT_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
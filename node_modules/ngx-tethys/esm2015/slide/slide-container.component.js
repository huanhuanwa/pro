import { Component, ElementRef, ViewChild, Inject, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { CdkPortalOutlet } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ThyAbstractOverlayContainer } from 'ngx-tethys/core';
import { Subject } from 'rxjs';
import { slideUpperOverlayOptions, ThySlideConfig } from './slide.config';
import { filter, takeUntil, startWith } from 'rxjs/operators';
import { thySlideAnimations } from './slide-animations';
import { helpers } from 'ngx-tethys/util';
import { ViewportRuler } from '@angular/cdk/overlay';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './slide.config';
import * as ɵngcc2 from '@angular/cdk/overlay';
import * as ɵngcc3 from '@angular/cdk/portal';

function ThySlideContainerComponent_ng_template_0_Template(rf, ctx) { }
export class ThySlideContainerComponent extends ThyAbstractOverlayContainer {
    constructor(elementRef, document, config, changeDetectorRef, renderer, viewportRuler) {
        super(slideUpperOverlayOptions, changeDetectorRef);
        this.elementRef = elementRef;
        this.document = document;
        this.config = config;
        this.renderer = renderer;
        this.viewportRuler = viewportRuler;
        this.animationState = 'void';
        this.slideContainerStyles = {};
        this.ngUnsubscribe$ = new Subject();
        this.animationOpeningDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === this.animationState;
        }));
        this.animationClosingDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === 'exit';
        }));
        this.setDrawerContainerElement();
        this.checkContainerWithinViewport();
        this.addDrawerContainerElementClass();
    }
    get isPush() {
        return this.config.mode === 'push' && !!this.drawerContainerElement;
    }
    get isSide() {
        return this.config.mode === 'side' && !!this.drawerContainerElement;
    }
    get isLeftOrRight() {
        return this.config.from === 'left' || this.config.from === 'right';
    }
    get hostOffset() {
        let offset = 0;
        if (this.isLeftOrRight) {
            offset = this.elementRef.nativeElement.clientWidth + this.config.offset || 0;
        }
        else {
            offset = this.elementRef.nativeElement.clientHeight + this.config.offset || 0;
        }
        return offset;
    }
    get transform() {
        switch (this.config.from) {
            case 'left':
                return `translateX(${this.hostOffset}px)`;
            case 'right':
                return `translateX(-${this.hostOffset}px)`;
            case 'top':
                return `translateY(${this.hostOffset}px)`;
            case 'bottom':
                return `translateY(${this.hostOffset}px)`;
        }
    }
    get drawerContainerElementClass() {
        return `thy-slide-${this.config.mode}-drawer-container`;
    }
    setDrawerContainerElement() {
        if (typeof this.config.drawerContainer === 'string') {
            this.drawerContainerElement = this.config.drawerContainer && document.querySelector(this.config.drawerContainer);
        }
        if (this.config.drawerContainer instanceof ElementRef) {
            this.drawerContainerElement = this.config.drawerContainer.nativeElement;
        }
        if (this.config.drawerContainer instanceof HTMLElement) {
            this.drawerContainerElement = this.config.drawerContainer;
        }
    }
    setSlideContainerStyles() {
        let width, height, top, left;
        const drawerContainerElementRect = (this.drawerContainerElement || document.body).getBoundingClientRect();
        if (this.isLeftOrRight) {
            height = drawerContainerElementRect.height;
            top = drawerContainerElementRect.top;
            this.renderer.setStyle(this.elementRef.nativeElement, 'top', `${top}px`);
        }
        else {
            width = drawerContainerElementRect.width;
            left = drawerContainerElementRect.left;
            this.renderer.setStyle(this.elementRef.nativeElement, 'left', `${left}px`);
        }
        this.slideContainerStyles = {
            width: width,
            height: height
        };
    }
    checkContainerWithinViewport() {
        this.viewportRuler
            .change(100)
            .pipe(startWith(null), takeUntil(this.ngUnsubscribe$))
            .subscribe(() => {
            this.setSlideContainerStyles();
        });
    }
    addDrawerContainerElementClass() {
        if (this.drawerContainerElement) {
            this.renderer.addClass(this.drawerContainerElement, this.drawerContainerElementClass);
        }
    }
    removeDrawerContainerElementClass() {
        if (this.drawerContainerElement) {
            this.renderer.removeClass(this.drawerContainerElement, this.drawerContainerElementClass);
        }
    }
    setDrawerContainerElementStyle() {
        if (this.isSide) {
            this.renderer.setStyle(this.drawerContainerElement, `margin-${this.config.from}`, `${this.hostOffset}px`);
        }
        else if (this.isPush) {
            this.renderer.setStyle(this.drawerContainerElement, `transform`, this.transform);
        }
    }
    removeDrawerContainerElementStyle() {
        if (this.isSide) {
            this.renderer.removeStyle(this.drawerContainerElement, `margin-${this.config.from}`);
        }
        else if (this.isPush) {
            this.renderer.removeStyle(this.drawerContainerElement, `transform`);
        }
    }
    beforeAttachPortal() {
        if (this.config.offset) {
            this.renderer.setStyle(this.elementRef.nativeElement, this.config.from, `${this.config.offset}px`);
            this.animationState = helpers.camelCase(['offset', this.config.from]);
        }
        else {
            this.animationState = this.config.from;
        }
        this.setDrawerContainerElementStyle();
    }
    beforeDetachPortal() {
        this.removeDrawerContainerElementStyle();
    }
    onAnimationDone(event) {
        this.animationStateChanged.emit(event);
    }
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    ngOnDestroy() {
        super.destroy();
        this.removeDrawerContainerElementClass();
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    }
}
ThySlideContainerComponent.ɵfac = function ThySlideContainerComponent_Factory(t) { return new (t || ThySlideContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThySlideConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ViewportRuler)); };
ThySlideContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySlideContainerComponent, selectors: [["thy-slide-container"]], viewQuery: function ThySlideContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.portalOutlet = _t.first);
    } }, hostAttrs: ["tabindex", "-1", 1, "thy-slide-container"], hostVars: 14, hostBindings: function ThySlideContainerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵsyntheticHostListener("@slideContainer.start", function ThySlideContainerComponent_animation_slideContainer_start_HostBindingHandler($event) { return ctx.onAnimationStart($event); })("@slideContainer.done", function ThySlideContainerComponent_animation_slideContainer_done_HostBindingHandler($event) { return ctx.onAnimationDone($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", "slide");
        ɵngcc0.ɵɵsyntheticHostProperty("@slideContainer", ctx.animationState);
        ɵngcc0.ɵɵstyleProp("width", ctx.slideContainerStyles.width, "px")("height", ctx.slideContainerStyles.height, "px")("max-height", ctx.slideContainerStyles.height, "px");
        ɵngcc0.ɵɵclassProp("thy-slide-push", ctx.isPush)("thy-slide-side", ctx.isSide)("thy-slide-over", !ctx.isPush && !ctx.isSide);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkPortalOutlet", ""]], template: function ThySlideContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ThySlideContainerComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
    } }, directives: [ɵngcc3.CdkPortalOutlet], encapsulation: 2, data: { animation: [thySlideAnimations.slideContainer] } });
ThySlideContainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ThySlideConfig },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ViewportRuler }
];
ThySlideContainerComponent.propDecorators = {
    portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySlideContainerComponent, [{
        type: Component,
        args: [{
                selector: 'thy-slide-container',
                template: `
        <ng-template cdkPortalOutlet></ng-template>
    `,
                animations: [thySlideAnimations.slideContainer],
                host: {
                    class: 'thy-slide-container',
                    '[class.thy-slide-push]': 'isPush',
                    '[class.thy-slide-side]': 'isSide',
                    '[class.thy-slide-over]': '!isPush && !isSide',
                    tabindex: '-1',
                    '[attr.role]': `'slide'`,
                    '[@slideContainer]': 'animationState',
                    '(@slideContainer.start)': 'onAnimationStart($event)',
                    '(@slideContainer.done)': 'onAnimationDone($event)',
                    '[style.width.px]': 'slideContainerStyles.width',
                    '[style.height.px]': 'slideContainerStyles.height',
                    '[style.max-height.px]': 'slideContainerStyles.height'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc1.ThySlideConfig }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc2.ViewportRuler }]; }, { portalOutlet: [{
            type: ViewChild,
            args: [CdkPortalOutlet, { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { Component, ContentChild, TemplateRef, Input, HostBinding } from '@angular/core';
import { ThySlideService } from '../slide.service';
export class ThySlideHeaderComponent {
    constructor(thySlideService) {
        this.thySlideService = thySlideService;
        this.isIconFont = false;
        this._iconName = '';
        this.slideLayoutHeader = true;
    }
    set thyIcon(value) {
        this._iconName = value;
        if (value.includes('wtf')) {
            this.isIconFont = true;
        }
        else {
            this.isIconFont = false;
        }
    }
    get thyIcon() {
        return this._iconName;
    }
    ngOnInit() { }
    closeModal(event) {
        event.stopPropagation();
        this.thySlideService.close();
    }
}
ThySlideHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-slide-header',
                template: "<ng-container>\n  <ng-template *ngIf=\"headerTemplate; else default\" [ngTemplateOutlet]=\"headerTemplate\"></ng-template>\n  <ng-template #default>\n    <h3 class=\"thy-slide-header-title\">\n      <thy-icon *ngIf=\"!isIconFont && thyIcon; else iconFont\" [thyIconName]=\"thyIcon\"></thy-icon>\n      <ng-template #iconFont>\n        <i *ngIf=\"thyIcon\" class=\"wft {{ thyIcon }}\"></i>\n      </ng-template>\n      {{ thyTitle }}\n    </h3>\n\n    <div class=\"thy-slide-header-main\">\n      <ng-container>\n        <ng-template *ngIf=\"headerOperateTemplate\" [ngTemplateOutlet]=\"headerOperateTemplate\"> </ng-template>\n      </ng-container>\n    </div>\n    <button type=\"button\" class=\"close\" (click)=\"closeModal($event)\">\n      <thy-icon thyIconName=\"close\"></thy-icon>\n    </button>\n  </ng-template>\n</ng-container>\n"
            },] }
];
ThySlideHeaderComponent.ctorParameters = () => [
    { type: ThySlideService }
];
ThySlideHeaderComponent.propDecorators = {
    slideLayoutHeader: [{ type: HostBinding, args: ['class.thy-slide-header',] }],
    thyTitle: [{ type: Input }],
    thyIcon: [{ type: Input }],
    headerTemplate: [{ type: ContentChild, args: ['thyHeader',] }],
    headerOperateTemplate: [{ type: ContentChild, args: ['thyHeaderOperate',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUtaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zbGlkZS9zbGlkZS1oZWFkZXIvc2xpZGUtaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFVLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFNbkQsTUFBTSxPQUFPLHVCQUF1QjtJQTBCaEMsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBekJwRCxlQUFVLEdBQUcsS0FBSyxDQUFDO1FBRVgsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUVnQixzQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFxQlQsQ0FBQztJQWpCeEQsSUFBYSxPQUFPLENBQUMsS0FBYTtRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDMUI7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQzNCO0lBQ0wsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBUUQsUUFBUSxLQUFJLENBQUM7SUFFYixVQUFVLENBQUMsS0FBWTtRQUNuQixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7WUFyQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLG8xQkFBNEM7YUFDL0M7OztZQUxRLGVBQWU7OztnQ0FXbkIsV0FBVyxTQUFDLHdCQUF3Qjt1QkFFcEMsS0FBSztzQkFFTCxLQUFLOzZCQWFMLFlBQVksU0FBQyxXQUFXO29DQUV4QixZQUFZLFNBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIFRlbXBsYXRlUmVmLCBJbnB1dCwgT25Jbml0LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5U2xpZGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2xpZGUuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGh5LXNsaWRlLWhlYWRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NsaWRlLWhlYWRlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGh5U2xpZGVIZWFkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGlzSWNvbkZvbnQgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgX2ljb25OYW1lID0gJyc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1zbGlkZS1oZWFkZXInKSBzbGlkZUxheW91dEhlYWRlciA9IHRydWU7XG5cbiAgICBASW5wdXQoKSB0aHlUaXRsZTogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgc2V0IHRoeUljb24odmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9pY29uTmFtZSA9IHZhbHVlO1xuICAgICAgICBpZiAodmFsdWUuaW5jbHVkZXMoJ3d0ZicpKSB7XG4gICAgICAgICAgICB0aGlzLmlzSWNvbkZvbnQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc0ljb25Gb250ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdGh5SWNvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ljb25OYW1lO1xuICAgIH1cblxuICAgIEBDb250ZW50Q2hpbGQoJ3RoeUhlYWRlcicpIGhlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgQENvbnRlbnRDaGlsZCgndGh5SGVhZGVyT3BlcmF0ZScpIGhlYWRlck9wZXJhdGVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGh5U2xpZGVTZXJ2aWNlOiBUaHlTbGlkZVNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHt9XG5cbiAgICBjbG9zZU1vZGFsKGV2ZW50OiBFdmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy50aHlTbGlkZVNlcnZpY2UuY2xvc2UoKTtcbiAgICB9XG59XG4iXX0=
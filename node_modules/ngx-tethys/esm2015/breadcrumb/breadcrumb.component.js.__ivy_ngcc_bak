import { Component, ChangeDetectionStrategy, HostBinding, Input } from '@angular/core';
export class ThyBreadcrumbComponent {
    constructor() {
        this._isBreadcrumb = true;
        this.isSlash = false;
        this.isBackslash = false;
    }
    set thyIcon(icon) {
        this.setIcon(icon);
    }
    set thySeparator(type) {
        if (type === 'slash') {
            this.isSlash = true;
        }
        if (type === 'backslash') {
            this.isBackslash = true;
        }
    }
    setIcon(icon) {
        if (icon) {
            if (icon.includes('wtf')) {
                const classes = icon.split(' ');
                if (classes.length === 1) {
                    classes.unshift('wtf');
                }
                this.iconClasses = classes;
            }
            else {
                this.svgIconName = icon;
            }
        }
        else {
            this.iconClasses = null;
            this.svgIconName = null;
        }
    }
}
ThyBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-breadcrumb',
                template: `
        <div class="thy-breadcrumb-icon" *ngIf="svgIconName || iconClasses">
            <thy-icon *ngIf="svgIconName; else iconFont" [thyIconName]="svgIconName"></thy-icon>
            <ng-template #iconFont>
                <i [ngClass]="iconClasses"></i>
            </ng-template>
        </div>
        <ng-content></ng-content>
    `,
                exportAs: 'ThyBreadcrumb',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyBreadcrumbComponent.propDecorators = {
    _isBreadcrumb: [{ type: HostBinding, args: [`class.thy-breadcrumb`,] }],
    isSlash: [{ type: HostBinding, args: [`class.separator-slash`,] }],
    isBackslash: [{ type: HostBinding, args: [`class.separator-backslash`,] }],
    thyIcon: [{ type: Input }],
    thySeparator: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFnQnZGLE1BQU0sT0FBTyxzQkFBc0I7SUFkbkM7UUFleUMsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFDcEIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNaLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBb0NsRSxDQUFDO0lBL0JHLElBQ0ksT0FBTyxDQUFDLElBQVk7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFDSSxZQUFZLENBQUMsSUFBWTtRQUN6QixJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDdkI7UUFDRCxJQUFJLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRU8sT0FBTyxDQUFDLElBQVk7UUFDeEIsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzFCO2dCQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNILElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2FBQzNCO1NBQ0o7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQzs7O1lBcERKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixRQUFRLEVBQUU7Ozs7Ozs7O0tBUVQ7Z0JBQ0QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2xEOzs7NEJBRUksV0FBVyxTQUFDLHNCQUFzQjtzQkFDbEMsV0FBVyxTQUFDLHVCQUF1QjswQkFDbkMsV0FBVyxTQUFDLDJCQUEyQjtzQkFLdkMsS0FBSzsyQkFLTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGh5LWJyZWFkY3J1bWInLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0aHktYnJlYWRjcnVtYi1pY29uXCIgKm5nSWY9XCJzdmdJY29uTmFtZSB8fCBpY29uQ2xhc3Nlc1wiPlxuICAgICAgICAgICAgPHRoeS1pY29uICpuZ0lmPVwic3ZnSWNvbk5hbWU7IGVsc2UgaWNvbkZvbnRcIiBbdGh5SWNvbk5hbWVdPVwic3ZnSWNvbk5hbWVcIj48L3RoeS1pY29uPlxuICAgICAgICAgICAgPG5nLXRlbXBsYXRlICNpY29uRm9udD5cbiAgICAgICAgICAgICAgICA8aSBbbmdDbGFzc109XCJpY29uQ2xhc3Nlc1wiPjwvaT5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgYCxcbiAgICBleHBvcnRBczogJ1RoeUJyZWFkY3J1bWInLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFRoeUJyZWFkY3J1bWJDb21wb25lbnQge1xuICAgIEBIb3N0QmluZGluZyhgY2xhc3MudGh5LWJyZWFkY3J1bWJgKSBfaXNCcmVhZGNydW1iID0gdHJ1ZTtcbiAgICBASG9zdEJpbmRpbmcoYGNsYXNzLnNlcGFyYXRvci1zbGFzaGApIGlzU2xhc2ggPSBmYWxzZTtcbiAgICBASG9zdEJpbmRpbmcoYGNsYXNzLnNlcGFyYXRvci1iYWNrc2xhc2hgKSBpc0JhY2tzbGFzaCA9IGZhbHNlO1xuXG4gICAgaWNvbkNsYXNzZXM6IHN0cmluZ1tdO1xuICAgIHN2Z0ljb25OYW1lOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlJY29uKGljb246IHN0cmluZykge1xuICAgICAgICB0aGlzLnNldEljb24oaWNvbik7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5U2VwYXJhdG9yKHR5cGU6IHN0cmluZykge1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3NsYXNoJykge1xuICAgICAgICAgICAgdGhpcy5pc1NsYXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2JhY2tzbGFzaCcpIHtcbiAgICAgICAgICAgIHRoaXMuaXNCYWNrc2xhc2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRJY29uKGljb246IHN0cmluZykge1xuICAgICAgICBpZiAoaWNvbikge1xuICAgICAgICAgICAgaWYgKGljb24uaW5jbHVkZXMoJ3d0ZicpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IGljb24uc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3Nlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy51bnNoaWZ0KCd3dGYnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uQ2xhc3NlcyA9IGNsYXNzZXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3ZnSWNvbk5hbWUgPSBpY29uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pY29uQ2xhc3NlcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnN2Z0ljb25OYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
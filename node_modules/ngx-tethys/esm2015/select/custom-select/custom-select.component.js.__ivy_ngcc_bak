import { __decorate, __metadata } from "tslib";
import { getFlexiblePositions, InputBoolean, ScrollToService, UpdateHostClassService } from 'ngx-tethys/core';
import { THY_OPTION_PARENT_COMPONENT, ThyOptionComponent, ThySelectOptionGroupComponent } from 'ngx-tethys/shared';
import { A, coerceBooleanProperty, DOWN_ARROW, END, ENTER, hasModifierKey, helpers, HOME, isArray, isFunction, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from 'ngx-tethys/util';
import { defer, merge, Subject, timer } from 'rxjs';
import { filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { SelectionModel } from '@angular/cdk/collections';
import { CdkConnectedOverlay, Overlay, ScrollDispatcher, ViewportRuler } from '@angular/cdk/overlay';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, NgZone, Optional, Output, QueryList, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { THY_SELECT_SCROLL_STRATEGY } from '../select.config';
export const SELECT_PANEL_MAX_HEIGHT = 300;
export const SELECT_OPTION_MAX_HEIGHT = 40;
export const SELECT_OPTION_GROUP_MAX_HEIGHT = 30;
export const SELECT_PANEL_PADDING_TOP = 10;
const noop = () => { };
const ɵ0 = noop;
export class ThySelectCustomComponent {
    constructor(ngZone, elementRef, updateHostClassService, viewportRuler, changeDetectorRef, scrollDispatcher, overlay, scrollStrategyFactory) {
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.viewportRuler = viewportRuler;
        this.changeDetectorRef = changeDetectorRef;
        this.scrollDispatcher = scrollDispatcher;
        this.overlay = overlay;
        this.scrollStrategyFactory = scrollStrategyFactory;
        this.disabled = false;
        this.mode = '';
        this.emptyStateText = '无任何选项';
        this.emptySearchMessageText = '没有匹配到任何选项';
        this.scrollTop = 0;
        this.modalValue = null;
        this.defaultOffset = 4;
        this.destroy$ = new Subject();
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.optionSelectionChanges = defer(() => {
            if (this.options) {
                return merge(...this.options.map(option => option.selectionChange));
            }
            return this.ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelectionChanges));
        });
        this.isSelectCustom = true;
        this.isSelect = true;
        this.panelOpen = false;
        this.tabIndex = '0';
        this.thyOnSearch = new EventEmitter();
        this.thyOnScrollToBottom = new EventEmitter();
        this.thyOnExpandStatusChange = new EventEmitter();
        this.thyLoadState = true;
        this.thyEnableScrollLoad = false;
        this.thyAllowClear = false;
        this.thyPlacement = 'bottom';
        this.thyFooterClass = 'thy-custom-select-footer';
        this.thyHasBackdrop = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
        this.buildScrollStrategy();
    }
    set thyMode(value) {
        this.mode = value;
        this.instanceSelectionModel();
        this.getPositions();
        this.setDropDownClass();
    }
    get thyMode() {
        return this.mode;
    }
    get thySize() {
        return this.size;
    }
    set thySize(value) {
        this.size = value;
    }
    set thyEmptyStateText(value) {
        this.emptyStateText = value;
    }
    set thyEmptySearchMessageText(value) {
        this.emptySearchMessageText = value;
    }
    set thyDisabled(value) {
        this.disabled = coerceBooleanProperty(value);
    }
    handleKeydown(event) {
        if (!this.disabled) {
            if (event.keyCode === ENTER) {
                event.stopPropagation();
            }
            this.panelOpen ? this.handleOpenKeydown(event) : this.handleClosedKeydown(event);
        }
    }
    onDocumentClick(event) {
        if (!this.elementRef.nativeElement.contains(event.target) && this.panelOpen) {
            this.close();
        }
    }
    get optionsChanges$() {
        let previousOptions = this.options.toArray();
        return this.options.changes.pipe(map(data => {
            return this.options.toArray();
        }), filter(data => {
            const res = previousOptions.length !== data.length || previousOptions.some((op, index) => op !== data[index]);
            previousOptions = data;
            return res;
        }));
    }
    buildScrollStrategy() {
        if (this.scrollStrategyFactory && isFunction(this.scrollStrategyFactory)) {
            this.scrollStrategy = this.scrollStrategyFactory();
        }
        else {
            this.scrollStrategy = this.overlay.scrollStrategies.reposition();
        }
    }
    writeValue(value) {
        this.modalValue = value;
        if (this.options && this.options.length > 0) {
            this.setSelectionByModelValue(this.modalValue);
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    ngOnInit() {
        this.getPositions();
        this.viewportRuler
            .change()
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            if (this.panelOpen) {
                this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();
                this.changeDetectorRef.markForCheck();
            }
        });
        if (!this.selectionModel) {
            this.instanceSelectionModel();
        }
        this.setDropDownClass();
    }
    ngAfterContentInit() {
        this.optionsChanges$.pipe(startWith(null), takeUntil(this.destroy$)).subscribe(data => {
            this.resetOptions();
            this.initializeSelection();
            this.initKeyManager();
            this.highlightCorrectOption(false);
            this.changeDetectorRef.markForCheck();
        });
        if (this.thyAutoExpand) {
            timer().subscribe(() => {
                this.changeDetectorRef.markForCheck();
                this.open();
                this.focus();
            });
        }
    }
    get isHiddenOptions() {
        return this.options.toArray().every(option => option.hidden);
    }
    onAttached() {
        this.cdkConnectedOverlay.positionChange.pipe(take(1)).subscribe(() => {
            if (this.panel) {
                if (this.keyManager.activeItem) {
                    ScrollToService.scrollToElement(this.keyManager.activeItem.element.nativeElement, this.panel.nativeElement);
                    this.changeDetectorRef.detectChanges();
                }
                else {
                    if (!this.empty) {
                        ScrollToService.scrollToElement(this.selectionModel.selected[0].element.nativeElement, this.panel.nativeElement);
                        this.changeDetectorRef.detectChanges();
                    }
                }
            }
        });
    }
    dropDownMouseMove(event) {
        if (this.keyManager.activeItem) {
            this.keyManager.setActiveItem(-1);
        }
    }
    onOptionsScrolled(elementRef) {
        const scroll = this.elementRef.nativeElement.scrollTop, height = this.elementRef.nativeElement.clientHeight, scrollHeight = this.elementRef.nativeElement.scrollHeight;
        if (scroll + height + 10 >= scrollHeight) {
            this.ngZone.run(() => {
                this.thyOnScrollToBottom.emit();
            });
        }
    }
    focus(options) {
        this.elementRef.nativeElement.focus(options);
    }
    onSearchFilter(searchText) {
        searchText = searchText.trim();
        if (this.thyServerSearch) {
            this.thyOnSearch.emit(searchText);
        }
        else {
            const options = this.options.toArray();
            options.forEach(option => {
                if (option.matchSearchText(searchText)) {
                    option.showOption();
                }
                else {
                    option.hideOption();
                }
            });
            this.highlightCorrectOption(false);
            this.updateCdkConnectedOverlayPositions();
        }
    }
    remove($event) {
        $event.$eventOrigin.stopPropagation();
        if (this.disabled) {
            return;
        }
        if (!this.options.find(option => option === $event.item)) {
            $event.item.deselect();
            // fix option unselect can not emit changes;
            this.onSelect($event.item, true);
        }
        else {
            $event.item.deselect();
        }
    }
    clearSelectValue(event) {
        if (event) {
            event.stopPropagation();
        }
        if (this.disabled) {
            return;
        }
        this.selectionModel.clear();
        this.changeDetectorRef.markForCheck();
        this.emitModelValueChange();
    }
    updateCdkConnectedOverlayPositions() {
        setTimeout(() => {
            if (this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef) {
                this.cdkConnectedOverlay.overlayRef.updatePosition();
            }
        });
    }
    get selected() {
        return this.isMultiple ? this.selectionModel.selected : this.selectionModel.selected[0];
    }
    get isMultiple() {
        return this.mode === 'multiple';
    }
    get empty() {
        return !this.selectionModel || this.selectionModel.isEmpty();
    }
    getItemCount() {
        return this.options.length + this.optionGroups.length;
    }
    toggle(event) {
        this.panelOpen ? this.close() : this.open();
    }
    open() {
        if (this.disabled || !this.options || this.panelOpen) {
            return;
        }
        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();
        this.panelOpen = true;
        this.highlightCorrectOption();
        this.thyOnExpandStatusChange.emit(this.panelOpen);
    }
    close() {
        if (this.panelOpen) {
            this.panelOpen = false;
            this.thyOnExpandStatusChange.emit(this.panelOpen);
            this.focus();
            this.changeDetectorRef.markForCheck();
        }
    }
    emitModelValueChange() {
        const selectedValues = this.selectionModel.selected;
        const changeValue = selectedValues.map((option) => {
            return option.thyValue;
        });
        if (this.isMultiple) {
            this.modalValue = changeValue;
        }
        else {
            if (changeValue.length === 0) {
                this.modalValue = null;
            }
            else {
                this.modalValue = changeValue[0];
            }
        }
        this.onChangeCallback(this.modalValue);
        this.updateCdkConnectedOverlayPositions();
    }
    highlightCorrectOption(fromOpenPanel = true) {
        if (this.keyManager && this.panelOpen) {
            if (fromOpenPanel) {
                if (this.keyManager.activeItem) {
                    return;
                }
                if (this.empty) {
                    this.keyManager.setFirstItemActive();
                }
                else {
                    this.keyManager.setActiveItem(this.selectionModel.selected[0]);
                }
            }
            else {
                // always set first option active
                this.keyManager.setFirstItemActive();
            }
        }
    }
    initKeyManager() {
        if (this.keyManager && this.keyManager.activeItem) {
            this.keyManager.activeItem.setInactiveStyles();
        }
        this.keyManager = new ActiveDescendantKeyManager(this.options)
            .withTypeAhead()
            .withWrap()
            .withVerticalOrientation()
            .withAllowedModifierKeys(['shiftKey']);
        this.keyManager.tabOut.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.focus();
            this.close();
        });
        this.keyManager.change.pipe(takeUntil(this.destroy$)).subscribe(() => {
            if (this.panelOpen && this.panel) {
                if (this.keyManager.activeItem) {
                    ScrollToService.scrollToElement(this.keyManager.activeItem.element.nativeElement, this.panel.nativeElement);
                }
            }
            else if (!this.panelOpen && !this.isMultiple && this.keyManager.activeItem) {
                this.keyManager.activeItem.selectViaInteraction();
            }
        });
    }
    handleClosedKeydown(event) {
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;
        const isOpenKey = keyCode === ENTER || keyCode === SPACE;
        const manager = this.keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((isOpenKey && !hasModifierKey(event)) || ((this.isMultiple || event.altKey) && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.open();
        }
        else if (!this.isMultiple) {
            const previouslySelectedOption = this.selected;
            if (keyCode === HOME || keyCode === END) {
                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();
                event.preventDefault();
            }
            else {
                manager.onKeydown(event);
            }
        }
    }
    handleOpenKeydown(event) {
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;
        const manager = this.keyManager;
        if (keyCode === HOME || keyCode === END) {
            event.preventDefault();
            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();
        }
        else if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.close();
        }
        else if ((keyCode === ENTER || keyCode === SPACE) && (manager.activeItem || !this.empty) && !hasModifierKey(event)) {
            event.preventDefault();
            if (!manager.activeItem) {
                if (manager.activeItemIndex === -1 && !this.empty) {
                    manager.setActiveItem(this.selectionModel.selected[0]);
                }
            }
            manager.activeItem.selectViaInteraction();
        }
        else if (this.isMultiple && keyCode === A && event.ctrlKey) {
            event.preventDefault();
            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);
            this.options.forEach(option => {
                if (!option.disabled) {
                    hasDeselectedOptions ? option.select() : option.deselect();
                }
            });
        }
        else {
            if (manager.activeItemIndex === -1 && !this.empty) {
                manager.setActiveItem(this.selectionModel.selected[0]);
            }
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (this.isMultiple &&
                isArrowKey &&
                event.shiftKey &&
                manager.activeItem &&
                manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem.selectViaInteraction();
            }
        }
    }
    getPositions() {
        this.dropDownPositions = getFlexiblePositions(this.thyPlacement, this.defaultOffset);
    }
    instanceSelectionModel() {
        if (this.selectionModel) {
            this.selectionModel.clear();
        }
        this.selectionModel = new SelectionModel(this.isMultiple);
        if (this.selectionModelSubscription) {
            this.selectionModelSubscription.unsubscribe();
            this.selectionModelSubscription = null;
        }
        this.selectionModelSubscription = this.selectionModel.changed.pipe(takeUntil(this.destroy$)).subscribe(event => {
            event.added.forEach(option => option.select());
            event.removed.forEach(option => option.deselect());
        });
    }
    resetOptions() {
        const changedOrDestroyed$ = merge(this.optionsChanges$, this.destroy$);
        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed$)).subscribe((event) => {
            this.onSelect(event.option, event.isUserInput);
            if (event.isUserInput && !this.isMultiple && this.panelOpen) {
                this.close();
                this.focus();
            }
        });
    }
    initializeSelection() {
        Promise.resolve().then(() => {
            this.setSelectionByModelValue(this.modalValue);
        });
    }
    setDropDownClass() {
        let modeClass = '';
        if (this.isMultiple) {
            modeClass = `thy-select-dropdown-${this.mode}`;
        }
        else {
            modeClass = `thy-select-dropdown-single`;
        }
        this.dropDownClass = {
            [`thy-select-dropdown`]: true,
            [modeClass]: true
        };
    }
    setSelectionByModelValue(modalValue) {
        if (helpers.isUndefinedOrNull(modalValue)) {
            if (this.selectionModel.selected.length > 0) {
                this.selectionModel.clear();
                this.changeDetectorRef.markForCheck();
            }
            return;
        }
        if (this.isMultiple) {
            if (isArray(modalValue)) {
                const selected = [...this.selectionModel.selected];
                this.selectionModel.clear();
                modalValue.forEach(itemValue => {
                    const option = this.options.find(_option => _option.thyValue === itemValue) ||
                        selected.find(_option => _option.thyValue === itemValue);
                    if (option) {
                        this.selectionModel.select(option);
                    }
                });
            }
        }
        else {
            const selectedOption = this.options.find(option => {
                return option.thyValue === modalValue;
            });
            if (selectedOption) {
                this.selectionModel.select(selectedOption);
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    onSelect(option, isUserInput) {
        const wasSelected = this.selectionModel.isSelected(option);
        if (option.thyValue == null && !this.isMultiple) {
            option.deselect();
            this.selectionModel.clear();
        }
        else {
            if (wasSelected !== option.selected) {
                option.selected ? this.selectionModel.select(option) : this.selectionModel.deselect(option);
            }
            if (isUserInput) {
                this.keyManager.setActiveItem(option);
            }
            if (this.isMultiple) {
                this.sortValues();
                if (isUserInput) {
                    this.focus();
                }
            }
        }
        if (wasSelected !== this.selectionModel.isSelected(option)) {
            this.emitModelValueChange();
        }
        this.changeDetectorRef.markForCheck();
    }
    sortValues() {
        if (this.isMultiple) {
            const options = this.options.toArray();
            if (this.thySortComparator) {
                this.selectionModel.sort((a, b) => {
                    return this.thySortComparator(a, b, options);
                });
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ThySelectCustomComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-custom-select',
                template: "<div\n  cdk-overlay-origin\n  thySelectControl\n  (click)=\"toggle($event)\"\n  #origin=\"cdkOverlayOrigin\"\n  #trigger\n  [thyPanelOpened]=\"panelOpen\"\n  [thySelectedOptions]=\"selected\"\n  [thyIsMultiple]=\"isMultiple\"\n  [thyShowSearch]=\"thyShowSearch\"\n  [thyAllowClear]=\"thyAllowClear\"\n  [thySize]=\"thySize\"\n  [thyPlaceholder]=\"thyPlaceHolder\"\n  [customDisplayTemplate]=\"selectedValueDisplayRef\"\n  [thyDisabled]=\"disabled\"\n  (thyOnClear)=\"clearSelectValue($event)\"\n  (thyOnRemove)=\"remove($event)\"\n  (thyOnSearch)=\"onSearchFilter($event)\"\n></div>\n\n<ng-template\n  cdk-connected-overlay\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayHasBackdrop]=\"thyHasBackdrop\"\n  [cdkConnectedOverlayPositions]=\"dropDownPositions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"panelOpen\"\n  [cdkConnectedOverlayWidth]=\"triggerRect?.width\"\n  [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n  (attach)=\"onAttached()\"\n  (detach)=\"close()\"\n>\n  <div thyStopPropagation [ngClass]=\"dropDownClass\" (mousemove)=\"dropDownMouseMove($event)\">\n    <ng-container *ngIf=\"options.length > 0 || optionGroups.length > 0; else emptyPlaceholder\">\n      <div\n        #panel\n        class=\"thy-select-dropdown-options\"\n        thyScroll\n        (thyOnScrolled)=\"onOptionsScrolled($event)\"\n        [thyEnable]=\"thyEnableScrollLoad\"\n      >\n        <ng-content></ng-content>\n        <ng-container *ngIf=\"isHiddenOptions\">\n          <thy-loading [thyDone]=\"thyLoadState\" thySize=\"sm\"></thy-loading>\n          <div class=\"thy-select-empty-content\">\n            <thy-empty *ngIf=\"thyLoadState\" [thyMessage]=\"emptySearchMessageText\" thySize=\"sm\"></thy-empty>\n          </div>\n        </ng-container>\n      </div>\n    </ng-container>\n    <ng-template #emptyPlaceholder>\n      <thy-loading [thyDone]=\"thyLoadState\" thySize=\"sm\"></thy-loading>\n      <div class=\"thy-select-empty-content\">\n        <thy-empty *ngIf=\"thyLoadState\" [thyMessage]=\"emptyStateText\" thySize=\"sm\"></thy-empty>\n      </div>\n    </ng-template>\n    <div *ngIf=\"thyFooterTemplate\" [class]=\"thyFooterClass ? thyFooterClass : 'thy-custom-select-footer'\">\n      <ng-template *ngIf=\"thyFooterTemplate\" [ngTemplateOutlet]=\"thyFooterTemplate\"></ng-template>\n    </div>\n  </div>\n</ng-template>\n",
                exportAs: 'thyCustomSelect',
                providers: [
                    {
                        provide: THY_OPTION_PARENT_COMPONENT,
                        useExisting: ThySelectCustomComponent
                    },
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThySelectCustomComponent),
                        multi: true
                    },
                    UpdateHostClassService
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThySelectCustomComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: UpdateHostClassService },
    { type: ViewportRuler },
    { type: ChangeDetectorRef },
    { type: ScrollDispatcher },
    { type: Overlay },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_SELECT_SCROLL_STRATEGY,] }] }
];
ThySelectCustomComponent.propDecorators = {
    cdkConnectedOverlay: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: true },] }],
    isSelectCustom: [{ type: HostBinding, args: ['class.thy-select-custom',] }],
    isSelect: [{ type: HostBinding, args: ['class.thy-select',] }],
    panelOpen: [{ type: HostBinding, args: ['class.menu-is-opened',] }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    thyOnSearch: [{ type: Output }],
    thyOnScrollToBottom: [{ type: Output }],
    thyOnExpandStatusChange: [{ type: Output }],
    thyShowSearch: [{ type: Input }],
    thyPlaceHolder: [{ type: Input }],
    thyServerSearch: [{ type: Input }],
    thyLoadState: [{ type: Input }],
    thyMode: [{ type: Input }],
    thySize: [{ type: Input }],
    thyEmptyStateText: [{ type: Input }],
    thyEmptySearchMessageText: [{ type: Input }],
    thyEnableScrollLoad: [{ type: Input }],
    thyAllowClear: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    thySortComparator: [{ type: Input }],
    thyFooterTemplate: [{ type: Input }],
    thyPlacement: [{ type: Input }],
    thyFooterClass: [{ type: Input }],
    selectedValueDisplayRef: [{ type: ContentChild, args: ['selectedDisplay',] }],
    thyAutoExpand: [{ type: Input }],
    thyHasBackdrop: [{ type: Input }],
    trigger: [{ type: ViewChild, args: ['trigger', { read: ElementRef, static: true },] }],
    panel: [{ type: ViewChild, args: ['panel', { read: ElementRef },] }],
    options: [{ type: ContentChildren, args: [ThyOptionComponent, { descendants: true },] }],
    optionGroups: [{ type: ContentChildren, args: [ThySelectOptionGroupComponent,] }],
    handleKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThySelectCustomComponent.prototype, "thyHasBackdrop", void 0);
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,
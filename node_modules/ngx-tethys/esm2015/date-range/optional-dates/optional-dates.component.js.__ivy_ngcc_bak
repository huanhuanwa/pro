import { Component } from '@angular/core';
import { ThyPopover } from 'ngx-tethys/popover';
export class OptionalDateRangesComponent {
    constructor(thyPopover) {
        this.thyPopover = thyPopover;
        this.hiddenMenu = false;
        this.customValue = '自定义';
    }
    ngOnInit() { }
    _selectDateRange(dateRange) {
        this.selectedDate = dateRange;
        this.selectedDateRange(dateRange);
        this.thyPopover.close();
    }
    _selectedCustomDate(date) {
        this.selectedDate = {
            begin: date.begin,
            end: date.end,
            key: this.customKey,
            text: this.customValue
        };
        this.selectedDateRange(this.selectedDate);
    }
}
OptionalDateRangesComponent.decorators = [
    { type: Component, args: [{
                selector: 'date-range-optional',
                template: "<thy-action-menu *ngIf=\"!hiddenMenu\" class=\"thy-date-range-action-menu-container\">\n  <a thyActionMenuItem href=\"javascript:;\" *ngFor=\"let dateRange of optionalDateRanges\" (click)=\"_selectDateRange(dateRange)\">\n    <span thyActionMenuItemName>{{ dateRange?.text }}</span>\n    <span thyActionMenuItemExtendIcon *ngIf=\"dateRange.key === selectedDate?.key\">\n      <thy-icon class=\"text-primary\" thyIconName=\"check\"></thy-icon>\n    </span>\n  </a>\n  <a\n    thyActionMenuItem\n    href=\"javascript:;\"\n    thyRangePicker\n    [(ngModel)]=\"selectedDate\"\n    [thyMinDate]=\"minDate\"\n    [thyMaxDate]=\"maxDate\"\n    (ngModelChange)=\"_selectedCustomDate($event)\"\n  >\n    <span thyActionMenuItemName>{{ customValue }}</span>\n    <span thyActionMenuItemExtendIcon *ngIf=\"customKey === selectedDate?.key\">\n      <thy-icon class=\"text-primary\" thyIconName=\"check\"></thy-icon>\n    </span>\n  </a>\n</thy-action-menu>\n"
            },] }
];
OptionalDateRangesComponent.ctorParameters = () => [
    { type: ThyPopover }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uYWwtZGF0ZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2RhdGUtcmFuZ2Uvb3B0aW9uYWwtZGF0ZXMvb3B0aW9uYWwtZGF0ZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTWhELE1BQU0sT0FBTywyQkFBMkI7SUFpQnBDLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFoQjFDLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFJbkIsZ0JBQVcsR0FBRyxLQUFLLENBQUM7SUFZeUIsQ0FBQztJQUU5QyxRQUFRLEtBQUksQ0FBQztJQUViLGdCQUFnQixDQUFDLFNBQTRCO1FBQ3pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxJQUF1QjtRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHO1lBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXO1NBQ3pCLENBQUM7UUFDRixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzlDLENBQUM7OztZQXZDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsZzhCQUE4QzthQUNqRDs7O1lBTFEsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlUmFuZ2VJdGVtSW5mbyB9IGZyb20gJy4uL2RhdGUtcmFuZ2UuY2xhc3MnO1xuaW1wb3J0IHsgVGh5UG9wb3ZlciB9IGZyb20gJ25neC10ZXRoeXMvcG9wb3Zlcic7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZGF0ZS1yYW5nZS1vcHRpb25hbCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL29wdGlvbmFsLWRhdGVzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBPcHRpb25hbERhdGVSYW5nZXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGhpZGRlbk1lbnUgPSBmYWxzZTtcblxuICAgIG9wdGlvbmFsRGF0ZVJhbmdlczogRGF0ZVJhbmdlSXRlbUluZm9bXTtcblxuICAgIGN1c3RvbVZhbHVlID0gJ+iHquWumuS5iSc7XG5cbiAgICBjdXN0b21LZXk6IHN0cmluZztcblxuICAgIG1pbkRhdGU6IG51bWJlciB8IERhdGU7XG5cbiAgICBtYXhEYXRlOiBudW1iZXIgfCBEYXRlO1xuXG4gICAgc2VsZWN0ZWREYXRlUmFuZ2U6IChkYXRlOiBEYXRlUmFuZ2VJdGVtSW5mbykgPT4gdm9pZDtcblxuICAgIHNlbGVjdGVkRGF0ZTogRGF0ZVJhbmdlSXRlbUluZm87XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRoeVBvcG92ZXI6IFRoeVBvcG92ZXIpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHt9XG5cbiAgICBfc2VsZWN0RGF0ZVJhbmdlKGRhdGVSYW5nZTogRGF0ZVJhbmdlSXRlbUluZm8pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBkYXRlUmFuZ2U7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlUmFuZ2UoZGF0ZVJhbmdlKTtcbiAgICAgICAgdGhpcy50aHlQb3BvdmVyLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgX3NlbGVjdGVkQ3VzdG9tRGF0ZShkYXRlOiBEYXRlUmFuZ2VJdGVtSW5mbykge1xuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IHtcbiAgICAgICAgICAgIGJlZ2luOiBkYXRlLmJlZ2luLFxuICAgICAgICAgICAgZW5kOiBkYXRlLmVuZCxcbiAgICAgICAgICAgIGtleTogdGhpcy5jdXN0b21LZXksXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLmN1c3RvbVZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlUmFuZ2UodGhpcy5zZWxlY3RlZERhdGUpO1xuICAgIH1cbn1cbiJdfQ==
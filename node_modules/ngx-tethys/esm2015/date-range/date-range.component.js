import { Component, forwardRef, Input, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThyPopover } from 'ngx-tethys/popover';
import { OptionalDateRangesComponent } from './optional-dates/optional-dates.component';
import { getUnixTime, startOfISOWeek, endOfISOWeek, endOfMonth, startOfMonth, addDays, addMonths, addYears } from 'date-fns';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/popover';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/nav';
import * as ɵngcc4 from 'ngx-tethys/icon';
import * as ɵngcc5 from 'ngx-tethys/date-picker';

function ThyDateRangeComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "thy-icon-nav", 4);
    ɵngcc0.ɵɵlistener("click", function ThyDateRangeComponent_ng_container_1_Template_thy_icon_nav_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.previous(); });
    ɵngcc0.ɵɵelementStart(2, "a", 5);
    ɵngcc0.ɵɵelement(3, "thy-icon", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ThyDateRangeComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "thyDatePickerFormat");
    ɵngcc0.ɵɵpipe(3, "thyDatePickerFormat");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r1.selectedDate == null ? null : ctx_r1.selectedDate.begin), " ~ ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r1.selectedDate == null ? null : ctx_r1.selectedDate.end), " ");
} }
function ThyDateRangeComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "thyDatePickerFormat");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r2.selectedDate == null ? null : ctx_r2.selectedDate.begin, ctx_r2.thyPickerFormat), " ");
} }
function ThyDateRangeComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.selectedDate == null ? null : ctx_r3.selectedDate.text);
} }
function ThyDateRangeComponent_thy_icon_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 7);
} }
function ThyDateRangeComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "thy-icon-nav", 4);
    ɵngcc0.ɵɵlistener("click", function ThyDateRangeComponent_ng_container_7_Template_thy_icon_nav_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.next(); });
    ɵngcc0.ɵɵelementStart(2, "a", 5);
    ɵngcc0.ɵɵelement(3, "thy-icon", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
const _c0 = function (a0) { return { "thy-date-range-disabled": a0 }; };
const allDayTimestamp = 24 * 60 * 60;
const INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => ThyDateRangeComponent),
    multi: true
};
export class ThyDateRangeComponent {
    constructor(thyPopover, cdr) {
        this.thyPopover = thyPopover;
        this.cdr = cdr;
        this.thyHiddenMenu = false;
        this.thyDisabledSwitch = false;
        this.thyCustomTextValue = '自定义';
        this.thyCustomKey = 'custom';
        this.optionalDateRanges = [
            {
                key: 'week',
                text: '本周',
                begin: getUnixTime(startOfISOWeek(new Date())),
                end: getUnixTime(endOfISOWeek(new Date())),
                timestamp: {
                    interval: 7,
                    unit: 'day'
                }
            },
            {
                key: 'month',
                text: '本月',
                begin: getUnixTime(startOfMonth(new Date())),
                end: getUnixTime(endOfMonth(new Date())),
                timestamp: {
                    interval: 1,
                    unit: 'month'
                }
            }
        ];
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    set thyOptionalDateRanges(value) {
        this.optionalDateRanges = value.length > 0 ? value : this.optionalDateRanges;
    }
    writeValue(value) {
        if (value) {
            this.selectedDate = value;
        }
        else if (this.optionalDateRanges.length > 0) {
            this.selectedDate = this.optionalDateRanges[0];
            this.onModelChange(this.selectedDate);
        }
        this._setSelectedDateRange();
        this.cdr.detectChanges();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    ngOnInit() { }
    _setSelectedDateRange() {
        this.selectedDateRange = {
            begin: this.selectedDate.begin,
            end: this.selectedDate.end
        };
    }
    _calculateNewTime(type) {
        if (this.selectedDate.timestamp) {
            const beginDate = new Date(this.selectedDate.begin * 1000);
            const endDate = new Date(this.selectedDate.end * 1000);
            const interval = this.selectedDate.timestamp.interval;
            if (this.selectedDate.timestamp.unit === 'day') {
                if (type === 'previous') {
                    return {
                        begin: getUnixTime(addDays(beginDate, -1 * interval)),
                        end: getUnixTime(addDays(endDate, -1 * interval)),
                        key: this.thyCustomKey
                    };
                }
                else {
                    return {
                        begin: getUnixTime(addDays(beginDate, 1 * interval)),
                        end: getUnixTime(addDays(endDate, 1 * interval)),
                        key: this.thyCustomKey
                    };
                }
            }
            else if (this.selectedDate.timestamp.unit === 'month') {
                if (type === 'previous') {
                    return {
                        begin: getUnixTime(addMonths(beginDate, -1 * interval)),
                        end: getUnixTime(addMonths(endDate, -1 * interval)),
                        key: this.thyCustomKey
                    };
                }
                else {
                    return {
                        begin: getUnixTime(addMonths(beginDate, 1 * interval)),
                        end: getUnixTime(addMonths(endDate, 1 * interval)),
                        key: this.thyCustomKey
                    };
                }
            }
            else if (this.selectedDate.timestamp.unit === 'year') {
                if (type === 'previous') {
                    return {
                        begin: getUnixTime(addYears(beginDate, -1 * interval)),
                        end: getUnixTime(addYears(endDate, -1 * interval)),
                        key: this.thyCustomKey
                    };
                }
                else {
                    return {
                        begin: getUnixTime(addYears(beginDate, 1 * interval)),
                        end: getUnixTime(addYears(endDate, 1 * interval)),
                        key: this.thyCustomKey
                    };
                }
            }
        }
        else {
            const interval = this.selectedDate.end - this.selectedDate.begin + allDayTimestamp;
            if (type === 'previous') {
                return {
                    begin: this.selectedDate.begin - interval,
                    end: this.selectedDate.end - interval,
                    key: this.thyCustomKey
                };
            }
            else {
                return {
                    begin: this.selectedDate.begin + interval,
                    end: this.selectedDate.end + interval,
                    key: this.thyCustomKey
                };
            }
        }
    }
    _setPreviousOrNextDate(type) {
        this.selectedDate = Object.assign({}, this.selectedDate, this._calculateNewTime(type));
        this._setSelectedDateRange();
        this.onModelChange(this.selectedDate);
    }
    previous() {
        this._setPreviousOrNextDate('previous');
    }
    next() {
        this._setPreviousOrNextDate('next');
    }
    openOptionalDateRangesMenu(event) {
        if (this.thyHiddenMenu) {
            return;
        }
        this.thyPopover.open(OptionalDateRangesComponent, {
            origin: event.currentTarget,
            hasBackdrop: true,
            backdropClass: 'thy-overlay-transparent-backdrop',
            offset: 0,
            manualClosure: true,
            originActiveClass: 'thy-date-range-text-active',
            initialState: {
                hiddenMenu: this.thyHiddenMenu,
                optionalDateRanges: this.optionalDateRanges,
                selectedDate: this.selectedDate,
                minDate: this.thyMinDate,
                maxDate: this.thyMaxDate,
                customValue: this.thyCustomTextValue,
                customKey: this.thyCustomKey,
                selectedDateRange: (dateRange) => {
                    this.onModelChange(dateRange);
                    this.selectedDate = dateRange;
                }
            }
        });
    }
}
ThyDateRangeComponent.ɵfac = function ThyDateRangeComponent_Factory(t) { return new (t || ThyDateRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyPopover), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyDateRangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyDateRangeComponent, selectors: [["thy-date-range"]], inputs: { thyHiddenMenu: "thyHiddenMenu", thyDisabledSwitch: "thyDisabledSwitch", thyCustomTextValue: "thyCustomTextValue", thyCustomKey: "thyCustomKey", thyOptionalDateRanges: "thyOptionalDateRanges", thyMinDate: "thyMinDate", thyMaxDate: "thyMaxDate", thyPickerFormat: "thyPickerFormat" }, features: [ɵngcc0.ɵɵProvidersFeature([INPUT_CONTROL_VALUE_ACCESSOR])], decls: 8, vars: 9, consts: [[1, "thy-date-range-container"], [4, "ngIf"], ["href", "javascript:;", 1, "thy-date-range-text", 3, "ngClass", "click"], ["class", "thy-date-range-text-caret-down ml-2", "thyIconName", "angle-down", 4, "ngIf"], ["thyType", "secondary", 3, "click"], ["href", "javascript:;", "thyIconNavLink", ""], ["thyIconName", "angle-left"], ["thyIconName", "angle-down", 1, "thy-date-range-text-caret-down", "ml-2"], ["thyIconName", "angle-right"]], template: function ThyDateRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ThyDateRangeComponent_ng_container_1_Template, 4, 0, "ng-container", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵlistener("click", function ThyDateRangeComponent_Template_span_click_2_listener($event) { return ctx.openOptionalDateRangesMenu($event); });
        ɵngcc0.ɵɵtemplate(3, ThyDateRangeComponent_ng_container_3_Template, 4, 6, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(4, ThyDateRangeComponent_ng_container_4_Template, 3, 4, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(5, ThyDateRangeComponent_ng_container_5_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(6, ThyDateRangeComponent_thy_icon_6_Template, 1, 0, "thy-icon", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ThyDateRangeComponent_ng_container_7_Template, 4, 0, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.thyDisabledSwitch);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c0, ctx.thyHiddenMenu));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.selectedDate == null ? null : ctx.selectedDate.key) === "custom");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.selectedDate == null ? null : ctx.selectedDate.key) === "exception");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.selectedDate == null ? null : ctx.selectedDate.key) !== "custom" && (ctx.selectedDate == null ? null : ctx.selectedDate.key) !== "exception");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.thyHiddenMenu);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.thyDisabledSwitch);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgClass, ɵngcc3.ThyIconNavComponent, ɵngcc3.ThyIconNavLinkComponent, ɵngcc4.ThyIconComponent], pipes: [ɵngcc5.ThyDatePickerFormatPipe], encapsulation: 2 });
ThyDateRangeComponent.ctorParameters = () => [
    { type: ThyPopover },
    { type: ChangeDetectorRef }
];
ThyDateRangeComponent.propDecorators = {
    thyOptionalDateRanges: [{ type: Input }],
    thyHiddenMenu: [{ type: Input }],
    thyDisabledSwitch: [{ type: Input }],
    thyCustomTextValue: [{ type: Input }],
    thyMinDate: [{ type: Input }],
    thyMaxDate: [{ type: Input }],
    thyCustomKey: [{ type: Input }],
    thyPickerFormat: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDateRangeComponent, [{
        type: Component,
        args: [{
                selector: 'thy-date-range',
                template: "<div class=\"thy-date-range-container\">\n  <ng-container *ngIf=\"!thyDisabledSwitch\">\n    <thy-icon-nav thyType=\"secondary\" (click)=\"previous()\">\n      <a href=\"javascript:;\" thyIconNavLink><thy-icon thyIconName=\"angle-left\"></thy-icon></a>\n    </thy-icon-nav>\n  </ng-container>\n  <span\n    href=\"javascript:;\"\n    (click)=\"openOptionalDateRangesMenu($event)\"\n    class=\"thy-date-range-text\"\n    [ngClass]=\"{ 'thy-date-range-disabled': thyHiddenMenu }\"\n  >\n    <ng-container *ngIf=\"selectedDate?.key === 'custom'\">\n      {{ selectedDate?.begin | thyDatePickerFormat }} ~ {{ selectedDate?.end | thyDatePickerFormat }}\n    </ng-container>\n    <ng-container *ngIf=\"selectedDate?.key === 'exception'\">\n      {{ selectedDate?.begin | thyDatePickerFormat: thyPickerFormat }}\n    </ng-container>\n    <ng-container *ngIf=\"selectedDate?.key !== 'custom' && selectedDate?.key !== 'exception'\">{{ selectedDate?.text }}</ng-container>\n    <thy-icon *ngIf=\"!thyHiddenMenu\" class=\"thy-date-range-text-caret-down ml-2\" thyIconName=\"angle-down\"></thy-icon>\n  </span>\n  <ng-container *ngIf=\"!thyDisabledSwitch\">\n    <thy-icon-nav thyType=\"secondary\" (click)=\"next()\">\n      <a href=\"javascript:;\" thyIconNavLink><thy-icon thyIconName=\"angle-right\"></thy-icon></a>\n    </thy-icon-nav>\n  </ng-container>\n</div>\n",
                providers: [INPUT_CONTROL_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc1.ThyPopover }, { type: ɵngcc0.ChangeDetectorRef }]; }, { thyHiddenMenu: [{
            type: Input
        }], thyDisabledSwitch: [{
            type: Input
        }], thyCustomTextValue: [{
            type: Input
        }], thyCustomKey: [{
            type: Input
        }], thyOptionalDateRanges: [{
            type: Input
        }], thyMinDate: [{
            type: Input
        }], thyMaxDate: [{
            type: Input
        }], thyPickerFormat: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { isEmpty } from 'ngx-tethys/util';
import { Component, ElementRef, Renderer2, Output, EventEmitter, HostBinding, Input, NgZone, Inject } from '@angular/core';
import { mimeTypeConvert } from './util';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil, filter, tap } from 'rxjs/operators';
import { THY_UPLOADER_DEFAULT_OPTIONS } from './uploader.config';
import { FileSelectBaseComponent } from './file-select-base';
export class ThyFileDropComponent extends FileSelectBaseComponent {
    constructor(elementRef, renderer, ngZone, defaultConfig) {
        super(elementRef, defaultConfig);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.defaultConfig = defaultConfig;
        this.isDragOver = false;
        this.thyOnDrop = new EventEmitter();
        this.ngUnsubscribe$ = new Subject();
    }
    set thyFileDropClassName(value) {
        this.dragOverCustomClass = value;
    }
    set thyAcceptType(value) {
        this.acceptType = mimeTypeConvert(value);
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            fromEvent(this.elementRef.nativeElement, 'dragenter')
                .pipe(takeUntil(this.ngUnsubscribe$), tap((event) => {
                event.preventDefault();
            }), filter(event => event.dataTransfer.items && event.dataTransfer.items.length > 0))
                .subscribe((event) => {
                if (this.checkRejectFolderAndHtmlElement(event)) {
                    const files = this.filterFilesOrItems(Array.from(event.dataTransfer.items));
                    if (!isEmpty(files)) {
                        this.ngZone.run(() => {
                            this.isDragOver = true;
                            this.toggleDropOverClassName();
                        });
                    }
                }
            });
            fromEvent(this.elementRef.nativeElement, 'dragover')
                .pipe(takeUntil(this.ngUnsubscribe$))
                .subscribe((event) => {
                event.preventDefault();
            });
            fromEvent(this.elementRef.nativeElement, 'dragleave')
                .pipe(takeUntil(this.ngUnsubscribe$))
                .subscribe((event) => {
                this.ngZone.run(() => {
                    if (!this.elementRef.nativeElement.contains(event.fromElement)) {
                        this.resetDragOver();
                        this.toggleDropOverClassName();
                    }
                });
            });
            fromEvent(this.elementRef.nativeElement, 'drop')
                .pipe(takeUntil(this.ngUnsubscribe$), tap((event) => {
                event.preventDefault();
            }))
                .subscribe((event) => {
                this.ngZone.run(() => {
                    if (this.checkRejectFolderAndHtmlElement(event)) {
                        const files = this.filterFilesOrItems(event.dataTransfer ? Array.from(event.dataTransfer.files) : []);
                        if (!isEmpty(files)) {
                            this.selectFiles(event, Array.from(event.dataTransfer.files), this.thyOnDrop);
                        }
                    }
                    this.resetDragOver();
                    this.toggleDropOverClassName();
                });
            });
        });
    }
    checkRejectFolderAndHtmlElement(event) {
        // 排除文件夹和HTML元素拖拽
        const items = event.dataTransfer ? event.dataTransfer.items : [];
        let res = true;
        for (let index = 0; index < items.length; index++) {
            const item = items[index];
            const entry = this.getAsEntry(item);
            if (item.kind !== 'file' || (entry && !entry.isFile)) {
                res = false;
                // console.error(`file extensions not support drag upload, kind: ${item.kind}, type: ${item.type}`);
            }
        }
        return res;
    }
    getAsEntry(item) {
        let entry;
        if (item['getAsEntry']) {
            entry = item['getAsEntry']();
        }
        else if (item.webkitGetAsEntry) {
            entry = item.webkitGetAsEntry();
        }
        return entry;
    }
    filterFilesOrItems(items) {
        if (this.acceptType && this.acceptType != '*/*') {
            return items.filter(item => {
                return this.acceptType.includes(item.type);
            });
        }
        else {
            return Array.from(items);
        }
    }
    toggleDropOverClassName() {
        if (this.dragOverCustomClass) {
            if (this.isDragOver) {
                this.renderer.addClass(this.elementRef.nativeElement, this.dragOverCustomClass);
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, this.dragOverCustomClass);
            }
        }
    }
    setDragOverState(isDragOver) {
        this.isDragOver = isDragOver;
    }
    resetDragOver() {
        this.setDragOverState(false);
    }
    ngOnDestroy() {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    }
}
ThyFileDropComponent.decorators = [
    { type: Component, args: [{
                selector: '[thyFileDrop]',
                template: `
        <ng-content></ng-content>
    `
            },] }
];
ThyFileDropComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [THY_UPLOADER_DEFAULT_OPTIONS,] }] }
];
ThyFileDropComponent.propDecorators = {
    isDragOver: [{ type: HostBinding, args: ['class.drop-over',] }, { type: HostBinding, args: ['class.thy-drop-over',] }],
    thyFileDropClassName: [{ type: Input }],
    thyAcceptType: [{ type: Input }],
    thyOnDrop: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,
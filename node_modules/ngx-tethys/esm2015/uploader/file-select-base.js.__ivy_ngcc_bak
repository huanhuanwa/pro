import { isNumber, coerceNumberValue } from 'ngx-tethys/util';
import { Inject, ElementRef, Renderer2, NgZone, Input, Component } from '@angular/core';
import { THY_UPLOADER_DEFAULT_OPTIONS } from './uploader.config';
export class FileSelectBaseComponent {
    constructor(elementRef, defaultConfig, renderer, ngZone) {
        this.elementRef = elementRef;
        this.defaultConfig = defaultConfig;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.sizeThreshold = defaultConfig.sizeThreshold;
        this.sizeExceedsHandler = defaultConfig.sizeExceedsHandler;
    }
    set thySizeThreshold(value) {
        const sizeThreshold = coerceNumberValue(value);
        if (isNumber(sizeThreshold)) {
            this.sizeThreshold = sizeThreshold;
        }
    }
    set thySizeExceedsHandler(value) {
        if (value) {
            this.sizeExceedsHandler = value;
        }
    }
    handleSizeExceeds(event, files) {
        let sizeExceedsFiles = files.filter(item => item.size / 1024 > this.sizeThreshold);
        if (sizeExceedsFiles.length > 0) {
            const sizeExceedContext = {
                files: files,
                exceedsFiles: sizeExceedsFiles,
                nativeEvent: event,
                sizeThreshold: this.sizeThreshold
            };
            return this.sizeExceedsHandler(sizeExceedContext);
        }
        return files;
    }
    selectFiles(event, files, eventEmitter) {
        let successFiles = files;
        if (this.sizeThreshold && this.sizeThreshold > 0) {
            successFiles = this.handleSizeExceeds(event, files);
        }
        if (successFiles) {
            eventEmitter.emit({
                files: successFiles,
                nativeEvent: event
            });
        }
    }
}
FileSelectBaseComponent.decorators = [
    { type: Component, args: [{
                template: ``
            },] }
];
FileSelectBaseComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [THY_UPLOADER_DEFAULT_OPTIONS,] }] },
    { type: Renderer2 },
    { type: NgZone }
];
FileSelectBaseComponent.propDecorators = {
    thySizeThreshold: [{ type: Input }],
    thySizeExceedsHandler: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZWxlY3QtYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91cGxvYWRlci9maWxlLXNlbGVjdC1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQXFCLE1BQU0saUJBQWlCLENBQUM7QUFDakYsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQWdCLFNBQVMsRUFBYyxNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEVBQUUsNEJBQTRCLEVBQXFCLE1BQU0sbUJBQW1CLENBQUM7QUFNcEYsTUFBTSxPQUFPLHVCQUF1QjtJQWtCaEMsWUFDVyxVQUFzQixFQUNnQixhQUFnQyxFQUN0RSxRQUFvQixFQUNwQixNQUFlO1FBSGYsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNnQixrQkFBYSxHQUFiLGFBQWEsQ0FBbUI7UUFDdEUsYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQUNwQixXQUFNLEdBQU4sTUFBTSxDQUFTO1FBRXRCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQztRQUNqRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0lBQy9ELENBQUM7SUFyQkQsSUFBYSxnQkFBZ0IsQ0FBQyxLQUFhO1FBQ3ZDLE1BQU0sYUFBYSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQztJQUVELElBQWEscUJBQXFCLENBQUMsS0FBNEI7UUFDM0QsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1NBQ25DO0lBQ0wsQ0FBQztJQVlELGlCQUFpQixDQUFDLEtBQVksRUFBRSxLQUFhO1FBQ3pDLElBQUksZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuRixJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsTUFBTSxpQkFBaUIsR0FBRztnQkFDdEIsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osWUFBWSxFQUFFLGdCQUFnQjtnQkFDOUIsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTthQUNwQyxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUNyRDtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBWSxFQUFFLEtBQWEsRUFBRSxZQUE4QztRQUNuRixJQUFJLFlBQVksR0FBa0IsS0FBSyxDQUFDO1FBQ3hDLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsRUFBRTtZQUM5QyxZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN2RDtRQUNELElBQUksWUFBWSxFQUFFO1lBQ2QsWUFBWSxDQUFDLElBQUksQ0FBQztnQkFDZCxLQUFLLEVBQUUsWUFBWTtnQkFDbkIsV0FBVyxFQUFFLEtBQUs7YUFDckIsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7WUF4REosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxFQUFFO2FBQ2Y7OztZQU5nQixVQUFVOzRDQTJCbEIsTUFBTSxTQUFDLDRCQUE0QjtZQTNCZixTQUFTO1lBQUUsTUFBTTs7OytCQVl6QyxLQUFLO29DQU9MLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc051bWJlciwgY29lcmNlTnVtYmVyVmFsdWUsIGlzVW5kZWZpbmVkT3JOdWxsIH0gZnJvbSAnbmd4LXRldGh5cy91dGlsJztcbmltcG9ydCB7IEluamVjdCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBOZ1pvbmUsIElucHV0LCBFdmVudEVtaXR0ZXIsIENvbXBvbmVudCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVEhZX1VQTE9BREVSX0RFRkFVTFRfT1BUSU9OUywgVGh5VXBsb2FkZXJDb25maWcgfSBmcm9tICcuL3VwbG9hZGVyLmNvbmZpZyc7XG5pbXBvcnQgeyBUaHlGaWxlU2VsZWN0RXZlbnQsIFRoeVNpemVFeGNlZWRzSGFuZGxlciB9IGZyb20gJy4vdHlwZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZTogYGBcbn0pXG5leHBvcnQgY2xhc3MgRmlsZVNlbGVjdEJhc2VDb21wb25lbnQge1xuICAgIGFjY2VwdFR5cGU6IHN0cmluZztcbiAgICBzaXplVGhyZXNob2xkOiBudW1iZXI7XG4gICAgc2l6ZUV4Y2VlZHNIYW5kbGVyOiBUaHlTaXplRXhjZWVkc0hhbmRsZXI7XG5cbiAgICBASW5wdXQoKSBzZXQgdGh5U2l6ZVRocmVzaG9sZCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHNpemVUaHJlc2hvbGQgPSBjb2VyY2VOdW1iZXJWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGlmIChpc051bWJlcihzaXplVGhyZXNob2xkKSkge1xuICAgICAgICAgICAgdGhpcy5zaXplVGhyZXNob2xkID0gc2l6ZVRocmVzaG9sZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpIHNldCB0aHlTaXplRXhjZWVkc0hhbmRsZXIodmFsdWU6IFRoeVNpemVFeGNlZWRzSGFuZGxlcikge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2l6ZUV4Y2VlZHNIYW5kbGVyID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIEBJbmplY3QoVEhZX1VQTE9BREVSX0RFRkFVTFRfT1BUSU9OUykgcHVibGljIGRlZmF1bHRDb25maWc6IFRoeVVwbG9hZGVyQ29uZmlnLFxuICAgICAgICBwdWJsaWMgcmVuZGVyZXI/OiBSZW5kZXJlcjIsXG4gICAgICAgIHB1YmxpYyBuZ1pvbmU/OiBOZ1pvbmVcbiAgICApIHtcbiAgICAgICAgdGhpcy5zaXplVGhyZXNob2xkID0gZGVmYXVsdENvbmZpZy5zaXplVGhyZXNob2xkO1xuICAgICAgICB0aGlzLnNpemVFeGNlZWRzSGFuZGxlciA9IGRlZmF1bHRDb25maWcuc2l6ZUV4Y2VlZHNIYW5kbGVyO1xuICAgIH1cblxuICAgIGhhbmRsZVNpemVFeGNlZWRzKGV2ZW50OiBFdmVudCwgZmlsZXM6IEZpbGVbXSkge1xuICAgICAgICBsZXQgc2l6ZUV4Y2VlZHNGaWxlcyA9IGZpbGVzLmZpbHRlcihpdGVtID0+IGl0ZW0uc2l6ZSAvIDEwMjQgPiB0aGlzLnNpemVUaHJlc2hvbGQpO1xuICAgICAgICBpZiAoc2l6ZUV4Y2VlZHNGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzaXplRXhjZWVkQ29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICBmaWxlczogZmlsZXMsXG4gICAgICAgICAgICAgICAgZXhjZWVkc0ZpbGVzOiBzaXplRXhjZWVkc0ZpbGVzLFxuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICBzaXplVGhyZXNob2xkOiB0aGlzLnNpemVUaHJlc2hvbGRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaXplRXhjZWVkc0hhbmRsZXIoc2l6ZUV4Y2VlZENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlcztcbiAgICB9XG5cbiAgICBzZWxlY3RGaWxlcyhldmVudDogRXZlbnQsIGZpbGVzOiBGaWxlW10sIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyPFRoeUZpbGVTZWxlY3RFdmVudD4pIHtcbiAgICAgICAgbGV0IHN1Y2Nlc3NGaWxlczogRmlsZVtdIHwgdm9pZCA9IGZpbGVzO1xuICAgICAgICBpZiAodGhpcy5zaXplVGhyZXNob2xkICYmIHRoaXMuc2l6ZVRocmVzaG9sZCA+IDApIHtcbiAgICAgICAgICAgIHN1Y2Nlc3NGaWxlcyA9IHRoaXMuaGFuZGxlU2l6ZUV4Y2VlZHMoZXZlbnQsIGZpbGVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VjY2Vzc0ZpbGVzKSB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXIuZW1pdCh7XG4gICAgICAgICAgICAgICAgZmlsZXM6IHN1Y2Nlc3NGaWxlcyxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudDogZXZlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
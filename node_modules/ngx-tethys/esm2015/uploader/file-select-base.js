import { isNumber, coerceNumberValue } from 'ngx-tethys/util';
import { Inject, ElementRef, Renderer2, NgZone, Input, Component } from '@angular/core';
import { THY_UPLOADER_DEFAULT_OPTIONS } from './uploader.config';
import * as ɵngcc0 from '@angular/core';
export class FileSelectBaseComponent {
    constructor(elementRef, defaultConfig, renderer, ngZone) {
        this.elementRef = elementRef;
        this.defaultConfig = defaultConfig;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.sizeThreshold = defaultConfig.sizeThreshold;
        this.sizeExceedsHandler = defaultConfig.sizeExceedsHandler;
    }
    set thySizeThreshold(value) {
        const sizeThreshold = coerceNumberValue(value);
        if (isNumber(sizeThreshold)) {
            this.sizeThreshold = sizeThreshold;
        }
    }
    set thySizeExceedsHandler(value) {
        if (value) {
            this.sizeExceedsHandler = value;
        }
    }
    handleSizeExceeds(event, files) {
        let sizeExceedsFiles = files.filter(item => item.size / 1024 > this.sizeThreshold);
        if (sizeExceedsFiles.length > 0) {
            const sizeExceedContext = {
                files: files,
                exceedsFiles: sizeExceedsFiles,
                nativeEvent: event,
                sizeThreshold: this.sizeThreshold
            };
            return this.sizeExceedsHandler(sizeExceedContext);
        }
        return files;
    }
    selectFiles(event, files, eventEmitter) {
        let successFiles = files;
        if (this.sizeThreshold && this.sizeThreshold > 0) {
            successFiles = this.handleSizeExceeds(event, files);
        }
        if (successFiles) {
            eventEmitter.emit({
                files: successFiles,
                nativeEvent: event
            });
        }
    }
}
FileSelectBaseComponent.ɵfac = function FileSelectBaseComponent_Factory(t) { return new (t || FileSelectBaseComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_UPLOADER_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
FileSelectBaseComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileSelectBaseComponent, selectors: [["ng-component"]], inputs: { thySizeThreshold: "thySizeThreshold", thySizeExceedsHandler: "thySizeExceedsHandler" }, decls: 0, vars: 0, template: function FileSelectBaseComponent_Template(rf, ctx) { }, encapsulation: 2 });
FileSelectBaseComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [THY_UPLOADER_DEFAULT_OPTIONS,] }] },
    { type: Renderer2 },
    { type: NgZone }
];
FileSelectBaseComponent.propDecorators = {
    thySizeThreshold: [{ type: Input }],
    thySizeExceedsHandler: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileSelectBaseComponent, [{
        type: Component,
        args: [{
                template: ``
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [THY_UPLOADER_DEFAULT_OPTIONS]
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { thySizeThreshold: [{
            type: Input
        }], thySizeExceedsHandler: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZWxlY3QtYmFzZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3VwbG9hZGVyL2ZpbGUtc2VsZWN0LWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBcUIsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRixPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBZ0IsU0FBUyxFQUFjLE1BQU0sZUFBZSxDQUFDO0FBQ2xILE9BQU8sRUFBRSw0QkFBNEIsRUFBcUIsTUFBTSxtQkFBbUIsQ0FBQzs7QUFNcEYsTUFBTSxPQUFPLHVCQUF1QjtBQUNwQyxJQWlCSSxZQUNXLFVBQXNCLEVBQ2dCLGFBQWdDLEVBQ3RFLFFBQW9CLEVBQ3BCLE1BQWU7QUFDM0IsUUFKWSxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDZSxrQkFBYSxHQUFiLGFBQWEsQ0FBbUI7QUFBQyxRQUN2RSxhQUFRLEdBQVIsUUFBUSxDQUFZO0FBQUMsUUFDckIsV0FBTSxHQUFOLE1BQU0sQ0FBUztBQUM5QixRQUNRLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQztBQUN6RCxRQUFRLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUMsa0JBQWtCLENBQUM7QUFDbkUsSUFBSSxDQUFDO0FBQ0wsSUF0QkksSUFBYSxnQkFBZ0IsQ0FBQyxLQUFhO0FBQy9DLFFBQVEsTUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkQsUUFBUSxJQUFJLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUNyQyxZQUFZLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQy9DLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQWEscUJBQXFCLENBQUMsS0FBNEI7QUFDbkUsUUFBUSxJQUFJLEtBQUssRUFBRTtBQUNuQixZQUFZLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7QUFDNUMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBV0ksaUJBQWlCLENBQUMsS0FBWSxFQUFFLEtBQWE7QUFDakQsUUFBUSxJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDM0YsUUFBUSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDekMsWUFBWSxNQUFNLGlCQUFpQixHQUFHO0FBQ3RDLGdCQUFnQixLQUFLLEVBQUUsS0FBSztBQUM1QixnQkFBZ0IsWUFBWSxFQUFFLGdCQUFnQjtBQUM5QyxnQkFBZ0IsV0FBVyxFQUFFLEtBQUs7QUFDbEMsZ0JBQWdCLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtBQUNqRCxhQUFhLENBQUM7QUFDZCxZQUFZLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDOUQsU0FBUztBQUNULFFBQVEsT0FBTyxLQUFLLENBQUM7QUFDckIsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXLENBQUMsS0FBWSxFQUFFLEtBQWEsRUFBRSxZQUE4QztBQUMzRixRQUFRLElBQUksWUFBWSxHQUFrQixLQUFLLENBQUM7QUFDaEQsUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUU7QUFDMUQsWUFBWSxZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNoRSxTQUFTO0FBQ1QsUUFBUSxJQUFJLFlBQVksRUFBRTtBQUMxQixZQUFZLFlBQVksQ0FBQyxJQUFJLENBQUM7QUFDOUIsZ0JBQWdCLEtBQUssRUFBRSxZQUFZO0FBQ25DLGdCQUFnQixXQUFXLEVBQUUsS0FBSztBQUNsQyxhQUFhLENBQUMsQ0FBQztBQUNmLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDttREF6REMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxFQUFFLGNBQ2Y7bVVBQ0k7QUFBQztBQUNVLFlBUkMsVUFBVTtBQUFJLDRDQTJCdEIsTUFBTSxTQUFDLDRCQUE0QjtBQUFTLFlBM0J4QixTQUFTO0FBQUksWUFBRixNQUFNO0FBQUc7QUFBRztBQUEyQywrQkFZMUYsS0FBSztBQUFLLG9DQU9WLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOdW1iZXIsIGNvZXJjZU51bWJlclZhbHVlLCBpc1VuZGVmaW5lZE9yTnVsbCB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5pbXBvcnQgeyBJbmplY3QsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgTmdab25lLCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBDb21wb25lbnQsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRIWV9VUExPQURFUl9ERUZBVUxUX09QVElPTlMsIFRoeVVwbG9hZGVyQ29uZmlnIH0gZnJvbSAnLi91cGxvYWRlci5jb25maWcnO1xuaW1wb3J0IHsgVGh5RmlsZVNlbGVjdEV2ZW50LCBUaHlTaXplRXhjZWVkc0hhbmRsZXIgfSBmcm9tICcuL3R5cGVzJztcblxuQENvbXBvbmVudCh7XG4gICAgdGVtcGxhdGU6IGBgXG59KVxuZXhwb3J0IGNsYXNzIEZpbGVTZWxlY3RCYXNlQ29tcG9uZW50IHtcbiAgICBhY2NlcHRUeXBlOiBzdHJpbmc7XG4gICAgc2l6ZVRocmVzaG9sZDogbnVtYmVyO1xuICAgIHNpemVFeGNlZWRzSGFuZGxlcjogVGh5U2l6ZUV4Y2VlZHNIYW5kbGVyO1xuXG4gICAgQElucHV0KCkgc2V0IHRoeVNpemVUaHJlc2hvbGQodmFsdWU6IG51bWJlcikge1xuICAgICAgICBjb25zdCBzaXplVGhyZXNob2xkID0gY29lcmNlTnVtYmVyVmFsdWUodmFsdWUpO1xuICAgICAgICBpZiAoaXNOdW1iZXIoc2l6ZVRocmVzaG9sZCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2l6ZVRocmVzaG9sZCA9IHNpemVUaHJlc2hvbGQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKSBzZXQgdGh5U2l6ZUV4Y2VlZHNIYW5kbGVyKHZhbHVlOiBUaHlTaXplRXhjZWVkc0hhbmRsZXIpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNpemVFeGNlZWRzSGFuZGxlciA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBASW5qZWN0KFRIWV9VUExPQURFUl9ERUZBVUxUX09QVElPTlMpIHB1YmxpYyBkZWZhdWx0Q29uZmlnOiBUaHlVcGxvYWRlckNvbmZpZyxcbiAgICAgICAgcHVibGljIHJlbmRlcmVyPzogUmVuZGVyZXIyLFxuICAgICAgICBwdWJsaWMgbmdab25lPzogTmdab25lXG4gICAgKSB7XG4gICAgICAgIHRoaXMuc2l6ZVRocmVzaG9sZCA9IGRlZmF1bHRDb25maWcuc2l6ZVRocmVzaG9sZDtcbiAgICAgICAgdGhpcy5zaXplRXhjZWVkc0hhbmRsZXIgPSBkZWZhdWx0Q29uZmlnLnNpemVFeGNlZWRzSGFuZGxlcjtcbiAgICB9XG5cbiAgICBoYW5kbGVTaXplRXhjZWVkcyhldmVudDogRXZlbnQsIGZpbGVzOiBGaWxlW10pIHtcbiAgICAgICAgbGV0IHNpemVFeGNlZWRzRmlsZXMgPSBmaWxlcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnNpemUgLyAxMDI0ID4gdGhpcy5zaXplVGhyZXNob2xkKTtcbiAgICAgICAgaWYgKHNpemVFeGNlZWRzRmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgc2l6ZUV4Y2VlZENvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgZmlsZXM6IGZpbGVzLFxuICAgICAgICAgICAgICAgIGV4Y2VlZHNGaWxlczogc2l6ZUV4Y2VlZHNGaWxlcyxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgc2l6ZVRocmVzaG9sZDogdGhpcy5zaXplVGhyZXNob2xkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZUV4Y2VlZHNIYW5kbGVyKHNpemVFeGNlZWRDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZXM7XG4gICAgfVxuXG4gICAgc2VsZWN0RmlsZXMoZXZlbnQ6IEV2ZW50LCBmaWxlczogRmlsZVtdLCBldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxUaHlGaWxlU2VsZWN0RXZlbnQ+KSB7XG4gICAgICAgIGxldCBzdWNjZXNzRmlsZXM6IEZpbGVbXSB8IHZvaWQgPSBmaWxlcztcbiAgICAgICAgaWYgKHRoaXMuc2l6ZVRocmVzaG9sZCAmJiB0aGlzLnNpemVUaHJlc2hvbGQgPiAwKSB7XG4gICAgICAgICAgICBzdWNjZXNzRmlsZXMgPSB0aGlzLmhhbmRsZVNpemVFeGNlZWRzKGV2ZW50LCBmaWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Y2Nlc3NGaWxlcykge1xuICAgICAgICAgICAgZXZlbnRFbWl0dGVyLmVtaXQoe1xuICAgICAgICAgICAgICAgIGZpbGVzOiBzdWNjZXNzRmlsZXMsXG4gICAgICAgICAgICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
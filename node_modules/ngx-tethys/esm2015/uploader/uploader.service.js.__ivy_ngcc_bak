import { Injectable } from '@angular/core';
import { Observable, from } from 'rxjs';
import { coerceArray } from 'ngx-tethys/util';
import { map, tap, mergeMap } from 'rxjs/operators';
import { HttpClient, XhrFactory } from '@angular/common/http';
export var ThyUploadStatus;
(function (ThyUploadStatus) {
    ThyUploadStatus["pending"] = "pending";
    ThyUploadStatus["started"] = "started";
    ThyUploadStatus["uploading"] = "uploading";
    ThyUploadStatus["done"] = "done";
})(ThyUploadStatus || (ThyUploadStatus = {}));
export class ThyUploaderService {
    constructor(http, xhrFactory) {
        this.http = http;
        this.xhrFactory = xhrFactory;
    }
    secondsToHuman(sec) {
        return new Date(sec * 1000).toISOString().substr(11, 8);
    }
    humanizeBytes(bytes) {
        if (bytes === 0) {
            return '0 Byte';
        }
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    normalizeUploadFiles(uploadFiles) {
        coerceArray(uploadFiles).forEach(uploadFile => {
            if (!uploadFile.progress) {
                uploadFile.progress = {
                    status: ThyUploadStatus.pending,
                    percentage: 0,
                    startTime: 0
                };
            }
        });
    }
    // private uploadByHttp(observer: Subscriber<ThyUploadResponse>, uploadFile: ThyUploadFile) {
    //     const time: number = new Date().getTime();
    //     let speed = 0;
    //     let estimatedTime: number | null = null;
    //     uploadFile.progress = {
    //         status: ThyUploadStatus.started,
    //         percentage: 0,
    //         startTime: time
    //     };
    //     const formData = new FormData();
    //     Object.keys(uploadFile.data || {}).forEach(key => formData.append(key, uploadFile.data[key]));
    //     formData.append(uploadFile.fileField || 'file', uploadFile.nativeFile, uploadFile.fileName);
    //     const headers = {
    //         'Content-Type': 'multipart/form-data'
    //     };
    //     Object.keys(uploadFile.headers || {}).forEach(key => (headers[key] = uploadFile.headers[key]));
    //     const subscription = this.http
    //         .post(uploadFile.url, formData, {
    //             headers: headers,
    //             reportProgress: true,
    //             observe: 'events',
    //             withCredentials: uploadFile.withCredentials ? true : false
    //         })
    //         .subscribe(
    //             (event: HttpEvent<any>) => {
    //                 console.log('Subscribe data', event);
    //                 switch (event.type) {
    //                     case HttpEventType.Sent:
    //                         observer.next({ status: ThyUploadStatus.started, uploadFile: uploadFile });
    //                         break;
    //                     case HttpEventType.UploadProgress:
    //                         let percentage = Math.round((event.loaded * 100) / event.total);
    //                         if (percentage === 100) {
    //                             percentage = 99;
    //                         }
    //                         const diff = new Date().getTime() - time;
    //                         speed = Math.round((event.loaded / diff) * 1000);
    //                         const progressStartTime = (uploadFile.progress && uploadFile.progress.startTime) || new Date().getTime();
    //                         estimatedTime = Math.ceil((event.total - event.loaded) / speed);
    //                         uploadFile.progress.status = ThyUploadStatus.uploading;
    //                         uploadFile.progress.percentage = percentage;
    //                         uploadFile.progress.speed = speed;
    //                         uploadFile.progress.speedHuman = `${this.humanizeBytes(speed)}/s`;
    //                         uploadFile.progress.startTime = progressStartTime;
    //                         uploadFile.progress.estimatedTime = estimatedTime;
    //                         uploadFile.progress.estimatedTimeHuman = this.secondsToHuman(estimatedTime);
    //                         observer.next({ status: ThyUploadStatus.uploading, uploadFile: uploadFile });
    //                         break;
    //                     case HttpEventType.Response:
    //                         uploadFile.response = event.body;
    //                         observer.next({ status: ThyUploadStatus.done, uploadFile: uploadFile });
    //                         break;
    //                     default:
    //                         throw new Error(`Unhandled event: ${event.type}`);
    //                 }
    //             },
    //             error => {
    //                 observer.error(error);
    //             }
    //         );
    //     return subscription;
    // }
    uploadByXhr(observer, uploadFile) {
        const xhr = this.xhrFactory.build();
        const time = new Date().getTime();
        let speed = 0;
        let estimatedTime = null;
        uploadFile.progress = {
            status: ThyUploadStatus.started,
            percentage: 0,
            startTime: time
        };
        xhr.upload.addEventListener('progress', (event) => {
            if (event.lengthComputable) {
                let percentage = Math.round((event.loaded * 100) / event.total);
                if (percentage === 100) {
                    percentage = 99;
                }
                const diff = new Date().getTime() - time;
                speed = Math.round((event.loaded / diff) * 1000);
                const progressStartTime = (uploadFile.progress && uploadFile.progress.startTime) || new Date().getTime();
                estimatedTime = Math.ceil((event.total - event.loaded) / speed);
                uploadFile.progress.status = ThyUploadStatus.uploading;
                uploadFile.progress.percentage = percentage;
                uploadFile.progress.speed = speed;
                uploadFile.progress.speedHuman = `${this.humanizeBytes(speed)}/s`;
                uploadFile.progress.startTime = progressStartTime;
                uploadFile.progress.estimatedTime = estimatedTime;
                uploadFile.progress.estimatedTimeHuman = this.secondsToHuman(estimatedTime);
                observer.next({ status: ThyUploadStatus.uploading, uploadFile: uploadFile });
            }
        }, false);
        xhr.upload.addEventListener('error', (e) => {
            observer.error(e);
            observer.complete();
        });
        xhr.onreadystatechange = () => {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                const speedTime = (new Date().getTime() - uploadFile.progress.startTime) * 1000;
                const speedAverage = Math.round(uploadFile.nativeFile.size / speedTime);
                uploadFile.progress.status = ThyUploadStatus.done;
                uploadFile.progress.percentage = 100;
                uploadFile.progress.speed = speedAverage;
                uploadFile.progress.speedHuman = `${this.humanizeBytes(speed)}/s`;
                uploadFile.progress.estimatedTime = estimatedTime;
                uploadFile.progress.estimatedTimeHuman = this.secondsToHuman(estimatedTime || 0);
                uploadFile.responseStatus = xhr.status;
                try {
                    uploadFile.response = JSON.parse(xhr.response);
                }
                catch (e) {
                    uploadFile.response = xhr.response;
                }
                // file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());
                observer.next({ status: ThyUploadStatus.done, uploadFile: uploadFile });
                observer.complete();
            }
        };
        xhr.open(uploadFile.method, uploadFile.url, true);
        xhr.withCredentials = uploadFile.withCredentials ? true : false;
        try {
            const formData = new FormData();
            Object.keys(uploadFile.data || {}).forEach(key => formData.append(key, uploadFile.data[key]));
            Object.keys(uploadFile.headers || {}).forEach(key => xhr.setRequestHeader(key, uploadFile.headers[key]));
            formData.append(uploadFile.fileField || 'file', uploadFile.nativeFile, uploadFile.fileName);
            observer.next({ status: ThyUploadStatus.started, uploadFile: uploadFile });
            xhr.send(formData);
        }
        catch (error) {
            observer.error(error);
            observer.complete();
        }
        return xhr;
    }
    ensureFileName(uploadFile) {
        uploadFile.fileName = uploadFile.fileName || uploadFile.nativeFile.name;
    }
    /**
     * 上传单个文件
     * @param uploadFile 上传文件对象
     */
    upload(uploadFile) {
        this.ensureFileName(uploadFile);
        return new Observable(observer => {
            const xhr = this.uploadByXhr(observer, uploadFile);
            return () => {
                xhr.abort();
            };
        });
    }
    /**
     * 并发上传多个文件
     * @param uploadFiles 上传文件列表
     * @param concurrent 并发上传数, 默认 5
     * @param options onStared, onDone 回调
     */
    uploadBulk(uploadFiles, concurrent = 5, options) {
        this.normalizeUploadFiles(uploadFiles);
        const result = from(uploadFiles).pipe(mergeMap(uploadFile => {
            return this.upload(uploadFile).pipe(tap(uploadResponse => {
                if (options && options.onStarted && uploadResponse.status === ThyUploadStatus.started) {
                    options.onStarted(uploadResponse.uploadFile);
                }
                if (options && options.onDone && uploadResponse.status === ThyUploadStatus.done) {
                    options.onDone(uploadResponse.uploadFile);
                }
            }));
        }, concurrent), map(response => {
            return response;
        }));
        return result;
    }
}
ThyUploaderService.decorators = [
    { type: Injectable }
];
ThyUploaderService.ctorParameters = () => [
    { type: HttpClient },
    { type: XhrFactory }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91cGxvYWRlci91cGxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBdUIsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUE0QixVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RixNQUFNLENBQU4sSUFBWSxlQUtYO0FBTEQsV0FBWSxlQUFlO0lBQ3ZCLHNDQUFtQixDQUFBO0lBQ25CLHNDQUFtQixDQUFBO0lBQ25CLDBDQUF1QixDQUFBO0lBQ3ZCLGdDQUFhLENBQUE7QUFDakIsQ0FBQyxFQUxXLGVBQWUsS0FBZixlQUFlLFFBSzFCO0FBNENELE1BQU0sT0FBTyxrQkFBa0I7SUFDM0IsWUFBb0IsSUFBZ0IsRUFBVSxVQUFzQjtRQUFoRCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7SUFFaEUsY0FBYyxDQUFDLEdBQVc7UUFDOUIsT0FBTyxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU8sYUFBYSxDQUFDLEtBQWE7UUFDL0IsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ2IsT0FBTyxRQUFRLENBQUM7U0FDbkI7UUFFRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDZixNQUFN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O09BS0c7SUFDSCxVQUFVLENBQUMsV0FBNEIsRUFBRSxVQUFVLEdBQUcsQ0FBQyxFQUFFLE9BQStCO1FBQ3BGLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUNqQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDL0IsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFO2dCQUNqQixJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLGNBQWMsQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLE9BQU8sRUFBRTtvQkFDbkYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ2hEO2dCQUNELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksY0FBYyxDQUFDLE1BQU0sS0FBSyxlQUFlLENBQUMsSUFBSSxFQUFFO29CQUM3RSxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDN0M7WUFDTCxDQUFDLENBQUMsQ0FDTCxDQUFDO1FBQ04sQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUNkLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNYLE9BQU8sUUFBUSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUNMLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7WUE5T0osVUFBVTs7O1lBbERGLFVBQVU7WUFBNEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIFN1YnNjcmliZXIsIGZyb20gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNvZXJjZUFycmF5IH0gZnJvbSAnbmd4LXRldGh5cy91dGlsJztcbmltcG9ydCB7IG1hcCwgdGFwLCBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBFdmVudCwgSHR0cEV2ZW50VHlwZSwgWGhyRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuZXhwb3J0IGVudW0gVGh5VXBsb2FkU3RhdHVzIHtcbiAgICBwZW5kaW5nID0gJ3BlbmRpbmcnLFxuICAgIHN0YXJ0ZWQgPSAnc3RhcnRlZCcsXG4gICAgdXBsb2FkaW5nID0gJ3VwbG9hZGluZycsXG4gICAgZG9uZSA9ICdkb25lJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRoeVVwbG9hZFJlc3BvbnNlIHtcbiAgICBzdGF0dXM6IFRoeVVwbG9hZFN0YXR1cztcbiAgICB1cGxvYWRGaWxlPzogVGh5VXBsb2FkRmlsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaHlVcGxvYWRGaWxlIHtcbiAgICBpZGVudGlmaWVyPzogc3RyaW5nO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIHdpdGhDcmVkZW50aWFscz86IGJvb2xlYW47XG4gICAgbmF0aXZlRmlsZTogRmlsZTtcbiAgICBmaWxlRmllbGQ/OiBzdHJpbmc7XG4gICAgZmlsZU5hbWU/OiBzdHJpbmc7XG4gICAgaGVhZGVycz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgZGF0YT86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG5cbiAgICByZXNwb25zZVN0YXR1cz86IGFueTtcbiAgICByZXNwb25zZT86IGFueTtcbiAgICByZXNwb25zZUhlYWRlcnM/OiBhbnk7XG5cbiAgICBwcm9ncmVzcz86IHtcbiAgICAgICAgc3RhdHVzOiBUaHlVcGxvYWRTdGF0dXM7XG4gICAgICAgIHBlcmNlbnRhZ2U6IG51bWJlcjtcbiAgICAgICAgc3BlZWQ/OiBudW1iZXI7XG4gICAgICAgIHNwZWVkSHVtYW4/OiBzdHJpbmc7XG4gICAgICAgIHN0YXJ0VGltZTogbnVtYmVyIHwgbnVsbDtcbiAgICAgICAgZW5kVGltZT86IG51bWJlciB8IG51bGw7XG4gICAgICAgIGVzdGltYXRlZFRpbWU/OiBudW1iZXIgfCBudWxsO1xuICAgICAgICBlc3RpbWF0ZWRUaW1lSHVtYW4/OiBzdHJpbmcgfCBudWxsO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGh5VXBsb2FkRmlsZXNPcHRpb25zIHtcbiAgICBvblN0YXJ0ZWQ/OiAoaXRlbTogVGh5VXBsb2FkRmlsZSkgPT4gdm9pZDtcbiAgICBvbkRvbmU/OiAoaXRlbTogVGh5VXBsb2FkRmlsZSkgPT4gdm9pZDtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRoeVVwbG9hZGVyU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIHhockZhY3Rvcnk6IFhockZhY3RvcnkpIHt9XG5cbiAgICBwcml2YXRlIHNlY29uZHNUb0h1bWFuKHNlYzogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHNlYyAqIDEwMDApLnRvSVNPU3RyaW5nKCkuc3Vic3RyKDExLCA4KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGh1bWFuaXplQnl0ZXMoYnl0ZXM6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGlmIChieXRlcyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcwIEJ5dGUnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgayA9IDEwMjQ7XG4gICAgICAgIGNvbnN0IHNpemVzOiBzdHJpbmdbXSA9IFsnQnl0ZXMnLCAnS0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInXTtcbiAgICAgICAgY29uc3QgaTogbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZyhrKSk7XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoKGJ5dGVzIC8gTWF0aC5wb3coaywgaSkpLnRvRml4ZWQoMikpICsgJyAnICsgc2l6ZXNbaV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub3JtYWxpemVVcGxvYWRGaWxlcyh1cGxvYWRGaWxlczogVGh5VXBsb2FkRmlsZSB8IFRoeVVwbG9hZEZpbGVbXSkge1xuICAgICAgICBjb2VyY2VBcnJheSh1cGxvYWRGaWxlcykuZm9yRWFjaCh1cGxvYWRGaWxlID0+IHtcbiAgICAgICAgICAgIGlmICghdXBsb2FkRmlsZS5wcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogVGh5VXBsb2FkU3RhdHVzLnBlbmRpbmcsXG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2U6IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHByaXZhdGUgdXBsb2FkQnlIdHRwKG9ic2VydmVyOiBTdWJzY3JpYmVyPFRoeVVwbG9hZFJlc3BvbnNlPiwgdXBsb2FkRmlsZTogVGh5VXBsb2FkRmlsZSkge1xuICAgIC8vICAgICBjb25zdCB0aW1lOiBudW1iZXIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAvLyAgICAgbGV0IHNwZWVkID0gMDtcbiAgICAvLyAgICAgbGV0IGVzdGltYXRlZFRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gICAgLy8gICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3MgPSB7XG4gICAgLy8gICAgICAgICBzdGF0dXM6IFRoeVVwbG9hZFN0YXR1cy5zdGFydGVkLFxuICAgIC8vICAgICAgICAgcGVyY2VudGFnZTogMCxcbiAgICAvLyAgICAgICAgIHN0YXJ0VGltZTogdGltZVxuICAgIC8vICAgICB9O1xuXG4gICAgLy8gICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgLy8gICAgIE9iamVjdC5rZXlzKHVwbG9hZEZpbGUuZGF0YSB8fCB7fSkuZm9yRWFjaChrZXkgPT4gZm9ybURhdGEuYXBwZW5kKGtleSwgdXBsb2FkRmlsZS5kYXRhW2tleV0pKTtcbiAgICAvLyAgICAgZm9ybURhdGEuYXBwZW5kKHVwbG9hZEZpbGUuZmlsZUZpZWxkIHx8ICdmaWxlJywgdXBsb2FkRmlsZS5uYXRpdmVGaWxlLCB1cGxvYWRGaWxlLmZpbGVOYW1lKTtcbiAgICAvLyAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAvLyAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAvLyAgICAgfTtcbiAgICAvLyAgICAgT2JqZWN0LmtleXModXBsb2FkRmlsZS5oZWFkZXJzIHx8IHt9KS5mb3JFYWNoKGtleSA9PiAoaGVhZGVyc1trZXldID0gdXBsb2FkRmlsZS5oZWFkZXJzW2tleV0pKTtcblxuICAgIC8vICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLmh0dHBcbiAgICAvLyAgICAgICAgIC5wb3N0KHVwbG9hZEZpbGUudXJsLCBmb3JtRGF0YSwge1xuICAgIC8vICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgLy8gICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHRydWUsXG4gICAgLy8gICAgICAgICAgICAgb2JzZXJ2ZTogJ2V2ZW50cycsXG4gICAgLy8gICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB1cGxvYWRGaWxlLndpdGhDcmVkZW50aWFscyA/IHRydWUgOiBmYWxzZVxuICAgIC8vICAgICAgICAgfSlcbiAgICAvLyAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgLy8gICAgICAgICAgICAgKGV2ZW50OiBIdHRwRXZlbnQ8YW55PikgPT4ge1xuICAgIC8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3Vic2NyaWJlIGRhdGEnLCBldmVudCk7XG4gICAgLy8gICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgY2FzZSBIdHRwRXZlbnRUeXBlLlNlbnQ6XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7IHN0YXR1czogVGh5VXBsb2FkU3RhdHVzLnN0YXJ0ZWQsIHVwbG9hZEZpbGU6IHVwbG9hZEZpbGUgfSk7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBjYXNlIEh0dHBFdmVudFR5cGUuVXBsb2FkUHJvZ3Jlc3M6XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBlcmNlbnRhZ2UgPSBNYXRoLnJvdW5kKChldmVudC5sb2FkZWQgKiAxMDApIC8gZXZlbnQudG90YWwpO1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50YWdlID09PSAxMDApIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZSA9IDk5O1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aW1lO1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVkID0gTWF0aC5yb3VuZCgoZXZlbnQubG9hZGVkIC8gZGlmZikgKiAxMDAwKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzc1N0YXJ0VGltZSA9ICh1cGxvYWRGaWxlLnByb2dyZXNzICYmIHVwbG9hZEZpbGUucHJvZ3Jlc3Muc3RhcnRUaW1lKSB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRUaW1lID0gTWF0aC5jZWlsKChldmVudC50b3RhbCAtIGV2ZW50LmxvYWRlZCkgLyBzcGVlZCk7XG5cbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRGaWxlLnByb2dyZXNzLnN0YXR1cyA9IFRoeVVwbG9hZFN0YXR1cy51cGxvYWRpbmc7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkRmlsZS5wcm9ncmVzcy5wZXJjZW50YWdlID0gcGVyY2VudGFnZTtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRGaWxlLnByb2dyZXNzLnNwZWVkID0gc3BlZWQ7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkRmlsZS5wcm9ncmVzcy5zcGVlZEh1bWFuID0gYCR7dGhpcy5odW1hbml6ZUJ5dGVzKHNwZWVkKX0vc2A7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkRmlsZS5wcm9ncmVzcy5zdGFydFRpbWUgPSBwcm9ncmVzc1N0YXJ0VGltZTtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRGaWxlLnByb2dyZXNzLmVzdGltYXRlZFRpbWUgPSBlc3RpbWF0ZWRUaW1lO1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3MuZXN0aW1hdGVkVGltZUh1bWFuID0gdGhpcy5zZWNvbmRzVG9IdW1hbihlc3RpbWF0ZWRUaW1lKTtcblxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoeyBzdGF0dXM6IFRoeVVwbG9hZFN0YXR1cy51cGxvYWRpbmcsIHVwbG9hZEZpbGU6IHVwbG9hZEZpbGUgfSk7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBjYXNlIEh0dHBFdmVudFR5cGUuUmVzcG9uc2U6XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkRmlsZS5yZXNwb25zZSA9IGV2ZW50LmJvZHk7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7IHN0YXR1czogVGh5VXBsb2FkU3RhdHVzLmRvbmUsIHVwbG9hZEZpbGU6IHVwbG9hZEZpbGUgfSk7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5oYW5kbGVkIGV2ZW50OiAke2V2ZW50LnR5cGV9YCk7XG4gICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAvLyAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xuICAgIC8vICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgICk7XG4gICAgLy8gICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgLy8gfVxuXG4gICAgcHJpdmF0ZSB1cGxvYWRCeVhocihvYnNlcnZlcjogU3Vic2NyaWJlcjxUaHlVcGxvYWRSZXNwb25zZT4sIHVwbG9hZEZpbGU6IFRoeVVwbG9hZEZpbGUpIHtcbiAgICAgICAgY29uc3QgeGhyID0gdGhpcy54aHJGYWN0b3J5LmJ1aWxkKCk7XG4gICAgICAgIGNvbnN0IHRpbWU6IG51bWJlciA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBsZXQgc3BlZWQgPSAwO1xuICAgICAgICBsZXQgZXN0aW1hdGVkVGltZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgICAgdXBsb2FkRmlsZS5wcm9ncmVzcyA9IHtcbiAgICAgICAgICAgIHN0YXR1czogVGh5VXBsb2FkU3RhdHVzLnN0YXJ0ZWQsXG4gICAgICAgICAgICBwZXJjZW50YWdlOiAwLFxuICAgICAgICAgICAgc3RhcnRUaW1lOiB0aW1lXG4gICAgICAgIH07XG5cbiAgICAgICAgeGhyLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ3Byb2dyZXNzJyxcbiAgICAgICAgICAgIChldmVudDogUHJvZ3Jlc3NFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwZXJjZW50YWdlID0gTWF0aC5yb3VuZCgoZXZlbnQubG9hZGVkICogMTAwKSAvIGV2ZW50LnRvdGFsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcmNlbnRhZ2UgPT09IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZSA9IDk5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRpbWU7XG4gICAgICAgICAgICAgICAgICAgIHNwZWVkID0gTWF0aC5yb3VuZCgoZXZlbnQubG9hZGVkIC8gZGlmZikgKiAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NTdGFydFRpbWUgPSAodXBsb2FkRmlsZS5wcm9ncmVzcyAmJiB1cGxvYWRGaWxlLnByb2dyZXNzLnN0YXJ0VGltZSkgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZFRpbWUgPSBNYXRoLmNlaWwoKGV2ZW50LnRvdGFsIC0gZXZlbnQubG9hZGVkKSAvIHNwZWVkKTtcblxuICAgICAgICAgICAgICAgICAgICB1cGxvYWRGaWxlLnByb2dyZXNzLnN0YXR1cyA9IFRoeVVwbG9hZFN0YXR1cy51cGxvYWRpbmc7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3MucGVyY2VudGFnZSA9IHBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3Muc3BlZWQgPSBzcGVlZDtcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkRmlsZS5wcm9ncmVzcy5zcGVlZEh1bWFuID0gYCR7dGhpcy5odW1hbml6ZUJ5dGVzKHNwZWVkKX0vc2A7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3Muc3RhcnRUaW1lID0gcHJvZ3Jlc3NTdGFydFRpbWU7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3MuZXN0aW1hdGVkVGltZSA9IGVzdGltYXRlZFRpbWU7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3MuZXN0aW1hdGVkVGltZUh1bWFuID0gdGhpcy5zZWNvbmRzVG9IdW1hbihlc3RpbWF0ZWRUaW1lKTtcblxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHsgc3RhdHVzOiBUaHlVcGxvYWRTdGF0dXMudXBsb2FkaW5nLCB1cGxvYWRGaWxlOiB1cGxvYWRGaWxlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuXG4gICAgICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwZWVkVGltZSA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHVwbG9hZEZpbGUucHJvZ3Jlc3Muc3RhcnRUaW1lKSAqIDEwMDA7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BlZWRBdmVyYWdlID0gTWF0aC5yb3VuZCh1cGxvYWRGaWxlLm5hdGl2ZUZpbGUuc2l6ZSAvIHNwZWVkVGltZSk7XG5cbiAgICAgICAgICAgICAgICB1cGxvYWRGaWxlLnByb2dyZXNzLnN0YXR1cyA9IFRoeVVwbG9hZFN0YXR1cy5kb25lO1xuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3MucGVyY2VudGFnZSA9IDEwMDtcbiAgICAgICAgICAgICAgICB1cGxvYWRGaWxlLnByb2dyZXNzLnNwZWVkID0gc3BlZWRBdmVyYWdlO1xuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3Muc3BlZWRIdW1hbiA9IGAke3RoaXMuaHVtYW5pemVCeXRlcyhzcGVlZCl9L3NgO1xuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucHJvZ3Jlc3MuZXN0aW1hdGVkVGltZSA9IGVzdGltYXRlZFRpbWU7XG4gICAgICAgICAgICAgICAgdXBsb2FkRmlsZS5wcm9ncmVzcy5lc3RpbWF0ZWRUaW1lSHVtYW4gPSB0aGlzLnNlY29uZHNUb0h1bWFuKGVzdGltYXRlZFRpbWUgfHwgMCk7XG5cbiAgICAgICAgICAgICAgICB1cGxvYWRGaWxlLnJlc3BvbnNlU3RhdHVzID0geGhyLnN0YXR1cztcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGUucmVzcG9uc2UgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB1cGxvYWRGaWxlLnJlc3BvbnNlID0geGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGZpbGUucmVzcG9uc2VIZWFkZXJzID0gdGhpcy5wYXJzZVJlc3BvbnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpO1xuXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7IHN0YXR1czogVGh5VXBsb2FkU3RhdHVzLmRvbmUsIHVwbG9hZEZpbGU6IHVwbG9hZEZpbGUgfSk7XG5cbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHhoci5vcGVuKHVwbG9hZEZpbGUubWV0aG9kLCB1cGxvYWRGaWxlLnVybCwgdHJ1ZSk7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB1cGxvYWRGaWxlLndpdGhDcmVkZW50aWFscyA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXModXBsb2FkRmlsZS5kYXRhIHx8IHt9KS5mb3JFYWNoKGtleSA9PiBmb3JtRGF0YS5hcHBlbmQoa2V5LCB1cGxvYWRGaWxlLmRhdGFba2V5XSkpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModXBsb2FkRmlsZS5oZWFkZXJzIHx8IHt9KS5mb3JFYWNoKGtleSA9PiB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHVwbG9hZEZpbGUuaGVhZGVyc1trZXldKSk7XG5cbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCh1cGxvYWRGaWxlLmZpbGVGaWVsZCB8fCAnZmlsZScsIHVwbG9hZEZpbGUubmF0aXZlRmlsZSwgdXBsb2FkRmlsZS5maWxlTmFtZSk7XG5cbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoeyBzdGF0dXM6IFRoeVVwbG9hZFN0YXR1cy5zdGFydGVkLCB1cGxvYWRGaWxlOiB1cGxvYWRGaWxlIH0pO1xuICAgICAgICAgICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geGhyO1xuICAgIH1cblxuICAgIHByaXZhdGUgZW5zdXJlRmlsZU5hbWUodXBsb2FkRmlsZTogVGh5VXBsb2FkRmlsZSkge1xuICAgICAgICB1cGxvYWRGaWxlLmZpbGVOYW1lID0gdXBsb2FkRmlsZS5maWxlTmFtZSB8fCB1cGxvYWRGaWxlLm5hdGl2ZUZpbGUubmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuIrkvKDljZXkuKrmlofku7ZcbiAgICAgKiBAcGFyYW0gdXBsb2FkRmlsZSDkuIrkvKDmlofku7blr7nosaFcbiAgICAgKi9cbiAgICB1cGxvYWQodXBsb2FkRmlsZTogVGh5VXBsb2FkRmlsZSk6IE9ic2VydmFibGU8VGh5VXBsb2FkUmVzcG9uc2U+IHtcbiAgICAgICAgdGhpcy5lbnN1cmVGaWxlTmFtZSh1cGxvYWRGaWxlKTtcblxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgY29uc3QgeGhyID0gdGhpcy51cGxvYWRCeVhocihvYnNlcnZlciwgdXBsb2FkRmlsZSk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5bm25Y+R5LiK5Lyg5aSa5Liq5paH5Lu2XG4gICAgICogQHBhcmFtIHVwbG9hZEZpbGVzIOS4iuS8oOaWh+S7tuWIl+ihqFxuICAgICAqIEBwYXJhbSBjb25jdXJyZW50IOW5tuWPkeS4iuS8oOaVsCwg6buY6K6kIDVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBvblN0YXJlZCwgb25Eb25lIOWbnuiwg1xuICAgICAqL1xuICAgIHVwbG9hZEJ1bGsodXBsb2FkRmlsZXM6IFRoeVVwbG9hZEZpbGVbXSwgY29uY3VycmVudCA9IDUsIG9wdGlvbnM/OiBUaHlVcGxvYWRGaWxlc09wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5ub3JtYWxpemVVcGxvYWRGaWxlcyh1cGxvYWRGaWxlcyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZyb20odXBsb2FkRmlsZXMpLnBpcGUoXG4gICAgICAgICAgICBtZXJnZU1hcCh1cGxvYWRGaWxlID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51cGxvYWQodXBsb2FkRmlsZSkucGlwZShcbiAgICAgICAgICAgICAgICAgICAgdGFwKHVwbG9hZFJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMub25TdGFydGVkICYmIHVwbG9hZFJlc3BvbnNlLnN0YXR1cyA9PT0gVGh5VXBsb2FkU3RhdHVzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uU3RhcnRlZCh1cGxvYWRSZXNwb25zZS51cGxvYWRGaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMub25Eb25lICYmIHVwbG9hZFJlc3BvbnNlLnN0YXR1cyA9PT0gVGh5VXBsb2FkU3RhdHVzLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRG9uZSh1cGxvYWRSZXNwb25zZS51cGxvYWRGaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSwgY29uY3VycmVudCksXG4gICAgICAgICAgICBtYXAocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iXX0=
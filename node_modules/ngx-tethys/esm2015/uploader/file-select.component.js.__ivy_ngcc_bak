import { Component, Input, Output, Inject, ViewChild, ElementRef, HostListener, EventEmitter } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { mimeTypeConvert } from './util';
import { THY_UPLOADER_DEFAULT_OPTIONS } from './uploader.config';
import { FileSelectBaseComponent } from './file-select-base';
export class ThyFileSelectComponent extends FileSelectBaseComponent {
    constructor(elementRef, defaultConfig) {
        super(elementRef, defaultConfig);
        this.elementRef = elementRef;
        this.defaultConfig = defaultConfig;
        this.thyOnFileSelect = new EventEmitter();
    }
    set thyMultiple(value) {
        this.multiple = coerceBooleanProperty(value);
        if (this.multiple) {
            this.fileInput.nativeElement.setAttribute('multiple', '');
        }
        else {
            this.fileInput.nativeElement.removeAttribute('multiple');
        }
    }
    set thyAcceptFolder(value) {
        this.acceptFolder = coerceBooleanProperty(value);
        if (this.acceptFolder) {
            this.fileInput.nativeElement.setAttribute('webkitdirectory', '');
        }
        else {
            this.fileInput.nativeElement.removeAttribute('webkitdirectory');
        }
    }
    set thyAcceptType(value) {
        this.acceptType = mimeTypeConvert(value);
    }
    set thySizeThreshold(value) {
        this.sizeThreshold = value;
    }
    click($event) {
        this.fileInput.nativeElement.click();
    }
    selectFile($event) {
        const files = this.fileInput.nativeElement.files;
        if (files && files.length > 0) {
            this.selectFiles($event, Array.from(files), this.thyOnFileSelect);
            this.fileInput.nativeElement.value = '';
        }
    }
    ngOnInit() { }
    ngOnDestroy() { }
}
ThyFileSelectComponent.decorators = [
    { type: Component, args: [{
                selector: '[thyFileSelect],thy-file-select',
                template: "<ng-content></ng-content>\n<input style=\"width: 0; height: 0\" thyStopPropagation=\"true\" [hidden]=\"'true'\" #fileInput type=\"file\" (change)=\"selectFile($event)\"\n    [attr.accept]=\"acceptType\">\n"
            },] }
];
ThyFileSelectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [THY_UPLOADER_DEFAULT_OPTIONS,] }] }
];
ThyFileSelectComponent.propDecorators = {
    thyOnFileSelect: [{ type: Output }],
    fileInput: [{ type: ViewChild, args: ['fileInput', { static: true },] }],
    thyMultiple: [{ type: Input }],
    thyAcceptFolder: [{ type: Input }],
    thyAcceptType: [{ type: Input }],
    thySizeThreshold: [{ type: Input }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZWxlY3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3VwbG9hZGVyL2ZpbGUtc2VsZWN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBRU4sTUFBTSxFQUNOLFNBQVMsRUFDVCxVQUFVLEVBR1YsWUFBWSxFQUNaLFlBQVksRUFDZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUscUJBQXFCLEVBQXFCLE1BQU0saUJBQWlCLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUV6QyxPQUFPLEVBQUUsNEJBQTRCLEVBQXFCLE1BQU0sbUJBQW1CLENBQUM7QUFDcEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFNN0QsTUFBTSxPQUFPLHNCQUF1QixTQUFRLHVCQUF1QjtJQTJDL0QsWUFBbUIsVUFBc0IsRUFBK0MsYUFBZ0M7UUFDcEgsS0FBSyxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQURsQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQStDLGtCQUFhLEdBQWIsYUFBYSxDQUFtQjtRQXRDOUcsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBd0MvQyxDQUFDO0lBcENELElBQ0ksV0FBVyxDQUFDLEtBQWM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzdEO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDNUQ7SUFDTCxDQUFDO0lBRUQsSUFDSSxlQUFlLENBQUMsS0FBYztRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDcEU7YUFBTTtZQUNILElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ25FO0lBQ0wsQ0FBQztJQUVELElBQ0ksYUFBYSxDQUFDLEtBQTZCO1FBQzNDLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFhLGdCQUFnQixDQUFDLEtBQWE7UUFDdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUdELEtBQUssQ0FBQyxNQUFhO1FBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQU1ELFVBQVUsQ0FBQyxNQUFhO1FBQ3BCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUNqRCxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQzNDO0lBQ0wsQ0FBQztJQUVELFFBQVEsS0FBSSxDQUFDO0lBRWIsV0FBVyxLQUFJLENBQUM7OztZQTdEbkIsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLHlOQUEyQzthQUM5Qzs7O1lBZkcsVUFBVTs0Q0EyRGtDLE1BQU0sU0FBQyw0QkFBNEI7Ozs4QkF0QzlFLE1BQU07d0JBRU4sU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7MEJBRXZDLEtBQUs7OEJBVUwsS0FBSzs0QkFVTCxLQUFLOytCQUtMLEtBQUs7b0JBSUwsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBSZW5kZXJlcjIsXG4gICAgSW5qZWN0LFxuICAgIFZpZXdDaGlsZCxcbiAgICBFbGVtZW50UmVmLFxuICAgIE9uSW5pdCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSwgaXNBcnJheSwgaXNTdHJpbmcgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuaW1wb3J0IHsgbWltZVR5cGVDb252ZXJ0IH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IFRoeVNpemVFeGNlZWRzSGFuZGxlciB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgVEhZX1VQTE9BREVSX0RFRkFVTFRfT1BUSU9OUywgVGh5VXBsb2FkZXJDb25maWcgfSBmcm9tICcuL3VwbG9hZGVyLmNvbmZpZyc7XG5pbXBvcnQgeyBGaWxlU2VsZWN0QmFzZUNvbXBvbmVudCB9IGZyb20gJy4vZmlsZS1zZWxlY3QtYmFzZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnW3RoeUZpbGVTZWxlY3RdLHRoeS1maWxlLXNlbGVjdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ZpbGUtc2VsZWN0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlGaWxlU2VsZWN0Q29tcG9uZW50IGV4dGVuZHMgRmlsZVNlbGVjdEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBtdWx0aXBsZTogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgYWNjZXB0Rm9sZGVyOiBib29sZWFuO1xuXG4gICAgQE91dHB1dCgpIHRoeU9uRmlsZVNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBWaWV3Q2hpbGQoJ2ZpbGVJbnB1dCcsIHsgc3RhdGljOiB0cnVlIH0pIGZpbGVJbnB1dDogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PjtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeU11bHRpcGxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMubXVsdGlwbGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xuICAgICAgICAgICAgdGhpcy5maWxlSW5wdXQubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5maWxlSW5wdXQubmF0aXZlRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ211bHRpcGxlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlBY2NlcHRGb2xkZXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5hY2NlcHRGb2xkZXIgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5hY2NlcHRGb2xkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsZUlucHV0Lm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCd3ZWJraXRkaXJlY3RvcnknLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVJbnB1dC5uYXRpdmVFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnd2Via2l0ZGlyZWN0b3J5Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlBY2NlcHRUeXBlKHZhbHVlOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWNjZXB0VHlwZSA9IG1pbWVUeXBlQ29udmVydCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgQElucHV0KCkgc2V0IHRoeVNpemVUaHJlc2hvbGQodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNpemVUaHJlc2hvbGQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gICAgY2xpY2soJGV2ZW50OiBFdmVudCkge1xuICAgICAgICB0aGlzLmZpbGVJbnB1dC5uYXRpdmVFbGVtZW50LmNsaWNrKCk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIEBJbmplY3QoVEhZX1VQTE9BREVSX0RFRkFVTFRfT1BUSU9OUykgcHVibGljIGRlZmF1bHRDb25maWc6IFRoeVVwbG9hZGVyQ29uZmlnKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIGRlZmF1bHRDb25maWcpO1xuICAgIH1cblxuICAgIHNlbGVjdEZpbGUoJGV2ZW50OiBFdmVudCkge1xuICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuZmlsZUlucHV0Lm5hdGl2ZUVsZW1lbnQuZmlsZXM7XG4gICAgICAgIGlmIChmaWxlcyAmJiBmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEZpbGVzKCRldmVudCwgQXJyYXkuZnJvbShmaWxlcyksIHRoaXMudGh5T25GaWxlU2VsZWN0KTtcbiAgICAgICAgICAgIHRoaXMuZmlsZUlucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSAnJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25Jbml0KCkge31cblxuICAgIG5nT25EZXN0cm95KCkge31cbn1cbiJdfQ==
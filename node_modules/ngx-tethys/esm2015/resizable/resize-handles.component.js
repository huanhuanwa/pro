import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './resize-handle.component';

function ThyResizeHandlesComponent_thy_resize_handle_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-resize-handle", 1);
} if (rf & 2) {
    const dir_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("thyDirection", dir_r1);
} }
export const DEFAULT_RESIZE_DIRECTION = [
    'bottomRight',
    'topRight',
    'bottomLeft',
    'topLeft',
    'bottom',
    'right',
    'top',
    'left'
];
export class ThyResizeHandlesComponent {
    constructor() {
        this.thyDirections = DEFAULT_RESIZE_DIRECTION;
        this.directions = new Set(this.thyDirections);
    }
    ngOnChanges(changes) {
        if (changes.thyDirections) {
            this.directions = new Set(changes.thyDirections.currentValue);
        }
    }
}
ThyResizeHandlesComponent.ɵfac = function ThyResizeHandlesComponent_Factory(t) { return new (t || ThyResizeHandlesComponent)(); };
ThyResizeHandlesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyResizeHandlesComponent, selectors: [["thy-resize-handles"]], inputs: { thyDirections: "thyDirections" }, exportAs: ["thyResizeHandles"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "thyDirection", 4, "ngFor", "ngForOf"], [3, "thyDirection"]], template: function ThyResizeHandlesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ThyResizeHandlesComponent_thy_resize_handle_0_Template, 1, 1, "thy-resize-handle", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.directions);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.ThyResizeHandleComponent], encapsulation: 2, changeDetection: 0 });
ThyResizeHandlesComponent.ctorParameters = () => [];
ThyResizeHandlesComponent.propDecorators = {
    thyDirections: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyResizeHandlesComponent, [{
        type: Component,
        args: [{
                selector: 'thy-resize-handles',
                exportAs: 'thyResizeHandles',
                template: `
        <thy-resize-handle *ngFor="let dir of directions" [thyDirection]="dir"></thy-resize-handle>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { thyDirections: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLWhhbmRsZXMuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVzaXphYmxlL3Jlc2l6ZS1oYW5kbGVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBNEIsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7O0FBR3BHLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUF5QjtBQUM5RCxJQUFJLGFBQWE7QUFDakIsSUFBSSxVQUFVO0FBQ2QsSUFBSSxZQUFZO0FBQ2hCLElBQUksU0FBUztBQUNiLElBQUksUUFBUTtBQUNaLElBQUksT0FBTztBQUNYLElBQUksS0FBSztBQUNULElBQUksTUFBTTtBQUNWLENBQUMsQ0FBQztBQVVGLE1BQU0sT0FBTyx5QkFBeUI7QUFBRyxJQUlyQztBQUNKLFFBSmEsa0JBQWEsR0FBeUIsd0JBQXdCLENBQUM7QUFDNUUsUUFHUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0RCxJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVcsQ0FBQyxPQUFzQjtBQUFJLFFBQ2xDLElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtBQUNuQyxZQUFZLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7cURBckJDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsb0JBQW9CO01BQzlCLFFBQVEsRUFBRSxrQkFBa0Isa0JBQzVCLFFBQVEsRUFBRSwyR0FFVCxrQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxjQUNsRDs7OztnSEFDSTtBQUFDO0FBQXFEO0FBQ2pCLDRCQUFyQyxLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeVJlc2l6ZURpcmVjdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkVTSVpFX0RJUkVDVElPTjogVGh5UmVzaXplRGlyZWN0aW9uW10gPSBbXG4gICAgJ2JvdHRvbVJpZ2h0JyxcbiAgICAndG9wUmlnaHQnLFxuICAgICdib3R0b21MZWZ0JyxcbiAgICAndG9wTGVmdCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ3JpZ2h0JyxcbiAgICAndG9wJyxcbiAgICAnbGVmdCdcbl07XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGh5LXJlc2l6ZS1oYW5kbGVzJyxcbiAgICBleHBvcnRBczogJ3RoeVJlc2l6ZUhhbmRsZXMnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDx0aHktcmVzaXplLWhhbmRsZSAqbmdGb3I9XCJsZXQgZGlyIG9mIGRpcmVjdGlvbnNcIiBbdGh5RGlyZWN0aW9uXT1cImRpclwiPjwvdGh5LXJlc2l6ZS1oYW5kbGU+XG4gICAgYCxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUaHlSZXNpemVIYW5kbGVzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBASW5wdXQoKSB0aHlEaXJlY3Rpb25zOiBUaHlSZXNpemVEaXJlY3Rpb25bXSA9IERFRkFVTFRfUkVTSVpFX0RJUkVDVElPTjtcbiAgICBkaXJlY3Rpb25zOiBTZXQ8VGh5UmVzaXplRGlyZWN0aW9uPjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRpcmVjdGlvbnMgPSBuZXcgU2V0KHRoaXMudGh5RGlyZWN0aW9ucyk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgICAgICBpZiAoY2hhbmdlcy50aHlEaXJlY3Rpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbnMgPSBuZXcgU2V0KGNoYW5nZXMudGh5RGlyZWN0aW9ucy5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
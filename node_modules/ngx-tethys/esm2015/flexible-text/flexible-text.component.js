import { Component, Input, ElementRef, ViewContainerRef } from '@angular/core';
import { TooltipService } from 'ngx-tethys/tooltip';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ContentObserver } from '@angular/cdk/observers';
import { debounceTime } from 'rxjs/operators';
import { isUndefinedOrNull } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/tooltip';
import * as ɵngcc2 from 'ngx-tethys/core';
import * as ɵngcc3 from '@angular/cdk/observers';

const _c0 = ["*"];
export class ThyFlexibleTextComponent {
    constructor(elementRef, viewContainerRef, tooltipService, updateHostClassService, contentObserver) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.tooltipService = tooltipService;
        this.updateHostClassService = updateHostClassService;
        this.contentObserver = contentObserver;
        this.isOverflow = false;
        this.subscription = null;
        this.updateHostClassService.initializeElement(this.elementRef);
    }
    get thyContainerClass() {
        return this.containerClass;
    }
    set thyContainerClass(value) {
        this.containerClass = value;
        this.updateContainerClass();
    }
    set thyContent(value) {
        this.content = value;
        if (this.tooltipService.thyTooltipDirective) {
            this.tooltipService.thyTooltipDirective.content = this.content;
        }
    }
    set thyPlacement(value) {
        this.placement = value;
        if (this.tooltipService.thyTooltipDirective) {
            this.tooltipService.thyTooltipDirective.placement = this.placement;
        }
    }
    ngOnInit() {
        this.updateContainerClass();
        this.tooltipService.attach(this.elementRef, this.viewContainerRef, this.trigger);
        if (this.placement) {
            this.tooltipService.thyTooltipDirective.placement = this.placement;
        }
        this.tooltipService.thyTooltipDirective.content = this.content;
        this.tooltipService.thyTooltipDirective.thyTooltipDisabled = true;
    }
    ngAfterContentInit() {
        this.applyOverflow();
        this.subscription = this.contentObserver
            .observe(this.elementRef)
            .pipe(debounceTime(100))
            .subscribe((value) => {
            this.applyOverflow();
        });
    }
    ngOnDestroy() {
        this.tooltipService.detach();
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    applyOverflow() {
        const nativeElement = this.elementRef.nativeElement;
        if (nativeElement.clientWidth < nativeElement.scrollWidth) {
            this.isOverflow = true;
        }
        else {
            this.isOverflow = false;
        }
        this.tooltipService.thyTooltipDirective.thyTooltipDisabled = !this.isOverflow;
    }
    updateContainerClass() {
        const containerClass = isUndefinedOrNull(this.containerClass) ? 'flexible-text-container' : this.containerClass;
        const flexibleTextClass = {
            'text-truncate': true,
            [containerClass]: containerClass !== ''
        };
        this.updateHostClassService.updateClassByMap(flexibleTextClass);
    }
}
ThyFlexibleTextComponent.ɵfac = function ThyFlexibleTextComponent_Factory(t) { return new (t || ThyFlexibleTextComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TooltipService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ContentObserver)); };
ThyFlexibleTextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFlexibleTextComponent, selectors: [["thy-flexible-text"], ["", "thyFlexibleText", ""]], inputs: { thyContainerClass: "thyContainerClass", thyContent: ["thyTooltipContent", "thyContent"], thyPlacement: ["thyTooltipPlacement", "thyPlacement"], trigger: ["thyTooltipTrigger", "trigger"] }, exportAs: ["thyFlexibleText"], features: [ɵngcc0.ɵɵProvidersFeature([TooltipService, UpdateHostClassService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyFlexibleTextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyFlexibleTextComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: TooltipService },
    { type: UpdateHostClassService },
    { type: ContentObserver }
];
ThyFlexibleTextComponent.propDecorators = {
    trigger: [{ type: Input, args: ['thyTooltipTrigger',] }],
    thyContainerClass: [{ type: Input, args: ['thyContainerClass',] }],
    thyContent: [{ type: Input, args: ['thyTooltipContent',] }],
    thyPlacement: [{ type: Input, args: ['thyTooltipPlacement',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFlexibleTextComponent, [{
        type: Component,
        args: [{
                selector: 'thy-flexible-text,[thyFlexibleText]',
                exportAs: 'thyFlexibleText',
                template: "<ng-content></ng-content>\n",
                providers: [TooltipService, UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.TooltipService }, { type: ɵngcc2.UpdateHostClassService }, { type: ɵngcc3.ContentObserver }]; }, { thyContainerClass: [{
            type: Input,
            args: ['thyContainerClass']
        }], thyContent: [{
            type: Input,
            args: ['thyTooltipContent']
        }], thyPlacement: [{
            type: Input,
            args: ['thyTooltipPlacement']
        }], trigger: [{
            type: Input,
            args: ['thyTooltipTrigger']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
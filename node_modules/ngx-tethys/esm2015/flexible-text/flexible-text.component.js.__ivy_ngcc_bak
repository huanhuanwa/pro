import { Component, Input, ElementRef, ViewContainerRef } from '@angular/core';
import { TooltipService } from 'ngx-tethys/tooltip';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ContentObserver } from '@angular/cdk/observers';
import { debounceTime } from 'rxjs/operators';
import { isUndefinedOrNull } from 'ngx-tethys/util';
export class ThyFlexibleTextComponent {
    constructor(elementRef, viewContainerRef, tooltipService, updateHostClassService, contentObserver) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.tooltipService = tooltipService;
        this.updateHostClassService = updateHostClassService;
        this.contentObserver = contentObserver;
        this.isOverflow = false;
        this.subscription = null;
        this.updateHostClassService.initializeElement(this.elementRef);
    }
    get thyContainerClass() {
        return this.containerClass;
    }
    set thyContainerClass(value) {
        this.containerClass = value;
        this.updateContainerClass();
    }
    set thyContent(value) {
        this.content = value;
        if (this.tooltipService.thyTooltipDirective) {
            this.tooltipService.thyTooltipDirective.content = this.content;
        }
    }
    set thyPlacement(value) {
        this.placement = value;
        if (this.tooltipService.thyTooltipDirective) {
            this.tooltipService.thyTooltipDirective.placement = this.placement;
        }
    }
    ngOnInit() {
        this.updateContainerClass();
        this.tooltipService.attach(this.elementRef, this.viewContainerRef, this.trigger);
        if (this.placement) {
            this.tooltipService.thyTooltipDirective.placement = this.placement;
        }
        this.tooltipService.thyTooltipDirective.content = this.content;
        this.tooltipService.thyTooltipDirective.thyTooltipDisabled = true;
    }
    ngAfterContentInit() {
        this.applyOverflow();
        this.subscription = this.contentObserver
            .observe(this.elementRef)
            .pipe(debounceTime(100))
            .subscribe((value) => {
            this.applyOverflow();
        });
    }
    ngOnDestroy() {
        this.tooltipService.detach();
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    applyOverflow() {
        const nativeElement = this.elementRef.nativeElement;
        if (nativeElement.clientWidth < nativeElement.scrollWidth) {
            this.isOverflow = true;
        }
        else {
            this.isOverflow = false;
        }
        this.tooltipService.thyTooltipDirective.thyTooltipDisabled = !this.isOverflow;
    }
    updateContainerClass() {
        const containerClass = isUndefinedOrNull(this.containerClass) ? 'flexible-text-container' : this.containerClass;
        const flexibleTextClass = {
            'text-truncate': true,
            [containerClass]: containerClass !== ''
        };
        this.updateHostClassService.updateClassByMap(flexibleTextClass);
    }
}
ThyFlexibleTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-flexible-text,[thyFlexibleText]',
                exportAs: 'thyFlexibleText',
                template: "<ng-content></ng-content>\n",
                providers: [TooltipService, UpdateHostClassService]
            },] }
];
ThyFlexibleTextComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: TooltipService },
    { type: UpdateHostClassService },
    { type: ContentObserver }
];
ThyFlexibleTextComponent.propDecorators = {
    trigger: [{ type: Input, args: ['thyTooltipTrigger',] }],
    thyContainerClass: [{ type: Input, args: ['thyContainerClass',] }],
    thyContent: [{ type: Input, args: ['thyTooltipContent',] }],
    thyPlacement: [{ type: Input, args: ['thyTooltipPlacement',] }]
};
//# sourceMappingURL=data:application/json;base64,
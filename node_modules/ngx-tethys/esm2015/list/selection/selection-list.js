import { ScrollToService, UpdateHostClassService } from 'ngx-tethys/core';
import { THY_LIST_OPTION_PARENT_COMPONENT, ThyListOptionComponent } from 'ngx-tethys/shared';
import { coerceBooleanProperty, dom, helpers, keycodes } from 'ngx-tethys/util';
import { Subscription } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { SelectionModel } from '@angular/cdk/collections';
import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Input, NgZone, Output, QueryList, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';

const _c0 = ["*"];
const listSizesMap = {
    sm: 'thy-list-sm'
};
export class ThySelectionListComponent {
    constructor(renderer, elementRef, ngZone, updateHostClassService) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.updateHostClassService = updateHostClassService;
        this._selectionChangesUnsubscribe$ = Subscription.EMPTY;
        this.layout = 'list';
        this._isList = true;
        this._isSelectionList = true;
        this.multiple = true;
        this.isLayoutGrid = false;
        this.spaceEnabled = true;
        /** Emits a change event whenever the selected state of an option changes. */
        this.thySelectionChange = new EventEmitter();
        this._onTouched = () => { };
        this._onChange = (_) => { };
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thyMultiple(value) {
        const previousValue = this.multiple;
        this.multiple = coerceBooleanProperty(value);
        if (previousValue !== this.multiple) {
            this._instanceSelectionModel();
        }
    }
    set thyLayout(value) {
        this.layout = value;
        this.isLayoutGrid = value === 'grid';
    }
    set thyAutoActiveFirstItem(value) {
        this.autoActiveFirstItem = coerceBooleanProperty(value);
    }
    set thySize(value) {
        this._setListSize(value);
    }
    /** Whether keydown space toggle focused option */
    set thySpaceKeyEnabled(value) {
        this.spaceEnabled = coerceBooleanProperty(value);
    }
    _emitChangeEvent(option, event) {
        this.thySelectionChange.emit({
            source: this,
            value: option.thyValue,
            option: option,
            event: event,
            selected: this.isSelected(option)
        });
    }
    _emitModelValueChange() {
        if (this.options) {
            let selectedValues = this.selectionModel.selected;
            if (this.thyUniqueKey) {
                selectedValues = selectedValues.map(selectedValue => {
                    const selectedOption = this.options.find(option => {
                        return option.thyValue[this.thyUniqueKey] === selectedValue;
                    });
                    if (selectedOption) {
                        return selectedOption.thyValue;
                    }
                    else {
                        return this._modelValues.find(value => {
                            return value[this.thyUniqueKey] === selectedValue;
                        });
                    }
                });
            }
            this._modelValues = selectedValues;
            let changeValue = selectedValues;
            if (!this.multiple && selectedValues && selectedValues.length > 0) {
                changeValue = selectedValues[0];
            }
            this._onChange(changeValue);
        }
    }
    _toggleFocusedOption(event) {
        if (this._keyManager.activeItem) {
            this.ngZone.run(() => {
                this.toggleOption(this._keyManager.activeItem, event);
            });
        }
    }
    _initializeFocusKeyManager() {
        this._keyManager = new ActiveDescendantKeyManager(this.options)
            .withWrap()
            // .withTypeAhead()
            // Allow disabled items to be focusable. For accessibility reasons, there must be a way for
            // screenreader users, that allows reading the different options of the list.
            .skipPredicate(() => false);
    }
    _instanceSelectionModel() {
        this.selectionModel = new SelectionModel(this.multiple);
    }
    _getElementBySelector(element) {
        return dom.getHTMLElementBySelector(element, this.elementRef);
    }
    _compareValue(value1, value2) {
        if (this.thyCompareWith) {
            const compareFn = this.thyCompareWith;
            return compareFn(value1, value2);
        }
        else if (this.thyUniqueKey) {
            return value1 && value1[this.thyUniqueKey] === value2 && value2[this.thyUniqueKey];
        }
        else {
            return value1 === value2;
        }
    }
    _getOptionSelectionValue(option) {
        if (option.thyValue) {
            return this.thyUniqueKey ? option.thyValue[this.thyUniqueKey] : option.thyValue;
        }
        else {
            return option;
        }
    }
    _setSelectionByValues(values) {
        this.selectionModel.clear();
        values.forEach(value => {
            if (this.thyUniqueKey) {
                this.selectionModel.select(value[this.thyUniqueKey]);
            }
            else {
                this.selectionModel.select(value);
            }
        });
    }
    _setAllOptionsSelected(toIsSelected) {
        // Keep track of whether anything changed, because we only want to
        // emit the changed event when something actually changed.
        let hasChanged = false;
        this.options.forEach(option => {
            const fromIsSelected = this.selectionModel.isSelected(option.thyValue);
            if (fromIsSelected !== toIsSelected) {
                hasChanged = true;
                this.selectionModel.toggle(option.thyValue);
            }
        });
        if (hasChanged) {
            this._emitModelValueChange();
        }
    }
    _getOptionByValue(value) {
        return this.options.find(option => {
            return this._compareValue(option.thyValue, value);
        });
    }
    _getActiveOption() {
        if (this._keyManager.activeItem) {
            return this._getOptionByValue(this._keyManager.activeItem.thyValue);
        }
        else {
            return null;
        }
    }
    _setListSize(size) {
        for (const key in listSizesMap) {
            if (listSizesMap.hasOwnProperty(key)) {
                this.updateHostClassService.removeClass(listSizesMap[key]);
            }
        }
        if (size) {
            this.updateHostClassService.addClass(listSizesMap[size]);
        }
    }
    ngOnInit() {
        const bindKeyEventElement = this._getElementBySelector(this.thyBindKeyEventContainer);
        this.ngZone.runOutsideAngular(() => {
            this._bindKeyEventUnsubscribe = this.renderer.listen(bindKeyEventElement, 'keydown', this.onKeydown.bind(this));
        });
        this._instanceSelectionModel();
    }
    writeValue(value) {
        if (value) {
            if (this.multiple && !helpers.isArray(value)) {
                throw new Error(`multiple selection ngModel must be array.`);
            }
            if (!this.multiple && helpers.isArray(value)) {
                throw new Error(`single selection ngModel not be array.`);
            }
        }
        const values = helpers.isArray(value) ? value : value ? [value] : [];
        this._modelValues = values;
        if (this.options) {
            this._setSelectionByValues(values);
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onKeydown(event) {
        if (this.thyBeforeKeydown) {
            // stop key down event
            const isContinue = this.thyBeforeKeydown(event);
            if (!isContinue) {
                return;
            }
        }
        const keyCode = event.keyCode || event.which;
        const manager = this._keyManager;
        const previousFocusIndex = manager.activeItemIndex;
        switch (keyCode) {
            case keycodes.SPACE:
            case keycodes.ENTER:
                if (keyCode === keycodes.SPACE && !this.spaceEnabled) {
                    return;
                }
                this._toggleFocusedOption(event);
                // Always prevent space from scrolling the page since the list has focus
                event.preventDefault();
                break;
            default:
                manager.onKeydown(event);
        }
        if ((keyCode === keycodes.UP_ARROW || keyCode === keycodes.DOWN_ARROW) &&
            event.shiftKey &&
            manager.activeItemIndex !== previousFocusIndex) {
            this._toggleFocusedOption(event);
        }
    }
    toggleOption(option, event) {
        if (option && !option.disabled) {
            this.selectionModel.toggle(this._getOptionSelectionValue(option));
            // Emit a change event because the focused option changed its state through user
            // interaction.
            this._emitModelValueChange();
            this._emitChangeEvent(option, event);
        }
    }
    setActiveOption(option) {
        this._keyManager.updateActiveItem(option); // .updateActiveItemIndex(this._getOptionIndex(option));
    }
    scrollIntoView(option) {
        const scrollContainerElement = dom.getHTMLElementBySelector(this.thyScrollContainer, this.elementRef);
        ScrollToService.scrollToElement(option.element.nativeElement, scrollContainerElement);
    }
    isSelected(option) {
        return this.selectionModel.isSelected(this._getOptionSelectionValue(option));
    }
    clearActiveItem() {
        if (this._keyManager.activeItem) {
            this._keyManager.setActiveItem(-1);
        }
    }
    determineClearActiveItem() {
        if (!this._getActiveOption()) {
            this.clearActiveItem();
        }
    }
    /** Selects all of the options. */
    selectAll() {
        this._setAllOptionsSelected(true);
    }
    /** Deselects all of the options. */
    deselectAll() {
        this._setAllOptionsSelected(false);
    }
    ngAfterContentInit() {
        this._initializeFocusKeyManager();
        this.options.changes.pipe(startWith(true)).subscribe(() => {
            if (this.autoActiveFirstItem) {
                if (!this._keyManager.activeItem || this.options.toArray().indexOf(this._keyManager.activeItem) < 0) {
                    this._keyManager.setFirstItemActive();
                }
            }
        });
        // if (this._tempValues) {
        //     this._setSelectionByValues(this._tempValues);
        //     this._tempValues = null;
        // }
    }
    ngOnDestroy() {
        this._selectionChangesUnsubscribe$.unsubscribe();
        if (this._bindKeyEventUnsubscribe) {
            this._bindKeyEventUnsubscribe();
        }
    }
}
ThySelectionListComponent.ɵfac = function ThySelectionListComponent_Factory(t) { return new (t || ThySelectionListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService)); };
ThySelectionListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySelectionListComponent, selectors: [["thy-selection-list"], ["", "thy-selection-list", ""]], contentQueries: function ThySelectionListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyListOptionComponent, false);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);
    } }, hostVars: 8, hostBindings: function ThySelectionListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-list", ctx._isList)("thy-selection-list", ctx._isSelectionList)("thy-multiple-selection-list", ctx.multiple)("thy-grid-list", ctx.isLayoutGrid);
    } }, inputs: { thyMultiple: "thyMultiple", thyLayout: "thyLayout", thyAutoActiveFirstItem: "thyAutoActiveFirstItem", thySize: "thySize", thySpaceKeyEnabled: "thySpaceKeyEnabled", thyBindKeyEventContainer: "thyBindKeyEventContainer", thyScrollContainer: "thyScrollContainer", thyBeforeKeydown: "thyBeforeKeydown", thyUniqueKey: "thyUniqueKey", thyCompareWith: "thyCompareWith" }, outputs: { thySelectionChange: "thySelectionChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            UpdateHostClassService,
            {
                provide: THY_LIST_OPTION_PARENT_COMPONENT,
                useExisting: ThySelectionListComponent
            },
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThySelectionListComponent),
                multi: true
            }
        ])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThySelectionListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ThySelectionListComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: UpdateHostClassService }
];
ThySelectionListComponent.propDecorators = {
    _isList: [{ type: HostBinding, args: [`class.thy-list`,] }],
    _isSelectionList: [{ type: HostBinding, args: [`class.thy-selection-list`,] }],
    multiple: [{ type: HostBinding, args: [`class.thy-multiple-selection-list`,] }],
    isLayoutGrid: [{ type: HostBinding, args: [`class.thy-grid-list`,] }],
    options: [{ type: ContentChildren, args: [ThyListOptionComponent,] }],
    thyMultiple: [{ type: Input }],
    thyBindKeyEventContainer: [{ type: Input }],
    thyScrollContainer: [{ type: Input }],
    thyBeforeKeydown: [{ type: Input }],
    thyUniqueKey: [{ type: Input }],
    thyCompareWith: [{ type: Input }],
    thyLayout: [{ type: Input }],
    thyAutoActiveFirstItem: [{ type: Input }],
    thySize: [{ type: Input }],
    thySpaceKeyEnabled: [{ type: Input }],
    thySelectionChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySelectionListComponent, [{
        type: Component,
        args: [{
                selector: 'thy-selection-list,[thy-selection-list]',
                template: '<ng-content></ng-content>',
                providers: [
                    UpdateHostClassService,
                    {
                        provide: THY_LIST_OPTION_PARENT_COMPONENT,
                        useExisting: ThySelectionListComponent
                    },
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThySelectionListComponent),
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.UpdateHostClassService }]; }, { _isList: [{
            type: HostBinding,
            args: [`class.thy-list`]
        }], _isSelectionList: [{
            type: HostBinding,
            args: [`class.thy-selection-list`]
        }], multiple: [{
            type: HostBinding,
            args: [`class.thy-multiple-selection-list`]
        }], isLayoutGrid: [{
            type: HostBinding,
            args: [`class.thy-grid-list`]
        }], thySelectionChange: [{
            type: Output
        }], thyMultiple: [{
            type: Input
        }], thyLayout: [{
            type: Input
        }], thyAutoActiveFirstItem: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thySpaceKeyEnabled: [{
            type: Input
        }], options: [{
            type: ContentChildren,
            args: [ThyListOptionComponent]
        }], thyBindKeyEventContainer: [{
            type: Input
        }], thyScrollContainer: [{
            type: Input
        }], thyBeforeKeydown: [{
            type: Input
        }], thyUniqueKey: [{
            type: Input
        }], thyCompareWith: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
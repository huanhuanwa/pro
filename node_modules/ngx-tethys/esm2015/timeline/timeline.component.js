import { Component, Input, HostBinding, ContentChildren, QueryList, ChangeDetectorRef, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { ThyTimelineItemComponent } from './timeline-item.component';
import { ThyTimelineService } from './timeline.service';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './timeline.service';
import * as ɵngcc2 from '@angular/common';

function ThyTimelineComponent_ng_container_1_ng_template_1_Template(rf, ctx) { }
function ThyTimelineComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTimelineComponent_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", item_r1.template);
} }
const _c0 = ["*"];
export var ThyTimeModes;
(function (ThyTimeModes) {
    ThyTimeModes["left"] = "left";
    ThyTimeModes["right"] = "right";
    ThyTimeModes["center"] = "center";
})(ThyTimeModes || (ThyTimeModes = {}));
export class ThyTimelineComponent {
    constructor(cdr, timelineService) {
        this.cdr = cdr;
        this.timelineService = timelineService;
        this.thyDirection = 'vertical';
        this.timelineItems = [];
        this.destroy$ = new Subject();
        this.isTimeline = true;
        this.rightTimeline = false;
        this.centerTimeline = false;
        this.templateTimeline = false;
        this.horizontal = false;
    }
    ngOnChanges(changes) {
        const { thyMode, thyReverse } = changes;
        if (thyMode && !this.horizontal) {
            if (thyMode.currentValue === 'right') {
                this.rightTimeline = !this.templateTimeline;
                this.centerTimeline = false;
            }
            else if (thyMode.currentValue === 'center') {
                this.centerTimeline = true;
                this.rightTimeline = false;
            }
            else {
                this.rightTimeline = false;
                this.centerTimeline = false;
            }
        }
        if ((simpleChangeActivated(thyMode) && !this.horizontal) || simpleChangeActivated(thyReverse)) {
            this.updateChildren();
        }
    }
    ngOnInit() {
        this.horizontal = this.thyDirection === 'horizontal' ? true : false;
        this.timelineService.check$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.cdr.markForCheck();
        });
    }
    ngAfterContentInit() {
        this.updateChildren();
        this.listOfItems.changes.subscribe(() => {
            this.updateChildren();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    updateChildren() {
        if (this.listOfItems && this.listOfItems.length) {
            const length = this.listOfItems.length;
            this.listOfItems.forEach((item, index) => {
                item.isLast = !this.thyReverse ? index === length - 1 : index === 0;
                item.isFirst = this.thyReverse ? index === length - 1 : index === 0;
                item.reverse = this.thyReverse;
                if (!this.horizontal) {
                    item.position = getTimelineItemPosition(index, this.thyMode);
                }
                if (item.description || (item.thyPosition && !this.horizontal)) {
                    this.templateTimeline = true;
                }
                item.detectChanges();
            });
            this.timelineItems = this.thyReverse ? this.listOfItems.toArray().reverse() : this.listOfItems.toArray();
        }
        this.cdr.markForCheck();
    }
}
ThyTimelineComponent.ɵfac = function ThyTimelineComponent_Factory(t) { return new (t || ThyTimelineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyTimelineService)); };
ThyTimelineComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTimelineComponent, selectors: [["thy-timeline"]], contentQueries: function ThyTimelineComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyTimelineItemComponent, false);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listOfItems = _t);
    } }, hostVars: 10, hostBindings: function ThyTimelineComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-timeline", ctx.isTimeline)("thy-timeline-right", ctx.rightTimeline)("thy-timeline-center", ctx.centerTimeline)("thy-timeline-template", ctx.templateTimeline)("thy-timeline-horizontal", ctx.horizontal);
    } }, inputs: { thyDirection: "thyDirection", thyReverse: "thyReverse", thyMode: "thyMode" }, features: [ɵngcc0.ɵɵProvidersFeature([ThyTimelineService]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 3, vars: 1, consts: [[4, "ngFor", "ngForOf"], [3, "ngTemplateOutlet"]], template: function ThyTimelineComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtemplate(1, ThyTimelineComponent_ng_container_1_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.timelineItems);
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
ThyTimelineComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ThyTimelineService }
];
ThyTimelineComponent.propDecorators = {
    thyReverse: [{ type: Input }],
    thyMode: [{ type: Input }],
    thyDirection: [{ type: Input }],
    isTimeline: [{ type: HostBinding, args: [`class.thy-timeline`,] }],
    rightTimeline: [{ type: HostBinding, args: [`class.thy-timeline-right`,] }],
    centerTimeline: [{ type: HostBinding, args: [`class.thy-timeline-center`,] }],
    templateTimeline: [{ type: HostBinding, args: [`class.thy-timeline-template`,] }],
    horizontal: [{ type: HostBinding, args: [`class.thy-timeline-horizontal`,] }],
    listOfItems: [{ type: ContentChildren, args: [ThyTimelineItemComponent,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTimelineComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'thy-timeline',
                providers: [ThyTimelineService],
                template: `
        <ng-container>
            <ng-container *ngFor="let item of timelineItems">
                <ng-template [ngTemplateOutlet]="item.template"></ng-template>
            </ng-container>
            <ng-content></ng-content>
        </ng-container>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ThyTimelineService }]; }, { thyDirection: [{
            type: Input
        }], isTimeline: [{
            type: HostBinding,
            args: [`class.thy-timeline`]
        }], rightTimeline: [{
            type: HostBinding,
            args: [`class.thy-timeline-right`]
        }], centerTimeline: [{
            type: HostBinding,
            args: [`class.thy-timeline-center`]
        }], templateTimeline: [{
            type: HostBinding,
            args: [`class.thy-timeline-template`]
        }], horizontal: [{
            type: HostBinding,
            args: [`class.thy-timeline-horizontal`]
        }], thyReverse: [{
            type: Input
        }], thyMode: [{
            type: Input
        }], listOfItems: [{
            type: ContentChildren,
            args: [ThyTimelineItemComponent]
        }] }); })();
function simpleChangeActivated(simpleChange) {
    return !!(simpleChange && (simpleChange.previousValue !== simpleChange.currentValue || simpleChange.isFirstChange()));
}
function getTimelineItemPosition(index, mode) {
    return mode === 'left' ? 'left' : mode === 'right' ? 'right' : mode === 'center' && index % 2 === 0 ? 'left' : 'right';
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
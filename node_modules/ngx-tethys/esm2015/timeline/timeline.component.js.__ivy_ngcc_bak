import { Component, Input, HostBinding, ContentChildren, QueryList, ChangeDetectorRef, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { ThyTimelineItemComponent } from './timeline-item.component';
import { ThyTimelineService } from './timeline.service';
import { Subject } from 'rxjs';
export var ThyTimeModes;
(function (ThyTimeModes) {
    ThyTimeModes["left"] = "left";
    ThyTimeModes["right"] = "right";
    ThyTimeModes["center"] = "center";
})(ThyTimeModes || (ThyTimeModes = {}));
export class ThyTimelineComponent {
    constructor(cdr, timelineService) {
        this.cdr = cdr;
        this.timelineService = timelineService;
        this.thyDirection = 'vertical';
        this.timelineItems = [];
        this.destroy$ = new Subject();
        this.isTimeline = true;
        this.rightTimeline = false;
        this.centerTimeline = false;
        this.templateTimeline = false;
        this.horizontal = false;
    }
    ngOnChanges(changes) {
        const { thyMode, thyReverse } = changes;
        if (thyMode && !this.horizontal) {
            if (thyMode.currentValue === 'right') {
                this.rightTimeline = !this.templateTimeline;
                this.centerTimeline = false;
            }
            else if (thyMode.currentValue === 'center') {
                this.centerTimeline = true;
                this.rightTimeline = false;
            }
            else {
                this.rightTimeline = false;
                this.centerTimeline = false;
            }
        }
        if ((simpleChangeActivated(thyMode) && !this.horizontal) || simpleChangeActivated(thyReverse)) {
            this.updateChildren();
        }
    }
    ngOnInit() {
        this.horizontal = this.thyDirection === 'horizontal' ? true : false;
        this.timelineService.check$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.cdr.markForCheck();
        });
    }
    ngAfterContentInit() {
        this.updateChildren();
        this.listOfItems.changes.subscribe(() => {
            this.updateChildren();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    updateChildren() {
        if (this.listOfItems && this.listOfItems.length) {
            const length = this.listOfItems.length;
            this.listOfItems.forEach((item, index) => {
                item.isLast = !this.thyReverse ? index === length - 1 : index === 0;
                item.isFirst = this.thyReverse ? index === length - 1 : index === 0;
                item.reverse = this.thyReverse;
                if (!this.horizontal) {
                    item.position = getTimelineItemPosition(index, this.thyMode);
                }
                if (item.description || (item.thyPosition && !this.horizontal)) {
                    this.templateTimeline = true;
                }
                item.detectChanges();
            });
            this.timelineItems = this.thyReverse ? this.listOfItems.toArray().reverse() : this.listOfItems.toArray();
        }
        this.cdr.markForCheck();
    }
}
ThyTimelineComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'thy-timeline',
                providers: [ThyTimelineService],
                template: `
        <ng-container>
            <ng-container *ngFor="let item of timelineItems">
                <ng-template [ngTemplateOutlet]="item.template"></ng-template>
            </ng-container>
            <ng-content></ng-content>
        </ng-container>
    `
            },] }
];
ThyTimelineComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ThyTimelineService }
];
ThyTimelineComponent.propDecorators = {
    thyReverse: [{ type: Input }],
    thyMode: [{ type: Input }],
    thyDirection: [{ type: Input }],
    isTimeline: [{ type: HostBinding, args: [`class.thy-timeline`,] }],
    rightTimeline: [{ type: HostBinding, args: [`class.thy-timeline-right`,] }],
    centerTimeline: [{ type: HostBinding, args: [`class.thy-timeline-center`,] }],
    templateTimeline: [{ type: HostBinding, args: [`class.thy-timeline-template`,] }],
    horizontal: [{ type: HostBinding, args: [`class.thy-timeline-horizontal`,] }],
    listOfItems: [{ type: ContentChildren, args: [ThyTimelineItemComponent,] }]
};
function simpleChangeActivated(simpleChange) {
    return !!(simpleChange && (simpleChange.previousValue !== simpleChange.currentValue || simpleChange.isFirstChange()));
}
function getTimelineItemPosition(index, mode) {
    return mode === 'left' ? 'left' : mode === 'right' ? 'right' : mode === 'center' && index % 2 === 0 ? 'left' : 'right';
}
//# sourceMappingURL=data:application/json;base64,
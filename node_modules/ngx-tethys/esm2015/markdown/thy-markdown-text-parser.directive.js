import { Directive, ElementRef, Input, HostBinding } from '@angular/core';
import { ThyMarkdownParserService } from './thy-markdown-parser.service';
import { liteMarked } from 'ngx-tethys/types';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './thy-markdown-parser.service';
export class ThyMarkdownPlanTextParserDirective {
    constructor(elementRef, thyMarkdownParserService) {
        this.elementRef = elementRef;
        this.thyMarkdownParserService = thyMarkdownParserService;
        this.value = '';
        this.prefix = '';
        this.liteMarkedOptions = {
            gfm: true,
            tables: false,
            breaks: true,
            pedantic: false,
            sanitize: false,
            smartLists: false,
            smartypants: false,
            heading: false,
            link: false,
            list: false,
            wtlink: true,
            wthexcolor: true,
            wthexcolorRender: {
                className: 'msg-inline-color'
            },
            wtat: true,
            wtatRender: {
                memberPrefix: this.prefix,
                className: 'slide-trigger'
            },
            wthash: true,
            wtentity: true,
            wtentityRender: {
                className: 'slide-trigger'
            },
            wthashRender: {
                chlPrefix: '/messages/groups/'
            },
            wtexclamation: true,
            wtemoji: false,
            isParagraphDefault: false,
            isImageDefault: false,
            isBlockquoteDefault: false,
            isHrDefault: false,
            isStrongDefault: false,
            isEmDefault: false,
            isCodespanDefault: false,
            isCodeDefault: false,
            isDelDefault: false,
            isHtmlDefault: false,
            isTextEscape: true
        };
        this.hasClass = true;
    }
    set thyMarkdownPlanText(value) {
        if (value) {
            this.value = value;
            this.translateHTML();
        }
    }
    translateHTML() {
        liteMarked.setOptions(this.liteMarkedOptions);
        let _value = liteMarked.toHTML(this.value, this.liteMarkedOptions.highLightWords);
        _value = this.thyMarkdownParserService.sanitizeHTML(_value);
        this.elementRef.nativeElement.innerHTML = _value;
    }
    ngOnInit() {
        const emojisRender = this.thyMarkdownParserService.getEmojisRender();
        if (emojisRender) {
            this.liteMarkedOptions.wtemoji = true;
            this.liteMarkedOptions.wtemojiRender = emojisRender;
        }
        const _highLightWords = this.thyMarkdownParserService.setHighLightWords();
        if (_highLightWords && _highLightWords instanceof Array) {
            this.liteMarkedOptions.highLightWords = _highLightWords;
        }
        this.translateHTML();
    }
}
ThyMarkdownPlanTextParserDirective.ɵfac = function ThyMarkdownPlanTextParserDirective_Factory(t) { return new (t || ThyMarkdownPlanTextParserDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyMarkdownParserService)); };
ThyMarkdownPlanTextParserDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMarkdownPlanTextParserDirective, selectors: [["", "thyMarkdownPlanText", ""]], hostVars: 2, hostBindings: function ThyMarkdownPlanTextParserDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-markdown-plan-text", ctx.hasClass);
    } }, inputs: { thyMarkdownPlanText: "thyMarkdownPlanText" } });
ThyMarkdownPlanTextParserDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyMarkdownParserService }
];
ThyMarkdownPlanTextParserDirective.propDecorators = {
    thyMarkdownPlanText: [{ type: Input }],
    hasClass: [{ type: HostBinding, args: ['class.thy-markdown-plan-text',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownPlanTextParserDirective, [{
        type: Directive,
        args: [{
                selector: '[thyMarkdownPlanText]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ThyMarkdownParserService }]; }, { hasClass: [{
            type: HostBinding,
            args: ['class.thy-markdown-plan-text']
        }], thyMarkdownPlanText: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LW1hcmtkb3duLXRleHQtcGFyc2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21hcmtkb3duL3RoeS1tYXJrZG93bi10ZXh0LXBhcnNlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUs5QyxNQUFNLE9BQU8sa0NBQWtDO0FBQUcsSUEyRDlDLFlBQW9CLFVBQXNCLEVBQVUsd0JBQWtEO0FBQUksUUFBdEYsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQVMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtBQUFDLFFBMUQvRixVQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLFFBQ1ksV0FBTSxHQUFHLEVBQUUsQ0FBQztBQUN4QixRQUNZLHNCQUFpQixHQUFRO0FBQ3JDLFlBQVEsR0FBRyxFQUFFLElBQUk7QUFDakIsWUFBUSxNQUFNLEVBQUUsS0FBSztBQUNyQixZQUFRLE1BQU0sRUFBRSxJQUFJO0FBQ3BCLFlBQVEsUUFBUSxFQUFFLEtBQUs7QUFDdkIsWUFBUSxRQUFRLEVBQUUsS0FBSztBQUN2QixZQUFRLFVBQVUsRUFBRSxLQUFLO0FBQ3pCLFlBQVEsV0FBVyxFQUFFLEtBQUs7QUFDMUIsWUFBUSxPQUFPLEVBQUUsS0FBSztBQUN0QixZQUFRLElBQUksRUFBRSxLQUFLO0FBQ25CLFlBQVEsSUFBSSxFQUFFLEtBQUs7QUFDbkIsWUFBUSxNQUFNLEVBQUUsSUFBSTtBQUNwQixZQUFRLFVBQVUsRUFBRSxJQUFJO0FBQ3hCLFlBQVEsZ0JBQWdCLEVBQUU7QUFDMUIsZ0JBQVksU0FBUyxFQUFFLGtCQUFrQjtBQUN6Qyxh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b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBJbnB1dCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeU1hcmtkb3duUGFyc2VyU2VydmljZSB9IGZyb20gJy4vdGh5LW1hcmtkb3duLXBhcnNlci5zZXJ2aWNlJztcbmltcG9ydCB7IGxpdGVNYXJrZWQgfSBmcm9tICduZ3gtdGV0aHlzL3R5cGVzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdGh5TWFya2Rvd25QbGFuVGV4dF0nXG59KVxuZXhwb3J0IGNsYXNzIFRoeU1hcmtkb3duUGxhblRleHRQYXJzZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgdmFsdWUgPSAnJztcblxuICAgIHByaXZhdGUgcHJlZml4ID0gJyc7XG5cbiAgICBwcml2YXRlIGxpdGVNYXJrZWRPcHRpb25zOiBhbnkgPSB7XG4gICAgICAgIGdmbTogdHJ1ZSxcbiAgICAgICAgdGFibGVzOiBmYWxzZSxcbiAgICAgICAgYnJlYWtzOiB0cnVlLFxuICAgICAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgICAgIHNhbml0aXplOiBmYWxzZSxcbiAgICAgICAgc21hcnRMaXN0czogZmFsc2UsXG4gICAgICAgIHNtYXJ0eXBhbnRzOiBmYWxzZSxcbiAgICAgICAgaGVhZGluZzogZmFsc2UsXG4gICAgICAgIGxpbms6IGZhbHNlLFxuICAgICAgICBsaXN0OiBmYWxzZSxcbiAgICAgICAgd3RsaW5rOiB0cnVlLFxuICAgICAgICB3dGhleGNvbG9yOiB0cnVlLFxuICAgICAgICB3dGhleGNvbG9yUmVuZGVyOiB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtc2ctaW5saW5lLWNvbG9yJ1xuICAgICAgICB9LFxuICAgICAgICB3dGF0OiB0cnVlLFxuICAgICAgICB3dGF0UmVuZGVyOiB7XG4gICAgICAgICAgICBtZW1iZXJQcmVmaXg6IHRoaXMucHJlZml4LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnc2xpZGUtdHJpZ2dlcidcbiAgICAgICAgfSxcbiAgICAgICAgd3RoYXNoOiB0cnVlLFxuICAgICAgICB3dGVudGl0eTogdHJ1ZSxcbiAgICAgICAgd3RlbnRpdHlSZW5kZXI6IHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3NsaWRlLXRyaWdnZXInXG4gICAgICAgIH0sXG4gICAgICAgIHd0aGFzaFJlbmRlcjoge1xuICAgICAgICAgICAgY2hsUHJlZml4OiAnL21lc3NhZ2VzL2dyb3Vwcy8nXG4gICAgICAgIH0sXG4gICAgICAgIHd0ZXhjbGFtYXRpb246IHRydWUsXG4gICAgICAgIHd0ZW1vamk6IGZhbHNlLFxuICAgICAgICBpc1BhcmFncmFwaERlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBpc0ltYWdlRGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGlzQmxvY2txdW90ZURlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBpc0hyRGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGlzU3Ryb25nRGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGlzRW1EZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgaXNDb2Rlc3BhbkRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBpc0NvZGVEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgaXNEZWxEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgaXNIdG1sRGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGlzVGV4dEVzY2FwZTogdHJ1ZVxuICAgIH07XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlNYXJrZG93blBsYW5UZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZUhUTUwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudGh5LW1hcmtkb3duLXBsYW4tdGV4dCcpIGhhc0NsYXNzID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSB0aHlNYXJrZG93blBhcnNlclNlcnZpY2U6IFRoeU1hcmtkb3duUGFyc2VyU2VydmljZSkge31cblxuICAgIHRyYW5zbGF0ZUhUTUwoKSB7XG4gICAgICAgIGxpdGVNYXJrZWQuc2V0T3B0aW9ucyh0aGlzLmxpdGVNYXJrZWRPcHRpb25zKTtcbiAgICAgICAgbGV0IF92YWx1ZSA9IGxpdGVNYXJrZWQudG9IVE1MKHRoaXMudmFsdWUsIHRoaXMubGl0ZU1hcmtlZE9wdGlvbnMuaGlnaExpZ2h0V29yZHMpO1xuICAgICAgICBfdmFsdWUgPSB0aGlzLnRoeU1hcmtkb3duUGFyc2VyU2VydmljZS5zYW5pdGl6ZUhUTUwoX3ZhbHVlKTtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gX3ZhbHVlO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBjb25zdCBlbW9qaXNSZW5kZXIgPSB0aGlzLnRoeU1hcmtkb3duUGFyc2VyU2VydmljZS5nZXRFbW9qaXNSZW5kZXIoKTtcbiAgICAgICAgaWYgKGVtb2ppc1JlbmRlcikge1xuICAgICAgICAgICAgdGhpcy5saXRlTWFya2VkT3B0aW9ucy53dGVtb2ppID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubGl0ZU1hcmtlZE9wdGlvbnMud3RlbW9qaVJlbmRlciA9IGVtb2ppc1JlbmRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfaGlnaExpZ2h0V29yZHMgPSB0aGlzLnRoeU1hcmtkb3duUGFyc2VyU2VydmljZS5zZXRIaWdoTGlnaHRXb3JkcygpO1xuICAgICAgICBpZiAoX2hpZ2hMaWdodFdvcmRzICYmIF9oaWdoTGlnaHRXb3JkcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB0aGlzLmxpdGVNYXJrZWRPcHRpb25zLmhpZ2hMaWdodFdvcmRzID0gX2hpZ2hMaWdodFdvcmRzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhbnNsYXRlSFRNTCgpO1xuICAgIH1cbn1cbiJdfQ==
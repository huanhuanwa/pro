import { Directive, ElementRef, Input, HostBinding } from '@angular/core';
import { ThyMarkdownParserService } from './thy-markdown-parser.service';
import { liteMarked } from 'ngx-tethys/types';
export class ThyMarkdownPlanTextParserDirective {
    constructor(elementRef, thyMarkdownParserService) {
        this.elementRef = elementRef;
        this.thyMarkdownParserService = thyMarkdownParserService;
        this.value = '';
        this.prefix = '';
        this.liteMarkedOptions = {
            gfm: true,
            tables: false,
            breaks: true,
            pedantic: false,
            sanitize: false,
            smartLists: false,
            smartypants: false,
            heading: false,
            link: false,
            list: false,
            wtlink: true,
            wthexcolor: true,
            wthexcolorRender: {
                className: 'msg-inline-color'
            },
            wtat: true,
            wtatRender: {
                memberPrefix: this.prefix,
                className: 'slide-trigger'
            },
            wthash: true,
            wtentity: true,
            wtentityRender: {
                className: 'slide-trigger'
            },
            wthashRender: {
                chlPrefix: '/messages/groups/'
            },
            wtexclamation: true,
            wtemoji: false,
            isParagraphDefault: false,
            isImageDefault: false,
            isBlockquoteDefault: false,
            isHrDefault: false,
            isStrongDefault: false,
            isEmDefault: false,
            isCodespanDefault: false,
            isCodeDefault: false,
            isDelDefault: false,
            isHtmlDefault: false,
            isTextEscape: true
        };
        this.hasClass = true;
    }
    set thyMarkdownPlanText(value) {
        if (value) {
            this.value = value;
            this.translateHTML();
        }
    }
    translateHTML() {
        liteMarked.setOptions(this.liteMarkedOptions);
        let _value = liteMarked.toHTML(this.value, this.liteMarkedOptions.highLightWords);
        _value = this.thyMarkdownParserService.sanitizeHTML(_value);
        this.elementRef.nativeElement.innerHTML = _value;
    }
    ngOnInit() {
        const emojisRender = this.thyMarkdownParserService.getEmojisRender();
        if (emojisRender) {
            this.liteMarkedOptions.wtemoji = true;
            this.liteMarkedOptions.wtemojiRender = emojisRender;
        }
        const _highLightWords = this.thyMarkdownParserService.setHighLightWords();
        if (_highLightWords && _highLightWords instanceof Array) {
            this.liteMarkedOptions.highLightWords = _highLightWords;
        }
        this.translateHTML();
    }
}
ThyMarkdownPlanTextParserDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyMarkdownPlanText]'
            },] }
];
ThyMarkdownPlanTextParserDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyMarkdownParserService }
];
ThyMarkdownPlanTextParserDirective.propDecorators = {
    thyMarkdownPlanText: [{ type: Input }],
    hasClass: [{ type: HostBinding, args: ['class.thy-markdown-plan-text',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LW1hcmtkb3duLXRleHQtcGFyc2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYXJrZG93bi90aHktbWFya2Rvd24tdGV4dC1wYXJzZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFVLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBSzlDLE1BQU0sT0FBTyxrQ0FBa0M7SUEyRDNDLFlBQW9CLFVBQXNCLEVBQVUsd0JBQWtEO1FBQWxGLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBMUQ5RixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBRVgsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUVaLHNCQUFpQixHQUFRO1lBQzdCLEdBQUcsRUFBRSxJQUFJO1lBQ1QsTUFBTSxFQUFFLEtBQUs7WUFDYixNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLO1lBQ2YsUUFBUSxFQUFFLEtBQUs7WUFDZixVQUFVLEVBQUUsS0FBSztZQUNqQixXQUFXLEVBQUUsS0FBSztZQUNsQixPQUFPLEVBQUUsS0FBSztZQUNkLElBQUksRUFBRSxLQUFLO1lBQ1gsSUFBSSxFQUFFLEtBQUs7WUFDWCxNQUFNLEVBQUUsSUFBSTtZQUNaLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGdCQUFnQixFQUFFO2dCQUNkLFNBQVMsRUFBRSxrQkFBa0I7YUFDaEM7WUFDRCxJQUFJLEVBQUUsSUFBSTtZQUNWLFVBQVUsRUFBRTtnQkFDUixZQUFZLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBQ3pCLFNBQVMsRUFBRSxlQUFlO2FBQzdCO1lBQ0QsTUFBTSxFQUFFLElBQUk7WUFDWixRQUFRLEVBQUUsSUFBSTtZQUNkLGNBQWMsRUFBRTtnQkFDWixTQUFTLEVBQUUsZUFBZTthQUM3QjtZQUNELFlBQVksRUFBRTtnQkFDVixTQUFTLEVBQUUsbUJBQW1CO2FBQ2pDO1lBQ0QsYUFBYSxFQUFFLElBQUk7WUFDbkIsT0FBTyxFQUFFLEtBQUs7WUFDZCxrQkFBa0IsRUFBRSxLQUFLO1lBQ3pCLGNBQWMsRUFBRSxLQUFLO1lBQ3JCLG1CQUFtQixFQUFFLEtBQUs7WUFDMUIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsZUFBZSxFQUFFLEtBQUs7WUFDdEIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsaUJBQWlCLEVBQUUsS0FBSztZQUN4QixhQUFhLEVBQUUsS0FBSztZQUNwQixZQUFZLEVBQUUsS0FBSztZQUNuQixhQUFhLEVBQUUsS0FBSztZQUNwQixZQUFZLEVBQUUsSUFBSTtTQUNyQixDQUFDO1FBVTJDLGFBQVEsR0FBRyxJQUFJLENBQUM7SUFFNEMsQ0FBQztJQVYxRyxJQUNJLG1CQUFtQixDQUFDLEtBQWE7UUFDakMsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBTUQsYUFBYTtRQUNULFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUMsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNsRixNQUFNLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO0lBQ3JELENBQUM7SUFFRCxRQUFRO1FBQ0osTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3JFLElBQUksWUFBWSxFQUFFO1lBQ2QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDdEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7U0FDdkQ7UUFDRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUMxRSxJQUFJLGVBQWUsSUFBSSxlQUFlLFlBQVksS0FBSyxFQUFFO1lBQ3JELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDO1NBQzNEO1FBQ0QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7OztZQWxGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjthQUNwQzs7O1lBTm1CLFVBQVU7WUFDckIsd0JBQXdCOzs7a0NBdUQ1QixLQUFLO3VCQVFMLFdBQVcsU0FBQyw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE9uSW5pdCwgSW5wdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaHlNYXJrZG93blBhcnNlclNlcnZpY2UgfSBmcm9tICcuL3RoeS1tYXJrZG93bi1wYXJzZXIuc2VydmljZSc7XG5pbXBvcnQgeyBsaXRlTWFya2VkIH0gZnJvbSAnbmd4LXRldGh5cy90eXBlcyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeU1hcmtkb3duUGxhblRleHRdJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlNYXJrZG93blBsYW5UZXh0UGFyc2VyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIHZhbHVlID0gJyc7XG5cbiAgICBwcml2YXRlIHByZWZpeCA9ICcnO1xuXG4gICAgcHJpdmF0ZSBsaXRlTWFya2VkT3B0aW9uczogYW55ID0ge1xuICAgICAgICBnZm06IHRydWUsXG4gICAgICAgIHRhYmxlczogZmFsc2UsXG4gICAgICAgIGJyZWFrczogdHJ1ZSxcbiAgICAgICAgcGVkYW50aWM6IGZhbHNlLFxuICAgICAgICBzYW5pdGl6ZTogZmFsc2UsXG4gICAgICAgIHNtYXJ0TGlzdHM6IGZhbHNlLFxuICAgICAgICBzbWFydHlwYW50czogZmFsc2UsXG4gICAgICAgIGhlYWRpbmc6IGZhbHNlLFxuICAgICAgICBsaW5rOiBmYWxzZSxcbiAgICAgICAgbGlzdDogZmFsc2UsXG4gICAgICAgIHd0bGluazogdHJ1ZSxcbiAgICAgICAgd3RoZXhjb2xvcjogdHJ1ZSxcbiAgICAgICAgd3RoZXhjb2xvclJlbmRlcjoge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXNnLWlubGluZS1jb2xvcidcbiAgICAgICAgfSxcbiAgICAgICAgd3RhdDogdHJ1ZSxcbiAgICAgICAgd3RhdFJlbmRlcjoge1xuICAgICAgICAgICAgbWVtYmVyUHJlZml4OiB0aGlzLnByZWZpeCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3NsaWRlLXRyaWdnZXInXG4gICAgICAgIH0sXG4gICAgICAgIHd0aGFzaDogdHJ1ZSxcbiAgICAgICAgd3RlbnRpdHk6IHRydWUsXG4gICAgICAgIHd0ZW50aXR5UmVuZGVyOiB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdzbGlkZS10cmlnZ2VyJ1xuICAgICAgICB9LFxuICAgICAgICB3dGhhc2hSZW5kZXI6IHtcbiAgICAgICAgICAgIGNobFByZWZpeDogJy9tZXNzYWdlcy9ncm91cHMvJ1xuICAgICAgICB9LFxuICAgICAgICB3dGV4Y2xhbWF0aW9uOiB0cnVlLFxuICAgICAgICB3dGVtb2ppOiBmYWxzZSxcbiAgICAgICAgaXNQYXJhZ3JhcGhEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgaXNJbWFnZURlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBpc0Jsb2NrcXVvdGVEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgaXNIckRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBpc1N0cm9uZ0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBpc0VtRGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGlzQ29kZXNwYW5EZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgaXNDb2RlRGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGlzRGVsRGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGlzSHRtbERlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBpc1RleHRFc2NhcGU6IHRydWVcbiAgICB9O1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5TWFya2Rvd25QbGFuVGV4dCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVIVE1MKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1tYXJrZG93bi1wbGFuLXRleHQnKSBoYXNDbGFzcyA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgdGh5TWFya2Rvd25QYXJzZXJTZXJ2aWNlOiBUaHlNYXJrZG93blBhcnNlclNlcnZpY2UpIHt9XG5cbiAgICB0cmFuc2xhdGVIVE1MKCkge1xuICAgICAgICBsaXRlTWFya2VkLnNldE9wdGlvbnModGhpcy5saXRlTWFya2VkT3B0aW9ucyk7XG4gICAgICAgIGxldCBfdmFsdWUgPSBsaXRlTWFya2VkLnRvSFRNTCh0aGlzLnZhbHVlLCB0aGlzLmxpdGVNYXJrZWRPcHRpb25zLmhpZ2hMaWdodFdvcmRzKTtcbiAgICAgICAgX3ZhbHVlID0gdGhpcy50aHlNYXJrZG93blBhcnNlclNlcnZpY2Uuc2FuaXRpemVIVE1MKF92YWx1ZSk7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IF92YWx1ZTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgY29uc3QgZW1vamlzUmVuZGVyID0gdGhpcy50aHlNYXJrZG93blBhcnNlclNlcnZpY2UuZ2V0RW1vamlzUmVuZGVyKCk7XG4gICAgICAgIGlmIChlbW9qaXNSZW5kZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGl0ZU1hcmtlZE9wdGlvbnMud3RlbW9qaSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmxpdGVNYXJrZWRPcHRpb25zLnd0ZW1vamlSZW5kZXIgPSBlbW9qaXNSZW5kZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX2hpZ2hMaWdodFdvcmRzID0gdGhpcy50aHlNYXJrZG93blBhcnNlclNlcnZpY2Uuc2V0SGlnaExpZ2h0V29yZHMoKTtcbiAgICAgICAgaWYgKF9oaWdoTGlnaHRXb3JkcyAmJiBfaGlnaExpZ2h0V29yZHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgdGhpcy5saXRlTWFya2VkT3B0aW9ucy5oaWdoTGlnaHRXb3JkcyA9IF9oaWdoTGlnaHRXb3JkcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyYW5zbGF0ZUhUTUwoKTtcbiAgICB9XG59XG4iXX0=
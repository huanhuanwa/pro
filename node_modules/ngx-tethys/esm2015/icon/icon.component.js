import { Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Input, HostBinding, Renderer2 } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyIconRegistry } from './icon-registry';
import { take } from 'rxjs/operators';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { getWhetherPrintErrorWhenIconNotFound } from './config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from './icon-registry';

const _c0 = ["*"];
const iconSuffixMap = {
    fill: 'fill',
    twotone: 'tt'
};
export class ThyIconComponent {
    constructor(updateHostClassService, render, elementRef, iconRegistry) {
        this.updateHostClassService = updateHostClassService;
        this.render = render;
        this.elementRef = elementRef;
        this.iconRegistry = iconRegistry;
        this.className = true;
        this.isInitialized = false;
        this.iconType = 'outline';
        updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    ngOnInit() {
        this.updateClasses();
        this.isInitialized = true;
    }
    ngOnChanges(changes) {
        if (this.isInitialized) {
            if (changes['iconName'] || changes['iconSet'] || changes['iconTwotoneColor'] || changes['iconType']) {
                this.updateClasses();
            }
            else if (changes['iconRotate']) {
                this.setStyleRotate();
            }
        }
        if (changes['iconLegging']) {
            if (coerceBooleanProperty(this.iconLegging)) {
                this.updateHostClassService.addClass('thy-icon-legging');
            }
            else {
                this.updateHostClassService.removeClass('thy-icon-legging');
            }
        }
    }
    updateClasses() {
        const [namespace, iconName] = this.iconRegistry.splitIconName(this.iconName);
        if (iconName) {
            if (this.iconRegistry.iconMode === 'svg') {
                this.iconRegistry
                    .getSvgIcon(this.buildIconNameByType(iconName), namespace)
                    .pipe(take(1))
                    .subscribe(svg => this.setSvgElement(svg), (error) => {
                    if (getWhetherPrintErrorWhenIconNotFound()) {
                        console.error(`Error retrieving icon: ${error.message}`);
                    }
                });
                this.updateHostClassService.updateClass([
                    `thy-icon${namespace ? `-${namespace}` : ``}-${this.buildIconNameByType(iconName)}`
                ]);
            }
            else {
                const fontSetClass = this.iconSet
                    ? this.iconRegistry.getFontSetClassByAlias(this.iconSet)
                    : this.iconRegistry.getDefaultFontSetClass();
                this.updateHostClassService.updateClass([fontSetClass, `${fontSetClass}-${this.iconName}`]);
            }
        }
    }
    setStyleRotate() {
        if (this.iconRotate !== undefined) {
            this.render.setStyle(this.elementRef.nativeElement.querySelector('svg'), 'transform', `rotate(${this.iconRotate}deg)`);
        }
    }
    //#region svg element
    setSvgElement(svg) {
        this.clearSvgElement();
        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.
        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.
        const styleTags = svg.querySelectorAll('style');
        for (let i = 0; i < styleTags.length; i++) {
            styleTags[i].textContent += ' ';
        }
        if (this.iconType === 'twotone') {
            const allPaths = svg.querySelectorAll('path');
            if (allPaths.length > 1) {
                allPaths.forEach((child, index) => {
                    if (child.getAttribute('id').includes('secondary-color')) {
                        child.setAttribute('fill', this.iconTwotoneColor);
                    }
                });
            }
        }
        // Note: we do this fix here, rather than the icon registry, because the
        // references have to point to the URL at the time that the icon was created.
        // if (this._location) {
        //     const path = this._location.getPathname();
        //     this._previousPath = path;
        //     this._cacheChildrenWithExternalReferences(svg);
        //     this._prependPathToReferences(path);
        // }
        if (this.iconLinearGradient) {
            this.setBaseUrl(svg);
            this.clearTitleElement(svg);
        }
        this.elementRef.nativeElement.appendChild(svg);
        this.setStyleRotate();
    }
    clearSvgElement() {
        const layoutElement = this.elementRef.nativeElement;
        let childCount = layoutElement.childNodes.length;
        // if (this._elementsWithExternalReferences) {
        //     this._elementsWithExternalReferences.clear();
        // }
        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that
        // we can't use innerHTML, because IE will throw if the element has a data binding.
        while (childCount--) {
            const child = layoutElement.childNodes[childCount];
            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid
            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.
            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
                layoutElement.removeChild(child);
            }
        }
    }
    //#endregion
    buildIconNameByType(iconName) {
        if (this.iconType && ['fill', 'twotone'].indexOf(this.iconType) >= 0) {
            const suffix = iconSuffixMap[this.iconType];
            return iconName.includes(`-${suffix}`) ? iconName : `${iconName}-${suffix}`;
        }
        else {
            return iconName;
        }
    }
    /**
     * Support Safari SVG LinearGradient.
     *
     *
     * @param svg
     */
    setBaseUrl(svg) {
        const styleElements = svg.querySelectorAll('[style]');
        styleElements.forEach((n) => {
            if (n.style.cssText.includes('url')) {
                n.style.fill = n.style.fill.replace('url("', 'url("' + location.pathname);
            }
            if (n.style.cssText.includes('clip-path')) {
                n.style.clipPath = n.style.clipPath.replace('url("', 'url("' + location.pathname);
            }
        });
    }
    clearTitleElement(svg) {
        svg.querySelector('title').remove();
    }
}
ThyIconComponent.ɵfac = function ThyIconComponent_Factory(t) { return new (t || ThyIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyIconRegistry)); };
ThyIconComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyIconComponent, selectors: [["thy-icon"]], hostVars: 2, hostBindings: function ThyIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-icon", ctx.className);
    } }, inputs: { iconType: ["thyIconType", "iconType"], iconTwotoneColor: ["thyTwotoneColor", "iconTwotoneColor"], iconName: ["thyIconName", "iconName"], iconRotate: ["thyIconRotate", "iconRotate"], iconSet: ["thyIconSet", "iconSet"], iconLegging: ["thyIconLegging", "iconLegging"], iconLinearGradient: ["thyIconLinearGradient", "iconLinearGradient"] }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ThyIconComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ThyIconRegistry }
];
ThyIconComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-icon',] }],
    iconType: [{ type: Input, args: ['thyIconType',] }],
    iconTwotoneColor: [{ type: Input, args: ['thyTwotoneColor',] }],
    iconName: [{ type: Input, args: ['thyIconName',] }],
    iconRotate: [{ type: Input, args: ['thyIconRotate',] }],
    iconSet: [{ type: Input, args: ['thyIconSet',] }],
    iconLegging: [{ type: Input, args: ['thyIconLegging',] }],
    iconLinearGradient: [{ type: Input, args: ['thyIconLinearGradient',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyIconComponent, [{
        type: Component,
        args: [{
                selector: 'thy-icon',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ThyIconRegistry }]; }, { className: [{
            type: HostBinding,
            args: ['class.thy-icon']
        }], iconType: [{
            type: Input,
            args: ['thyIconType']
        }], iconTwotoneColor: [{
            type: Input,
            args: ['thyTwotoneColor']
        }], iconName: [{
            type: Input,
            args: ['thyIconName']
        }], iconRotate: [{
            type: Input,
            args: ['thyIconRotate']
        }], iconSet: [{
            type: Input,
            args: ['thyIconSet']
        }], iconLegging: [{
            type: Input,
            args: ['thyIconLegging']
        }], iconLinearGradient: [{
            type: Input,
            args: ['thyIconLinearGradient']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
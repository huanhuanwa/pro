import { Directive, ElementRef, HostListener, Input, Inject, ViewContainerRef, Output, EventEmitter } from '@angular/core';
import { coerceElement } from '@angular/cdk/coercion';
import { DOCUMENT } from '@angular/common';
import { TooltipService } from 'ngx-tethys/tooltip';
import { ThyNotifyService } from 'ngx-tethys/notify';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/tooltip';
import * as ɵngcc2 from 'ngx-tethys/notify';
export class ThyCopyDirective {
    constructor(document, tooltipService, elementRef, viewContainerRef, notifyService) {
        this.document = document;
        this.tooltipService = tooltipService;
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.notifyService = notifyService;
        // 默认为点击标签，可传复制目标标签
        this.thyCopy = new EventEmitter();
        this.thyCopySuccessText = '复制成功';
        this.thyCopyTips = '点击复制';
    }
    ngOnInit() {
        this.tooltipService.attach(this.elementRef, this.viewContainerRef, 'hover');
        this.tooltipService.thyTooltipDirective.content = this.thyCopyTips ? this.thyCopyTips : '点击复制';
    }
    getContent(event) {
        if (typeof this.thyCopyContent === 'string') {
            return this.thyCopyContent;
        }
        else {
            const target = this.thyCopyContent ? coerceElement(this.thyCopyContent) : event.target;
            return target.value || target.textContent;
        }
    }
    onClick(event) {
        const textarea = this.document.createElement('textarea');
        this.document.body.appendChild(textarea);
        textarea.value = this.getContent(event);
        textarea.select();
        try {
            document.execCommand('copy', false, null);
            this.thyCopy.emit({ isSuccess: true, event });
            this.notifyService.success(this.thyCopySuccessText);
        }
        catch (err) {
            this.thyCopy.emit({ isSuccess: false, event });
            this.notifyService.error('复制失败');
        }
        finally {
            textarea.remove();
        }
    }
    ngOnDestroy() {
        this.tooltipService.detach();
    }
}
ThyCopyDirective.ɵfac = function ThyCopyDirective_Factory(t) { return new (t || ThyCopyDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TooltipService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyNotifyService)); };
ThyCopyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyCopyDirective, selectors: [["", "thyCopy", ""]], hostBindings: function ThyCopyDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyCopyDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { thyCopySuccessText: "thyCopySuccessText", thyCopyTips: "thyCopyTips", thyCopyContent: "thyCopyContent" }, outputs: { thyCopy: "thyCopy" }, features: [ɵngcc0.ɵɵProvidersFeature([TooltipService, ThyNotifyService])] });
ThyCopyDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: TooltipService },
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: ThyNotifyService }
];
ThyCopyDirective.propDecorators = {
    thyCopy: [{ type: Output }],
    thyCopySuccessText: [{ type: Input }],
    thyCopyTips: [{ type: Input }],
    thyCopyContent: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCopyDirective, [{
        type: Directive,
        args: [{
                selector: '[thyCopy]',
                providers: [TooltipService, ThyNotifyService]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc1.TooltipService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc2.ThyNotifyService }]; }, { thyCopy: [{
            type: Output
        }], thyCopySuccessText: [{
            type: Input
        }], thyCopyTips: [{
            type: Input
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], thyCopyContent: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3B5L2NvcHkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUVWLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLGdCQUFnQixFQUVoQixNQUFNLEVBQ04sWUFBWSxFQUNmLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7O0FBV3JELE1BQU0sT0FBTyxnQkFBZ0I7QUFBRyxJQVU1QixZQUM4QixRQUFhLEVBQ2hDLGNBQThCLEVBQzdCLFVBQW1DLEVBQ25DLGdCQUFrQyxFQUNsQyxhQUErQjtBQUM1QyxRQUwrQixhQUFRLEdBQVIsUUFBUSxDQUFLO0FBQUMsUUFDakMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0FBQUMsUUFDOUIsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7QUFBQyxRQUNwQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFDbkMsa0JBQWEsR0FBYixhQUFhLENBQWtCO0FBQy9DLFFBZkksbUJBQW1CO0FBQ3ZCLFFBQWMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFnQixDQUFDO0FBQ3pELFFBQ2EsdUJBQWtCLEdBQUcsTUFBTSxDQUFDO0FBQ3pDLFFBQ2EsZ0JBQVcsR0FBRyxNQUFNLENBQUM7QUFDbEMsSUFTTyxDQUFDO0FBQ1IsSUFDSSxRQUFRO0FBQ1osUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNwRixRQUFRLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUN2RyxJQUFJLENBQUM7QUFDTCxJQUNZLFVBQVUsQ0FBQyxLQUFZO0FBQ25DLFFBQVEsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssUUFBUSxFQUFFO0FBQ3JELFlBQVksT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0FBQ3ZDLFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQ25HLFlBQVksT0FBTyxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDdEQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ1csT0FBTyxDQUFDLEtBQVk7QUFDL0IsUUFBUSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqRSxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqRCxRQUFRLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoRCxRQUFRLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMxQixRQUFRLElBQUk7QUFDWixZQUFZLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0RCxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzFELFlBQVksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDaEUsU0FBUztBQUFDLFFBQUEsT0FBTyxHQUFHLEVBQUU7QUFDdEIsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUMzRCxZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLFNBQVM7QUFBQyxnQkFBUTtBQUNsQixZQUFZLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUM5QixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQ2YsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3JDLElBQUksQ0FBQztBQUNMOzRDQXhEQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLFdBQVcsa0JBQ3JCLFNBQVMsRUFBRSxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxjQUNoRDs7OzJPQUNJO0FBQUM7QUFBMEMsNENBV3ZDLE1BQU0sU0FBQyxRQUFRO0FBQVMsWUF2QnhCLGNBQWM7QUFBSSxZQWJ2QixVQUFVO0FBQ1osWUFJRSxnQkFBZ0I7QUFDbEIsWUFRTyxnQkFBZ0I7QUFBRztBQUFHO0FBRW5CLHNCQVdQLE1BQU07QUFBSyxpQ0FFWCxLQUFLO0FBQUssMEJBRVYsS0FBSztBQUFLLDZCQUVWLEtBQUs7QUFBSyxzQkF1QlYsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIE9uSW5pdCxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5wdXQsXG4gICAgSW5qZWN0LFxuICAgIFZpZXdDb250YWluZXJSZWYsXG4gICAgT25EZXN0cm95LFxuICAgIE91dHB1dCxcbiAgICBFdmVudEVtaXR0ZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvZXJjZUVsZW1lbnQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgVG9vbHRpcFNlcnZpY2UgfSBmcm9tICduZ3gtdGV0aHlzL3Rvb2x0aXAnO1xuaW1wb3J0IHsgVGh5Tm90aWZ5U2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvbm90aWZ5JztcblxuZXhwb3J0IGludGVyZmFjZSBUaHlDb3B5RXZlbnQge1xuICAgIGlzU3VjY2VzczogYm9vbGVhbjtcbiAgICBldmVudDogRXZlbnQ7XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeUNvcHldJyxcbiAgICBwcm92aWRlcnM6IFtUb29sdGlwU2VydmljZSwgVGh5Tm90aWZ5U2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgVGh5Q29weURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICAvLyDpu5jorqTkuLrngrnlh7vmoIfnrb7vvIzlj6/kvKDlpI3liLbnm67moIfmoIfnrb5cbiAgICBAT3V0cHV0KCkgdGh5Q29weSA9IG5ldyBFdmVudEVtaXR0ZXI8VGh5Q29weUV2ZW50PigpO1xuXG4gICAgQElucHV0KCkgdGh5Q29weVN1Y2Nlc3NUZXh0ID0gJ+WkjeWItuaIkOWKnyc7XG5cbiAgICBASW5wdXQoKSB0aHlDb3B5VGlwcyA9ICfngrnlh7vlpI3liLYnO1xuXG4gICAgQElucHV0KCkgdGh5Q29weUNvbnRlbnQ6IHN0cmluZyB8IEVsZW1lbnRSZWYgfCBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnksXG4gICAgICAgIHB1YmxpYyB0b29sdGlwU2VydmljZTogVG9vbHRpcFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgcHJpdmF0ZSBub3RpZnlTZXJ2aWNlOiBUaHlOb3RpZnlTZXJ2aWNlXG4gICAgKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudG9vbHRpcFNlcnZpY2UuYXR0YWNoKHRoaXMuZWxlbWVudFJlZiwgdGhpcy52aWV3Q29udGFpbmVyUmVmLCAnaG92ZXInKTtcbiAgICAgICAgdGhpcy50b29sdGlwU2VydmljZS50aHlUb29sdGlwRGlyZWN0aXZlLmNvbnRlbnQgPSB0aGlzLnRoeUNvcHlUaXBzID8gdGhpcy50aHlDb3B5VGlwcyA6ICfngrnlh7vlpI3liLYnO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q29udGVudChldmVudDogRXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRoeUNvcHlDb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGh5Q29weUNvbnRlbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnRoeUNvcHlDb250ZW50ID8gY29lcmNlRWxlbWVudCh0aGlzLnRoeUNvcHlDb250ZW50KSA6IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQudmFsdWUgfHwgdGFyZ2V0LnRleHRDb250ZW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25DbGljayhldmVudDogRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGV4dGFyZWEgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgICAgIHRoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZXh0YXJlYSk7XG4gICAgICAgIHRleHRhcmVhLnZhbHVlID0gdGhpcy5nZXRDb250ZW50KGV2ZW50KTtcbiAgICAgICAgdGV4dGFyZWEuc2VsZWN0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScsIGZhbHNlLCBudWxsKTtcbiAgICAgICAgICAgIHRoaXMudGh5Q29weS5lbWl0KHsgaXNTdWNjZXNzOiB0cnVlLCBldmVudCB9KTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5U2VydmljZS5zdWNjZXNzKHRoaXMudGh5Q29weVN1Y2Nlc3NUZXh0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLnRoeUNvcHkuZW1pdCh7IGlzU3VjY2VzczogZmFsc2UsIGV2ZW50IH0pO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCflpI3liLblpLHotKUnKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRleHRhcmVhLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudG9vbHRpcFNlcnZpY2UuZGV0YWNoKCk7XG4gICAgfVxufVxuIl19
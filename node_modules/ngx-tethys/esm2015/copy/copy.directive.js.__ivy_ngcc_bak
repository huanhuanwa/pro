import { Directive, ElementRef, HostListener, Input, Inject, ViewContainerRef, Output, EventEmitter } from '@angular/core';
import { coerceElement } from '@angular/cdk/coercion';
import { DOCUMENT } from '@angular/common';
import { TooltipService } from 'ngx-tethys/tooltip';
import { ThyNotifyService } from 'ngx-tethys/notify';
export class ThyCopyDirective {
    constructor(document, tooltipService, elementRef, viewContainerRef, notifyService) {
        this.document = document;
        this.tooltipService = tooltipService;
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.notifyService = notifyService;
        // 默认为点击标签，可传复制目标标签
        this.thyCopy = new EventEmitter();
        this.thyCopySuccessText = '复制成功';
        this.thyCopyTips = '点击复制';
    }
    ngOnInit() {
        this.tooltipService.attach(this.elementRef, this.viewContainerRef, 'hover');
        this.tooltipService.thyTooltipDirective.content = this.thyCopyTips ? this.thyCopyTips : '点击复制';
    }
    getContent(event) {
        if (typeof this.thyCopyContent === 'string') {
            return this.thyCopyContent;
        }
        else {
            const target = this.thyCopyContent ? coerceElement(this.thyCopyContent) : event.target;
            return target.value || target.textContent;
        }
    }
    onClick(event) {
        const textarea = this.document.createElement('textarea');
        this.document.body.appendChild(textarea);
        textarea.value = this.getContent(event);
        textarea.select();
        try {
            document.execCommand('copy', false, null);
            this.thyCopy.emit({ isSuccess: true, event });
            this.notifyService.success(this.thyCopySuccessText);
        }
        catch (err) {
            this.thyCopy.emit({ isSuccess: false, event });
            this.notifyService.error('复制失败');
        }
        finally {
            textarea.remove();
        }
    }
    ngOnDestroy() {
        this.tooltipService.detach();
    }
}
ThyCopyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyCopy]',
                providers: [TooltipService, ThyNotifyService]
            },] }
];
ThyCopyDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: TooltipService },
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: ThyNotifyService }
];
ThyCopyDirective.propDecorators = {
    thyCopy: [{ type: Output }],
    thyCopySuccessText: [{ type: Input }],
    thyCopyTips: [{ type: Input }],
    thyCopyContent: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29weS9jb3B5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFFVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixnQkFBZ0IsRUFFaEIsTUFBTSxFQUNOLFlBQVksRUFDZixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQVdyRCxNQUFNLE9BQU8sZ0JBQWdCO0lBVXpCLFlBQzhCLFFBQWEsRUFDaEMsY0FBOEIsRUFDN0IsVUFBbUMsRUFDbkMsZ0JBQWtDLEVBQ2xDLGFBQStCO1FBSmIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUNoQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDN0IsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDbkMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFkM0MsbUJBQW1CO1FBQ1QsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFnQixDQUFDO1FBRTVDLHVCQUFrQixHQUFHLE1BQU0sQ0FBQztRQUU1QixnQkFBVyxHQUFHLE1BQU0sQ0FBQztJQVUzQixDQUFDO0lBRUosUUFBUTtRQUNKLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNuRyxDQUFDO0lBRU8sVUFBVSxDQUFDLEtBQVk7UUFDM0IsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssUUFBUSxFQUFFO1lBQ3pDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztTQUM5QjthQUFNO1lBQ0gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUN2RixPQUFPLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQztTQUM3QztJQUNMLENBQUM7SUFFTSxPQUFPLENBQUMsS0FBWTtRQUN2QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQixJQUFJO1lBQ0EsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3ZEO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQztnQkFBUztZQUNOLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNyQjtJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7WUF2REosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixTQUFTLEVBQUUsQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUM7YUFDaEQ7Ozs0Q0FZUSxNQUFNLFNBQUMsUUFBUTtZQXZCZixjQUFjO1lBYm5CLFVBQVU7WUFLVixnQkFBZ0I7WUFTWCxnQkFBZ0I7OztzQkFhcEIsTUFBTTtpQ0FFTixLQUFLOzBCQUVMLEtBQUs7NkJBRUwsS0FBSztzQkF1QkwsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgT25Jbml0LFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbnB1dCxcbiAgICBJbmplY3QsXG4gICAgVmlld0NvbnRhaW5lclJlZixcbiAgICBPbkRlc3Ryb3ksXG4gICAgT3V0cHV0LFxuICAgIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29lcmNlRWxlbWVudCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUb29sdGlwU2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvdG9vbHRpcCc7XG5pbXBvcnQgeyBUaHlOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnbmd4LXRldGh5cy9ub3RpZnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRoeUNvcHlFdmVudCB7XG4gICAgaXNTdWNjZXNzOiBib29sZWFuO1xuICAgIGV2ZW50OiBFdmVudDtcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdGh5Q29weV0nLFxuICAgIHByb3ZpZGVyczogW1Rvb2x0aXBTZXJ2aWNlLCBUaHlOb3RpZnlTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlDb3B5RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIC8vIOm7mOiupOS4uueCueWHu+agh+etvu+8jOWPr+S8oOWkjeWItuebruagh+agh+etvlxuICAgIEBPdXRwdXQoKSB0aHlDb3B5ID0gbmV3IEV2ZW50RW1pdHRlcjxUaHlDb3B5RXZlbnQ+KCk7XG5cbiAgICBASW5wdXQoKSB0aHlDb3B5U3VjY2Vzc1RleHQgPSAn5aSN5Yi25oiQ5YqfJztcblxuICAgIEBJbnB1dCgpIHRoeUNvcHlUaXBzID0gJ+eCueWHu+WkjeWItic7XG5cbiAgICBASW5wdXQoKSB0aHlDb3B5Q29udGVudDogc3RyaW5nIHwgRWxlbWVudFJlZiB8IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSxcbiAgICAgICAgcHVibGljIHRvb2x0aXBTZXJ2aWNlOiBUb29sdGlwU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IFRoeU5vdGlmeVNlcnZpY2VcbiAgICApIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy50b29sdGlwU2VydmljZS5hdHRhY2godGhpcy5lbGVtZW50UmVmLCB0aGlzLnZpZXdDb250YWluZXJSZWYsICdob3ZlcicpO1xuICAgICAgICB0aGlzLnRvb2x0aXBTZXJ2aWNlLnRoeVRvb2x0aXBEaXJlY3RpdmUuY29udGVudCA9IHRoaXMudGh5Q29weVRpcHMgPyB0aGlzLnRoeUNvcHlUaXBzIDogJ+eCueWHu+WkjeWItic7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDb250ZW50KGV2ZW50OiBFdmVudCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudGh5Q29weUNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aHlDb3B5Q29udGVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGh5Q29weUNvbnRlbnQgPyBjb2VyY2VFbGVtZW50KHRoaXMudGh5Q29weUNvbnRlbnQpIDogZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC52YWx1ZSB8fCB0YXJnZXQudGV4dENvbnRlbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbkNsaWNrKGV2ZW50OiBFdmVudCkge1xuICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgdGhpcy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRleHRhcmVhKTtcbiAgICAgICAgdGV4dGFyZWEudmFsdWUgPSB0aGlzLmdldENvbnRlbnQoZXZlbnQpO1xuICAgICAgICB0ZXh0YXJlYS5zZWxlY3QoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5JywgZmFsc2UsIG51bGwpO1xuICAgICAgICAgICAgdGhpcy50aHlDb3B5LmVtaXQoeyBpc1N1Y2Nlc3M6IHRydWUsIGV2ZW50IH0pO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3ModGhpcy50aHlDb3B5U3VjY2Vzc1RleHQpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMudGh5Q29weS5lbWl0KHsgaXNTdWNjZXNzOiBmYWxzZSwgZXZlbnQgfSk7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+WkjeWItuWksei0pScpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdGV4dGFyZWEucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy50b29sdGlwU2VydmljZS5kZXRhY2goKTtcbiAgICB9XG59XG4iXX0=
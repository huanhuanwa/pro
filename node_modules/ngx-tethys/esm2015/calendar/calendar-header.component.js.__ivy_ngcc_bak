import { fromUnixTime, getMonth, getYear } from 'date-fns';
import { endOfMonth, getUnixTime, startOfMonth, TinyDate } from 'ngx-tethys/util';
import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
export class ThyCalendarHeaderComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.className = true;
        // @Output() readonly modeChange: EventEmitter<'month' | 'year'> = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.monthChange = new EventEmitter();
        this.dateRangeChange = new EventEmitter();
        this.dateRanges = [
            {
                key: 'month',
                text: getYear(new Date()) + '年' + (getMonth(new Date()) + 1) + '月',
                begin: getUnixTime(startOfMonth(new Date())),
                end: getUnixTime(endOfMonth(new Date())),
                timestamp: {
                    interval: 1,
                    unit: 'month'
                }
            }
        ];
    }
    // @Input() mode: 'month' | 'year' = 'month';
    // @Input() fullscreen = true;
    set currentDate(value) {
        this.setDate(value);
    }
    ngOnInit() { }
    onChangeMonth(month) {
        const currentMonth = fromUnixTime(month.begin).getMonth();
        this.monthChange.emit(currentMonth);
    }
    onChangeYear(year) {
        const currentYear = fromUnixTime(year.begin).getFullYear();
        this.yearChange.emit(currentYear);
    }
    onChangeRange(dateRange) {
        this.isCurrentDate(this._currentDate);
        this.onChangeYear(dateRange);
        this.onChangeMonth(dateRange);
        this.dateRangeChange.emit(dateRange);
    }
    backToday() {
        this._currentDate = new TinyDate();
        this.date = Object.assign({}, this.dateRanges[0]);
        this.onChangeRange(this.date);
        this.cdr.detectChanges();
    }
    setDate(value) {
        this.isCurrentDate(value);
        if (this.isCurrent) {
            this._currentDate = value;
            const dateRange = Object.assign(Object.assign({}, this.dateRanges[0]), { key: 'exception', text: getYear(this._currentDate.nativeDate) + '年' + (getMonth(this._currentDate.nativeDate) + 1) + '月', begin: getUnixTime(startOfMonth(this._currentDate.nativeDate)), end: getUnixTime(endOfMonth(this._currentDate.nativeDate)) });
            this.date = dateRange;
        }
        else {
            this._currentDate = new TinyDate();
            this.date = Object.assign({}, this.dateRanges[0]);
        }
    }
    isCurrentDate(currentDate) {
        this.isCurrent = currentDate.getMonth() !== getMonth(new Date()) || currentDate.getYear() !== getYear(new Date());
    }
}
ThyCalendarHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-calendar-header',
                template: "<div class=\"thy-calendar-full-header-left\">\n  <thy-date-range\n    class=\"select-date-range\"\n    [ngModel]=\"date\"\n    [thyHiddenMenu]=\"true\"\n    [thyCustomKey]=\"'exception'\"\n    [thyPickerFormat]=\"'yyyy\u5E74MM\u6708'\"\n    (ngModelChange)=\"onChangeRange($event)\"\n  ></thy-date-range>\n  <button *ngIf=\"isCurrent\" thyButton=\"outline-default-square\" thySize=\"md\" (click)=\"backToday()\">\n    \u4ECA\u5929\n  </button>\n</div>\n<div class=\"thy-calendar-full-header-right\">\n  <ng-container *ngTemplateOutlet=\"$any(operationRender); context: { $implicit: operationRender }\">\n    <span>{{ operationRender | json }}</span>\n  </ng-container>\n</div>\n"
            },] }
];
ThyCalendarHeaderComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyCalendarHeaderComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-calendar-full-header-container',] }],
    currentDate: [{ type: Input }],
    operationRender: [{ type: Input }],
    yearChange: [{ type: Output }],
    monthChange: [{ type: Output }],
    dateRangeChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jYWxlbmRhci9jYWxlbmRhci1oZWFkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsVUFBVSxFQUFnQixXQUFXLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBTTVILE1BQU0sT0FBTywwQkFBMEI7SUF5Q25DLFlBQW9CLEdBQXNCO1FBQXRCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBeENlLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFhMUUsc0ZBQXNGO1FBRW5FLGVBQVUsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV0RCxnQkFBVyxHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXZELG9CQUFlLEdBQW9DLElBQUksWUFBWSxFQUFFLENBQUM7UUFFbEYsZUFBVSxHQUF3QjtZQUNyQztnQkFDSSxHQUFHLEVBQUUsT0FBTztnQkFDWixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUc7Z0JBQ2xFLEtBQUssRUFBRSxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDNUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QyxT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SCxDQUFDOzs7WUE3RkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLGtyQkFBK0M7YUFDbEQ7OztZQUxRLGlCQUFpQjs7O3dCQU9yQixXQUFXLFNBQUMsMENBQTBDOzBCQU10RCxLQUFLOzhCQUtMLEtBQUs7eUJBSUwsTUFBTTswQkFFTixNQUFNOzhCQUVOLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tVW5peFRpbWUsIGdldE1vbnRoLCBnZXRZZWFyIH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IHsgRGF0ZVJhbmdlSXRlbUluZm8gfSBmcm9tICduZ3gtdGV0aHlzL2RhdGUtcmFuZ2UnO1xuaW1wb3J0IHsgZW5kT2ZNb250aCwgRnVuY3Rpb25Qcm9wLCBnZXRVbml4VGltZSwgc3RhcnRPZk1vbnRoLCBUaW55RGF0ZSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktY2FsZW5kYXItaGVhZGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY2FsZW5kYXItaGVhZGVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlDYWxlbmRhckhlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktY2FsZW5kYXItZnVsbC1oZWFkZXItY29udGFpbmVyJykgY2xhc3NOYW1lID0gdHJ1ZTtcblxuICAgIC8vIEBJbnB1dCgpIG1vZGU6ICdtb250aCcgfCAneWVhcicgPSAnbW9udGgnO1xuXG4gICAgLy8gQElucHV0KCkgZnVsbHNjcmVlbiA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBjdXJyZW50RGF0ZSh2YWx1ZTogVGlueURhdGUpIHtcbiAgICAgICAgdGhpcy5zZXREYXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKSBvcGVyYXRpb25SZW5kZXI6IEZ1bmN0aW9uUHJvcDxUZW1wbGF0ZVJlZjxhbnk+PjtcblxuICAgIC8vIEBPdXRwdXQoKSByZWFkb25seSBtb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8J21vbnRoJyB8ICd5ZWFyJz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgeWVhckNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgbW9udGhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IGRhdGVSYW5nZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGVSYW5nZUl0ZW1JbmZvPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHB1YmxpYyBkYXRlUmFuZ2VzOiBEYXRlUmFuZ2VJdGVtSW5mb1tdID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdtb250aCcsXG4gICAgICAgICAgICB0ZXh0OiBnZXRZZWFyKG5ldyBEYXRlKCkpICsgJ+W5tCcgKyAoZ2V0TW9udGgobmV3IERhdGUoKSkgKyAxKSArICfmnIgnLFxuICAgICAgICAgICAgYmVnaW46IGdldFVuaXhUaW1lKHN0YXJ0T2ZNb250aChuZXcgRGF0ZSgpKSksXG4gICAgICAgICAgICBlbmQ6IGdldFVuaXhUaW1lKGVuZE9mTW9udGgobmV3IERhdGUoKSkpLFxuICAgICAgICAgICAgdGltZXN0YW1wOiB7XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWw6IDEsXG4gICAgICAgICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXTtcblxuICAgIHB1YmxpYyBkYXRlOiBEYXRlUmFuZ2VJdGVtSW5mbztcblxuICAgIHByaXZhdGUgX2N1cnJlbnREYXRlOiBUaW55RGF0ZTtcblxuICAgIHB1YmxpYyBpc0N1cnJlbnQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHt9XG5cbiAgICBvbkNoYW5nZU1vbnRoKG1vbnRoOiBEYXRlUmFuZ2VJdGVtSW5mbykge1xuICAgICAgICBjb25zdCBjdXJyZW50TW9udGggPSBmcm9tVW5peFRpbWUobW9udGguYmVnaW4pLmdldE1vbnRoKCk7XG4gICAgICAgIHRoaXMubW9udGhDaGFuZ2UuZW1pdChjdXJyZW50TW9udGgpO1xuICAgIH1cblxuICAgIG9uQ2hhbmdlWWVhcih5ZWFyOiBEYXRlUmFuZ2VJdGVtSW5mbykge1xuICAgICAgICBjb25zdCBjdXJyZW50WWVhciA9IGZyb21Vbml4VGltZSh5ZWFyLmJlZ2luKS5nZXRGdWxsWWVhcigpO1xuICAgICAgICB0aGlzLnllYXJDaGFuZ2UuZW1pdChjdXJyZW50WWVhcik7XG4gICAgfVxuXG4gICAgb25DaGFuZ2VSYW5nZShkYXRlUmFuZ2U6IERhdGVSYW5nZUl0ZW1JbmZvKSB7XG4gICAgICAgIHRoaXMuaXNDdXJyZW50RGF0ZSh0aGlzLl9jdXJyZW50RGF0ZSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2VZZWFyKGRhdGVSYW5nZSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2VNb250aChkYXRlUmFuZ2UpO1xuICAgICAgICB0aGlzLmRhdGVSYW5nZUNoYW5nZS5lbWl0KGRhdGVSYW5nZSk7XG4gICAgfVxuXG4gICAgYmFja1RvZGF5KCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50RGF0ZSA9IG5ldyBUaW55RGF0ZSgpO1xuICAgICAgICB0aGlzLmRhdGUgPSB7IC4uLnRoaXMuZGF0ZVJhbmdlc1swXSB9O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlUmFuZ2UodGhpcy5kYXRlKTtcbiAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIHNldERhdGUodmFsdWU6IFRpbnlEYXRlKSB7XG4gICAgICAgIHRoaXMuaXNDdXJyZW50RGF0ZSh2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLmlzQ3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudERhdGUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVSYW5nZSA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmRhdGVSYW5nZXNbMF0sXG4gICAgICAgICAgICAgICAga2V5OiAnZXhjZXB0aW9uJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBnZXRZZWFyKHRoaXMuX2N1cnJlbnREYXRlLm5hdGl2ZURhdGUpICsgJ+W5tCcgKyAoZ2V0TW9udGgodGhpcy5fY3VycmVudERhdGUubmF0aXZlRGF0ZSkgKyAxKSArICfmnIgnLFxuICAgICAgICAgICAgICAgIGJlZ2luOiBnZXRVbml4VGltZShzdGFydE9mTW9udGgodGhpcy5fY3VycmVudERhdGUubmF0aXZlRGF0ZSkpLFxuICAgICAgICAgICAgICAgIGVuZDogZ2V0VW5peFRpbWUoZW5kT2ZNb250aCh0aGlzLl9jdXJyZW50RGF0ZS5uYXRpdmVEYXRlKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBkYXRlUmFuZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50RGF0ZSA9IG5ldyBUaW55RGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5kYXRlID0geyAuLi50aGlzLmRhdGVSYW5nZXNbMF0gfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzQ3VycmVudERhdGUoY3VycmVudERhdGU6IFRpbnlEYXRlKSB7XG4gICAgICAgIHRoaXMuaXNDdXJyZW50ID0gY3VycmVudERhdGUuZ2V0TW9udGgoKSAhPT0gZ2V0TW9udGgobmV3IERhdGUoKSkgfHwgY3VycmVudERhdGUuZ2V0WWVhcigpICE9PSBnZXRZZWFyKG5ldyBEYXRlKCkpO1xuICAgIH1cbn1cbiJdfQ==
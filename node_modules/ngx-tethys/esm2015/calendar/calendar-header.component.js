import { fromUnixTime, getMonth, getYear } from 'date-fns';
import { endOfMonth, getUnixTime, startOfMonth, TinyDate } from 'ngx-tethys/util';
import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/date-range';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from 'ngx-tethys/button';

function ThyCalendarHeaderComponent_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function ThyCalendarHeaderComponent_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.backToday(); });
    ɵngcc0.ɵɵtext(1, " \u4ECA\u5929 ");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyCalendarHeaderComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r1.operationRender));
} }
const _c0 = function (a0) { return { $implicit: a0 }; };
export class ThyCalendarHeaderComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.className = true;
        // @Output() readonly modeChange: EventEmitter<'month' | 'year'> = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.monthChange = new EventEmitter();
        this.dateRangeChange = new EventEmitter();
        this.dateRanges = [
            {
                key: 'month',
                text: getYear(new Date()) + '年' + (getMonth(new Date()) + 1) + '月',
                begin: getUnixTime(startOfMonth(new Date())),
                end: getUnixTime(endOfMonth(new Date())),
                timestamp: {
                    interval: 1,
                    unit: 'month'
                }
            }
        ];
    }
    // @Input() mode: 'month' | 'year' = 'month';
    // @Input() fullscreen = true;
    set currentDate(value) {
        this.setDate(value);
    }
    ngOnInit() { }
    onChangeMonth(month) {
        const currentMonth = fromUnixTime(month.begin).getMonth();
        this.monthChange.emit(currentMonth);
    }
    onChangeYear(year) {
        const currentYear = fromUnixTime(year.begin).getFullYear();
        this.yearChange.emit(currentYear);
    }
    onChangeRange(dateRange) {
        this.isCurrentDate(this._currentDate);
        this.onChangeYear(dateRange);
        this.onChangeMonth(dateRange);
        this.dateRangeChange.emit(dateRange);
    }
    backToday() {
        this._currentDate = new TinyDate();
        this.date = Object.assign({}, this.dateRanges[0]);
        this.onChangeRange(this.date);
        this.cdr.detectChanges();
    }
    setDate(value) {
        this.isCurrentDate(value);
        if (this.isCurrent) {
            this._currentDate = value;
            const dateRange = Object.assign(Object.assign({}, this.dateRanges[0]), { key: 'exception', text: getYear(this._currentDate.nativeDate) + '年' + (getMonth(this._currentDate.nativeDate) + 1) + '月', begin: getUnixTime(startOfMonth(this._currentDate.nativeDate)), end: getUnixTime(endOfMonth(this._currentDate.nativeDate)) });
            this.date = dateRange;
        }
        else {
            this._currentDate = new TinyDate();
            this.date = Object.assign({}, this.dateRanges[0]);
        }
    }
    isCurrentDate(currentDate) {
        this.isCurrent = currentDate.getMonth() !== getMonth(new Date()) || currentDate.getYear() !== getYear(new Date());
    }
}
ThyCalendarHeaderComponent.ɵfac = function ThyCalendarHeaderComponent_Factory(t) { return new (t || ThyCalendarHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyCalendarHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyCalendarHeaderComponent, selectors: [["thy-calendar-header"]], hostVars: 2, hostBindings: function ThyCalendarHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-calendar-full-header-container", ctx.className);
    } }, inputs: { currentDate: "currentDate", operationRender: "operationRender" }, outputs: { yearChange: "yearChange", monthChange: "monthChange", dateRangeChange: "dateRangeChange" }, decls: 5, vars: 9, consts: [[1, "thy-calendar-full-header-left"], [1, "select-date-range", 3, "ngModel", "thyHiddenMenu", "thyCustomKey", "thyPickerFormat", "ngModelChange"], ["thyButton", "outline-default-square", "thySize", "md", 3, "click", 4, "ngIf"], [1, "thy-calendar-full-header-right"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["thyButton", "outline-default-square", "thySize", "md", 3, "click"]], template: function ThyCalendarHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "thy-date-range", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function ThyCalendarHeaderComponent_Template_thy_date_range_ngModelChange_1_listener($event) { return ctx.onChangeRange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, ThyCalendarHeaderComponent_button_2_Template, 2, 0, "button", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ThyCalendarHeaderComponent_ng_container_4_Template, 4, 3, "ng-container", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.date)("thyHiddenMenu", true)("thyCustomKey", "exception")("thyPickerFormat", "yyyy\u5E74MM\u6708");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isCurrent);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.operationRender)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(7, _c0, ctx.operationRender));
    } }, directives: [ɵngcc1.ThyDateRangeComponent, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.ThyButtonComponent], pipes: [ɵngcc3.JsonPipe], encapsulation: 2 });
ThyCalendarHeaderComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyCalendarHeaderComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-calendar-full-header-container',] }],
    currentDate: [{ type: Input }],
    operationRender: [{ type: Input }],
    yearChange: [{ type: Output }],
    monthChange: [{ type: Output }],
    dateRangeChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCalendarHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'thy-calendar-header',
                template: "<div class=\"thy-calendar-full-header-left\">\n  <thy-date-range\n    class=\"select-date-range\"\n    [ngModel]=\"date\"\n    [thyHiddenMenu]=\"true\"\n    [thyCustomKey]=\"'exception'\"\n    [thyPickerFormat]=\"'yyyy\u5E74MM\u6708'\"\n    (ngModelChange)=\"onChangeRange($event)\"\n  ></thy-date-range>\n  <button *ngIf=\"isCurrent\" thyButton=\"outline-default-square\" thySize=\"md\" (click)=\"backToday()\">\n    \u4ECA\u5929\n  </button>\n</div>\n<div class=\"thy-calendar-full-header-right\">\n  <ng-container *ngTemplateOutlet=\"$any(operationRender); context: { $implicit: operationRender }\">\n    <span>{{ operationRender | json }}</span>\n  </ng-container>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { className: [{
            type: HostBinding,
            args: ['class.thy-calendar-full-header-container']
        }], yearChange: [{
            type: Output
        }], monthChange: [{
            type: Output
        }], dateRangeChange: [{
            type: Output
        }], currentDate: [{
            type: Input
        }], operationRender: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
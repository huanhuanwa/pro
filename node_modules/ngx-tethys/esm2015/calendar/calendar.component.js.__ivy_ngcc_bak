import { __decorate, __metadata } from "tslib";
import { InputBoolean } from 'ngx-tethys/core';
import { TinyDate } from 'ngx-tethys/util';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, forwardRef, HostBinding, Input, Output, TemplateRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThyCalendarHeaderOperationDirective as HeaderOperation, ThyDateCellDirective as DateCell } from './calendar-cells';
export class ThyCalendarComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.className = true;
        this.className1 = true;
        // @HostBinding('class.thy-pick-calendar-mini') className2 = !thyFullscreen;
        this.thyMode = 'month';
        this.thyModeChange = new EventEmitter();
        this.thyPanelChange = new EventEmitter();
        this.thySelectChange = new EventEmitter();
        this.thyValueChange = new EventEmitter();
        this.thyDateRangeChange = new EventEmitter();
        this.thyFullscreen = true;
        this.currentDate = new TinyDate();
        this.prefixCls = 'thy-calendar-full';
        this.onChangeFn = () => { };
        this.onTouchFn = () => { };
    }
    get dateCell() {
        return (this.thyDateCell || this.thyDateCellChild);
    }
    get headerOperation() {
        return (this.thyCalendarHeaderOperation || this.thyCalendarHeaderOperationChild);
    }
    ngOnInit() { }
    // onModeChange(mode: CalendarMode): void {
    //     this.thyModeChange.emit(mode);
    //     this.thyPanelChange.emit({ date: this.currentDate.nativeDate, mode });
    // }
    onYearSelect(year) {
        const date = this.currentDate.setYear(year);
        this.updateDate(date);
    }
    onMonthSelect(month) {
        const date = this.currentDate.setMonth(month);
        this.updateDate(date);
    }
    onDateSelect(date) {
        // Only currentDate is enough in calendar
        // this.value = date;
        this.updateDate(date);
    }
    onDateRangeSelect(date) {
        this.thyDateRangeChange.emit(date);
    }
    writeValue(value) {
        this.updateDate(new TinyDate(value), false);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchFn = fn;
    }
    updateDate(date, touched = true) {
        this.currentDate = date;
        if (touched) {
            this.onChangeFn(date.nativeDate);
            this.onTouchFn();
            this.thySelectChange.emit(date.nativeDate);
            this.thyValueChange.emit(date.nativeDate);
        }
    }
    ngOnChanges(changes) {
        if (changes.thyValue) {
            this.updateDate(new TinyDate(this.thyValue), false);
        }
    }
}
ThyCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-calendar',
                template: "<thy-calendar-header\n  [operationRender]=\"headerOperation\"\n  (monthChange)=\"onMonthSelect($event)\"\n  (yearChange)=\"onYearSelect($event)\"\n  (dateRangeChange)=\"onDateRangeSelect($event)\"\n  [currentDate]=\"currentDate\"\n></thy-calendar-header>\n\n<div class=\"thy-calendar-panel\">\n  <div class=\"thy-calendar-{{ thyMode === 'month' ? 'date' : 'month' }}-panel\">\n    <div class=\"thy-calendar-body\">\n      <ng-container *ngIf=\"thyMode === 'month'; then monthModeTable; else yearModeTable\"></ng-container>\n    </div>\n  </div>\n</div>\n<ng-template #monthModeTable>\n  <date-table\n    [prefixCls]=\"prefixCls\"\n    [value]=\"currentDate\"\n    [selectedValue]=\"currentDate\"\n    [dateCellRender]=\"dateCell\"\n    [disabledDate]=\"thyDisabledDate\"\n    (valueChange)=\"onDateSelect($event)\"\n  ></date-table>\n</ng-template>\n\n<ng-template #yearModeTable>\n  <month-table [value]=\"currentDate\" (valueChange)=\"onDateSelect($event)\"></month-table>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ThyCalendarComponent), multi: true }]
            },] }
];
ThyCalendarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyCalendarComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-calendar-container',] }],
    className1: [{ type: HostBinding, args: ['class.thy-calendar-full',] }],
    thyMode: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyDisabledDate: [{ type: Input }],
    thyModeChange: [{ type: Output }],
    thyPanelChange: [{ type: Output }],
    thySelectChange: [{ type: Output }],
    thyValueChange: [{ type: Output }],
    thyDateRangeChange: [{ type: Output }],
    thyDateCell: [{ type: Input }],
    thyDateCellChild: [{ type: ContentChild, args: [DateCell, { read: TemplateRef },] }],
    thyCalendarHeaderOperation: [{ type: Input }],
    thyCalendarHeaderOperationChild: [{ type: ContentChild, args: [HeaderOperation, { read: TemplateRef },] }],
    thyFullscreen: [{ type: Input }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThyCalendarComponent.prototype, "thyFullscreen", void 0);
//# sourceMappingURL=data:application/json;base64,
import { __decorate, __metadata } from "tslib";
import { InputBoolean } from 'ngx-tethys/core';
import { TinyDate } from 'ngx-tethys/util';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, forwardRef, HostBinding, Input, Output, TemplateRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThyCalendarHeaderOperationDirective as HeaderOperation, ThyDateCellDirective as DateCell } from './calendar-cells';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './calendar-header.component';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/date-picker';

function ThyCalendarComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ThyCalendarComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "date-table", 6);
    ɵngcc0.ɵɵlistener("valueChange", function ThyCalendarComponent_ng_template_5_Template_date_table_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onDateSelect($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("prefixCls", ctx_r2.prefixCls)("value", ctx_r2.currentDate)("selectedValue", ctx_r2.currentDate)("dateCellRender", ctx_r2.dateCell)("disabledDate", ctx_r2.thyDisabledDate);
} }
function ThyCalendarComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "month-table", 7);
    ɵngcc0.ɵɵlistener("valueChange", function ThyCalendarComponent_ng_template_7_Template_month_table_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onDateSelect($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r4.currentDate);
} }
export class ThyCalendarComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.className = true;
        this.className1 = true;
        // @HostBinding('class.thy-pick-calendar-mini') className2 = !thyFullscreen;
        this.thyMode = 'month';
        this.thyModeChange = new EventEmitter();
        this.thyPanelChange = new EventEmitter();
        this.thySelectChange = new EventEmitter();
        this.thyValueChange = new EventEmitter();
        this.thyDateRangeChange = new EventEmitter();
        this.thyFullscreen = true;
        this.currentDate = new TinyDate();
        this.prefixCls = 'thy-calendar-full';
        this.onChangeFn = () => { };
        this.onTouchFn = () => { };
    }
    get dateCell() {
        return (this.thyDateCell || this.thyDateCellChild);
    }
    get headerOperation() {
        return (this.thyCalendarHeaderOperation || this.thyCalendarHeaderOperationChild);
    }
    ngOnInit() { }
    // onModeChange(mode: CalendarMode): void {
    //     this.thyModeChange.emit(mode);
    //     this.thyPanelChange.emit({ date: this.currentDate.nativeDate, mode });
    // }
    onYearSelect(year) {
        const date = this.currentDate.setYear(year);
        this.updateDate(date);
    }
    onMonthSelect(month) {
        const date = this.currentDate.setMonth(month);
        this.updateDate(date);
    }
    onDateSelect(date) {
        // Only currentDate is enough in calendar
        // this.value = date;
        this.updateDate(date);
    }
    onDateRangeSelect(date) {
        this.thyDateRangeChange.emit(date);
    }
    writeValue(value) {
        this.updateDate(new TinyDate(value), false);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchFn = fn;
    }
    updateDate(date, touched = true) {
        this.currentDate = date;
        if (touched) {
            this.onChangeFn(date.nativeDate);
            this.onTouchFn();
            this.thySelectChange.emit(date.nativeDate);
            this.thyValueChange.emit(date.nativeDate);
        }
    }
    ngOnChanges(changes) {
        if (changes.thyValue) {
            this.updateDate(new TinyDate(this.thyValue), false);
        }
    }
}
ThyCalendarComponent.ɵfac = function ThyCalendarComponent_Factory(t) { return new (t || ThyCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyCalendarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyCalendarComponent, selectors: [["thy-calendar"]], contentQueries: function ThyCalendarComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DateCell, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderOperation, true, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thyDateCellChild = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thyCalendarHeaderOperationChild = _t.first);
    } }, hostVars: 4, hostBindings: function ThyCalendarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-calendar-container", ctx.className)("thy-calendar-full", ctx.className1);
    } }, inputs: { thyMode: "thyMode", thyFullscreen: "thyFullscreen", thyValue: "thyValue", thyDisabledDate: "thyDisabledDate", thyDateCell: "thyDateCell", thyCalendarHeaderOperation: "thyCalendarHeaderOperation" }, outputs: { thyModeChange: "thyModeChange", thyPanelChange: "thyPanelChange", thySelectChange: "thySelectChange", thyValueChange: "thyValueChange", thyDateRangeChange: "thyDateRangeChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ThyCalendarComponent), multi: true }]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 9, vars: 8, consts: [[3, "operationRender", "currentDate", "monthChange", "yearChange", "dateRangeChange"], [1, "thy-calendar-panel"], [1, "thy-calendar-body"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["monthModeTable", ""], ["yearModeTable", ""], [3, "prefixCls", "value", "selectedValue", "dateCellRender", "disabledDate", "valueChange"], [3, "value", "valueChange"]], template: function ThyCalendarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "thy-calendar-header", 0);
        ɵngcc0.ɵɵlistener("monthChange", function ThyCalendarComponent_Template_thy_calendar_header_monthChange_0_listener($event) { return ctx.onMonthSelect($event); })("yearChange", function ThyCalendarComponent_Template_thy_calendar_header_yearChange_0_listener($event) { return ctx.onYearSelect($event); })("dateRangeChange", function ThyCalendarComponent_Template_thy_calendar_header_dateRangeChange_0_listener($event) { return ctx.onDateRangeSelect($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵtemplate(4, ThyCalendarComponent_ng_container_4_Template, 1, 0, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, ThyCalendarComponent_ng_template_5_Template, 1, 5, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(7, ThyCalendarComponent_ng_template_7_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(6);
        const _r3 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵproperty("operationRender", ctx.headerOperation)("currentDate", ctx.currentDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassMapInterpolate1("thy-calendar-", ctx.thyMode === "month" ? "date" : "month", "-panel");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyMode === "month")("ngIfThen", _r1)("ngIfElse", _r3);
    } }, directives: [ɵngcc1.ThyCalendarHeaderComponent, ɵngcc2.NgIf, ɵngcc3.DateTableComponent, ɵngcc3.MonthTableComponent], encapsulation: 2, changeDetection: 0 });
ThyCalendarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyCalendarComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class.thy-calendar-container',] }],
    className1: [{ type: HostBinding, args: ['class.thy-calendar-full',] }],
    thyMode: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyDisabledDate: [{ type: Input }],
    thyModeChange: [{ type: Output }],
    thyPanelChange: [{ type: Output }],
    thySelectChange: [{ type: Output }],
    thyValueChange: [{ type: Output }],
    thyDateRangeChange: [{ type: Output }],
    thyDateCell: [{ type: Input }],
    thyDateCellChild: [{ type: ContentChild, args: [DateCell, { read: TemplateRef },] }],
    thyCalendarHeaderOperation: [{ type: Input }],
    thyCalendarHeaderOperationChild: [{ type: ContentChild, args: [HeaderOperation, { read: TemplateRef },] }],
    thyFullscreen: [{ type: Input }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThyCalendarComponent.prototype, "thyFullscreen", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCalendarComponent, [{
        type: Component,
        args: [{
                selector: 'thy-calendar',
                template: "<thy-calendar-header\n  [operationRender]=\"headerOperation\"\n  (monthChange)=\"onMonthSelect($event)\"\n  (yearChange)=\"onYearSelect($event)\"\n  (dateRangeChange)=\"onDateRangeSelect($event)\"\n  [currentDate]=\"currentDate\"\n></thy-calendar-header>\n\n<div class=\"thy-calendar-panel\">\n  <div class=\"thy-calendar-{{ thyMode === 'month' ? 'date' : 'month' }}-panel\">\n    <div class=\"thy-calendar-body\">\n      <ng-container *ngIf=\"thyMode === 'month'; then monthModeTable; else yearModeTable\"></ng-container>\n    </div>\n  </div>\n</div>\n<ng-template #monthModeTable>\n  <date-table\n    [prefixCls]=\"prefixCls\"\n    [value]=\"currentDate\"\n    [selectedValue]=\"currentDate\"\n    [dateCellRender]=\"dateCell\"\n    [disabledDate]=\"thyDisabledDate\"\n    (valueChange)=\"onDateSelect($event)\"\n  ></date-table>\n</ng-template>\n\n<ng-template #yearModeTable>\n  <month-table [value]=\"currentDate\" (valueChange)=\"onDateSelect($event)\"></month-table>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ThyCalendarComponent), multi: true }]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { className: [{
            type: HostBinding,
            args: ['class.thy-calendar-container']
        }], className1: [{
            type: HostBinding,
            args: ['class.thy-calendar-full']
        }], thyMode: [{
            type: Input
        }], thyModeChange: [{
            type: Output
        }], thyPanelChange: [{
            type: Output
        }], thySelectChange: [{
            type: Output
        }], thyValueChange: [{
            type: Output
        }], thyDateRangeChange: [{
            type: Output
        }], thyFullscreen: [{
            type: Input
        }], thyValue: [{
            type: Input
        }], thyDisabledDate: [{
            type: Input
        }], thyDateCell: [{
            type: Input
        }], thyDateCellChild: [{
            type: ContentChild,
            args: [DateCell, { read: TemplateRef }]
        }], thyCalendarHeaderOperation: [{
            type: Input
        }], thyCalendarHeaderOperationChild: [{
            type: ContentChild,
            args: [HeaderOperation, { read: TemplateRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
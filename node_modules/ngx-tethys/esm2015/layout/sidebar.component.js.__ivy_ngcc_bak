import { Component, HostBinding, Host, Optional, Input, ViewChild, Renderer2, ElementRef, NgZone } from '@angular/core';
import { ThyLayoutComponent } from './layout.component';
import { coerceBooleanProperty } from 'ngx-tethys/util';
const LG_WIDTH = 300;
export class ThySidebarComponent {
    constructor(thyLayoutComponent, renderer, elementRef, ngZone) {
        this.thyLayoutComponent = thyLayoutComponent;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.thyLayoutSidebarClass = true;
        this.thyLayoutSidebarClearBorderRightClass = false;
        this.sidebarIsolated = false;
    }
    set thyWidth(value) {
        if (value === 'lg') {
            value = LG_WIDTH;
        }
        this.thyLayoutSidebarWidth = value;
        this.widthPassive = value;
    }
    set thyHasBorderRight(value) {
        this.thyLayoutSidebarClearBorderRightClass = !coerceBooleanProperty(value);
    }
    set thyIsolated(value) {
        this.sidebarIsolated = coerceBooleanProperty(value);
    }
    set thyIsDraggableWidth(value) {
        if (coerceBooleanProperty(value)) {
            this.thyLayoutSidebarPointerEvents = 'all';
        }
    }
    ngOnInit() {
        if (this.thyLayoutComponent) {
            this.thyLayoutComponent.hasSidebar = true;
        }
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                this.widthPassive = this.elementRef.nativeElement.clientWidth;
                this.renderer.setStyle(this.dragRef.nativeElement, 'left', this.numberConvertToFloor(this.widthPassive) + 'px');
            }, 0);
        });
    }
    dragStartedHandler() {
        this.dragStartedX = this.dragRef.nativeElement.getBoundingClientRect().x;
    }
    dragEndedHandler() {
        const x = this.dragRef.nativeElement.getBoundingClientRect().x;
        this.widthPassive = this.numberConvertToFloor(this.widthPassive * 1 + (x - this.dragStartedX));
        this.thyLayoutSidebarWidth = this.widthPassive;
    }
    numberConvertToFloor(value) {
        let result = Math.floor(value * 1);
        if (result < 1) {
            result = 1;
        }
        return result;
    }
}
ThySidebarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-sidebar',
                preserveWhitespaces: false,
                template: `
        <ng-content></ng-content>
        <div
            class="sidebar-drag"
            #dragRef
            cdkDrag
            cdkDragLockAxis="x"
            cdkDragBoundary=".thy-layout"
            (cdkDragStarted)="dragStartedHandler()"
            (cdkDragEnded)="dragEndedHandler()"
        ></div>
    `
            },] }
];
ThySidebarComponent.ctorParameters = () => [
    { type: ThyLayoutComponent, decorators: [{ type: Optional }, { type: Host }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone }
];
ThySidebarComponent.propDecorators = {
    thyLayoutSidebarClass: [{ type: HostBinding, args: ['class.thy-layout-sidebar',] }],
    thyLayoutSidebarClearBorderRightClass: [{ type: HostBinding, args: ['class.thy-layout-sidebar--clear-border-right',] }],
    thyLayoutSidebarWidth: [{ type: HostBinding, args: ['style.width.px',] }],
    thyLayoutSidebarPointerEvents: [{ type: HostBinding, args: ['style.pointer-events',] }],
    sidebarIsolated: [{ type: HostBinding, args: ['class.thy-layout-sidebar-isolated',] }],
    thyWidth: [{ type: Input, args: ['thyWidth',] }],
    thyHasBorderRight: [{ type: Input, args: ['thyHasBorderRight',] }],
    thyIsolated: [{ type: Input, args: ['thyIsolated',] }],
    thyIsDraggableWidth: [{ type: Input, args: ['thyIsDraggableWidth',] }],
    dragRef: [{ type: ViewChild, args: ['dragRef', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGF5b3V0L3NpZGViYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQVUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUM7QUFpQnJCLE1BQU0sT0FBTyxtQkFBbUI7SUEwQzVCLFlBQ2dDLGtCQUFzQyxFQUMxRCxRQUFtQixFQUNuQixVQUFzQixFQUN0QixNQUFjO1FBSE0sdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUMxRCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQTdDZSwwQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFFVCwwQ0FBcUMsR0FBRyxLQUFLLENBQUM7UUFLekQsb0JBQWUsR0FBRyxLQUFLLENBQUM7SUF1Q3ZFLENBQUM7SUFyQ0osSUFDSSxRQUFRLENBQUMsS0FBVTtRQUNuQixJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDaEIsS0FBSyxHQUFHLFFBQVEsQ0FBQztTQUNwQjtRQUNELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQUM7UUFDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQ0ksaUJBQWlCLENBQUMsS0FBYTtRQUMvQixJQUFJLENBQUMscUNBQXFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQsSUFDSSxXQUFXLENBQUMsS0FBYTtRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUNJLG1CQUFtQixDQUFDLEtBQVU7UUFDOUIsSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsNkJBQTZCLEdBQUcsS0FBSyxDQUFDO1NBQzlDO0lBQ0wsQ0FBQztJQWVELFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUN6QixJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUM3QztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQy9CLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7Z0JBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ3BILENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNWLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGtCQUFrQjtRQUNkLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELGdCQUFnQjtRQUNaLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQy9GLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQ25ELENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxLQUFzQjtRQUMvQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLEtBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QyxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDWixNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7WUE3RkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0tBV1Q7YUFDSjs7O1lBbkJRLGtCQUFrQix1QkErRGxCLFFBQVEsWUFBSSxJQUFJO1lBaEVrRCxTQUFTO1lBQUUsVUFBVTtZQUFFLE1BQU07OztvQ0FzQm5HLFdBQVcsU0FBQywwQkFBMEI7b0RBRXRDLFdBQVcsU0FBQyw4Q0FBOEM7b0NBRTFELFdBQVcsU0FBQyxnQkFBZ0I7NENBQzVCLFdBQVcsU0FBQyxzQkFBc0I7OEJBRWxDLFdBQVcsU0FBQyxtQ0FBbUM7dUJBRS9DLEtBQUssU0FBQyxVQUFVO2dDQVNoQixLQUFLLFNBQUMsbUJBQW1COzBCQUt6QixLQUFLLFNBQUMsYUFBYTtrQ0FLbkIsS0FBSyxTQUFDLHFCQUFxQjtzQkFPM0IsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBIb3N0LCBPcHRpb25hbCwgT25Jbml0LCBJbnB1dCwgVmlld0NoaWxkLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5TGF5b3V0Q29tcG9uZW50IH0gZnJvbSAnLi9sYXlvdXQuY29tcG9uZW50JztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbmNvbnN0IExHX1dJRFRIID0gMzAwO1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktc2lkZWJhcicsXG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz1cInNpZGViYXItZHJhZ1wiXG4gICAgICAgICAgICAjZHJhZ1JlZlxuICAgICAgICAgICAgY2RrRHJhZ1xuICAgICAgICAgICAgY2RrRHJhZ0xvY2tBeGlzPVwieFwiXG4gICAgICAgICAgICBjZGtEcmFnQm91bmRhcnk9XCIudGh5LWxheW91dFwiXG4gICAgICAgICAgICAoY2RrRHJhZ1N0YXJ0ZWQpPVwiZHJhZ1N0YXJ0ZWRIYW5kbGVyKClcIlxuICAgICAgICAgICAgKGNka0RyYWdFbmRlZCk9XCJkcmFnRW5kZWRIYW5kbGVyKClcIlxuICAgICAgICA+PC9kaXY+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBUaHlTaWRlYmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1sYXlvdXQtc2lkZWJhcicpIHRoeUxheW91dFNpZGViYXJDbGFzcyA9IHRydWU7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1sYXlvdXQtc2lkZWJhci0tY2xlYXItYm9yZGVyLXJpZ2h0JykgdGh5TGF5b3V0U2lkZWJhckNsZWFyQm9yZGVyUmlnaHRDbGFzcyA9IGZhbHNlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS53aWR0aC5weCcpIHRoeUxheW91dFNpZGViYXJXaWR0aDogbnVtYmVyO1xuICAgIEBIb3N0QmluZGluZygnc3R5bGUucG9pbnRlci1ldmVudHMnKSB0aHlMYXlvdXRTaWRlYmFyUG9pbnRlckV2ZW50czogc3RyaW5nO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktbGF5b3V0LXNpZGViYXItaXNvbGF0ZWQnKSBzaWRlYmFySXNvbGF0ZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgndGh5V2lkdGgnKVxuICAgIHNldCB0aHlXaWR0aCh2YWx1ZTogYW55KSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ2xnJykge1xuICAgICAgICAgICAgdmFsdWUgPSBMR19XSURUSDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRoeUxheW91dFNpZGViYXJXaWR0aCA9IHZhbHVlO1xuICAgICAgICB0aGlzLndpZHRoUGFzc2l2ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgndGh5SGFzQm9yZGVyUmlnaHQnKVxuICAgIHNldCB0aHlIYXNCb3JkZXJSaWdodCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGh5TGF5b3V0U2lkZWJhckNsZWFyQm9yZGVyUmlnaHRDbGFzcyA9ICFjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIEBJbnB1dCgndGh5SXNvbGF0ZWQnKVxuICAgIHNldCB0aHlJc29sYXRlZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2lkZWJhcklzb2xhdGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoJ3RoeUlzRHJhZ2dhYmxlV2lkdGgnKVxuICAgIHNldCB0aHlJc0RyYWdnYWJsZVdpZHRoKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgaWYgKGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMudGh5TGF5b3V0U2lkZWJhclBvaW50ZXJFdmVudHMgPSAnYWxsJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBWaWV3Q2hpbGQoJ2RyYWdSZWYnLCB7IHN0YXRpYzogdHJ1ZSB9KSBkcmFnUmVmOiBhbnk7XG5cbiAgICBkcmFnU3RhcnRlZFg6IG51bWJlcjtcblxuICAgIHdpZHRoUGFzc2l2ZTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgcHJpdmF0ZSB0aHlMYXlvdXRDb21wb25lbnQ6IFRoeUxheW91dENvbXBvbmVudCxcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmVcbiAgICApIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMudGh5TGF5b3V0Q29tcG9uZW50KSB7XG4gICAgICAgICAgICB0aGlzLnRoeUxheW91dENvbXBvbmVudC5oYXNTaWRlYmFyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoUGFzc2l2ZSA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5kcmFnUmVmLm5hdGl2ZUVsZW1lbnQsICdsZWZ0JywgdGhpcy5udW1iZXJDb252ZXJ0VG9GbG9vcih0aGlzLndpZHRoUGFzc2l2ZSkgKyAncHgnKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkcmFnU3RhcnRlZEhhbmRsZXIoKSB7XG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0ZWRYID0gdGhpcy5kcmFnUmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueDtcbiAgICB9XG5cbiAgICBkcmFnRW5kZWRIYW5kbGVyKCkge1xuICAgICAgICBjb25zdCB4ID0gdGhpcy5kcmFnUmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueDtcbiAgICAgICAgdGhpcy53aWR0aFBhc3NpdmUgPSB0aGlzLm51bWJlckNvbnZlcnRUb0Zsb29yKHRoaXMud2lkdGhQYXNzaXZlICogMSArICh4IC0gdGhpcy5kcmFnU3RhcnRlZFgpKTtcbiAgICAgICAgdGhpcy50aHlMYXlvdXRTaWRlYmFyV2lkdGggPSB0aGlzLndpZHRoUGFzc2l2ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG51bWJlckNvbnZlcnRUb0Zsb29yKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IE1hdGguZmxvb3IoKHZhbHVlIGFzIGFueSkgKiAxKTtcbiAgICAgICAgaWYgKHJlc3VsdCA8IDEpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iXX0=
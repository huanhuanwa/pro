import { coerceElement } from '@angular/cdk/coercion';
import { Subject, fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { ThyDropPosition } from './drag-drop.class';
import { coerceArray } from 'ngx-tethys/util';
const dropPositionClass = {
    [ThyDropPosition.in]: 'thy-drop-position-in',
    [ThyDropPosition.before]: 'thy-drop-position-before',
    [ThyDropPosition.after]: 'thy-drop-position-after'
};
export class DragRef {
    constructor(element, drag, container, dragDropService, document, ngZone) {
        this.drag = drag;
        this.container = container;
        this.dragDropService = dragDropService;
        this.document = document;
        this.ngZone = ngZone;
        this.ngUnsubscribe$ = new Subject();
        this.started = new Subject();
        this.ended = new Subject();
        this.overed = new Subject();
        this.dropped = new Subject();
        this.entered = new Subject();
        this.leaved = new Subject();
        this._disabled = false;
        this.withRootElement(element);
    }
    get disabled() {
        return (this.container && this.container.disabled) || this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
    }
    withRootElement(rootElement) {
        const element = coerceElement(rootElement);
        this.rootElement = element;
        this.registerDragDropEvents();
        return this;
    }
    withContentElement(contentElement) {
        this.contentElement = coerceElement(contentElement);
        return this;
    }
    withHandles(handleOrHandles) {
        this.handles = coerceArray(handleOrHandles);
        return this;
    }
    registerDragDropEvents() {
        const events = {
            dragstart: this.dragStart,
            dragover: this.dragOver,
            dragend: this.dragEnd,
            drop: this.dragDrop,
            dragleave: this.dragLeave,
            dragenter: (event) => {
                this.entered.next(event);
            },
            mouseover: (event) => {
                this.target = event.target;
            }
        };
        this.ngZone.runOutsideAngular(() => {
            for (const name in events) {
                if (events.hasOwnProperty(name)) {
                    fromEvent(this.rootElement, name)
                        .pipe(takeUntil(this.ngUnsubscribe$))
                        .subscribe(events[name].bind(this));
                }
            }
        });
    }
    dragStart(event) {
        event.stopPropagation();
        const dragStartEvent = {
            event: event,
            item: this.drag.data,
            containerItems: this.container.data,
            currentIndex: this.container.data.indexOf(this.drag.data)
        };
        if (this.disabled || !this.isTriggerHandle() || (this.container.beforeStart && !this.container.beforeStart(dragStartEvent))) {
            event.preventDefault();
            return false;
        }
        this.dragDropService.previousDrag = this.drag;
        this.ngZone.run(() => {
            this.started.next(dragStartEvent);
        });
    }
    isTriggerHandle() {
        if (this.handles && this.handles.length > 0) {
            const targetHandle = this.handles.find(handle => {
                return (!handle.disabled && (handle.element.nativeElement === this.target || handle.element.nativeElement.contains(this.target)));
            });
            return !!targetHandle;
        }
        else {
            return true;
        }
    }
    getPreviousEventData() {
        const previousItem = this.dragDropService.previousDrag.data;
        const previousContainerItems = this.dragDropService.previousDrag.container.data;
        return {
            previousItem: previousItem,
            previousContainerItems: this.dragDropService.previousDrag.container.data,
            previousIndex: previousContainerItems.indexOf(previousItem)
        };
    }
    isContinueDragOver(event, container) {
        if (event.item === event.previousItem && event.position === ThyDropPosition.in) {
            return false;
        }
        if (container && container.beforeOver) {
            return container.beforeOver(event);
        }
        return true;
    }
    dragOver(event) {
        event.stopPropagation();
        event.preventDefault();
        const dropPosition = this.calcDropPosition(event);
        const dragOverEvent = Object.assign({ event: event, item: this.drag.data, containerItems: this.drag.container.data, currentIndex: this.container.data.indexOf(this.drag.data), position: dropPosition }, this.getPreviousEventData());
        if (this.isContinueDragOver(dragOverEvent, this.container)) {
            this.dragOverHandler(dropPosition);
            this.overed.next(dragOverEvent);
        }
    }
    dragOverHandler(position) {
        const element = this.contentElement || this.rootElement;
        if (this.dragDropService.dropPosition !== position) {
            this.clearDragPositionClass();
        }
        element.classList.add(dropPositionClass[position]);
        this.dragDropService.dropPosition = position;
    }
    dragDrop(event) {
        event.stopPropagation();
        this.clearDragPositionClass();
        const dragDropEvent = Object.assign({ event: event, item: this.drag.data, containerItems: this.drag.container.data, currentIndex: this.container.data.indexOf(this.drag.data), position: this.calcDropPosition(event) }, this.getPreviousEventData());
        if (this.dragDropService.previousDrag === this.drag || (this.container.beforeDrop && !this.container.beforeDrop(dragDropEvent))) {
            event.preventDefault();
            return;
        }
        this.ngZone.run(() => {
            this.dropped.next(dragDropEvent);
        });
    }
    dragEnd(event) {
        this.ngZone.run(() => {
            this.ended.next({
                event: event,
                item: this.drag.data,
                containerItems: this.container.data
            });
        });
    }
    dragLeave(event) {
        event.stopPropagation();
        this.clearDragPositionClass();
        this.leaved.next(event);
    }
    clearDragPositionClass() {
        const element = this.contentElement || this.rootElement;
        for (const key in dropPositionClass) {
            if (dropPositionClass[key]) {
                element.classList.remove(dropPositionClass[key]);
            }
        }
    }
    calcDropPosition(event) {
        const sideRange = 0.25;
        const minGap = 2;
        const { clientY } = event;
        const { top, bottom, height } = event.srcElement
            ? event.srcElement.getBoundingClientRect()
            : event.target.getBoundingClientRect();
        const des = Math.max(height * sideRange, minGap);
        if (clientY <= top + des) {
            return ThyDropPosition.before;
        }
        else if (clientY >= bottom - des) {
            return ThyDropPosition.after;
        }
        return ThyDropPosition.in;
    }
    dispose() {
        this.ngUnsubscribe$.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,
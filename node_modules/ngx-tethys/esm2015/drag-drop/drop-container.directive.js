import { Directive, Output, EventEmitter, ContentChildren, QueryList, NgZone, Input } from '@angular/core';
import { ThyDragDirective } from './drag.directive';
import { merge, defer } from 'rxjs';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { takeUntil, startWith, take, switchMap } from 'rxjs/operators';
import { THY_DROP_CONTAINER_DIRECTIVE } from './drop-container.class';
import * as ɵngcc0 from '@angular/core';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyDropContainerDirective extends _MixinBase {
    constructor(ngZone) {
        super();
        this.ngZone = ngZone;
        this.started = new EventEmitter();
        this.ended = new EventEmitter();
        this.overed = new EventEmitter();
        this.dropped = new EventEmitter();
    }
    set dragContainer(data) {
        this.data = data;
    }
    ngOnInit() { }
    ngAfterContentInit() {
        this.draggables.changes.pipe(startWith(null), takeUntil(this.ngUnsubscribe$)).subscribe(() => {
            this.draggableChanges();
        });
    }
    draggableChanges() {
        this.resetDraggableChanges(item => item.dragRef.started).subscribe(event => {
            this.started.emit(event);
        });
        this.resetDraggableChanges(item => item.dragRef.ended).subscribe(event => {
            this.ended.emit(event);
        });
        this.resetDraggableChanges(item => item.dragRef.overed).subscribe(event => {
            this.overed.emit(event);
        });
        this.resetDraggableChanges(item => item.dragRef.dropped).subscribe(event => {
            this.dropped.emit(event);
        });
    }
    resetDraggableChanges(fn) {
        return defer(() => {
            if (this.draggables) {
                return merge(...this.draggables.map(fn));
            }
            return this.ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.resetDraggableChanges.bind(this, fn)));
        }).pipe(takeUntil(merge(this.ngUnsubscribe$, this.draggables.changes)));
    }
}
ThyDropContainerDirective.ɵfac = function ThyDropContainerDirective_Factory(t) { return new (t || ThyDropContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ThyDropContainerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDropContainerDirective, selectors: [["thy-drop-container"], ["", "thyDropContainer", ""]], contentQueries: function ThyDropContainerDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyDragDirective, false);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.draggables = _t);
    } }, inputs: { dragContainer: ["thyDropContainer", "dragContainer"], data: ["thyDropContainerData", "data"], disabled: ["thyDropContainerDisabled", "disabled"], beforeStart: ["thyBeforeDragStart", "beforeStart"], beforeOver: ["thyBeforeDragOver", "beforeOver"], beforeDrop: ["thyBeforeDragDrop", "beforeDrop"] }, outputs: { started: "thyDragStarted", ended: "thyDragEnded", overed: "thyDragOvered", dropped: "thyDragDropped" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: THY_DROP_CONTAINER_DIRECTIVE,
                useExisting: ThyDropContainerDirective
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
ThyDropContainerDirective.ctorParameters = () => [
    { type: NgZone }
];
ThyDropContainerDirective.propDecorators = {
    dragContainer: [{ type: Input, args: ['thyDropContainer',] }],
    data: [{ type: Input, args: ['thyDropContainerData',] }],
    disabled: [{ type: Input, args: ['thyDropContainerDisabled',] }],
    beforeStart: [{ type: Input, args: ['thyBeforeDragStart',] }],
    beforeOver: [{ type: Input, args: ['thyBeforeDragOver',] }],
    beforeDrop: [{ type: Input, args: ['thyBeforeDragDrop',] }],
    started: [{ type: Output, args: ['thyDragStarted',] }],
    ended: [{ type: Output, args: ['thyDragEnded',] }],
    overed: [{ type: Output, args: ['thyDragOvered',] }],
    dropped: [{ type: Output, args: ['thyDragDropped',] }],
    draggables: [{ type: ContentChildren, args: [ThyDragDirective, {
                    descendants: false
                },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDropContainerDirective, [{
        type: Directive,
        args: [{
                selector: 'thy-drop-container,[thyDropContainer]',
                providers: [
                    {
                        provide: THY_DROP_CONTAINER_DIRECTIVE,
                        useExisting: ThyDropContainerDirective
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, { started: [{
            type: Output,
            args: ['thyDragStarted']
        }], ended: [{
            type: Output,
            args: ['thyDragEnded']
        }], overed: [{
            type: Output,
            args: ['thyDragOvered']
        }], dropped: [{
            type: Output,
            args: ['thyDragDropped']
        }], dragContainer: [{
            type: Input,
            args: ['thyDropContainer']
        }], data: [{
            type: Input,
            args: ['thyDropContainerData']
        }], disabled: [{
            type: Input,
            args: ['thyDropContainerDisabled']
        }], beforeStart: [{
            type: Input,
            args: ['thyBeforeDragStart']
        }], beforeOver: [{
            type: Input,
            args: ['thyBeforeDragOver']
        }], beforeDrop: [{
            type: Input,
            args: ['thyBeforeDragDrop']
        }], draggables: [{
            type: ContentChildren,
            args: [ThyDragDirective, {
                    descendants: false
                }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { Directive, Output, EventEmitter, ContentChildren, QueryList, NgZone, Input } from '@angular/core';
import { ThyDragDirective } from './drag.directive';
import { merge, defer } from 'rxjs';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { takeUntil, startWith, take, switchMap } from 'rxjs/operators';
import { THY_DROP_CONTAINER_DIRECTIVE } from './drop-container.class';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyDropContainerDirective extends _MixinBase {
    constructor(ngZone) {
        super();
        this.ngZone = ngZone;
        this.started = new EventEmitter();
        this.ended = new EventEmitter();
        this.overed = new EventEmitter();
        this.dropped = new EventEmitter();
    }
    set dragContainer(data) {
        this.data = data;
    }
    ngOnInit() { }
    ngAfterContentInit() {
        this.draggables.changes.pipe(startWith(null), takeUntil(this.ngUnsubscribe$)).subscribe(() => {
            this.draggableChanges();
        });
    }
    draggableChanges() {
        this.resetDraggableChanges(item => item.dragRef.started).subscribe(event => {
            this.started.emit(event);
        });
        this.resetDraggableChanges(item => item.dragRef.ended).subscribe(event => {
            this.ended.emit(event);
        });
        this.resetDraggableChanges(item => item.dragRef.overed).subscribe(event => {
            this.overed.emit(event);
        });
        this.resetDraggableChanges(item => item.dragRef.dropped).subscribe(event => {
            this.dropped.emit(event);
        });
    }
    resetDraggableChanges(fn) {
        return defer(() => {
            if (this.draggables) {
                return merge(...this.draggables.map(fn));
            }
            return this.ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.resetDraggableChanges.bind(this, fn)));
        }).pipe(takeUntil(merge(this.ngUnsubscribe$, this.draggables.changes)));
    }
}
ThyDropContainerDirective.decorators = [
    { type: Directive, args: [{
                selector: 'thy-drop-container,[thyDropContainer]',
                providers: [
                    {
                        provide: THY_DROP_CONTAINER_DIRECTIVE,
                        useExisting: ThyDropContainerDirective
                    }
                ]
            },] }
];
ThyDropContainerDirective.ctorParameters = () => [
    { type: NgZone }
];
ThyDropContainerDirective.propDecorators = {
    dragContainer: [{ type: Input, args: ['thyDropContainer',] }],
    data: [{ type: Input, args: ['thyDropContainerData',] }],
    disabled: [{ type: Input, args: ['thyDropContainerDisabled',] }],
    beforeStart: [{ type: Input, args: ['thyBeforeDragStart',] }],
    beforeOver: [{ type: Input, args: ['thyBeforeDragOver',] }],
    beforeDrop: [{ type: Input, args: ['thyBeforeDragDrop',] }],
    started: [{ type: Output, args: ['thyDragStarted',] }],
    ended: [{ type: Output, args: ['thyDragEnded',] }],
    overed: [{ type: Output, args: ['thyDragOvered',] }],
    dropped: [{ type: Output, args: ['thyDragDropped',] }],
    draggables: [{ type: ContentChildren, args: [ThyDragDirective, {
                    descendants: false
                },] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Directive, ElementRef, Input, Optional } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ThyDragDirective } from './drag.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './drag.directive';
export class ThyDragHandleDirective {
    constructor(element, drag) {
        this.element = element;
        this._disabled = false;
        if (drag) {
            drag.dragRef.withHandles(this);
        }
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
}
ThyDragHandleDirective.ɵfac = function ThyDragHandleDirective_Factory(t) { return new (t || ThyDragHandleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyDragDirective, 8)); };
ThyDragHandleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDragHandleDirective, selectors: [["thy-drag-handle"], ["", "thyDragHandle", ""]], inputs: { disabled: ["thyDisabled", "disabled"] } });
ThyDragHandleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyDragDirective, decorators: [{ type: Optional }] }
];
ThyDragHandleDirective.propDecorators = {
    disabled: [{ type: Input, args: ['thyDisabled',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDragHandleDirective, [{
        type: Directive,
        args: [{
                selector: 'thy-drag-handle,[thyDragHandle]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ThyDragDirective, decorators: [{
                type: Optional
            }] }]; }, { disabled: [{
            type: Input,
            args: ['thyDisabled']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1oYW5kbGUuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZHJhZy1kcm9wL2RyYWctaGFuZGxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFLcEQsTUFBTSxPQUFPLHNCQUFzQjtBQUNuQyxJQVVJLFlBQW1CLE9BQWdDLEVBQWMsSUFBc0I7QUFDM0YsUUFEdUIsWUFBTyxHQUFQLE9BQU8sQ0FBeUI7QUFBQyxRQVY1QyxjQUFTLEdBQUcsS0FBSyxDQUFDO0FBQzlCLFFBVVEsSUFBSSxJQUFJLEVBQUU7QUFDbEIsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFiSSxJQUNJLFFBQVE7QUFBSyxRQUNiLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUM5QixJQUFJLENBQUM7QUFDTCxJQUFJLElBQUksUUFBUSxDQUFDLEtBQWM7QUFDL0IsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RELElBQUksQ0FBQztBQUNMO2tEQWJDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsaUNBQWlDLGNBQzlDO3lNQUNJO0FBQUM7QUFDVSxZQVJJLFVBQVU7QUFBSSxZQUV6QixnQkFBZ0IsdUJBZ0JpQyxRQUFRO0FBQU07QUFBRztBQUV6RSx1QkFWRyxLQUFLLFNBQUMsYUFBYTtBQUNwQjs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgVGh5RHJhZ0RpcmVjdGl2ZSB9IGZyb20gJy4vZHJhZy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3RoeS1kcmFnLWhhbmRsZSxbdGh5RHJhZ0hhbmRsZV0nXG59KVxuZXhwb3J0IGNsYXNzIFRoeURyYWdIYW5kbGVEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoJ3RoeURpc2FibGVkJylcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgICB9XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIEBPcHRpb25hbCgpIGRyYWc6IFRoeURyYWdEaXJlY3RpdmUpIHtcbiAgICAgICAgaWYgKGRyYWcpIHtcbiAgICAgICAgICAgIGRyYWcuZHJhZ1JlZi53aXRoSGFuZGxlcyh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
import { Directive, NgZone, ElementRef, HostBinding, Input, Inject, Optional } from '@angular/core';
import { DragRef } from './drag-ref';
import { DOCUMENT } from '@angular/common';
import { ThyDragDropService } from './drag-drop.service';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { THY_DROP_CONTAINER_DIRECTIVE } from './drop-container.class';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyDragDirective extends _MixinBase {
    constructor(document, container, ngZone, elementRef, service) {
        super();
        this.container = container;
        this.elementRef = elementRef;
        this.isDraggable = true;
        this._disabled = false;
        this.dragRef = new DragRef(elementRef, this, container, service, document, ngZone);
    }
    set dragData(data) {
        this.data = data;
    }
    set disabled(isDisabled) {
        this._disabled = isDisabled;
        if (isDisabled) {
            this.isDraggable = false;
        }
    }
    get disabled() {
        return this._disabled;
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.dragRef.dispose();
    }
}
ThyDragDirective.decorators = [
    { type: Directive, args: [{ selector: 'thy-drag,[thyDrag]' },] }
];
ThyDragDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_DROP_CONTAINER_DIRECTIVE,] }] },
    { type: NgZone },
    { type: ElementRef },
    { type: ThyDragDropService }
];
ThyDragDirective.propDecorators = {
    dragData: [{ type: Input, args: ['thyDrag',] }],
    data: [{ type: Input, args: ['thyDragData',] }],
    isDraggable: [{ type: HostBinding, args: ['attr.draggable',] }],
    disabled: [{ type: Input, args: ['thyDragDisabled',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZHJhZy1kcm9wL2RyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sRUFHTixRQUFRLEVBRVgsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDekQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBK0IsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRixPQUFPLEVBQUUsNEJBQTRCLEVBQThCLE1BQU0sd0JBQXdCLENBQUM7QUFFbEcsTUFBTSxVQUFVLEdBQW1ELGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRy9GLE1BQU0sT0FBTyxnQkFBMEIsU0FBUSxVQUFVO0lBdUJyRCxZQUNzQixRQUFhLEVBQzBCLFNBQXFDLEVBQzlGLE1BQWMsRUFDTixVQUFtQyxFQUMzQyxPQUE4QjtRQUU5QixLQUFLLEVBQUUsQ0FBQztRQUxpRCxjQUFTLEdBQVQsU0FBUyxDQUE0QjtRQUV0RixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQW5CaEIsZ0JBQVcsR0FBRyxJQUFJLENBQUM7UUFFMUMsY0FBUyxHQUFHLEtBQUssQ0FBQztRQXFCdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBSSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUEvQkQsSUFDSSxRQUFRLENBQUMsSUFBTztRQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBT0QsSUFBOEIsUUFBUSxDQUFDLFVBQW1CO1FBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO1FBQzVCLElBQUksVUFBVSxFQUFFO1lBQ1osSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDNUI7SUFDTCxDQUFDO0lBQ0QsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFlRCxXQUFXO1FBQ1AsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7O1lBdENKLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTs7OzRDQXlCcEMsTUFBTSxTQUFDLFFBQVE7NENBQ2YsUUFBUSxZQUFJLE1BQU0sU0FBQyw0QkFBNEI7WUE3Q3BELE1BQU07WUFDTixVQUFVO1lBWUwsa0JBQWtCOzs7dUJBUXRCLEtBQUssU0FBQyxTQUFTO21CQUtmLEtBQUssU0FBQyxhQUFhOzBCQUVuQixXQUFXLFNBQUMsZ0JBQWdCO3VCQUc1QixLQUFLLFNBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgTmdab25lLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5wdXQsXG4gICAgSW5qZWN0LFxuICAgIENvbnRlbnRDaGlsZHJlbixcbiAgICBPbkRlc3Ryb3ksXG4gICAgT3B0aW9uYWwsXG4gICAgQWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERyYWdSZWYgfSBmcm9tICcuL2RyYWctcmVmJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFRoeURyYWdIYW5kbGVEaXJlY3RpdmUgfSBmcm9tICcuL2RyYWctaGFuZGxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBUaHlEcmFnRHJvcFNlcnZpY2UgfSBmcm9tICcuL2RyYWctZHJvcC5zZXJ2aWNlJztcbmltcG9ydCB7IG1peGluVW5zdWJzY3JpYmUsIE1peGluQmFzZSwgQ29uc3RydWN0b3IsIFRoeVVuc3Vic2NyaWJlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcbmltcG9ydCB7IFRIWV9EUk9QX0NPTlRBSU5FUl9ESVJFQ1RJVkUsIElUaHlEcm9wQ29udGFpbmVyRGlyZWN0aXZlIH0gZnJvbSAnLi9kcm9wLWNvbnRhaW5lci5jbGFzcyc7XG5cbmNvbnN0IF9NaXhpbkJhc2U6IENvbnN0cnVjdG9yPFRoeVVuc3Vic2NyaWJlPiAmIHR5cGVvZiBNaXhpbkJhc2UgPSBtaXhpblVuc3Vic2NyaWJlKE1peGluQmFzZSk7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ3RoeS1kcmFnLFt0aHlEcmFnXScgfSlcbmV4cG9ydCBjbGFzcyBUaHlEcmFnRGlyZWN0aXZlPFQgPSBhbnk+IGV4dGVuZHMgX01peGluQmFzZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgQElucHV0KCd0aHlEcmFnJylcbiAgICBzZXQgZHJhZ0RhdGEoZGF0YTogVCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIEBJbnB1dCgndGh5RHJhZ0RhdGEnKSBkYXRhOiBUO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRyYWdnYWJsZScpIGlzRHJhZ2dhYmxlID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gICAgQElucHV0KCd0aHlEcmFnRGlzYWJsZWQnKSBzZXQgZGlzYWJsZWQoaXNEaXNhYmxlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgICAgIGlmIChpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpc2FibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYWdSZWY6IERyYWdSZWY8VD47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueSxcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChUSFlfRFJPUF9DT05UQUlORVJfRElSRUNUSVZFKSBwdWJsaWMgY29udGFpbmVyOiBJVGh5RHJvcENvbnRhaW5lckRpcmVjdGl2ZSxcbiAgICAgICAgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIHNlcnZpY2U6IFRoeURyYWdEcm9wU2VydmljZTxUPlxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRyYWdSZWYgPSBuZXcgRHJhZ1JlZjxUPihlbGVtZW50UmVmLCB0aGlzLCBjb250YWluZXIsIHNlcnZpY2UsIGRvY3VtZW50LCBuZ1pvbmUpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICAgICAgICB0aGlzLmRyYWdSZWYuZGlzcG9zZSgpO1xuICAgIH1cbn1cbiJdfQ==
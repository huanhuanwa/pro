import { Directive, NgZone, ElementRef, HostBinding, Input, Inject, Optional } from '@angular/core';
import { DragRef } from './drag-ref';
import { DOCUMENT } from '@angular/common';
import { ThyDragDropService } from './drag-drop.service';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { THY_DROP_CONTAINER_DIRECTIVE } from './drop-container.class';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './drag-drop.service';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyDragDirective extends _MixinBase {
    constructor(document, container, ngZone, elementRef, service) {
        super();
        this.container = container;
        this.elementRef = elementRef;
        this.isDraggable = true;
        this._disabled = false;
        this.dragRef = new DragRef(elementRef, this, container, service, document, ngZone);
    }
    set dragData(data) {
        this.data = data;
    }
    set disabled(isDisabled) {
        this._disabled = isDisabled;
        if (isDisabled) {
            this.isDraggable = false;
        }
    }
    get disabled() {
        return this._disabled;
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.dragRef.dispose();
    }
}
ThyDragDirective.ɵfac = function ThyDragDirective_Factory(t) { return new (t || ThyDragDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(THY_DROP_CONTAINER_DIRECTIVE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyDragDropService)); };
ThyDragDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDragDirective, selectors: [["thy-drag"], ["", "thyDrag", ""]], hostVars: 1, hostBindings: function ThyDragDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("draggable", ctx.isDraggable);
    } }, inputs: { dragData: ["thyDrag", "dragData"], data: ["thyDragData", "data"], disabled: ["thyDragDisabled", "disabled"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
ThyDragDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_DROP_CONTAINER_DIRECTIVE,] }] },
    { type: NgZone },
    { type: ElementRef },
    { type: ThyDragDropService }
];
ThyDragDirective.propDecorators = {
    dragData: [{ type: Input, args: ['thyDrag',] }],
    data: [{ type: Input, args: ['thyDragData',] }],
    isDraggable: [{ type: HostBinding, args: ['attr.draggable',] }],
    disabled: [{ type: Input, args: ['thyDragDisabled',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDragDirective, [{
        type: Directive,
        args: [{ selector: 'thy-drag,[thyDrag]' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_DROP_CONTAINER_DIRECTIVE]
            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ThyDragDropService }]; }, { isDraggable: [{
            type: HostBinding,
            args: ['attr.draggable']
        }], dragData: [{
            type: Input,
            args: ['thyDrag']
        }], data: [{
            type: Input,
            args: ['thyDragData']
        }], disabled: [{
            type: Input,
            args: ['thyDragDisabled']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kcmFnLWRyb3AvZHJhZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxNQUFNLEVBQ04sVUFBVSxFQUNWLFdBQVcsRUFDWCxLQUFLLEVBQ0wsTUFBTSxFQUdOLFFBQVEsRUFFWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUErQixNQUFNLGlCQUFpQixDQUFDO0FBQzNGLE9BQU8sRUFBRSw0QkFBNEIsRUFBOEIsTUFBTSx3QkFBd0IsQ0FBQzs7O0FBRWxHLE1BQU0sVUFBVSxHQUFtRCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUcvRixNQUFNLE9BQU8sZ0JBQTBCLFNBQVEsVUFBVTtBQUFHLElBdUJ4RCxZQUNzQixRQUFhLEVBQzBCLFNBQXFDLEVBQzlGLE1BQWMsRUFDTixVQUFtQyxFQUMzQyxPQUE4QjtBQUNuQyxRQUNLLEtBQUssRUFBRSxDQUFDO0FBQ2hCLFFBTmlFLGNBQVMsR0FBVCxTQUFTLENBQTRCO0FBQUMsUUFFdkYsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7QUFBQyxRQW5CakIsZ0JBQVcsR0FBRyxJQUFJLENBQUM7QUFDdEQsUUFDWSxjQUFTLEdBQUcsS0FBSyxDQUFDO0FBQzlCLFFBb0JRLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUksVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5RixJQUFJLENBQUM7QUFDTCxJQWhDSSxJQUNJLFFBQVEsQ0FBQyxJQUFPO0FBQ3hCLFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDekIsSUFBSSxDQUFDO0FBQ0wsSUFNSSxJQUE4QixRQUFRLENBQUMsVUFBbUI7QUFDOUQsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUNwQyxRQUFRLElBQUksVUFBVSxFQUFFO0FBQ3hCLFlBQVksSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDckMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQUksSUFBSSxRQUFRO0FBQ2hCLFFBQVEsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQzlCLElBQUksQ0FBQztBQUNMLElBY0ksV0FBVztBQUNmLFFBQVEsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzVCLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMvQixJQUFJLENBQUM7QUFDTDs0Q0F2Q0MsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFOzs7bUxBQ3hDO0FBQUM7QUFBMEMsNENBd0J2QyxNQUFNLFNBQUMsUUFBUTtBQUFTLDRDQUN4QixRQUFRLFlBQUksTUFBTSxTQUFDLDRCQUE0QjtBQUFTLFlBN0M3RCxNQUFNO0FBQ1IsWUFBRSxVQUFVO0FBQ1osWUFXTyxrQkFBa0I7QUFBRztBQUFHO0FBQ3RCLHVCQU9OLEtBQUssU0FBQyxTQUFTO0FBQ2YsbUJBSUEsS0FBSyxTQUFDLGFBQWE7QUFBTywwQkFFMUIsV0FBVyxTQUFDLGdCQUFnQjtBQUFPLHVCQUduQyxLQUFLLFNBQUMsaUJBQWlCO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgTmdab25lLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5wdXQsXG4gICAgSW5qZWN0LFxuICAgIENvbnRlbnRDaGlsZHJlbixcbiAgICBPbkRlc3Ryb3ksXG4gICAgT3B0aW9uYWwsXG4gICAgQWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERyYWdSZWYgfSBmcm9tICcuL2RyYWctcmVmJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFRoeURyYWdIYW5kbGVEaXJlY3RpdmUgfSBmcm9tICcuL2RyYWctaGFuZGxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBUaHlEcmFnRHJvcFNlcnZpY2UgfSBmcm9tICcuL2RyYWctZHJvcC5zZXJ2aWNlJztcbmltcG9ydCB7IG1peGluVW5zdWJzY3JpYmUsIE1peGluQmFzZSwgQ29uc3RydWN0b3IsIFRoeVVuc3Vic2NyaWJlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcbmltcG9ydCB7IFRIWV9EUk9QX0NPTlRBSU5FUl9ESVJFQ1RJVkUsIElUaHlEcm9wQ29udGFpbmVyRGlyZWN0aXZlIH0gZnJvbSAnLi9kcm9wLWNvbnRhaW5lci5jbGFzcyc7XG5cbmNvbnN0IF9NaXhpbkJhc2U6IENvbnN0cnVjdG9yPFRoeVVuc3Vic2NyaWJlPiAmIHR5cGVvZiBNaXhpbkJhc2UgPSBtaXhpblVuc3Vic2NyaWJlKE1peGluQmFzZSk7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ3RoeS1kcmFnLFt0aHlEcmFnXScgfSlcbmV4cG9ydCBjbGFzcyBUaHlEcmFnRGlyZWN0aXZlPFQgPSBhbnk+IGV4dGVuZHMgX01peGluQmFzZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgQElucHV0KCd0aHlEcmFnJylcbiAgICBzZXQgZHJhZ0RhdGEoZGF0YTogVCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIEBJbnB1dCgndGh5RHJhZ0RhdGEnKSBkYXRhOiBUO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRyYWdnYWJsZScpIGlzRHJhZ2dhYmxlID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gICAgQElucHV0KCd0aHlEcmFnRGlzYWJsZWQnKSBzZXQgZGlzYWJsZWQoaXNEaXNhYmxlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgICAgIGlmIChpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpc2FibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYWdSZWY6IERyYWdSZWY8VD47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueSxcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChUSFlfRFJPUF9DT05UQUlORVJfRElSRUNUSVZFKSBwdWJsaWMgY29udGFpbmVyOiBJVGh5RHJvcENvbnRhaW5lckRpcmVjdGl2ZSxcbiAgICAgICAgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIHNlcnZpY2U6IFRoeURyYWdEcm9wU2VydmljZTxUPlxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRyYWdSZWYgPSBuZXcgRHJhZ1JlZjxUPihlbGVtZW50UmVmLCB0aGlzLCBjb250YWluZXIsIHNlcnZpY2UsIGRvY3VtZW50LCBuZ1pvbmUpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICAgICAgICB0aGlzLmRyYWdSZWYuZGlzcG9zZSgpO1xuICAgIH1cbn1cbiJdfQ==
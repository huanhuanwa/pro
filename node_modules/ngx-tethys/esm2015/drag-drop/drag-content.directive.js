import { Directive, ElementRef, HostBinding, Optional } from '@angular/core';
import { ThyDragDirective } from './drag.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './drag.directive';
export class ThyDragContentDirective {
    constructor(element, drag) {
        this.element = element;
        this.contentClass = true;
        if (drag) {
            drag.dragRef.withContentElement(this.element);
        }
    }
}
ThyDragContentDirective.ɵfac = function ThyDragContentDirective_Factory(t) { return new (t || ThyDragContentDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyDragDirective, 8)); };
ThyDragContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDragContentDirective, selectors: [["thy-drag-content"], ["", "thyDragContent", ""]], hostVars: 2, hostBindings: function ThyDragContentDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-drag-content", ctx.contentClass);
    } } });
ThyDragContentDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyDragDirective, decorators: [{ type: Optional }] }
];
ThyDragContentDirective.propDecorators = {
    contentClass: [{ type: HostBinding, args: ['class.thy-drag-content',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDragContentDirective, [{
        type: Directive,
        args: [{
                selector: 'thy-drag-content,[thyDragContent]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ThyDragDirective, decorators: [{
                type: Optional
            }] }]; }, { contentClass: [{
            type: HostBinding,
            args: ['class.thy-drag-content']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1jb250ZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RyYWctZHJvcC9kcmFnLWNvbnRlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFTLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUtwRCxNQUFNLE9BQU8sdUJBQXVCO0FBQ3BDLElBRUksWUFBbUIsT0FBZ0MsRUFBYyxJQUFzQjtBQUMzRixRQUR1QixZQUFPLEdBQVAsT0FBTyxDQUF5QjtBQUFDLFFBRmIsaUJBQVksR0FBRyxJQUFJLENBQUM7QUFDL0QsUUFFUSxJQUFJLElBQUksRUFBRTtBQUNsQixZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzFELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDttREFYQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLG1DQUFtQyxjQUNoRDs7O1dBQ0k7QUFBQztBQUNVLFlBUEksVUFBVTtBQUFJLFlBQ3pCLGdCQUFnQix1QkFRaUMsUUFBUTtBQUFNO0FBQUc7QUFFeEUsMkJBSkUsV0FBVyxTQUFDLHdCQUF3QjtBQUFNOzs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgSG9zdEJpbmRpbmcsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaHlEcmFnRGlyZWN0aXZlIH0gZnJvbSAnLi9kcmFnLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAndGh5LWRyYWctY29udGVudCxbdGh5RHJhZ0NvbnRlbnRdJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlEcmFnQ29udGVudERpcmVjdGl2ZSB7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktZHJhZy1jb250ZW50JykgY29udGVudENsYXNzID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgQE9wdGlvbmFsKCkgZHJhZzogVGh5RHJhZ0RpcmVjdGl2ZSkge1xuICAgICAgICBpZiAoZHJhZykge1xuICAgICAgICAgICAgZHJhZy5kcmFnUmVmLndpdGhDb250ZW50RWxlbWVudCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
import { Component, HostBinding, Input } from '@angular/core';
import { ThyTreeSelectComponent } from './tree-select.component';
export class ThyTreeSelectNodesComponent {
    constructor(parent) {
        this.parent = parent;
        this.primaryKey = this.parent.thyPrimaryKey;
        this.showKey = this.parent.thyShowKey;
        this.isMultiple = this.parent.thyMultiple;
        this.valueIsObject = this.parent.valueIsObject;
        this.selectedValue = this.parent.selectedValue;
        this.childCountKey = this.parent.thyChildCountKey;
        this.treeNodeTemplateRef = this.parent.treeNodeTemplateRef;
    }
    ngOnInit() {
        this.class = this.isMultiple ? 'thy-tree-select-dropdown thy-tree-select-dropdown-multiple' : 'thy-tree-select-dropdown';
    }
    treeNodeIsSelected(node) {
        if (this.parent.thyMultiple) {
            return (this.parent.selectedNodes || []).find(item => {
                return item[this.primaryKey] === node[this.primaryKey];
            });
        }
        else {
            return this.parent.selectedNode && this.parent.selectedNode[this.primaryKey] === node[this.primaryKey];
        }
    }
    treeNodeIsHidden(node) {
        if (this.parent.thyHiddenNodeKey) {
            return node[this.parent.thyHiddenNodeKey];
        }
        if (this.parent.thyHiddenNodeFn) {
            return this.parent.thyHiddenNodeFn(node);
        }
        return false;
    }
    treeNodeIsDisable(node) {
        if (this.parent.thyDisableNodeKey) {
            return node[this.parent.thyDisableNodeKey];
        }
        if (this.parent.thyDisableNodeFn) {
            return this.parent.thyDisableNodeFn(node);
        }
        return false;
    }
    treeNodeIsExpand(node) {
        let isSelectedNodeParent = false;
        if (this.parent.thyMultiple) {
            isSelectedNodeParent = !!(this.parent.selectedNodes || []).find(item => {
                return item.parentValues.indexOf(node[this.primaryKey]) > -1;
            });
        }
        else {
            isSelectedNodeParent = this.parent.selectedNode
                ? this.parent.selectedNode.parentValues.indexOf(node[this.primaryKey]) > -1
                : false;
        }
        const isExpand = node.expand || (Object.keys(node).indexOf('expand') < 0 && isSelectedNodeParent);
        node.expand = isExpand;
        return isExpand;
    }
    getNodeChildren(node) {
        return this.parent.getNodeChildren(node);
    }
    selectTreeNode(event, node) {
        event.stopPropagation();
        if (this.treeNodeIsDisable(node)) {
            return;
        }
        this.parent.selectNode(node);
    }
    nodeExpandToggle(event, node) {
        event.stopPropagation();
        if (Object.keys(node).indexOf('expand') > -1) {
            node.expand = !node.expand;
        }
        else {
            if (this.treeNodeIsExpand(node)) {
                node.expand = false;
            }
            else {
                node.expand = true;
            }
        }
        if (node.expand && this.parent.thyAsyncNode) {
            this.getNodeChildren(node).subscribe(() => {
                this.parent.setPosition();
            });
        }
        this.parent.setPosition();
    }
}
ThyTreeSelectNodesComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tree-select-nodes',
                template: "<div class=\"thy-tree-select-options\" *ngIf=\"treeNodes?.length > 0; else emptyPlaceholder\">\n  <ng-container\n    *ngIf=\"treeNodes?.length > 0\"\n    [ngTemplateOutlet]=\"treeSelectNode\"\n    [ngTemplateOutletContext]=\"{ $implicit: treeNodes }\"\n  ></ng-container>\n</div>\n<ng-template #emptyPlaceholder>\n  <thy-empty class=\"thy-select-empty-content\" thySize=\"sm\" [thyMessage]=\"parent.thyEmptyOptionsText\"></thy-empty>\n</ng-template>\n<ng-template #treeSelectNode let-nodes>\n  <div class=\"thy-tree-select-node\">\n    <ng-container *ngFor=\"let node of nodes\">\n      <a\n        class=\"thy-option-item\"\n        [ngClass]=\"{ active: treeNodeIsSelected(node) }\"\n        [class.disabled]=\"treeNodeIsDisable(node)\"\n        [ngStyle]=\"{ 'padding-left.px': 20 * node.level + parent.icons.gap }\"\n        (click)=\"selectTreeNode($event, node)\"\n        *ngIf=\"!treeNodeIsHidden(node)\"\n      >\n        <ng-template #treeSelectNode> </ng-template>\n        <span\n          class=\"thy-tree-select-option-icon\"\n          [class.invisible]=\"!(node.children?.length > 0 || (node[childCountKey] && node[childCountKey] > 0))\"\n          (click)=\"nodeExpandToggle($event, node)\"\n        >\n          <thy-icon\n            class=\"node-expand-icon\"\n            [thyIconName]=\"treeNodeIsExpand(node) ? parent.icons.expand : parent.icons.collapse\"\n          ></thy-icon>\n        </span>\n        <span class=\"thy-tree-select-option-text\">\n          <ng-template\n            *ngIf=\"treeNodeTemplateRef; else defaultNodeText\"\n            [ngTemplateOutlet]=\"treeNodeTemplateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: node }\"\n          ></ng-template>\n          <ng-template #defaultNodeText>\n            {{ node[showKey] }}\n          </ng-template>\n        </span>\n        <span class=\"checked-icon\" *ngIf=\"isMultiple\">\n          <i class=\"wtf wtf-checked\"></i>\n        </span>\n      </a>\n      <ng-container\n        *ngIf=\"treeNodeIsExpand(node) && node.children?.length > 0\"\n        [ngTemplateOutlet]=\"treeSelectNode\"\n        [ngTemplateOutletContext]=\"{ $implicit: node.children }\"\n      ></ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n"
            },] }
];
ThyTreeSelectNodesComponent.ctorParameters = () => [
    { type: ThyTreeSelectComponent }
];
ThyTreeSelectNodesComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    treeNodes: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,
import { getFlexiblePositions } from 'ngx-tethys/core';
import { isArray, isObject, produce, warnDeprecation } from 'ngx-tethys/util';
import { of } from 'rxjs';
import { take } from 'rxjs/operators';
import { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';
import { Component, ContentChild, ElementRef, forwardRef, HostBinding, HostListener, Input, NgZone, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["thyTreeSelectTriggerDisplay"];
const _c1 = ["treeNodeTemplate"];
const _c2 = ["customDisplayTemplate"];
function ThyTreeSelectComponent_ng_template_2_ng_container_0_ng_template_1_Template(rf, ctx) { }
const _c3 = function (a0) { return { $implicit: a0 }; };
function ThyTreeSelectComponent_ng_template_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTreeSelectComponent_ng_template_2_ng_container_0_ng_template_1_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const node_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.thyTreeSelectTriggerDisplayRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c3, node_r4));
} }
function ThyTreeSelectComponent_ng_template_2_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const node_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r4[ctx_r7.thyShowKey], " ");
} }
function ThyTreeSelectComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyTreeSelectComponent_ng_template_2_ng_container_0_Template, 2, 4, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(1, ThyTreeSelectComponent_ng_template_2_ng_template_1_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r6 = ɵngcc0.ɵɵreference(2);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.thyTreeSelectTriggerDisplayRef)("ngIfElse", _r6);
} }
function ThyTreeSelectComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-tree-select-nodes", 7);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("treeNodes", ctx_r3.treeNodes);
} }
export function filterTreeData(treeNodes, searchText, searchKey = 'name') {
    const filterNodes = (node, result) => {
        if (node[searchKey] && node[searchKey].indexOf(searchText) !== -1) {
            result.push(node);
            return result;
        }
        if (Array.isArray(node.children)) {
            const nodes = node.children.reduce((previous, current) => filterNodes(current, previous), []);
            if (nodes.length) {
                const parentNode = Object.assign(Object.assign({}, node), { children: nodes, expand: true });
                result.push(parentNode);
            }
        }
        return result;
    };
    const treeData = treeNodes.reduce((previous, current) => filterNodes(current, previous), []);
    return treeData;
}
export class ThyTreeSelectComponent {
    constructor(elementRef, renderer, ngZone) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.treeSelectClass = true;
        this.isTreeSelect = true;
        // 菜单是否展开
        this.expandTreeSelectOptions = false;
        this.isMulti = false;
        this.selectedNodes = [];
        this.flattenTreeNodes = [];
        this.cdkConnectOverlayWidth = 0;
        this.icons = {
            expand: 'angle-down',
            collapse: 'angle-right',
            gap: 15
        };
        this.initialled = false;
        this.valueIsObject = false;
        this.thyPrimaryKey = '_id';
        this.thyShowKey = 'name';
        this.thyChildCountKey = 'childCount';
        this.thyMultiple = false;
        this.thyDisable = false;
        this.thyPlaceholder = '请选择节点';
        this.thyEmptyOptionsText = '暂时没有数据可选';
        this.thyHiddenNodeKey = 'hidden';
        this.thyDisableNodeKey = 'disabled';
        this.thyAsyncNode = false;
        this.thyShowWholeName = false;
        this.thyShowSearch = false;
        this.thyHiddenNodeFn = (node) => node.hidden;
        this.thyDisableNodeFn = (node) => node.disabled;
        this.thyGetNodeChildren = (node) => of([]);
        // TODO: 是否可以取消选中的node
        // @Input() thyUnRemoveSelectedNodeFn: Function;
        this.onModelChange = () => { };
        this.onModelTouch = () => { };
    }
    set thyTreeNodes(value) {
        this.treeNodes = value;
        this.originTreeNodes = value;
        if (this.initialled) {
            this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
            this.setSelectedNodes();
        }
    }
    get placeholder() {
        return this.thyPlaceholder;
    }
    set thyIconType(type) {
        warnDeprecation('This parameter has been deprecation');
        // if (type === 'especial') {
        //     this.icons = { expand: 'minus-square', collapse: 'plus-square', gap: 20 };
        // } else {
        //     this.icons = { expand: 'caret-right-down', collapse: 'caret-right', gap: 15 };
        // }
    }
    _getNgModelType() {
        if (this.thyMultiple) {
            this.valueIsObject = !this.selectedValue[0] || isObject(this.selectedValue[0]);
        }
        else {
            this.valueIsObject = isObject(this.selectedValue);
        }
    }
    writeValue(value) {
        this.selectedValue = value;
        if (value) {
            this._getNgModelType();
        }
        this.setSelectedNodes();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouch = fn;
    }
    onDocumentClick(event) {
        event.stopPropagation();
        if (!this.elementRef.nativeElement.contains(event.target) && this.expandTreeSelectOptions) {
            this.expandTreeSelectOptions = false;
        }
    }
    ngOnInit() {
        this.positions = getFlexiblePositions('bottom', 4);
        this.isMulti = this.thyMultiple;
        this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
        this.setSelectedNodes();
        this.initialled = true;
        this.init();
    }
    get selectedValueObject() {
        return this.thyMultiple ? this.selectedNodes : this.selectedNode;
    }
    searchValue(searchText) {
        this.treeNodes = filterTreeData(this.originTreeNodes, searchText.trim(), this.thyShowKey);
    }
    setPosition() {
        this.ngZone.onStable
            .asObservable()
            .pipe(take(1))
            .subscribe(() => {
            this.cdkConnectedOverlay.overlayRef.updatePosition();
        });
    }
    init() {
        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
    }
    flattenNodes(nodes = [], resultNodes = [], parentPrimaryValue = []) {
        resultNodes = resultNodes.concat(nodes);
        let nodesLeafs = [];
        (nodes || []).forEach(item => {
            item.parentValues = parentPrimaryValue;
            item.level = item.parentValues.length;
            if (item.children && isArray(item.children)) {
                const nodeLeafs = this.flattenNodes(item.children, resultNodes, [...parentPrimaryValue, item[this.thyPrimaryKey]]);
                nodesLeafs = [...nodesLeafs, ...nodeLeafs];
            }
        });
        return [...nodes, ...nodesLeafs];
    }
    _findTreeNode(value) {
        return (this.flattenTreeNodes || []).find(item => item[this.thyPrimaryKey] === value);
    }
    getShowNodeName() {
        if (this.thyShowWholeName) {
            let wholeName = '';
            (this.selectedNode.parentValues || []).forEach((item, index) => {
                const node = this._findTreeNode(item);
                wholeName = `${wholeName}${node[this.thyShowKey]} > `;
            });
            return `${wholeName}${this.selectedNode[this.thyShowKey]}`;
        }
        else {
            return this.selectedNode[this.thyShowKey];
        }
    }
    setSelectedNodes() {
        if (this.selectedValue) {
            // 多选数据初始化
            if (this.thyMultiple) {
                if (this.selectedValue.length > 0) {
                    if (this.valueIsObject && Object.keys(this.selectedValue[0]).indexOf(this.thyPrimaryKey) >= 0) {
                        this.selectedNodes = this.selectedValue.map((item) => {
                            return this._findTreeNode(item[this.thyPrimaryKey]);
                        });
                    }
                    else {
                        this.selectedNodes = this.selectedValue.map((item) => {
                            return this._findTreeNode(item);
                        });
                    }
                }
            }
            else {
                // 单选数据初始化
                if (this.valueIsObject) {
                    if (Object.keys(this.selectedValue).indexOf(this.thyPrimaryKey) >= 0) {
                        this.selectedNode = this._findTreeNode(this.selectedValue[this.thyPrimaryKey]);
                    }
                }
                else {
                    this.selectedNode = this._findTreeNode(this.selectedValue);
                }
            }
        }
        else {
            this.selectedNodes = [];
            this.selectedNode = null;
        }
    }
    openSelectPop() {
        if (this.thyDisable) {
            return;
        }
        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
        this.expandTreeSelectOptions = !this.expandTreeSelectOptions;
    }
    close() {
        this.expandTreeSelectOptions = false;
    }
    clearSelectedValue(event) {
        event.stopPropagation();
        this.selectedValue = null;
        this.selectedNode = null;
        this.selectedNodes = [];
        this.onModelChange(this.selectedValue);
    }
    _changeSelectValue() {
        if (this.valueIsObject) {
            this.selectedValue = this.thyMultiple ? this.selectedNodes : this.selectedNode;
        }
        else {
            this.selectedValue = this.thyMultiple
                ? this.selectedNodes.map(item => item[this.thyPrimaryKey])
                : this.selectedNode[this.thyPrimaryKey];
        }
        this.onModelChange(this.selectedValue);
    }
    removeMultipleSelectedNode(event) {
        this.removeSelectedNode(event.item, event.$event);
    }
    // thyMultiple = true 时，移除数据时调用
    removeSelectedNode(node, event) {
        if (event) {
            event.stopPropagation();
        }
        if (this.thyDisable) {
            return;
        }
        if (this.thyMultiple) {
            this.selectedNodes = produce(this.selectedNodes).remove((item) => {
                return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];
            });
            this._changeSelectValue();
        }
    }
    selectNode(node) {
        if (!this.thyMultiple) {
            this.selectedNode = node;
            this.expandTreeSelectOptions = false;
        }
        else {
            if (this.selectedNodes.find(item => {
                return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];
            })) {
                this.removeSelectedNode(node);
            }
            else {
                this.selectedNodes = produce(this.selectedNodes).add(node);
            }
        }
        this._changeSelectValue();
    }
    getNodeChildren(node) {
        const result = this.thyGetNodeChildren(node);
        if (result && result.subscribe) {
            result.pipe().subscribe((data) => {
                const nodes = this.flattenNodes(data, this.flattenTreeNodes, [...node.parentValues, node[this.thyPrimaryKey]]);
                const otherNodes = nodes.filter((item) => {
                    return !this.flattenTreeNodes.find(hasItem => {
                        return hasItem[this.thyPrimaryKey] === item[this.thyPrimaryKey];
                    });
                });
                this.flattenTreeNodes = [...this.flattenTreeNodes, ...otherNodes];
                node.children = data;
            });
            return result;
        }
    }
}
ThyTreeSelectComponent.ɵfac = function ThyTreeSelectComponent_Factory(t) { return new (t || ThyTreeSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ThyTreeSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTreeSelectComponent, selectors: [["thy-tree-select"]], contentQueries: function ThyTreeSelectComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thyTreeSelectTriggerDisplayRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeTemplateRef = _t.first);
    } }, viewQuery: function ThyTreeSelectComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(CdkOverlayOrigin, true);
        ɵngcc0.ɵɵstaticViewQuery(CdkConnectedOverlay, true);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cdkOverlayOrigin = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cdkConnectedOverlay = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customDisplayTemplate = _t.first);
    } }, hostVars: 8, hostBindings: function ThyTreeSelectComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyTreeSelectComponent_click_HostBindingHandler($event) { return ctx.onDocumentClick($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-select-custom", ctx.treeSelectClass)("thy-select", ctx.isTreeSelect)("menu-is-opened", ctx.expandTreeSelectOptions)("thy-select-custom--multiple", ctx.isMulti);
    } }, inputs: { thyPrimaryKey: "thyPrimaryKey", thyShowKey: "thyShowKey", thyChildCountKey: "thyChildCountKey", thyMultiple: "thyMultiple", thyDisable: "thyDisable", thyPlaceholder: "thyPlaceholder", thyEmptyOptionsText: "thyEmptyOptionsText", thyHiddenNodeKey: "thyHiddenNodeKey", thyDisableNodeKey: "thyDisableNodeKey", thyAsyncNode: "thyAsyncNode", thyShowWholeName: "thyShowWholeName", thyShowSearch: "thyShowSearch", thyHiddenNodeFn: "thyHiddenNodeFn", thyDisableNodeFn: "thyDisableNodeFn", thyGetNodeChildren: "thyGetNodeChildren", thyTreeNodes: "thyTreeNodes", thyIconType: "thyIconType", thyAllowClear: "thyAllowClear", thySize: "thySize" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThyTreeSelectComponent),
                multi: true
            }
        ])], decls: 5, vars: 14, consts: [["cdkOverlayOrigin", "", "thySelectControl", "", 3, "thyPanelOpened", "thySelectedOptions", "thyIsMultiple", "thyAllowClear", "thySize", "thyPlaceholder", "customDisplayTemplate", "thyShowSearch", "thyDisabled", "click", "thyOnClear", "thyOnRemove", "thyOnSearch"], ["origin", "cdkOverlayOrigin"], ["customDisplayTemplate", ""], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayWidth", "cdkConnectedOverlayOpen", "detach"], [4, "ngIf", "ngIfElse"], ["noneTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "treeNodes"]], template: function ThyTreeSelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("click", function ThyTreeSelectComponent_Template_div_click_0_listener() { return ctx.openSelectPop(); })("thyOnClear", function ThyTreeSelectComponent_Template_div_thyOnClear_0_listener($event) { return ctx.clearSelectedValue($event); })("thyOnRemove", function ThyTreeSelectComponent_Template_div_thyOnRemove_0_listener($event) { return ctx.removeMultipleSelectedNode($event); })("thyOnSearch", function ThyTreeSelectComponent_Template_div_thyOnSearch_0_listener($event) { return ctx.searchValue($event); });
        ɵngcc0.ɵɵtemplate(2, ThyTreeSelectComponent_ng_template_2_Template, 3, 2, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ThyTreeSelectComponent_ng_template_4_Template, 1, 1, "ng-template", 3);
        ɵngcc0.ɵɵlistener("detach", function ThyTreeSelectComponent_Template_ng_template_detach_4_listener() { return ctx.close(); });
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("thyPanelOpened", ctx.expandTreeSelectOptions)("thySelectedOptions", ctx.selectedValueObject)("thyIsMultiple", ctx.thyMultiple)("thyAllowClear", ctx.thyAllowClear)("thySize", ctx.thySize)("thyPlaceholder", ctx.placeholder)("customDisplayTemplate", _r1)("thyShowSearch", ctx.thyShowSearch)("thyDisabled", ctx.thyDisable);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("cdkConnectedOverlayHasBackdrop", false)("cdkConnectedOverlayPositions", ctx.positions)("cdkConnectedOverlayOrigin", _r0)("cdkConnectedOverlayWidth", ctx.cdkConnectOverlayWidth)("cdkConnectedOverlayOpen", ctx.expandTreeSelectOptions);
    } }, encapsulation: 2 });
ThyTreeSelectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
ThyTreeSelectComponent.propDecorators = {
    treeSelectClass: [{ type: HostBinding, args: ['class.thy-select-custom',] }],
    isTreeSelect: [{ type: HostBinding, args: ['class.thy-select',] }],
    expandTreeSelectOptions: [{ type: HostBinding, args: ['class.menu-is-opened',] }],
    isMulti: [{ type: HostBinding, args: ['class.thy-select-custom--multiple',] }],
    thyTreeSelectTriggerDisplayRef: [{ type: ContentChild, args: ['thyTreeSelectTriggerDisplay',] }],
    treeNodeTemplateRef: [{ type: ContentChild, args: ['treeNodeTemplate',] }],
    cdkOverlayOrigin: [{ type: ViewChild, args: [CdkOverlayOrigin, { static: true },] }],
    cdkConnectedOverlay: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: true },] }],
    customDisplayTemplate: [{ type: ViewChild, args: ['customDisplayTemplate', { static: true },] }],
    thyTreeNodes: [{ type: Input }],
    thyPrimaryKey: [{ type: Input }],
    thyShowKey: [{ type: Input }],
    thyChildCountKey: [{ type: Input }],
    thyAllowClear: [{ type: Input }],
    thyMultiple: [{ type: Input }],
    thyDisable: [{ type: Input }],
    thyPlaceholder: [{ type: Input }],
    thySize: [{ type: Input }],
    thyEmptyOptionsText: [{ type: Input }],
    thyHiddenNodeKey: [{ type: Input }],
    thyDisableNodeKey: [{ type: Input }],
    thyAsyncNode: [{ type: Input }],
    thyShowWholeName: [{ type: Input }],
    thyShowSearch: [{ type: Input }],
    thyIconType: [{ type: Input }],
    thyHiddenNodeFn: [{ type: Input }],
    thyDisableNodeFn: [{ type: Input }],
    thyGetNodeChildren: [{ type: Input }],
    onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTreeSelectComponent, [{
        type: Component,
        args: [{
                selector: 'thy-tree-select',
                template: "<div\n  cdkOverlayOrigin\n  thySelectControl\n  (click)=\"openSelectPop()\"\n  #origin=\"cdkOverlayOrigin\"\n  [thyPanelOpened]=\"expandTreeSelectOptions\"\n  [thySelectedOptions]=\"selectedValueObject\"\n  [thyIsMultiple]=\"thyMultiple\"\n  [thyAllowClear]=\"thyAllowClear\"\n  [thySize]=\"thySize\"\n  [thyPlaceholder]=\"placeholder\"\n  [customDisplayTemplate]=\"customDisplayTemplate\"\n  [thyShowSearch]=\"thyShowSearch\"\n  [thyDisabled]=\"thyDisable\"\n  (thyOnClear)=\"clearSelectedValue($event)\"\n  (thyOnRemove)=\"removeMultipleSelectedNode($event)\"\n  (thyOnSearch)=\"searchValue($event)\"\n>\n  <ng-template #customDisplayTemplate let-node>\n    <ng-container *ngIf=\"thyTreeSelectTriggerDisplayRef; else noneTemplate\">\n      <ng-template [ngTemplateOutlet]=\"thyTreeSelectTriggerDisplayRef\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n    </ng-container>\n    <ng-template #noneTemplate>\n      {{ node[thyShowKey] }}\n    </ng-template>\n  </ng-template>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayHasBackdrop]=\"false\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayWidth]=\"cdkConnectOverlayWidth\"\n  [cdkConnectedOverlayOpen]=\"expandTreeSelectOptions\"\n  (detach)=\"close()\"\n>\n  <thy-tree-select-nodes [treeNodes]=\"treeNodes\"></thy-tree-select-nodes>\n</ng-template>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyTreeSelectComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { treeSelectClass: [{
            type: HostBinding,
            args: ['class.thy-select-custom']
        }], isTreeSelect: [{
            type: HostBinding,
            args: ['class.thy-select']
        }], expandTreeSelectOptions: [{
            type: HostBinding,
            args: ['class.menu-is-opened']
        }], isMulti: [{
            type: HostBinding,
            args: ['class.thy-select-custom--multiple']
        }], thyPrimaryKey: [{
            type: Input
        }], thyShowKey: [{
            type: Input
        }], thyChildCountKey: [{
            type: Input
        }], thyMultiple: [{
            type: Input
        }], thyDisable: [{
            type: Input
        }], thyPlaceholder: [{
            type: Input
        }], thyEmptyOptionsText: [{
            type: Input
        }], thyHiddenNodeKey: [{
            type: Input
        }], thyDisableNodeKey: [{
            type: Input
        }], thyAsyncNode: [{
            type: Input
        }], thyShowWholeName: [{
            type: Input
        }], thyShowSearch: [{
            type: Input
        }], thyHiddenNodeFn: [{
            type: Input
        }], thyDisableNodeFn: [{
            type: Input
        }], thyGetNodeChildren: [{
            type: Input
        }], thyTreeNodes: [{
            type: Input
        }], thyIconType: [{
            type: Input
        }], onDocumentClick: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }], thyTreeSelectTriggerDisplayRef: [{
            type: ContentChild,
            args: ['thyTreeSelectTriggerDisplay']
        }], treeNodeTemplateRef: [{
            type: ContentChild,
            args: ['treeNodeTemplate']
        }], cdkOverlayOrigin: [{
            type: ViewChild,
            args: [CdkOverlayOrigin, { static: true }]
        }], cdkConnectedOverlay: [{
            type: ViewChild,
            args: [CdkConnectedOverlay, { static: true }]
        }], customDisplayTemplate: [{
            type: ViewChild,
            args: ['customDisplayTemplate', { static: true }]
        }], thyAllowClear: [{
            type: Input
        }], thySize: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
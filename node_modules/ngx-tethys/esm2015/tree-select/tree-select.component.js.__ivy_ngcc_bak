import { getFlexiblePositions } from 'ngx-tethys/core';
import { isArray, isObject, produce, warnDeprecation } from 'ngx-tethys/util';
import { of } from 'rxjs';
import { take } from 'rxjs/operators';
import { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';
import { Component, ContentChild, ElementRef, forwardRef, HostBinding, HostListener, Input, NgZone, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export function filterTreeData(treeNodes, searchText, searchKey = 'name') {
    const filterNodes = (node, result) => {
        if (node[searchKey] && node[searchKey].indexOf(searchText) !== -1) {
            result.push(node);
            return result;
        }
        if (Array.isArray(node.children)) {
            const nodes = node.children.reduce((previous, current) => filterNodes(current, previous), []);
            if (nodes.length) {
                const parentNode = Object.assign(Object.assign({}, node), { children: nodes, expand: true });
                result.push(parentNode);
            }
        }
        return result;
    };
    const treeData = treeNodes.reduce((previous, current) => filterNodes(current, previous), []);
    return treeData;
}
export class ThyTreeSelectComponent {
    constructor(elementRef, renderer, ngZone) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.treeSelectClass = true;
        this.isTreeSelect = true;
        // 菜单是否展开
        this.expandTreeSelectOptions = false;
        this.isMulti = false;
        this.selectedNodes = [];
        this.flattenTreeNodes = [];
        this.cdkConnectOverlayWidth = 0;
        this.icons = {
            expand: 'angle-down',
            collapse: 'angle-right',
            gap: 15
        };
        this.initialled = false;
        this.valueIsObject = false;
        this.thyPrimaryKey = '_id';
        this.thyShowKey = 'name';
        this.thyChildCountKey = 'childCount';
        this.thyMultiple = false;
        this.thyDisable = false;
        this.thyPlaceholder = '请选择节点';
        this.thyEmptyOptionsText = '暂时没有数据可选';
        this.thyHiddenNodeKey = 'hidden';
        this.thyDisableNodeKey = 'disabled';
        this.thyAsyncNode = false;
        this.thyShowWholeName = false;
        this.thyShowSearch = false;
        this.thyHiddenNodeFn = (node) => node.hidden;
        this.thyDisableNodeFn = (node) => node.disabled;
        this.thyGetNodeChildren = (node) => of([]);
        // TODO: 是否可以取消选中的node
        // @Input() thyUnRemoveSelectedNodeFn: Function;
        this.onModelChange = () => { };
        this.onModelTouch = () => { };
    }
    set thyTreeNodes(value) {
        this.treeNodes = value;
        this.originTreeNodes = value;
        if (this.initialled) {
            this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
            this.setSelectedNodes();
        }
    }
    get placeholder() {
        return this.thyPlaceholder;
    }
    set thyIconType(type) {
        warnDeprecation('This parameter has been deprecation');
        // if (type === 'especial') {
        //     this.icons = { expand: 'minus-square', collapse: 'plus-square', gap: 20 };
        // } else {
        //     this.icons = { expand: 'caret-right-down', collapse: 'caret-right', gap: 15 };
        // }
    }
    _getNgModelType() {
        if (this.thyMultiple) {
            this.valueIsObject = !this.selectedValue[0] || isObject(this.selectedValue[0]);
        }
        else {
            this.valueIsObject = isObject(this.selectedValue);
        }
    }
    writeValue(value) {
        this.selectedValue = value;
        if (value) {
            this._getNgModelType();
        }
        this.setSelectedNodes();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouch = fn;
    }
    onDocumentClick(event) {
        event.stopPropagation();
        if (!this.elementRef.nativeElement.contains(event.target) && this.expandTreeSelectOptions) {
            this.expandTreeSelectOptions = false;
        }
    }
    ngOnInit() {
        this.positions = getFlexiblePositions('bottom', 4);
        this.isMulti = this.thyMultiple;
        this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
        this.setSelectedNodes();
        this.initialled = true;
        this.init();
    }
    get selectedValueObject() {
        return this.thyMultiple ? this.selectedNodes : this.selectedNode;
    }
    searchValue(searchText) {
        this.treeNodes = filterTreeData(this.originTreeNodes, searchText.trim(), this.thyShowKey);
    }
    setPosition() {
        this.ngZone.onStable
            .asObservable()
            .pipe(take(1))
            .subscribe(() => {
            this.cdkConnectedOverlay.overlayRef.updatePosition();
        });
    }
    init() {
        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
    }
    flattenNodes(nodes = [], resultNodes = [], parentPrimaryValue = []) {
        resultNodes = resultNodes.concat(nodes);
        let nodesLeafs = [];
        (nodes || []).forEach(item => {
            item.parentValues = parentPrimaryValue;
            item.level = item.parentValues.length;
            if (item.children && isArray(item.children)) {
                const nodeLeafs = this.flattenNodes(item.children, resultNodes, [...parentPrimaryValue, item[this.thyPrimaryKey]]);
                nodesLeafs = [...nodesLeafs, ...nodeLeafs];
            }
        });
        return [...nodes, ...nodesLeafs];
    }
    _findTreeNode(value) {
        return (this.flattenTreeNodes || []).find(item => item[this.thyPrimaryKey] === value);
    }
    getShowNodeName() {
        if (this.thyShowWholeName) {
            let wholeName = '';
            (this.selectedNode.parentValues || []).forEach((item, index) => {
                const node = this._findTreeNode(item);
                wholeName = `${wholeName}${node[this.thyShowKey]} > `;
            });
            return `${wholeName}${this.selectedNode[this.thyShowKey]}`;
        }
        else {
            return this.selectedNode[this.thyShowKey];
        }
    }
    setSelectedNodes() {
        if (this.selectedValue) {
            // 多选数据初始化
            if (this.thyMultiple) {
                if (this.selectedValue.length > 0) {
                    if (this.valueIsObject && Object.keys(this.selectedValue[0]).indexOf(this.thyPrimaryKey) >= 0) {
                        this.selectedNodes = this.selectedValue.map((item) => {
                            return this._findTreeNode(item[this.thyPrimaryKey]);
                        });
                    }
                    else {
                        this.selectedNodes = this.selectedValue.map((item) => {
                            return this._findTreeNode(item);
                        });
                    }
                }
            }
            else {
                // 单选数据初始化
                if (this.valueIsObject) {
                    if (Object.keys(this.selectedValue).indexOf(this.thyPrimaryKey) >= 0) {
                        this.selectedNode = this._findTreeNode(this.selectedValue[this.thyPrimaryKey]);
                    }
                }
                else {
                    this.selectedNode = this._findTreeNode(this.selectedValue);
                }
            }
        }
        else {
            this.selectedNodes = [];
            this.selectedNode = null;
        }
    }
    openSelectPop() {
        if (this.thyDisable) {
            return;
        }
        this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
        this.expandTreeSelectOptions = !this.expandTreeSelectOptions;
    }
    close() {
        this.expandTreeSelectOptions = false;
    }
    clearSelectedValue(event) {
        event.stopPropagation();
        this.selectedValue = null;
        this.selectedNode = null;
        this.selectedNodes = [];
        this.onModelChange(this.selectedValue);
    }
    _changeSelectValue() {
        if (this.valueIsObject) {
            this.selectedValue = this.thyMultiple ? this.selectedNodes : this.selectedNode;
        }
        else {
            this.selectedValue = this.thyMultiple
                ? this.selectedNodes.map(item => item[this.thyPrimaryKey])
                : this.selectedNode[this.thyPrimaryKey];
        }
        this.onModelChange(this.selectedValue);
    }
    removeMultipleSelectedNode(event) {
        this.removeSelectedNode(event.item, event.$event);
    }
    // thyMultiple = true 时，移除数据时调用
    removeSelectedNode(node, event) {
        if (event) {
            event.stopPropagation();
        }
        if (this.thyDisable) {
            return;
        }
        if (this.thyMultiple) {
            this.selectedNodes = produce(this.selectedNodes).remove((item) => {
                return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];
            });
            this._changeSelectValue();
        }
    }
    selectNode(node) {
        if (!this.thyMultiple) {
            this.selectedNode = node;
            this.expandTreeSelectOptions = false;
        }
        else {
            if (this.selectedNodes.find(item => {
                return item[this.thyPrimaryKey] === node[this.thyPrimaryKey];
            })) {
                this.removeSelectedNode(node);
            }
            else {
                this.selectedNodes = produce(this.selectedNodes).add(node);
            }
        }
        this._changeSelectValue();
    }
    getNodeChildren(node) {
        const result = this.thyGetNodeChildren(node);
        if (result && result.subscribe) {
            result.pipe().subscribe((data) => {
                const nodes = this.flattenNodes(data, this.flattenTreeNodes, [...node.parentValues, node[this.thyPrimaryKey]]);
                const otherNodes = nodes.filter((item) => {
                    return !this.flattenTreeNodes.find(hasItem => {
                        return hasItem[this.thyPrimaryKey] === item[this.thyPrimaryKey];
                    });
                });
                this.flattenTreeNodes = [...this.flattenTreeNodes, ...otherNodes];
                node.children = data;
            });
            return result;
        }
    }
}
ThyTreeSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tree-select',
                template: "<div\n  cdkOverlayOrigin\n  thySelectControl\n  (click)=\"openSelectPop()\"\n  #origin=\"cdkOverlayOrigin\"\n  [thyPanelOpened]=\"expandTreeSelectOptions\"\n  [thySelectedOptions]=\"selectedValueObject\"\n  [thyIsMultiple]=\"thyMultiple\"\n  [thyAllowClear]=\"thyAllowClear\"\n  [thySize]=\"thySize\"\n  [thyPlaceholder]=\"placeholder\"\n  [customDisplayTemplate]=\"customDisplayTemplate\"\n  [thyShowSearch]=\"thyShowSearch\"\n  [thyDisabled]=\"thyDisable\"\n  (thyOnClear)=\"clearSelectedValue($event)\"\n  (thyOnRemove)=\"removeMultipleSelectedNode($event)\"\n  (thyOnSearch)=\"searchValue($event)\"\n>\n  <ng-template #customDisplayTemplate let-node>\n    <ng-container *ngIf=\"thyTreeSelectTriggerDisplayRef; else noneTemplate\">\n      <ng-template [ngTemplateOutlet]=\"thyTreeSelectTriggerDisplayRef\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n    </ng-container>\n    <ng-template #noneTemplate>\n      {{ node[thyShowKey] }}\n    </ng-template>\n  </ng-template>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayHasBackdrop]=\"false\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayWidth]=\"cdkConnectOverlayWidth\"\n  [cdkConnectedOverlayOpen]=\"expandTreeSelectOptions\"\n  (detach)=\"close()\"\n>\n  <thy-tree-select-nodes [treeNodes]=\"treeNodes\"></thy-tree-select-nodes>\n</ng-template>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyTreeSelectComponent),
                        multi: true
                    }
                ]
            },] }
];
ThyTreeSelectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
ThyTreeSelectComponent.propDecorators = {
    treeSelectClass: [{ type: HostBinding, args: ['class.thy-select-custom',] }],
    isTreeSelect: [{ type: HostBinding, args: ['class.thy-select',] }],
    expandTreeSelectOptions: [{ type: HostBinding, args: ['class.menu-is-opened',] }],
    isMulti: [{ type: HostBinding, args: ['class.thy-select-custom--multiple',] }],
    thyTreeSelectTriggerDisplayRef: [{ type: ContentChild, args: ['thyTreeSelectTriggerDisplay',] }],
    treeNodeTemplateRef: [{ type: ContentChild, args: ['treeNodeTemplate',] }],
    cdkOverlayOrigin: [{ type: ViewChild, args: [CdkOverlayOrigin, { static: true },] }],
    cdkConnectedOverlay: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: true },] }],
    customDisplayTemplate: [{ type: ViewChild, args: ['customDisplayTemplate', { static: true },] }],
    thyTreeNodes: [{ type: Input }],
    thyPrimaryKey: [{ type: Input }],
    thyShowKey: [{ type: Input }],
    thyChildCountKey: [{ type: Input }],
    thyAllowClear: [{ type: Input }],
    thyMultiple: [{ type: Input }],
    thyDisable: [{ type: Input }],
    thyPlaceholder: [{ type: Input }],
    thySize: [{ type: Input }],
    thyEmptyOptionsText: [{ type: Input }],
    thyHiddenNodeKey: [{ type: Input }],
    thyDisableNodeKey: [{ type: Input }],
    thyAsyncNode: [{ type: Input }],
    thyShowWholeName: [{ type: Input }],
    thyShowSearch: [{ type: Input }],
    thyIconType: [{ type: Input }],
    thyHiddenNodeFn: [{ type: Input }],
    thyDisableNodeFn: [{ type: Input }],
    thyGetNodeChildren: [{ type: Input }],
    onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,
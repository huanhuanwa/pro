import { Router } from '@angular/router';
import { helpers } from 'ngx-tethys/util';
import { DOCUMENT } from '@angular/common';
import { ThyPopover } from 'ngx-tethys/popover';
import { ThyGuiderManager } from './guider-manager';
import { ThyGuiderStepRef } from './guider-step-ref';
import { ReplaySubject, Subject } from 'rxjs';
import { ThyGuiderConfig } from './guider.class';
import { Inject, NgZone, RendererFactory2 } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
export class ThyGuiderRef {
    constructor(config, rendererFactory, popover, router, guiderManager, ngZone, overlay, document) {
        this.config = config;
        this.rendererFactory = rendererFactory;
        this.popover = popover;
        this.router = router;
        this.guiderManager = guiderManager;
        this.ngZone = ngZone;
        this.overlay = overlay;
        this.document = document;
        this.stepChange$ = new ReplaySubject();
        this.guiderEnded$ = new Subject();
        this.closed$ = new Subject();
        this.targetClicked$ = new Subject();
        this.stepsRef = config.steps.map((step, index) => {
            return new ThyGuiderStepRef(step, index, this.rendererFactory, this.popover, this.guiderManager, this.overlay, this.document);
        });
        this.steps = config.steps;
    }
    stepChange() {
        return this.stepChange$.asObservable();
    }
    ended() {
        return this.guiderEnded$;
    }
    closed() {
        return this.closed$;
    }
    targetClicked() {
        return this.targetClicked$;
    }
    start(startWith) {
        this.to(startWith);
        return this.stepChange();
    }
    next() {
        if (this.currentStepIndex + 1 > this.steps.length) {
            return;
        }
        this.to(this.currentStepIndex + 1);
    }
    previous() {
        if (this.currentStepIndex - 1 < 0) {
            return;
        }
        this.to(this.currentStepIndex - 1);
    }
    active(indexOrKey) {
        if (helpers.isNumber(indexOrKey)) {
            this.to(indexOrKey);
            return;
        }
        if (helpers.isString(indexOrKey)) {
            const index = this.steps.findIndex(step => step.key === indexOrKey);
            this.to(index);
            return;
        }
    }
    to(index) {
        this.removeExistedStep();
        if (!helpers.isNumber(index) || index >= this.steps.length || index < 0 || Number.isNaN(index)) {
            index = 0;
        }
        this.currentStep = this.steps[index];
        this.currentStepIndex = index;
        // update guiderManager
        this.guiderManager.updateActive(this.currentStep.key, this);
        if (this.currentStep.route && this.currentStep.route !== this.router.url) {
            this.ngZone.run(() => {
                this.router.navigateByUrl(this.currentStep.route);
            });
            return;
        }
        setTimeout(() => {
            this.drawStep();
            this.notifyStepClicked();
        }, 0);
    }
    close() {
        var _a;
        this.removeManagerActiveKey();
        (_a = this.stepsRef[this.currentStepIndex]) === null || _a === void 0 ? void 0 : _a.dispose();
        this.closed$.next(this.currentStep);
    }
    end() {
        this.close();
        this.guiderEnded$.next(this.currentStep);
        this.notifyGuiderIsFinished();
    }
    removeManagerActiveKey() {
        const activeKey = this.guiderManager.getActive().key;
        if (activeKey && this.steps.some(step => step.key === activeKey)) {
            this.guiderManager.updateActive('', undefined);
        }
    }
    notifyStepClicked() {
        this.stepChange$.next(this.currentStep);
    }
    drawStep() {
        this.removeExistedStep();
        this.stepsRef[this.currentStepIndex].show(this);
    }
    notifyGuiderIsFinished() {
        this.stepChange$.complete();
        // this.targetClicked().unsubscribe();
        this.currentStepIndex = 0;
    }
    removeExistedStep() {
        var _a;
        (_a = this.stepsRef[this.currentStepIndex]) === null || _a === void 0 ? void 0 : _a.dispose();
    }
}
ThyGuiderRef.ctorParameters = () => [
    { type: ThyGuiderConfig },
    { type: RendererFactory2 },
    { type: ThyPopover },
    { type: Router },
    { type: ThyGuiderManager },
    { type: NgZone },
    { type: Overlay },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGVyLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ndWlkZXIvZ3VpZGVyLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFjLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBaUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFL0MsTUFBTSxPQUFPLFlBQVk7SUFpQnJCLFlBQ1csTUFBdUIsRUFDdEIsZUFBaUMsRUFDakMsT0FBbUIsRUFDbkIsTUFBYyxFQUNkLGFBQStCLEVBQy9CLE1BQWMsRUFDZCxPQUFnQixFQUNFLFFBQWE7UUFQaEMsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDdEIsb0JBQWUsR0FBZixlQUFlLENBQWtCO1FBQ2pDLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNFLGFBQVEsR0FB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QVMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLEVBQUU7WUFDOUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0wsQ0FBQztJQUVPLGlCQUFpQjtRQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLFFBQVE7UUFDWixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sc0JBQXNCO1FBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUIsc0NBQXNDO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVPLGlCQUFpQjs7UUFDckIsTUFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQywwQ0FBRSxPQUFPLEdBQUc7SUFDcEQsQ0FBQzs7O1lBakpJLGVBQWU7WUFDQyxnQkFBZ0I7WUFMaEMsVUFBVTtZQUhWLE1BQU07WUFJTixnQkFBZ0I7WUFJUixNQUFNO1lBQ2QsT0FBTzs0Q0EyQlAsTUFBTSxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgaGVscGVycyB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUaHlQb3BvdmVyIH0gZnJvbSAnbmd4LXRldGh5cy9wb3BvdmVyJztcbmltcG9ydCB7IFRoeUd1aWRlck1hbmFnZXIgfSBmcm9tICcuL2d1aWRlci1tYW5hZ2VyJztcbmltcG9ydCB7IFRoeUd1aWRlclN0ZXBSZWYgfSBmcm9tICcuL2d1aWRlci1zdGVwLXJlZic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUaHlHdWlkZXJDb25maWcsIFRoeUd1aWRlclN0ZXAgfSBmcm9tICcuL2d1aWRlci5jbGFzcyc7XG5pbXBvcnQgeyBJbmplY3QsIE5nWm9uZSwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcblxuZXhwb3J0IGNsYXNzIFRoeUd1aWRlclJlZiB7XG4gICAgcHVibGljIHN0ZXBzOiBUaHlHdWlkZXJTdGVwW107XG5cbiAgICBwcml2YXRlIHN0ZXBDaGFuZ2UkOiBSZXBsYXlTdWJqZWN0PFRoeUd1aWRlclN0ZXA+ID0gbmV3IFJlcGxheVN1YmplY3Q8VGh5R3VpZGVyU3RlcD4oKTtcblxuICAgIHByaXZhdGUgZ3VpZGVyRW5kZWQkID0gbmV3IFN1YmplY3QoKTtcblxuICAgIHByaXZhdGUgY2xvc2VkJCA9IG5ldyBTdWJqZWN0PFRoeUd1aWRlclN0ZXA+KCk7XG5cbiAgICBwcml2YXRlIHRhcmdldENsaWNrZWQkID0gbmV3IFN1YmplY3Q8VGh5R3VpZGVyU3RlcD4oKTtcblxuICAgIHByaXZhdGUgY3VycmVudFN0ZXA6IFRoeUd1aWRlclN0ZXA7XG5cbiAgICBwcml2YXRlIGN1cnJlbnRTdGVwSW5kZXg6IG51bWJlcjtcblxuICAgIHByaXZhdGUgc3RlcHNSZWY6IFRoeUd1aWRlclN0ZXBSZWZbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgY29uZmlnOiBUaHlHdWlkZXJDb25maWcsXG4gICAgICAgIHByaXZhdGUgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLFxuICAgICAgICBwcml2YXRlIHBvcG92ZXI6IFRoeVBvcG92ZXIsXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgZ3VpZGVyTWFuYWdlcjogVGh5R3VpZGVyTWFuYWdlcixcbiAgICAgICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgcHJpdmF0ZSBvdmVybGF5OiBPdmVybGF5LFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnlcbiAgICApIHtcbiAgICAgICAgdGhpcy5zdGVwc1JlZiA9IGNvbmZpZy5zdGVwcy5tYXAoKHN0ZXAsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRoeUd1aWRlclN0ZXBSZWYoc3RlcCwgaW5kZXgsIHRoaXMucmVuZGVyZXJGYWN0b3J5LCB0aGlzLnBvcG92ZXIsIHRoaXMuZ3VpZGVyTWFuYWdlciwgdGhpcy5vdmVybGF5LCB0aGlzLmRvY3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RlcHMgPSBjb25maWcuc3RlcHM7XG4gICAgfVxuXG4gICAgcHVibGljIHN0ZXBDaGFuZ2UoKTogT2JzZXJ2YWJsZTxUaHlHdWlkZXJTdGVwPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBDaGFuZ2UkLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbmRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3VpZGVyRW5kZWQkO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb3NlZCQ7XG4gICAgfVxuXG4gICAgcHVibGljIHRhcmdldENsaWNrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhcmdldENsaWNrZWQkO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGFydChzdGFydFdpdGg/OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy50byhzdGFydFdpdGgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0ZXBJbmRleCArIDEgPiB0aGlzLnN0ZXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG8odGhpcy5jdXJyZW50U3RlcEluZGV4ICsgMSk7XG4gICAgfVxuXG4gICAgcHVibGljIHByZXZpb3VzKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RlcEluZGV4IC0gMSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG8odGhpcy5jdXJyZW50U3RlcEluZGV4IC0gMSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFjdGl2ZShpbmRleE9yS2V5OiBudW1iZXIgfCBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKGhlbHBlcnMuaXNOdW1iZXIoaW5kZXhPcktleSkpIHtcbiAgICAgICAgICAgIHRoaXMudG8oaW5kZXhPcktleSBhcyBudW1iZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWxwZXJzLmlzU3RyaW5nKGluZGV4T3JLZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RlcHMuZmluZEluZGV4KHN0ZXAgPT4gc3RlcC5rZXkgPT09IChpbmRleE9yS2V5IGFzIHN0cmluZykpO1xuICAgICAgICAgICAgdGhpcy50byhpbmRleCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFeGlzdGVkU3RlcCgpO1xuXG4gICAgICAgIGlmICghaGVscGVycy5pc051bWJlcihpbmRleCkgfHwgaW5kZXggPj0gdGhpcy5zdGVwcy5sZW5ndGggfHwgaW5kZXggPCAwIHx8IE51bWJlci5pc05hTihpbmRleCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gdGhpcy5zdGVwc1tpbmRleF07XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXBJbmRleCA9IGluZGV4O1xuXG4gICAgICAgIC8vIHVwZGF0ZSBndWlkZXJNYW5hZ2VyXG4gICAgICAgIHRoaXMuZ3VpZGVyTWFuYWdlci51cGRhdGVBY3RpdmUodGhpcy5jdXJyZW50U3RlcC5rZXksIHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RlcC5yb3V0ZSAmJiB0aGlzLmN1cnJlbnRTdGVwLnJvdXRlICE9PSB0aGlzLnJvdXRlci51cmwpIHtcbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh0aGlzLmN1cnJlbnRTdGVwLnJvdXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kcmF3U3RlcCgpO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlTdGVwQ2xpY2tlZCgpO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTWFuYWdlckFjdGl2ZUtleSgpO1xuICAgICAgICB0aGlzLnN0ZXBzUmVmW3RoaXMuY3VycmVudFN0ZXBJbmRleF0/LmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5jbG9zZWQkLm5leHQodGhpcy5jdXJyZW50U3RlcCk7XG4gICAgfVxuXG4gICAgcHVibGljIGVuZCgpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB0aGlzLmd1aWRlckVuZGVkJC5uZXh0KHRoaXMuY3VycmVudFN0ZXApO1xuICAgICAgICB0aGlzLm5vdGlmeUd1aWRlcklzRmluaXNoZWQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZU1hbmFnZXJBY3RpdmVLZXkoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUtleSA9IHRoaXMuZ3VpZGVyTWFuYWdlci5nZXRBY3RpdmUoKS5rZXk7XG4gICAgICAgIGlmIChhY3RpdmVLZXkgJiYgdGhpcy5zdGVwcy5zb21lKHN0ZXAgPT4gc3RlcC5rZXkgPT09IGFjdGl2ZUtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuZ3VpZGVyTWFuYWdlci51cGRhdGVBY3RpdmUoJycsIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG5vdGlmeVN0ZXBDbGlja2VkKCkge1xuICAgICAgICB0aGlzLnN0ZXBDaGFuZ2UkLm5leHQodGhpcy5jdXJyZW50U3RlcCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkcmF3U3RlcCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFeGlzdGVkU3RlcCgpO1xuICAgICAgICB0aGlzLnN0ZXBzUmVmW3RoaXMuY3VycmVudFN0ZXBJbmRleF0uc2hvdyh0aGlzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vdGlmeUd1aWRlcklzRmluaXNoZWQoKSB7XG4gICAgICAgIHRoaXMuc3RlcENoYW5nZSQuY29tcGxldGUoKTtcbiAgICAgICAgLy8gdGhpcy50YXJnZXRDbGlja2VkKCkudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RlcEluZGV4ID0gMDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUV4aXN0ZWRTdGVwKCkge1xuICAgICAgICB0aGlzLnN0ZXBzUmVmW3RoaXMuY3VycmVudFN0ZXBJbmRleF0/LmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iXX0=
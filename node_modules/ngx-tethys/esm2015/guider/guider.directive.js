import { ThyGuiderManager } from './guider-manager';
import { Directive, ElementRef, Input, NgZone } from '@angular/core';
import { take } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './guider-manager';
export class ThyGuiderTargetDirective {
    constructor(guiderManager, el, ngZone) {
        this.guiderManager = guiderManager;
        this.el = el;
        this.ngZone = ngZone;
    }
    ngOnInit() {
        this.guiderManager.addStepTarget(this.target, this.el.nativeElement);
        this.ngZone.onStable.pipe(take(1)).subscribe(() => {
            const { key, guiderRef } = this.guiderManager.getActive();
            if (key === this.target) {
                const index = guiderRef.steps.findIndex(step => step.key === this.target);
                this.ngZone.run(() => {
                    guiderRef.active(index);
                });
            }
        });
    }
    ngAfterViewInit() { }
    ngOnDestroy() {
        const { guiderRef } = this.guiderManager.getActive();
        if (guiderRef) {
            guiderRef.close();
        }
        this.guiderManager.removeStepTarget(this.target);
    }
}
ThyGuiderTargetDirective.ɵfac = function ThyGuiderTargetDirective_Factory(t) { return new (t || ThyGuiderTargetDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyGuiderManager), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ThyGuiderTargetDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyGuiderTargetDirective, selectors: [["", "thyGuiderTarget", ""]], inputs: { target: ["thyGuiderTarget", "target"] }, exportAs: ["thyGuiderTarget"] });
ThyGuiderTargetDirective.ctorParameters = () => [
    { type: ThyGuiderManager },
    { type: ElementRef },
    { type: NgZone }
];
ThyGuiderTargetDirective.propDecorators = {
    target: [{ type: Input, args: ['thyGuiderTarget',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyGuiderTargetDirective, [{
        type: Directive,
        args: [{ selector: '[thyGuiderTarget]', exportAs: 'thyGuiderTarget' }]
    }], function () { return [{ type: ɵngcc1.ThyGuiderManager }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { target: [{
            type: Input,
            args: ['thyGuiderTarget']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2d1aWRlci9ndWlkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUd0QyxNQUFNLE9BQU8sd0JBQXdCO0FBQUcsSUFJcEMsWUFBb0IsYUFBK0IsRUFBVSxFQUFjLEVBQVUsTUFBYztBQUFJLFFBQW5GLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtBQUFDLFFBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLElBQUUsQ0FBQztBQUMzRyxJQUNJLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM3RSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQzFELFlBQVksTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3RFLFlBQVksSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNyQyxnQkFBZ0IsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxRixnQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO0FBQ3JDLG9CQUFvQixTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztBQUNuQixhQUFhO0FBQ2IsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0ksZUFBZSxLQUFJLENBQUM7QUFDeEIsSUFDSSxXQUFXO0FBQ2YsUUFBUSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUM3RCxRQUFRLElBQUksU0FBUyxFQUFFO0FBQ3ZCLFlBQVksU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzlCLFNBQVM7QUFDVCxRQUFRLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELElBQUksQ0FBQztBQUNMO29EQTdCQyxTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFO3lOQUNwRTtBQUFDO0FBQWtELFlBTC9DLGdCQUFnQjtBQUFJLFlBQ00sVUFBVTtBQUFJLFlBQXdCLE1BQU07QUFBRztBQUFHO0FBQzVELHFCQUlwQixLQUFLLFNBQUMsaUJBQWlCO0FBQ3hCOzs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaHlHdWlkZXJNYW5hZ2VyIH0gZnJvbSAnLi9ndWlkZXItbWFuYWdlcic7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbdGh5R3VpZGVyVGFyZ2V0XScsIGV4cG9ydEFzOiAndGh5R3VpZGVyVGFyZ2V0JyB9KVxuZXhwb3J0IGNsYXNzIFRoeUd1aWRlclRhcmdldERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBASW5wdXQoJ3RoeUd1aWRlclRhcmdldCcpXG4gICAgdGFyZ2V0OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGd1aWRlck1hbmFnZXI6IFRoeUd1aWRlck1hbmFnZXIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5ndWlkZXJNYW5hZ2VyLmFkZFN0ZXBUYXJnZXQodGhpcy50YXJnZXQsIHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIHRoaXMubmdab25lLm9uU3RhYmxlLnBpcGUodGFrZSgxKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCBndWlkZXJSZWYgfSA9IHRoaXMuZ3VpZGVyTWFuYWdlci5nZXRBY3RpdmUoKTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBndWlkZXJSZWYuc3RlcHMuZmluZEluZGV4KHN0ZXAgPT4gc3RlcC5rZXkgPT09IHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBndWlkZXJSZWYuYWN0aXZlKGluZGV4KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge31cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBjb25zdCB7IGd1aWRlclJlZiB9ID0gdGhpcy5ndWlkZXJNYW5hZ2VyLmdldEFjdGl2ZSgpO1xuICAgICAgICBpZiAoZ3VpZGVyUmVmKSB7XG4gICAgICAgICAgICBndWlkZXJSZWYuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmd1aWRlck1hbmFnZXIucmVtb3ZlU3RlcFRhcmdldCh0aGlzLnRhcmdldCk7XG4gICAgfVxufVxuIl19
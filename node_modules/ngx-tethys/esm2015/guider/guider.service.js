import { Router } from '@angular/router';
import { helpers } from 'ngx-tethys/util';
import { DOCUMENT } from '@angular/common';
import { ThyGuiderRef } from './guider-ref';
import { Inject, NgZone } from '@angular/core';
import { ThyPopover } from 'ngx-tethys/popover';
import { ThyGuiderManager } from './guider-manager';
import { Injectable, RendererFactory2 } from '@angular/core';
import { defaultGuiderPositionConfig } from './guider.class';
import { Overlay } from '@angular/cdk/overlay';
import * as i0 from "@angular/core";
import * as i1 from "ngx-tethys/popover";
import * as i2 from "@angular/router";
import * as i3 from "./guider-manager";
import * as i4 from "@angular/cdk/overlay";
import * as i5 from "@angular/common";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/popover';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from './guider-manager';
import * as ɵngcc4 from '@angular/cdk/overlay';
export class ThyGuider {
    constructor(rendererFactory, popover, router, guiderManager, ngZone, overlay, document) {
        this.rendererFactory = rendererFactory;
        this.popover = popover;
        this.router = router;
        this.guiderManager = guiderManager;
        this.ngZone = ngZone;
        this.overlay = overlay;
        this.document = document;
        this.guiderRefs = [];
    }
    create(config) {
        if (!config || !(config === null || config === void 0 ? void 0 : config.steps) || !helpers.isArray(config === null || config === void 0 ? void 0 : config.steps)) {
            throw new Error(`'config.steps' must be an array of length greater than 0`);
        }
        const normalizeConfig = this.normalizeConfig(config);
        this.guiderRef = new ThyGuiderRef(normalizeConfig, this.rendererFactory, this.popover, this.router, this.guiderManager, this.ngZone, this.overlay, this.document);
        this.guiderRef.closed().subscribe(() => {
            const index = this.guiderRefs.findIndex(guiderRef => guiderRef === this.guiderRef);
            this.guiderRefs.splice(index, 1);
        });
        this.guiderRefs.push(this.guiderRef);
        return this.guiderRef;
    }
    normalizeConfig(config) {
        const normalizeConfig = Object.assign({}, defaultGuiderPositionConfig, config);
        normalizeConfig.steps = normalizeConfig.steps.map(step => {
            return this.normalizeStep(step, normalizeConfig);
        });
        return normalizeConfig;
    }
    normalizeStep(step, config) {
        const tempStep = Object.assign({
            hintPlacement: config.hintPlacement,
            hintOffset: config.hintOffset,
            pointOffset: config.pointOffset
        }, step);
        return tempStep;
    }
    close() {
        if (this.guiderRefs.length > 0) {
            const lasGuiderRef = this.guiderRefs[this.guiderRefs.length - 1];
            if (lasGuiderRef) {
                lasGuiderRef.close();
                this.guiderRefs.pop();
            }
        }
    }
}
ThyGuider.ɵfac = function ThyGuider_Factory(t) { return new (t || ThyGuider)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(ɵngcc1.ThyPopover), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc3.ThyGuiderManager), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(DOCUMENT)); };
ThyGuider.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyGuider_Factory() { return new ThyGuider(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.ThyPopover), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ThyGuiderManager), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i4.Overlay), i0.ɵɵinject(i5.DOCUMENT)); }, token: ThyGuider, providedIn: "root" });
ThyGuider.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: ThyPopover },
    { type: Router },
    { type: ThyGuiderManager },
    { type: NgZone },
    { type: Overlay },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyGuider, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }, { type: ɵngcc1.ThyPopover }, { type: ɵngcc2.Router }, { type: ɵngcc3.ThyGuiderManager }, { type: ɵngcc0.NgZone }, { type: ɵngcc4.Overlay }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ndWlkZXIvZ3VpZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM1QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWtDLDJCQUEyQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0YsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9DO0FBRXNCO0FBR1Q7QUFFQztBQUVOO0FBQzJCOzs7Ozs7QUFObkMsTUFBTSxPQUFPLFNBQVM7QUFDdEIsSUFJSSxZQUNxQixlQUFpQyxFQUMxQyxPQUFtQixFQUNuQixNQUFjLEVBQ2QsYUFBK0IsRUFDL0IsTUFBYyxFQUNkLE9BQWdCLEVBQ0UsUUFBYTtBQUM1QyxRQVBzQixvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7QUFBQyxRQUMzQyxZQUFPLEdBQVAsT0FBTyxDQUFZO0FBQUMsUUFDcEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ2Ysa0JBQWEsR0FBYixhQUFhLENBQWtCO0FBQUMsUUFDaEMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ2YsWUFBTyxHQUFQLE9BQU8sQ0FB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Q0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN0QyxhQUFhO0FBQ2IsU0FBUztBQUNULElBQUksQ0FBQztBQUNMO29VQUFDO0FBQ0Qsc1ZBckVLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBSUksWUFSSyxnQkFBZ0I7T0FLakMsVUFBVSxFQUFFLE1BQU0sekJBTG1CLFlBRmhDLFVBQVU7YUFRbEIsYkFSc0IsWUFMZCxNQUFNO0FBQUksWUFNVixnQkFBZ0I7QUFBSSxZQUZaLE1BQU07QUFBSSxZQUtsQixPQUFPO0FBQUksNENBaUJYLE1BQU0sU0FBQyxRQUFRO0FBQVE7Ozs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGhlbHBlcnMgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgVGh5R3VpZGVyUmVmIH0gZnJvbSAnLi9ndWlkZXItcmVmJztcbmltcG9ydCB7IEluamVjdCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaHlQb3BvdmVyIH0gZnJvbSAnbmd4LXRldGh5cy9wb3BvdmVyJztcbmltcG9ydCB7IFRoeUd1aWRlck1hbmFnZXIgfSBmcm9tICcuL2d1aWRlci1tYW5hZ2VyJztcbmltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyRmFjdG9yeTIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeUd1aWRlclN0ZXAsIFRoeUd1aWRlckNvbmZpZywgZGVmYXVsdEd1aWRlclBvc2l0aW9uQ29uZmlnIH0gZnJvbSAnLi9ndWlkZXIuY2xhc3MnO1xuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUaHlHdWlkZXIge1xuICAgIHByaXZhdGUgZ3VpZGVyUmVmOiBUaHlHdWlkZXJSZWY7XG5cbiAgICBwcml2YXRlIGd1aWRlclJlZnM6IFRoeUd1aWRlclJlZltdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlckZhY3Rvcnk6IFJlbmRlcmVyRmFjdG9yeTIsXG4gICAgICAgIHByaXZhdGUgcG9wb3ZlcjogVGh5UG9wb3ZlcixcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgcHJpdmF0ZSBndWlkZXJNYW5hZ2VyOiBUaHlHdWlkZXJNYW5hZ2VyLFxuICAgICAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgICAgICBwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueVxuICAgICkge31cblxuICAgIHB1YmxpYyBjcmVhdGUoY29uZmlnOiBUaHlHdWlkZXJDb25maWcpOiBUaHlHdWlkZXJSZWYge1xuICAgICAgICBpZiAoIWNvbmZpZyB8fCAhY29uZmlnPy5zdGVwcyB8fCAhaGVscGVycy5pc0FycmF5KGNvbmZpZz8uc3RlcHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCdjb25maWcuc3RlcHMnIG11c3QgYmUgYW4gYXJyYXkgb2YgbGVuZ3RoIGdyZWF0ZXIgdGhhbiAwYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9ybWFsaXplQ29uZmlnID0gdGhpcy5ub3JtYWxpemVDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5ndWlkZXJSZWYgPSBuZXcgVGh5R3VpZGVyUmVmKFxuICAgICAgICAgICAgbm9ybWFsaXplQ29uZmlnLFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlckZhY3RvcnksXG4gICAgICAgICAgICB0aGlzLnBvcG92ZXIsXG4gICAgICAgICAgICB0aGlzLnJvdXRlcixcbiAgICAgICAgICAgIHRoaXMuZ3VpZGVyTWFuYWdlcixcbiAgICAgICAgICAgIHRoaXMubmdab25lLFxuICAgICAgICAgICAgdGhpcy5vdmVybGF5LFxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmd1aWRlclJlZi5jbG9zZWQoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmd1aWRlclJlZnMuZmluZEluZGV4KGd1aWRlclJlZiA9PiBndWlkZXJSZWYgPT09IHRoaXMuZ3VpZGVyUmVmKTtcbiAgICAgICAgICAgIHRoaXMuZ3VpZGVyUmVmcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ndWlkZXJSZWZzLnB1c2godGhpcy5ndWlkZXJSZWYpO1xuICAgICAgICByZXR1cm4gdGhpcy5ndWlkZXJSZWY7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub3JtYWxpemVDb25maWcoY29uZmlnOiBUaHlHdWlkZXJDb25maWcpOiBUaHlHdWlkZXJDb25maWcge1xuICAgICAgICBjb25zdCBub3JtYWxpemVDb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0R3VpZGVyUG9zaXRpb25Db25maWcsIGNvbmZpZyk7XG4gICAgICAgIG5vcm1hbGl6ZUNvbmZpZy5zdGVwcyA9IG5vcm1hbGl6ZUNvbmZpZy5zdGVwcy5tYXAoc3RlcCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVTdGVwKHN0ZXAsIG5vcm1hbGl6ZUNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplQ29uZmlnO1xuICAgIH1cblxuICAgIHByaXZhdGUgbm9ybWFsaXplU3RlcChzdGVwOiBUaHlHdWlkZXJTdGVwLCBjb25maWc6IFRoeUd1aWRlckNvbmZpZyk6IFRoeUd1aWRlclN0ZXAge1xuICAgICAgICBjb25zdCB0ZW1wU3RlcCA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaGludFBsYWNlbWVudDogY29uZmlnLmhpbnRQbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgaGludE9mZnNldDogY29uZmlnLmhpbnRPZmZzZXQsXG4gICAgICAgICAgICAgICAgcG9pbnRPZmZzZXQ6IGNvbmZpZy5wb2ludE9mZnNldFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0ZXBcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdGVtcFN0ZXA7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmd1aWRlclJlZnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbGFzR3VpZGVyUmVmID0gdGhpcy5ndWlkZXJSZWZzW3RoaXMuZ3VpZGVyUmVmcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChsYXNHdWlkZXJSZWYpIHtcbiAgICAgICAgICAgICAgICBsYXNHdWlkZXJSZWYuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmd1aWRlclJlZnMucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
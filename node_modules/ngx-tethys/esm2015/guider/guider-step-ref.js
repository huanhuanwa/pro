import { fromEvent } from 'rxjs';
import { helpers } from 'ngx-tethys/util';
const pointContainerSize = 28;
export class ThyGuiderStepRef {
    constructor(step, stepIndex, rendererFactory, popover, guiderManager, overlay, document) {
        this.step = step;
        this.stepIndex = stepIndex;
        this.rendererFactory = rendererFactory;
        this.popover = popover;
        this.guiderManager = guiderManager;
        this.overlay = overlay;
        this.document = document;
        this.renderer = this.rendererFactory.createRenderer(null, null);
    }
    show(guiderRef) {
        this.guiderRef = guiderRef;
        this.createPoint(this.step, guiderRef);
    }
    dispose() {
        this.removeLastPointContainer();
        this.removeTip();
    }
    getTargetElement(step) {
        let targetElement;
        if (step.target) {
            targetElement = this.document.querySelector(step.target);
        }
        else {
            targetElement = this.guiderManager.getActiveTarget(step.key);
        }
        return targetElement;
    }
    createPoint(step, guiderRef) {
        var _a;
        // target 为空并且 guiderManager 中的 targetMap 也没有此step 的 key，或者 target 直接为 坐标数组
        // 则执行无 target 的显示
        if (!this.isTipHasTarget(step)) {
            this.createTip(this.step);
            return;
        }
        const targetElement = this.getTargetElement(step);
        if (helpers.isNull(targetElement)) {
            throw new Error(`there is no target called ${step.target}`);
        }
        this.targetElementObserver = fromEvent(targetElement, 'click').subscribe(() => {
            guiderRef.targetClicked().next(step);
        });
        const positionValue = (_a = targetElement === null || targetElement === void 0 ? void 0 : targetElement.style) === null || _a === void 0 ? void 0 : _a.position;
        if (!positionValue || positionValue === 'static') {
            this.renderer.setStyle(targetElement, 'position', 'relative');
        }
        this.setStyleForPointContainer(step, targetElement);
    }
    setStyleForPointContainer(step, targetElement) {
        const pointPosition = this.getPointPosition(step, targetElement);
        const pointContainer = this.setPointPosition(pointPosition);
        this.renderPoint(targetElement, pointContainer);
    }
    getPointPosition(step, targetElement) {
        const targetElementClientRect = targetElement.getBoundingClientRect();
        const { width: targetElementWidth, height: targetElementHeight } = targetElementClientRect;
        const pointOffset = step.pointOffset;
        // 只通过 pointOffset 控制 point 的位置，默认在 target 的右下角，
        // offset 的基点也为默认位置
        return [targetElementWidth + pointOffset[0], targetElementHeight + pointOffset[1]];
    }
    setPointPosition(pointPosition) {
        const currentPointContainer = this.renderer.createElement('div');
        this.renderer.addClass(currentPointContainer, 'thy-guider-highlight-container');
        if (this.guiderRef.config.pointClass) {
            this.addPointClass(currentPointContainer, this.guiderRef.config.pointClass);
        }
        this.renderer.setStyle(currentPointContainer, 'position', 'absolute');
        this.renderer.setStyle(currentPointContainer, 'left', pointPosition[0] + 'px');
        this.renderer.setStyle(currentPointContainer, 'top', pointPosition[1] + 'px');
        this.renderer.setStyle(currentPointContainer, 'transform', 'translate(-100%,-100%)');
        return currentPointContainer;
    }
    addPointClass(el, pointClass) {
        if (helpers.isString(pointClass)) {
            this.renderer.addClass(el, pointClass);
        }
        if (helpers.isArray(pointClass)) {
            pointClass.forEach(classItem => {
                this.renderer.addClass(el, classItem);
            });
        }
    }
    renderPoint(targetElement, pointContainer) {
        this.renderer.appendChild(targetElement, pointContainer);
        this.lastPointerContainer = pointContainer;
        this.lastTargetElement = targetElement;
        this.createTip(this.step);
    }
    removeLastPointContainer() {
        if (this.lastPointerContainer) {
            this.renderer.removeChild(this.document.body, this.lastPointerContainer);
            this.lastPointerContainer = undefined;
        }
    }
    createTip(step) {
        if (this.isTipHasTarget(step)) {
            this.tipWithTarget(step);
        }
        else {
            this.tipWithoutTarget(step);
        }
    }
    tipWithoutTarget(step) {
        const position = this.getTipPosition(step);
        this.lastPopoverRef = this.popover.open(this.guiderRef.config.hintComponent, {
            origin: null,
            originPosition: {
                x: position[0],
                y: position[1]
            },
            originActiveClass: '',
            panelClass: this.guiderRef.config.hintClass || '',
            backdropClosable: false,
            hasBackdrop: false,
            manualClosure: true,
            initialState: {
                guiderRef: this.guiderRef,
                stepRef: this
            },
            scrollStrategy: this.overlay.scrollStrategies.block()
        });
    }
    getTipPosition(step) {
        if (Array.isArray(step.target)) {
            return step.target;
        }
        return this.guiderRef.config.defaultPosition;
    }
    createTipContainer() {
        const tipContainer = this.renderer.createElement('div');
        this.renderer.addClass(tipContainer, 'thy-guider-content-container');
        this.renderer.setStyle(tipContainer, 'position', 'absolute');
        this.renderer.setStyle(tipContainer, 'top', '0px');
        this.renderer.setStyle(tipContainer, 'right', '0px');
        this.renderer.setStyle(tipContainer, 'bottom', '0px');
        this.renderer.setStyle(tipContainer, 'left', '0px');
        return tipContainer;
    }
    tipWithTarget(step) {
        let targetElement;
        if (step.target) {
            targetElement = this.document.querySelector(step.target);
        }
        else {
            targetElement = this.guiderManager.getActiveTarget(step.key);
        }
        const hintContainer = this.createTipContainer();
        this.renderer.appendChild(targetElement, hintContainer);
        this.lastTipContainer = hintContainer;
        const popoverConfig = {
            origin: hintContainer,
            placement: step.hintPlacement,
            panelClass: this.guiderRef.config.hintClass || '',
            backdropClosable: false,
            hasBackdrop: false,
            manualClosure: true,
            initialState: {
                guiderRef: this.guiderRef,
                stepRef: this
            },
            scrollStrategy: this.overlay.scrollStrategies.block()
        };
        const pointPosition = this.getPointPosition(step, targetElement);
        const hintOffset = this.getTipOffset(step, pointPosition, targetElement);
        if (hintOffset) {
            popoverConfig.offset = hintOffset;
        }
        this.lastPopoverRef = this.popover.open(this.guiderRef.config.hintComponent, popoverConfig);
    }
    getTipOffset(step, pointPosition, targetElement) {
        const hintPlacement = step.hintPlacement;
        const targetElementClientRect = targetElement.getBoundingClientRect();
        const { width: targetElementWidth, height: targetElementHeight } = targetElementClientRect;
        let hintOffset = step.hintOffset || 0;
        const pointXAxisOffset = pointPosition[0];
        const pointYAxisOffset = pointPosition[1];
        if (hintPlacement.startsWith('top')) {
            if (pointYAxisOffset < pointContainerSize) {
                hintOffset = hintOffset + Math.abs(pointYAxisOffset) + pointContainerSize;
            }
        }
        else if (hintPlacement.startsWith('bottom')) {
            if (pointYAxisOffset > targetElementHeight) {
                hintOffset = hintOffset + (pointYAxisOffset - targetElementHeight) + 10; // 10 为空隙量
            }
        }
        else if (hintPlacement.startsWith('left')) {
            if (pointXAxisOffset < 0) {
                hintOffset = hintOffset + Math.abs(pointXAxisOffset) + pointContainerSize;
            }
        }
        else if (hintPlacement.startsWith('right')) {
            if (pointXAxisOffset > targetElementWidth) {
                hintOffset = hintOffset + (pointXAxisOffset - targetElementWidth) + 10; // 10 为空隙量
            }
        }
        return hintOffset;
    }
    removeTip() {
        if (this.lastPopoverRef) {
            this.lastPopoverRef.close();
            this.lastPopoverRef = undefined;
        }
        if (this.lastTipContainer) {
            this.renderer.removeChild(this.document.body, this.lastTipContainer);
            this.lastTipContainer = undefined;
        }
        if (this.lastTargetElement && this.targetElementObserver) {
            this.targetElementObserver.unsubscribe();
            this.lastTargetElement = undefined;
            this.targetElementObserver = undefined;
        }
    }
    isTipHasTarget(step) {
        if (step.target) {
            return !Array.isArray(step.target);
        }
        else {
            return !!this.guiderManager.getActiveTarget(step.key);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,
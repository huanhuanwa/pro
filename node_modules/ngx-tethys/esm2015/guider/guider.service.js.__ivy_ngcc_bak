import { Router } from '@angular/router';
import { helpers } from 'ngx-tethys/util';
import { DOCUMENT } from '@angular/common';
import { ThyGuiderRef } from './guider-ref';
import { Inject, NgZone } from '@angular/core';
import { ThyPopover } from 'ngx-tethys/popover';
import { ThyGuiderManager } from './guider-manager';
import { Injectable, RendererFactory2 } from '@angular/core';
import { defaultGuiderPositionConfig } from './guider.class';
import { Overlay } from '@angular/cdk/overlay';
import * as i0 from "@angular/core";
import * as i1 from "ngx-tethys/popover";
import * as i2 from "@angular/router";
import * as i3 from "./guider-manager";
import * as i4 from "@angular/cdk/overlay";
import * as i5 from "@angular/common";
export class ThyGuider {
    constructor(rendererFactory, popover, router, guiderManager, ngZone, overlay, document) {
        this.rendererFactory = rendererFactory;
        this.popover = popover;
        this.router = router;
        this.guiderManager = guiderManager;
        this.ngZone = ngZone;
        this.overlay = overlay;
        this.document = document;
        this.guiderRefs = [];
    }
    create(config) {
        if (!config || !(config === null || config === void 0 ? void 0 : config.steps) || !helpers.isArray(config === null || config === void 0 ? void 0 : config.steps)) {
            throw new Error(`'config.steps' must be an array of length greater than 0`);
        }
        const normalizeConfig = this.normalizeConfig(config);
        this.guiderRef = new ThyGuiderRef(normalizeConfig, this.rendererFactory, this.popover, this.router, this.guiderManager, this.ngZone, this.overlay, this.document);
        this.guiderRef.closed().subscribe(() => {
            const index = this.guiderRefs.findIndex(guiderRef => guiderRef === this.guiderRef);
            this.guiderRefs.splice(index, 1);
        });
        this.guiderRefs.push(this.guiderRef);
        return this.guiderRef;
    }
    normalizeConfig(config) {
        const normalizeConfig = Object.assign({}, defaultGuiderPositionConfig, config);
        normalizeConfig.steps = normalizeConfig.steps.map(step => {
            return this.normalizeStep(step, normalizeConfig);
        });
        return normalizeConfig;
    }
    normalizeStep(step, config) {
        const tempStep = Object.assign({
            hintPlacement: config.hintPlacement,
            hintOffset: config.hintOffset,
            pointOffset: config.pointOffset
        }, step);
        return tempStep;
    }
    close() {
        if (this.guiderRefs.length > 0) {
            const lasGuiderRef = this.guiderRefs[this.guiderRefs.length - 1];
            if (lasGuiderRef) {
                lasGuiderRef.close();
                this.guiderRefs.pop();
            }
        }
    }
}
ThyGuider.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyGuider_Factory() { return new ThyGuider(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.ThyPopover), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ThyGuiderManager), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i4.Overlay), i0.ɵɵinject(i5.DOCUMENT)); }, token: ThyGuider, providedIn: "root" });
ThyGuider.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ThyGuider.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: ThyPopover },
    { type: Router },
    { type: ThyGuiderManager },
    { type: NgZone },
    { type: Overlay },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ3VpZGVyL2d1aWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFrQywyQkFBMkIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7OztBQUsvQyxNQUFNLE9BQU8sU0FBUztJQUtsQixZQUNxQixlQUFpQyxFQUMxQyxPQUFtQixFQUNuQixNQUFjLEVBQ2QsYUFBK0IsRUFDL0IsTUFBYyxFQUNkLE9BQWdCLEVBQ0UsUUFBYTtRQU50QixvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7UUFDMUMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2Qsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ0UsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQVRuQyxlQUFVLEdBQW1CLEVBQUUsQ0FB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b3J0IHsgaGVscGVycyB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUaHlHdWlkZXJSZWYgfSBmcm9tICcuL2d1aWRlci1yZWYnO1xuaW1wb3J0IHsgSW5qZWN0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeVBvcG92ZXIgfSBmcm9tICduZ3gtdGV0aHlzL3BvcG92ZXInO1xuaW1wb3J0IHsgVGh5R3VpZGVyTWFuYWdlciB9IGZyb20gJy4vZ3VpZGVyLW1hbmFnZXInO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5R3VpZGVyU3RlcCwgVGh5R3VpZGVyQ29uZmlnLCBkZWZhdWx0R3VpZGVyUG9zaXRpb25Db25maWcgfSBmcm9tICcuL2d1aWRlci5jbGFzcyc7XG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRoeUd1aWRlciB7XG4gICAgcHJpdmF0ZSBndWlkZXJSZWY6IFRoeUd1aWRlclJlZjtcblxuICAgIHByaXZhdGUgZ3VpZGVyUmVmczogVGh5R3VpZGVyUmVmW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MixcbiAgICAgICAgcHJpdmF0ZSBwb3BvdmVyOiBUaHlQb3BvdmVyLFxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICBwcml2YXRlIGd1aWRlck1hbmFnZXI6IFRoeUd1aWRlck1hbmFnZXIsXG4gICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIHByaXZhdGUgb3ZlcmxheTogT3ZlcmxheSxcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55XG4gICAgKSB7fVxuXG4gICAgcHVibGljIGNyZWF0ZShjb25maWc6IFRoeUd1aWRlckNvbmZpZyk6IFRoeUd1aWRlclJlZiB7XG4gICAgICAgIGlmICghY29uZmlnIHx8ICFjb25maWc/LnN0ZXBzIHx8ICFoZWxwZXJzLmlzQXJyYXkoY29uZmlnPy5zdGVwcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJ2NvbmZpZy5zdGVwcycgbXVzdCBiZSBhbiBhcnJheSBvZiBsZW5ndGggZ3JlYXRlciB0aGFuIDBgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub3JtYWxpemVDb25maWcgPSB0aGlzLm5vcm1hbGl6ZUNvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLmd1aWRlclJlZiA9IG5ldyBUaHlHdWlkZXJSZWYoXG4gICAgICAgICAgICBub3JtYWxpemVDb25maWcsXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyRmFjdG9yeSxcbiAgICAgICAgICAgIHRoaXMucG9wb3ZlcixcbiAgICAgICAgICAgIHRoaXMucm91dGVyLFxuICAgICAgICAgICAgdGhpcy5ndWlkZXJNYW5hZ2VyLFxuICAgICAgICAgICAgdGhpcy5uZ1pvbmUsXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXksXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ3VpZGVyUmVmLmNsb3NlZCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ3VpZGVyUmVmcy5maW5kSW5kZXgoZ3VpZGVyUmVmID0+IGd1aWRlclJlZiA9PT0gdGhpcy5ndWlkZXJSZWYpO1xuICAgICAgICAgICAgdGhpcy5ndWlkZXJSZWZzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmd1aWRlclJlZnMucHVzaCh0aGlzLmd1aWRlclJlZik7XG4gICAgICAgIHJldHVybiB0aGlzLmd1aWRlclJlZjtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vcm1hbGl6ZUNvbmZpZyhjb25maWc6IFRoeUd1aWRlckNvbmZpZyk6IFRoeUd1aWRlckNvbmZpZyB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZUNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRHdWlkZXJQb3NpdGlvbkNvbmZpZywgY29uZmlnKTtcbiAgICAgICAgbm9ybWFsaXplQ29uZmlnLnN0ZXBzID0gbm9ybWFsaXplQ29uZmlnLnN0ZXBzLm1hcChzdGVwID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVN0ZXAoc3RlcCwgbm9ybWFsaXplQ29uZmlnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVDb25maWc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub3JtYWxpemVTdGVwKHN0ZXA6IFRoeUd1aWRlclN0ZXAsIGNvbmZpZzogVGh5R3VpZGVyQ29uZmlnKTogVGh5R3VpZGVyU3RlcCB7XG4gICAgICAgIGNvbnN0IHRlbXBTdGVwID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBoaW50UGxhY2VtZW50OiBjb25maWcuaGludFBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICBoaW50T2Zmc2V0OiBjb25maWcuaGludE9mZnNldCxcbiAgICAgICAgICAgICAgICBwb2ludE9mZnNldDogY29uZmlnLnBvaW50T2Zmc2V0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RlcFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0ZW1wU3RlcDtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3VpZGVyUmVmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBsYXNHdWlkZXJSZWYgPSB0aGlzLmd1aWRlclJlZnNbdGhpcy5ndWlkZXJSZWZzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGxhc0d1aWRlclJlZikge1xuICAgICAgICAgICAgICAgIGxhc0d1aWRlclJlZi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ3VpZGVyUmVmcy5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
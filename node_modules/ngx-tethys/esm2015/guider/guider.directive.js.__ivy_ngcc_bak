import { ThyGuiderManager } from './guider-manager';
import { Directive, ElementRef, Input, NgZone } from '@angular/core';
import { take } from 'rxjs/operators';
export class ThyGuiderTargetDirective {
    constructor(guiderManager, el, ngZone) {
        this.guiderManager = guiderManager;
        this.el = el;
        this.ngZone = ngZone;
    }
    ngOnInit() {
        this.guiderManager.addStepTarget(this.target, this.el.nativeElement);
        this.ngZone.onStable.pipe(take(1)).subscribe(() => {
            const { key, guiderRef } = this.guiderManager.getActive();
            if (key === this.target) {
                const index = guiderRef.steps.findIndex(step => step.key === this.target);
                this.ngZone.run(() => {
                    guiderRef.active(index);
                });
            }
        });
    }
    ngAfterViewInit() { }
    ngOnDestroy() {
        const { guiderRef } = this.guiderManager.getActive();
        if (guiderRef) {
            guiderRef.close();
        }
        this.guiderManager.removeStepTarget(this.target);
    }
}
ThyGuiderTargetDirective.decorators = [
    { type: Directive, args: [{ selector: '[thyGuiderTarget]', exportAs: 'thyGuiderTarget' },] }
];
ThyGuiderTargetDirective.ctorParameters = () => [
    { type: ThyGuiderManager },
    { type: ElementRef },
    { type: NgZone }
];
ThyGuiderTargetDirective.propDecorators = {
    target: [{ type: Input, args: ['thyGuiderTarget',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ndWlkZXIvZ3VpZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkcsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3RDLE1BQU0sT0FBTyx3QkFBd0I7SUFJakMsWUFBb0IsYUFBK0IsRUFBVSxFQUFjLEVBQVUsTUFBYztRQUEvRSxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFdkcsUUFBUTtRQUNKLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUM5QyxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDMUQsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDckIsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDMUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNqQixTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixDQUFDLENBQUMsQ0FBQzthQUNOO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsZUFBZSxLQUFJLENBQUM7SUFFcEIsV0FBVztRQUNQLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3JELElBQUksU0FBUyxFQUFFO1lBQ1gsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckQsQ0FBQzs7O1lBNUJKLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7OztZQUpoRSxnQkFBZ0I7WUFDVSxVQUFVO1lBQTRCLE1BQU07OztxQkFLMUUsS0FBSyxTQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRoeUd1aWRlck1hbmFnZXIgfSBmcm9tICcuL2d1aWRlci1tYW5hZ2VyJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1t0aHlHdWlkZXJUYXJnZXRdJywgZXhwb3J0QXM6ICd0aHlHdWlkZXJUYXJnZXQnIH0pXG5leHBvcnQgY2xhc3MgVGh5R3VpZGVyVGFyZ2V0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xuICAgIEBJbnB1dCgndGh5R3VpZGVyVGFyZ2V0JylcbiAgICB0YXJnZXQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZ3VpZGVyTWFuYWdlcjogVGh5R3VpZGVyTWFuYWdlciwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmd1aWRlck1hbmFnZXIuYWRkU3RlcFRhcmdldCh0aGlzLnRhcmdldCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgdGhpcy5uZ1pvbmUub25TdGFibGUucGlwZSh0YWtlKDEpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBrZXksIGd1aWRlclJlZiB9ID0gdGhpcy5ndWlkZXJNYW5hZ2VyLmdldEFjdGl2ZSgpO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGd1aWRlclJlZi5zdGVwcy5maW5kSW5kZXgoc3RlcCA9PiBzdGVwLmtleSA9PT0gdGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGd1aWRlclJlZi5hY3RpdmUoaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7fVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IHsgZ3VpZGVyUmVmIH0gPSB0aGlzLmd1aWRlck1hbmFnZXIuZ2V0QWN0aXZlKCk7XG4gICAgICAgIGlmIChndWlkZXJSZWYpIHtcbiAgICAgICAgICAgIGd1aWRlclJlZi5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3VpZGVyTWFuYWdlci5yZW1vdmVTdGVwVGFyZ2V0KHRoaXMudGFyZ2V0KTtcbiAgICB9XG59XG4iXX0=
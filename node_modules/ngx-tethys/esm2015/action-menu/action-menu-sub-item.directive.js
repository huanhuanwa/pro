import { Directive, HostBinding, Input } from '@angular/core';
import { ThyPositioningService } from 'ngx-tethys/positioning';
import { ThyActionMenuItemDirective } from './action-menu-item.directive';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './action-menu-item.directive';
import * as ɵngcc2 from 'ngx-tethys/positioning';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyActionMenuSubItemDirective extends _MixinBase {
    constructor(actionMenuItem, positioningService) {
        super();
        this.actionMenuItem = actionMenuItem;
        this.positioningService = positioningService;
        this.className = true;
        this.thyActionMenuSubItem = 'right';
    }
    ngOnInit() {
        let direction = this.thyActionMenuSubItem || 'right';
        if (this.thyActionMenuSubItem === 'auto') {
            this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
            this.actionMenuItem
                .bindMouseenterEvent()
                .pipe(takeUntil(this.ngUnsubscribe$))
                .subscribe(() => {
                const element = this.actionMenuItem.getElement();
                const offset = this.positioningService.offset(element);
                if (document.documentElement.clientWidth < offset.left + offset.width + offset.width) {
                    direction = 'left';
                }
                else {
                    direction = 'right';
                }
                this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
            });
        }
        else {
            this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyActionMenuSubItemDirective.ɵfac = function ThyActionMenuSubItemDirective_Factory(t) { return new (t || ThyActionMenuSubItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyActionMenuItemDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyPositioningService)); };
ThyActionMenuSubItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyActionMenuSubItemDirective, selectors: [["", "thyActionMenuSubItem", ""]], hostVars: 2, hostBindings: function ThyActionMenuSubItemDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("action-menu-sub-item", ctx.className);
    } }, inputs: { thyActionMenuSubItem: "thyActionMenuSubItem" }, features: [ɵngcc0.ɵɵProvidersFeature([]), ɵngcc0.ɵɵInheritDefinitionFeature] });
ThyActionMenuSubItemDirective.ctorParameters = () => [
    { type: ThyActionMenuItemDirective },
    { type: ThyPositioningService }
];
ThyActionMenuSubItemDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.action-menu-sub-item',] }],
    thyActionMenuSubItem: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyActionMenuSubItemDirective, [{
        type: Directive,
        args: [{
                selector: '[thyActionMenuSubItem]',
                providers: []
            }]
    }], function () { return [{ type: ɵngcc1.ThyActionMenuItemDirective }, { type: ɵngcc2.ThyPositioningService }]; }, { className: [{
            type: HostBinding,
            args: ['class.action-menu-sub-item']
        }], thyActionMenuSubItem: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLW1lbnUtc3ViLWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYWN0aW9uLW1lbnUvYWN0aW9uLW1lbnUtc3ViLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFRUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUErQixNQUFNLGlCQUFpQixDQUFDO0FBQzNGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUkzQyxNQUFNLFVBQVUsR0FBbUQsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFNL0YsTUFBTSxPQUFPLDZCQUE4QixTQUFRLFVBQVU7QUFBRyxJQUs1RCxZQUFvQixjQUEwQyxFQUFVLGtCQUF5QztBQUNySCxRQUFRLEtBQUssRUFBRSxDQUFDO0FBQ2hCLFFBRndCLG1CQUFjLEdBQWQsY0FBYyxDQUE0QjtBQUFDLFFBQVMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUF1QjtBQUFDLFFBSnZFLGNBQVMsR0FBRyxJQUFJLENBQUM7QUFDaEUsUUFDYSx5QkFBb0IsR0FBcUIsT0FBTyxDQUFDO0FBQzlELElBR0ksQ0FBQztBQUNMLElBQ0ksUUFBUTtBQUFLLFFBQ1QsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixJQUFJLE9BQU8sQ0FBQztBQUM3RCxRQUFRLElBQUksSUFBSSxDQUFDLG9CQUFvQixLQUFLLE1BQU0sRUFBRTtBQUNsRCxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsb0JBQW9CLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvRSxZQUFZLElBQUksQ0FBQyxjQUFjO0FBQy9CLGlCQUFpQixtQkFBbUIsRUFBRTtBQUN0QyxpQkFBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDckQsaUJBQWlCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDaEMsZ0JBQW9CLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDckUsZ0JBQW9CLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0UsZ0JBQW9CLElBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUU7QUFDMUcsb0JBQXdCLFNBQVMsR0FBRyxNQUFNLENBQUM7QUFDM0MsaUJBQXFCO0FBQUMscUJBQUs7QUFDM0Isb0JBQXdCLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFDNUMsaUJBQXFCO0FBQ3JCLGdCQUFvQixJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLG9CQUFvQixTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkYsWUFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDbkIsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsb0JBQW9CLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQ2YsUUFBUSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDNUIsSUFBSSxDQUFDO0FBQ0w7eURBdENDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsd0JBQXdCLGtCQUNsQyxTQUFTLEVBQUUsRUFBRSxjQUNoQjs7O21KQUNJO0FBQUM7QUFBdUQsWUFacEQsMEJBQTBCO0FBQUksWUFEOUIscUJBQXFCO0FBQUc7QUFBRztBQUNmLHdCQWFoQixXQUFXLFNBQUMsNEJBQTRCO0FBQU8sbUNBRS9DLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbnB1dCxcbiAgICBDb21wb25lbnQsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgT25Jbml0LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5UG9zaXRpb25pbmdTZXJ2aWNlIH0gZnJvbSAnbmd4LXRldGh5cy9wb3NpdGlvbmluZyc7XG5pbXBvcnQgeyBUaHlBY3Rpb25NZW51SXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vYWN0aW9uLW1lbnUtaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgbWl4aW5VbnN1YnNjcmliZSwgTWl4aW5CYXNlLCBDb25zdHJ1Y3RvciwgVGh5VW5zdWJzY3JpYmUgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG50eXBlIFN1Yk1lbnVEaXJlY3Rpb24gPSAnbGVmdCcgfCAncmlnaHQnIHwgJ2F1dG8nO1xuXG5jb25zdCBfTWl4aW5CYXNlOiBDb25zdHJ1Y3RvcjxUaHlVbnN1YnNjcmliZT4gJiB0eXBlb2YgTWl4aW5CYXNlID0gbWl4aW5VbnN1YnNjcmliZShNaXhpbkJhc2UpO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0aHlBY3Rpb25NZW51U3ViSXRlbV0nLFxuICAgIHByb3ZpZGVyczogW11cbn0pXG5leHBvcnQgY2xhc3MgVGh5QWN0aW9uTWVudVN1Ykl0ZW1EaXJlY3RpdmUgZXh0ZW5kcyBfTWl4aW5CYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aW9uLW1lbnUtc3ViLWl0ZW0nKSBjbGFzc05hbWUgPSB0cnVlO1xuXG4gICAgQElucHV0KCkgdGh5QWN0aW9uTWVudVN1Ykl0ZW06IFN1Yk1lbnVEaXJlY3Rpb24gPSAncmlnaHQnO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhY3Rpb25NZW51SXRlbTogVGh5QWN0aW9uTWVudUl0ZW1EaXJlY3RpdmUsIHByaXZhdGUgcG9zaXRpb25pbmdTZXJ2aWNlOiBUaHlQb3NpdGlvbmluZ1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgbGV0IGRpcmVjdGlvbiA9IHRoaXMudGh5QWN0aW9uTWVudVN1Ykl0ZW0gfHwgJ3JpZ2h0JztcbiAgICAgICAgaWYgKHRoaXMudGh5QWN0aW9uTWVudVN1Ykl0ZW0gPT09ICdhdXRvJykge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NZW51SXRlbS51cGRhdGVDbGFzcyhbYGFjdGlvbi1tZW51LWl0ZW0tJHtkaXJlY3Rpb259YF0pO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NZW51SXRlbVxuICAgICAgICAgICAgICAgIC5iaW5kTW91c2VlbnRlckV2ZW50KClcbiAgICAgICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5uZ1Vuc3Vic2NyaWJlJCkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmFjdGlvbk1lbnVJdGVtLmdldEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5wb3NpdGlvbmluZ1NlcnZpY2Uub2Zmc2V0KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDwgb2Zmc2V0LmxlZnQgKyBvZmZzZXQud2lkdGggKyBvZmZzZXQud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25NZW51SXRlbS51cGRhdGVDbGFzcyhbYGFjdGlvbi1tZW51LWl0ZW0tJHtkaXJlY3Rpb259YF0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NZW51SXRlbS51cGRhdGVDbGFzcyhbYGFjdGlvbi1tZW51LWl0ZW0tJHtkaXJlY3Rpb259YF0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLm5nT25EZXN0cm95KCk7XG4gICAgfVxufVxuIl19
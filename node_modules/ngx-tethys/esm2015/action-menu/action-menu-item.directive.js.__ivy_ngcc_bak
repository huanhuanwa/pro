import { Directive, HostBinding, Input, HostListener, ElementRef } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { fromEvent } from 'rxjs';
import { debounceTime, shareReplay } from 'rxjs/operators';
import { UpdateHostClassService } from 'ngx-tethys/core';
export class ThyActionMenuItemDirective {
    constructor(elementRef, updateHostClassService) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.className = true;
        this.disabled = false;
        this.danger = false;
        this.success = false;
    }
    set thyDisabled(value) {
        this.disabled = coerceBooleanProperty(value);
    }
    set thyType(value) {
        this[value] = true;
    }
    onClick(event) {
        if (this.disabled) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    ngOnInit() {
        this.updateHostClassService.initializeElement(this.elementRef);
    }
    updateClass(classes) {
        this.updateHostClassService.updateClass(classes);
    }
    getWidth() {
        return this.elementRef.nativeElement.offsetWidth;
    }
    getElement() {
        return this.elementRef.nativeElement;
    }
    bindMouseenterEvent() {
        return fromEvent(this.elementRef.nativeElement, 'mouseenter').pipe(debounceTime(100), shareReplay());
    }
}
ThyActionMenuItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItem]',
                providers: [UpdateHostClassService]
            },] }
];
ThyActionMenuItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThyActionMenuItemDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.action-menu-item',] }],
    disabled: [{ type: HostBinding, args: ['class.action-menu-item--disabled',] }],
    danger: [{ type: HostBinding, args: ['class.action-menu-item--danger',] }],
    success: [{ type: HostBinding, args: ['class.action-menu-item--success',] }],
    thyDisabled: [{ type: Input }],
    thyType: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
export class ThyActionMenuItemIconDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemIcon]'
            },] }
];
ThyActionMenuItemIconDirective.ctorParameters = () => [];
ThyActionMenuItemIconDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.icon',] }]
};
export class ThyActionMenuItemNameDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemNameDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemName]'
            },] }
];
ThyActionMenuItemNameDirective.ctorParameters = () => [];
ThyActionMenuItemNameDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.name',] }]
};
export class ThyActionMenuItemMetaDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemMetaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemMeta]'
            },] }
];
ThyActionMenuItemMetaDirective.ctorParameters = () => [];
ThyActionMenuItemMetaDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.meta',] }]
};
export class ThyActionMenuItemInfoDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemInfoDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemInfo]'
            },] }
];
ThyActionMenuItemInfoDirective.ctorParameters = () => [];
ThyActionMenuItemInfoDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.info',] }]
};
export class ThyActionMenuItemExtendIconDirective {
    constructor() {
        this.className = true;
    }
}
ThyActionMenuItemExtendIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemExtendIcon]'
            },] }
];
ThyActionMenuItemExtendIconDirective.ctorParameters = () => [];
ThyActionMenuItemExtendIconDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.extend-icon',] }]
};
export class ThyActionMenuItemActiveDirective {
    constructor() {
        this._isActive = false;
    }
    set thyActionMenuItemActive(value) {
        this._isActive = coerceBooleanProperty(value);
    }
}
ThyActionMenuItemActiveDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuItemActive]'
            },] }
];
ThyActionMenuItemActiveDirective.ctorParameters = () => [];
ThyActionMenuItemActiveDirective.propDecorators = {
    _isActive: [{ type: HostBinding, args: ['class.active',] }],
    thyActionMenuItemActive: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLW1lbnUtaXRlbS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYWN0aW9uLW1lbnUvYWN0aW9uLW1lbnUtaXRlbS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFhLFlBQVksRUFBcUIsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzlILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakMsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVF6RCxNQUFNLE9BQU8sMEJBQTBCO0lBMkJuQyxZQUFvQixVQUFtQyxFQUFVLHNCQUE4QztRQUEzRixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUFVLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUExQnhFLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFFUCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRW5CLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFFZCxZQUFPLEdBQUcsS0FBSyxDQUFDO0lBb0JrRCxDQUFDO0lBbEJuSCxJQUNJLFdBQVcsQ0FBQyxLQUFjO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELElBQ0ksT0FBTyxDQUFDLEtBQTRCO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUdELE9BQU8sQ0FBQyxLQUFZO1FBQ2hCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN4QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDO0lBSUQsUUFBUTtRQUNKLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFpQjtRQUN6QixJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDckQsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxtQkFBbUI7UUFDZixPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDekcsQ0FBQzs7O1lBbkRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzthQUN0Qzs7O1lBWG1GLFVBQVU7WUFJckYsc0JBQXNCOzs7d0JBUzFCLFdBQVcsU0FBQyx3QkFBd0I7dUJBRXBDLFdBQVcsU0FBQyxrQ0FBa0M7cUJBRTlDLFdBQVcsU0FBQyxnQ0FBZ0M7c0JBRTVDLFdBQVcsU0FBQyxpQ0FBaUM7MEJBRTdDLEtBQUs7c0JBS0wsS0FBSztzQkFLTCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztBQWtDckMsTUFBTSxPQUFPLDhCQUE4QjtJQUd2QztRQUYyQixjQUFTLEdBQUcsSUFBSSxDQUFDO0lBRTdCLENBQUM7OztZQU5uQixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjthQUN0Qzs7Ozt3QkFFSSxXQUFXLFNBQUMsWUFBWTs7QUFRN0IsTUFBTSxPQUFPLDhCQUE4QjtJQUd2QztRQUYyQixjQUFTLEdBQUcsSUFBSSxDQUFDO0lBRTdCLENBQUM7OztZQU5uQixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjthQUN0Qzs7Ozt3QkFFSSxXQUFXLFNBQUMsWUFBWTs7QUFRN0IsTUFBTSxPQUFPLDhCQUE4QjtJQUd2QztRQUYyQixjQUFTLEdBQUcsSUFBSSxDQUFDO0lBRTdCLENBQUM7OztZQU5uQixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjthQUN0Qzs7Ozt3QkFFSSxXQUFXLFNBQUMsWUFBWTs7QUFRN0IsTUFBTSxPQUFPLDhCQUE4QjtJQUd2QztRQUYyQixjQUFTLEdBQUcsSUFBSSxDQUFDO0lBRTdCLENBQUM7OztZQU5uQixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjthQUN0Qzs7Ozt3QkFFSSxXQUFXLFNBQUMsWUFBWTs7QUFRN0IsTUFBTSxPQUFPLG9DQUFvQztJQUc3QztRQUZrQyxjQUFTLEdBQUcsSUFBSSxDQUFDO0lBRXBDLENBQUM7OztZQU5uQixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLCtCQUErQjthQUM1Qzs7Ozt3QkFFSSxXQUFXLFNBQUMsbUJBQW1COztBQVFwQyxNQUFNLE9BQU8sZ0NBQWdDO0lBUXpDO1FBUDZCLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFPaEMsQ0FBQztJQUxoQixJQUNJLHVCQUF1QixDQUFDLEtBQWM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs7WUFUSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjthQUN4Qzs7Ozt3QkFFSSxXQUFXLFNBQUMsY0FBYztzQ0FFMUIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBDb21wb25lbnQsIEhvc3RMaXN0ZW5lciwgVmlld0VuY2Fwc3VsYXRpb24sIEVsZW1lbnRSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnbmd4LXRldGh5cy91dGlsJztcbmltcG9ydCB7IGZyb21FdmVudCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBUaHlBY3Rpb25NZW51SXRlbVR5cGUgPSAnZGFuZ2VyJyB8ICdzdWNjZXNzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdGh5QWN0aW9uTWVudUl0ZW1dJyxcbiAgICBwcm92aWRlcnM6IFtVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlBY3Rpb25NZW51SXRlbURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY3Rpb24tbWVudS1pdGVtJykgY2xhc3NOYW1lID0gdHJ1ZTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aW9uLW1lbnUtaXRlbS0tZGlzYWJsZWQnKSBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY3Rpb24tbWVudS1pdGVtLS1kYW5nZXInKSBkYW5nZXIgPSBmYWxzZTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aW9uLW1lbnUtaXRlbS0tc3VjY2VzcycpIHN1Y2Nlc3MgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeURpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVR5cGUodmFsdWU6IFRoeUFjdGlvbk1lbnVJdGVtVHlwZSkge1xuICAgICAgICB0aGlzW3ZhbHVlXSA9IHRydWU7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICAgIG9uQ2xpY2soZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLmluaXRpYWxpemVFbGVtZW50KHRoaXMuZWxlbWVudFJlZik7XG4gICAgfVxuXG4gICAgdXBkYXRlQ2xhc3MoY2xhc3Nlczogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUNsYXNzKGNsYXNzZXMpO1xuICAgIH1cblxuICAgIGdldFdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgfVxuXG4gICAgZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIGJpbmRNb3VzZWVudGVyRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWVudGVyJykucGlwZShkZWJvdW5jZVRpbWUoMTAwKSwgc2hhcmVSZXBsYXkoKSk7XG4gICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0aHlBY3Rpb25NZW51SXRlbUljb25dJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlBY3Rpb25NZW51SXRlbUljb25EaXJlY3RpdmUge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWNvbicpIGNsYXNzTmFtZSA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeUFjdGlvbk1lbnVJdGVtTmFtZV0nXG59KVxuZXhwb3J0IGNsYXNzIFRoeUFjdGlvbk1lbnVJdGVtTmFtZURpcmVjdGl2ZSB7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5uYW1lJykgY2xhc3NOYW1lID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge31cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdGh5QWN0aW9uTWVudUl0ZW1NZXRhXSdcbn0pXG5leHBvcnQgY2xhc3MgVGh5QWN0aW9uTWVudUl0ZW1NZXRhRGlyZWN0aXZlIHtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLm1ldGEnKSBjbGFzc05hbWUgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoKSB7fVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0aHlBY3Rpb25NZW51SXRlbUluZm9dJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlBY3Rpb25NZW51SXRlbUluZm9EaXJlY3RpdmUge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaW5mbycpIGNsYXNzTmFtZSA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeUFjdGlvbk1lbnVJdGVtRXh0ZW5kSWNvbl0nXG59KVxuZXhwb3J0IGNsYXNzIFRoeUFjdGlvbk1lbnVJdGVtRXh0ZW5kSWNvbkRpcmVjdGl2ZSB7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5leHRlbmQtaWNvbicpIGNsYXNzTmFtZSA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeUFjdGlvbk1lbnVJdGVtQWN0aXZlXSdcbn0pXG5leHBvcnQgY2xhc3MgVGh5QWN0aW9uTWVudUl0ZW1BY3RpdmVEaXJlY3RpdmUge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aXZlJykgX2lzQWN0aXZlID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlBY3Rpb25NZW51SXRlbUFjdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7fVxufVxuIl19
import { Directive, HostBinding, Input } from '@angular/core';
import { ThyPositioningService } from 'ngx-tethys/positioning';
import { ThyActionMenuItemDirective } from './action-menu-item.directive';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { takeUntil } from 'rxjs/operators';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyActionMenuSubItemDirective extends _MixinBase {
    constructor(actionMenuItem, positioningService) {
        super();
        this.actionMenuItem = actionMenuItem;
        this.positioningService = positioningService;
        this.className = true;
        this.thyActionMenuSubItem = 'right';
    }
    ngOnInit() {
        let direction = this.thyActionMenuSubItem || 'right';
        if (this.thyActionMenuSubItem === 'auto') {
            this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
            this.actionMenuItem
                .bindMouseenterEvent()
                .pipe(takeUntil(this.ngUnsubscribe$))
                .subscribe(() => {
                const element = this.actionMenuItem.getElement();
                const offset = this.positioningService.offset(element);
                if (document.documentElement.clientWidth < offset.left + offset.width + offset.width) {
                    direction = 'left';
                }
                else {
                    direction = 'right';
                }
                this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
            });
        }
        else {
            this.actionMenuItem.updateClass([`action-menu-item-${direction}`]);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyActionMenuSubItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyActionMenuSubItem]',
                providers: []
            },] }
];
ThyActionMenuSubItemDirective.ctorParameters = () => [
    { type: ThyActionMenuItemDirective },
    { type: ThyPositioningService }
];
ThyActionMenuSubItemDirective.propDecorators = {
    className: [{ type: HostBinding, args: ['class.action-menu-sub-item',] }],
    thyActionMenuSubItem: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLW1lbnUtc3ViLWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FjdGlvbi1tZW51L2FjdGlvbi1tZW51LXN1Yi1pdGVtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBUVIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBK0IsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJM0MsTUFBTSxVQUFVLEdBQW1ELGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBTS9GLE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxVQUFVO0lBS3pELFlBQW9CLGNBQTBDLEVBQVUsa0JBQXlDO1FBQzdHLEtBQUssRUFBRSxDQUFDO1FBRFEsbUJBQWMsR0FBZCxjQUFjLENBQTRCO1FBQVUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUF1QjtRQUp0RSxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBRW5ELHlCQUFvQixHQUFxQixPQUFPLENBQUM7SUFJMUQsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLElBQUksT0FBTyxDQUFDO1FBQ3JELElBQUksSUFBSSxDQUFDLG9CQUFvQixLQUFLLE1BQU0sRUFBRTtZQUN0QyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLG9CQUFvQixTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbkUsSUFBSSxDQUFDLGNBQWM7aUJBQ2QsbUJBQW1CLEVBQUU7aUJBQ3JCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2lCQUNwQyxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNaLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ2pELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZELElBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUU7b0JBQ2xGLFNBQVMsR0FBRyxNQUFNLENBQUM7aUJBQ3RCO3FCQUFNO29CQUNILFNBQVMsR0FBRyxPQUFPLENBQUM7aUJBQ3ZCO2dCQUNELElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsb0JBQW9CLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2RSxDQUFDLENBQUMsQ0FBQztTQUNWO2FBQU07WUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLG9CQUFvQixTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdEU7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7WUFyQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx3QkFBd0I7Z0JBQ2xDLFNBQVMsRUFBRSxFQUFFO2FBQ2hCOzs7WUFYUSwwQkFBMEI7WUFEMUIscUJBQXFCOzs7d0JBY3pCLFdBQVcsU0FBQyw0QkFBNEI7bUNBRXhDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbnB1dCxcbiAgICBDb21wb25lbnQsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgT25Jbml0LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5UG9zaXRpb25pbmdTZXJ2aWNlIH0gZnJvbSAnbmd4LXRldGh5cy9wb3NpdGlvbmluZyc7XG5pbXBvcnQgeyBUaHlBY3Rpb25NZW51SXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vYWN0aW9uLW1lbnUtaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgbWl4aW5VbnN1YnNjcmliZSwgTWl4aW5CYXNlLCBDb25zdHJ1Y3RvciwgVGh5VW5zdWJzY3JpYmUgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG50eXBlIFN1Yk1lbnVEaXJlY3Rpb24gPSAnbGVmdCcgfCAncmlnaHQnIHwgJ2F1dG8nO1xuXG5jb25zdCBfTWl4aW5CYXNlOiBDb25zdHJ1Y3RvcjxUaHlVbnN1YnNjcmliZT4gJiB0eXBlb2YgTWl4aW5CYXNlID0gbWl4aW5VbnN1YnNjcmliZShNaXhpbkJhc2UpO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0aHlBY3Rpb25NZW51U3ViSXRlbV0nLFxuICAgIHByb3ZpZGVyczogW11cbn0pXG5leHBvcnQgY2xhc3MgVGh5QWN0aW9uTWVudVN1Ykl0ZW1EaXJlY3RpdmUgZXh0ZW5kcyBfTWl4aW5CYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aW9uLW1lbnUtc3ViLWl0ZW0nKSBjbGFzc05hbWUgPSB0cnVlO1xuXG4gICAgQElucHV0KCkgdGh5QWN0aW9uTWVudVN1Ykl0ZW06IFN1Yk1lbnVEaXJlY3Rpb24gPSAncmlnaHQnO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhY3Rpb25NZW51SXRlbTogVGh5QWN0aW9uTWVudUl0ZW1EaXJlY3RpdmUsIHByaXZhdGUgcG9zaXRpb25pbmdTZXJ2aWNlOiBUaHlQb3NpdGlvbmluZ1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgbGV0IGRpcmVjdGlvbiA9IHRoaXMudGh5QWN0aW9uTWVudVN1Ykl0ZW0gfHwgJ3JpZ2h0JztcbiAgICAgICAgaWYgKHRoaXMudGh5QWN0aW9uTWVudVN1Ykl0ZW0gPT09ICdhdXRvJykge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NZW51SXRlbS51cGRhdGVDbGFzcyhbYGFjdGlvbi1tZW51LWl0ZW0tJHtkaXJlY3Rpb259YF0pO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NZW51SXRlbVxuICAgICAgICAgICAgICAgIC5iaW5kTW91c2VlbnRlckV2ZW50KClcbiAgICAgICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5uZ1Vuc3Vic2NyaWJlJCkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmFjdGlvbk1lbnVJdGVtLmdldEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5wb3NpdGlvbmluZ1NlcnZpY2Uub2Zmc2V0KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDwgb2Zmc2V0LmxlZnQgKyBvZmZzZXQud2lkdGggKyBvZmZzZXQud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25NZW51SXRlbS51cGRhdGVDbGFzcyhbYGFjdGlvbi1tZW51LWl0ZW0tJHtkaXJlY3Rpb259YF0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NZW51SXRlbS51cGRhdGVDbGFzcyhbYGFjdGlvbi1tZW51LWl0ZW0tJHtkaXJlY3Rpb259YF0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLm5nT25EZXN0cm95KCk7XG4gICAgfVxufVxuIl19
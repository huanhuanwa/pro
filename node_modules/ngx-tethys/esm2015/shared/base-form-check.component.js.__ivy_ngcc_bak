import { HostBinding, Input, ChangeDetectorRef, Directive } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { ThyTranslate } from 'ngx-tethys/core';
const noop = () => { };
const ɵ0 = noop;
export class ThyFormCheckBaseComponent {
    constructor(thyTranslate, changeDetectorRef) {
        this.thyTranslate = thyTranslate;
        this.changeDetectorRef = changeDetectorRef;
        // The internal data model
        this._innerValue = null;
        this._disabled = false;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this._isFormCheck = true;
        this._isFormCheckInline = false;
        this._isChecked = false;
    }
    get _isNoText() {
        return this._isFormCheckInline && !this._labelText;
    }
    set thyInline(value) {
        this._isFormCheckInline = coerceBooleanProperty(value);
    }
    set thyLabelText(value) {
        this._labelText = value;
    }
    set thyLabelTextTranslateKey(value) {
        if (value) {
            this._labelText = this.thyTranslate.instant(value);
        }
        else {
            this._labelText = '';
        }
    }
    set thyDisabled(value) {
        this.setDisabledState(coerceBooleanProperty(value));
    }
    writeValue(obj) {
        if (obj !== this._innerValue) {
            this._innerValue = obj;
            this._isChecked = !!this._innerValue;
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
        this.markForCheck();
    }
    updateValue(value) {
        this._innerValue = value;
        this._isChecked = !!this._innerValue;
        this.onChangeCallback(value);
        this.markForCheck();
    }
    change() {
        this.updateValue(!this._innerValue);
    }
    markForCheck() {
        if (this.changeDetectorRef) {
            this.changeDetectorRef.markForCheck();
        }
    }
}
ThyFormCheckBaseComponent.decorators = [
    { type: Directive }
];
ThyFormCheckBaseComponent.ctorParameters = () => [
    { type: ThyTranslate },
    { type: ChangeDetectorRef }
];
ThyFormCheckBaseComponent.propDecorators = {
    _isFormCheck: [{ type: HostBinding, args: ['class.form-check',] }],
    _isFormCheckInline: [{ type: HostBinding, args: ['class.form-check-inline',] }],
    _isChecked: [{ type: HostBinding, args: ['class.form-check-checked',] }],
    _isNoText: [{ type: HostBinding, args: ['class.form-check-inline-no-label-text',] }],
    thyInline: [{ type: Input }],
    thyLabelText: [{ type: Input }],
    thyLabelTextTranslateKey: [{ type: Input }],
    thyDisabled: [{ type: Input }]
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1mb3JtLWNoZWNrLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaGFyZWQvYmFzZS1mb3JtLWNoZWNrLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQzs7QUFHdEIsTUFBTSxPQUFPLHlCQUF5QjtJQXlFbEMsWUFBc0IsWUFBMEIsRUFBWSxpQkFBcUM7UUFBM0UsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBWSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW9CO1FBeEVqRywwQkFBMEI7UUFDMUIsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFFNUIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUVWLHNCQUFpQixHQUFlLElBQUksQ0FBQztRQUVyQyxxQkFBZ0IsR0FBcUIsSUFBSSxDQUFDO1FBSWpCLGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBRWIsdUJBQWtCLEdBQUcsS0FBSyxDQUFDO1FBRTFCLGVBQVUsR0FBRyxLQUFLLENBQUM7SUF5RHdDLENBQUM7SUF2RHJHLElBQTBELFNBQVM7UUFDL0QsT0FBTyxJQUFJLENBQUMsa0JBQWtCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUNJLFNBQVMsQ0FBQyxLQUFjO1FBQ3hCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsSUFDSSxZQUFZLENBQUMsS0FBYTtRQUMxQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFDSSx3QkFBd0IsQ0FBQyxLQUFhO1FBQ3RDLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0RDthQUFNO1lBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQsSUFDSSxXQUFXLENBQUMsS0FBYztRQUMxQixJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQVk7UUFDbkIsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztZQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQixDQUFDLEVBQU87UUFDcEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUNyQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxnQkFBZ0IsQ0FBRSxVQUFtQjtRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztRQUM1QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFjO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDckMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBSUQsTUFBTTtRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFlBQVk7UUFDUixJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN4QixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDekM7SUFDTCxDQUFDOzs7WUFwRkosU0FBUzs7O1lBSkQsWUFBWTtZQUZRLGlCQUFpQjs7OzJCQW1CekMsV0FBVyxTQUFDLGtCQUFrQjtpQ0FFOUIsV0FBVyxTQUFDLHlCQUF5Qjt5QkFFckMsV0FBVyxTQUFDLDBCQUEwQjt3QkFFdEMsV0FBVyxTQUFDLHVDQUF1Qzt3QkFJbkQsS0FBSzsyQkFLTCxLQUFLO3VDQUtMLEtBQUs7MEJBU0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSG9zdEJpbmRpbmcsIElucHV0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuaW1wb3J0IHsgVGh5VHJhbnNsYXRlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBUaHlGb3JtQ2hlY2tCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIC8vIFRoZSBpbnRlcm5hbCBkYXRhIG1vZGVsXG4gICAgX2lubmVyVmFsdWU6IGJvb2xlYW4gPSBudWxsO1xuXG4gICAgX2Rpc2FibGVkID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIG9uVG91Y2hlZENhbGxiYWNrOiAoKSA9PiB2b2lkID0gbm9vcDtcblxuICAgIHByaXZhdGUgb25DaGFuZ2VDYWxsYmFjazogKF86IGFueSkgPT4gdm9pZCA9IG5vb3A7XG5cbiAgICBfbGFiZWxUZXh0OiBzdHJpbmc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZvcm0tY2hlY2snKSBfaXNGb3JtQ2hlY2sgPSB0cnVlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mb3JtLWNoZWNrLWlubGluZScpIF9pc0Zvcm1DaGVja0lubGluZSA9IGZhbHNlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mb3JtLWNoZWNrLWNoZWNrZWQnKSBfaXNDaGVja2VkID0gZmFsc2U7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZvcm0tY2hlY2staW5saW5lLW5vLWxhYmVsLXRleHQnKSBnZXQgX2lzTm9UZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNGb3JtQ2hlY2tJbmxpbmUgJiYgIXRoaXMuX2xhYmVsVGV4dDtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlJbmxpbmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNGb3JtQ2hlY2tJbmxpbmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUxhYmVsVGV4dCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2xhYmVsVGV4dCA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUxhYmVsVGV4dFRyYW5zbGF0ZUtleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fbGFiZWxUZXh0ID0gdGhpcy50aHlUcmFuc2xhdGUuaW5zdGFudCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9sYWJlbFRleHQgPSAnJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeURpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc2V0RGlzYWJsZWRTdGF0ZShjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpKTtcbiAgICB9XG5cbiAgICB3cml0ZVZhbHVlKG9iajogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAob2JqICE9PSB0aGlzLl9pbm5lclZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9pbm5lclZhbHVlID0gb2JqO1xuICAgICAgICAgICAgdGhpcy5faXNDaGVja2VkID0gISF0aGlzLl9pbm5lclZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGZuO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xuICAgIH1cblxuICAgIHNldERpc2FibGVkU3RhdGU/KGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgICAgICB0aGlzLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIHVwZGF0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2lubmVyVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5faXNDaGVja2VkID0gISF0aGlzLl9pbm5lclZhbHVlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sodmFsdWUpO1xuICAgICAgICB0aGlzLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0aHlUcmFuc2xhdGU6IFRoeVRyYW5zbGF0ZSwgcHJvdGVjdGVkIGNoYW5nZURldGVjdG9yUmVmPzogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgICBjaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUoIXRoaXMuX2lubmVyVmFsdWUpO1xuICAgIH1cblxuICAgIG1hcmtGb3JDaGVjaygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
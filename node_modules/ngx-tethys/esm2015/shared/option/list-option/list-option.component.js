import { Component, Input, HostBinding, ElementRef, ChangeDetectorRef, Inject, HostListener, Optional } from '@angular/core';
// import { SelectionModel } from '@angular/cdk/collections';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { THY_LIST_OPTION_PARENT_COMPONENT } from '../option.token';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'ngx-tethys/icon';

function ThyListOptionComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 1);
    ɵngcc0.ɵɵelement(1, "thy-icon", 2);
    ɵngcc0.ɵɵelementEnd();
} }
function ThyListOptionComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 1);
    ɵngcc0.ɵɵelement(1, "thy-icon", 3);
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = ["*"];
let _uniqueIdCounter = 0;
export class ThyListOptionComponent {
    constructor(element, changeDetector, 
    /** @docs-private */
    parentSelectionList) {
        this.element = element;
        this.changeDetector = changeDetector;
        this.parentSelectionList = parentSelectionList;
        this._role = 'option';
        this._tabIndex = -1;
        this.id = `thy-list-option-${_uniqueIdCounter++}`;
    }
    get _isListOption() {
        return this.parentSelectionList.layout === 'list';
    }
    get _parentLayout() {
        return this.parentSelectionList.layout === 'grid';
    }
    set thyDisabled(value) {
        this.disabled = coerceBooleanProperty(value);
    }
    /** Whether the option is selected. */
    get selected() {
        return this.parentSelectionList.isSelected(this);
    }
    onClick(event) {
        if (this.parentSelectionList.multiple || !this.parentSelectionList.isSelected(this)) {
            this.parentSelectionList.toggleOption(this, event);
            this.parentSelectionList.setActiveOption(this);
        }
    }
    // @HostListener('focus', ['$event'])
    // onFocus(event: Event) {
    //     this.parentSelectionList.setFocusedOption(this, event);
    // }
    /** Allows for programmatic focusing of the option. */
    // focus(origin?: FocusOrigin): void {
    //     this.element.nativeElement.focus();
    // }
    setActiveStyles() {
        this.element.nativeElement.classList.add('hover');
        this.parentSelectionList.scrollIntoView(this);
    }
    setInactiveStyles() {
        this.element.nativeElement.classList.remove('hover');
    }
    /**
     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.
     * @docs-private
     */
    getLabel() {
        return '';
    }
}
ThyListOptionComponent.ɵfac = function ThyListOptionComponent_Factory(t) { return new (t || ThyListOptionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(THY_LIST_OPTION_PARENT_COMPONENT, 8)); };
ThyListOptionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyListOptionComponent, selectors: [["thy-list-option"], ["", "thy-list-option", ""]], hostVars: 10, hostBindings: function ThyListOptionComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyListOptionComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx._role)("tabindex", ctx._tabIndex);
        ɵngcc0.ɵɵclassProp("thy-list-option", ctx._isListOption)("thy-grid-option", ctx._parentLayout)("disabled", ctx.disabled)("active", ctx.selected);
    } }, inputs: { id: "id", thyDisabled: "thyDisabled", thyValue: "thyValue" }, ngContentSelectors: _c0, decls: 3, vars: 2, consts: [["class", "checked-icon", 4, "ngIf"], [1, "checked-icon"], ["thyIconName", "check"], ["thyIconName", "check-circle-fill"]], template: function ThyListOptionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, ThyListOptionComponent_span_1_Template, 2, 0, "span", 0);
        ɵngcc0.ɵɵtemplate(2, ThyListOptionComponent_span_2_Template, 2, 0, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.parentSelectionList.multiple && ctx.parentSelectionList.layout === "list");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.parentSelectionList.layout === "grid");
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.ThyIconComponent], encapsulation: 2 });
ThyListOptionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_LIST_OPTION_PARENT_COMPONENT,] }] }
];
ThyListOptionComponent.propDecorators = {
    _isListOption: [{ type: HostBinding, args: [`class.thy-list-option`,] }],
    _parentLayout: [{ type: HostBinding, args: [`class.thy-grid-option`,] }],
    _role: [{ type: HostBinding, args: [`attr.role`,] }],
    _tabIndex: [{ type: HostBinding, args: [`attr.tabindex`,] }],
    id: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    disabled: [{ type: HostBinding, args: [`class.disabled`,] }],
    selected: [{ type: HostBinding, args: [`class.active`,] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyListOptionComponent, [{
        type: Component,
        args: [{
                selector: 'thy-list-option,[thy-list-option]',
                template: "<ng-content></ng-content>\n<span class=\"checked-icon\" *ngIf=\"parentSelectionList.multiple && parentSelectionList.layout === 'list'\">\n  <thy-icon thyIconName=\"check\"></thy-icon>\n</span>\n<span *ngIf=\"parentSelectionList.layout === 'grid'\" class=\"checked-icon\">\n  <thy-icon thyIconName=\"check-circle-fill\"></thy-icon>\n</span>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_LIST_OPTION_PARENT_COMPONENT]
            }] }]; }, { _role: [{
            type: HostBinding,
            args: [`attr.role`]
        }], _tabIndex: [{
            type: HostBinding,
            args: [`attr.tabindex`]
        }], id: [{
            type: Input
        }], _isListOption: [{
            type: HostBinding,
            args: [`class.thy-list-option`]
        }], _parentLayout: [{
            type: HostBinding,
            args: [`class.thy-grid-option`]
        }], thyDisabled: [{
            type: Input
        }], disabled: [{
            type: HostBinding,
            args: [`class.disabled`]
        }], selected: [{
            type: HostBinding,
            args: [`class.active`]
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], thyValue: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1vcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2hhcmVkL29wdGlvbi9saXN0LW9wdGlvbi9saXN0LW9wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxLQUFLLEVBQ0wsV0FBVyxFQUNYLFVBQVUsRUFDVixpQkFBaUIsRUFDakIsTUFBTSxFQUdOLFlBQVksRUFDWixRQUFRLEVBRVgsTUFBTSxlQUFlLENBQUM7QUFFdkIsNkRBQTZEO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hELE9BQU8sRUFBaUMsZ0NBQWdDLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztBQUVsRyxJQUFJLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQVN6QixNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFnQ2xDLFlBQ1csT0FBZ0MsRUFDL0IsY0FBaUM7QUFDaEQsSUFBTyxvQkFBb0I7QUFDNUIsSUFBcUUsbUJBQWtEO0FBQ3BILFFBSlksWUFBTyxHQUFQLE9BQU8sQ0FBeUI7QUFBQyxRQUNoQyxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7QUFBQyxRQUVtQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQStCO0FBQ3ZILFFBMUI4QixVQUFLLEdBQUcsUUFBUSxDQUFDO0FBQy9DLFFBQ2tDLGNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNqRCxRQUNhLE9BQUUsR0FBRyxtQkFBbUIsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO0FBQzFELElBcUJPLENBQUM7QUFDUixJQXJDSSxJQUNJLGFBQWE7QUFDckIsUUFBUSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDO0FBQzFELElBQUksQ0FBQztBQUNMLElBQ0ksSUFDSSxhQUFhO0FBQ3JCLFFBQVEsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQztBQUMxRCxJQUFJLENBQUM7QUFDTCxJQVNJLElBQ0ksV0FBVyxDQUFDLEtBQWM7QUFDbEMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JELElBQUksQ0FBQztBQUNMLElBR0ksc0NBQXNDO0FBQzFDLElBQUksSUFDSSxRQUFRO0FBQ2hCLFFBQVEsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pELElBQUksQ0FBQztBQUNMLElBU0ksT0FBTyxDQUFDLEtBQVk7QUFDeEIsUUFBUSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzdGLFlBQVksSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0QsWUFBWSxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLHFDQUFxQztBQUN6QyxJQUFJLDBCQUEwQjtBQUM5QixJQUFJLDhEQUE4RDtBQUNsRSxJQUFJLElBQUk7QUFDUixJQUNJLHNEQUFzRDtBQUMxRCxJQUFJLHNDQUFzQztBQUMxQyxJQUFJLDBDQUEwQztBQUM5QyxJQUFJLElBQUk7QUFDUixJQUNJLGVBQWU7QUFBSyxRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzFELFFBQVEsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0RCxJQUFJLENBQUM7QUFDTCxJQUNJLGlCQUFpQjtBQUFLLFFBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0QsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxRQUFRO0FBQ1osUUFBUSxPQUFPLEVBQUUsQ0FBQztBQUNsQixJQUFJLENBQUM7QUFDTDtrREE5RUMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxtQ0FBbUMsa0JBRTdDOzhOQUEyQyxjQUM5Qzs7Ozs7Ozs7Ozs7Ozs7O2lGQUNJO0FBQUM7QUFBZ0QsWUF2QmxELFVBQVU7QUFDWixZQUFFLGlCQUFpQjtBQUNuQiw0Q0F5RE8sUUFBUSxZQUFJLE1BQU0sU0FBQyxnQ0FBZ0M7QUFBUTtBQUFHO0FBQTBDLDRCQW5DNUcsV0FBVyxTQUFDLHVCQUF1QjtBQUNuQyw0QkFJQSxXQUFXLFNBQUMsdUJBQXVCO0FBQ25DLG9CQUlBLFdBQVcsU0FBQyxXQUFXO0FBQU8sd0JBRTlCLFdBQVcsU0FBQyxlQUFlO0FBQU8saUJBRWxDLEtBQUs7QUFBSyx1QkFFVixLQUFLO0FBQUssMEJBRVYsS0FBSztBQUNSLHVCQUlHLFdBQVcsU0FBQyxnQkFBZ0I7QUFBTyx1QkFHbkMsV0FBVyxTQUFDLGNBQWM7QUFDMUIsc0JBV0EsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBFbGVtZW50UmVmLFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIEluamVjdCxcbiAgICBmb3J3YXJkUmVmLFxuICAgIEluamVjdGlvblRva2VuLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBPcHRpb25hbCxcbiAgICBPbkluaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb2N1c2FibGVPcHRpb24sIEZvY3VzT3JpZ2luLCBIaWdobGlnaHRhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuLy8gaW1wb3J0IHsgU2VsZWN0aW9uTW9kZWwgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnbmd4LXRldGh5cy91dGlsJztcbmltcG9ydCB7IElUaHlMaXN0T3B0aW9uUGFyZW50Q29tcG9uZW50LCBUSFlfTElTVF9PUFRJT05fUEFSRU5UX0NPTVBPTkVOVCB9IGZyb20gJy4uL29wdGlvbi50b2tlbic7XG5cbmxldCBfdW5pcXVlSWRDb3VudGVyID0gMDtcblxuZXhwb3J0IHR5cGUgVGh5TGlzdExheW91dCA9ICdsaXN0JyB8ICdncmlkJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktbGlzdC1vcHRpb24sW3RoeS1saXN0LW9wdGlvbl0nLFxuXG4gICAgdGVtcGxhdGVVcmw6ICcuL2xpc3Qtb3B0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlMaXN0T3B0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgSGlnaGxpZ2h0YWJsZSB7XG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy50aHktbGlzdC1vcHRpb25gKVxuICAgIGdldCBfaXNMaXN0T3B0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnRTZWxlY3Rpb25MaXN0LmxheW91dCA9PT0gJ2xpc3QnO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZyhgY2xhc3MudGh5LWdyaWQtb3B0aW9uYClcbiAgICBnZXQgX3BhcmVudExheW91dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50U2VsZWN0aW9uTGlzdC5sYXlvdXQgPT09ICdncmlkJztcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoYGF0dHIucm9sZWApIF9yb2xlID0gJ29wdGlvbic7XG5cbiAgICBASG9zdEJpbmRpbmcoYGF0dHIudGFiaW5kZXhgKSBfdGFiSW5kZXggPSAtMTtcblxuICAgIEBJbnB1dCgpIGlkID0gYHRoeS1saXN0LW9wdGlvbi0ke191bmlxdWVJZENvdW50ZXIrK31gO1xuXG4gICAgQElucHV0KCkgdGh5VmFsdWU6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeURpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZyhgY2xhc3MuZGlzYWJsZWRgKSBkaXNhYmxlZD86IGJvb2xlYW47XG5cbiAgICAvKiogV2hldGhlciB0aGUgb3B0aW9uIGlzIHNlbGVjdGVkLiAqL1xuICAgIEBIb3N0QmluZGluZyhgY2xhc3MuYWN0aXZlYClcbiAgICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudFNlbGVjdGlvbkxpc3QuaXNTZWxlY3RlZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChUSFlfTElTVF9PUFRJT05fUEFSRU5UX0NPTVBPTkVOVCkgcHVibGljIHBhcmVudFNlbGVjdGlvbkxpc3Q6IElUaHlMaXN0T3B0aW9uUGFyZW50Q29tcG9uZW50XG4gICAgKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICAgIG9uQ2xpY2soZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudFNlbGVjdGlvbkxpc3QubXVsdGlwbGUgfHwgIXRoaXMucGFyZW50U2VsZWN0aW9uTGlzdC5pc1NlbGVjdGVkKHRoaXMpKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFNlbGVjdGlvbkxpc3QudG9nZ2xlT3B0aW9uKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50U2VsZWN0aW9uTGlzdC5zZXRBY3RpdmVPcHRpb24odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBASG9zdExpc3RlbmVyKCdmb2N1cycsIFsnJGV2ZW50J10pXG4gICAgLy8gb25Gb2N1cyhldmVudDogRXZlbnQpIHtcbiAgICAvLyAgICAgdGhpcy5wYXJlbnRTZWxlY3Rpb25MaXN0LnNldEZvY3VzZWRPcHRpb24odGhpcywgZXZlbnQpO1xuICAgIC8vIH1cblxuICAgIC8qKiBBbGxvd3MgZm9yIHByb2dyYW1tYXRpYyBmb2N1c2luZyBvZiB0aGUgb3B0aW9uLiAqL1xuICAgIC8vIGZvY3VzKG9yaWdpbj86IEZvY3VzT3JpZ2luKTogdm9pZCB7XG4gICAgLy8gICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgLy8gfVxuXG4gICAgc2V0QWN0aXZlU3R5bGVzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdob3ZlcicpO1xuICAgICAgICB0aGlzLnBhcmVudFNlbGVjdGlvbkxpc3Quc2Nyb2xsSW50b1ZpZXcodGhpcyk7XG4gICAgfVxuXG4gICAgc2V0SW5hY3RpdmVTdHlsZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hvdmVyJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBpdGVtJ3MgdGV4dCBsYWJlbC4gSW1wbGVtZW50ZWQgYXMgYSBwYXJ0IG9mIHRoZSBGb2N1c0tleU1hbmFnZXIuXG4gICAgICogQGRvY3MtcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldExhYmVsKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuIl19
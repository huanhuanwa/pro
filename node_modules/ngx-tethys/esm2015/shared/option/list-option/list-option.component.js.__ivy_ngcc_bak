import { Component, Input, HostBinding, ElementRef, ChangeDetectorRef, Inject, HostListener, Optional } from '@angular/core';
// import { SelectionModel } from '@angular/cdk/collections';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { THY_LIST_OPTION_PARENT_COMPONENT } from '../option.token';
let _uniqueIdCounter = 0;
export class ThyListOptionComponent {
    constructor(element, changeDetector, 
    /** @docs-private */
    parentSelectionList) {
        this.element = element;
        this.changeDetector = changeDetector;
        this.parentSelectionList = parentSelectionList;
        this._role = 'option';
        this._tabIndex = -1;
        this.id = `thy-list-option-${_uniqueIdCounter++}`;
    }
    get _isListOption() {
        return this.parentSelectionList.layout === 'list';
    }
    get _parentLayout() {
        return this.parentSelectionList.layout === 'grid';
    }
    set thyDisabled(value) {
        this.disabled = coerceBooleanProperty(value);
    }
    /** Whether the option is selected. */
    get selected() {
        return this.parentSelectionList.isSelected(this);
    }
    onClick(event) {
        if (this.parentSelectionList.multiple || !this.parentSelectionList.isSelected(this)) {
            this.parentSelectionList.toggleOption(this, event);
            this.parentSelectionList.setActiveOption(this);
        }
    }
    // @HostListener('focus', ['$event'])
    // onFocus(event: Event) {
    //     this.parentSelectionList.setFocusedOption(this, event);
    // }
    /** Allows for programmatic focusing of the option. */
    // focus(origin?: FocusOrigin): void {
    //     this.element.nativeElement.focus();
    // }
    setActiveStyles() {
        this.element.nativeElement.classList.add('hover');
        this.parentSelectionList.scrollIntoView(this);
    }
    setInactiveStyles() {
        this.element.nativeElement.classList.remove('hover');
    }
    /**
     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.
     * @docs-private
     */
    getLabel() {
        return '';
    }
}
ThyListOptionComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-list-option,[thy-list-option]',
                template: "<ng-content></ng-content>\n<span class=\"checked-icon\" *ngIf=\"parentSelectionList.multiple && parentSelectionList.layout === 'list'\">\n  <thy-icon thyIconName=\"check\"></thy-icon>\n</span>\n<span *ngIf=\"parentSelectionList.layout === 'grid'\" class=\"checked-icon\">\n  <thy-icon thyIconName=\"check-circle-fill\"></thy-icon>\n</span>\n"
            },] }
];
ThyListOptionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_LIST_OPTION_PARENT_COMPONENT,] }] }
];
ThyListOptionComponent.propDecorators = {
    _isListOption: [{ type: HostBinding, args: [`class.thy-list-option`,] }],
    _parentLayout: [{ type: HostBinding, args: [`class.thy-grid-option`,] }],
    _role: [{ type: HostBinding, args: [`attr.role`,] }],
    _tabIndex: [{ type: HostBinding, args: [`attr.tabindex`,] }],
    id: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    disabled: [{ type: HostBinding, args: [`class.disabled`,] }],
    selected: [{ type: HostBinding, args: [`class.active`,] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1vcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3NoYXJlZC9vcHRpb24vbGlzdC1vcHRpb24vbGlzdC1vcHRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFdBQVcsRUFDWCxVQUFVLEVBQ1YsaUJBQWlCLEVBQ2pCLE1BQU0sRUFHTixZQUFZLEVBQ1osUUFBUSxFQUVYLE1BQU0sZUFBZSxDQUFDO0FBRXZCLDZEQUE2RDtBQUM3RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RCxPQUFPLEVBQWlDLGdDQUFnQyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEcsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7QUFTekIsTUFBTSxPQUFPLHNCQUFzQjtJQWdDL0IsWUFDVyxPQUFnQyxFQUMvQixjQUFpQztJQUN6QyxvQkFBb0I7SUFDeUMsbUJBQWtEO1FBSHhHLFlBQU8sR0FBUCxPQUFPLENBQXlCO1FBQy9CLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQUVvQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQStCO1FBekJ6RixVQUFLLEdBQUcsUUFBUSxDQUFDO1FBRWIsY0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXBDLE9BQUUsR0FBRyxtQkFBbUIsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO0lBc0JuRCxDQUFDO0lBcENKLElBQ0ksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQ0ksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUM7SUFDdEQsQ0FBQztJQVVELElBQ0ksV0FBVyxDQUFDLEtBQWM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBSUQsc0NBQXNDO0lBQ3RDLElBQ0ksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBVUQsT0FBTyxDQUFDLEtBQVk7UUFDaEIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqRixJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNuRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xEO0lBQ0wsQ0FBQztJQUVELHFDQUFxQztJQUNyQywwQkFBMEI7SUFDMUIsOERBQThEO0lBQzlELElBQUk7SUFFSixzREFBc0Q7SUFDdEQsc0NBQXNDO0lBQ3RDLDBDQUEwQztJQUMxQyxJQUFJO0lBRUosZUFBZTtRQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNKLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQzs7O1lBN0VKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUNBQW1DO2dCQUU3QyxpV0FBMkM7YUFDOUM7OztZQXRCRyxVQUFVO1lBQ1YsaUJBQWlCOzRDQTBEWixRQUFRLFlBQUksTUFBTSxTQUFDLGdDQUFnQzs7OzRCQW5DdkQsV0FBVyxTQUFDLHVCQUF1Qjs0QkFLbkMsV0FBVyxTQUFDLHVCQUF1QjtvQkFLbkMsV0FBVyxTQUFDLFdBQVc7d0JBRXZCLFdBQVcsU0FBQyxlQUFlO2lCQUUzQixLQUFLO3VCQUVMLEtBQUs7MEJBRUwsS0FBSzt1QkFLTCxXQUFXLFNBQUMsZ0JBQWdCO3VCQUc1QixXQUFXLFNBQUMsY0FBYztzQkFZMUIsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgSW5qZWN0LFxuICAgIGZvcndhcmRSZWYsXG4gICAgSW5qZWN0aW9uVG9rZW4sXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIE9wdGlvbmFsLFxuICAgIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvY3VzYWJsZU9wdGlvbiwgRm9jdXNPcmlnaW4sIEhpZ2hsaWdodGFibGUgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG4vLyBpbXBvcnQgeyBTZWxlY3Rpb25Nb2RlbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2xsZWN0aW9ucyc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuaW1wb3J0IHsgSVRoeUxpc3RPcHRpb25QYXJlbnRDb21wb25lbnQsIFRIWV9MSVNUX09QVElPTl9QQVJFTlRfQ09NUE9ORU5UIH0gZnJvbSAnLi4vb3B0aW9uLnRva2VuJztcblxubGV0IF91bmlxdWVJZENvdW50ZXIgPSAwO1xuXG5leHBvcnQgdHlwZSBUaHlMaXN0TGF5b3V0ID0gJ2xpc3QnIHwgJ2dyaWQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1saXN0LW9wdGlvbixbdGh5LWxpc3Qtb3B0aW9uXScsXG5cbiAgICB0ZW1wbGF0ZVVybDogJy4vbGlzdC1vcHRpb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRoeUxpc3RPcHRpb25Db21wb25lbnQgaW1wbGVtZW50cyBIaWdobGlnaHRhYmxlIHtcbiAgICBASG9zdEJpbmRpbmcoYGNsYXNzLnRoeS1saXN0LW9wdGlvbmApXG4gICAgZ2V0IF9pc0xpc3RPcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudFNlbGVjdGlvbkxpc3QubGF5b3V0ID09PSAnbGlzdCc7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy50aHktZ3JpZC1vcHRpb25gKVxuICAgIGdldCBfcGFyZW50TGF5b3V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnRTZWxlY3Rpb25MaXN0LmxheW91dCA9PT0gJ2dyaWQnO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZyhgYXR0ci5yb2xlYCkgX3JvbGUgPSAnb3B0aW9uJztcblxuICAgIEBIb3N0QmluZGluZyhgYXR0ci50YWJpbmRleGApIF90YWJJbmRleCA9IC0xO1xuXG4gICAgQElucHV0KCkgaWQgPSBgdGh5LWxpc3Qtb3B0aW9uLSR7X3VuaXF1ZUlkQ291bnRlcisrfWA7XG5cbiAgICBASW5wdXQoKSB0aHlWYWx1ZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5RGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy5kaXNhYmxlZGApIGRpc2FibGVkPzogYm9vbGVhbjtcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBvcHRpb24gaXMgc2VsZWN0ZWQuICovXG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy5hY3RpdmVgKVxuICAgIGdldCBzZWxlY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50U2VsZWN0aW9uTGlzdC5pc1NlbGVjdGVkKHRoaXMpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFRIWV9MSVNUX09QVElPTl9QQVJFTlRfQ09NUE9ORU5UKSBwdWJsaWMgcGFyZW50U2VsZWN0aW9uTGlzdDogSVRoeUxpc3RPcHRpb25QYXJlbnRDb21wb25lbnRcbiAgICApIHt9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gICAgb25DbGljayhldmVudDogRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50U2VsZWN0aW9uTGlzdC5tdWx0aXBsZSB8fCAhdGhpcy5wYXJlbnRTZWxlY3Rpb25MaXN0LmlzU2VsZWN0ZWQodGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50U2VsZWN0aW9uTGlzdC50b2dnbGVPcHRpb24odGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRTZWxlY3Rpb25MaXN0LnNldEFjdGl2ZU9wdGlvbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzJywgWyckZXZlbnQnXSlcbiAgICAvLyBvbkZvY3VzKGV2ZW50OiBFdmVudCkge1xuICAgIC8vICAgICB0aGlzLnBhcmVudFNlbGVjdGlvbkxpc3Quc2V0Rm9jdXNlZE9wdGlvbih0aGlzLCBldmVudCk7XG4gICAgLy8gfVxuXG4gICAgLyoqIEFsbG93cyBmb3IgcHJvZ3JhbW1hdGljIGZvY3VzaW5nIG9mIHRoZSBvcHRpb24uICovXG4gICAgLy8gZm9jdXMob3JpZ2luPzogRm9jdXNPcmlnaW4pOiB2b2lkIHtcbiAgICAvLyAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAvLyB9XG5cbiAgICBzZXRBY3RpdmVTdHlsZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hvdmVyJyk7XG4gICAgICAgIHRoaXMucGFyZW50U2VsZWN0aW9uTGlzdC5zY3JvbGxJbnRvVmlldyh0aGlzKTtcbiAgICB9XG5cbiAgICBzZXRJbmFjdGl2ZVN0eWxlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IGl0ZW0ncyB0ZXh0IGxhYmVsLiBJbXBsZW1lbnRlZCBhcyBhIHBhcnQgb2YgdGhlIEZvY3VzS2V5TWFuYWdlci5cbiAgICAgKiBAZG9jcy1wcml2YXRlXG4gICAgICovXG4gICAgZ2V0TGFiZWwoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG4iXX0=
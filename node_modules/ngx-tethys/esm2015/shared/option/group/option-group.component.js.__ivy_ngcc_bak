import { Component, HostBinding, Input, ContentChildren, QueryList, NgZone } from '@angular/core';
import { defer, Subject, merge } from 'rxjs';
import { ThyOptionComponent } from '../option.component';
import { take, switchMap, startWith, takeUntil, debounceTime, map } from 'rxjs/operators';
import { THY_OPTION_GROUP_COMPONENT } from '../option.token';
export class ThySelectOptionGroupComponent {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this._hidden = false;
        this._isOptionGroup = true;
        this._destroy$ = new Subject();
        this.optionVisibleChanges = defer(() => {
            if (this.options) {
                return merge(...this.options.map(option => option.visibleChange));
            }
            return this._ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionVisibleChanges));
        });
    }
    get hidden() {
        return this._hidden;
    }
    ngAfterContentInit() {
        this.options.changes.pipe(startWith(null), takeUntil(this._destroy$)).subscribe(() => {
            this._resetOptions();
        });
    }
    _resetOptions() {
        const changedOrDestroyed$ = merge(this.options.changes, this._destroy$);
        merge(...this.options.map(option => option.visibleChange))
            .pipe(takeUntil(changedOrDestroyed$), debounceTime(10), map((event) => {
            const hasOption = this.options.find(option => {
                if (!option.hidden) {
                    return true;
                }
            });
            if (hasOption) {
                return false;
            }
            else {
                return true;
            }
        }))
            .subscribe((data) => {
            this._hidden = data;
        });
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
}
ThySelectOptionGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-option-group',
                template: "<span class=\"group-name text-desc\">{{ thyGroupLabel }}</span>\n<ng-content></ng-content>\n",
                providers: [
                    {
                        provide: THY_OPTION_GROUP_COMPONENT,
                        useExisting: ThySelectOptionGroupComponent
                    }
                ]
            },] }
];
ThySelectOptionGroupComponent.ctorParameters = () => [
    { type: NgZone }
];
ThySelectOptionGroupComponent.propDecorators = {
    thyDisabled: [{ type: Input }, { type: HostBinding, args: [`class.disabled`,] }],
    _isOptionGroup: [{ type: HostBinding, args: ['class.thy-option-item-group',] }],
    hidden: [{ type: HostBinding, args: ['class.thy-select-option-group-hidden',] }],
    thyGroupLabel: [{ type: Input }],
    options: [{ type: ContentChildren, args: [ThyOptionComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zaGFyZWQvb3B0aW9uL2dyb3VwL29wdGlvbi1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFVLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUErQixNQUFNLGVBQWUsQ0FBQztBQUN2SSxPQUFPLEVBQWMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQWlCLE1BQU0sTUFBTSxDQUFDO0FBQ3hFLE9BQU8sRUFBK0Isa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RixPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFVLFlBQVksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVk3RCxNQUFNLE9BQU8sNkJBQTZCO0lBNkJ0QyxZQUFvQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQTVCbkMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUs0QixtQkFBYyxHQUFHLElBQUksQ0FBQztRQVdsRSxjQUFTLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFFN0MseUJBQW9CLEdBQTRDLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDdkUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNkLE9BQU8sS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQzthQUNyRTtZQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUM1QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUM3QyxDQUFDO1FBQ04sQ0FBQyxDQUE0QyxDQUFDO0lBRVIsQ0FBQztJQXJCdkMsSUFDSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFvQkQsa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNqRixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsYUFBYTtRQUNULE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUNyRCxJQUFJLENBQ0QsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEVBQzlCLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFDaEIsR0FBRyxDQUFDLENBQUMsS0FBa0MsRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtvQkFDaEIsT0FBTyxJQUFJLENBQUM7aUJBQ2Y7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksU0FBUyxFQUFFO2dCQUNYLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO2lCQUFNO2dCQUNILE9BQU8sSUFBSSxDQUFDO2FBQ2Y7UUFDTCxDQUFDLENBQUMsQ0FDTDthQUNBLFNBQVMsQ0FBQyxDQUFDLElBQWEsRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7O1lBMUVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qix3R0FBNEM7Z0JBQzVDLFNBQVMsRUFBRTtvQkFDUDt3QkFDSSxPQUFPLEVBQUUsMEJBQTBCO3dCQUNuQyxXQUFXLEVBQUUsNkJBQTZCO3FCQUM3QztpQkFDSjthQUNKOzs7WUFmMkUsTUFBTTs7OzBCQWtCN0UsS0FBSyxZQUNMLFdBQVcsU0FBQyxnQkFBZ0I7NkJBRzVCLFdBQVcsU0FBQyw2QkFBNkI7cUJBRXpDLFdBQVcsU0FBQyxzQ0FBc0M7NEJBS2xELEtBQUs7c0JBRUwsZUFBZSxTQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0LCBOZ1pvbmUsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZGVmZXIsIFN1YmplY3QsIG1lcmdlLCBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUaHlPcHRpb25WaXNpYmxlQ2hhbmdlRXZlbnQsIFRoeU9wdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL29wdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgdGFrZSwgc3dpdGNoTWFwLCBzdGFydFdpdGgsIHRha2VVbnRpbCwgcmVkdWNlLCBkZWJvdW5jZVRpbWUsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFRIWV9PUFRJT05fR1JPVVBfQ09NUE9ORU5UIH0gZnJvbSAnLi4vb3B0aW9uLnRva2VuJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktb3B0aW9uLWdyb3VwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vb3B0aW9uLWdyb3VwLmNvbXBvbmVudC5odG1sJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVEhZX09QVElPTl9HUk9VUF9DT01QT05FTlQsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVGh5U2VsZWN0T3B0aW9uR3JvdXBDb21wb25lbnRcbiAgICAgICAgfVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgVGh5U2VsZWN0T3B0aW9uR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyQ29udGVudEluaXQge1xuICAgIF9oaWRkZW4gPSBmYWxzZTtcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZyhgY2xhc3MuZGlzYWJsZWRgKVxuICAgIHRoeURpc2FibGVkOiBib29sZWFuO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktb3B0aW9uLWl0ZW0tZ3JvdXAnKSBfaXNPcHRpb25Hcm91cCA9IHRydWU7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1zZWxlY3Qtb3B0aW9uLWdyb3VwLWhpZGRlbicpXG4gICAgZ2V0IGhpZGRlbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hpZGRlbjtcbiAgICB9XG5cbiAgICBASW5wdXQoKSB0aHlHcm91cExhYmVsOiBzdHJpbmc7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKFRoeU9wdGlvbkNvbXBvbmVudCkgb3B0aW9uczogUXVlcnlMaXN0PFRoeU9wdGlvbkNvbXBvbmVudD47XG5cbiAgICBfZGVzdHJveSQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcblxuICAgIG9wdGlvblZpc2libGVDaGFuZ2VzOiBPYnNlcnZhYmxlPFRoeU9wdGlvblZpc2libGVDaGFuZ2VFdmVudD4gPSBkZWZlcigoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZSguLi50aGlzLm9wdGlvbnMubWFwKG9wdGlvbiA9PiBvcHRpb24udmlzaWJsZUNoYW5nZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9uZ1pvbmUub25TdGFibGUuYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5vcHRpb25WaXNpYmxlQ2hhbmdlcylcbiAgICAgICAgKTtcbiAgICB9KSBhcyBPYnNlcnZhYmxlPFRoeU9wdGlvblZpc2libGVDaGFuZ2VFdmVudD47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9uZ1pvbmU6IE5nWm9uZSkge31cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNoYW5nZXMucGlwZShzdGFydFdpdGgobnVsbCksIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95JCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZXNldE9wdGlvbnMoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3Jlc2V0T3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgY2hhbmdlZE9yRGVzdHJveWVkJCA9IG1lcmdlKHRoaXMub3B0aW9ucy5jaGFuZ2VzLCB0aGlzLl9kZXN0cm95JCk7XG4gICAgICAgIG1lcmdlKC4uLnRoaXMub3B0aW9ucy5tYXAob3B0aW9uID0+IG9wdGlvbi52aXNpYmxlQ2hhbmdlKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbChjaGFuZ2VkT3JEZXN0cm95ZWQkKSxcbiAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWUoMTApLFxuICAgICAgICAgICAgICAgIG1hcCgoZXZlbnQ6IFRoeU9wdGlvblZpc2libGVDaGFuZ2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNPcHRpb24gPSB0aGlzLm9wdGlvbnMuZmluZChvcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb24uaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChkYXRhOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGlkZGVuID0gZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95JC5uZXh0KCk7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19
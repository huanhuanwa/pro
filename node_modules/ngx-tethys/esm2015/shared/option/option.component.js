import { Component, Input, TemplateRef, ViewChild, ChangeDetectionStrategy, HostBinding, HostListener, ElementRef, ChangeDetectorRef, EventEmitter, Output, Inject, Optional } from '@angular/core';
import { SelectOptionBase } from './select-option-base';
import { ENTER, SPACE, hasModifierKey } from 'ngx-tethys/util';
import { THY_OPTION_GROUP_COMPONENT, THY_OPTION_PARENT_COMPONENT } from './option.token';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ThyOptionComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementStart(2, "span", 2);
    ɵngcc0.ɵɵelement(3, "i", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ThyOptionComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 2);
    ɵngcc0.ɵɵelement(3, "i", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.thyLabelText);
} }
const _c0 = ["*"];
export class ThyOptionSelectionChangeEvent {
    constructor(option, isUserInput = false) {
        this.option = option;
        this.isUserInput = isUserInput;
    }
}
export class ThyOptionVisibleChangeEvent {
}
export class ThyOptionComponent extends SelectOptionBase {
    constructor(element, parent, group, cdr) {
        super();
        this.element = element;
        this.parent = parent;
        this.group = group;
        this.cdr = cdr;
        this._selected = false;
        this._hidden = false;
        this._disabled = false;
        this._isOptionItem = true;
        this.selectionChange = new EventEmitter();
        this.visibleChange = new EventEmitter();
    }
    set thyDisabled(value) {
        this._disabled = value;
    }
    get thyDisabled() {
        return this._disabled;
    }
    get disabled() {
        return this.hidden || this._disabled;
    }
    get hidden() {
        return this._hidden;
    }
    get tabIndex() {
        return this.disabled ? '-1' : '0';
    }
    get selected() {
        return this._selected;
    }
    getHostElement() {
        return this.element.nativeElement;
    }
    onClick(event) {
        this.selectViaInteraction();
    }
    handleKeydown(event) {
        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {
            this.selectViaInteraction();
            event.preventDefault();
        }
    }
    selectViaInteraction() {
        if (!this.disabled) {
            this._selected = this.parent.isMultiple ? !this._selected : true;
            this.cdr.markForCheck();
            this.emitSelectionChangeEvent(true);
        }
    }
    select(event) {
        if (!this.disabled) {
            if (!this._selected) {
                this._selected = true;
                this.emitSelectionChangeEvent();
                this.cdr.markForCheck();
            }
        }
    }
    deselect() {
        if (this._selected) {
            this._selected = false;
            this.emitSelectionChangeEvent();
            this.cdr.markForCheck();
        }
    }
    hideOption() {
        if (!this._hidden) {
            this._hidden = true;
            this.visibleChange.emit({ option: this });
            this.cdr.markForCheck();
        }
    }
    showOption() {
        if (this._hidden) {
            this._hidden = false;
            this.visibleChange.emit({ option: this });
            this.cdr.markForCheck();
        }
    }
    matchSearchText(searchText) {
        if (this.thySearchKey) {
            if (this.thySearchKey.indexOf(searchText) >= 0) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (this.thyLabelText.indexOf(searchText) >= 0) {
                return true;
            }
            else {
                return false;
            }
        }
    }
    setActiveStyles() {
        this.getHostElement().classList.add('hover');
        this.cdr.markForCheck();
    }
    setInactiveStyles() {
        this.getHostElement().classList.remove('hover');
        this.cdr.markForCheck();
    }
    getLabel() {
        return '';
    }
    emitSelectionChangeEvent(isUserInput = false) {
        this.selectionChange.emit(new ThyOptionSelectionChangeEvent(this, isUserInput));
    }
    ngOnDestroy() { }
}
ThyOptionComponent.ɵfac = function ThyOptionComponent_Factory(t) { return new (t || ThyOptionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_OPTION_PARENT_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(THY_OPTION_GROUP_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyOptionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyOptionComponent, selectors: [["thy-option"]], viewQuery: function ThyOptionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, hostVars: 9, hostBindings: function ThyOptionComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyOptionComponent_click_HostBindingHandler($event) { return ctx.onClick($event); })("keydown", function ThyOptionComponent_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵclassProp("thy-option-item", ctx._isOptionItem)("disabled", ctx.thyDisabled)("hidden", ctx.hidden)("active", ctx.selected);
    } }, inputs: { thyDisabled: "thyDisabled", thyValue: "thyValue", thyRawValue: "thyRawValue", thyLabelText: "thyLabelText", thyShowOptionCustom: "thyShowOptionCustom", thySearchKey: "thySearchKey" }, outputs: { selectionChange: "selectionChange", visibleChange: "visibleChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["defaultOption", ""], [1, "checked-icon"], [1, "wtf", "wtf-checked"], [1, "text-truncate"]], template: function ThyOptionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyOptionComponent_ng_container_0_Template, 4, 0, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, ThyOptionComponent_ng_template_1_Template, 4, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyShowOptionCustom)("ngIfElse", _r1);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
ThyOptionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_OPTION_PARENT_COMPONENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_OPTION_GROUP_COMPONENT,] }] },
    { type: ChangeDetectorRef }
];
ThyOptionComponent.propDecorators = {
    thyValue: [{ type: Input }],
    thyRawValue: [{ type: Input }],
    thyLabelText: [{ type: Input }],
    thyShowOptionCustom: [{ type: Input }],
    thySearchKey: [{ type: Input }],
    _isOptionItem: [{ type: HostBinding, args: ['class.thy-option-item',] }],
    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
    thyDisabled: [{ type: Input }, { type: HostBinding, args: [`class.disabled`,] }],
    hidden: [{ type: HostBinding, args: ['class.hidden',] }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    selected: [{ type: HostBinding, args: [`class.active`,] }],
    selectionChange: [{ type: Output }],
    visibleChange: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    handleKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyOptionComponent, [{
        type: Component,
        args: [{
                selector: 'thy-option',
                template: "<ng-container *ngIf=\"thyShowOptionCustom; else defaultOption\">\n  <ng-content></ng-content>\n  <span class=\"checked-icon\">\n    <i class=\"wtf wtf-checked\"></i>\n  </span>\n</ng-container>\n<ng-template #defaultOption>\n  <span class=\"text-truncate\">{{ thyLabelText }}</span>\n  <span class=\"checked-icon\">\n    <i class=\"wtf wtf-checked\"></i>\n  </span>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_OPTION_PARENT_COMPONENT]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_OPTION_GROUP_COMPONENT]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _isOptionItem: [{
            type: HostBinding,
            args: ['class.thy-option-item']
        }], selectionChange: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], thyDisabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: [`class.disabled`]
        }], hidden: [{
            type: HostBinding,
            args: ['class.hidden']
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], selected: [{
            type: HostBinding,
            args: [`class.active`]
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], handleKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], thyValue: [{
            type: Input
        }], thyRawValue: [{
            type: Input
        }], thyLabelText: [{
            type: Input
        }], thyShowOptionCustom: [{
            type: Input
        }], thySearchKey: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
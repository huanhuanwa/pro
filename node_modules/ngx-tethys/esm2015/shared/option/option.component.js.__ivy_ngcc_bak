import { Component, Input, TemplateRef, ViewChild, ChangeDetectionStrategy, HostBinding, HostListener, ElementRef, ChangeDetectorRef, EventEmitter, Output, Inject, Optional } from '@angular/core';
import { SelectOptionBase } from './select-option-base';
import { ENTER, SPACE, hasModifierKey } from 'ngx-tethys/util';
import { THY_OPTION_GROUP_COMPONENT, THY_OPTION_PARENT_COMPONENT } from './option.token';
export class ThyOptionSelectionChangeEvent {
    constructor(option, isUserInput = false) {
        this.option = option;
        this.isUserInput = isUserInput;
    }
}
export class ThyOptionVisibleChangeEvent {
}
export class ThyOptionComponent extends SelectOptionBase {
    constructor(element, parent, group, cdr) {
        super();
        this.element = element;
        this.parent = parent;
        this.group = group;
        this.cdr = cdr;
        this._selected = false;
        this._hidden = false;
        this._disabled = false;
        this._isOptionItem = true;
        this.selectionChange = new EventEmitter();
        this.visibleChange = new EventEmitter();
    }
    set thyDisabled(value) {
        this._disabled = value;
    }
    get thyDisabled() {
        return this._disabled;
    }
    get disabled() {
        return this.hidden || this._disabled;
    }
    get hidden() {
        return this._hidden;
    }
    get tabIndex() {
        return this.disabled ? '-1' : '0';
    }
    get selected() {
        return this._selected;
    }
    getHostElement() {
        return this.element.nativeElement;
    }
    onClick(event) {
        this.selectViaInteraction();
    }
    handleKeydown(event) {
        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {
            this.selectViaInteraction();
            event.preventDefault();
        }
    }
    selectViaInteraction() {
        if (!this.disabled) {
            this._selected = this.parent.isMultiple ? !this._selected : true;
            this.cdr.markForCheck();
            this.emitSelectionChangeEvent(true);
        }
    }
    select(event) {
        if (!this.disabled) {
            if (!this._selected) {
                this._selected = true;
                this.emitSelectionChangeEvent();
                this.cdr.markForCheck();
            }
        }
    }
    deselect() {
        if (this._selected) {
            this._selected = false;
            this.emitSelectionChangeEvent();
            this.cdr.markForCheck();
        }
    }
    hideOption() {
        if (!this._hidden) {
            this._hidden = true;
            this.visibleChange.emit({ option: this });
            this.cdr.markForCheck();
        }
    }
    showOption() {
        if (this._hidden) {
            this._hidden = false;
            this.visibleChange.emit({ option: this });
            this.cdr.markForCheck();
        }
    }
    matchSearchText(searchText) {
        if (this.thySearchKey) {
            if (this.thySearchKey.indexOf(searchText) >= 0) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (this.thyLabelText.indexOf(searchText) >= 0) {
                return true;
            }
            else {
                return false;
            }
        }
    }
    setActiveStyles() {
        this.getHostElement().classList.add('hover');
        this.cdr.markForCheck();
    }
    setInactiveStyles() {
        this.getHostElement().classList.remove('hover');
        this.cdr.markForCheck();
    }
    getLabel() {
        return '';
    }
    emitSelectionChangeEvent(isUserInput = false) {
        this.selectionChange.emit(new ThyOptionSelectionChangeEvent(this, isUserInput));
    }
    ngOnDestroy() { }
}
ThyOptionComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-option',
                template: "<ng-container *ngIf=\"thyShowOptionCustom; else defaultOption\">\n  <ng-content></ng-content>\n  <span class=\"checked-icon\">\n    <i class=\"wtf wtf-checked\"></i>\n  </span>\n</ng-container>\n<ng-template #defaultOption>\n  <span class=\"text-truncate\">{{ thyLabelText }}</span>\n  <span class=\"checked-icon\">\n    <i class=\"wtf wtf-checked\"></i>\n  </span>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyOptionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_OPTION_PARENT_COMPONENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_OPTION_GROUP_COMPONENT,] }] },
    { type: ChangeDetectorRef }
];
ThyOptionComponent.propDecorators = {
    thyValue: [{ type: Input }],
    thyRawValue: [{ type: Input }],
    thyLabelText: [{ type: Input }],
    thyShowOptionCustom: [{ type: Input }],
    thySearchKey: [{ type: Input }],
    _isOptionItem: [{ type: HostBinding, args: ['class.thy-option-item',] }],
    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
    thyDisabled: [{ type: Input }, { type: HostBinding, args: [`class.disabled`,] }],
    hidden: [{ type: HostBinding, args: ['class.hidden',] }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    selected: [{ type: HostBinding, args: [`class.active`,] }],
    selectionChange: [{ type: Output }],
    visibleChange: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    handleKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,
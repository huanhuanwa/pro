import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
/**
 * 将来会移动到 thy 组件库中
 */
import * as ɵngcc0 from '@angular/core';
export class ThyStopPropagationDirective {
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._eventName = 'click';
        this.isStopPropagation = true;
    }
    set thyStopPropagation(value) {
        if (value === false || value === 'false') {
            this.isStopPropagation = false;
        }
        else {
            this.isStopPropagation = true;
            this._eventName = value || 'click';
        }
    }
    ngOnInit() {
        if (this.isStopPropagation) {
            this._listener = this._renderer.listen(this._elementRef.nativeElement, this._eventName, ($event) => {
                $event.stopPropagation();
            });
        }
    }
    ngOnDestroy() {
        if (this._listener) {
            this._listener();
        }
    }
}
ThyStopPropagationDirective.ɵfac = function ThyStopPropagationDirective_Factory(t) { return new (t || ThyStopPropagationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyStopPropagationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyStopPropagationDirective, selectors: [["", "thyStopPropagation", ""]], inputs: { thyStopPropagation: "thyStopPropagation" } });
ThyStopPropagationDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ThyStopPropagationDirective.propDecorators = {
    thyStopPropagation: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyStopPropagationDirective, [{
        type: Directive,
        args: [{
                selector: '[thyStopPropagation]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { thyStopPropagation: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LXN0b3AtcHJvcGFnYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2hhcmVkL2RpcmVjdGl2ZXMvdGh5LXN0b3AtcHJvcGFnYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBcUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNGO0FBQ0E7QUFDQSxHQUFHOztBQUlILE1BQU0sT0FBTywyQkFBMkI7QUFBRyxJQWlCdkMsWUFBb0IsV0FBdUIsRUFBVSxTQUFvQjtBQUFJLFFBQXpELGdCQUFXLEdBQVgsV0FBVyxDQUFZO0FBQUMsUUFBUyxjQUFTLEdBQVQsU0FBUyxDQUFXO0FBQUMsUUFkbEUsZUFBVSxHQUFHLE9BQU8sQ0FBQztBQUNqQyxRQUNZLHNCQUFpQixHQUFHLElBQUksQ0FBQztBQUNyQyxJQVdnRixDQUFDO0FBQ2pGLElBWEksSUFDSSxrQkFBa0IsQ0FBQyxLQUFVO0FBQ3JDLFFBQVEsSUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssS0FBSyxPQUFPLEVBQUU7QUFDbEQsWUFBWSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQzNDLFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQzFDLFlBQVksSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLElBQUksT0FBTyxDQUFDO0FBQy9DLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUdJLFFBQVE7QUFDWixRQUFRLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO0FBQ3BDLFlBQVksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBYSxFQUFFLEVBQUU7QUFDdEgsZ0JBQWdCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUN6QyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQzVCLFlBQVksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQzdCLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDt1REFuQ0MsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxzQkFBc0IsY0FDbkM7c01BQ0k7QUFBQztBQUFxRCxZQVJ2QyxVQUFVO0FBQUksWUFBd0IsU0FBUztBQUFHO0FBQUc7QUFLekUsaUNBVUssS0FBSztBQUNUOzs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIOWwhuadpeS8muenu+WKqOWIsCB0aHkg57uE5Lu25bqT5LitXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeVN0b3BQcm9wYWdhdGlvbl0nXG59KVxuZXhwb3J0IGNsYXNzIFRoeVN0b3BQcm9wYWdhdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9saXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICAgIHByaXZhdGUgX2V2ZW50TmFtZSA9ICdjbGljayc7XG5cbiAgICBwcml2YXRlIGlzU3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVN0b3BQcm9wYWdhdGlvbih2YWx1ZTogYW55KSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wUHJvcGFnYXRpb24gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wUHJvcGFnYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnROYW1lID0gdmFsdWUgfHwgJ2NsaWNrJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyID0gdGhpcy5fcmVuZGVyZXIubGlzdGVuKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5fZXZlbnROYW1lLCAoJGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
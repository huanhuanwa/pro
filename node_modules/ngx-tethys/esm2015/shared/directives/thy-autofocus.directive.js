import { Directive, Input, ElementRef } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
export class ThyAutofocusDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // 自动选择，用于只读的 input 输入框，方便复制粘贴
        this._autoSelect = false;
    }
    set thyAutoSelect(value) {
        this._autoSelect = coerceBooleanProperty(value);
    }
    // auto focus current element
    set thyAutofocus(value) {
        if (coerceBooleanProperty(value) !== false) {
            setTimeout(() => {
                this.elementRef.nativeElement.focus();
                if (this._autoSelect && this.elementRef.nativeElement.select) {
                    this.elementRef.nativeElement.select();
                }
            });
        }
    }
}
ThyAutofocusDirective.ɵfac = function ThyAutofocusDirective_Factory(t) { return new (t || ThyAutofocusDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyAutofocusDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyAutofocusDirective, selectors: [["input", "thyAutofocus", ""], ["textarea", "thyAutofocus", ""]], inputs: { thyAutoSelect: "thyAutoSelect", thyAutofocus: "thyAutofocus" } });
ThyAutofocusDirective.ctorParameters = () => [
    { type: ElementRef }
];
ThyAutofocusDirective.propDecorators = {
    thyAutoSelect: [{ type: Input }],
    thyAutofocus: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyAutofocusDirective, [{
        type: Directive,
        args: [{
                selector: 'input[thyAutofocus],textarea[thyAutofocus]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { thyAutoSelect: [{
            type: Input
        }], thyAutofocus: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LWF1dG9mb2N1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaGFyZWQvZGlyZWN0aXZlcy90aHktYXV0b2ZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBS3hELE1BQU0sT0FBTyxxQkFBcUI7QUFDbEMsSUFxQkksWUFBb0IsVUFBc0I7QUFBSSxRQUExQixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFyQjNDLDhCQUE4QjtBQUNsQyxRQUFZLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLElBbUJpRCxDQUFDO0FBQ2xELElBbkJJLElBQ0ksYUFBYSxDQUFDLEtBQWM7QUFDcEMsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hELElBQUksQ0FBQztBQUNMLElBQ0ksNkJBQTZCO0FBQ2pDLElBQUksSUFDSSxZQUFZLENBQUMsS0FBdUI7QUFDNUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBRTtBQUNwRCxZQUFZLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDNUIsZ0JBQWdCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3RELGdCQUFnQixJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO0FBQzlFLG9CQUFvQixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMzRCxpQkFBaUI7QUFDakIsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDtpREF4QkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSw0Q0FBNEMsY0FDekQ7K09BQ0k7QUFBQztBQUNVLFlBUFcsVUFBVTtBQUFHO0FBQUc7QUFDckIsNEJBU2pCLEtBQUs7QUFDUiwyQkFLRyxLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnaW5wdXRbdGh5QXV0b2ZvY3VzXSx0ZXh0YXJlYVt0aHlBdXRvZm9jdXNdJ1xufSlcbmV4cG9ydCBjbGFzcyBUaHlBdXRvZm9jdXNEaXJlY3RpdmUge1xuICAgIC8vIOiHquWKqOmAieaLqe+8jOeUqOS6juWPquivu+eahCBpbnB1dCDovpPlhaXmoYbvvIzmlrnkvr/lpI3liLbnspjotLRcbiAgICBwcml2YXRlIF9hdXRvU2VsZWN0ID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlBdXRvU2VsZWN0KHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2F1dG9TZWxlY3QgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8vIGF1dG8gZm9jdXMgY3VycmVudCBlbGVtZW50XG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5QXV0b2ZvY3VzKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgICAgIGlmIChjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYXV0b1NlbGVjdCAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zZWxlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG59XG4iXX0=
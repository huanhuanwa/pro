import { Directive, Renderer2, Input, ElementRef, Output, EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ThyShowDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.thyShowChange = new EventEmitter();
    }
    unListenDocument() {
        if (this.unListenEvent) {
            this.unListenEvent();
            this.unListenEvent = null;
        }
    }
    set thyShow(condition) {
        if (condition) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'block');
            setTimeout(() => {
                this.unListenDocument = this.renderer.listen('document', 'click', event => {
                    if (!this.elementRef.nativeElement.contains(event.target)) {
                        this.thyShowChange.emit(false);
                        this.unListenDocument();
                    }
                });
            });
        }
        else {
            this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.unListenDocument();
        }
    }
    ngOnDestroy() {
        this.unListenDocument();
    }
}
ThyShowDirective.ɵfac = function ThyShowDirective_Factory(t) { return new (t || ThyShowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyShowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyShowDirective, selectors: [["", "thyShow", ""]], inputs: { thyShow: "thyShow" }, outputs: { thyShowChange: "thyShowChange" } });
ThyShowDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ThyShowDirective.propDecorators = {
    thyShowChange: [{ type: Output }],
    thyShow: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyShowDirective, [{
        type: Directive,
        args: [{ selector: '[thyShow]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { thyShowChange: [{
            type: Output
        }], thyShow: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LXNob3cuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaGFyZWQvZGlyZWN0aXZlcy90aHktc2hvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQWEsTUFBTSxlQUFlLENBQUM7O0FBR3pHLE1BQU0sT0FBTyxnQkFBZ0I7QUFBRyxJQTZCNUIsWUFBb0IsVUFBc0IsRUFBVSxRQUFtQjtBQUFJLFFBQXZELGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUFTLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQTVCOUQsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2pELElBMkI4RSxDQUFDO0FBQy9FLElBekJZLGdCQUFnQjtBQUM1QixRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUNoQyxZQUFZLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNqQyxZQUFZLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQ3RDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQWEsT0FBTyxDQUFDLFNBQWtCO0FBQzNDLFFBQVEsSUFBSSxTQUFTLEVBQUU7QUFDdkIsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdEYsWUFBWSxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQzVCLGdCQUFnQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtBQUMxRixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDL0Usd0JBQXdCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELHdCQUF3QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztBQUNoRCxxQkFBcUI7QUFDckIsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0FBQ25CLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDZixTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3JGLFlBQVksSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDcEMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBR0ksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDaEMsSUFBSSxDQUFDO0FBQ0w7NENBbkNDLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUU7NExBQy9CO0FBQUM7QUFBMEMsWUFIVixVQUFVO0FBQUksWUFBaEMsU0FBUztBQUFHO0FBQUc7QUFBb0MsNEJBSWxFLE1BQU07QUFBSyxzQkFXWCxLQUFLO0FBQUk7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFJlbmRlcmVyMiwgSW5wdXQsIEVsZW1lbnRSZWYsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3RoeVNob3ddJyB9KVxuZXhwb3J0IGNsYXNzIFRoeVNob3dEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIEBPdXRwdXQoKSB0aHlTaG93Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgcHJpdmF0ZSB1bkxpc3RlbkV2ZW50OiAoKSA9PiB2b2lkO1xuXG4gICAgcHJpdmF0ZSB1bkxpc3RlbkRvY3VtZW50KCkge1xuICAgICAgICBpZiAodGhpcy51bkxpc3RlbkV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnVuTGlzdGVuRXZlbnQoKTtcbiAgICAgICAgICAgIHRoaXMudW5MaXN0ZW5FdmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKSBzZXQgdGh5U2hvdyhjb25kaXRpb246IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudW5MaXN0ZW5Eb2N1bWVudCA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCdkb2N1bWVudCcsICdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRoeVNob3dDaGFuZ2UuZW1pdChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuTGlzdGVuRG9jdW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICB0aGlzLnVuTGlzdGVuRG9jdW1lbnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudW5MaXN0ZW5Eb2N1bWVudCgpO1xuICAgIH1cbn1cbiJdfQ==
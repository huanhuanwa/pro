import { Directive, ContentChildren, QueryList } from '@angular/core';
import { CdkDrag } from '@angular/cdk/drag-drop';
import { merge, Subject } from 'rxjs';
import { MixinBase, mixinUnsubscribe } from 'ngx-tethys/core';
import { takeUntil, startWith } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyDragDropDirective extends _MixinBase {
    constructor() {
        super();
    }
    ngAfterContentInit() {
        if (this.draggables) {
            this.draggables.changes.pipe(startWith(this.draggables)).subscribe(() => {
                super.ngOnDestroy();
                this.ngUnsubscribe$ = new Subject();
                merge(...this.draggables.toArray().map(dragRef => {
                    return dragRef.started;
                }))
                    .pipe(takeUntil(this.ngUnsubscribe$))
                    .subscribe(() => {
                    document.body.classList.add('thy-dragging-body');
                });
                merge(...this.draggables.toArray().map(dragRef => dragRef.released))
                    .pipe(takeUntil(this.ngUnsubscribe$))
                    .subscribe(() => {
                    document.body.classList.remove('thy-dragging-body');
                });
            });
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyDragDropDirective.ɵfac = function ThyDragDropDirective_Factory(t) { return new (t || ThyDragDropDirective)(); };
ThyDragDropDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDragDropDirective, selectors: [["", "thyDragDrop", ""]], contentQueries: function ThyDragDropDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDrag, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.draggables = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
ThyDragDropDirective.ctorParameters = () => [];
ThyDragDropDirective.propDecorators = {
    draggables: [{ type: ContentChildren, args: [CdkDrag, { descendants: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDragDropDirective, [{
        type: Directive,
        args: [{
                selector: '[thyDragDrop]'
            }]
    }], function () { return []; }, { draggables: [{
            type: ContentChildren,
            args: [CdkDrag, { descendants: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LWRyYWctZHJvcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaGFyZWQvZGlyZWN0aXZlcy90aHktZHJhZy1kcm9wLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFvQixlQUFlLEVBQUUsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ25HLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQWUsU0FBUyxFQUFFLGdCQUFnQixFQUFrQixNQUFNLGlCQUFpQixDQUFDO0FBQzNGLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRXRELE1BQU0sVUFBVSxHQUFtRCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUkvRixNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBVTtBQUFHLElBR25EO0FBQ0osUUFBUSxLQUFLLEVBQUUsQ0FBQztBQUNoQixJQUFJLENBQUM7QUFDTCxJQUNJLGtCQUFrQjtBQUN0QixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUM3QixZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtBQUNwRixnQkFBZ0IsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3BDLGdCQUFnQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDcEQsZ0JBQWdCLEtBQUssQ0FDRCxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQy9ELG9CQUF3QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDL0MsZ0JBQW9CLENBQUMsQ0FBQyxDQUNMO0FBQ2pCLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN6RCxxQkFBcUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtBQUNwQyxvQkFBd0IsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDekUsZ0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLGdCQUNnQixLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwRixxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDekQscUJBQXFCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDcEMsb0JBQXdCLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzVFLGdCQUFvQixDQUFDLENBQUMsQ0FBQztBQUN2QixZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzVCLElBQUksQ0FBQztBQUNMO2dEQXJDQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLGVBQWU7T0FDNUI7Ozs7OzBEQUNJO0FBQUM7QUFBZ0Q7QUFDdEQseUJBQUssZUFBZSxTQUFDLE9BQU8sRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUU7QUFBTTs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEFmdGVyQ29udGVudEluaXQsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENka0RyYWcgfSBmcm9tICdAYW5ndWxhci9jZGsvZHJhZy1kcm9wJztcbmltcG9ydCB7IG1lcmdlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3RvciwgTWl4aW5CYXNlLCBtaXhpblVuc3Vic2NyaWJlLCBUaHlVbnN1YnNjcmliZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5pbXBvcnQgeyB0YWtlVW50aWwsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgX01peGluQmFzZTogQ29uc3RydWN0b3I8VGh5VW5zdWJzY3JpYmU+ICYgdHlwZW9mIE1peGluQmFzZSA9IG1peGluVW5zdWJzY3JpYmUoTWl4aW5CYXNlKTtcbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeURyYWdEcm9wXSdcbn0pXG5leHBvcnQgY2xhc3MgVGh5RHJhZ0Ryb3BEaXJlY3RpdmUgZXh0ZW5kcyBfTWl4aW5CYXNlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBAQ29udGVudENoaWxkcmVuKENka0RyYWcsIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgZHJhZ2dhYmxlczogUXVlcnlMaXN0PENka0RyYWc+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVzKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdnYWJsZXMuY2hhbmdlcy5waXBlKHN0YXJ0V2l0aCh0aGlzLmRyYWdnYWJsZXMpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN1cGVyLm5nT25EZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5uZ1Vuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZHJhZ2dhYmxlcy50b0FycmF5KCkubWFwKGRyYWdSZWYgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRyYWdSZWYuc3RhcnRlZDtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm5nVW5zdWJzY3JpYmUkKSlcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3RoeS1kcmFnZ2luZy1ib2R5Jyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWVyZ2UoLi4udGhpcy5kcmFnZ2FibGVzLnRvQXJyYXkoKS5tYXAoZHJhZ1JlZiA9PiBkcmFnUmVmLnJlbGVhc2VkKSlcbiAgICAgICAgICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMubmdVbnN1YnNjcmliZSQpKVxuICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgndGh5LWRyYWdnaW5nLWJvZHknKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICAgIH1cbn1cbiJdfQ==
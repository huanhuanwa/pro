import { Directive, Output, EventEmitter, NgZone, ElementRef, Renderer2 } from '@angular/core';
import { keycodes } from 'ngx-tethys/util';
/**
 * 与 (keydown.enter) 区别是支持组合键，当按 Ctrl + Enter 或者 Command + Enter 也会触发
 */
import * as ɵngcc0 from '@angular/core';
export class ThyEnterDirective {
    constructor(ngZone, elementRef, renderer) {
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.thyEnter = new EventEmitter();
    }
    onKeydown(event) {
        const keyCode = event.which || event.keyCode;
        if (keyCode === keycodes.ENTER) {
            this.ngZone.run(() => {
                this.thyEnter.emit(event);
            });
        }
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.onKeydown.bind(this));
        });
    }
}
ThyEnterDirective.ɵfac = function ThyEnterDirective_Factory(t) { return new (t || ThyEnterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ThyEnterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyEnterDirective, selectors: [["", "thyEnter", ""]], outputs: { thyEnter: "thyEnter" } });
ThyEnterDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 }
];
ThyEnterDirective.propDecorators = {
    thyEnter: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyEnterDirective, [{
        type: Directive,
        args: [{
                selector: '[thyEnter]'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { thyEnter: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LWVudGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NoYXJlZC9kaXJlY3RpdmVzL3RoeS1lbnRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFVLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQztBQUNBO0FBQ0EsR0FBRzs7QUFJSCxNQUFNLE9BQU8saUJBQWlCO0FBQUcsSUFZN0IsWUFBb0IsTUFBYyxFQUFVLFVBQXNCLEVBQVUsUUFBbUI7QUFBSSxRQUEvRSxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFBUyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFYdEYsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDNUMsSUFVc0csQ0FBQztBQUN2RyxJQVZJLFNBQVMsQ0FBQyxLQUFvQjtBQUNsQyxRQUFRLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQztBQUNyRCxRQUFRLElBQUksT0FBTyxLQUFLLFFBQVEsQ0FBQyxLQUFLLEVBQUU7QUFDeEMsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFDakMsZ0JBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDZixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFHSSxRQUFRO0FBQUssUUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtBQUMzQyxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3RHLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTDs2Q0F0QkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxZQUFZLGNBQ3pCO3FKQUNJO0FBQUM7QUFBMkMsWUFUQyxNQUFNO0FBQUksWUFBRixVQUFVO0FBQUksWUFBRixTQUFTO0FBQUc7QUFBRztBQUNuRSx1QkFTYixNQUFNO0FBQUk7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE5nWm9uZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBrZXljb2RlcyB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbi8qKlxuICog5LiOIChrZXlkb3duLmVudGVyKSDljLrliKvmmK/mlK/mjIHnu4TlkIjplK7vvIzlvZPmjIkgQ3RybCArIEVudGVyIOaIluiAhSBDb21tYW5kICsgRW50ZXIg5Lmf5Lya6Kem5Y+RXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeUVudGVyXSdcbn0pXG5leHBvcnQgY2xhc3MgVGh5RW50ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBPdXRwdXQoKSB0aHlFbnRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIG9uS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBjb25zdCBrZXlDb2RlID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZTtcbiAgICAgICAgaWYgKGtleUNvZGUgPT09IGtleWNvZGVzLkVOVEVSKSB7XG4gICAgICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGh5RW50ZXIuZW1pdChldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAna2V5ZG93bicsIHRoaXMub25LZXlkb3duLmJpbmQodGhpcykpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=
import { Component, Input, TemplateRef, EventEmitter, Output, ViewChild, ElementRef, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { isUndefinedOrNull } from 'ngx-tethys/util';
export class ThySelectControlComponent {
    constructor(renderer, element, updateHostClassService) {
        this.renderer = renderer;
        this.element = element;
        this.updateHostClassService = updateHostClassService;
        this.inputValue = '';
        this.isComposing = false;
        this.panelOpened = false;
        this.isMultiple = false;
        this.showSearch = false;
        this.disabled = false;
        this.thyAllowClear = false;
        this.thyPlaceholder = '';
        this.thyOnSearch = new EventEmitter();
        this.thyOnRemove = new EventEmitter();
        this.thyOnClear = new EventEmitter();
        this.updateHostClassService.initializeElement(this.element.nativeElement);
    }
    get thyPanelOpened() {
        return this.panelOpened;
    }
    set thyPanelOpened(value) {
        this.panelOpened = value;
        if (this.panelOpened && this.thyShowSearch) {
            Promise.resolve(null).then(() => {
                this.inputElement.nativeElement.focus();
            });
        }
        if (!this.panelOpened && this.thyShowSearch) {
            Promise.resolve(null).then(() => {
                this.setInputValue('');
            });
        }
        this.setSelectControlClass();
    }
    get thyIsMultiple() {
        return this.isMultiple;
    }
    set thyIsMultiple(value) {
        this.isMultiple = value;
        this.setSelectControlClass();
    }
    get thyShowSearch() {
        return this.showSearch;
    }
    set thyShowSearch(value) {
        this.showSearch = value;
        this.setSelectControlClass();
    }
    get thySelectedOptions() {
        return this.selectedOptions;
    }
    set thySelectedOptions(value) {
        let sameValue = false;
        const oldValue = this.selectedOptions;
        if (this.isMultiple) {
            if (oldValue instanceof Array && value instanceof Array && oldValue.length === value.length) {
                sameValue = value.every((option, index) => option.thyValue === oldValue[index].thyValue);
            }
        }
        else {
            if (oldValue && value) {
                sameValue = oldValue.thyValue === value.thyValue;
            }
        }
        this.selectedOptions = value;
        if (this.panelOpened && this.thyShowSearch) {
            if (!sameValue) {
                Promise.resolve(null).then(() => {
                    this.setInputValue('');
                });
            }
            this.inputElement.nativeElement.focus();
        }
    }
    get thyDisabled() {
        return this.disabled;
    }
    set thyDisabled(value) {
        this.disabled = value;
        this.setSelectControlClass();
    }
    get thySize() {
        return this.size;
    }
    set thySize(value) {
        this.size = value;
        this.setSelectControlClass();
    }
    get selectedValueStyle() {
        let showSelectedValue = false;
        if (this.showSearch) {
            if (this.panelOpened) {
                showSelectedValue = !(this.isComposing || this.inputValue);
            }
            else {
                showSelectedValue = true;
            }
        }
        else {
            showSelectedValue = true;
        }
        return { display: showSelectedValue ? 'block' : 'none' };
    }
    get placeholderStyle() {
        let placeholder = true;
        if (this.isSelectedValue) {
            placeholder = false;
        }
        if (!this.thyPlaceholder) {
            placeholder = false;
        }
        if (this.isComposing || this.inputValue) {
            placeholder = false;
        }
        return { display: placeholder ? 'block' : 'none' };
    }
    get selectedValue() {
        return this.thySelectedOptions;
    }
    get multipleSelectedValue() {
        return this.thySelectedOptions;
    }
    get showClearIcon() {
        return this.thyAllowClear && this.isSelectedValue;
    }
    get isSelectedValue() {
        return ((!this.isMultiple && !isUndefinedOrNull(this.thySelectedOptions)) ||
            (this.isMultiple && this.thySelectedOptions.length > 0));
    }
    ngOnInit() {
        this.setSelectControlClass();
    }
    setSelectControlClass() {
        const modeType = this.isMultiple ? 'multiple' : 'single';
        const selectControlClass = {
            [`form-control`]: true,
            [`form-control-${this.thySize}`]: !!this.thySize,
            [`form-control-custom`]: true,
            [`select-control`]: true,
            [`select-control-${modeType}`]: true,
            [`select-control-show-search`]: this.showSearch,
            [`panel-is-opened`]: this.panelOpened,
            [`disabled`]: this.disabled
        };
        this.updateHostClassService.updateClassByMap(selectControlClass);
        this.searchInputControlClass = {
            [`form-control`]: true,
            [`form-control-${this.thySize}`]: !!this.thySize,
            [`search-input-field`]: true,
            [`hidden`]: !this.thyShowSearch
        };
        this.choiceContentClass = {
            [`choice-content`]: true,
            [`text-truncate`]: true,
            [`font-size-${this.thySize}`]: !!this.thySize
        };
    }
    setInputValue(value) {
        if (value !== this.inputValue) {
            this.inputValue = value;
            this.updateWidth();
            this.thyOnSearch.emit(this.inputValue);
        }
    }
    handleBackspace(event) {
        if (event.isComposing) {
            return;
        }
        if (this.inputValue.length === 0 && this.selectedOptions instanceof Array) {
            if (this.selectedOptions.length > 0) {
                this.removeHandle(this.selectedOptions[this.selectedOptions.length - 1], event);
            }
        }
    }
    updateWidth() {
        if (this.isMultiple && this.thyShowSearch) {
            if (this.inputValue || this.isComposing) {
                this.renderer.setStyle(this.inputElement.nativeElement, 'width', `${this.inputElement.nativeElement.scrollWidth}px`);
            }
            else {
                this.renderer.removeStyle(this.inputElement.nativeElement, 'width');
            }
        }
    }
    removeHandle(item, $event) {
        this.thyOnRemove.emit({ item: item, $eventOrigin: $event });
    }
    clearHandle($event) {
        this.thyOnClear.emit($event);
    }
    trackValue(_index, option) {
        return option.thyValue;
    }
}
ThySelectControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-select-control,[thySelectControl]',
                template: "<ng-template #inputTemplate>\n  <input\n    #inputElement\n    (compositionstart)=\"isComposing = true\"\n    (compositionend)=\"isComposing = false\"\n    autocomplete=\"something-new\"\n    [ngClass]=\"searchInputControlClass\"\n    (input)=\"updateWidth()\"\n    [ngModel]=\"inputValue\"\n    (ngModelChange)=\"setInputValue($event)\"\n    (keydown.backspace)=\"handleBackspace($event)\"\n    [disabled]=\"thyDisabled\"\n  />\n</ng-template>\n\n<div class=\"select-control-rendered\">\n  <div class=\"text-placeholder text-truncate\" *ngIf=\"!isSelectedValue\" [ngStyle]=\"placeholderStyle\">\n    {{ thyPlaceholder }}\n  </div>\n  <ng-container *ngIf=\"isMultiple; else single\">\n    <ul>\n      <li class=\"choice\" *ngFor=\"let item of multipleSelectedValue; trackBy: trackValue\">\n        <div [ngClass]=\"choiceContentClass\">\n          <ng-template\n            #customDisplay\n            [ngTemplateOutlet]=\"customDisplayTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: item.thyRawValue || item.thyValue || item }\"\n          ></ng-template>\n          <ng-container *ngIf=\"!customDisplayTemplate; else customDisplay\">\n            {{ item.thyLabelText }}\n          </ng-container>\n        </div>\n        <span class=\"choice-remove font-size-base\" (click)=\"removeHandle(item, $event)\">\n          <thy-icon thyIconName=\"close\" class=\"font-size-sm\"></thy-icon>\n        </span>\n      </li>\n      <li class=\"select-control-search\">\n        <ng-template [ngTemplateOutlet]=\"inputTemplate\"></ng-template>\n      </li>\n    </ul>\n  </ng-container>\n  <ng-template #single>\n    <ng-container *ngIf=\"isSelectedValue\">\n      <div class=\"selected-value text-truncate\" [ngStyle]=\"selectedValueStyle\">\n        <ng-template\n          #customDisplay\n          [ngTemplateOutlet]=\"customDisplayTemplate\"\n          [ngTemplateOutletContext]=\"{\n            $implicit: selectedValue.thyRawValue || selectedValue.thyValue || selectedValue\n          }\"\n        ></ng-template>\n        <ng-container *ngIf=\"!customDisplayTemplate; else customDisplay\">\n          {{ selectedValue?.thyLabelText }}\n        </ng-container>\n      </div>\n    </ng-container>\n    <div class=\"select-control-search\">\n      <ng-template [ngTemplateOutlet]=\"inputTemplate\"></ng-template>\n    </div>\n  </ng-template>\n</div>\n<span class=\"select-control-arrow\">\n  <thy-icon thyIconName=\"angle-down\" class=\"font-size-base\"></thy-icon>\n</span>\n<span class=\"select-control-clear remove-link\" *ngIf=\"showClearIcon\" (click)=\"clearHandle($event)\">\n  <thy-icon class=\"remove-link-icon font-size-base\" thyIconName=\"close-circle-bold-fill\"></thy-icon>\n</span>\n",
                providers: [UpdateHostClassService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThySelectControlComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThySelectControlComponent.propDecorators = {
    thyPanelOpened: [{ type: Input }],
    thyIsMultiple: [{ type: Input }],
    thyShowSearch: [{ type: Input }],
    thySelectedOptions: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    customDisplayTemplate: [{ type: Input }],
    thyAllowClear: [{ type: Input }],
    thyPlaceholder: [{ type: Input }],
    thySize: [{ type: Input }],
    thyOnSearch: [{ type: Output }],
    thyOnRemove: [{ type: Output }],
    thyOnClear: [{ type: Output }],
    inputElement: [{ type: ViewChild, args: ['inputElement',] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Component, forwardRef, ChangeDetectorRef, Input, Output, EventEmitter, TemplateRef, HostListener, ViewChild, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { EXPANDED_DROPDOWN_POSITIONS } from 'ngx-tethys/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
function toArray(value) {
    let ret;
    if (value == null) {
        ret = [];
    }
    else if (!Array.isArray(value)) {
        ret = [value];
    }
    else {
        ret = value;
    }
    return ret;
}
function arrayEquals(array1, array2) {
    if (!array1 || !array2 || array1.length !== array2.length) {
        return false;
    }
    const len = array1.length;
    for (let i = 0; i < len; i++) {
        if (array1[i] !== array2[i]) {
            return false;
        }
    }
    return true;
}
const defaultDisplayRender = (label) => label.join(' / ');
const ɵ0 = defaultDisplayRender;
export class ThyCascaderComponent {
    constructor(cdr, elementRef, updateHostClassService) {
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this.changeOnSelect = false;
        this.showInput = true;
        this.prefixCls = 'thy-cascader';
        this.dropDownPosition = 'bottom';
        this.menuVisible = false;
        this.isLoading = false;
        this.isOpening = false;
        this.showSearch = false;
        this._thySize = 'md';
        this.isLabelRenderTemplate = false;
        this.labelRenderContext = {};
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.cascaderPositon = [...EXPANDED_DROPDOWN_POSITIONS];
        this.selectedOptions = [];
        this.activatedOptions = [];
        this.thyColumns = [];
        this.thyValueProperty = 'value';
        this.thyLabelProperty = 'label';
        this.thyPlaceHolder = '请选择';
        this._inputValue = '';
        this.inSearch = false;
        this.thyTriggerAction = ['click'];
        this.thyExpandTriggerAction = ['click'];
        this.disabled = false;
        this.thyChange = new EventEmitter();
        this.thySelectionChange = new EventEmitter();
        this.thySelect = new EventEmitter();
        this.thyClear = new EventEmitter();
        updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thyLabelRender(value) {
        this.labelRenderTpl = value;
        this.isLabelRenderTemplate = value instanceof TemplateRef;
    }
    get thyLabelRender() {
        return this.labelRenderTpl;
    }
    get inputValue() {
        return this._inputValue;
    }
    set inputValue(inputValue) {
        this._inputValue = inputValue;
        const willBeInSearch = !!inputValue;
    }
    set thyChangeOnSelect(value) {
        this.changeOnSelect = coerceBooleanProperty(value);
    }
    get thyChangeOnSelect() {
        return this.changeOnSelect;
    }
    set thyShowInput(value) {
        this.showInput = coerceBooleanProperty(value);
    }
    get thyShowInput() {
        return this.showInput;
    }
    set thyOptions(options) {
        this.oldColumnsHolder = this.thyColumns = options && options.length ? [options] : [];
        if (!this.inSearch) {
            if (this.defaultValue && this.thyColumns.length) {
                this.initOptions(0);
            }
        }
    }
    set thyMenuClassName(value) {
        this.menuClassName = value;
        this.setMenuClass();
    }
    get thyMenuClassName() {
        return this.menuClassName;
    }
    set thyColumnClassName(value) {
        this.columnClassName = value;
        this.setMenuClass();
    }
    get thyColumnClassName() {
        return this.columnClassName;
    }
    set thySize(v) {
        this._thySize = v;
    }
    get thySize() {
        return this._thySize;
    }
    ngOnInit() {
        this.setClassMap();
        this.setMenuClass();
        this.setMenuColumnClass();
        this.setArrowClass();
        this.setLabelClass();
        this.setClearClass();
        this.setInputClass();
        this.initPosition();
    }
    initPosition() {
        this.cascaderPositon[0].offsetY = 10; // 左下
        this.cascaderPositon[1].offsetY = 10; // 右下
        this.cascaderPositon[2].offsetY = -10; // 右下
        this.cascaderPositon[3].offsetY = -10; // 右下
        this.positions = this.cascaderPositon;
    }
    initOptions(index) {
        const vs = this.defaultValue;
        const load = () => {
            this.activateOnInit(index, vs[index]);
            if (index < vs.length - 1) {
                this.initOptions(index + 1);
            }
            if (index === vs.length - 1) {
                this.afterWriteValue();
            }
        };
        if (this.isLoaded(index) || !this.thyLoadData) {
            load();
        }
        else {
            const node = this.activatedOptions[index - 1] || {};
            this.loadChildren(node, index - 1, load, this.afterWriteValue.bind(this));
        }
    }
    activateOnInit(index, value) {
        let option = this.findOption(value, index);
        if (!option) {
            option =
                typeof value === 'object'
                    ? value
                    : {
                        [`${this.thyValueProperty || 'value'}`]: value,
                        [`${this.thyLabelProperty || 'label'}`]: value
                    };
        }
        this.setActiveOption(option, index, false, false);
    }
    writeValue(value) {
        const vs = (this.defaultValue = toArray(value));
        if (vs.length) {
            this.initOptions(0);
        }
        else {
            this.value = vs;
            this.activatedOptions = [];
            this.afterWriteValue();
        }
    }
    afterWriteValue() {
        this.selectedOptions = this.activatedOptions;
        this.value = this.getSubmitValue();
        this.buildDisplayLabel();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    onPositionChange(position) {
        const newValue = position.connectionPair.originY === 'bottom' ? 'bottom' : 'top';
        if (this.dropDownPosition !== newValue) {
            this.dropDownPosition = newValue;
            this.cdr.detectChanges();
        }
    }
    isLoaded(index) {
        return this.thyColumns[index] && this.thyColumns[index].length > 0;
    }
    getOptionLabel(option) {
        return option[this.thyLabelProperty || 'label'];
    }
    getOptionValue(option) {
        return option[this.thyValueProperty || 'value'];
    }
    hasInput() {
        return this.inputValue.length > 0;
    }
    hasValue() {
        return this.value && this.value.length > 0;
    }
    get showPlaceholder() {
        return !(this.hasInput() || this.hasValue());
    }
    isActivedOption(option, index) {
        const activeOpt = this.activatedOptions[index];
        return activeOpt === option;
    }
    findOption(option, index) {
        const options = this.thyColumns[index];
        if (options) {
            const value = typeof option === 'object' ? this.getOptionValue(option) : option;
            return options.find(o => value === this.getOptionValue(o));
        }
        return null;
    }
    buildDisplayLabel() {
        const selectedOptions = this.selectedOptions;
        const labels = selectedOptions.map(o => this.getOptionLabel(o));
        if (this.isLabelRenderTemplate) {
            this.labelRenderContext = { labels, selectedOptions };
        }
        else {
            this.labelRenderText = defaultDisplayRender.call(this, labels, selectedOptions);
        }
    }
    isMenuVisible() {
        return this.menuVisible;
    }
    setMenuVisible(menuVisible) {
        if (this.menuVisible !== menuVisible) {
            this.menuVisible = menuVisible;
            this.setClassMap();
            this.setArrowClass();
            this.setMenuClass();
        }
    }
    get menuCls() {
        return this._menuCls;
    }
    setMenuClass() {
        this._menuCls = {
            [`${this.prefixCls}-menus`]: true,
            [`${this.prefixCls}-menus-hidden`]: !this.menuVisible,
            [`${this.thyMenuClassName}`]: this.thyMenuClassName
        };
    }
    get menuColumnCls() {
        return this._menuColumnCls;
    }
    setMenuColumnClass() {
        this._menuColumnCls = {
            [`${this.prefixCls}-menu`]: true,
            [`${this.thyColumnClassName}`]: this.thyColumnClassName
        };
    }
    get arrowCls() {
        return this._arrowCls;
    }
    setArrowClass() {
        this._arrowCls = {
            [`${this.prefixCls}-picker-arrow`]: true,
            [`${this.prefixCls}-picker-arrow-expand`]: this.menuVisible
        };
    }
    get clearCls() {
        return this._clearCls;
    }
    setClearClass() {
        this._clearCls = {
            [`${this.prefixCls}-picker-clear`]: true,
            [`remove-link`]: true
        };
    }
    get labelCls() {
        return this._labelCls;
    }
    setLabelClass() {
        this._labelCls = {
            [`${this.prefixCls}-picker-label`]: true,
            [`${this.prefixCls}-show-search`]: false,
            [`${this.prefixCls}-focused`]: false
        };
    }
    get inputCls() {
        return this._inputCls;
    }
    setInputClass() {
        this._inputCls = {
            [`${this.prefixCls}-input`]: true
        };
    }
    setClassMap() {
        const classMap = {
            [`${this.prefixCls}`]: true,
            [`${this.prefixCls}-picker`]: true,
            [`${this.prefixCls}-${this.thySize}`]: true,
            [`${this.prefixCls}-picker-disabled`]: this.disabled,
            [`${this.prefixCls}-picker-open`]: this.menuVisible
        };
        this.updateHostClassService.updateClassByMap(classMap);
    }
    isClickTriggerAction() {
        if (typeof this.thyTriggerAction === 'string') {
            return this.thyTriggerAction === 'click';
        }
        return this.thyTriggerAction.indexOf('click') !== -1;
    }
    isHoverTriggerAction() {
        if (typeof this.thyTriggerAction === 'string') {
            return this.thyTriggerAction === 'hover';
        }
        return this.thyTriggerAction.indexOf('hover') !== -1;
    }
    isHoverExpandTriggerAction() {
        if (typeof this.thyExpandTriggerAction === 'string') {
            return this.thyExpandTriggerAction === 'hover';
        }
        return this.thyExpandTriggerAction.indexOf('hover') !== -1;
    }
    trggleClick($event) {
        if (this.disabled) {
            return;
        }
        this.onTouched();
        if (this.isClickTriggerAction()) {
            this.setMenuVisible(!this.menuVisible);
        }
    }
    trggleHover($event) {
        if (this.disabled) {
            return;
        }
        if (this.isHoverTriggerAction()) {
            this.setMenuVisible(!this.menuVisible);
        }
    }
    onOptionClick(option, index, event) {
        if (event) {
            event.preventDefault();
        }
        if (option && option.disabled) {
            return;
        }
        this.setActiveOption(option, index, true);
    }
    onOptionMouseover(option, index, event) {
        if (event) {
            event.preventDefault();
        }
        if (option && option.disabled) {
            return;
        }
        if (!this.isHoverExpandTriggerAction()) {
            return;
        }
        this.setActiveOption(option, index, false);
    }
    onMenuMouseleave(event) {
        if (event) {
            event.preventDefault();
        }
        if (!this.isHoverTriggerAction()) {
            return;
        }
        this.setMenuVisible(!this.menuVisible);
    }
    closeMenu() {
        this.setMenuVisible(false);
        this.setArrowClass();
    }
    setActiveOption(option, index, select, loadChildren = true) {
        if (!option || option.disabled) {
            return;
        }
        this.activatedOptions[index] = option;
        for (let i = index - 1; i >= 0; i--) {
            if (!this.activatedOptions[i]) {
                this.activatedOptions[i] = this.activatedOptions[i + 1].parent;
            }
        }
        if (index < this.activatedOptions.length - 1) {
            this.activatedOptions = this.activatedOptions.slice(0, index + 1);
        }
        if (option.children && option.children.length) {
            option.isLeaf = false;
            option.children.forEach(child => (child.parent = option));
            this.setColumnData(option.children, index + 1);
        }
        else if (!option.isLeaf && loadChildren) {
            this.loadChildren(option, index);
        }
        else {
            if (index < this.thyColumns.length - 1) {
                this.thyColumns = this.thyColumns.slice(0, index + 1);
            }
        }
        if (select) {
            this.onSelectOption(option, index);
        }
    }
    onSelectOption(option, index) {
        this.thySelect.emit({ option, index });
        if (option.isLeaf || this.thyChangeOnSelect || this.shouldPerformSelection(option, index)) {
            this.selectedOptions = this.activatedOptions;
            this.buildDisplayLabel();
            this.onValueChange();
        }
        if (option.isLeaf) {
            this.setMenuVisible(false);
        }
    }
    shouldPerformSelection(option, level) {
        return typeof this.thyChangeOn === 'function' ? this.thyChangeOn(option, level) === true : false;
    }
    onValueChange() {
        const value = this.getSubmitValue();
        if (!arrayEquals(this.value, value)) {
            this.defaultValue = null;
            this.value = value;
            this.onChange(value);
            if (value.length === 0) {
                this.thyClear.emit();
            }
            this.thySelectionChange.emit(this.selectedOptions);
            this.thyChange.emit(value);
        }
    }
    clearSelection($event) {
        if ($event) {
            $event.stopPropagation();
            $event.preventDefault();
        }
        this.labelRenderText = '';
        this.labelRenderContext = {};
        this.selectedOptions = [];
        this.activatedOptions = [];
        this.inputValue = '';
        this.setMenuVisible(false);
        this.onValueChange();
    }
    focus() { }
    loadChildren(option, index, success, failure) {
        if (this.thyLoadData) {
            this.isLoading = true;
            this.thyLoadData(option, index).then(() => {
                option.loading = this.isLoading = false;
                if (option.children) {
                    option.children.forEach(child => (child.parent = index < 0 ? undefined : option));
                    this.setColumnData(option.children, index + 1);
                }
                if (success) {
                    success();
                }
            }, () => {
                option.loading = this.isLoading = false;
                option.isLeaf = true;
                if (failure) {
                    failure();
                }
            });
        }
    }
    setColumnData(options, index) {
        if (!arrayEquals(this.thyColumns[index], options)) {
            this.thyColumns[index] = options;
            if (index < this.thyColumns.length - 1) {
                this.thyColumns = this.thyColumns.slice(0, index + 1);
            }
        }
    }
    getSubmitValue() {
        const values = [];
        this.selectedOptions.forEach(option => {
            values.push(this.getOptionValue(option));
        });
        return values;
    }
}
ThyCascaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-cascader,[thy-cascader]',
                template: "<div cdkOverlayOrigin #origin=\"cdkOverlayOrigin\" #trigger>\n  <ng-container *ngIf=\"thyShowInput\">\n    <input\n      #input\n      thyInput\n      type=\"text\"\n      [thySize]=\"thySize\"\n      [ngClass]=\"inputCls\"\n      readonly\n      [disabled]=\"disabled\"\n      [placeholder]=\"showPlaceholder ? thyPlaceHolder : ''\"\n    />\n    <span [ngClass]=\"arrowCls\">\n      <thy-icon thyIconName=\"angle-down\" class=\"font-size-base\"></thy-icon>\n    </span>\n    <span [ngClass]=\"clearCls\" *ngIf=\"!isLoading && labelRenderText\" (click)=\"clearSelection($event)\">\n      <thy-icon class=\"remove-link-icon font-size-base\" thyIconName=\"close-circle-bold-fill\"></thy-icon>\n    </span>\n    <span [ngClass]=\"labelCls\">\n      <ng-container *ngIf=\"!isLabelRenderTemplate; else labelTemplate\">{{ labelRenderText }}</ng-container>\n      <ng-template #labelTemplate>\n        <ng-template [ngTemplateOutlet]=\"thyLabelRender\" [ngTemplateOutletContext]=\"labelRenderContext\"></ng-template>\n      </ng-template>\n    </span>\n  </ng-container>\n</div>\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"thy-cascader-backdrop\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  (backdropClick)=\"closeMenu()\"\n  (detach)=\"closeMenu()\"\n  (positionChange)=\"onPositionChange($event)\"\n  [cdkConnectedOverlayOpen]=\"menuVisible\"\n>\n  <div #menu [ngClass]=\"menuCls\" [ngStyle]=\"thyMenuStyle\" (mouseleave)=\"onMenuMouseleave($event)\">\n    <ul *ngFor=\"let options of thyColumns; let i = index\" [ngClass]=\"menuColumnCls\">\n      <li\n        thy-cascader-option\n        *ngFor=\"let option of options\"\n        [option]=\"option\"\n        (click)=\"onOptionClick(option, i, $event)\"\n        (mouseover)=\"onOptionMouseover(option, i, $event)\"\n        [thyLabelProperty]=\"thyLabelProperty\"\n        [active]=\"isActivedOption(option, i)\"\n      ></li>\n    </ul>\n  </div>\n</ng-template>\n",
                providers: [
                    UpdateHostClassService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyCascaderComponent),
                        multi: true
                    }
                ],
                styles: [`
            .thy-cascader-menus {
                position: relative;
            }
        `]
            },] }
];
ThyCascaderComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThyCascaderComponent.propDecorators = {
    thyLabelRender: [{ type: Input }],
    thyValueProperty: [{ type: Input }],
    thyLabelProperty: [{ type: Input }],
    thyPlaceHolder: [{ type: Input }],
    thyLoadData: [{ type: Input }],
    thyChangeOnSelect: [{ type: Input }],
    thyShowInput: [{ type: Input }],
    thyTriggerAction: [{ type: Input }],
    thyExpandTriggerAction: [{ type: Input }],
    thyMenuStyle: [{ type: Input }],
    thyOptions: [{ type: Input }],
    thyMenuClassName: [{ type: Input }],
    thyColumnClassName: [{ type: Input }],
    disabled: [{ type: Input }],
    thySize: [{ type: Input }],
    thyChange: [{ type: Output }],
    thySelectionChange: [{ type: Output }],
    thySelect: [{ type: Output }],
    thyChangeOn: [{ type: Input }],
    thyClear: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input',] }],
    menu: [{ type: ViewChild, args: ['menu',] }],
    trggleClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    trggleHover: [{ type: HostListener, args: ['mouseover', ['$event'],] }]
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,
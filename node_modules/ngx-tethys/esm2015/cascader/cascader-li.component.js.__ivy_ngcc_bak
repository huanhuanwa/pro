import { Component, Input, HostBinding, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
export class ThyCascaderOptionComponent {
    constructor() {
        this.item = true;
        this.active = false;
    }
    get disabled() {
        return this.option.disabled;
    }
    get expand() {
        return this.option && !this.option.isLeaf;
    }
    getOptionLabel() {
        return this.option ? this.option[this.thyLabelProperty || 'label'] : '';
    }
    ngOnInit() { }
}
ThyCascaderOptionComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: '[thy-cascader-option]',
                template: "<ng-container>\n    {{ getOptionLabel() }}\n</ng-container>\n<span *ngIf=\"!option.isLeaf || option.children && option.children.length || option.loading\" class=\"wtf wtf-angle-right thy-cascader-menu-item-expand-icon\">\n</span>",
                providers: [UpdateHostClassService]
            },] }
];
ThyCascaderOptionComponent.ctorParameters = () => [];
ThyCascaderOptionComponent.propDecorators = {
    option: [{ type: Input }],
    item: [{ type: HostBinding, args: ['class.thy-cascader-menu-item',] }],
    active: [{ type: HostBinding, args: ['class.thy-cascader-menu-item-active',] }, { type: Input }],
    disabled: [{ type: HostBinding, args: ['class.thy-cascader-menu-item-disabled',] }],
    expand: [{ type: HostBinding, args: ['class.thy-cascader-menu-item-expand',] }],
    thyLabelProperty: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzY2FkZXItbGkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Nhc2NhZGVyL2Nhc2NhZGVyLWxpLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxXQUFXLEVBQWMsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUgsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFTekQsTUFBTSxPQUFPLDBCQUEwQjtJQXFCbkM7UUFsQjZDLFNBQUksR0FBRyxJQUFJLENBQUM7UUFJekQsV0FBTSxHQUFHLEtBQUssQ0FBQztJQWNBLENBQUM7SUFaaEIsSUFDSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFDSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDOUMsQ0FBQztJQU1NLGNBQWM7UUFDakIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVFLENBQUM7SUFFRCxRQUFRLEtBQUksQ0FBQzs7O1lBbENoQixTQUFTLFNBQUM7Z0JBQ1AsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxpUEFBMkM7Z0JBQzNDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO2FBQ3RDOzs7O3FCQUVJLEtBQUs7bUJBRUwsV0FBVyxTQUFDLDhCQUE4QjtxQkFFMUMsV0FBVyxTQUFDLHFDQUFxQyxjQUNqRCxLQUFLO3VCQUdMLFdBQVcsU0FBQyx1Q0FBdUM7cUJBS25ELFdBQVcsU0FBQyxxQ0FBcUM7K0JBS2pELEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhc2NhZGVyT3B0aW9uIH0gZnJvbSAnLi9jYXNjYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgVXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgc2VsZWN0b3I6ICdbdGh5LWNhc2NhZGVyLW9wdGlvbl0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jYXNjYWRlci1saS5jb21wb25lbnQuaHRtbCcsXG4gICAgcHJvdmlkZXJzOiBbVXBkYXRlSG9zdENsYXNzU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgVGh5Q2FzY2FkZXJPcHRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpIG9wdGlvbjogQ2FzY2FkZXJPcHRpb247XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1jYXNjYWRlci1tZW51LWl0ZW0nKSBpdGVtID0gdHJ1ZTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudGh5LWNhc2NhZGVyLW1lbnUtaXRlbS1hY3RpdmUnKVxuICAgIEBJbnB1dCgpXG4gICAgYWN0aXZlID0gZmFsc2U7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1jYXNjYWRlci1tZW51LWl0ZW0tZGlzYWJsZWQnKVxuICAgIGdldCBkaXNhYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uLmRpc2FibGVkO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudGh5LWNhc2NhZGVyLW1lbnUtaXRlbS1leHBhbmQnKVxuICAgIGdldCBleHBhbmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbiAmJiAhdGhpcy5vcHRpb24uaXNMZWFmO1xuICAgIH1cblxuICAgIEBJbnB1dCgpIHRoeUxhYmVsUHJvcGVydHk6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIHB1YmxpYyBnZXRPcHRpb25MYWJlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uID8gdGhpcy5vcHRpb25bdGhpcy50aHlMYWJlbFByb3BlcnR5IHx8ICdsYWJlbCddIDogJyc7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7fVxufVxuIl19
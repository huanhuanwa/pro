import { Component, Input, ElementRef, ViewEncapsulation, ContentChild, TemplateRef, InjectionToken, Optional, Inject } from '@angular/core';
/**
 * Injection token used to provide the parent component to options.
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["cell"];
const _c1 = ["header"];
const _c2 = ["*"];
export const THY_TABLE_COLUMN_PARENT_COMPONENT = new InjectionToken('THY_TABLE_COLUMN_PARENT_COMPONENT');
/**
 * @deprecated THY_GRID_COLUMN_PARENT_COMPONENT is deprecated, please use THY_TABLE_COLUMN_PARENT_COMPONENT
 */
export const THY_GRID_COLUMN_PARENT_COMPONENT = THY_TABLE_COLUMN_PARENT_COMPONENT;
export class ThyTableColumnComponent {
    constructor(el, parent) {
        this.el = el;
        this.parent = parent;
        this.thyModelKey = '';
        this.thyTitle = '';
        this.thyType = '';
        this.thyWidth = '';
        this.thyClassName = '';
        this.thyHeaderClassName = '';
        this.thyDisabled = false;
        this.thyDefaultText = '';
        this.thyExpand = false;
        this.selections = [];
        this._firstChange = true;
        this.expand = false;
    }
    set thySelections(value) {
        if (value) {
            if (Array.isArray(value)) {
                this.selections = value;
            }
            else {
                this.selections = [value];
            }
            if (!this._firstChange) {
                this.parent.updateColumnSelections(this.key, this.selections);
            }
        }
    }
    set templateRef(value) {
        if (value) {
            if (!this.headerTemplateRef && !this.cellTemplateRef) {
                this.cellTemplateRef = value;
            }
        }
    }
    ngOnInit() {
        this.key = this._generateKey();
        this.model = this.thyModelKey;
        this.title = this.thyTitle;
        this.type = this.thyType;
        this.width = this.thyWidth;
        this.className = this.thyClassName;
        this.headerClassName = this.thyHeaderClassName;
        this.disabled = this.thyDisabled;
        this.defaultText = this.thyDefaultText;
        this._firstChange = false;
        this.expand = this.thyExpand;
    }
    _generateKey() {
        return ('[$$column]' +
            Math.random()
                .toString(16)
                .substr(2, 8));
    }
}
ThyTableColumnComponent.ɵfac = function ThyTableColumnComponent_Factory(t) { return new (t || ThyTableColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_GRID_COLUMN_PARENT_COMPONENT, 8)); };
ThyTableColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTableColumnComponent, selectors: [["thy-grid-column"], ["thy-table-column"]], contentQueries: function ThyTableColumnComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, TemplateRef, true);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellTemplateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplateRef = _t.first);
    } }, inputs: { thyModelKey: "thyModelKey", thyTitle: "thyTitle", thyType: "thyType", thyWidth: "thyWidth", thyClassName: "thyClassName", thyHeaderClassName: "thyHeaderClassName", thyDisabled: "thyDisabled", thyDefaultText: "thyDefaultText", thyExpand: "thyExpand", thySelections: "thySelections" }, ngContentSelectors: _c2, decls: 1, vars: 0, template: function ThyTableColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyTableColumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_GRID_COLUMN_PARENT_COMPONENT,] }] }
];
ThyTableColumnComponent.propDecorators = {
    thyModelKey: [{ type: Input }],
    thyTitle: [{ type: Input }],
    thyType: [{ type: Input }],
    thyWidth: [{ type: Input }],
    thyClassName: [{ type: Input }],
    thyHeaderClassName: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    thySelections: [{ type: Input }],
    thyDefaultText: [{ type: Input }],
    thyExpand: [{ type: Input }],
    headerTemplateRef: [{ type: ContentChild, args: ['header', { static: true },] }],
    cellTemplateRef: [{ type: ContentChild, args: ['cell', { static: true },] }],
    templateRef: [{ type: ContentChild, args: [TemplateRef, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTableColumnComponent, [{
        type: Component,
        args: [{
                selector: 'thy-grid-column,thy-table-column',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_GRID_COLUMN_PARENT_COMPONENT]
            }] }]; }, { thyModelKey: [{
            type: Input
        }], thyTitle: [{
            type: Input
        }], thyType: [{
            type: Input
        }], thyWidth: [{
            type: Input
        }], thyClassName: [{
            type: Input
        }], thyHeaderClassName: [{
            type: Input
        }], thyDisabled: [{
            type: Input
        }], thyDefaultText: [{
            type: Input
        }], thyExpand: [{
            type: Input
        }], thySelections: [{
            type: Input
        }], templateRef: [{
            type: ContentChild,
            args: [TemplateRef, { static: true }]
        }], cellTemplateRef: [{
            type: ContentChild,
            args: ['cell', { static: true }]
        }], headerTemplateRef: [{
            type: ContentChild,
            args: ['header', { static: true }]
        }] }); })();
/**
 * @deprecated ThyTableColumnComponent is deprecated, please use ThyTableColumnComponent
 */
export const ThyGridColumnComponent = ThyTableColumnComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
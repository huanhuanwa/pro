import { Component, Input, ElementRef, ViewEncapsulation, ContentChild, TemplateRef, InjectionToken, Optional, Inject } from '@angular/core';
/**
 * Injection token used to provide the parent component to options.
 */
export const THY_TABLE_COLUMN_PARENT_COMPONENT = new InjectionToken('THY_TABLE_COLUMN_PARENT_COMPONENT');
/**
 * @deprecated THY_GRID_COLUMN_PARENT_COMPONENT is deprecated, please use THY_TABLE_COLUMN_PARENT_COMPONENT
 */
export const THY_GRID_COLUMN_PARENT_COMPONENT = THY_TABLE_COLUMN_PARENT_COMPONENT;
export class ThyTableColumnComponent {
    constructor(el, parent) {
        this.el = el;
        this.parent = parent;
        this.thyModelKey = '';
        this.thyTitle = '';
        this.thyType = '';
        this.thyWidth = '';
        this.thyClassName = '';
        this.thyHeaderClassName = '';
        this.thyDisabled = false;
        this.thyDefaultText = '';
        this.thyExpand = false;
        this.selections = [];
        this._firstChange = true;
        this.expand = false;
    }
    set thySelections(value) {
        if (value) {
            if (Array.isArray(value)) {
                this.selections = value;
            }
            else {
                this.selections = [value];
            }
            if (!this._firstChange) {
                this.parent.updateColumnSelections(this.key, this.selections);
            }
        }
    }
    set templateRef(value) {
        if (value) {
            if (!this.headerTemplateRef && !this.cellTemplateRef) {
                this.cellTemplateRef = value;
            }
        }
    }
    ngOnInit() {
        this.key = this._generateKey();
        this.model = this.thyModelKey;
        this.title = this.thyTitle;
        this.type = this.thyType;
        this.width = this.thyWidth;
        this.className = this.thyClassName;
        this.headerClassName = this.thyHeaderClassName;
        this.disabled = this.thyDisabled;
        this.defaultText = this.thyDefaultText;
        this._firstChange = false;
        this.expand = this.thyExpand;
    }
    _generateKey() {
        return ('[$$column]' +
            Math.random()
                .toString(16)
                .substr(2, 8));
    }
}
ThyTableColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-grid-column,thy-table-column',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTableColumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [THY_GRID_COLUMN_PARENT_COMPONENT,] }] }
];
ThyTableColumnComponent.propDecorators = {
    thyModelKey: [{ type: Input }],
    thyTitle: [{ type: Input }],
    thyType: [{ type: Input }],
    thyWidth: [{ type: Input }],
    thyClassName: [{ type: Input }],
    thyHeaderClassName: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    thySelections: [{ type: Input }],
    thyDefaultText: [{ type: Input }],
    thyExpand: [{ type: Input }],
    headerTemplateRef: [{ type: ContentChild, args: ['header', { static: true },] }],
    cellTemplateRef: [{ type: ContentChild, args: ['cell', { static: true },] }],
    templateRef: [{ type: ContentChild, args: [TemplateRef, { static: true },] }]
};
/**
 * @deprecated ThyTableColumnComponent is deprecated, please use ThyTableColumnComponent
 */
export const ThyGridColumnComponent = ThyTableColumnComponent;
//# sourceMappingURL=data:application/json;base64,
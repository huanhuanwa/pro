import { MixinBase, mixinUnsubscribe, UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty, get, isString, keyBy, set } from 'ngx-tethys/util';
import { merge, of } from 'rxjs';
import { delay, takeUntil } from 'rxjs/operators';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { ViewportRuler } from '@angular/cdk/overlay';
import { DOCUMENT } from '@angular/common';
import { Component, Input, Output, ViewEncapsulation, TemplateRef, EventEmitter, ContentChild, ContentChildren, ElementRef, HostBinding, Inject, IterableDiffers, QueryList, ViewChild } from '@angular/core';
import { THY_TABLE_COLUMN_PARENT_COMPONENT, ThyTableColumnComponent } from './table-column.component';
const tableThemeMap = {
    default: 'table-default',
    bordered: 'table-bordered'
};
const tableSizeMap = {
    sm: 'table-sm'
};
const customType = {
    index: 'index',
    checkbox: 'checkbox',
    radio: 'radio',
    switch: 'switch'
};
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyTableComponent extends _MixinBase {
    constructor(elementRef, _differs, viewportRuler, updateHostClassService, document) {
        super();
        this.elementRef = elementRef;
        this._differs = _differs;
        this.viewportRuler = viewportRuler;
        this.updateHostClassService = updateHostClassService;
        this.document = document;
        this.customType = customType;
        this.model = [];
        this.groups = [];
        this.rowKey = '_id';
        this.mode = 'list';
        this.columns = [];
        this.theme = 'default';
        this.className = '';
        this.size = 'default';
        this.loadingDone = true;
        this.emptyOptions = {};
        this.draggable = false;
        this.selectedRadioRow = null;
        this.pagination = { index: 1, size: 20, total: 0 };
        this.wholeRowSelect = false;
        this._filter = null;
        this.initialized = false;
        this._oldThyClassName = '';
        this.thyShowHeader = true;
        this.showTotal = false;
        this.thyIndent = 20;
        this.thyChildrenKey = 'children';
        this.thyOnSwitchChange = new EventEmitter();
        this.thyOnPageChange = new EventEmitter();
        this.thyOnPageIndexChange = new EventEmitter();
        this.thyOnMultiSelectChange = new EventEmitter();
        this.thyOnRadioSelectChange = new EventEmitter();
        this.thyOnDraggableChange = new EventEmitter();
        this.thyOnRowClick = new EventEmitter();
        this.thyOnRowContextMenu = new EventEmitter();
        this.isTableClass = true;
        // 数据的折叠展开状态
        this.expandStatusMap = {};
        this._bindTrackFn();
    }
    set thyMode(value) {
        this.mode = value || this.mode;
    }
    set thyGroupBy(value) {
        this.groupBy = value;
    }
    set thyRowKey(value) {
        this.rowKey = value || this.rowKey;
    }
    set thyGroups(value) {
        if (this.mode === 'group') {
            this.buildGroups(value);
        }
    }
    set thyModel(value) {
        this.model = value || [];
        this._diff = this._differs.find(this.model).create();
        this._initializeDataModel();
        if (this.mode === 'group') {
            this.buildModel();
        }
    }
    set thyTheme(value) {
        this.theme = value || this.theme;
        this._setClass();
    }
    set thySize(value) {
        this.size = value || this.size;
        this._setClass();
    }
    set thyClassName(value) {
        const list = this.className.split(' ').filter(a => a.trim());
        const index = list.findIndex(item => item === this._oldThyClassName);
        if (index !== -1) {
            list.splice(index, 1, value);
        }
        else {
            list.push(value);
        }
        this._oldThyClassName = value;
        this.className = list.join(' ');
    }
    set thyRowClassName(value) {
        this.rowClassName = value;
    }
    set thyLoadingDone(value) {
        this.loadingDone = value;
    }
    set thyLoadingText(value) {
        this.loadingText = value;
    }
    set thyEmptyOptions(value) {
        this.emptyOptions = value;
    }
    set thyDraggable(value) {
        this.draggable = coerceBooleanProperty(value);
        if (this.mode !== 'list' && this.draggable) {
            throw new Error('Only list mode sorting is supported');
        }
    }
    set thyFilter(value) {
        this._filter = value;
    }
    set thyPageIndex(value) {
        this.pagination.index = value;
    }
    set thyPageSize(value) {
        this.pagination.size = value;
    }
    set thyPageTotal(value) {
        this.pagination.total = value;
    }
    set thyWholeRowSelect(value) {
        if (value) {
            this.className += ' table-hover';
        }
        this.wholeRowSelect = value;
    }
    set listOfColumnComponents(components) {
        if (components) {
            this._listOfColumnComponents = components;
            this._initializeColumns();
            this._initializeDataModel();
        }
    }
    _getSelectionKeys(selections) {
        return selections.map((item) => {
            if (typeof item === 'number' || typeof item === 'string') {
                return item;
            }
            else {
                return item[this.rowKey];
            }
        });
    }
    _initializeColumns() {
        const components = this._listOfColumnComponents ? this._listOfColumnComponents.toArray() : [];
        const hasExpand = components.some(item => item.expand === true);
        this.columns = components.map((component, i) => {
            const selections = this._getSelectionKeys(component.selections);
            return {
                key: component.key,
                model: component.model,
                title: component.title,
                type: component.type,
                selections: selections,
                width: component.width,
                className: component.className,
                headerClassName: component.headerClassName,
                disabled: component.disabled,
                defaultText: component.defaultText,
                expand: hasExpand ? component.expand : i === 0,
                templateRef: component.cellTemplateRef,
                headerTemplateRef: component.headerTemplateRef
            };
        });
    }
    _initializeDataModel() {
        this.model.forEach(row => {
            this.columns.forEach(column => {
                this._initialSelections(row, column);
                this._initialCustomModelValue(row, column);
            });
        });
    }
    _initialSelections(row, column) {
        if (column.selections) {
            if (column.type === 'checkbox') {
                row[column.key] = column.selections.includes(row[this.rowKey]);
                this.onModelChange(row, column);
            }
            if (column.type === 'radio') {
                if (column.selections.includes(row[this.rowKey])) {
                    this.selectedRadioRow = row;
                }
            }
        }
    }
    _initialCustomModelValue(row, column) {
        if (column.type === customType.switch) {
            row[column.key] = get(row, column.model);
        }
    }
    _refreshCustomModelValue(row) {
        this.columns.forEach(column => {
            this._initialCustomModelValue(row, column);
        });
    }
    _applyDiffChanges(changes) {
        if (changes) {
            changes.forEachAddedItem((record) => {
                this._refreshCustomModelValue(record.item);
            });
        }
    }
    _bindTrackFn() {
        this.trackByFn = function (index, row) {
            return row && this.rowKey ? row[this.rowKey] : index;
        }.bind(this);
    }
    _destroyInvalidAttribute() {
        this.model.forEach(row => {
            for (const key in row) {
                if (key.includes('[$$column]')) {
                    delete row[key];
                }
            }
        });
    }
    _setClass(first = false) {
        if (!first && !this.initialized) {
            return;
        }
        const classNames = [];
        if (tableSizeMap[this.size]) {
            classNames.push(tableSizeMap[this.size]);
        }
        if (tableThemeMap[this.theme]) {
            classNames.push(tableThemeMap[this.theme]);
        }
        if (tableSizeMap[this.size] === tableSizeMap['sm'] && tableThemeMap[this.theme] === tableThemeMap['default']) {
            classNames.push('table-default-sm-bottom-padding');
        }
        this.updateHostClassService.updateClass(classNames);
    }
    _filterModel() {
        if (this.model && this.model.length > 0) {
            if (this._filter) {
            }
        }
    }
    updateColumnSelections(key, selections) {
        const column = this.columns.find(item => item.key === key);
        column.selections = this._getSelectionKeys(selections);
        this.model.forEach(row => {
            this._initialSelections(row, column);
        });
    }
    isTemplateRef(ref) {
        return ref instanceof TemplateRef;
    }
    getModelValue(row, path) {
        return get(row, path);
    }
    renderRowClassName(row, index) {
        if (!this.rowClassName) {
            return null;
        }
        if (isString(this.rowClassName)) {
            return this.rowClassName;
        }
        else {
            return this.rowClassName(row, index);
        }
    }
    onModelChange(row, column) {
        if (column.model) {
            set(row, column.model, row[column.key]);
        }
    }
    onStopPropagation(event) {
        if (this.wholeRowSelect) {
            event.stopPropagation();
        }
    }
    onPageChange(event) {
        this.thyOnPageChange.emit(event);
    }
    onPageIndexChange(event) {
        this.thyOnPageIndexChange.emit(event);
    }
    onCheckboxChange(row, column) {
        this.onModelChange(row, column);
        this.onMultiSelectChange(null, row, column);
    }
    onMultiSelectChange(event, row, column) {
        const rows = this.model.filter(item => {
            return item[column.key];
        });
        const multiSelectEvent = {
            event: event,
            row: row,
            rows: rows
        };
        this.thyOnMultiSelectChange.emit(multiSelectEvent);
    }
    onRadioSelectChange(event, row) {
        const radioSelectEvent = {
            event: event,
            row: row
        };
        this.thyOnRadioSelectChange.emit(radioSelectEvent);
    }
    onSwitchChange(event, row, column) {
        const switchEvent = {
            event: event,
            row: row,
            refresh: (value) => {
                value = value || row;
                setTimeout(() => {
                    value[column.key] = get(value, column.model);
                });
            }
        };
        this.thyOnSwitchChange.emit(switchEvent);
    }
    showExpand(row) {
        return row[this.thyChildrenKey] && row[this.thyChildrenKey].length > 0;
    }
    isExpanded(row) {
        return this.expandStatusMap[row[this.rowKey]];
    }
    iconIndentComputed(level) {
        if (this.mode === 'tree') {
            return level * this.thyIndent - 10;
        }
    }
    tdIndentComputed(level) {
        return {
            position: 'relative',
            paddingLeft: `${(level + 1) * this.thyIndent - 10}px`
        };
    }
    expandChildren(event, row) {
        event.stopPropagation();
        if (this.isExpanded(row)) {
            this.expandStatusMap[row[this.rowKey]] = false;
        }
        else {
            this.expandStatusMap[row[this.rowKey]] = true;
        }
    }
    onDragStarted() {
        setTimeout(() => {
            const preview = this.document.getElementsByClassName('cdk-drag-preview')[0];
            if (preview) {
                preview.classList.add('thy-table-drag-preview');
            }
        });
    }
    onDragDropped(event) {
        const dragEvent = {
            model: event.item,
            models: this.model,
            oldIndex: event.previousIndex,
            newIndex: event.currentIndex
        };
        moveItemInArray(this.model, event.previousIndex, event.currentIndex);
        this.thyOnDraggableChange.emit(dragEvent);
    }
    onRowClick(event, row) {
        if (this.wholeRowSelect) {
            const column = this.columns.find(item => {
                return item.type === customType.checkbox || item.type === customType.radio;
            });
            if (!column.disabled) {
                if (column.type === customType.checkbox) {
                    row[column.key] = !row[column.key];
                    this.onModelChange(row, column);
                    this.onMultiSelectChange(event, row, column);
                }
                if (column.type === customType.radio) {
                    this.selectedRadioRow = row;
                    this.onRadioSelectChange(event, row);
                }
            }
        }
        const rowEvent = {
            event: event,
            row: row
        };
        this.thyOnRowClick.emit(rowEvent);
    }
    onRowContextMenu(event, row) {
        const contextMenuEvent = {
            event: event,
            row: row
        };
        this.thyOnRowContextMenu.emit(contextMenuEvent);
    }
    draggableStopPropagation(event) {
        if (!this.draggable) {
            event.stopPropagation();
        }
    }
    _refreshColumns() {
        const components = this._listOfColumnComponents ? this._listOfColumnComponents.toArray() : [];
        const _columns = components.map(component => {
            return {
                width: component.width,
                className: component.className
            };
        });
        this.columns.forEach((n, i) => {
            Object.assign(n, _columns[i]);
        });
    }
    buildGroups(originGroups) {
        const collapsedIds = this.groups.filter(group => !group.expand).map(group => group.id);
        this.groups = [];
        originGroups.forEach((origin) => {
            const group = { id: origin[this.rowKey], children: [], origin };
            group.expand = !collapsedIds.includes(group.id);
            this.groups.push(group);
        });
    }
    buildModel() {
        const groupsMap = keyBy(this.groups, 'id');
        this.model.forEach(row => {
            const group = groupsMap[row[this.groupBy]];
            if (group) {
                group.children.push(row);
            }
        });
    }
    expandGroup(group) {
        group.expand = !group.expand;
    }
    ngOnInit() {
        this.updateHostClassService.initializeElement(this.tableElementRef.nativeElement);
        this._setClass(true);
        this.initialized = true;
        merge(this.viewportRuler.change(200), of(null).pipe(delay(200)))
            .pipe(takeUntil(this.ngUnsubscribe$))
            .subscribe(() => {
            this._refreshColumns();
        });
    }
    ngOnChanges(simpleChangs) {
        const modeChange = simpleChangs.thyMode;
        const thyGroupsChange = simpleChangs.thyGroups;
        const isGroupMode = modeChange && modeChange.currentValue === 'group';
        if (isGroupMode && thyGroupsChange && thyGroupsChange.firstChange) {
            this.buildGroups(thyGroupsChange.currentValue);
            this.buildModel();
        }
    }
    ngDoCheck() {
        if (this._diff) {
            const changes = this._diff.diff(this.model);
            this._applyDiffChanges(changes);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._destroyInvalidAttribute();
    }
}
ThyTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-grid,thy-table',
                template: "<table #table class=\"table\" [ngClass]=\"[className]\" [class.table-draggable]=\"draggable\" [class.table-group]=\"mode === 'group'\">\n  <colgroup>\n    <col *ngFor=\"let column of columns\" [width]=\"column.width\" />\n  </colgroup>\n\n  <thead *ngIf=\"thyShowHeader\">\n    <tr>\n      <th *ngFor=\"let column of columns\" [ngClass]=\"column.headerClassName\">\n        <ng-container *ngIf=\"!column.headerTemplateRef\">\n          {{ column.title }}\n        </ng-container>\n        <ng-container *ngIf=\"column.headerTemplateRef\">\n          <ng-template [ngTemplateOutlet]=\"column.headerTemplateRef\" [ngTemplateOutletContext]=\"{ $implicit: column }\"></ng-template>\n        </ng-container>\n      </th>\n    </tr>\n  </thead>\n\n  <tbody *ngIf=\"loadingDone\" thyDragDrop cdkDropList [cdkDropListDisabled]=\"!draggable\" (cdkDropListDropped)=\"onDragDropped($event)\">\n    <!-- group -->\n    <ng-container *ngIf=\"mode === 'group'\">\n      <ng-container *ngFor=\"let group of groups\">\n        <tr class=\"thy-table-group\" (click)=\"expandGroup(group)\">\n          <td [attr.colspan]=\"columns.length\">\n            <div class=\"thy-table-group-container\">\n              <thy-icon class=\"expand-icon\" [thyIconName]=\"group.expand ? 'angle-down' : 'angle-right'\"></thy-icon>\n              <ng-container *ngIf=\"groupTemplate\">\n                <ng-template\n                  [ngTemplateOutlet]=\"groupTemplate\"\n                  [ngTemplateOutletContext]=\"{ $implicit: group.origin, group: group.origin }\"\n                ></ng-template>\n              </ng-container>\n            </div>\n          </td>\n        </tr>\n        <ng-container *ngIf=\"group.children?.length && group.expand\">\n          <ng-container *ngFor=\"let row of group.children; trackBy: trackByFn; let i = index\">\n            <ng-template [ngTemplateOutlet]=\"trTemplate\" [ngTemplateOutletContext]=\"{ row: row, index: i, level: 0 }\"></ng-template>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <!-- list\u6A21\u5F0F\u4E0B\u6CA1\u6709\u76F4\u63A5\u4F7F\u7528item\u6A21\u677F\uFF0C\u662F\u56E0\u4E3A\u4F7F\u7528\u4E86\u6A21\u677F\u5F71\u54CD\u4E86Angular\u7684\u4F9D\u8D56\u6811\uFF0C\u5BFC\u81F4CdkDragDrop\u6392\u5E8F\u5931\u6548\uFF0C\u76EE\u524D\u8FD9\u6837\u4FEE\u6539\u53EF\u4EE5\u6682\u65F6\u89E3\u51B3\u7EBF\u4E0A\u4E0D\u80FD\u6392\u5E8F\u7684\u95EE\u9898\uFF0CTree\u6A21\u5F0F\u7684\u6392\u5E8F\u6682\u65F6\u4E0D\u652F\u6301 -->\n    <ng-container *ngIf=\"mode === 'list'\">\n      <tr\n        *ngFor=\"let row of model; trackBy: trackByFn; let i = index\"\n        class=\"thy-sortable-item\"\n        cdkDrag\n        [cdkDragData]=\"row\"\n        (cdkDragStarted)=\"onDragStarted()\"\n        [ngClass]=\"renderRowClassName(row, i)\"\n        (mousedown)=\"draggableStopPropagation($event)\"\n        (touchstart)=\"draggableStopPropagation($event)\"\n        (pointerdown)=\"draggableStopPropagation($event)\"\n        (click)=\"onRowClick($event, row)\"\n        (thyContextMenu)=\"onRowContextMenu($event, row)\"\n      >\n        <ng-template [ngTemplateOutlet]=\"tdsTemplate\" [ngTemplateOutletContext]=\"{ row: row, index: i, level: 0 }\"></ng-template>\n      </tr>\n    </ng-container>\n\n    <ng-container *ngIf=\"mode === 'tree'\">\n      <ng-container *ngFor=\"let row of model; trackBy: trackByFn; let i = index\">\n        <ng-template [ngTemplateOutlet]=\"trTemplate\" [ngTemplateOutletContext]=\"{ row: row, index: i, level: 0 }\"></ng-template>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #trTemplate let-row=\"row\" let-i=\"index\" let-level=\"level\">\n      <tr\n        class=\"thy-sortable-item\"\n        cdkDrag\n        [cdkDragData]=\"row\"\n        (cdkDragStarted)=\"onDragStarted()\"\n        [ngClass]=\"renderRowClassName(row, i)\"\n        (mousedown)=\"draggableStopPropagation($event)\"\n        (touchstart)=\"draggableStopPropagation($event)\"\n        (pointerdown)=\"draggableStopPropagation($event)\"\n        (click)=\"onRowClick($event, row)\"\n        (thyContextMenu)=\"onRowContextMenu($event, row)\"\n      >\n        <ng-template [ngTemplateOutlet]=\"tdsTemplate\" [ngTemplateOutletContext]=\"{ row: row, index: i, level: level + 1 }\"></ng-template>\n      </tr>\n\n      <ng-container *ngIf=\"mode === 'tree' && isExpanded(row)\">\n        <ng-template\n          *ngFor=\"let child of row[thyChildrenKey]; trackBy: trackByFn; let j = index\"\n          [ngTemplateOutlet]=\"trTemplate\"\n          [ngTemplateOutletContext]=\"{ row: child, index: j, level: level + 1 }\"\n        ></ng-template>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #tdsTemplate let-row=\"row\" let-i=\"index\" let-level=\"level\">\n      <td\n        *ngFor=\"let column of columns; let j = index\"\n        [ngClass]=\"column.className\"\n        [class.thy-table-checkbox-column]=\"column.type === customType.checkbox\"\n        [ngStyle]=\"mode === 'tree' && column.expand ? tdIndentComputed(level) : null\"\n      >\n        <ng-container *ngIf=\"j === 0 && draggable\">\n          <thy-icon class=\"table-draggable-icon\" thyIconName=\"drag\"></thy-icon>\n        </ng-container>\n\n        <!--template-->\n        <ng-container *ngIf=\"isTemplateRef(column.templateRef)\">\n          <thy-icon\n            class=\"tree-expand-icon cursor-pointer\"\n            *ngIf=\"mode === 'tree' && column.expand\"\n            [thyIconName]=\"isExpanded(row) ? 'angle-down' : 'angle-right'\"\n            [style.visibility]=\"showExpand(row) ? 'visible' : 'hidden'\"\n            [style.left.px]=\"iconIndentComputed(level)\"\n            (click)=\"expandChildren($event, row)\"\n          ></thy-icon>\n          <ng-template [ngTemplateOutlet]=\"column.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: row }\"></ng-template>\n        </ng-container>\n\n        <!--not template-->\n        <ng-container *ngIf=\"!isTemplateRef(column.templateRef)\">\n          <!-- default -->\n          <ng-container *ngIf=\"column.model && !column.type\">\n            <thy-icon\n              class=\"tree-expand-icon cursor-pointer\"\n              *ngIf=\"mode === 'tree' && column.expand\"\n              [thyIconName]=\"isExpanded(row) ? 'angle-down' : 'angle-right'\"\n              [style.visibility]=\"showExpand(row) ? 'visible' : 'hidden'\"\n              [style.marginLeft.px]=\"iconIndentComputed(level)\"\n              (click)=\"expandChildren($event, row)\"\n            ></thy-icon>\n            <ng-container *ngIf=\"getModelValue(row, column.model) | isValidModelValue; else default\">\n              {{ getModelValue(row, column.model) }}\n            </ng-container>\n            <ng-template #default>\n              <div class=\"text-desc\">\n                {{ column.defaultText }}\n              </div>\n            </ng-template>\n          </ng-container>\n\n          <!-- index -->\n          <ng-container *ngIf=\"column.type === customType.index\">\n            {{ i + 1 }}\n          </ng-container>\n\n          <!-- checkbox -->\n          <ng-container *ngIf=\"column.type === customType.checkbox\">\n            <input\n              type=\"checkbox\"\n              [(ngModel)]=\"row[column.key]\"\n              (ngModelChange)=\"onCheckboxChange(row, column)\"\n              (click)=\"onStopPropagation($event)\"\n              [disabled]=\"column.disabled\"\n            />\n          </ng-container>\n\n          <!-- radio -->\n          <ng-container *ngIf=\"column.type === customType.radio\">\n            <input\n              type=\"radio\"\n              [(ngModel)]=\"selectedRadioRow\"\n              [value]=\"row\"\n              [disabled]=\"column.disabled\"\n              (click)=\"onStopPropagation($event)\"\n              (change)=\"onRadioSelectChange($event, row)\"\n            />\n          </ng-container>\n\n          <!-- switch -->\n          <ng-container *ngIf=\"column.type === customType.switch\">\n            <thy-switch\n              [(ngModel)]=\"row[column.key]\"\n              (ngModelChange)=\"onModelChange(row, column)\"\n              [disabled]=\"column.disabled\"\n              (thyChange)=\"onSwitchChange($event, row, column)\"\n            ></thy-switch>\n          </ng-container>\n        </ng-container>\n      </td>\n    </ng-template>\n  </tbody>\n</table>\n\n<div *ngIf=\"loadingDone && model.length === 0 && groups.length === 0\" class=\"thy-table-empty clear-hover\">\n  <ng-container *ngIf=\"emptyTemplate; else defaultEmpty\">\n    <ng-template [ngTemplateOutlet]=\"emptyTemplate\"></ng-template>\n  </ng-container>\n  <ng-template #defaultEmpty>\n    <thy-empty\n      [thyMessage]=\"emptyOptions.message\"\n      [thyTranslationKey]=\"emptyOptions.translationKey\"\n      [thyTranslationValues]=\"emptyOptions.translationValues\"\n      [thyEntityName]=\"emptyOptions.entityName\"\n      [thyEntityNameTranslateKey]=\"emptyOptions.entityNameTranslateKey\"\n      [thyIconName]=\"emptyOptions.iconName\"\n      [thySize]=\"emptyOptions.size\"\n      [thyMarginTop]=\"emptyOptions.marginTop\"\n      [thyTopAuto]=\"emptyOptions.topAuto\"\n      [thyContainer]=\"emptyOptions.container\"\n    ></thy-empty>\n  </ng-template>\n</div>\n\n<thy-loading [thyDone]=\"loadingDone\" [thyTip]=\"loadingText\"></thy-loading>\n\n<div class=\"thy-table-footer\" *ngIf=\"pagination.total > pagination.size\" [class.thy-table-footer-has-padding]=\"theme === 'default'\">\n  <thy-pagination\n    [thyPageIndex]=\"pagination.index\"\n    [thyTotal]=\"pagination.total\"\n    [thyPageSize]=\"pagination.size\"\n    [thyShowTotal]=\"showTotal\"\n    (thyPageChanged)=\"onPageChange($event)\"\n    (thyPageIndexChange)=\"onPageIndexChange($event)\"\n  ></thy-pagination>\n</div>\n\n<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n",
                providers: [
                    {
                        provide: THY_TABLE_COLUMN_PARENT_COMPONENT,
                        useExisting: ThyTableComponent
                    },
                    UpdateHostClassService
                ],
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyTableComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IterableDiffers },
    { type: ViewportRuler },
    { type: UpdateHostClassService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ThyTableComponent.propDecorators = {
    emptyTemplate: [{ type: ContentChild, args: ['empty',] }],
    tableElementRef: [{ type: ViewChild, args: ['table', { static: true },] }],
    thyMode: [{ type: Input }],
    thyGroupBy: [{ type: Input }],
    thyRowKey: [{ type: Input }],
    thyGroups: [{ type: Input }],
    thyModel: [{ type: Input }],
    thyTheme: [{ type: Input }],
    thySize: [{ type: Input }],
    thyClassName: [{ type: Input }],
    thyRowClassName: [{ type: Input }],
    thyLoadingDone: [{ type: Input }],
    thyLoadingText: [{ type: Input }],
    thyEmptyOptions: [{ type: Input }],
    thyDraggable: [{ type: Input }],
    thyFilter: [{ type: Input }],
    thyPageIndex: [{ type: Input }],
    thyPageSize: [{ type: Input }],
    thyPageTotal: [{ type: Input }],
    thyWholeRowSelect: [{ type: Input }],
    thyShowHeader: [{ type: Input }],
    showTotal: [{ type: Input, args: ['thyShowTotal',] }],
    thyIndent: [{ type: Input }],
    thyChildrenKey: [{ type: Input }],
    thyHoverDisplayOperation: [{ type: HostBinding, args: ['class.thy-table-hover-display-operation',] }, { type: Input }],
    thyOnSwitchChange: [{ type: Output }],
    thyOnPageChange: [{ type: Output }],
    thyOnPageIndexChange: [{ type: Output }],
    thyOnMultiSelectChange: [{ type: Output }],
    thyOnRadioSelectChange: [{ type: Output }],
    thyOnDraggableChange: [{ type: Output }],
    thyOnRowClick: [{ type: Output }],
    thyOnRowContextMenu: [{ type: Output }],
    groupTemplate: [{ type: ContentChild, args: ['group', { static: true },] }],
    listOfColumnComponents: [{ type: ContentChildren, args: [ThyTableColumnComponent,] }],
    isTableClass: [{ type: HostBinding, args: ['class.thy-table',] }]
};
/**
 * @deprecated ThyGridComponent is deprecated, please use ThyTableComponent
 */
export const ThyGridComponent = ThyTableComponent;
//# sourceMappingURL=data:application/json;base64,
import { Directive, ElementRef, ViewContainerRef, NgZone, Input, Inject } from '@angular/core';
import { Overlay, ScrollDispatcher } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { takeUntil, take } from 'rxjs/operators';
import { DEFAULT_TOOLTIP_OPTIONS } from './interface';
import { coerceBooleanProperty, isString } from 'ngx-tethys/util';
import { ComponentPortal } from '@angular/cdk/portal';
import { ThyTooltipComponent } from './tooltip.component';
import { getFlexiblePositions, ThyOverlayDirectiveBase } from 'ngx-tethys/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { THY_TOOLTIP_DEFAULT_CONFIG_TOKEN, ThyTooltipConfig } from './tooltip.config';
export class ThyTooltipDirective extends ThyOverlayDirectiveBase {
    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, focusMonitor, thyTooltipConfig) {
        super(elementRef, platform, focusMonitor, ngZone);
        this.overlay = overlay;
        this.scrollDispatcher = scrollDispatcher;
        this.viewContainerRef = viewContainerRef;
        this.thyTooltipConfig = thyTooltipConfig;
        this.options = DEFAULT_TOOLTIP_OPTIONS;
        this.panelClassPrefix = 'thy-tooltip';
        this.touchendHideDelay = this.options.touchendHideDelay;
        // tslint:disable-next-line:no-input-rename
        this.placement = 'top';
        // tslint:disable-next-line:no-input-rename
        this.showDelay = this.options.showDelay;
        // tslint:disable-next-line:no-input-rename
        this.hideDelay = this.options.hideDelay;
        this._trigger = 'hover';
        this.tooltipPin = this.thyTooltipConfig.tooltipPin;
        this.options = DEFAULT_TOOLTIP_OPTIONS;
        this.scrollStrategy = overlay.scrollStrategies.reposition({
            scrollThrottle: this.thyTooltipConfig.scrollThrottleSeconds
        });
    }
    get content() {
        return this._content;
    }
    set content(value) {
        // If the content is not a string (e.g. number), convert it to a string and trim it.
        this._content = value && isString(value) ? `${value}`.trim() : value;
        if (!this._content && this.isTooltipVisible()) {
            this.hide(0);
        }
        else {
            this.updateTooltipContent();
        }
    }
    set thyTooltipClass(value) {
        this.tooltipClass = value;
        if (this.tooltipInstance) {
            this.setTooltipClass(this.tooltipClass);
        }
    }
    // tslint:disable-next-line:no-input-rename
    set thyTooltipTrigger(value) {
        this.trigger = value;
    }
    /** Disables the display of the tooltip. */
    set thyTooltipDisabled(value) {
        this.disabled = coerceBooleanProperty(value);
        // If tooltip is disabled, hide immediately.
        if (this.disabled) {
            this.hide(0);
        }
    }
    detach() {
        if (this.overlayRef && this.overlayRef.hasAttached()) {
            this.overlayRef.detach();
        }
        this.tooltipInstance = null;
    }
    /** Create the overlay config and position strategy */
    createOverlay() {
        if (this.overlayRef) {
            return this.overlayRef;
        }
        const scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);
        // Create connected position strategy that listens for scroll events to reposition.
        const strategy = this.overlay
            .position()
            .flexibleConnectedTo(this.elementRef)
            .withTransformOriginOn('.thy-tooltip-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8);
        strategy.withScrollableContainers(scrollableAncestors);
        strategy.positionChanges.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(change => {
            if (this.tooltipInstance) {
                if (change.scrollableViewProperties.isOverlayClipped && this.tooltipInstance.isVisible()) {
                    // After position changes occur and the overlay is clipped by
                    // a parent scrollable then close the tooltip.
                    this.ngZone.run(() => this.hide(0));
                }
            }
        });
        this.overlayRef = this.overlay.create({
            positionStrategy: strategy,
            panelClass: this.thyTooltipConfig.tooltipPanelClass,
            scrollStrategy: this.scrollStrategy,
            hasBackdrop: this.trigger === 'click',
            backdropClass: 'thy-tooltip-backdrop'
        });
        this.updatePosition();
        this.overlayRef
            .detachments()
            .pipe(takeUntil(this.ngUnsubscribe$))
            .subscribe(() => this.detach());
        this.overlayRef.backdropClick().subscribe(() => {
            this.overlayRef.detachBackdrop();
            this.hide();
        });
        return this.overlayRef;
    }
    updateTooltipContent() {
        // Must wait for the message to be painted to the tooltip so that the overlay can properly
        // calculate the correct positioning based on the size of the text.
        if (this.tooltipInstance) {
            this.tooltipInstance.content = this.content;
            this.tooltipInstance.data = this.data;
            this.tooltipInstance.markForCheck();
            this.ngZone.onMicrotaskEmpty
                .asObservable()
                .pipe(take(1), takeUntil(this.ngUnsubscribe$))
                .subscribe(() => {
                if (this.tooltipInstance) {
                    this.overlayRef.updatePosition();
                }
            });
        }
    }
    /** Returns true if the tooltip is currently visible to the user */
    isTooltipVisible() {
        return !!this.tooltipInstance && this.tooltipInstance.isVisible();
    }
    /** Updates the position of the current tooltip. */
    updatePosition() {
        const position = this.overlayRef.getConfig().positionStrategy;
        const connectionPositions = getFlexiblePositions(this.placement, this.tooltipOffset || this.thyTooltipConfig.offset, this.panelClassPrefix);
        position.withPositions(connectionPositions);
    }
    setTooltipClass(tooltipClass) {
        if (this.tooltipInstance) {
            this.tooltipInstance.setTooltipClass(tooltipClass);
        }
    }
    ngOnInit() {
        this.initialize();
    }
    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show 200ms */
    show(delay = this.showDelay) {
        if (this.disabled ||
            !this.content ||
            (this.isTooltipVisible() && !this.tooltipInstance.showTimeoutId && !this.tooltipInstance.hideTimeoutId)) {
            return;
        }
        const overlayRef = this.createOverlay();
        this.detach();
        this.portal = this.portal || new ComponentPortal(ThyTooltipComponent, this.viewContainerRef);
        this.tooltipInstance = overlayRef.attach(this.portal).instance;
        this.tooltipInstance
            .afterHidden()
            .pipe(takeUntil(this.ngUnsubscribe$))
            .subscribe(() => this.detach());
        this.setTooltipClass(this.tooltipClass);
        this.updateTooltipContent();
        this.tooltipInstance.show(delay);
    }
    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide 100ms */
    hide(delay = this.hideDelay) {
        if (this.tooltipInstance) {
            this.tooltipInstance.hide(delay);
        }
    }
    ngOnDestroy() {
        this.hide(0);
        this.dispose();
        if (this.overlayRef) {
            this.tooltipInstance = null;
        }
    }
}
ThyTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyTooltip],[thy-tooltip]',
                exportAs: 'thyTooltip'
            },] }
];
ThyTooltipDirective.ctorParameters = () => [
    { type: Overlay },
    { type: ElementRef },
    { type: ScrollDispatcher },
    { type: ViewContainerRef },
    { type: NgZone },
    { type: Platform },
    { type: FocusMonitor },
    { type: ThyTooltipConfig, decorators: [{ type: Inject, args: [THY_TOOLTIP_DEFAULT_CONFIG_TOKEN,] }] }
];
ThyTooltipDirective.propDecorators = {
    content: [{ type: Input, args: ['thyTooltip',] }],
    placement: [{ type: Input, args: ['thyTooltipPlacement',] }],
    thyTooltipClass: [{ type: Input, args: ['thyTooltipClass',] }],
    showDelay: [{ type: Input, args: ['thyTooltipShowDelay',] }],
    hideDelay: [{ type: Input, args: ['thyTooltipHideDelay',] }],
    thyTooltipTrigger: [{ type: Input, args: ['thyTooltipTrigger',] }],
    thyTooltipDisabled: [{ type: Input, args: ['thyTooltipDisabled',] }],
    data: [{ type: Input, args: ['thyTooltipTemplateContext',] }],
    tooltipOffset: [{ type: Input, args: ['thyTooltipOffset',] }],
    tooltipPin: [{ type: Input, args: ['thyTooltipPin',] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, HostBinding, ElementRef, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { thyTooltipAnimations } from './tooltip-animations';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceArray } from 'ngx-tethys/util';
export class ThyTooltipComponent {
    constructor(changeDetectorRef, updateHostClassService, elementRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.updateHostClassService = updateHostClassService;
        this.addTooltipContainerClass = true;
        this.onHide = new Subject();
        this.closeOnInteraction = false;
        this.visibility = 'initial';
        this.tooltipClasses = [];
        this.isTemplateRef = false;
        this.updateHostClassService.initializeElement(elementRef);
    }
    get content() {
        return this._content;
    }
    set content(value) {
        this._content = value;
        this.isTemplateRef = value instanceof TemplateRef;
    }
    updateClasses() {
        let classes = [];
        if (this.tooltipClasses) {
            classes = classes.concat(this.tooltipClasses);
        }
        this.updateHostClassService.updateClass(classes);
    }
    ngOnInit() { }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
    }
    isVisible() {
        return this.visibility === 'visible';
    }
    show(delay) {
        // Cancel the delayed hide if it is scheduled
        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
            this.hideTimeoutId = null;
        }
        // Body interactions should cancel the tooltip if there is a delay in showing.
        this.closeOnInteraction = true;
        this.showTimeoutId = setTimeout(() => {
            this.visibility = 'visible';
            this.showTimeoutId = null;
            this.markForCheck();
        }, delay);
    }
    hide(delay) {
        // Cancel the delayed show if it is scheduled
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
            this.showTimeoutId = null;
        }
        this.hideTimeoutId = setTimeout(() => {
            this.visibility = 'hidden';
            this.hideTimeoutId = null;
            this.markForCheck();
        }, delay);
    }
    animationStart() {
        this.closeOnInteraction = false;
    }
    animationDone(event) {
        const toState = event.toState;
        if (toState === 'hidden' && !this.isVisible()) {
            this.onHide.next();
        }
        if (toState === 'visible' || toState === 'hidden') {
            this.closeOnInteraction = true;
        }
    }
    afterHidden() {
        return this.onHide.asObservable();
    }
    setTooltipClass(classes) {
        this.tooltipClasses = coerceArray(classes);
        this.updateClasses();
        // this.markForCheck();
    }
}
ThyTooltipComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-tooltip',
                template: "<div class=\"thy-tooltip-arrow\"></div>\n<div class=\"thy-tooltip-content\">\n  <ng-container *ngIf=\"isTemplateRef; else text\">\n    <ng-container *ngTemplateOutlet=\"content; context: { $implicit: data }\"></ng-container>\n  </ng-container>\n  <ng-template #text>\n    {{ content }}\n  </ng-template>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [thyTooltipAnimations.tooltipState],
                host: {
                    '[@state]': 'visibility',
                    '(@state.start)': 'animationStart()',
                    '(@state.done)': 'animationDone($event)'
                },
                providers: [UpdateHostClassService]
            },] }
];
ThyTooltipComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyTooltipComponent.propDecorators = {
    addTooltipContainerClass: [{ type: HostBinding, args: [`class.thy-tooltip`,] }]
};
//# sourceMappingURL=data:application/json;base64,
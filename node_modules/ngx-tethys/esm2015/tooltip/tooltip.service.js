import { NgZone, Injectable, Inject } from '@angular/core';
import { Overlay, ScrollDispatcher } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { FocusMonitor } from '@angular/cdk/a11y';
import { ThyTooltipDirective } from './tooltip.directive';
import { ThyTooltipConfig, THY_TOOLTIP_DEFAULT_CONFIG_TOKEN } from './tooltip.config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
import * as ɵngcc2 from '@angular/cdk/platform';
import * as ɵngcc3 from '@angular/cdk/a11y';
import * as ɵngcc4 from './tooltip.config';
export class TooltipService {
    constructor(overlay, scrollDispatcher, ngZone, platform, focusMonitor, thyTooltipConfig) {
        this.overlay = overlay;
        this.scrollDispatcher = scrollDispatcher;
        this.ngZone = ngZone;
        this.platform = platform;
        this.focusMonitor = focusMonitor;
        this.thyTooltipConfig = thyTooltipConfig;
    }
    attach(elementRef, viewContainerRef, trigger) {
        this.thyTooltipDirective = new ThyTooltipDirective(this.overlay, elementRef, this.scrollDispatcher, viewContainerRef, this.ngZone, this.platform, this.focusMonitor, this.thyTooltipConfig);
        if (trigger) {
            this.thyTooltipDirective.trigger = trigger;
        }
        this.thyTooltipDirective.ngOnInit();
    }
    detach() {
        this.thyTooltipDirective.ngOnDestroy();
    }
}
TooltipService.ɵfac = function TooltipService_Factory(t) { return new (t || TooltipService)(ɵngcc0.ɵɵinject(ɵngcc1.Overlay), ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵinject(THY_TOOLTIP_DEFAULT_CONFIG_TOKEN)); };
TooltipService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TooltipService, factory: TooltipService.ɵfac });
TooltipService.ctorParameters = () => [
    { type: Overlay },
    { type: ScrollDispatcher },
    { type: NgZone },
    { type: Platform },
    { type: FocusMonitor },
    { type: ThyTooltipConfig, decorators: [{ type: Inject, args: [THY_TOOLTIP_DEFAULT_CONFIG_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TooltipService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Platform }, { type: ɵngcc3.FocusMonitor }, { type: ɵngcc4.ThyTooltipConfig, decorators: [{
                type: Inject,
                args: [THY_TOOLTIP_DEFAULT_CONFIG_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdG9vbHRpcC90b29sdGlwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUlILE1BQU0sRUFLTixVQUFVLEVBQ1YsTUFBTSxFQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7QUFHdEYsTUFBTSxPQUFPLGNBQWM7QUFDM0IsSUFFSSxZQUNZLE9BQWdCLEVBQ2hCLGdCQUFrQyxFQUNsQyxNQUFjLEVBQ2QsUUFBa0IsRUFDbEIsWUFBMEIsRUFFMUIsZ0JBQWtDO0FBQy9DLFFBUGEsWUFBTyxHQUFQLE9BQU8sQ0FBUztBQUFDLFFBQ2pCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFDZixhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFDbkIsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQUUzQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQ2xELElBQU8sQ0FBQztBQUNSLElBQ0ksTUFBTSxDQUFDLFVBQXNCLEVBQUUsZ0JBQWtDLEVBQUUsT0FBcUM7QUFDNUcsUUFBUSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxtQkFBbUIsQ0FDOUMsSUFBSSxDQUFDLE9BQU8sRUFDWixVQUFVLEVBQ1YsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixnQkFBZ0IsRUFDaEIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FDeEIsQ0FBQztBQUNWLFFBQVEsSUFBSSxPQUFPLEVBQUU7QUFDckIsWUFBWSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN2RCxTQUFTO0FBQ1QsUUFDUSxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDNUMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxNQUFNO0FBQ1YsUUFBUSxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDL0MsSUFBSSxDQUFDO0FBQ0w7MENBbkNDLFVBQVU7MEdBQ1Q7QUFBQztBQUNVLFlBUkosT0FBTztBQUFJLFlBQUYsZ0JBQWdCO0FBQUksWUFSbEMsTUFBTTtBQUNSLFlBUU8sUUFBUTtBQUFJLFlBQ1osWUFBWTtBQUFJLFlBRWhCLGdCQUFnQix1QkFZaEIsTUFBTSxTQUFDLGdDQUFnQztBQUMxQzs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIFZpZXdDb250YWluZXJSZWYsXG4gICAgTmdab25lLFxuICAgIElucHV0LFxuICAgIE9uSW5pdCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgVGVtcGxhdGVSZWYsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBJbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPdmVybGF5LCBTY3JvbGxEaXNwYXRjaGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgRm9jdXNNb25pdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgVGh5VG9vbHRpcERpcmVjdGl2ZSB9IGZyb20gJy4vdG9vbHRpcC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGh5VG9vbHRpcENvbmZpZywgVEhZX1RPT0xUSVBfREVGQVVMVF9DT05GSUdfVE9LRU4gfSBmcm9tICcuL3Rvb2x0aXAuY29uZmlnJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRvb2x0aXBTZXJ2aWNlIHtcbiAgICB0aHlUb29sdGlwRGlyZWN0aXZlOiBUaHlUb29sdGlwRGlyZWN0aXZlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgb3ZlcmxheTogT3ZlcmxheSxcbiAgICAgICAgcHJpdmF0ZSBzY3JvbGxEaXNwYXRjaGVyOiBTY3JvbGxEaXNwYXRjaGVyLFxuICAgICAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgICAgICBwcml2YXRlIHBsYXRmb3JtOiBQbGF0Zm9ybSxcbiAgICAgICAgcHJpdmF0ZSBmb2N1c01vbml0b3I6IEZvY3VzTW9uaXRvcixcbiAgICAgICAgQEluamVjdChUSFlfVE9PTFRJUF9ERUZBVUxUX0NPTkZJR19UT0tFTilcbiAgICAgICAgcHJpdmF0ZSB0aHlUb29sdGlwQ29uZmlnOiBUaHlUb29sdGlwQ29uZmlnXG4gICAgKSB7fVxuXG4gICAgYXR0YWNoKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIHRyaWdnZXI/OiAnaG92ZXInIHwgJ2ZvY3VzJyB8ICdjbGljaycpIHtcbiAgICAgICAgdGhpcy50aHlUb29sdGlwRGlyZWN0aXZlID0gbmV3IFRoeVRvb2x0aXBEaXJlY3RpdmUoXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXksXG4gICAgICAgICAgICBlbGVtZW50UmVmLFxuICAgICAgICAgICAgdGhpcy5zY3JvbGxEaXNwYXRjaGVyLFxuICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgIHRoaXMubmdab25lLFxuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybSxcbiAgICAgICAgICAgIHRoaXMuZm9jdXNNb25pdG9yLFxuICAgICAgICAgICAgdGhpcy50aHlUb29sdGlwQ29uZmlnXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnRoeVRvb2x0aXBEaXJlY3RpdmUudHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRoeVRvb2x0aXBEaXJlY3RpdmUubmdPbkluaXQoKTtcbiAgICB9XG5cbiAgICBkZXRhY2goKSB7XG4gICAgICAgIHRoaXMudGh5VG9vbHRpcERpcmVjdGl2ZS5uZ09uRGVzdHJveSgpO1xuICAgIH1cbn1cbiJdfQ==
import { NgZone, Injectable, Inject } from '@angular/core';
import { Overlay, ScrollDispatcher } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { FocusMonitor } from '@angular/cdk/a11y';
import { ThyTooltipDirective } from './tooltip.directive';
import { ThyTooltipConfig, THY_TOOLTIP_DEFAULT_CONFIG_TOKEN } from './tooltip.config';
export class TooltipService {
    constructor(overlay, scrollDispatcher, ngZone, platform, focusMonitor, thyTooltipConfig) {
        this.overlay = overlay;
        this.scrollDispatcher = scrollDispatcher;
        this.ngZone = ngZone;
        this.platform = platform;
        this.focusMonitor = focusMonitor;
        this.thyTooltipConfig = thyTooltipConfig;
    }
    attach(elementRef, viewContainerRef, trigger) {
        this.thyTooltipDirective = new ThyTooltipDirective(this.overlay, elementRef, this.scrollDispatcher, viewContainerRef, this.ngZone, this.platform, this.focusMonitor, this.thyTooltipConfig);
        if (trigger) {
            this.thyTooltipDirective.trigger = trigger;
        }
        this.thyTooltipDirective.ngOnInit();
    }
    detach() {
        this.thyTooltipDirective.ngOnDestroy();
    }
}
TooltipService.decorators = [
    { type: Injectable }
];
TooltipService.ctorParameters = () => [
    { type: Overlay },
    { type: ScrollDispatcher },
    { type: NgZone },
    { type: Platform },
    { type: FocusMonitor },
    { type: ThyTooltipConfig, decorators: [{ type: Inject, args: [THY_TOOLTIP_DEFAULT_CONFIG_TOKEN,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rvb2x0aXAvdG9vbHRpcC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFJSCxNQUFNLEVBS04sVUFBVSxFQUNWLE1BQU0sRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUd0RixNQUFNLE9BQU8sY0FBYztJQUd2QixZQUNZLE9BQWdCLEVBQ2hCLGdCQUFrQyxFQUNsQyxNQUFjLEVBQ2QsUUFBa0IsRUFDbEIsWUFBMEIsRUFFMUIsZ0JBQWtDO1FBTmxDLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUUxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQzNDLENBQUM7SUFFSixNQUFNLENBQUMsVUFBc0IsRUFBRSxnQkFBa0MsRUFBRSxPQUFxQztRQUNwRyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxtQkFBbUIsQ0FDOUMsSUFBSSxDQUFDLE9BQU8sRUFDWixVQUFVLEVBQ1YsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixnQkFBZ0IsRUFDaEIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FDeEIsQ0FBQztRQUNGLElBQUksT0FBTyxFQUFFO1lBQ1QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDOUM7UUFFRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0MsQ0FBQzs7O1lBbENKLFVBQVU7OztZQU5GLE9BQU87WUFBRSxnQkFBZ0I7WUFSOUIsTUFBTTtZQVNELFFBQVE7WUFDUixZQUFZO1lBRVosZ0JBQWdCLHVCQVloQixNQUFNLFNBQUMsZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBWaWV3Q29udGFpbmVyUmVmLFxuICAgIE5nWm9uZSxcbiAgICBJbnB1dCxcbiAgICBPbkluaXQsXG4gICAgT25EZXN0cm95LFxuICAgIFRlbXBsYXRlUmVmLFxuICAgIEluamVjdGFibGUsXG4gICAgSW5qZWN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3ZlcmxheSwgU2Nyb2xsRGlzcGF0Y2hlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmltcG9ydCB7IEZvY3VzTW9uaXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IFRoeVRvb2x0aXBEaXJlY3RpdmUgfSBmcm9tICcuL3Rvb2x0aXAuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRoeVRvb2x0aXBDb25maWcsIFRIWV9UT09MVElQX0RFRkFVTFRfQ09ORklHX1RPS0VOIH0gZnJvbSAnLi90b29sdGlwLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUb29sdGlwU2VydmljZSB7XG4gICAgdGh5VG9vbHRpcERpcmVjdGl2ZTogVGh5VG9vbHRpcERpcmVjdGl2ZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksXG4gICAgICAgIHByaXZhdGUgc2Nyb2xsRGlzcGF0Y2hlcjogU2Nyb2xsRGlzcGF0Y2hlcixcbiAgICAgICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybTogUGxhdGZvcm0sXG4gICAgICAgIHByaXZhdGUgZm9jdXNNb25pdG9yOiBGb2N1c01vbml0b3IsXG4gICAgICAgIEBJbmplY3QoVEhZX1RPT0xUSVBfREVGQVVMVF9DT05GSUdfVE9LRU4pXG4gICAgICAgIHByaXZhdGUgdGh5VG9vbHRpcENvbmZpZzogVGh5VG9vbHRpcENvbmZpZ1xuICAgICkge31cblxuICAgIGF0dGFjaChlbGVtZW50UmVmOiBFbGVtZW50UmVmLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCB0cmlnZ2VyPzogJ2hvdmVyJyB8ICdmb2N1cycgfCAnY2xpY2snKSB7XG4gICAgICAgIHRoaXMudGh5VG9vbHRpcERpcmVjdGl2ZSA9IG5ldyBUaHlUb29sdGlwRGlyZWN0aXZlKFxuICAgICAgICAgICAgdGhpcy5vdmVybGF5LFxuICAgICAgICAgICAgZWxlbWVudFJlZixcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsRGlzcGF0Y2hlcixcbiAgICAgICAgICAgIHZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICB0aGlzLm5nWm9uZSxcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0sXG4gICAgICAgICAgICB0aGlzLmZvY3VzTW9uaXRvcixcbiAgICAgICAgICAgIHRoaXMudGh5VG9vbHRpcENvbmZpZ1xuICAgICAgICApO1xuICAgICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICAgICAgdGhpcy50aHlUb29sdGlwRGlyZWN0aXZlLnRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50aHlUb29sdGlwRGlyZWN0aXZlLm5nT25Jbml0KCk7XG4gICAgfVxuXG4gICAgZGV0YWNoKCkge1xuICAgICAgICB0aGlzLnRoeVRvb2x0aXBEaXJlY3RpdmUubmdPbkRlc3Ryb3koKTtcbiAgICB9XG59XG4iXX0=
import { Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, HostBinding, ElementRef, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { thyTooltipAnimations } from './tooltip-animations';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceArray } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';

function ThyTooltipComponent_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c0 = function (a0) { return { $implicit: a0 }; };
function ThyTooltipComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTooltipComponent_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.content)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.data));
} }
function ThyTooltipComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.content, " ");
} }
export class ThyTooltipComponent {
    constructor(changeDetectorRef, updateHostClassService, elementRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.updateHostClassService = updateHostClassService;
        this.addTooltipContainerClass = true;
        this.onHide = new Subject();
        this.closeOnInteraction = false;
        this.visibility = 'initial';
        this.tooltipClasses = [];
        this.isTemplateRef = false;
        this.updateHostClassService.initializeElement(elementRef);
    }
    get content() {
        return this._content;
    }
    set content(value) {
        this._content = value;
        this.isTemplateRef = value instanceof TemplateRef;
    }
    updateClasses() {
        let classes = [];
        if (this.tooltipClasses) {
            classes = classes.concat(this.tooltipClasses);
        }
        this.updateHostClassService.updateClass(classes);
    }
    ngOnInit() { }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
    }
    isVisible() {
        return this.visibility === 'visible';
    }
    show(delay) {
        // Cancel the delayed hide if it is scheduled
        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
            this.hideTimeoutId = null;
        }
        // Body interactions should cancel the tooltip if there is a delay in showing.
        this.closeOnInteraction = true;
        this.showTimeoutId = setTimeout(() => {
            this.visibility = 'visible';
            this.showTimeoutId = null;
            this.markForCheck();
        }, delay);
    }
    hide(delay) {
        // Cancel the delayed show if it is scheduled
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
            this.showTimeoutId = null;
        }
        this.hideTimeoutId = setTimeout(() => {
            this.visibility = 'hidden';
            this.hideTimeoutId = null;
            this.markForCheck();
        }, delay);
    }
    animationStart() {
        this.closeOnInteraction = false;
    }
    animationDone(event) {
        const toState = event.toState;
        if (toState === 'hidden' && !this.isVisible()) {
            this.onHide.next();
        }
        if (toState === 'visible' || toState === 'hidden') {
            this.closeOnInteraction = true;
        }
    }
    afterHidden() {
        return this.onHide.asObservable();
    }
    setTooltipClass(classes) {
        this.tooltipClasses = coerceArray(classes);
        this.updateClasses();
        // this.markForCheck();
    }
}
ThyTooltipComponent.ɵfac = function ThyTooltipComponent_Factory(t) { return new (t || ThyTooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTooltipComponent, selectors: [["thy-tooltip"]], hostVars: 3, hostBindings: function ThyTooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵsyntheticHostListener("@state.start", function ThyTooltipComponent_animation_state_start_HostBindingHandler() { return ctx.animationStart(); })("@state.done", function ThyTooltipComponent_animation_state_done_HostBindingHandler($event) { return ctx.animationDone($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵsyntheticHostProperty("@state", ctx.visibility);
        ɵngcc0.ɵɵclassProp("thy-tooltip", ctx.addTooltipContainerClass);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], decls: 5, vars: 2, consts: [[1, "thy-tooltip-arrow"], [1, "thy-tooltip-content"], [4, "ngIf", "ngIfElse"], ["text", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function ThyTooltipComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ThyTooltipComponent_ng_container_2_Template, 2, 4, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, ThyTooltipComponent_ng_template_3_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isTemplateRef)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet], encapsulation: 2, data: { animation: [thyTooltipAnimations.tooltipState] }, changeDetection: 0 });
ThyTooltipComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyTooltipComponent.propDecorators = {
    addTooltipContainerClass: [{ type: HostBinding, args: [`class.thy-tooltip`,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTooltipComponent, [{
        type: Component,
        args: [{
                selector: 'thy-tooltip',
                template: "<div class=\"thy-tooltip-arrow\"></div>\n<div class=\"thy-tooltip-content\">\n  <ng-container *ngIf=\"isTemplateRef; else text\">\n    <ng-container *ngTemplateOutlet=\"content; context: { $implicit: data }\"></ng-container>\n  </ng-container>\n  <ng-template #text>\n    {{ content }}\n  </ng-template>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [thyTooltipAnimations.tooltipState],
                host: {
                    '[@state]': 'visibility',
                    '(@state.start)': 'animationStart()',
                    '(@state.done)': 'animationDone($event)'
                },
                providers: [UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { addTooltipContainerClass: [{
            type: HostBinding,
            args: [`class.thy-tooltip`]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
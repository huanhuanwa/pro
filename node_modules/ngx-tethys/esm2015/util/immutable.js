import { coerceArray, isFunction, isUndefinedOrNull } from './helpers';
export class Producer {
    constructor(entities, options) {
        this.idKey = '_id';
        this.entities = entities || [];
        if (options && options.idKey) {
            this.idKey = options.idKey;
        }
    }
    /**
     * Add an entity or entities.
     *
     * @example
     * produce([users]).add(Entity);
     * produce([users]).add([Entity, Entity]);
     * produce([users]).add(Entity, { prepend: true });
     * produce([users]).add(Entity, { afterId: '' });
     */
    add(entity, addOptions) {
        const addEntities = coerceArray(entity);
        if (addEntities.length === 0) {
            return this.entities;
        }
        if (addOptions && (addOptions.afterId || addOptions.prepend)) {
            if (addOptions.afterId) {
                const entities = [...this.entities];
                const index = this.entities.findIndex(item => {
                    return item[this.idKey] === addOptions.afterId;
                }) + 1;
                entities.splice(index, 0, ...addEntities);
                this.entities = [...entities];
            }
            else if (addOptions.prepend) {
                this.entities = [...addEntities, ...this.entities];
            }
        }
        else {
            this.entities = [...this.entities, ...addEntities];
        }
        return this.entities;
    }
    update(idsOrFn, newStateOrFn) {
        const ids = coerceArray(idsOrFn);
        for (let i = 0; i < this.entities.length; i++) {
            const oldEntity = this.entities[i];
            if (ids.indexOf(oldEntity[this.idKey]) >= 0) {
                const newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
                this.entities[i] = Object.assign(Object.assign({}, oldEntity), newState);
            }
        }
        return [...this.entities];
    }
    remove(idsOrFn) {
        if (isFunction(idsOrFn)) {
            this.entities = this.entities.filter(entity => {
                return !idsOrFn(entity);
            });
        }
        else {
            const ids = coerceArray(idsOrFn);
            this.entities = this.entities.filter(entity => {
                return ids.indexOf(entity[this.idKey]) === -1;
            });
        }
        return this.entities;
    }
    /**
     *
     * Move one or more entities:
     *
     * @example
     * produce([users]).move(5, {afterId: 2});
     * produce([users]).move(5, {toIndex: 0});
     */
    move(id, moveOptions) {
        const fromIndex = this.entities.findIndex(item => item[this.idKey] === id);
        let toIndex = 0;
        const newEntities = [...this.entities];
        if (!id || fromIndex < 0) {
            return [...this.entities];
        }
        if (moveOptions) {
            if (!isUndefinedOrNull(moveOptions.afterId)) {
                toIndex = this.entities.findIndex(item => item[this.idKey] === moveOptions.afterId);
            }
            else if (moveOptions.toIndex) {
                toIndex = moveOptions.toIndex;
            }
        }
        toIndex = Math.max(0, Math.min(this.entities.length - 1, toIndex));
        if (toIndex === fromIndex) {
            return [...this.entities];
        }
        else {
            const target = this.entities[fromIndex];
            const delta = toIndex < fromIndex ? -1 : 1;
            for (let i = fromIndex; i !== toIndex; i += delta) {
                newEntities[i] = newEntities[i + delta];
            }
            newEntities[toIndex] = target;
            return [...newEntities];
        }
    }
}
export function produce(entities, options) {
    return new Producer(entities, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1tdXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWwvaW1tdXRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBa0J2RSxNQUFNLE9BQU8sUUFBUTtJQUtqQixZQUFZLFFBQW1CLEVBQUUsT0FBeUI7UUFKbEQsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUtsQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxFQUFFLENBQUM7UUFDL0IsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7U0FDOUI7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxHQUFHLENBQUMsTUFBMkIsRUFBRSxVQUE2QjtRQUMxRCxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDeEI7UUFDRCxJQUFJLFVBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzFELElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRTtnQkFDcEIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDcEMsTUFBTSxLQUFLLEdBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDO2dCQUNuRCxDQUFDLENBQUMsR0FBRyxDQUFDLENB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LEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElkIH0gZnJvbSAnbmd4LXRldGh5cy90eXBlcyc7XG5pbXBvcnQgeyBjb2VyY2VBcnJheSwgaXNGdW5jdGlvbiwgaXNVbmRlZmluZWRPck51bGwgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eUFkZE9wdGlvbnMge1xuICAgIHByZXBlbmQ/OiBib29sZWFuO1xuXG4gICAgYWZ0ZXJJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlNb3ZlT3B0aW9ucyB7XG4gICAgYWZ0ZXJJZD86IHN0cmluZztcblxuICAgIHRvSW5kZXg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZHVjZXJPcHRpb25zIHtcbiAgICBpZEtleT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFByb2R1Y2VyPFRFbnRpdHk+IHtcbiAgICBwcml2YXRlIGlkS2V5ID0gJ19pZCc7XG5cbiAgICBwcml2YXRlIGVudGl0aWVzOiBURW50aXR5W107XG5cbiAgICBjb25zdHJ1Y3RvcihlbnRpdGllczogVEVudGl0eVtdLCBvcHRpb25zPzogUHJvZHVjZXJPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSBlbnRpdGllcyB8fCBbXTtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5pZEtleSkge1xuICAgICAgICAgICAgdGhpcy5pZEtleSA9IG9wdGlvbnMuaWRLZXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZW50aXR5IG9yIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBwcm9kdWNlKFt1c2Vyc10pLmFkZChFbnRpdHkpO1xuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkuYWRkKFtFbnRpdHksIEVudGl0eV0pO1xuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkuYWRkKEVudGl0eSwgeyBwcmVwZW5kOiB0cnVlIH0pO1xuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkuYWRkKEVudGl0eSwgeyBhZnRlcklkOiAnJyB9KTtcbiAgICAgKi9cbiAgICBhZGQoZW50aXR5OiBURW50aXR5IHwgVEVudGl0eVtdLCBhZGRPcHRpb25zPzogRW50aXR5QWRkT3B0aW9ucyk6IFRFbnRpdHlbXSB7XG4gICAgICAgIGNvbnN0IGFkZEVudGl0aWVzID0gY29lcmNlQXJyYXkoZW50aXR5KTtcbiAgICAgICAgaWYgKGFkZEVudGl0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXRpZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFkZE9wdGlvbnMgJiYgKGFkZE9wdGlvbnMuYWZ0ZXJJZCB8fCBhZGRPcHRpb25zLnByZXBlbmQpKSB7XG4gICAgICAgICAgICBpZiAoYWRkT3B0aW9ucy5hZnRlcklkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW50aXRpZXMgPSBbLi4udGhpcy5lbnRpdGllc107XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzLmZpbmRJbmRleChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtW3RoaXMuaWRLZXldID09PSBhZGRPcHRpb25zLmFmdGVySWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pICsgMTtcbiAgICAgICAgICAgICAgICBlbnRpdGllcy5zcGxpY2UoaW5kZXgsIDAsIC4uLmFkZEVudGl0aWVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzID0gWy4uLmVudGl0aWVzXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkT3B0aW9ucy5wcmVwZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllcyA9IFsuLi5hZGRFbnRpdGllcywgLi4udGhpcy5lbnRpdGllc107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVudGl0aWVzID0gWy4uLnRoaXMuZW50aXRpZXMsIC4uLmFkZEVudGl0aWVzXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGllcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFVwZGF0ZSBhbiBlbnRpdHkgb3IgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkudXBkYXRlKDMsIHtcbiAgICAgKiAgIG5hbWU6ICdOZXcgTmFtZSdcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkudXBkYXRlKDMsIGVudGl0eSA9PiB7XG4gICAgICogICAgcmV0dXJuIHtcbiAgICAgKiAgICAgIC4uLmVudGl0eSxcbiAgICAgKiAgICAgIG5hbWU6ICdOZXcgTmFtZSdcbiAgICAgKiAgICB9XG4gICAgICogIH0pO1xuICAgICAqXG4gICAgICogcHJvZHVjZShbdXNlcnNdKS51cGRhdGUoWzEsMiwzXSwge1xuICAgICAqICAgbmFtZTogJ05ldyBOYW1lJ1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHVwZGF0ZShpZDogSWQgfCBJZFtdIHwgbnVsbCwgbmV3U3RhdGVGbjogKGVudGl0eTogUmVhZG9ubHk8VEVudGl0eT4pID0+IFBhcnRpYWw8VEVudGl0eT4pOiBURW50aXR5W107XG4gICAgdXBkYXRlKGlkOiBJZCB8IElkW10gfCBudWxsLCBuZXdTdGF0ZT86IFBhcnRpYWw8VEVudGl0eT4pOiBURW50aXR5W107XG4gICAgdXBkYXRlKFxuICAgICAgICBpZHNPckZuOiBJZCB8IElkW10gfCBudWxsIHwgUGFydGlhbDxURW50aXR5PiB8ICgoZW50aXR5OiBSZWFkb25seTxURW50aXR5PikgPT4gYm9vbGVhbiksXG4gICAgICAgIG5ld1N0YXRlT3JGbj86ICgoZW50aXR5OiBSZWFkb25seTxURW50aXR5PikgPT4gUGFydGlhbDxURW50aXR5PikgfCBQYXJ0aWFsPFRFbnRpdHk+XG4gICAgKTogVEVudGl0eVtdIHtcbiAgICAgICAgY29uc3QgaWRzID0gY29lcmNlQXJyYXkoaWRzT3JGbik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVudGl0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRFbnRpdHkgPSB0aGlzLmVudGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGlkcy5pbmRleE9mKG9sZEVudGl0eVt0aGlzLmlkS2V5XSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0gaXNGdW5jdGlvbihuZXdTdGF0ZU9yRm4pID8gKG5ld1N0YXRlT3JGbiBhcyBhbnkpKG9sZEVudGl0eSkgOiBuZXdTdGF0ZU9yRm47XG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXSA9IHsgLi4uKG9sZEVudGl0eSBhcyBhbnkpLCAuLi5uZXdTdGF0ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5lbnRpdGllc107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBSZW1vdmUgb25lIG9yIG1vcmUgZW50aXRpZXM6XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkucmVtb3ZlKDUpO1xuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkucmVtb3ZlKFsxLDIsM10pO1xuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkucmVtb3ZlKGVudGl0eSA9PiBlbnRpdHkuaWQgPT09IDEpO1xuICAgICAqL1xuICAgIHJlbW92ZShpZDogSWQgfCBJZFtdKTogVEVudGl0eVtdO1xuICAgIHJlbW92ZShwcmVkaWNhdGU6IChlbnRpdHk6IFJlYWRvbmx5PFRFbnRpdHk+KSA9PiBib29sZWFuKTogVEVudGl0eVtdO1xuICAgIHJlbW92ZShpZHNPckZuPzogSWQgfCBJZFtdIHwgKChlbnRpdHk6IFJlYWRvbmx5PFRFbnRpdHk+KSA9PiBib29sZWFuKSk6IFRFbnRpdHlbXSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGlkc09yRm4pKSB7XG4gICAgICAgICAgICB0aGlzLmVudGl0aWVzID0gdGhpcy5lbnRpdGllcy5maWx0ZXIoZW50aXR5ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIShpZHNPckZuIGFzIGFueSkoZW50aXR5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaWRzID0gY29lcmNlQXJyYXkoaWRzT3JGbik7XG4gICAgICAgICAgICB0aGlzLmVudGl0aWVzID0gdGhpcy5lbnRpdGllcy5maWx0ZXIoZW50aXR5ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWRzLmluZGV4T2YoZW50aXR5W3RoaXMuaWRLZXldKSA9PT0gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGllcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIE1vdmUgb25lIG9yIG1vcmUgZW50aXRpZXM6XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkubW92ZSg1LCB7YWZ0ZXJJZDogMn0pO1xuICAgICAqIHByb2R1Y2UoW3VzZXJzXSkubW92ZSg1LCB7dG9JbmRleDogMH0pO1xuICAgICAqL1xuICAgIG1vdmUoaWQ6IElkLCBtb3ZlT3B0aW9ucz86IEVudGl0eU1vdmVPcHRpb25zKTogVEVudGl0eVtdIHtcbiAgICAgICAgY29uc3QgZnJvbUluZGV4ID0gdGhpcy5lbnRpdGllcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtW3RoaXMuaWRLZXldID09PSBpZCk7XG4gICAgICAgIGxldCB0b0luZGV4ID0gMDtcbiAgICAgICAgY29uc3QgbmV3RW50aXRpZXMgPSBbLi4udGhpcy5lbnRpdGllc107XG5cbiAgICAgICAgaWYgKCFpZCB8fCBmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gWy4uLnRoaXMuZW50aXRpZXNdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vdmVPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkT3JOdWxsKG1vdmVPcHRpb25zLmFmdGVySWQpKSB7XG4gICAgICAgICAgICAgICAgdG9JbmRleCA9IHRoaXMuZW50aXRpZXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbVt0aGlzLmlkS2V5XSA9PT0gbW92ZU9wdGlvbnMuYWZ0ZXJJZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vdmVPcHRpb25zLnRvSW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0b0luZGV4ID0gbW92ZU9wdGlvbnMudG9JbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0b0luZGV4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odGhpcy5lbnRpdGllcy5sZW5ndGggLSAxLCB0b0luZGV4KSk7XG4gICAgICAgIGlmICh0b0luZGV4ID09PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBbLi4udGhpcy5lbnRpdGllc107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmVudGl0aWVzW2Zyb21JbmRleF07XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IHRvSW5kZXggPCBmcm9tSW5kZXggPyAtMSA6IDE7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tSW5kZXg7IGkgIT09IHRvSW5kZXg7IGkgKz0gZGVsdGEpIHtcbiAgICAgICAgICAgICAgICBuZXdFbnRpdGllc1tpXSA9IG5ld0VudGl0aWVzW2kgKyBkZWx0YV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdFbnRpdGllc1t0b0luZGV4XSA9IHRhcmdldDtcbiAgICAgICAgICAgIHJldHVybiBbLi4ubmV3RW50aXRpZXNdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvZHVjZTxURW50aXR5PihlbnRpdGllczogVEVudGl0eVtdLCBvcHRpb25zPzogUHJvZHVjZXJPcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9kdWNlcihlbnRpdGllcywgb3B0aW9ucyk7XG59XG4iXX0=
import { keyBy, indexKeyBy } from './helpers';
function getReferenceIdKey(referenceKey, idKeys) {
    if (idKeys && idKeys[referenceKey]) {
        return idKeys[referenceKey];
    }
    else {
        return '_id';
    }
}
/**
 * Append references to original references
 * @example
 * mergeReferences({departments: [{ _id: '1', name: 'name-1'}]}, {departments: [{ _id: '3', name: 'name-3'}]})
 * mergeReferences({users: [{ uid: '1', name: 'name-1'}]}, {users: [{ uid: '3', name: 'name-3'}]}, { users: "uid" })
 * @param originalReferences original references
 * @param references append references
 * @param idKeys references 's id key, default is '_id'
 *
 * @returns TReferences
 */
export function mergeReferences(originalReferences, references, idKeys) {
    for (const key in references) {
        if (references.hasOwnProperty(key)) {
            const reference = references[key];
            const referenceIdKey = getReferenceIdKey(key, idKeys);
            const originalReference = originalReferences[key];
            if (!originalReference) {
                throw new Error(`original reference must exist when append new reference: ${key}`);
            }
            if (originalReference instanceof Array) {
                // original reference id index map
                const originalReferenceIdIndexMap = indexKeyBy(originalReferences[key], referenceIdKey);
                // append reference is array
                if (reference instanceof Array) {
                    reference.forEach((item) => {
                        const itemId = item[referenceIdKey];
                        const index = originalReferenceIdIndexMap[itemId];
                        if (index >= 0) {
                            originalReference[index] = Object.assign(Object.assign({}, originalReference[index]), item);
                        }
                        else {
                            originalReferences[key] = [...originalReferences[key], item];
                        }
                    });
                }
                else {
                    // append reference is not array, support append signal object to array reference
                    const itemId = reference[referenceIdKey];
                    const index = originalReferenceIdIndexMap[itemId];
                    if (itemId >= 0) {
                        originalReference[index] = Object.assign(Object.assign({}, originalReference[index]), reference);
                    }
                    else {
                        originalReferences[key] = [...originalReferences[key], reference];
                    }
                }
            }
            else {
                originalReferences[key] = Object.assign(Object.assign({}, originalReferences[key]), reference);
            }
        }
    }
    return originalReferences;
}
/**
 * Build dictionary for references
 * @param references references
 * @param idKeys references 's id key, default is '_id'
 */
export function buildReferencesKeyBy(references, idKeys) {
    const result = {};
    for (const key in references) {
        if (references.hasOwnProperty(key)) {
            const referenceIdKey = getReferenceIdKey(key, idKeys);
            const reference = references[key];
            if (reference instanceof Array) {
                const originalReferenceIdMap = keyBy(reference, referenceIdKey);
                result[key] = originalReferenceIdMap;
            }
        }
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,
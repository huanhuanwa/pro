import { __decorate, __metadata } from "tslib";
import { Component, forwardRef, Input, EventEmitter, ChangeDetectorRef, ViewChild, ElementRef, HostBinding, Output, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { clamp } from 'ngx-tethys/util';
import { tap, pluck, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'ngx-tethys/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
export class ThySliderComponent {
    constructor(cdr, ngZone, ref, updateHostClassService) {
        this.cdr = cdr;
        this.ngZone = ngZone;
        this.ref = ref;
        this.updateHostClassService = updateHostClassService;
        this.thyVertical = false;
        this.thyDisabled = false;
        this._thySlider = true;
        this._pointer = true;
        this.thyMax = 100;
        this.thyMin = 0;
        this.thyStep = 1;
        this.thyAfterChange = new EventEmitter();
        this.onChangeCallback = (v) => { };
        this.onTouchedCallback = (v) => { };
        updateHostClassService.initializeElement(ref.nativeElement);
    }
    set thyType(type) {
        this.updateHostClassService.updateClass(type ? [`thy-slider-${type}`] : []);
    }
    ngOnInit() {
        this.verificationValues();
        this.verificationStepValue();
        this.toggleDisabled();
        if (this.value === null || this.value === undefined) {
            this.setValue(this.ensureValueInRange(null));
        }
    }
    ngAfterViewInit() {
        this.registerMouseEventsListeners();
        this.toggleDisabled();
    }
    writeValue(newValue) {
        this.setValue(this.ensureValueInRange(newValue));
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('thyMin') || changes.hasOwnProperty('thyMax') || changes.hasOwnProperty('thyStep')) {
            this.verificationValues();
            this.verificationStepValue();
        }
    }
    ngOnDestroy() {
        this.unsubscribeMouseListeners();
    }
    verificationValues() {
        if (this.thyMin >= this.thyMax) {
            throw new Error('min value must less than max value.');
        }
    }
    verificationStepValue() {
        if (this.thyStep <= 0 || !!!this.thyStep) {
            throw new Error('step value must be greater than 0.');
        }
        else if (Number.isInteger(this.thyStep) && (this.thyMax - this.thyMin) % this.thyStep) {
            throw new Error('(max - min) must be divisible by step.');
        }
    }
    toggleDisabled() {
        if (this.thyDisabled) {
            this.unsubscribeMouseListeners();
        }
        else {
            this.subscribeMouseListeners(['start']);
        }
    }
    setValue(value) {
        if (this.value !== value) {
            this.value = value;
            this.updateTrackAndPointer();
        }
        this.onChangeCallback(this.value);
    }
    ensureValueInRange(value) {
        if (!this.valueMustBeValid(value)) {
            return this.thyMin;
        }
        return clamp(value, this.thyMin, this.thyMax);
    }
    valueMustBeValid(value) {
        return !isNaN(typeof value !== 'number' ? parseFloat(value) : value);
    }
    updateTrackAndPointer() {
        const offset = this.valueToOffset(this.value);
        this.updateStyle(offset / 100);
        this.cdr.markForCheck();
    }
    valueToOffset(value) {
        return ((value - this.thyMin) * 100) / (this.thyMax - this.thyMin);
    }
    updateStyle(offsetPercentage) {
        const percentage = Math.min(1, Math.max(0, offsetPercentage));
        const orientFields = this.thyVertical ? ['height', 'bottom'] : ['width', 'left'];
        this.sliderTrack.nativeElement.style[orientFields[0]] = `${percentage * 100}%`;
        this.sliderPointer.nativeElement.style[orientFields[1]] = `${percentage * 100}%`;
    }
    unsubscribeMouseListeners(actions = ['start', 'move', 'end']) {
        if (actions.includes('start') && this.dragStartHandler) {
            this.dragStartHandler.unsubscribe();
            this.dragStartHandler = null;
        }
        if (actions.includes('move') && this.dragMoveHandler) {
            this.dragMoveHandler.unsubscribe();
            this.dragMoveHandler = null;
        }
        if (actions.includes('end') && this.dragEndHandler) {
            this.dragEndHandler.unsubscribe();
            this.dragEndHandler = null;
        }
    }
    subscribeMouseListeners(actions = ['start', 'move', 'end']) {
        if (actions.includes('start') && this.dragStartListener && !this.dragStartHandler) {
            this.dragStartHandler = this.dragStartListener.subscribe(this.mouseStartMoving.bind(this));
        }
        if (actions.includes('move') && this.dragMoveListener && !this.dragMoveHandler) {
            this.dragMoveHandler = this.dragMoveListener.subscribe(this.mouseMoving.bind(this));
        }
        if (actions.includes('end') && this.dragEndListener && !this.dragEndHandler) {
            this.dragEndHandler = this.dragEndListener.subscribe(this.mouseStopMoving.bind(this));
        }
    }
    mouseStartMoving(value) {
        this.pointerController(true);
        this.setValue(value);
    }
    mouseMoving(value) {
        this.setValue(this.ensureValueInRange(value));
        this.cdr.markForCheck();
    }
    mouseStopMoving() {
        this.pointerController(false);
        this.cdr.markForCheck();
        this.thyAfterChange.emit({ value: this.value });
    }
    pointerController(movable) {
        if (movable) {
            this.subscribeMouseListeners(['move', 'end']);
        }
        else {
            this.unsubscribeMouseListeners(['move', 'end']);
        }
    }
    registerMouseEventsListeners() {
        const orientField = this.thyVertical ? 'pageY' : 'pageX';
        this.dragStartListener = this.ngZone.runOutsideAngular(() => {
            return fromEvent(this.ref.nativeElement, 'mousedown').pipe(tap((e) => {
                e.stopPropagation();
                e.preventDefault();
            }), pluck(orientField), map((position) => this.mousePositionToAdaptiveValue(position)));
        });
        this.dragEndListener = this.ngZone.runOutsideAngular(() => {
            return fromEvent(document, 'mouseup');
        });
        this.dragMoveListener = this.ngZone.runOutsideAngular(() => {
            return fromEvent(document, 'mousemove').pipe(tap((e) => {
                e.stopPropagation();
                e.preventDefault();
            }), pluck(orientField), distinctUntilChanged(), map((position) => this.mousePositionToAdaptiveValue(position)), distinctUntilChanged(), takeUntil(this.dragEndListener));
        });
    }
    mousePositionToAdaptiveValue(position) {
        const sliderStartPosition = this.getSliderPagePosition();
        const sliderLength = this.getRailLength();
        const ratio = this.convertPointerPositionToRatio(position, sliderStartPosition, sliderLength);
        const value = this.ratioToValue(ratio);
        return parseFloat(value.toFixed(this.getDecimals(this.thyStep)));
    }
    getSliderPagePosition() {
        const rect = this.ref.nativeElement.getBoundingClientRect();
        const window = this.ref.nativeElement.ownerDocument.defaultView;
        const orientFields = this.thyVertical ? ['bottom', 'pageYOffset'] : ['left', 'pageXOffset'];
        return rect[orientFields[0]] + window[orientFields[1]];
    }
    getRailLength() {
        const orientFiled = this.thyVertical ? 'clientHeight' : 'clientWidth';
        return this.sliderRail.nativeElement[orientFiled];
    }
    convertPointerPositionToRatio(pointerPosition, startPosition, totalLength) {
        if (this.thyVertical) {
            return clamp((startPosition - pointerPosition) / totalLength, 0, 1);
        }
        return clamp((pointerPosition - startPosition) / totalLength, 0, 1);
    }
    ratioToValue(ratio) {
        let value = (this.thyMax - this.thyMin) * ratio + this.thyMin;
        const step = this.thyStep;
        if (ratio === 0) {
            value = this.thyMin;
        }
        else if (ratio === 1) {
            value = this.thyMax;
        }
        else {
            value = Math.round(value / step) * step;
        }
        return clamp(value, this.thyMin, this.thyMax);
    }
    getDecimals(value) {
        const valueString = value.toString();
        const integerLength = valueString.indexOf('.') + 1;
        return integerLength >= 0 ? valueString.length - integerLength : 0;
    }
}
ThySliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-slider',
                template: "<div class=\"thy-slider-rail\" #sliderRail>\n  <div class=\"thy-slider-track\" #sliderTrack [ngStyle]=\"{ 'background-color': thyColor }\"></div>\n  <div class=\"thy-slider-pointer\" #sliderPointer [ngStyle]=\"{ 'border-color': thyColor }\"></div>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThySliderComponent),
                        multi: true
                    },
                    UpdateHostClassService
                ]
            },] }
];
ThySliderComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThySliderComponent.propDecorators = {
    thyVertical: [{ type: HostBinding, args: ['class.slider-vertical',] }, { type: Input }],
    thyDisabled: [{ type: HostBinding, args: ['class.slider-disabled',] }, { type: Input }],
    _thySlider: [{ type: HostBinding, args: ['class.thy-slider',] }],
    _pointer: [{ type: HostBinding, args: ['class.cursor-pointer',] }],
    sliderRail: [{ type: ViewChild, args: ['sliderRail', { static: true },] }],
    sliderTrack: [{ type: ViewChild, args: ['sliderTrack', { static: true },] }],
    sliderPointer: [{ type: ViewChild, args: ['sliderPointer', { static: true },] }],
    thyMax: [{ type: Input }],
    thyMin: [{ type: Input }],
    thyStep: [{ type: Input }],
    thyType: [{ type: Input }],
    thyColor: [{ type: Input }],
    thyAfterChange: [{ type: Output }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThySliderComponent.prototype, "thyVertical", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], ThySliderComponent.prototype, "thyDisabled", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zbGlkZXIvc2xpZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILFNBQVMsRUFNVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLFlBQVksRUFDWixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxFQUNOLE1BQU0sRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUE0QixTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0QsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFnQnpELE1BQU0sT0FBTyxrQkFBa0I7SUFxRDNCLFlBQ1ksR0FBc0IsRUFDdEIsTUFBYyxFQUNkLEdBQWUsRUFDZixzQkFBOEM7UUFIOUMsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFDdEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBckQxRCxnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUtwQixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVhLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFFZCxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBUTVDLFdBQU0sR0FBRyxHQUFHLENBQUM7UUFFYixXQUFNLEdB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VSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDO3dCQUNqRCxLQUFLLEVBQUUsSUFBSTtxQkFDZDtvQkFDRCxzQkFBc0I7aUJBQ3pCO2FBQ0o7OztZQTNCRyxpQkFBaUI7WUFLakIsTUFBTTtZQUhOLFVBQVU7WUFVTCxzQkFBc0I7OzswQkFpQjFCLFdBQVcsU0FBQyx1QkFBdUIsY0FDbkMsS0FBSzswQkFJTCxXQUFXLFNBQUMsdUJBQXVCLGNBQ25DLEtBQUs7eUJBSUwsV0FBVyxTQUFDLGtCQUFrQjt1QkFFOUIsV0FBVyxTQUFDLHNCQUFzQjt5QkFFbEMsU0FBUyxTQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7MEJBRXhDLFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzRCQUV6QyxTQUFTLFNBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtxQkFFM0MsS0FBSztxQkFFTCxLQUFLO3NCQUVMLEtBQUs7c0JBRUwsS0FBSzt1QkFJTCxLQUFLOzZCQUVMLE1BQU07O0FBN0JQO0lBREMsWUFBWSxFQUFFOzt1REFDSztBQUtwQjtJQURDLFlBQVksRUFBRTs7dURBQ0siLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBPbkluaXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uRGVzdHJveSxcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIFNpbXBsZUNoYW5nZXMsXG4gICAgZm9yd2FyZFJlZixcbiAgICBJbnB1dCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgVmlld0NoaWxkLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgT3V0cHV0LFxuICAgIE5nWm9uZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5pbXBvcnQgeyB0YXAsIHBsdWNrLCBtYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuaW1wb3J0IHsgVXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5cbmV4cG9ydCB0eXBlIFRoeVNsaWRlclR5cGUgPSAncHJpbWFyeScgfCAnc3VjY2VzcycgfCAnaW5mbycgfCAnd2FybmluZycgfCAnZGFuZ2VyJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktc2xpZGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2xpZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaHlTbGlkZXJDb21wb25lbnQpLFxuICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgVXBkYXRlSG9zdENsYXNzU2VydmljZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgVGh5U2xpZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIEBIb3N0QmluZGluZygnY2xhc3Muc2xpZGVyLXZlcnRpY2FsJylcbiAgICBASW5wdXQoKVxuICAgIEBJbnB1dEJvb2xlYW4oKVxuICAgIHRoeVZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNsaWRlci1kaXNhYmxlZCcpXG4gICAgQElucHV0KClcbiAgICBASW5wdXRCb29sZWFuKClcbiAgICB0aHlEaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktc2xpZGVyJykgX3RoeVNsaWRlciA9IHRydWU7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmN1cnNvci1wb2ludGVyJykgX3BvaW50ZXIgPSB0cnVlO1xuXG4gICAgQFZpZXdDaGlsZCgnc2xpZGVyUmFpbCcsIHsgc3RhdGljOiB0cnVlIH0pIHNsaWRlclJhaWw6IEVsZW1lbnRSZWY7XG5cbiAgICBAVmlld0NoaWxkKCdzbGlkZXJUcmFjaycsIHsgc3RhdGljOiB0cnVlIH0pIHNsaWRlclRyYWNrOiBFbGVtZW50UmVmO1xuXG4gICAgQFZpZXdDaGlsZCgnc2xpZGVyUG9pbnRlcicsIHsgc3RhdGljOiB0cnVlIH0pIHNsaWRlclBvaW50ZXI6IEVsZW1lbnRSZWY7XG5cbiAgICBASW5wdXQoKSB0aHlNYXggPSAxMDA7XG5cbiAgICBASW5wdXQoKSB0aHlNaW4gPSAwO1xuXG4gICAgQElucHV0KCkgdGh5U3RlcCA9IDE7XG5cbiAgICBASW5wdXQoKSBzZXQgdGh5VHlwZSh0eXBlOiBUaHlTbGlkZXJUeXBlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVDbGFzcyh0eXBlID8gW2B0aHktc2xpZGVyLSR7dHlwZX1gXSA6IFtdKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKSB0aHlDb2xvcjogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpIHRoeUFmdGVyQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjx7IHZhbHVlOiBudW1iZXIgfT4oKTtcblxuICAgIHB1YmxpYyB2YWx1ZTogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBkcmFnU3RhcnRMaXN0ZW5lcjogT2JzZXJ2YWJsZTxudW1iZXI+O1xuXG4gICAgcHJpdmF0ZSBkcmFnTW92ZUxpc3RlbmVyOiBPYnNlcnZhYmxlPG51bWJlcj47XG5cbiAgICBwcml2YXRlIGRyYWdFbmRMaXN0ZW5lcjogT2JzZXJ2YWJsZTxFdmVudD47XG5cbiAgICBwcml2YXRlIGRyYWdTdGFydEhhbmRsZXI6IFN1YnNjcmlwdGlvbiB8IG51bGw7XG5cbiAgICBwcml2YXRlIGRyYWdNb3ZlSGFuZGxlcjogU3Vic2NyaXB0aW9uIHwgbnVsbDtcblxuICAgIHByaXZhdGUgZHJhZ0VuZEhhbmRsZXI6IFN1YnNjcmlwdGlvbiB8IG51bGw7XG5cbiAgICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2sgPSAodjogYW55KSA9PiB7fTtcblxuICAgIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2sgPSAodjogYW55KSA9PiB7fTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIHByaXZhdGUgcmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2VcbiAgICApIHtcbiAgICAgICAgdXBkYXRlSG9zdENsYXNzU2VydmljZS5pbml0aWFsaXplRWxlbWVudChyZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudmVyaWZpY2F0aW9uVmFsdWVzKCk7XG4gICAgICAgIHRoaXMudmVyaWZpY2F0aW9uU3RlcFZhbHVlKCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRGlzYWJsZWQoKTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IG51bGwgfHwgdGhpcy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuZW5zdXJlVmFsdWVJblJhbmdlKG51bGwpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZWdpc3Rlck1vdXNlRXZlbnRzTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRGlzYWJsZWQoKTtcbiAgICB9XG5cbiAgICB3cml0ZVZhbHVlKG5ld1ZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmVuc3VyZVZhbHVlSW5SYW5nZShuZXdWYWx1ZSkpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBmbjtcbiAgICB9XG5cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KSB7XG4gICAgICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLmhhc093blByb3BlcnR5KCd0aHlNaW4nKSB8fCBjaGFuZ2VzLmhhc093blByb3BlcnR5KCd0aHlNYXgnKSB8fCBjaGFuZ2VzLmhhc093blByb3BlcnR5KCd0aHlTdGVwJykpIHtcbiAgICAgICAgICAgIHRoaXMudmVyaWZpY2F0aW9uVmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLnZlcmlmaWNhdGlvblN0ZXBWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVNb3VzZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdmVyaWZpY2F0aW9uVmFsdWVzKCkge1xuICAgICAgICBpZiAodGhpcy50aHlNaW4gPj0gdGhpcy50aHlNYXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWluIHZhbHVlIG11c3QgbGVzcyB0aGFuIG1heCB2YWx1ZS4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdmVyaWZpY2F0aW9uU3RlcFZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy50aHlTdGVwIDw9IDAgfHwgISEhdGhpcy50aHlTdGVwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0ZXAgdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMC4nKTtcbiAgICAgICAgfSBlbHNlIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHRoaXMudGh5U3RlcCkgJiYgKHRoaXMudGh5TWF4IC0gdGhpcy50aHlNaW4pICUgdGhpcy50aHlTdGVwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJyhtYXggLSBtaW4pIG11c3QgYmUgZGl2aXNpYmxlIGJ5IHN0ZXAuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvZ2dsZURpc2FibGVkKCkge1xuICAgICAgICBpZiAodGhpcy50aHlEaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZU1vdXNlTGlzdGVuZXJzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZU1vdXNlTGlzdGVuZXJzKFsnc3RhcnQnXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRyYWNrQW5kUG9pbnRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayh0aGlzLnZhbHVlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGVuc3VyZVZhbHVlSW5SYW5nZSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlTXVzdEJlVmFsaWQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aHlNaW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsYW1wKHZhbHVlLCB0aGlzLnRoeU1pbiwgdGhpcy50aHlNYXgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdmFsdWVNdXN0QmVWYWxpZCh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhaXNOYU4odHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyA/IHBhcnNlRmxvYXQodmFsdWUpIDogdmFsdWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlVHJhY2tBbmRQb2ludGVyKCkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnZhbHVlVG9PZmZzZXQodGhpcy52YWx1ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlU3R5bGUob2Zmc2V0IC8gMTAwKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2YWx1ZVRvT2Zmc2V0KHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKCh2YWx1ZSAtIHRoaXMudGh5TWluKSAqIDEwMCkgLyAodGhpcy50aHlNYXggLSB0aGlzLnRoeU1pbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVTdHlsZShvZmZzZXRQZXJjZW50YWdlOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIG9mZnNldFBlcmNlbnRhZ2UpKTtcbiAgICAgICAgY29uc3Qgb3JpZW50RmllbGRzOiBzdHJpbmdbXSA9IHRoaXMudGh5VmVydGljYWwgPyBbJ2hlaWdodCcsICdib3R0b20nXSA6IFsnd2lkdGgnLCAnbGVmdCddO1xuICAgICAgICB0aGlzLnNsaWRlclRyYWNrLm5hdGl2ZUVsZW1lbnQuc3R5bGVbb3JpZW50RmllbGRzWzBdXSA9IGAke3BlcmNlbnRhZ2UgKiAxMDB9JWA7XG4gICAgICAgIHRoaXMuc2xpZGVyUG9pbnRlci5uYXRpdmVFbGVtZW50LnN0eWxlW29yaWVudEZpZWxkc1sxXV0gPSBgJHtwZXJjZW50YWdlICogMTAwfSVgO1xuICAgIH1cblxuICAgIHByaXZhdGUgdW5zdWJzY3JpYmVNb3VzZUxpc3RlbmVycyhhY3Rpb25zOiBzdHJpbmdbXSA9IFsnc3RhcnQnLCAnbW92ZScsICdlbmQnXSkge1xuICAgICAgICBpZiAoYWN0aW9ucy5pbmNsdWRlcygnc3RhcnQnKSAmJiB0aGlzLmRyYWdTdGFydEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhZ1N0YXJ0SGFuZGxlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9ucy5pbmNsdWRlcygnbW92ZScpICYmIHRoaXMuZHJhZ01vdmVIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdNb3ZlSGFuZGxlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5kcmFnTW92ZUhhbmRsZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb25zLmluY2x1ZGVzKCdlbmQnKSAmJiB0aGlzLmRyYWdFbmRIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdFbmRIYW5kbGVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmRyYWdFbmRIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3Vic2NyaWJlTW91c2VMaXN0ZW5lcnMoYWN0aW9uczogc3RyaW5nW10gPSBbJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJ10pIHtcbiAgICAgICAgaWYgKGFjdGlvbnMuaW5jbHVkZXMoJ3N0YXJ0JykgJiYgdGhpcy5kcmFnU3RhcnRMaXN0ZW5lciAmJiAhdGhpcy5kcmFnU3RhcnRIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdTdGFydEhhbmRsZXIgPSB0aGlzLmRyYWdTdGFydExpc3RlbmVyLnN1YnNjcmliZSh0aGlzLm1vdXNlU3RhcnRNb3ZpbmcuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9ucy5pbmNsdWRlcygnbW92ZScpICYmIHRoaXMuZHJhZ01vdmVMaXN0ZW5lciAmJiAhdGhpcy5kcmFnTW92ZUhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhZ01vdmVIYW5kbGVyID0gdGhpcy5kcmFnTW92ZUxpc3RlbmVyLnN1YnNjcmliZSh0aGlzLm1vdXNlTW92aW5nLmJpbmQodGhpcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbnMuaW5jbHVkZXMoJ2VuZCcpICYmIHRoaXMuZHJhZ0VuZExpc3RlbmVyICYmICF0aGlzLmRyYWdFbmRIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdFbmRIYW5kbGVyID0gdGhpcy5kcmFnRW5kTGlzdGVuZXIuc3Vic2NyaWJlKHRoaXMubW91c2VTdG9wTW92aW5nLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtb3VzZVN0YXJ0TW92aW5nKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wb2ludGVyQ29udHJvbGxlcih0cnVlKTtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtb3VzZU1vdmluZyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5lbnN1cmVWYWx1ZUluUmFuZ2UodmFsdWUpKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtb3VzZVN0b3BNb3ZpbmcoKTogdm9pZCB7XG4gICAgICAgIHRoaXMucG9pbnRlckNvbnRyb2xsZXIoZmFsc2UpO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgdGhpcy50aHlBZnRlckNoYW5nZS5lbWl0KHsgdmFsdWU6IHRoaXMudmFsdWUgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwb2ludGVyQ29udHJvbGxlcihtb3ZhYmxlOiBib29sZWFuKSB7XG4gICAgICAgIGlmIChtb3ZhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZU1vdXNlTGlzdGVuZXJzKFsnbW92ZScsICdlbmQnXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlTW91c2VMaXN0ZW5lcnMoWydtb3ZlJywgJ2VuZCddKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIHJlZ2lzdGVyTW91c2VFdmVudHNMaXN0ZW5lcnMoKSB7XG4gICAgICAgIGNvbnN0IG9yaWVudEZpZWxkID0gdGhpcy50aHlWZXJ0aWNhbCA/ICdwYWdlWScgOiAncGFnZVgnO1xuXG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0TGlzdGVuZXIgPSB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUV2ZW50KHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWRvd24nKS5waXBlKFxuICAgICAgICAgICAgICAgIHRhcCgoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHBsdWNrPEV2ZW50LCBudW1iZXI+KG9yaWVudEZpZWxkKSxcbiAgICAgICAgICAgICAgICBtYXAoKHBvc2l0aW9uOiBudW1iZXIpID0+IHRoaXMubW91c2VQb3NpdGlvblRvQWRhcHRpdmVWYWx1ZShwb3NpdGlvbikpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRyYWdFbmRMaXN0ZW5lciA9IHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZXVwJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZHJhZ01vdmVMaXN0ZW5lciA9IHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZW1vdmUnKS5waXBlKFxuICAgICAgICAgICAgICAgIHRhcCgoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHBsdWNrPEV2ZW50LCBudW1iZXI+KG9yaWVudEZpZWxkKSxcbiAgICAgICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICAgICAgICAgIG1hcCgocG9zaXRpb246IG51bWJlcikgPT4gdGhpcy5tb3VzZVBvc2l0aW9uVG9BZGFwdGl2ZVZhbHVlKHBvc2l0aW9uKSksXG4gICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kcmFnRW5kTGlzdGVuZXIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1vdXNlUG9zaXRpb25Ub0FkYXB0aXZlVmFsdWUocG9zaXRpb246IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHNsaWRlclN0YXJ0UG9zaXRpb24gPSB0aGlzLmdldFNsaWRlclBhZ2VQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBzbGlkZXJMZW5ndGggPSB0aGlzLmdldFJhaWxMZW5ndGgoKTtcbiAgICAgICAgY29uc3QgcmF0aW8gPSB0aGlzLmNvbnZlcnRQb2ludGVyUG9zaXRpb25Ub1JhdGlvKHBvc2l0aW9uLCBzbGlkZXJTdGFydFBvc2l0aW9uLCBzbGlkZXJMZW5ndGgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMucmF0aW9Ub1ZhbHVlKHJhdGlvKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUudG9GaXhlZCh0aGlzLmdldERlY2ltYWxzKHRoaXMudGh5U3RlcCkpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNsaWRlclBhZ2VQb3NpdGlvbigpOiBudW1iZXIge1xuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5yZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3Qgd2luZG93ID0gdGhpcy5yZWYubmF0aXZlRWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgICAgICBjb25zdCBvcmllbnRGaWVsZHM6IHN0cmluZ1tdID0gdGhpcy50aHlWZXJ0aWNhbCA/IFsnYm90dG9tJywgJ3BhZ2VZT2Zmc2V0J10gOiBbJ2xlZnQnLCAncGFnZVhPZmZzZXQnXTtcbiAgICAgICAgcmV0dXJuIHJlY3Rbb3JpZW50RmllbGRzWzBdXSArIHdpbmRvd1tvcmllbnRGaWVsZHNbMV1dO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmFpbExlbmd0aCgpIHtcbiAgICAgICAgY29uc3Qgb3JpZW50RmlsZWQgPSB0aGlzLnRoeVZlcnRpY2FsID8gJ2NsaWVudEhlaWdodCcgOiAnY2xpZW50V2lkdGgnO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNsaWRlclJhaWwubmF0aXZlRWxlbWVudFtvcmllbnRGaWxlZF07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb252ZXJ0UG9pbnRlclBvc2l0aW9uVG9SYXRpbyhwb2ludGVyUG9zaXRpb246IG51bWJlciwgc3RhcnRQb3NpdGlvbjogbnVtYmVyLCB0b3RhbExlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLnRoeVZlcnRpY2FsKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xhbXAoKHN0YXJ0UG9zaXRpb24gLSBwb2ludGVyUG9zaXRpb24pIC8gdG90YWxMZW5ndGgsIDAsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGFtcCgocG9pbnRlclBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbikgLyB0b3RhbExlbmd0aCwgMCwgMSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByYXRpb1RvVmFsdWUocmF0aW86IG51bWJlcikge1xuICAgICAgICBsZXQgdmFsdWUgPSAodGhpcy50aHlNYXggLSB0aGlzLnRoeU1pbikgKiByYXRpbyArIHRoaXMudGh5TWluO1xuICAgICAgICBjb25zdCBzdGVwID0gdGhpcy50aHlTdGVwO1xuICAgICAgICBpZiAocmF0aW8gPT09IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy50aHlNaW47XG4gICAgICAgIH0gZWxzZSBpZiAocmF0aW8gPT09IDEpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy50aHlNYXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsYW1wKHZhbHVlLCB0aGlzLnRoeU1pbiwgdGhpcy50aHlNYXgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RGVjaW1hbHModmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHZhbHVlU3RyaW5nID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgaW50ZWdlckxlbmd0aCA9IHZhbHVlU3RyaW5nLmluZGV4T2YoJy4nKSArIDE7XG4gICAgICAgIHJldHVybiBpbnRlZ2VyTGVuZ3RoID49IDAgPyB2YWx1ZVN0cmluZy5sZW5ndGggLSBpbnRlZ2VyTGVuZ3RoIDogMDtcbiAgICB9XG59XG4iXX0=
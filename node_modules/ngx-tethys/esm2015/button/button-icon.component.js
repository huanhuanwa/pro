import { Component, HostBinding, Input, ElementRef, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { UpdateHostClassService } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/icon';

const _c0 = ["thy-button-icon", ""];
function ThyButtonIconComponent_thy_icon_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("color", ctx_r0.thyColor)("border-color", ctx_r0.thyColor);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r0.svgIconName);
} }
function ThyButtonIconComponent_ng_template_1_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 4);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("color", ctx_r3.thyColor)("border-color", ctx_r3.thyColor);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.iconClasses);
} }
function ThyButtonIconComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyButtonIconComponent_ng_template_1_i_0_Template, 1, 5, "i", 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.iconClasses);
} }
const _c1 = ["*"];
const sizeClassesMap = {
    lg: ['btn-icon-lg'],
    sm: ['btn-icon-sm'],
    xs: ['btn-icon-xs']
};
const shapeClassesMap = {
    'circle-dashed': ['btn-icon-circle', 'circle-dashed'],
    'circle-solid': ['btn-icon-circle', 'circle-solid'],
    'circle-thick-dashed': ['btn-icon-circle', 'circle-dashed', 'border-thick'],
    'circle-thick-solid': ['btn-icon-circle', 'circle-solid', 'border-thick'],
    'self-icon': ['btn-icon-self-circle']
};
const themeClassesMap = {
    'danger-weak': ['btn-icon-danger-weak']
};
export class ThyButtonIconComponent {
    constructor(elementRef, updateHostClassService) {
        this.updateHostClassService = updateHostClassService;
        this.initialized = false;
        this.iconPrefix = 'wtf';
        this._isBtn = true;
        this._isBtnIcon = true;
        this._isLighted = false;
        this._isActive = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        this.size = size;
        this.setClasses();
    }
    // 字体前缀，默认 wtf
    set thyIcon(icon) {
        this.setIconClass(icon);
    }
    set thyButtonIcon(icon) {
        this.setIconClass(icon);
    }
    set thyShape(value) {
        this.shape = value;
        this.setClasses();
    }
    set thyLight(value) {
        this._isLighted = coerceBooleanProperty(value);
    }
    set thyActive(value) {
        this._isActive = coerceBooleanProperty(value);
    }
    set thyTheme(value) {
        this.theme = value;
        this.setClasses();
    }
    setIconClass(icon) {
        if (icon) {
            if (icon.includes('wtf')) {
                const classes = icon.split(' ');
                if (classes.length === 1) {
                    classes.unshift('wtf');
                }
                this.iconClasses = classes;
                this.svgIconName = null;
            }
            else {
                this.svgIconName = icon;
            }
        }
        else {
            this.iconClasses = null;
            this.svgIconName = null;
        }
    }
    setClasses(first = false) {
        // 设置样式判断是否已经初始化，未初始化直接返回，除非是初次调用
        // 只有 ngOnInit 调用会传入 first = true
        if (!first && !this.initialized) {
            return;
        }
        const classes = sizeClassesMap[this.size] ? [...sizeClassesMap[this.size]] : [];
        if (this.shape && shapeClassesMap[this.shape]) {
            shapeClassesMap[this.shape].forEach((className) => {
                classes.push(className);
            });
        }
        if (this.theme && themeClassesMap[this.theme]) {
            themeClassesMap[this.theme].forEach((className) => {
                classes.push(className);
            });
        }
        this.updateHostClassService.updateClass(classes);
    }
    ngOnInit() {
        this.setClasses(true);
        this.initialized = true;
    }
}
ThyButtonIconComponent.ɵfac = function ThyButtonIconComponent_Factory(t) { return new (t || ThyButtonIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService)); };
ThyButtonIconComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyButtonIconComponent, selectors: [["", "thy-button-icon", ""], ["", "thyButtonIcon", ""]], hostVars: 8, hostBindings: function ThyButtonIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("btn", ctx._isBtn)("btn-icon", ctx._isBtnIcon)("btn-icon-light", ctx._isLighted)("btn-icon-active", ctx._isActive);
    } }, inputs: { thySize: "thySize", thyIcon: "thyIcon", thyButtonIcon: "thyButtonIcon", thyShape: "thyShape", thyLight: "thyLight", thyActive: "thyActive", thyTheme: "thyTheme", thyColor: "thyColor" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[3, "thyIconName", "color", "borderColor", 4, "ngIf", "ngIfElse"], ["iconFont", ""], [3, "thyIconName"], [3, "ngClass", "color", "borderColor", 4, "ngIf"], [3, "ngClass"]], template: function ThyButtonIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyButtonIconComponent_thy_icon_0_Template, 1, 5, "thy-icon", 0);
        ɵngcc0.ɵɵtemplate(1, ThyButtonIconComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵprojection(3);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.svgIconName)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ThyIconComponent, ɵngcc2.NgClass], encapsulation: 2, changeDetection: 0 });
ThyButtonIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThyButtonIconComponent.propDecorators = {
    thySize: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thyButtonIcon: [{ type: Input }],
    thyShape: [{ type: Input }],
    thyLight: [{ type: Input }],
    thyActive: [{ type: Input }],
    thyTheme: [{ type: Input }],
    _isBtn: [{ type: HostBinding, args: ['class.btn',] }],
    _isBtnIcon: [{ type: HostBinding, args: ['class.btn-icon',] }],
    _isLighted: [{ type: HostBinding, args: ['class.btn-icon-light',] }],
    _isActive: [{ type: HostBinding, args: ['class.btn-icon-active',] }],
    thyColor: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyButtonIconComponent, [{
        type: Component,
        args: [{
                selector: '[thy-button-icon],[thyButtonIcon]',
                template: "<thy-icon\n  *ngIf=\"svgIconName; else iconFont\"\n  [thyIconName]=\"svgIconName\"\n  [style.color]=\"thyColor\"\n  [style.borderColor]=\"thyColor\"\n></thy-icon>\n<ng-template #iconFont>\n  <i [ngClass]=\"iconClasses\" *ngIf=\"iconClasses\" [style.color]=\"thyColor\" [style.borderColor]=\"thyColor\"></i>\n</ng-template>\n<ng-content></ng-content>\n",
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.UpdateHostClassService }]; }, { _isBtn: [{
            type: HostBinding,
            args: ['class.btn']
        }], _isBtnIcon: [{
            type: HostBinding,
            args: ['class.btn-icon']
        }], _isLighted: [{
            type: HostBinding,
            args: ['class.btn-icon-light']
        }], _isActive: [{
            type: HostBinding,
            args: ['class.btn-icon-active']
        }], thySize: [{
            type: Input
        }], thyIcon: [{
            type: Input
        }], thyButtonIcon: [{
            type: Input
        }], thyShape: [{
            type: Input
        }], thyLight: [{
            type: Input
        }], thyActive: [{
            type: Input
        }], thyTheme: [{
            type: Input
        }], thyColor: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWljb24uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnV0dG9uL2J1dHRvbi1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFhLFdBQVcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFhLGlCQUFpQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVJLE9BQU8sRUFBRSxxQkFBcUIsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSXpELE1BQU0sY0FBYyxHQUFRO0FBQzVCLElBQUksRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDO0FBQ3ZCLElBQUksRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDO0FBQ3ZCLElBQUksRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUFRO0FBQzdCLElBQUksZUFBZSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxDQUFDO0FBQ3pELElBQUksY0FBYyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsY0FBYyxDQUFDO0FBQ3ZELElBQUkscUJBQXFCLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsY0FBYyxDQUFDO0FBQy9FLElBQUksb0JBQW9CLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsY0FBYyxDQUFDO0FBQzdFLElBQUksV0FBVyxFQUFFLENBQUMsc0JBQXNCLENBQUM7QUFDekMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQVE7QUFDN0IsSUFBSSxhQUFhLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztBQUMzQyxDQUFDLENBQUM7QUFTRixNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUF3Q2xDLFlBQVksVUFBc0IsRUFBVSxz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LENBQUMsa0JBQ25DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQztFQUFJLGtCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxjQUNsRDs7Ozs7Ozs7cUhBQ0k7QUFBQztBQUFnRCxZQWhDSCxVQUFVO0FBQUksWUFHeEQsc0JBQXNCO0FBQUc7QUFBRztBQUVqQixzQkE0QmYsS0FBSztBQUNSLHNCQU1HLEtBQUs7QUFDUiw0QkFJRyxLQUFLO0FBQ1IsdUJBSUcsS0FBSztBQUNSLHVCQUtHLEtBQUs7QUFDUix3QkFJRyxLQUFLO0FBQ1IsdUJBSUcsS0FBSztBQUNSLHFCQXdCRyxXQUFXLFNBQUMsV0FBVztBQUFPLHlCQUM5QixXQUFXLFNBQUMsZ0JBQWdCO0FBQU8seUJBQ25DLFdBQVcsU0FBQyxzQkFBc0I7QUFBTyx3QkFDekMsV0FBVyxTQUFDLHVCQUF1QjtBQUFPLHVCQUUxQyxLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIFZpZXdFbmNhcHN1bGF0aW9uLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgT25DaGFuZ2VzLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSwgaXNVbmRlZmluZWQgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuaW1wb3J0IHsgVXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5cbmV4cG9ydCB0eXBlIEljb25TaGFwZSA9ICcnIHwgJ2Rhc2hlZCcgfCAnc29saWQnO1xuXG5jb25zdCBzaXplQ2xhc3Nlc01hcDogYW55ID0ge1xuICAgIGxnOiBbJ2J0bi1pY29uLWxnJ10sXG4gICAgc206IFsnYnRuLWljb24tc20nXSxcbiAgICB4czogWydidG4taWNvbi14cyddXG59O1xuXG5jb25zdCBzaGFwZUNsYXNzZXNNYXA6IGFueSA9IHtcbiAgICAnY2lyY2xlLWRhc2hlZCc6IFsnYnRuLWljb24tY2lyY2xlJywgJ2NpcmNsZS1kYXNoZWQnXSxcbiAgICAnY2lyY2xlLXNvbGlkJzogWydidG4taWNvbi1jaXJjbGUnLCAnY2lyY2xlLXNvbGlkJ10sXG4gICAgJ2NpcmNsZS10aGljay1kYXNoZWQnOiBbJ2J0bi1pY29uLWNpcmNsZScsICdjaXJjbGUtZGFzaGVkJywgJ2JvcmRlci10aGljayddLFxuICAgICdjaXJjbGUtdGhpY2stc29saWQnOiBbJ2J0bi1pY29uLWNpcmNsZScsICdjaXJjbGUtc29saWQnLCAnYm9yZGVyLXRoaWNrJ10sXG4gICAgJ3NlbGYtaWNvbic6IFsnYnRuLWljb24tc2VsZi1jaXJjbGUnXVxufTtcblxuY29uc3QgdGhlbWVDbGFzc2VzTWFwOiBhbnkgPSB7XG4gICAgJ2Rhbmdlci13ZWFrJzogWydidG4taWNvbi1kYW5nZXItd2VhayddXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1t0aHktYnV0dG9uLWljb25dLFt0aHlCdXR0b25JY29uXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2J1dHRvbi1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgICBwcm92aWRlcnM6IFtVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFRoeUJ1dHRvbkljb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVNpemUoc2l6ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMuc2V0Q2xhc3NlcygpO1xuICAgIH1cblxuICAgIC8vIOWtl+S9k+WJjee8gO+8jOm7mOiupCB3dGZcbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlJY29uKGljb246IHN0cmluZykge1xuICAgICAgICB0aGlzLnNldEljb25DbGFzcyhpY29uKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlCdXR0b25JY29uKGljb246IHN0cmluZykge1xuICAgICAgICB0aGlzLnNldEljb25DbGFzcyhpY29uKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlTaGFwZSh2YWx1ZTogSWNvblNoYXBlKSB7XG4gICAgICAgIHRoaXMuc2hhcGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zZXRDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5TGlnaHQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNMaWdodGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlBY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNBY3RpdmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVRoZW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50aGVtZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnNldENsYXNzZXMoKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLmluaXRpYWxpemVFbGVtZW50KGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgc2hhcGU6IEljb25TaGFwZTtcblxuICAgIHByaXZhdGUgc2l6ZTogc3RyaW5nO1xuXG4gICAgaWNvblByZWZpeCA9ICd3dGYnO1xuXG4gICAgaWNvbkNsYXNzZXM6IHN0cmluZ1tdO1xuXG4gICAgaWNvbjogc3RyaW5nO1xuXG4gICAgdGhlbWU6IHN0cmluZztcblxuICAgIHN2Z0ljb25OYW1lOiBzdHJpbmc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmJ0bicpIF9pc0J0biA9IHRydWU7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5idG4taWNvbicpIF9pc0J0bkljb24gPSB0cnVlO1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuYnRuLWljb24tbGlnaHQnKSBfaXNMaWdodGVkID0gZmFsc2U7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5idG4taWNvbi1hY3RpdmUnKSBfaXNBY3RpdmUgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpIHRoeUNvbG9yOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIHNldEljb25DbGFzcyhpY29uOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGljb24pIHtcbiAgICAgICAgICAgIGlmIChpY29uLmluY2x1ZGVzKCd3dGYnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzZXMgPSBpY29uLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMudW5zaGlmdCgnd3RmJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaWNvbkNsYXNzZXMgPSBjbGFzc2VzO1xuICAgICAgICAgICAgICAgIHRoaXMuc3ZnSWNvbk5hbWUgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN2Z0ljb25OYW1lID0gaWNvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaWNvbkNsYXNzZXMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zdmdJY29uTmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldENsYXNzZXMoZmlyc3QgPSBmYWxzZSkge1xuICAgICAgICAvLyDorr7nva7moLflvI/liKTmlq3mmK/lkKblt7Lnu4/liJ3lp4vljJbvvIzmnKrliJ3lp4vljJbnm7TmjqXov5Tlm57vvIzpmaTpnZ7mmK/liJ3mrKHosIPnlKhcbiAgICAgICAgLy8g5Y+q5pyJIG5nT25Jbml0IOiwg+eUqOS8muS8oOWFpSBmaXJzdCA9IHRydWVcbiAgICAgICAgaWYgKCFmaXJzdCAmJiAhdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSBzaXplQ2xhc3Nlc01hcFt0aGlzLnNpemVdID8gWy4uLnNpemVDbGFzc2VzTWFwW3RoaXMuc2l6ZV1dIDogW107XG4gICAgICAgIGlmICh0aGlzLnNoYXBlICYmIHNoYXBlQ2xhc3Nlc01hcFt0aGlzLnNoYXBlXSkge1xuICAgICAgICAgICAgc2hhcGVDbGFzc2VzTWFwW3RoaXMuc2hhcGVdLmZvckVhY2goKGNsYXNzTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50aGVtZSAmJiB0aGVtZUNsYXNzZXNNYXBbdGhpcy50aGVtZV0pIHtcbiAgICAgICAgICAgIHRoZW1lQ2xhc3Nlc01hcFt0aGlzLnRoZW1lXS5mb3JFYWNoKChjbGFzc05hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaChjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUNsYXNzKGNsYXNzZXMpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnNldENsYXNzZXModHJ1ZSk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cbn1cbiJdfQ==
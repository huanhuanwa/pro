import { Component, Input, ElementRef, Renderer2, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { UpdateHostClassService } from 'ngx-tethys/core';
const btnTypeClassesMap = {
    primary: ['btn', 'btn-primary'],
    secondary: ['btn', 'btn-primary', 'btn-md'],
    info: ['btn', 'btn-info'],
    warning: ['btn', 'btn-warning'],
    danger: ['btn', 'btn-danger'],
    'outline-primary': ['btn', 'btn-outline-primary'],
    'outline-default': ['btn', 'btn-outline-default'],
    link: ['btn', 'btn-link'],
    'link-info': ['btn', 'btn-link', 'btn-link-info'],
    'link-secondary': ['btn', 'btn-link', 'btn-link-primary-weak'],
    'link-danger-weak': ['btn', 'btn-link', 'btn-link-danger-weak'],
    'link-danger': ['btn', 'btn-link', 'btn-link-danger'],
    'link-success': ['btn', 'btn-link', 'btn-link-success'] // 成功按钮
};
export class ThyButtonComponent {
    constructor(elementRef, renderer, updateHostClassService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.updateHostClassService = updateHostClassService;
        this._initialized = false;
        // 圆角方形
        this._isRadiusSquare = false;
        this._nativeElement = this.elementRef.nativeElement;
        this.updateHostClassService.initializeElement(this._nativeElement);
    }
    _setBtnType(value) {
        if (value) {
            if (value.includes('-square')) {
                this._type = value.replace('-square', '');
                this._isRadiusSquare = true;
            }
            else {
                this._type = value;
            }
            if (this._initialized) {
                this._setClasses();
            }
        }
    }
    set thyButton(value) {
        this._setBtnType(value);
    }
    set thyType(value) {
        this._setBtnType(value);
    }
    set thyLoading(value) {
        const newLoading = coerceBooleanProperty(value);
        // from false to true
        if (!this._loading && newLoading) {
            this._loading = newLoading;
            this._originalText = this._nativeElement.innerText;
            this._setLoadingStatus();
        }
        else {
            this._loading = newLoading;
            this._setLoadingStatus();
        }
    }
    set thyLoadingText(value) {
        if (this._loadingText !== value) {
            this._loadingText = value;
            if (this._loading) {
                this.renderer.setProperty(this._nativeElement, 'innerText', this._loadingText);
            }
        }
    }
    set thySize(size) {
        this._size = size;
        if (this._initialized) {
            this._setClasses();
        }
    }
    set thyIcon(icon) {
        this._icon = icon;
        if (this._icon) {
            if (icon.includes('wtf')) {
                const classes = this._icon.split(' ');
                if (classes.length === 1) {
                    classes.unshift('wtf');
                }
                this._iconClass = classes;
            }
            else {
                this.svgIconName = icon;
            }
        }
        else {
            this._iconClass = null;
            this.svgIconName = null;
        }
    }
    set thySquare(value) {
        this._isRadiusSquare = coerceBooleanProperty(value);
    }
    _setLoadingStatus() {
        // let disabled = false;
        let innerText;
        if (this._loading) {
            // disabled = true;
            innerText = this._loadingText ? this._loadingText : null;
        }
        else {
            // disabled = false;
            innerText = this._originalText ? this._originalText : null;
        }
        // this.renderer.setProperty(this._nativeElement, 'disabled', disabled);
        this._setClasses();
        if (innerText) {
            this.renderer.setProperty(this._nativeElement, 'innerText', innerText);
        }
    }
    _setClasses() {
        let classNames = null;
        if (btnTypeClassesMap[this._type]) {
            classNames = [...btnTypeClassesMap[this._type]];
        }
        else {
            classNames = ['btn'];
            if (this._type) {
                classNames.push(`btn-${this._type}`);
            }
            // console.error(`button type (${this._type}) is not support`);
        }
        if (this._size) {
            classNames.push(`btn-${this._size}`);
        }
        if (this._icon) {
            classNames.push('btn-has-icon');
        }
        if (this._isRadiusSquare) {
            classNames.push('btn-square');
        }
        if (this._loading) {
            classNames.push('loading');
        }
        this.updateHostClassService.updateClass(classNames);
    }
    ngOnInit() {
        this._setClasses();
        this._initialized = true;
    }
}
ThyButtonComponent.decorators = [
    { type: Component, args: [{
                selector: '[thy-button],[thyButton]',
                template: "<thy-icon *ngIf=\"svgIconName; else iconFont\" [thyIconName]=\"svgIconName\"></thy-icon>\n<ng-template #iconFont>\n  <i [ngClass]=\"_iconClass\" *ngIf=\"_iconClass\"></i>\n</ng-template>\n<ng-content></ng-content>\n",
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyButtonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: UpdateHostClassService }
];
ThyButtonComponent.propDecorators = {
    thyButton: [{ type: Input }],
    thyType: [{ type: Input }],
    thyLoading: [{ type: Input }],
    thyLoadingText: [{ type: Input }],
    thySize: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thySquare: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,
import { Component, HostBinding, Input, ElementRef, ViewEncapsulation } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';

const _c0 = ["*"];
const buttonGroupSizeMap = {
    sm: ['btn-group-sm'],
    md: ['btn-group-md'],
    lg: ['btn-group-lg'],
    xs: ['btn-group-xs']
};
const buttonGroupTypeMap = {
    'outline-primary': ['btn-group-outline-primary'],
    'outline-default': ['btn-group-outline-default']
};
export class ThyButtonGroupComponent {
    constructor(updateHostClassService, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.initialized = false;
        this._isButtonGroup = true;
        this.thyClearMinWidthClassName = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        this.size = size;
        if (this.initialized) {
            this.setClasses();
        }
    }
    set thyType(type) {
        this.type = type;
        if (this.initialized) {
            this.setClasses();
        }
    }
    set thyClearMinWidth(value) {
        this.thyClearMinWidthClassName = coerceBooleanProperty(value);
    }
    ngOnInit() {
        this.setClasses();
        this.initialized = true;
    }
    setClasses() {
        let classNames = [];
        if (buttonGroupTypeMap[this.type]) {
            classNames = [...buttonGroupTypeMap[this.type]];
        }
        if (buttonGroupSizeMap[this.size]) {
            classNames.push(buttonGroupSizeMap[this.size]);
        }
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyButtonGroupComponent.ɵfac = function ThyButtonGroupComponent_Factory(t) { return new (t || ThyButtonGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyButtonGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyButtonGroupComponent, selectors: [["thy-button-group"]], hostVars: 4, hostBindings: function ThyButtonGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("btn-group", ctx._isButtonGroup)("btn-group-clear-min-width", ctx.thyClearMinWidthClassName);
    } }, inputs: { thySize: "thySize", thyType: "thyType", thyClearMinWidth: "thyClearMinWidth" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyButtonGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyButtonGroupComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyButtonGroupComponent.propDecorators = {
    thySize: [{ type: Input }],
    thyType: [{ type: Input }],
    thyClearMinWidth: [{ type: Input }],
    _isButtonGroup: [{ type: HostBinding, args: ['class.btn-group',] }],
    thyClearMinWidthClassName: [{ type: HostBinding, args: [`class.btn-group-clear-min-width`,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyButtonGroupComponent, [{
        type: Component,
        args: [{
                selector: 'thy-button-group',
                template: '<ng-content></ng-content>',
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { _isButtonGroup: [{
            type: HostBinding,
            args: ['class.btn-group']
        }], thyClearMinWidthClassName: [{
            type: HostBinding,
            args: [`class.btn-group-clear-min-width`]
        }], thySize: [{
            type: Input
        }], thyType: [{
            type: Input
        }], thyClearMinWidth: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2J1dHRvbi9idXR0b24tZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBNkIsVUFBVSxFQUFFLGlCQUFpQixFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2hJLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7OztBQU14RCxNQUFNLGtCQUFrQixHQUFHO0FBQzNCLElBQUksRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDO0FBQ3hCLElBQUksRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDO0FBQ3hCLElBQUksRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDO0FBQ3hCLElBQUksRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUVGLE1BQU0sa0JBQWtCLEdBQUc7QUFDM0IsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLDJCQUEyQixDQUFDO0FBQ3BELElBQUksaUJBQWlCLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztBQUNwRCxDQUFDLENBQUM7QUFRRixNQUFNLE9BQU8sdUJBQXVCO0FBQUcsSUFnQ25DLFlBQW9CLHNCQUE4QyxFQUFVLFVBQXNCO0FBQ3RHLFFBRHdCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7QUFBQyxRQUFTLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQS9CM0YsZ0JBQVcsR0FBRyxLQUFLLENBQUM7QUFDaEMsUUEwQm9DLG1CQUFjLEdBQUcsSUFBSSxDQUFDO0FBQzFELFFBQ0ksOEJBQXlCLEdBQUcsS0FBSyxDQUFDO0FBQ3RDLFFBRVEsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoRixJQUFJLENBQUM7QUFDTCxJQTVCSSxJQUNJLE9BQU8sQ0FBQyxJQUFxQjtBQUNyQyxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLFFBQVEsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzlCLFlBQVksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzlCLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQ0ksT0FBTyxDQUFDLElBQW1CO0FBQ25DLFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDekIsUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDOUIsWUFBWSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDOUIsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksSUFDSSxnQkFBZ0IsQ0FBQyxLQUFhO0FBQ3RDLFFBQVEsSUFBSSxDQUFDLHlCQUF5QixHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RFLElBQUksQ0FBQztBQUNMLElBU0ksUUFBUTtBQUNaLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzFCLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDaEMsSUFBSSxDQUFDO0FBQ0wsSUFDWSxVQUFVO0FBQ3RCLFFBQVEsSUFBSSxVQUFVLEdBQWEsRUFBRSxDQUFDO0FBQ3RDLFFBQVEsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDM0MsWUFBWSxVQUFVLEdBQUcsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzVELFNBQVM7QUFDVCxRQUFRLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzNDLFlBQVksVUFBVSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMzRCxTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzVELElBQUksQ0FBQztBQUNMO21EQXpEQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLGtCQUFrQixrQkFDNUIsUUFBUSxFQUFFLDJCQUEyQixrQkFDckMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLENBQUM7Z0JBQ25DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLGNBQ3hDOzs7Ozs2QkFDSTtBQUFDO0FBQWlELFlBMUI5QyxzQkFBc0I7QUFBSSxZQURnQyxVQUFVO0FBQUc7QUFBRztBQUEyQyxzQkFrQ3pILEtBQUs7QUFDUixzQkFPRyxLQUFLO0FBQ1IsK0JBT0csS0FBSztBQUNSLDZCQUlHLFdBQVcsU0FBQyxpQkFBaUI7QUFBTyx3Q0FDcEMsV0FBVyxTQUFDLGlDQUFpQztBQUM5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBJbnB1dCwgQ29udGVudENoaWxkLCBUZW1wbGF0ZVJlZiwgRWxlbWVudFJlZiwgVmlld0VuY2Fwc3VsYXRpb24sIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5pbXBvcnQgeyBUaHlCdXR0b25UeXBlIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuXG5leHBvcnQgdHlwZSBidXR0b25Hcm91cFNpemUgPSAnc20nIHwgJ2xnJyB8ICd4cycgfCAnbWQnO1xuXG5leHBvcnQgdHlwZSBidXR0b25Hcm91cFR5cGUgPSAnb3V0bGluZS1wcmltYXJ5JyB8ICdvdXRsaW5lLWRlZmF1bHQnO1xuXG5jb25zdCBidXR0b25Hcm91cFNpemVNYXAgPSB7XG4gICAgc206IFsnYnRuLWdyb3VwLXNtJ10sXG4gICAgbWQ6IFsnYnRuLWdyb3VwLW1kJ10sXG4gICAgbGc6IFsnYnRuLWdyb3VwLWxnJ10sXG4gICAgeHM6IFsnYnRuLWdyb3VwLXhzJ11cbn07XG5cbmNvbnN0IGJ1dHRvbkdyb3VwVHlwZU1hcCA9IHtcbiAgICAnb3V0bGluZS1wcmltYXJ5JzogWydidG4tZ3JvdXAtb3V0bGluZS1wcmltYXJ5J10sXG4gICAgJ291dGxpbmUtZGVmYXVsdCc6IFsnYnRuLWdyb3VwLW91dGxpbmUtZGVmYXVsdCddXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1idXR0b24tZ3JvdXAnLFxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgcHJvdmlkZXJzOiBbVXBkYXRlSG9zdENsYXNzU2VydmljZV0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBUaHlCdXR0b25Hcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSB0eXBlOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIHNpemU6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVNpemUoc2l6ZTogYnV0dG9uR3JvdXBTaXplKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldENsYXNzZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVR5cGUodHlwZTogVGh5QnV0dG9uVHlwZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDbGFzc2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlDbGVhck1pbldpZHRoKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50aHlDbGVhck1pbldpZHRoQ2xhc3NOYW1lID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmJ0bi1ncm91cCcpIF9pc0J1dHRvbkdyb3VwID0gdHJ1ZTtcbiAgICBASG9zdEJpbmRpbmcoYGNsYXNzLmJ0bi1ncm91cC1jbGVhci1taW4td2lkdGhgKVxuICAgIHRoeUNsZWFyTWluV2lkdGhDbGFzc05hbWUgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogVXBkYXRlSG9zdENsYXNzU2VydmljZSwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS5pbml0aWFsaXplRWxlbWVudChlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnNldENsYXNzZXMoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRDbGFzc2VzKCkge1xuICAgICAgICBsZXQgY2xhc3NOYW1lczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgaWYgKGJ1dHRvbkdyb3VwVHlwZU1hcFt0aGlzLnR5cGVdKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzID0gWy4uLmJ1dHRvbkdyb3VwVHlwZU1hcFt0aGlzLnR5cGVdXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9uR3JvdXBTaXplTWFwW3RoaXMuc2l6ZV0pIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaChidXR0b25Hcm91cFNpemVNYXBbdGhpcy5zaXplXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUNsYXNzKGNsYXNzTmFtZXMpO1xuICAgIH1cbn1cbiJdfQ==
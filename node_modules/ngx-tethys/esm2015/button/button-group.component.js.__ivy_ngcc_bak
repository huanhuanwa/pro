import { Component, HostBinding, Input, ElementRef, ViewEncapsulation } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
const buttonGroupSizeMap = {
    sm: ['btn-group-sm'],
    md: ['btn-group-md'],
    lg: ['btn-group-lg'],
    xs: ['btn-group-xs']
};
const buttonGroupTypeMap = {
    'outline-primary': ['btn-group-outline-primary'],
    'outline-default': ['btn-group-outline-default']
};
export class ThyButtonGroupComponent {
    constructor(updateHostClassService, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.initialized = false;
        this._isButtonGroup = true;
        this.thyClearMinWidthClassName = false;
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(size) {
        this.size = size;
        if (this.initialized) {
            this.setClasses();
        }
    }
    set thyType(type) {
        this.type = type;
        if (this.initialized) {
            this.setClasses();
        }
    }
    set thyClearMinWidth(value) {
        this.thyClearMinWidthClassName = coerceBooleanProperty(value);
    }
    ngOnInit() {
        this.setClasses();
        this.initialized = true;
    }
    setClasses() {
        let classNames = [];
        if (buttonGroupTypeMap[this.type]) {
            classNames = [...buttonGroupTypeMap[this.type]];
        }
        if (buttonGroupSizeMap[this.size]) {
            classNames.push(buttonGroupSizeMap[this.size]);
        }
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyButtonGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-button-group',
                template: '<ng-content></ng-content>',
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None
            },] }
];
ThyButtonGroupComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyButtonGroupComponent.propDecorators = {
    thySize: [{ type: Input }],
    thyType: [{ type: Input }],
    thyClearMinWidth: [{ type: Input }],
    _isButtonGroup: [{ type: HostBinding, args: ['class.btn-group',] }],
    thyClearMinWidthClassName: [{ type: HostBinding, args: [`class.btn-group-clear-min-width`,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9idXR0b24vYnV0dG9uLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQTZCLFVBQVUsRUFBRSxpQkFBaUIsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU14RCxNQUFNLGtCQUFrQixHQUFHO0lBQ3ZCLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQztJQUNwQixFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDcEIsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQ3BCLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQztDQUN2QixDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBRztJQUN2QixpQkFBaUIsRUFBRSxDQUFDLDJCQUEyQixDQUFDO0lBQ2hELGlCQUFpQixFQUFFLENBQUMsMkJBQTJCLENBQUM7Q0FDbkQsQ0FBQztBQVFGLE1BQU0sT0FBTyx1QkFBdUI7SUFnQ2hDLFlBQW9CLHNCQUE4QyxFQUFVLFVBQXNCO1FBQTlFLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBL0IxRixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQTJCSSxtQkFBYyxHQUFHLElBQUksQ0FBQztRQUV0RCw4QkFBeUIsR0FBRyxLQUFLLENBQUM7UUFHOUIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBM0JELElBQ0ksT0FBTyxDQUFDLElBQXFCO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNsQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDO0lBRUQsSUFDSSxPQUFPLENBQUMsSUFBbUI7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjtJQUNMLENBQUM7SUFFRCxJQUNJLGdCQUFnQixDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLHlCQUF5QixHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFVRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFFTyxVQUFVO1FBQ2QsSUFBSSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQzlCLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLFVBQVUsR0FBRyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQixVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RCxDQUFDOzs7WUF4REosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO2dCQUNuQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN4Qzs7O1lBekJRLHNCQUFzQjtZQURvQyxVQUFVOzs7c0JBa0N4RSxLQUFLO3NCQVFMLEtBQUs7K0JBUUwsS0FBSzs2QkFLTCxXQUFXLFNBQUMsaUJBQWlCO3dDQUM3QixXQUFXLFNBQUMsaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIENvbnRlbnRDaGlsZCwgVGVtcGxhdGVSZWYsIEVsZW1lbnRSZWYsIFZpZXdFbmNhcHN1bGF0aW9uLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuaW1wb3J0IHsgVGh5QnV0dG9uVHlwZSB9IGZyb20gJy4nO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnbmd4LXRldGh5cy91dGlsJztcblxuZXhwb3J0IHR5cGUgYnV0dG9uR3JvdXBTaXplID0gJ3NtJyB8ICdsZycgfCAneHMnIHwgJ21kJztcblxuZXhwb3J0IHR5cGUgYnV0dG9uR3JvdXBUeXBlID0gJ291dGxpbmUtcHJpbWFyeScgfCAnb3V0bGluZS1kZWZhdWx0JztcblxuY29uc3QgYnV0dG9uR3JvdXBTaXplTWFwID0ge1xuICAgIHNtOiBbJ2J0bi1ncm91cC1zbSddLFxuICAgIG1kOiBbJ2J0bi1ncm91cC1tZCddLFxuICAgIGxnOiBbJ2J0bi1ncm91cC1sZyddLFxuICAgIHhzOiBbJ2J0bi1ncm91cC14cyddXG59O1xuXG5jb25zdCBidXR0b25Hcm91cFR5cGVNYXAgPSB7XG4gICAgJ291dGxpbmUtcHJpbWFyeSc6IFsnYnRuLWdyb3VwLW91dGxpbmUtcHJpbWFyeSddLFxuICAgICdvdXRsaW5lLWRlZmF1bHQnOiBbJ2J0bi1ncm91cC1vdXRsaW5lLWRlZmF1bHQnXVxufTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktYnV0dG9uLWdyb3VwJyxcbiAgICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICAgIHByb3ZpZGVyczogW1VwZGF0ZUhvc3RDbGFzc1NlcnZpY2VdLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgVGh5QnV0dG9uR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgdHlwZTogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBzaXplOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlTaXplKHNpemU6IGJ1dHRvbkdyb3VwU2l6ZSkge1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDbGFzc2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlUeXBlKHR5cGU6IFRoeUJ1dHRvblR5cGUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3NlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5Q2xlYXJNaW5XaWR0aCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGh5Q2xlYXJNaW5XaWR0aENsYXNzTmFtZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5idG4tZ3JvdXAnKSBfaXNCdXR0b25Hcm91cCA9IHRydWU7XG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy5idG4tZ3JvdXAtY2xlYXItbWluLXdpZHRoYClcbiAgICB0aHlDbGVhck1pbldpZHRoQ2xhc3NOYW1lID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UuaW5pdGlhbGl6ZUVsZW1lbnQoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zZXRDbGFzc2VzKCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0Q2xhc3NlcygpIHtcbiAgICAgICAgbGV0IGNsYXNzTmFtZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChidXR0b25Hcm91cFR5cGVNYXBbdGhpcy50eXBlXSkge1xuICAgICAgICAgICAgY2xhc3NOYW1lcyA9IFsuLi5idXR0b25Hcm91cFR5cGVNYXBbdGhpcy50eXBlXV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1dHRvbkdyb3VwU2l6ZU1hcFt0aGlzLnNpemVdKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goYnV0dG9uR3JvdXBTaXplTWFwW3RoaXMuc2l6ZV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVDbGFzcyhjbGFzc05hbWVzKTtcbiAgICB9XG59XG4iXX0=
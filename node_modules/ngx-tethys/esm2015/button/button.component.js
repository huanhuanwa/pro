import { Component, Input, ElementRef, Renderer2, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { UpdateHostClassService } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/icon';

const _c0 = ["thy-button", ""];
function ThyButtonComponent_thy_icon_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-icon", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r0.svgIconName);
} }
function ThyButtonComponent_ng_template_1_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 4);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3._iconClass);
} }
function ThyButtonComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyButtonComponent_ng_template_1_i_0_Template, 1, 1, "i", 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2._iconClass);
} }
const _c1 = ["*"];
const btnTypeClassesMap = {
    primary: ['btn', 'btn-primary'],
    secondary: ['btn', 'btn-primary', 'btn-md'],
    info: ['btn', 'btn-info'],
    warning: ['btn', 'btn-warning'],
    danger: ['btn', 'btn-danger'],
    'outline-primary': ['btn', 'btn-outline-primary'],
    'outline-default': ['btn', 'btn-outline-default'],
    link: ['btn', 'btn-link'],
    'link-info': ['btn', 'btn-link', 'btn-link-info'],
    'link-secondary': ['btn', 'btn-link', 'btn-link-primary-weak'],
    'link-danger-weak': ['btn', 'btn-link', 'btn-link-danger-weak'],
    'link-danger': ['btn', 'btn-link', 'btn-link-danger'],
    'link-success': ['btn', 'btn-link', 'btn-link-success'] // 成功按钮
};
export class ThyButtonComponent {
    constructor(elementRef, renderer, updateHostClassService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.updateHostClassService = updateHostClassService;
        this._initialized = false;
        // 圆角方形
        this._isRadiusSquare = false;
        this._nativeElement = this.elementRef.nativeElement;
        this.updateHostClassService.initializeElement(this._nativeElement);
    }
    _setBtnType(value) {
        if (value) {
            if (value.includes('-square')) {
                this._type = value.replace('-square', '');
                this._isRadiusSquare = true;
            }
            else {
                this._type = value;
            }
            if (this._initialized) {
                this._setClasses();
            }
        }
    }
    set thyButton(value) {
        this._setBtnType(value);
    }
    set thyType(value) {
        this._setBtnType(value);
    }
    set thyLoading(value) {
        const newLoading = coerceBooleanProperty(value);
        // from false to true
        if (!this._loading && newLoading) {
            this._loading = newLoading;
            this._originalText = this._nativeElement.innerText;
            this._setLoadingStatus();
        }
        else {
            this._loading = newLoading;
            this._setLoadingStatus();
        }
    }
    set thyLoadingText(value) {
        if (this._loadingText !== value) {
            this._loadingText = value;
            if (this._loading) {
                this.renderer.setProperty(this._nativeElement, 'innerText', this._loadingText);
            }
        }
    }
    set thySize(size) {
        this._size = size;
        if (this._initialized) {
            this._setClasses();
        }
    }
    set thyIcon(icon) {
        this._icon = icon;
        if (this._icon) {
            if (icon.includes('wtf')) {
                const classes = this._icon.split(' ');
                if (classes.length === 1) {
                    classes.unshift('wtf');
                }
                this._iconClass = classes;
            }
            else {
                this.svgIconName = icon;
            }
        }
        else {
            this._iconClass = null;
            this.svgIconName = null;
        }
    }
    set thySquare(value) {
        this._isRadiusSquare = coerceBooleanProperty(value);
    }
    _setLoadingStatus() {
        // let disabled = false;
        let innerText;
        if (this._loading) {
            // disabled = true;
            innerText = this._loadingText ? this._loadingText : null;
        }
        else {
            // disabled = false;
            innerText = this._originalText ? this._originalText : null;
        }
        // this.renderer.setProperty(this._nativeElement, 'disabled', disabled);
        this._setClasses();
        if (innerText) {
            this.renderer.setProperty(this._nativeElement, 'innerText', innerText);
        }
    }
    _setClasses() {
        let classNames = null;
        if (btnTypeClassesMap[this._type]) {
            classNames = [...btnTypeClassesMap[this._type]];
        }
        else {
            classNames = ['btn'];
            if (this._type) {
                classNames.push(`btn-${this._type}`);
            }
            // console.error(`button type (${this._type}) is not support`);
        }
        if (this._size) {
            classNames.push(`btn-${this._size}`);
        }
        if (this._icon) {
            classNames.push('btn-has-icon');
        }
        if (this._isRadiusSquare) {
            classNames.push('btn-square');
        }
        if (this._loading) {
            classNames.push('loading');
        }
        this.updateHostClassService.updateClass(classNames);
    }
    ngOnInit() {
        this._setClasses();
        this._initialized = true;
    }
}
ThyButtonComponent.ɵfac = function ThyButtonComponent_Factory(t) { return new (t || ThyButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService)); };
ThyButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyButtonComponent, selectors: [["", "thy-button", ""], ["", "thyButton", ""]], inputs: { thyButton: "thyButton", thyType: "thyType", thyLoading: "thyLoading", thyLoadingText: "thyLoadingText", thySize: "thySize", thyIcon: "thyIcon", thySquare: "thySquare" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[3, "thyIconName", 4, "ngIf", "ngIfElse"], ["iconFont", ""], [3, "thyIconName"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"]], template: function ThyButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyButtonComponent_thy_icon_0_Template, 1, 1, "thy-icon", 0);
        ɵngcc0.ɵɵtemplate(1, ThyButtonComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵprojection(3);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.svgIconName)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ThyIconComponent, ɵngcc2.NgClass], encapsulation: 2, changeDetection: 0 });
ThyButtonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: UpdateHostClassService }
];
ThyButtonComponent.propDecorators = {
    thyButton: [{ type: Input }],
    thyType: [{ type: Input }],
    thyLoading: [{ type: Input }],
    thyLoadingText: [{ type: Input }],
    thySize: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thySquare: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyButtonComponent, [{
        type: Component,
        args: [{
                selector: '[thy-button],[thyButton]',
                template: "<thy-icon *ngIf=\"svgIconName; else iconFont\" [thyIconName]=\"svgIconName\"></thy-icon>\n<ng-template #iconFont>\n  <i [ngClass]=\"_iconClass\" *ngIf=\"_iconClass\"></i>\n</ng-template>\n<ng-content></ng-content>\n",
                providers: [UpdateHostClassService],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.UpdateHostClassService }]; }, { thyButton: [{
            type: Input
        }], thyType: [{
            type: Input
        }], thyLoading: [{
            type: Input
        }], thyLoadingText: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thyIcon: [{
            type: Input
        }], thySquare: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
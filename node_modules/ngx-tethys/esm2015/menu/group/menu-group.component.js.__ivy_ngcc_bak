import { Component, HostBinding, Input, Output, EventEmitter, ElementRef, ViewChild } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { ThyPopover } from 'ngx-tethys/popover';
export class ThyMenuGroupComponent {
    constructor(popover) {
        this.popover = popover;
        this.rightIconClass = 'more';
        this.iconClass = 'folder-bold';
        this.groupHeaderPaddingLeft = 0;
        this.isThyMenuGroup = true;
        this.showIcon = false;
        this.isCollapsed = true;
        this.thyTitle = '';
        this.thyShowAction = false;
        this.thyActionStopPropagation = true;
        this.thyOnActionClick = new EventEmitter();
    }
    set thyExpand(value) {
        this.isCollapsed = !!!value;
    }
    set thyShowIcon(value) {
        this.showIcon = value;
    }
    set thyIcon(value) {
        this.iconClass = value;
    }
    set thyActionIcon(value) {
        this.rightIconClass = value;
    }
    set thyActionMenu(value) {
        this._actionMenu = value;
    }
    ngOnInit() { }
    collapseGroup() {
        this.isCollapsed = !this.isCollapsed;
    }
    onActionClick(event) {
        if (this.thyActionStopPropagation) {
            event.stopPropagation();
        }
        if (this._actionMenu) {
            this.popover.open(this._actionMenu, {
                origin: event.currentTarget,
                insideClosable: true,
                placement: 'bottom'
            });
        }
        else {
            this.thyOnActionClick.emit(event);
        }
    }
}
ThyMenuGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-menu-group, [thy-menu-group],[thyMenuGroup]',
                template: "<div class=\"thy-menu-group-header\" (click)=\"collapseGroup()\">\n  <thy-icon thyIconName=\"caret-right-down\" class=\"thy-menu-group-arrow\"></thy-icon>\n  <thy-icon *ngIf=\"showIcon\" class=\"thy-menu-group-folder\" [thyIconName]=\"iconClass\"></thy-icon>\n  <span class=\"thy-menu-group-title\" [title]=\"thyTitle\">{{ thyTitle }}</span>\n  <thy-icon\n    *ngIf=\"thyShowAction\"\n    class=\"thy-menu-group-more\"\n    [thyIconName]=\"rightIconClass\"\n    (click)=\"onActionClick($event)\"\n  ></thy-icon>\n</div>\n<div class=\"thy-menu-group-body\" #thyMenuGroup [@detailsContentAnimation]=\"isCollapsed\">\n  <ng-content></ng-content>\n</div>\n",
                animations: [
                    trigger('detailsContentAnimation', [
                        state('void', style({
                            height: '*'
                        })),
                        state('1', style({
                            height: 0,
                            overflow: 'hidden'
                        })),
                        state('0', style({
                            height: '*'
                        })),
                        transition('* => *', animate('0ms ease-out'))
                    ])
                ]
            },] }
];
ThyMenuGroupComponent.ctorParameters = () => [
    { type: ThyPopover }
];
ThyMenuGroupComponent.propDecorators = {
    _thyMenuGroup: [{ type: ViewChild, args: ['thyMenuGroup', { static: true },] }],
    isThyMenuGroup: [{ type: HostBinding, args: ['class.thy-menu-group',] }],
    showIcon: [{ type: HostBinding, args: ['class.has-icon',] }],
    isCollapsed: [{ type: HostBinding, args: ['class.collapsed',] }],
    thyTitle: [{ type: Input }],
    thyExpand: [{ type: Input, args: ['thyExpand',] }],
    thyShowIcon: [{ type: Input, args: ['thyShowIcon',] }],
    thyIcon: [{ type: Input, args: ['thyIcon',] }],
    thyActionIcon: [{ type: Input, args: ['thyActionIcon',] }],
    thyShowAction: [{ type: Input }],
    thyActionStopPropagation: [{ type: Input }],
    thyOnActionClick: [{ type: Output }],
    thyActionMenu: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbWVudS9ncm91cC9tZW51LWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ2hJLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFakYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBOEJoRCxNQUFNLE9BQU8scUJBQXFCO0lBa0Q5QixZQUFvQixPQUFtQjtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBL0NoQyxtQkFBYyxHQUFHLE1BQU0sQ0FBQztRQUV4QixjQUFTLEdBQUcsYUFBYSxDQUFDO1FBRTFCLDJCQUFzQixHQUFHLENBQUMsQ0FBQztRQUlHLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBRTVCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFaEIsZ0JBQVcsR0FBRyxJQUFJLENBQUM7UUFFMUMsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQXNCZCxrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUV0Qiw2QkFBd0IsR0FBRyxJQUFJLENBQUM7UUFFL0IscUJBQWdCLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7SUFPbEMsQ0FBQztJQS9CM0MsSUFDSSxTQUFTLENBQUMsS0FBYztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFDSSxXQUFXLENBQUMsS0FBYztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFDSSxPQUFPLENBQUMsS0FBYTtRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFDSSxhQUFhLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBUUQsSUFDSSxhQUFhLENBQUMsS0FBNEM7UUFDMUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUlELFFBQVEsS0FBVSxDQUFDO0lBRW5CLGFBQWE7UUFDVCxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN6QyxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQVk7UUFDdEIsSUFBSSxJQUFJLENBQUMsd0JBQXdCLEVBQUU7WUFDL0IsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2hDLE1BQU0sRUFBRSxLQUFLLENBQUMsYUFBNEI7Z0JBQzFDLGNBQWMsRUFBRSxJQUFJO2dCQUNwQixTQUFTLEVBQUUsUUFBUTthQUN0QixDQUFDLENBQUM7U0FDTjthQUFNO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyQztJQUNMLENBQUM7OztZQW5HSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGlEQUFpRDtnQkFDM0Qsd3BCQUEwQztnQkFDMUMsVUFBVSxFQUFFO29CQUNSLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRTt3QkFDL0IsS0FBSyxDQUNELE1BQU0sRUFDTixLQUFLLENBQUM7NEJBQ0YsTUFBTSxFQUFFLEdBQUc7eUJBQ2QsQ0FBQyxDQUNMO3dCQUNELEtBQUssQ0FDRCxHQUFHLEVBQ0gsS0FBSyxDQUFDOzRCQUNGLE1BQU0sRUFBRSxDQUFDOzRCQUNULFFBQVEsRUFBRSxRQUFRO3lCQUNyQixDQUFDLENBQ0w7d0JBQ0QsS0FBSyxDQUNELEdBQUcsRUFDSCxLQUFLLENBQUM7NEJBQ0YsTUFBTSxFQUFFLEdBQUc7eUJBQ2QsQ0FBQyxDQUNMO3dCQUNELFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO3FCQUNoRCxDQUFDO2lCQUNMO2FBQ0o7OztZQTdCUSxVQUFVOzs7NEJBdUNkLFNBQVMsU0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzZCQUUxQyxXQUFXLFNBQUMsc0JBQXNCO3VCQUVsQyxXQUFXLFNBQUMsZ0JBQWdCOzBCQUU1QixXQUFXLFNBQUMsaUJBQWlCO3VCQUU3QixLQUFLO3dCQUVMLEtBQUssU0FBQyxXQUFXOzBCQUtqQixLQUFLLFNBQUMsYUFBYTtzQkFLbkIsS0FBSyxTQUFDLFNBQVM7NEJBS2YsS0FBSyxTQUFDLGVBQWU7NEJBS3JCLEtBQUs7dUNBRUwsS0FBSzsrQkFFTCxNQUFNOzRCQUVOLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdHJpZ2dlciwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDb21wb25lbnRUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBUaHlQb3BvdmVyIH0gZnJvbSAnbmd4LXRldGh5cy9wb3BvdmVyJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktbWVudS1ncm91cCwgW3RoeS1tZW51LWdyb3VwXSxbdGh5TWVudUdyb3VwXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL21lbnUtZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxuICAgIGFuaW1hdGlvbnM6IFtcbiAgICAgICAgdHJpZ2dlcignZGV0YWlsc0NvbnRlbnRBbmltYXRpb24nLCBbXG4gICAgICAgICAgICBzdGF0ZShcbiAgICAgICAgICAgICAgICAndm9pZCcsXG4gICAgICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcqJ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhdGUoXG4gICAgICAgICAgICAgICAgJzEnLFxuICAgICAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YXRlKFxuICAgICAgICAgICAgICAgICcwJyxcbiAgICAgICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJyonXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB0cmFuc2l0aW9uKCcqID0+IConLCBhbmltYXRlKCcwbXMgZWFzZS1vdXQnKSlcbiAgICAgICAgXSlcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFRoeU1lbnVHcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHVibGljIF9hY3Rpb25NZW51OiBDb21wb25lbnRUeXBlPGFueT4gfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgcHVibGljIHJpZ2h0SWNvbkNsYXNzID0gJ21vcmUnO1xuXG4gICAgcHVibGljIGljb25DbGFzcyA9ICdmb2xkZXItYm9sZCc7XG5cbiAgICBwdWJsaWMgZ3JvdXBIZWFkZXJQYWRkaW5nTGVmdCA9IDA7XG5cbiAgICBAVmlld0NoaWxkKCd0aHlNZW51R3JvdXAnLCB7IHN0YXRpYzogdHJ1ZSB9KSBfdGh5TWVudUdyb3VwOiBFbGVtZW50UmVmO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktbWVudS1ncm91cCcpIGlzVGh5TWVudUdyb3VwID0gdHJ1ZTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGFzLWljb24nKSBzaG93SWNvbiA9IGZhbHNlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb2xsYXBzZWQnKSBpc0NvbGxhcHNlZCA9IHRydWU7XG5cbiAgICBASW5wdXQoKSB0aHlUaXRsZSA9ICcnO1xuXG4gICAgQElucHV0KCd0aHlFeHBhbmQnKVxuICAgIHNldCB0aHlFeHBhbmQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9ICEhIXZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgndGh5U2hvd0ljb24nKVxuICAgIHNldCB0aHlTaG93SWNvbih2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnNob3dJY29uID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQElucHV0KCd0aHlJY29uJylcbiAgICBzZXQgdGh5SWNvbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaWNvbkNsYXNzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQElucHV0KCd0aHlBY3Rpb25JY29uJylcbiAgICBzZXQgdGh5QWN0aW9uSWNvbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucmlnaHRJY29uQ2xhc3MgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBASW5wdXQoKSB0aHlTaG93QWN0aW9uID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKSB0aHlBY3Rpb25TdG9wUHJvcGFnYXRpb24gPSB0cnVlO1xuXG4gICAgQE91dHB1dCgpIHRoeU9uQWN0aW9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPEV2ZW50PigpO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5QWN0aW9uTWVudSh2YWx1ZTogQ29tcG9uZW50VHlwZTxhbnk+IHwgVGVtcGxhdGVSZWY8YW55Pikge1xuICAgICAgICB0aGlzLl9hY3Rpb25NZW51ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwb3BvdmVyOiBUaHlQb3BvdmVyKSB7fVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7fVxuXG4gICAgY29sbGFwc2VHcm91cCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9ICF0aGlzLmlzQ29sbGFwc2VkO1xuICAgIH1cblxuICAgIG9uQWN0aW9uQ2xpY2soZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnRoeUFjdGlvblN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FjdGlvbk1lbnUpIHtcbiAgICAgICAgICAgIHRoaXMucG9wb3Zlci5vcGVuKHRoaXMuX2FjdGlvbk1lbnUsIHtcbiAgICAgICAgICAgICAgICBvcmlnaW46IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgaW5zaWRlQ2xvc2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRoeU9uQWN0aW9uQ2xpY2suZW1pdChldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Store, Action } from 'ngx-tethys/store';
import * as ɵngcc0 from '@angular/core';
export const notifyQueueInitialState = {
    topLeftQueue: [],
    topRightQueue: [],
    bottomLeftQueue: [],
    bottomRightQueue: []
};
export class NotifyQueueStore extends Store {
    constructor() {
        super(notifyQueueInitialState);
    }
    static topRightSelector(state) {
        return state.topRightQueue;
    }
    static topLeftSelector(state) {
        return state.topLeftQueue;
    }
    static bottomLeftSelector(state) {
        return state.bottomLeftQueue;
    }
    static bottomRightSelector(state) {
        return state.bottomRightQueue;
    }
    convertQueueKey(placement) {
        let key;
        if (placement === 'topLeft') {
            key = 'topLeftQueue';
        }
        else if (placement === 'topRight') {
            key = 'topRightQueue';
        }
        else if (placement === 'bottomLeft') {
            key = 'bottomLeftQueue';
        }
        else if (placement === 'bottomRight') {
            key = 'bottomRightQueue';
        }
        return key;
    }
    addNotify(placement, options) {
        const key = this.convertQueueKey(placement);
        const state = this.snapshot;
        if (state[key].length > options.maxStack) {
            state[key].shift();
        }
        state[key].push(options);
        this.next(state);
    }
    removeNotify(id, placement) {
        const state = this.snapshot;
        if (placement) {
            const queueKey = this.convertQueueKey(placement);
            if (state.hasOwnProperty(queueKey) && state[queueKey].length) {
                state[queueKey] = state[queueKey].filter((item) => {
                    return item.id !== id;
                });
            }
        }
        else {
            Object.keys(state).forEach(queueKey => {
                if (state.hasOwnProperty(queueKey) && state[queueKey].length) {
                    state[queueKey] = state[queueKey].filter((item) => {
                        return item.id !== id;
                    });
                }
            });
        }
        this.next(state);
    }
}
NotifyQueueStore.ɵfac = function NotifyQueueStore_Factory(t) { return new (t || NotifyQueueStore)(); };
NotifyQueueStore.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifyQueueStore, factory: NotifyQueueStore.ɵfac });
NotifyQueueStore.ctorParameters = () => [];
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", void 0)
], NotifyQueueStore.prototype, "addNotify", null);
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, String]),
    __metadata("design:returntype", void 0)
], NotifyQueueStore.prototype, "removeNotify", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifyQueueStore, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LXF1ZXVlLnN0b3JlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm90aWZ5L25vdGlmeS1xdWV1ZS5zdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQVVqRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBcUI7QUFDekQsSUFBSSxZQUFZLEVBQUUsRUFBRTtBQUNwQixJQUFJLGFBQWEsRUFBRSxFQUFFO0FBQ3JCLElBQUksZUFBZSxFQUFFLEVBQUU7QUFDdkIsSUFBSSxnQkFBZ0IsRUFBRSxFQUFFO0FBQ3hCLENBQUMsQ0FBQztBQUdGLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxLQUF1QjtBQUM3RCxJQWFJO0FBQ0osUUFBUSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUN2QyxJQUFJLENBQUM7QUFDTCxJQWhCSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBdUI7QUFDbkQsUUFBUSxPQUFPLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDbkMsSUFBSSxDQUFDO0FBQ0wsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQXVCO0FBQ2xELFFBQVEsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ2xDLElBQUksQ0FBQztBQUNMLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLEtBQXVCO0FBQ3JELFFBQVEsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDO0FBQ3JDLElBQUksQ0FBQztBQUNMLElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQXVCO0FBQ3RELFFBQVEsT0FBTyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDdEMsSUFBSSxDQUFDO0FBQ0wsSUFLWSxlQUFlLENBQUMsU0FBMEI7QUFBSSxRQUNsRCxJQUFJLEdBQVcsQ0FBQztBQUN4QixRQUFRLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtBQUNyQyxZQUFZLEdBQUcsR0FBRyxjQUFjLENBQUM7QUFDakMsU0FBUztBQUFDLGFBQUssSUFBSSxTQUFTLEtBQUssVUFBVSxFQUFFO0FBQzdDLFlBQVksR0FBRyxHQUFHLGVBQWUsQ0FBQztBQUNsQyxTQUFTO0FBQUMsYUFBSyxJQUFJLFNBQVMsS0FBSyxZQUFZLEVBQUU7QUFDL0MsWUFBWSxHQUFHLEdBQUcsaUJBQWlCLENBQUM7QUFDcEMsU0FBUztBQUFDLGFBQUssSUFBSSxTQUFTLEtBQUssYUFBYSxFQUFFO0FBQ2hELFlBQVksR0FBRyxHQUFHLGtCQUFrQixDQUFDO0FBQ3JDLFNBQVM7QUFDVCxRQUFRLE9BQU8sR0FBRyxDQUFDO0FBQ25CLElBQUksQ0FBQztBQUNMLElBRUksU0FBUyxDQUFDLFNBQTBCLEVBQUUsT0FBeUI7QUFDbkUsUUFBUSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BELFFBQVEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNwQyxRQUFRLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFO0FBQ2xELFlBQVksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQy9CLFNBQVM7QUFDVCxRQUFRLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLElBQUksQ0FBQztBQUNMLElBRUksWUFBWSxDQUFDLEVBQVUsRUFBRSxTQUEyQjtBQUN4RCxRQUFRLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDcEMsUUFBUSxJQUFJLFNBQVMsRUFBRTtBQUN2QixZQUFZLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0QsWUFBWSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRTtBQUMxRSxnQkFBZ0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtBQUN2RSxvQkFBb0IsT0FBTyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUMxQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDbkIsYUFBYTtBQUNiLFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNsRCxnQkFBZ0IsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUU7QUFDOUUsb0JBQW9CLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7QUFDM0Usd0JBQXdCLE9BQU8sSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDOUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLGlCQUFpQjtBQUNqQixZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixJQUFJLENBQUM7QUFDTDs0Q0FqRUMsVUFBVTtnSEFDVDtBQUFDO0FBaUNDO0FBQWEsSUFEWixNQUFNLEVBQUU7QUFDWjtBQUF5QztBQUNoQjtBQUNULGlEQU1aO0FBR0Q7QUFBYSxJQURaLE1BQU0sRUFBRTtBQUNaO0FBQXlDO0FBRTFDO0FBQ21CLG9EQWdCZDs7O2dEQUNMO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSwgQWN0aW9uIH0gZnJvbSAnbmd4LXRldGh5cy9zdG9yZSc7XG5pbXBvcnQgeyBOb3RpZnlQbGFjZW1lbnQsIFRoeU5vdGlmeU9wdGlvbnMgfSBmcm9tICcuL25vdGlmeS1vcHRpb24uaW50ZXJmYWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBOb3RpZnlRdWV1ZVN0YXRlIHtcbiAgICB0b3BMZWZ0UXVldWU6IFRoeU5vdGlmeU9wdGlvbnNbXTtcbiAgICB0b3BSaWdodFF1ZXVlOiBUaHlOb3RpZnlPcHRpb25zW107XG4gICAgYm90dG9tTGVmdFF1ZXVlOiBUaHlOb3RpZnlPcHRpb25zW107XG4gICAgYm90dG9tUmlnaHRRdWV1ZTogVGh5Tm90aWZ5T3B0aW9uc1tdO1xufVxuXG5leHBvcnQgY29uc3Qgbm90aWZ5UXVldWVJbml0aWFsU3RhdGU6IE5vdGlmeVF1ZXVlU3RhdGUgPSB7XG4gICAgdG9wTGVmdFF1ZXVlOiBbXSxcbiAgICB0b3BSaWdodFF1ZXVlOiBbXSxcbiAgICBib3R0b21MZWZ0UXVldWU6IFtdLFxuICAgIGJvdHRvbVJpZ2h0UXVldWU6IFtdXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTm90aWZ5UXVldWVTdG9yZSBleHRlbmRzIFN0b3JlPE5vdGlmeVF1ZXVlU3RhdGU+IHtcbiAgICBzdGF0aWMgdG9wUmlnaHRTZWxlY3RvcihzdGF0ZTogTm90aWZ5UXVldWVTdGF0ZSkge1xuICAgICAgICByZXR1cm4gc3RhdGUudG9wUmlnaHRRdWV1ZTtcbiAgICB9XG4gICAgc3RhdGljIHRvcExlZnRTZWxlY3RvcihzdGF0ZTogTm90aWZ5UXVldWVTdGF0ZSkge1xuICAgICAgICByZXR1cm4gc3RhdGUudG9wTGVmdFF1ZXVlO1xuICAgIH1cbiAgICBzdGF0aWMgYm90dG9tTGVmdFNlbGVjdG9yKHN0YXRlOiBOb3RpZnlRdWV1ZVN0YXRlKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5ib3R0b21MZWZ0UXVldWU7XG4gICAgfVxuICAgIHN0YXRpYyBib3R0b21SaWdodFNlbGVjdG9yKHN0YXRlOiBOb3RpZnlRdWV1ZVN0YXRlKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5ib3R0b21SaWdodFF1ZXVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihub3RpZnlRdWV1ZUluaXRpYWxTdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb252ZXJ0UXVldWVLZXkocGxhY2VtZW50OiBOb3RpZnlQbGFjZW1lbnQpOiBzdHJpbmcge1xuICAgICAgICBsZXQga2V5OiBzdHJpbmc7XG4gICAgICAgIGlmIChwbGFjZW1lbnQgPT09ICd0b3BMZWZ0Jykge1xuICAgICAgICAgICAga2V5ID0gJ3RvcExlZnRRdWV1ZSc7XG4gICAgICAgIH0gZWxzZSBpZiAocGxhY2VtZW50ID09PSAndG9wUmlnaHQnKSB7XG4gICAgICAgICAgICBrZXkgPSAndG9wUmlnaHRRdWV1ZSc7XG4gICAgICAgIH0gZWxzZSBpZiAocGxhY2VtZW50ID09PSAnYm90dG9tTGVmdCcpIHtcbiAgICAgICAgICAgIGtleSA9ICdib3R0b21MZWZ0UXVldWUnO1xuICAgICAgICB9IGVsc2UgaWYgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbVJpZ2h0Jykge1xuICAgICAgICAgICAga2V5ID0gJ2JvdHRvbVJpZ2h0UXVldWUnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgQEFjdGlvbigpXG4gICAgYWRkTm90aWZ5KHBsYWNlbWVudDogTm90aWZ5UGxhY2VtZW50LCBvcHRpb25zOiBUaHlOb3RpZnlPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuY29udmVydFF1ZXVlS2V5KHBsYWNlbWVudCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zbmFwc2hvdDtcbiAgICAgICAgaWYgKHN0YXRlW2tleV0ubGVuZ3RoID4gb3B0aW9ucy5tYXhTdGFjaykge1xuICAgICAgICAgICAgc3RhdGVba2V5XS5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlW2tleV0ucHVzaChvcHRpb25zKTtcbiAgICAgICAgdGhpcy5uZXh0KHN0YXRlKTtcbiAgICB9XG5cbiAgICBAQWN0aW9uKClcbiAgICByZW1vdmVOb3RpZnkoaWQ6IG51bWJlciwgcGxhY2VtZW50PzogTm90aWZ5UGxhY2VtZW50KSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zbmFwc2hvdDtcbiAgICAgICAgaWYgKHBsYWNlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgcXVldWVLZXkgPSB0aGlzLmNvbnZlcnRRdWV1ZUtleShwbGFjZW1lbnQpO1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhhc093blByb3BlcnR5KHF1ZXVlS2V5KSAmJiBzdGF0ZVtxdWV1ZUtleV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVbcXVldWVLZXldID0gc3RhdGVbcXVldWVLZXldLmZpbHRlcigoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlkICE9PSBpZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHN0YXRlKS5mb3JFYWNoKHF1ZXVlS2V5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGFzT3duUHJvcGVydHkocXVldWVLZXkpICYmIHN0YXRlW3F1ZXVlS2V5XS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVbcXVldWVLZXldID0gc3RhdGVbcXVldWVLZXldLmZpbHRlcigoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZCAhPT0gaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmV4dChzdGF0ZSk7XG4gICAgfVxufVxuIl19
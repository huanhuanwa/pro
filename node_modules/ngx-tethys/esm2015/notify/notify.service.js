import { helpers } from 'ngx-tethys/util';
import { Subject } from 'rxjs';
import { ComponentPortal, DomPortalOutlet } from '@angular/cdk/portal';
import { ApplicationRef, ComponentFactoryResolver, Inject, Injectable, Injector } from '@angular/core';
import { THY_NOTIFY_DEFAULT_OPTIONS } from './notify-option.interface';
import { NotifyQueueStore } from './notify-queue.store';
import { ThyNotifyContainerComponent } from './notify.container.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './notify-queue.store';
const NOTIFY_OPTION_DEFAULT = {
    duration: 4500,
    pauseOnHover: true,
    maxStack: 8,
    placement: 'topRight'
};
export class ThyNotifyService {
    constructor(injector, componentFactoryResolver, appRef, queueStore, defaultConfig) {
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.queueStore = queueStore;
        this.defaultConfig = defaultConfig;
        this.notifyQueue$ = new Subject();
        this._lastNotifyId = 0;
    }
    show(options) {
        const notifyConfig = this.formatOptions(options);
        const { placement } = notifyConfig;
        this.queueStore.addNotify(placement, notifyConfig);
        this._initContainer(placement);
    }
    success(title, content, options) {
        this.show(Object.assign(Object.assign({}, (options || {})), { type: 'success', title: title || (options === null || options === void 0 ? void 0 : options.title) || '成功', content: content || (options === null || options === void 0 ? void 0 : options.content) }));
    }
    info(title, content, options) {
        this.show(Object.assign(Object.assign({}, (options || {})), { type: 'info', title: title || (options === null || options === void 0 ? void 0 : options.title) || '提示', content: content || (options === null || options === void 0 ? void 0 : options.content) }));
    }
    warning(title, content, options) {
        this.show(Object.assign(Object.assign({}, (options || {})), { type: 'warning', title: title || (options === null || options === void 0 ? void 0 : options.title) || '警告', content: content || (options === null || options === void 0 ? void 0 : options.content) }));
    }
    error(title, content, options) {
        var _a, _b;
        const config = helpers.isString(options)
            ? { type: 'error', title: title || '错误', content: content, detail: options }
            : Object.assign(Object.assign({}, (options || {})), { type: 'error', title: title || ((_a = options) === null || _a === void 0 ? void 0 : _a.title) || '错误', content: content || ((_b = options) === null || _b === void 0 ? void 0 : _b.content) });
        this.show(config);
    }
    removeNotifyById(id) {
        this.queueStore.removeNotify(id);
    }
    _initContainer(placement) {
        if (placement === 'topRight') {
            this.containerRefTopRight = this._loadNotifyContainerComponent(this.containerRefTopRight, placement);
        }
        else if (placement === 'bottomRight') {
            this.containerRefBottomRight = this._loadNotifyContainerComponent(this.containerRefBottomRight, placement);
        }
        else if (placement === 'bottomLeft') {
            this.containerRefBottomLeft = this._loadNotifyContainerComponent(this.containerRefBottomLeft, placement);
        }
        else if (placement === 'topLeft') {
            this.containerRefTopLeft = this._loadNotifyContainerComponent(this.containerRefTopLeft, placement);
        }
    }
    _loadNotifyContainerComponent(containerRef, placement) {
        if (!containerRef) {
            const portalOutlet = new DomPortalOutlet(document.body, this.componentFactoryResolver, this.appRef, this.injector);
            const componentPortal = new ComponentPortal(ThyNotifyContainerComponent, null);
            containerRef = portalOutlet.attachComponentPortal(componentPortal);
            Object.assign(containerRef.instance, {
                initialState: {
                    placement
                }
            });
            containerRef.changeDetectorRef.detectChanges();
        }
        return containerRef;
    }
    formatOptions(options) {
        if (helpers.isString(options.detail)) {
            options = Object.assign(Object.assign({}, options), { detail: { link: '[详情]', content: options.detail } });
        }
        return Object.assign({}, NOTIFY_OPTION_DEFAULT, { id: this._lastNotifyId++ }, this.defaultConfig, options);
    }
}
ThyNotifyService.ɵfac = function ThyNotifyService_Factory(t) { return new (t || ThyNotifyService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc1.NotifyQueueStore), ɵngcc0.ɵɵinject(THY_NOTIFY_DEFAULT_OPTIONS)); };
ThyNotifyService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyNotifyService, factory: ThyNotifyService.ɵfac });
ThyNotifyService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: NotifyQueueStore },
    { type: undefined, decorators: [{ type: Inject, args: [THY_NOTIFY_DEFAULT_OPTIONS,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyNotifyService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc1.NotifyQueueStore }, { type: undefined, decorators: [{
                type: Inject,
                args: [THY_NOTIFY_DEFAULT_OPTIONS]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
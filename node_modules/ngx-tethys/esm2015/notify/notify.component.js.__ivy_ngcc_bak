import { Component, Input, HostBinding, HostListener, NgZone } from '@angular/core';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { NotifyQueueStore } from './notify-queue.store';
import { helpers } from 'ngx-tethys/util';
const ANIMATION_IN_DURATION = 100;
const ANIMATION_OUT_DURATION = 150;
const HIDE_STYLE = { transform: 'translateX(0)', opacity: 0, height: 0, paddingTop: 0, paddingBottom: 0, margin: 0 };
export class ThyNotifyComponent {
    constructor(_queueStore, _ngZone) {
        this._queueStore = _queueStore;
        this._ngZone = _ngZone;
        this.className = '';
        this.notifyIconName = '';
        this.extendContentClass = false;
        this.isShowDetail = false;
    }
    set thyOption(value) {
        this.option = value;
        const type = value.type;
        this.placement = value.placement || 'topRight';
        if (this.placement === 'topLeft' || this.placement === 'bottomLeft') {
            this.flyInOut = 'flyInOutLeft';
        }
        else {
            this.flyInOut = 'flyInOutRight';
        }
        this.className = `thy-notify thy-notify-${type}`;
    }
    ngOnInit() {
        const iconName = {
            success: 'check-circle-fill',
            info: 'info-circle-fill',
            warning: 'waring-fill',
            error: 'close-circle-fill'
        };
        this.notifyIconName = iconName[this.option.type];
        this._creatCloseTimer();
    }
    ngOnDestroy() {
        this._clearCloseTimer();
    }
    extendContent() {
        this.extendContentClass = true;
    }
    showDetailToggle() {
        this.isShowDetail = !this.isShowDetail;
    }
    closeNotify() {
        this._ngZone.runOutsideAngular(() => {
            this.flyInOut = 'componentHide';
            setTimeout(() => {
                this._queueStore.removeNotify(this.option.id, this.placement);
            }, ANIMATION_OUT_DURATION);
        });
    }
    triggerDetail() {
        if (helpers.isFunction(this.option.detail.action)) {
            this.option.detail.action();
        }
        if (this.option.detail.content) {
            this.showDetailToggle();
        }
    }
    mouseenter() {
        if (this.option.pauseOnHover) {
            this._clearCloseTimer();
        }
    }
    mouseleave() {
        if (this.option.pauseOnHover) {
            this._creatCloseTimer();
        }
    }
    _creatCloseTimer() {
        if (this.option.duration) {
            this.closeTimer = setInterval(() => {
                clearInterval(this.closeTimer);
                this.closeNotify();
            }, this.option.duration);
        }
    }
    _clearCloseTimer() {
        clearInterval(this.closeTimer);
    }
}
ThyNotifyComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-notify',
                template: "<ng-container *ngIf=\"!option.html\">\n  <a href=\"javascript:;\" class=\"thy-notify-close\" (click)=\"closeNotify()\">\n    <thy-icon thyIconName=\"close\"></thy-icon>\n  </a>\n  <div class=\"thy-notify-icon-container\">\n    <thy-icon [thyIconName]=\"notifyIconName\"></thy-icon>\n  </div>\n  <div class=\"thy-notify-main\">\n    <div class=\"thy-notify-title\">{{ option?.title }}</div>\n    <div\n      *ngIf=\"option?.detail || option?.content\"\n      class=\"thy-notify-content\"\n      [ngClass]=\"{ 'thy-notify-content--extend': extendContentClass === true }\"\n      (click)=\"extendContent()\"\n    >\n      {{ option?.content }}\n      <a href=\"javascript:;\" *ngIf=\"option?.detail\" class=\"link-secondary\" (click)=\"triggerDetail()\">{{ (option?.detail)['link'] }}</a>\n    </div>\n    <div class=\"thy-notify-detail\" *ngIf=\"isShowDetail\">{{ (option?.detail)['content'] }}</div>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"option?.html\">\n  <a href=\"javascript:;\" class=\"thy-notify-close\" (click)=\"closeNotify()\">\n    <thy-icon thyIconName=\"close\"></thy-icon>\n  </a>\n  <div class=\"thy-notify-main\">\n    <template [ngTemplateOutlet]=\"option?.html\"></template>\n  </div>\n</ng-container>\n",
                providers: [UpdateHostClassService],
                animations: [
                    trigger('flyInOut', [
                        state('flyInOutRight', style({ transform: 'translateX(0)', opacity: 1, height: '*' })),
                        transition('void => flyInOutRight', [
                            style({ transform: 'translateX(100%)', opacity: 0, height: '*' }),
                            animate(ANIMATION_IN_DURATION)
                        ]),
                        transition('flyInOutRight => componentHide', [animate(ANIMATION_OUT_DURATION, style(HIDE_STYLE))]),
                        transition('flyInOutRight => void', [animate(ANIMATION_IN_DURATION, style(HIDE_STYLE))]),
                        state('flyInOutLeft', style({ transform: 'translateX(0)', opacity: 1, height: '*' })),
                        transition('void => flyInOutLeft', [
                            style({ transform: 'translateX(-100%)', opacity: 0, height: '*' }),
                            animate(ANIMATION_IN_DURATION)
                        ]),
                        transition('flyInOutLeft => componentHide', [animate(ANIMATION_OUT_DURATION, style(HIDE_STYLE))]),
                        transition('flyInOutLeft => void', [animate(ANIMATION_IN_DURATION, style(HIDE_STYLE))]),
                        state('componentHide', style(HIDE_STYLE))
                    ])
                ]
            },] }
];
ThyNotifyComponent.ctorParameters = () => [
    { type: NotifyQueueStore },
    { type: NgZone }
];
ThyNotifyComponent.propDecorators = {
    flyInOut: [{ type: HostBinding, args: ['@flyInOut',] }],
    className: [{ type: HostBinding, args: ['class',] }],
    thyOption: [{ type: Input }],
    mouseenter: [{ type: HostListener, args: ['mouseenter',] }],
    mouseleave: [{ type: HostListener, args: ['mouseleave',] }]
};
//# sourceMappingURL=data:application/json;base64,
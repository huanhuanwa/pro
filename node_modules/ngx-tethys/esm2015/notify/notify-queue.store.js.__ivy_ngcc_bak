import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Store, Action } from 'ngx-tethys/store';
export const notifyQueueInitialState = {
    topLeftQueue: [],
    topRightQueue: [],
    bottomLeftQueue: [],
    bottomRightQueue: []
};
export class NotifyQueueStore extends Store {
    constructor() {
        super(notifyQueueInitialState);
    }
    static topRightSelector(state) {
        return state.topRightQueue;
    }
    static topLeftSelector(state) {
        return state.topLeftQueue;
    }
    static bottomLeftSelector(state) {
        return state.bottomLeftQueue;
    }
    static bottomRightSelector(state) {
        return state.bottomRightQueue;
    }
    convertQueueKey(placement) {
        let key;
        if (placement === 'topLeft') {
            key = 'topLeftQueue';
        }
        else if (placement === 'topRight') {
            key = 'topRightQueue';
        }
        else if (placement === 'bottomLeft') {
            key = 'bottomLeftQueue';
        }
        else if (placement === 'bottomRight') {
            key = 'bottomRightQueue';
        }
        return key;
    }
    addNotify(placement, options) {
        const key = this.convertQueueKey(placement);
        const state = this.snapshot;
        if (state[key].length > options.maxStack) {
            state[key].shift();
        }
        state[key].push(options);
        this.next(state);
    }
    removeNotify(id, placement) {
        const state = this.snapshot;
        if (placement) {
            const queueKey = this.convertQueueKey(placement);
            if (state.hasOwnProperty(queueKey) && state[queueKey].length) {
                state[queueKey] = state[queueKey].filter((item) => {
                    return item.id !== id;
                });
            }
        }
        else {
            Object.keys(state).forEach(queueKey => {
                if (state.hasOwnProperty(queueKey) && state[queueKey].length) {
                    state[queueKey] = state[queueKey].filter((item) => {
                        return item.id !== id;
                    });
                }
            });
        }
        this.next(state);
    }
}
NotifyQueueStore.decorators = [
    { type: Injectable }
];
NotifyQueueStore.ctorParameters = () => [];
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", void 0)
], NotifyQueueStore.prototype, "addNotify", null);
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, String]),
    __metadata("design:returntype", void 0)
], NotifyQueueStore.prototype, "removeNotify", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LXF1ZXVlLnN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vdGlmeS9ub3RpZnktcXVldWUuc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQVVqRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBcUI7SUFDckQsWUFBWSxFQUFFLEVBQUU7SUFDaEIsYUFBYSxFQUFFLEVBQUU7SUFDakIsZUFBZSxFQUFFLEVBQUU7SUFDbkIsZ0JBQWdCLEVBQUUsRUFBRTtDQUN2QixDQUFDO0FBR0YsTUFBTSxPQUFPLGdCQUFpQixTQUFRLEtBQXVCO0lBY3pEO1FBQ0ksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDbkMsQ0FBQztJQWZELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUF1QjtRQUMzQyxPQUFPLEtBQUssQ0FBQyxhQUFhLENBQUM7SUFDL0IsQ0FBQztJQUNELE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBdUI7UUFDMUMsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDO0lBQzlCLENBQUM7SUFDRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBdUI7UUFDN0MsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDO0lBQ2pDLENBQUM7SUFDRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBdUI7UUFDOUMsT0FBTyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7SUFDbEMsQ0FBQztJQU1PLGVBQWUsQ0FBQyxTQUEwQjtRQUM5QyxJQUFJLEdBQVcsQ0FBQztRQUNoQixJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDekIsR0FBRyxHQUFHLGNBQWMsQ0FBQztTQUN4QjthQUFNLElBQUksU0FBUyxLQUFLLFVBQVUsRUFBRTtZQUNqQyxHQUFHLEdBQUcsZUFBZSxDQUFDO1NBQ3pCO2FBQU0sSUFBSSxTQUFTLEtBQUssWUFBWSxFQUFFO1lBQ25DLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQztTQUMzQjthQUFNLElBQUksU0FBUyxLQUFLLGFBQWEsRUFBRTtZQUNwQyxHQUFHLEdBQUcsa0JBQWtCLENBQUM7U0FDNUI7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFHRCxTQUFTLENBQUMsU0FBMEIsRUFBRSxPQUF5QjtRQUMzRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDNUIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDdEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3RCO1FBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFHRCxZQUFZLENBQUMsRUFBVSxFQUFFLFNBQTJCO1FBQ2hELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDNUIsSUFBSSxTQUFTLEVBQUU7WUFDWCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pELElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFO2dCQUMxRCxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO29CQUNuRCxPQUFPLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUMxQixDQUFDLENBQUMsQ0FBQzthQUNOO1NBQ0o7YUFBTTtZQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNsQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRTtvQkFDMUQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTt3QkFDbkQsT0FBTyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQztvQkFDMUIsQ0FBQyxDQUFDLENBQUM7aUJBQ047WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixDQUFDOzs7WUFoRUosVUFBVTs7O0FBa0NQO0lBREMsTUFBTSxFQUFFOzs7O2lEQVNSO0FBR0Q7SUFEQyxNQUFNLEVBQUU7Ozs7b0RBb0JSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3RvcmUsIEFjdGlvbiB9IGZyb20gJ25neC10ZXRoeXMvc3RvcmUnO1xuaW1wb3J0IHsgTm90aWZ5UGxhY2VtZW50LCBUaHlOb3RpZnlPcHRpb25zIH0gZnJvbSAnLi9ub3RpZnktb3B0aW9uLmludGVyZmFjZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZ5UXVldWVTdGF0ZSB7XG4gICAgdG9wTGVmdFF1ZXVlOiBUaHlOb3RpZnlPcHRpb25zW107XG4gICAgdG9wUmlnaHRRdWV1ZTogVGh5Tm90aWZ5T3B0aW9uc1tdO1xuICAgIGJvdHRvbUxlZnRRdWV1ZTogVGh5Tm90aWZ5T3B0aW9uc1tdO1xuICAgIGJvdHRvbVJpZ2h0UXVldWU6IFRoeU5vdGlmeU9wdGlvbnNbXTtcbn1cblxuZXhwb3J0IGNvbnN0IG5vdGlmeVF1ZXVlSW5pdGlhbFN0YXRlOiBOb3RpZnlRdWV1ZVN0YXRlID0ge1xuICAgIHRvcExlZnRRdWV1ZTogW10sXG4gICAgdG9wUmlnaHRRdWV1ZTogW10sXG4gICAgYm90dG9tTGVmdFF1ZXVlOiBbXSxcbiAgICBib3R0b21SaWdodFF1ZXVlOiBbXVxufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmeVF1ZXVlU3RvcmUgZXh0ZW5kcyBTdG9yZTxOb3RpZnlRdWV1ZVN0YXRlPiB7XG4gICAgc3RhdGljIHRvcFJpZ2h0U2VsZWN0b3Ioc3RhdGU6IE5vdGlmeVF1ZXVlU3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnRvcFJpZ2h0UXVldWU7XG4gICAgfVxuICAgIHN0YXRpYyB0b3BMZWZ0U2VsZWN0b3Ioc3RhdGU6IE5vdGlmeVF1ZXVlU3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnRvcExlZnRRdWV1ZTtcbiAgICB9XG4gICAgc3RhdGljIGJvdHRvbUxlZnRTZWxlY3RvcihzdGF0ZTogTm90aWZ5UXVldWVTdGF0ZSkge1xuICAgICAgICByZXR1cm4gc3RhdGUuYm90dG9tTGVmdFF1ZXVlO1xuICAgIH1cbiAgICBzdGF0aWMgYm90dG9tUmlnaHRTZWxlY3RvcihzdGF0ZTogTm90aWZ5UXVldWVTdGF0ZSkge1xuICAgICAgICByZXR1cm4gc3RhdGUuYm90dG9tUmlnaHRRdWV1ZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIobm90aWZ5UXVldWVJbml0aWFsU3RhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29udmVydFF1ZXVlS2V5KHBsYWNlbWVudDogTm90aWZ5UGxhY2VtZW50KTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGtleTogc3RyaW5nO1xuICAgICAgICBpZiAocGxhY2VtZW50ID09PSAndG9wTGVmdCcpIHtcbiAgICAgICAgICAgIGtleSA9ICd0b3BMZWZ0UXVldWUnO1xuICAgICAgICB9IGVsc2UgaWYgKHBsYWNlbWVudCA9PT0gJ3RvcFJpZ2h0Jykge1xuICAgICAgICAgICAga2V5ID0gJ3RvcFJpZ2h0UXVldWUnO1xuICAgICAgICB9IGVsc2UgaWYgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbUxlZnQnKSB7XG4gICAgICAgICAgICBrZXkgPSAnYm90dG9tTGVmdFF1ZXVlJztcbiAgICAgICAgfSBlbHNlIGlmIChwbGFjZW1lbnQgPT09ICdib3R0b21SaWdodCcpIHtcbiAgICAgICAgICAgIGtleSA9ICdib3R0b21SaWdodFF1ZXVlJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cblxuICAgIEBBY3Rpb24oKVxuICAgIGFkZE5vdGlmeShwbGFjZW1lbnQ6IE5vdGlmeVBsYWNlbWVudCwgb3B0aW9uczogVGh5Tm90aWZ5T3B0aW9ucykge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmNvbnZlcnRRdWV1ZUtleShwbGFjZW1lbnQpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc25hcHNob3Q7XG4gICAgICAgIGlmIChzdGF0ZVtrZXldLmxlbmd0aCA+IG9wdGlvbnMubWF4U3RhY2spIHtcbiAgICAgICAgICAgIHN0YXRlW2tleV0uc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZVtrZXldLnB1c2gob3B0aW9ucyk7XG4gICAgICAgIHRoaXMubmV4dChzdGF0ZSk7XG4gICAgfVxuXG4gICAgQEFjdGlvbigpXG4gICAgcmVtb3ZlTm90aWZ5KGlkOiBudW1iZXIsIHBsYWNlbWVudD86IE5vdGlmeVBsYWNlbWVudCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc25hcHNob3Q7XG4gICAgICAgIGlmIChwbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXVlS2V5ID0gdGhpcy5jb252ZXJ0UXVldWVLZXkocGxhY2VtZW50KTtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oYXNPd25Qcm9wZXJ0eShxdWV1ZUtleSkgJiYgc3RhdGVbcXVldWVLZXldLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN0YXRlW3F1ZXVlS2V5XSA9IHN0YXRlW3F1ZXVlS2V5XS5maWx0ZXIoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZCAhPT0gaWQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzdGF0ZSkuZm9yRWFjaChxdWV1ZUtleSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhc093blByb3BlcnR5KHF1ZXVlS2V5KSAmJiBzdGF0ZVtxdWV1ZUtleV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlW3F1ZXVlS2V5XSA9IHN0YXRlW3F1ZXVlS2V5XS5maWx0ZXIoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaWQgIT09IGlkO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5leHQoc3RhdGUpO1xuICAgIH1cbn1cbiJdfQ==
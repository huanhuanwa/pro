import { Component, ChangeDetectionStrategy, ViewChild, ElementRef, Inject, EventEmitter, ChangeDetectorRef, HostBinding } from '@angular/core';
import { CdkPortalOutlet } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ThyDialogConfig } from './dialog.config';
import { thyDialogAnimations } from './dialog-animations';
import { ThyClickPositioner } from 'ngx-tethys/core';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { ThyAbstractOverlayContainer } from 'ngx-tethys/core';
import { dialogUpperOverlayOptions } from './dialog.options';
import { filter } from 'rxjs/operators';
export class ThyDialogContainerComponent extends ThyAbstractOverlayContainer {
    constructor(elementRef, document, config, changeDetectorRef, clickPositioner, focusTrapFactory) {
        super(dialogUpperOverlayOptions, changeDetectorRef);
        this.elementRef = elementRef;
        this.document = document;
        this.config = config;
        this.clickPositioner = clickPositioner;
        this.focusTrapFactory = focusTrapFactory;
        /** State of the dialog animation. */
        this.animationState = 'void';
        /** Emits when an animation state changes. */
        this.animationStateChanged = new EventEmitter();
        /** ID of the element that should be considered as the dialog's label. */
        this.ariaLabelledBy = null;
        /** Element that was focused before the dialog was opened. Save this to restore upon close. */
        this.elementFocusedBeforeDialogWasOpened = null;
        this.animationOpeningDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === 'void';
        }));
        this.animationClosingDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === 'exit';
        }));
    }
    savePreviouslyFocusedElement() {
        if (this.document) {
            this.elementFocusedBeforeDialogWasOpened = this.document.activeElement;
            // Note that there is no focus method when rendering on the server.
            if (this.elementRef.nativeElement.focus) {
                // Move focus onto the dialog immediately in order to prevent the user from accidentally
                // opening multiple dialogs at the same time. Needs to be async, because the element
                // may not be focusable immediately.
                Promise.resolve().then(() => this.elementRef.nativeElement.focus());
            }
        }
    }
    /** Moves the focus inside the focus trap. */
    trapFocus() {
        const element = this.elementRef.nativeElement;
        if (!this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(element);
        }
        // If we were to attempt to focus immediately, then the content of the dialog would not yet be
        // ready in instances where change detection has to run first. To deal with this, we simply
        // wait for the microtask queue to be empty.
        if (this.config.autoFocus) {
            this.focusTrap.focusInitialElementWhenReady();
        }
        else {
            const activeElement = this.document.activeElement;
            // Otherwise ensure that focus is on the dialog container. It's possible that a different
            // component tried to move focus while the open animation was running. See:
            // https://github.com/angular/components/issues/16215. Note that we only want to do this
            // if the focus isn't inside the dialog already, because it's possible that the consumer
            // turned off `autoFocus` in order to move focus themselves.
            if (activeElement !== element && !element.contains(activeElement)) {
                element.focus();
            }
        }
    }
    restoreFocus() {
        const toFocus = this.elementFocusedBeforeDialogWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (this.config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {
            toFocus.focus();
        }
        if (this.focusTrap) {
            this.focusTrap.destroy();
        }
    }
    setTransformOrigin() {
        this.clickPositioner.runTaskUseLastPosition(lastPosition => {
            if (lastPosition) {
                const containerElement = this.elementRef.nativeElement;
                const transformOrigin = `${lastPosition.x - containerElement.offsetLeft}px ${lastPosition.y -
                    containerElement.offsetTop}px 0px`;
                containerElement.style['transform-origin'] = transformOrigin;
                // 手动修改动画状态为从 void 到 enter, 开启动画
            }
            this.animationState = 'enter';
        });
    }
    beforeAttachPortal() {
        this.setTransformOrigin();
        this.savePreviouslyFocusedElement();
    }
    /** Callback, invoked whenever an animation on the host completes. */
    onAnimationDone(event) {
        if (event.toState === 'void') {
            this.trapFocus();
        }
        else if (event.toState === 'exit') {
            this.restoreFocus();
        }
        this.animationStateChanged.emit(event);
    }
    /** Callback, invoked when an animation on the host starts. */
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    ngOnDestroy() {
        super.destroy();
    }
}
ThyDialogContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-dialog-container',
                template: `
        <ng-template cdkPortalOutlet></ng-template>
    `,
                // Using OnPush for dialogs caused some sync issues, e.g. custom ngModel can't to detect changes
                // Disabled until we can track them down.
                changeDetection: ChangeDetectionStrategy.Default,
                animations: [thyDialogAnimations.dialogContainer],
                host: {
                    class: 'thy-dialog-container',
                    tabindex: '-1',
                    'aria-modal': 'true',
                    '[attr.id]': 'id',
                    '[attr.role]': 'config.role',
                    '[attr.aria-labelledby]': 'config.ariaLabel ? null : ariaLabelledBy',
                    '[attr.aria-label]': 'config.ariaLabel',
                    '[attr.aria-describedby]': 'config.ariaDescribedBy || null',
                    '[@dialogContainer]': 'animationState',
                    '(@dialogContainer.start)': 'onAnimationStart($event)',
                    '(@dialogContainer.done)': 'onAnimationDone($event)'
                }
            },] }
];
ThyDialogContainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ThyDialogConfig },
    { type: ChangeDetectorRef },
    { type: ThyClickPositioner },
    { type: FocusTrapFactory }
];
ThyDialogContainerComponent.propDecorators = {
    portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }],
    id: [{ type: HostBinding, args: [`attr.id`,] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Injectable, Injector, Optional, Inject } from '@angular/core';
import { of } from 'rxjs';
import { ComponentPortal } from '@angular/cdk/portal';
import { ThyDialogConfig, ThyDialogSizes, THY_DIALOG_DEFAULT_OPTIONS } from './dialog.config';
import { Overlay } from '@angular/cdk/overlay';
import { ThyDialogContainerComponent } from './dialog-container.component';
import { ThyDialogRef, ThyInternalDialogRef } from './dialog-ref';
import { Directionality } from '@angular/cdk/bidi';
import { ThyClickPositioner } from 'ngx-tethys/core';
import { ThyConfirmComponent } from './confirm/confirm.component';
import { ThyAbstractOverlayService } from 'ngx-tethys/core';
import { dialogUpperOverlayOptions } from './dialog.options';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "./dialog.config";
import * as i3 from "ngx-tethys/core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
import * as ɵngcc2 from 'ngx-tethys/core';
import * as ɵngcc3 from './dialog.config';
export class ThyDialog extends ThyAbstractOverlayService {
    constructor(overlay, injector, defaultConfig, clickPositioner) {
        super(dialogUpperOverlayOptions, overlay, injector, defaultConfig);
        clickPositioner.initialize();
    }
    buildOverlayConfig(config) {
        const size = config.size || ThyDialogSizes.md;
        const overlayConfig = this.buildBaseOverlayConfig(config, [`dialog-${size}`]);
        overlayConfig.positionStrategy = this.overlay.position().global();
        overlayConfig.scrollStrategy = config.scrollStrategy || this.overlay.scrollStrategies.block();
        return overlayConfig;
    }
    attachUpperOverlayContainer(overlay, config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injector = Injector.create({
            parent: userInjector || this.injector,
            providers: [{ provide: ThyDialogConfig, useValue: config }]
        });
        const containerPortal = new ComponentPortal(ThyDialogContainerComponent, config.viewContainerRef, injector);
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    createUpperOverlayRef(overlayRef, containerInstance, config) {
        return new ThyInternalDialogRef(overlayRef, containerInstance, config);
    }
    createInjector(config, dialogRef, dialogContainer) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injectionTokens = [
            { provide: ThyDialogContainerComponent, useValue: dialogContainer },
            {
                provide: ThyDialogRef,
                useValue: dialogRef
            }
        ];
        if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {
            injectionTokens.push({
                provide: Directionality,
                useValue: {
                    value: config.direction,
                    change: of()
                }
            });
        }
        return Injector.create({ parent: userInjector || this.injector, providers: injectionTokens });
    }
    open(componentOrTemplateRef, config) {
        const dialogRef = this.openUpperOverlay(componentOrTemplateRef, config);
        const dialogRefInternal = dialogRef;
        dialogRefInternal.updateSizeAndPosition(dialogRef.containerInstance.config.width, dialogRef.containerInstance.config.height, dialogRef.containerInstance.config.position);
        return dialogRef;
    }
    confirm(options) {
        return this.open(ThyConfirmComponent, {
            initialState: {
                options: options
            }
        });
    }
    getDialogById(id) {
        return this.getUpperOverlayById(id);
    }
    /**
     * Finds the closest ThyDialogRef to an element by looking at the DOM.
     */
    getClosestDialog(element) {
        let parent = element.parentElement;
        while (parent && !parent.classList.contains('thy-dialog-container')) {
            parent = parent.parentElement;
        }
        if (parent && parent.id) {
            return this.getDialogById(parent.id);
        }
        return null;
    }
    ngOnDestroy() {
        this.dispose();
    }
}
ThyDialog.ɵfac = function ThyDialog_Factory(t) { return new (t || ThyDialog)(ɵngcc0.ɵɵinject(ɵngcc1.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(THY_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(ɵngcc2.ThyClickPositioner)); };
ThyDialog.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyDialog_Factory() { return new ThyDialog(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i2.THY_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(i3.ThyClickPositioner)); }, token: ThyDialog, providedIn: "root" });
ThyDialog.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: ThyDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [THY_DIALOG_DEFAULT_OPTIONS,] }] },
    { type: ThyClickPositioner }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDialog, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc3.ThyDialogConfig, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [THY_DIALOG_DEFAULT_OPTIONS]
            }] }, { type: ɵngcc2.ThyClickPositioner }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { Component, Input, Output, EventEmitter, ContentChild, TemplateRef, HostBinding, Optional, ElementRef } from '@angular/core';
import { ThyDialog } from '../dialog.service';
import { ThyDialogContainerComponent } from '../dialog-container.component';
import { ThyTranslate } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../dialog.service';
import * as ɵngcc2 from 'ngx-tethys/core';
import * as ɵngcc3 from '../dialog-container.component';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from 'ngx-tethys/icon';

const _c0 = ["dialogHeader"];
function DialogHeaderComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "template", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.headerTemplate);
} }
function DialogHeaderComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "h3", 3);
    ɵngcc0.ɵɵelement(1, "thy-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 5);
    ɵngcc0.ɵɵlistener("click", function DialogHeaderComponent_ng_template_1_Template_button_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.close($event); });
    ɵngcc0.ɵɵelement(4, "thy-icon", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r2.thyIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.thyTitle);
} }
export class DialogHeaderComponent {
    constructor(elementRef, dialog, translate, dialogContainer) {
        this.elementRef = elementRef;
        this.dialog = dialog;
        this.translate = translate;
        this.dialogContainer = dialogContainer;
        this.isDialogHeader = true;
        this.isDialogHeaderLg = false;
        this.thyOnClose = new EventEmitter();
    }
    set thySize(value) {
        this.isDialogHeaderLg = value === 'lg';
    }
    set thyTitleTranslationKey(key) {
        if (key && !this.thyTitle) {
            this.thyTitle = this.translate.instant(key);
        }
    }
    ngOnInit() {
        if (!this.dialogContainer) {
            // When this directive is included in a dialog via TemplateRef (rather than being
            // in a Component), the ThyDialogContainerComponent isn't available via injection because embedded
            // views cannot be given a custom injector. Instead, we look up the ThyDialogContainerComponent by
            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't
            // be resolved at constructor time.
            const dialogRef = this.dialog.getClosestDialog(this.elementRef.nativeElement);
            this.dialogContainer = dialogRef ? dialogRef.containerInstance : null;
        }
        // change in next microtask avoid throw ExpressionChangedAfterItHasBeenCheckedError
        // because sub component change parent's HostBinding property (ariaLabelledBy)
        Promise.resolve().then(() => {
            if (this.dialogContainer) {
                this.dialogContainer.ariaLabelledBy = this.thyTitle;
            }
        });
    }
    close(event) {
        if (this.thyOnClose.observers.length > 0) {
            this.thyOnClose.emit(event);
        }
        else {
            this.dialog.close();
        }
    }
}
DialogHeaderComponent.ɵfac = function DialogHeaderComponent_Factory(t) { return new (t || DialogHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyTranslate), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ThyDialogContainerComponent, 8)); };
DialogHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DialogHeaderComponent, selectors: [["thy-dialog-header"]], contentQueries: function DialogHeaderComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
    } }, hostVars: 4, hostBindings: function DialogHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("dialog-header", ctx.isDialogHeader)("dialog-header-lg", ctx.isDialogHeaderLg);
    } }, inputs: { thySize: "thySize", thyTitleTranslationKey: "thyTitleTranslationKey", thyTitle: "thyTitle", thyIcon: "thyIcon" }, outputs: { thyOnClose: "thyOnClose" }, exportAs: ["thyDialogHeader"], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["defaultHeader", ""], [3, "ngTemplateOutlet"], [1, "dialog-title"], [3, "thyIconName"], ["type", "button", 1, "close", 3, "click"], ["thyIconName", "close-bold"]], template: function DialogHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DialogHeaderComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, DialogHeaderComponent_ng_template_1_Template, 5, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerTemplate)("ngIfElse", _r1);
    } }, directives: [ɵngcc4.NgIf, ɵngcc4.NgTemplateOutlet, ɵngcc5.ThyIconComponent], encapsulation: 2 });
DialogHeaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyDialog },
    { type: ThyTranslate },
    { type: ThyDialogContainerComponent, decorators: [{ type: Optional }] }
];
DialogHeaderComponent.propDecorators = {
    isDialogHeader: [{ type: HostBinding, args: [`class.dialog-header`,] }],
    isDialogHeaderLg: [{ type: HostBinding, args: [`class.dialog-header-lg`,] }],
    headerTemplate: [{ type: ContentChild, args: ['dialogHeader',] }],
    thyTitle: [{ type: Input }],
    thySize: [{ type: Input }],
    thyTitleTranslationKey: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thyOnClose: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DialogHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'thy-dialog-header',
                template: "<ng-container *ngIf=\"headerTemplate; else defaultHeader\">\n  <template [ngTemplateOutlet]=\"headerTemplate\"></template>\n</ng-container>\n<ng-template #defaultHeader>\n  <h3 class=\"dialog-title\"><thy-icon [thyIconName]=\"thyIcon\"></thy-icon>{{ thyTitle }}</h3>\n  <button type=\"button\" class=\"close\" (click)=\"close($event)\">\n    <thy-icon thyIconName=\"close-bold\"></thy-icon>\n  </button>\n</ng-template>\n",
                // changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'thyDialogHeader'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ThyDialog }, { type: ɵngcc2.ThyTranslate }, { type: ɵngcc3.ThyDialogContainerComponent, decorators: [{
                type: Optional
            }] }]; }, { isDialogHeader: [{
            type: HostBinding,
            args: [`class.dialog-header`]
        }], isDialogHeaderLg: [{
            type: HostBinding,
            args: [`class.dialog-header-lg`]
        }], thyOnClose: [{
            type: Output
        }], thySize: [{
            type: Input
        }], thyTitleTranslationKey: [{
            type: Input
        }], thyTitle: [{
            type: Input
        }], headerTemplate: [{
            type: ContentChild,
            args: ['dialogHeader']
        }], thyIcon: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWhlYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsb2cvaGVhZGVyL2RpYWxvZy1oZWFkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ1osWUFBWSxFQUNaLFdBQVcsRUFFWCxXQUFXLEVBRVgsUUFBUSxFQUNSLFVBQVUsRUFDYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVMvQyxNQUFNLE9BQU8scUJBQXFCO0FBQUcsSUF5QmpDLFlBQ1ksVUFBc0IsRUFDdEIsTUFBaUIsRUFDakIsU0FBdUIsRUFDWCxlQUE0QztBQUNyRSxRQUphLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUN2QixXQUFNLEdBQU4sTUFBTSxDQUFXO0FBQUMsUUFDbEIsY0FBUyxHQUFULFNBQVMsQ0FBYztBQUFDLFFBQ1osb0JBQWUsR0FBZixlQUFlLENBQTZCO0FBQ3hFLFFBN0J3QyxtQkFBYyxHQUFHLElBQUksQ0FBQztBQUM5RCxRQUMyQyxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFDcEUsUUFtQmMsZUFBVSxHQUF3QixJQUFJLFlBQVksRUFBUyxDQUFDO0FBQzFFLElBTU8sQ0FBQztBQUNSLElBckJJLElBQWEsT0FBTyxDQUFDLEtBQWtCO0FBQzNDLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDL0MsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUNJLHNCQUFzQixDQUFDLEdBQVc7QUFDMUMsUUFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDbkMsWUFBWSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQVlJLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQ25DLFlBQVksaUZBQWlGO0FBQzdGLFlBQVksa0dBQWtHO0FBQzlHLFlBQVksa0dBQWtHO0FBQzlHLFlBQVksb0ZBQW9GO0FBQ2hHLFlBQVksbUNBQW1DO0FBQy9DLFlBQVksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBOEIsQ0FBQztBQUN2SCxZQUFZLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNsRixTQUFTO0FBQ1QsUUFDUSxtRkFBbUY7QUFDM0YsUUFBUSw4RUFBOEU7QUFDdEYsUUFBUSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNwQyxZQUFZLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUN0QyxnQkFBZ0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNwRSxhQUFhO0FBQ2IsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0ksS0FBSyxDQUFDLEtBQWE7QUFDdkIsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDbEQsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNoQyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7aURBakVDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsbUJBQW1CLGtCQUM3Qjs7NkJBQTZDLGtCQUM3Qzs7O1VBQW1ELGlCQUNuRCxRQUFRLEVBQUUsaUJBQWlCLGNBQzlCOzs7Ozs7Ozs7MEdBQ0k7QUFBQztBQUErQyxZQWJqRCxVQUFVO0FBQ1gsWUFDTSxTQUFTO0FBQUksWUFFYixZQUFZO0FBQUksWUFEaEIsMkJBQTJCLHVCQXVDM0IsUUFBUTtBQUFNO0FBQUc7QUFBeUMsNkJBNUI5RCxXQUFXLFNBQUMscUJBQXFCO0FBQU8sK0JBRXhDLFdBQVcsU0FBQyx3QkFBd0I7QUFBTyw2QkFFM0MsWUFBWSxTQUFDLGNBQWM7QUFDM0IsdUJBRUEsS0FBSztBQUFLLHNCQUVWLEtBQUs7QUFBSyxxQ0FJVixLQUFLO0FBQ1Isc0JBTUcsS0FBSztBQUFLLHlCQUVWLE1BQU07QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBPbkluaXQsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgT3B0aW9uYWwsXG4gICAgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeURpYWxvZyB9IGZyb20gJy4uL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IFRoeURpYWxvZ0NvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZy1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRoeVRyYW5zbGF0ZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5pbXBvcnQgeyBUaHlJbnRlcm5hbERpYWxvZ1JlZiB9IGZyb20gJy4uL2RpYWxvZy1yZWYnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1kaWFsb2ctaGVhZGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhbG9nLWhlYWRlci5jb21wb25lbnQuaHRtbCcsXG4gICAgLy8gY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZXhwb3J0QXM6ICd0aHlEaWFsb2dIZWFkZXInXG59KVxuZXhwb3J0IGNsYXNzIERpYWxvZ0hlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy5kaWFsb2ctaGVhZGVyYCkgaXNEaWFsb2dIZWFkZXIgPSB0cnVlO1xuXG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy5kaWFsb2ctaGVhZGVyLWxnYCkgaXNEaWFsb2dIZWFkZXJMZyA9IGZhbHNlO1xuXG4gICAgQENvbnRlbnRDaGlsZCgnZGlhbG9nSGVhZGVyJylcbiAgICBwdWJsaWMgaGVhZGVyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBASW5wdXQoKSB0aHlUaXRsZTogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgc2V0IHRoeVNpemUodmFsdWU6ICdsZycgfCAnbWQnKSB7XG4gICAgICAgIHRoaXMuaXNEaWFsb2dIZWFkZXJMZyA9IHZhbHVlID09PSAnbGcnO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVRpdGxlVHJhbnNsYXRpb25LZXkoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGtleSAmJiAhdGhpcy50aHlUaXRsZSkge1xuICAgICAgICAgICAgdGhpcy50aHlUaXRsZSA9IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpIHRoeUljb246IHN0cmluZztcblxuICAgIEBPdXRwdXQoKSB0aHlPbkNsb3NlOiBFdmVudEVtaXR0ZXI8RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxFdmVudD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgZGlhbG9nOiBUaHlEaWFsb2csXG4gICAgICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUaHlUcmFuc2xhdGUsXG4gICAgICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZGlhbG9nQ29udGFpbmVyOiBUaHlEaWFsb2dDb250YWluZXJDb21wb25lbnRcbiAgICApIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpYWxvZ0NvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gV2hlbiB0aGlzIGRpcmVjdGl2ZSBpcyBpbmNsdWRlZCBpbiBhIGRpYWxvZyB2aWEgVGVtcGxhdGVSZWYgKHJhdGhlciB0aGFuIGJlaW5nXG4gICAgICAgICAgICAvLyBpbiBhIENvbXBvbmVudCksIHRoZSBUaHlEaWFsb2dDb250YWluZXJDb21wb25lbnQgaXNuJ3QgYXZhaWxhYmxlIHZpYSBpbmplY3Rpb24gYmVjYXVzZSBlbWJlZGRlZFxuICAgICAgICAgICAgLy8gdmlld3MgY2Fubm90IGJlIGdpdmVuIGEgY3VzdG9tIGluamVjdG9yLiBJbnN0ZWFkLCB3ZSBsb29rIHVwIHRoZSBUaHlEaWFsb2dDb250YWluZXJDb21wb25lbnQgYnlcbiAgICAgICAgICAgIC8vIElELiBUaGlzIG11c3Qgb2NjdXIgaW4gYG9uSW5pdGAsIGFzIHRoZSBJRCBiaW5kaW5nIGZvciB0aGUgZGlhbG9nIGNvbnRhaW5lciB3b24ndFxuICAgICAgICAgICAgLy8gYmUgcmVzb2x2ZWQgYXQgY29uc3RydWN0b3IgdGltZS5cbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nLmdldENsb3Nlc3REaWFsb2codGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpIGFzIFRoeUludGVybmFsRGlhbG9nUmVmPGFueT47XG4gICAgICAgICAgICB0aGlzLmRpYWxvZ0NvbnRhaW5lciA9IGRpYWxvZ1JlZiA/IGRpYWxvZ1JlZi5jb250YWluZXJJbnN0YW5jZSA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGFuZ2UgaW4gbmV4dCBtaWNyb3Rhc2sgYXZvaWQgdGhyb3cgRXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWRFcnJvclxuICAgICAgICAvLyBiZWNhdXNlIHN1YiBjb21wb25lbnQgY2hhbmdlIHBhcmVudCdzIEhvc3RCaW5kaW5nIHByb3BlcnR5IChhcmlhTGFiZWxsZWRCeSlcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5kaWFsb2dDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ0NvbnRhaW5lci5hcmlhTGFiZWxsZWRCeSA9IHRoaXMudGh5VGl0bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsb3NlKGV2ZW50PzogRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudGh5T25DbG9zZS5vYnNlcnZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy50aHlPbkNsb3NlLmVtaXQoZXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kaWFsb2cuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
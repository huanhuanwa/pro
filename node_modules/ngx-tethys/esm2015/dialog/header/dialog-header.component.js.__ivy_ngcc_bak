import { Component, Input, Output, EventEmitter, ContentChild, TemplateRef, HostBinding, Optional, ElementRef } from '@angular/core';
import { ThyDialog } from '../dialog.service';
import { ThyDialogContainerComponent } from '../dialog-container.component';
import { ThyTranslate } from 'ngx-tethys/core';
export class DialogHeaderComponent {
    constructor(elementRef, dialog, translate, dialogContainer) {
        this.elementRef = elementRef;
        this.dialog = dialog;
        this.translate = translate;
        this.dialogContainer = dialogContainer;
        this.isDialogHeader = true;
        this.isDialogHeaderLg = false;
        this.thyOnClose = new EventEmitter();
    }
    set thySize(value) {
        this.isDialogHeaderLg = value === 'lg';
    }
    set thyTitleTranslationKey(key) {
        if (key && !this.thyTitle) {
            this.thyTitle = this.translate.instant(key);
        }
    }
    ngOnInit() {
        if (!this.dialogContainer) {
            // When this directive is included in a dialog via TemplateRef (rather than being
            // in a Component), the ThyDialogContainerComponent isn't available via injection because embedded
            // views cannot be given a custom injector. Instead, we look up the ThyDialogContainerComponent by
            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't
            // be resolved at constructor time.
            const dialogRef = this.dialog.getClosestDialog(this.elementRef.nativeElement);
            this.dialogContainer = dialogRef ? dialogRef.containerInstance : null;
        }
        // change in next microtask avoid throw ExpressionChangedAfterItHasBeenCheckedError
        // because sub component change parent's HostBinding property (ariaLabelledBy)
        Promise.resolve().then(() => {
            if (this.dialogContainer) {
                this.dialogContainer.ariaLabelledBy = this.thyTitle;
            }
        });
    }
    close(event) {
        if (this.thyOnClose.observers.length > 0) {
            this.thyOnClose.emit(event);
        }
        else {
            this.dialog.close();
        }
    }
}
DialogHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-dialog-header',
                template: "<ng-container *ngIf=\"headerTemplate; else defaultHeader\">\n  <template [ngTemplateOutlet]=\"headerTemplate\"></template>\n</ng-container>\n<ng-template #defaultHeader>\n  <h3 class=\"dialog-title\"><thy-icon [thyIconName]=\"thyIcon\"></thy-icon>{{ thyTitle }}</h3>\n  <button type=\"button\" class=\"close\" (click)=\"close($event)\">\n    <thy-icon thyIconName=\"close-bold\"></thy-icon>\n  </button>\n</ng-template>\n",
                // changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'thyDialogHeader'
            },] }
];
DialogHeaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyDialog },
    { type: ThyTranslate },
    { type: ThyDialogContainerComponent, decorators: [{ type: Optional }] }
];
DialogHeaderComponent.propDecorators = {
    isDialogHeader: [{ type: HostBinding, args: [`class.dialog-header`,] }],
    isDialogHeaderLg: [{ type: HostBinding, args: [`class.dialog-header-lg`,] }],
    headerTemplate: [{ type: ContentChild, args: ['dialogHeader',] }],
    thyTitle: [{ type: Input }],
    thySize: [{ type: Input }],
    thyTitleTranslationKey: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thyOnClose: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWhlYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGlhbG9nL2hlYWRlci9kaWFsb2ctaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFlBQVksRUFDWixXQUFXLEVBRVgsV0FBVyxFQUVYLFFBQVEsRUFDUixVQUFVLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVMvQyxNQUFNLE9BQU8scUJBQXFCO0lBeUI5QixZQUNZLFVBQXNCLEVBQ3RCLE1BQWlCLEVBQ2pCLFNBQXVCLEVBQ1gsZUFBNEM7UUFIeEQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2pCLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFDWCxvQkFBZSxHQUFmLGVBQWUsQ0FBNkI7UUE1QmhDLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBRW5CLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQW9CdEQsZUFBVSxHQUF3QixJQUFJLFlBQVksRUFBUyxDQUFDO0lBT25FLENBQUM7SUFwQkosSUFBYSxPQUFPLENBQUMsS0FBa0I7UUFDbkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssS0FBSyxJQUFJLENBQUM7SUFDM0MsQ0FBQztJQUVELElBQ0ksc0JBQXNCLENBQUMsR0FBVztRQUNsQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7SUFhRCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDdkIsaUZBQWlGO1lBQ2pGLGtHQUFrRztZQUNsRyxrR0FBa0c7WUFDbEcsb0ZBQW9GO1lBQ3BGLG1DQUFtQztZQUNuQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUE4QixDQUFDO1lBQzNHLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUN6RTtRQUVELG1GQUFtRjtRQUNuRiw4RUFBOEU7UUFDOUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQ3ZEO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQWE7UUFDZixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNILElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDOzs7WUFoRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLGliQUE2QztnQkFDN0MsbURBQW1EO2dCQUNuRCxRQUFRLEVBQUUsaUJBQWlCO2FBQzlCOzs7WUFaRyxVQUFVO1lBRUwsU0FBUztZQUVULFlBQVk7WUFEWiwyQkFBMkIsdUJBdUMzQixRQUFROzs7NkJBNUJaLFdBQVcsU0FBQyxxQkFBcUI7K0JBRWpDLFdBQVcsU0FBQyx3QkFBd0I7NkJBRXBDLFlBQVksU0FBQyxjQUFjO3VCQUczQixLQUFLO3NCQUVMLEtBQUs7cUNBSUwsS0FBSztzQkFPTCxLQUFLO3lCQUVMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBPbkluaXQsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgT3B0aW9uYWwsXG4gICAgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeURpYWxvZyB9IGZyb20gJy4uL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IFRoeURpYWxvZ0NvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZy1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRoeVRyYW5zbGF0ZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5pbXBvcnQgeyBUaHlJbnRlcm5hbERpYWxvZ1JlZiB9IGZyb20gJy4uL2RpYWxvZy1yZWYnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1kaWFsb2ctaGVhZGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhbG9nLWhlYWRlci5jb21wb25lbnQuaHRtbCcsXG4gICAgLy8gY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZXhwb3J0QXM6ICd0aHlEaWFsb2dIZWFkZXInXG59KVxuZXhwb3J0IGNsYXNzIERpYWxvZ0hlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy5kaWFsb2ctaGVhZGVyYCkgaXNEaWFsb2dIZWFkZXIgPSB0cnVlO1xuXG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy5kaWFsb2ctaGVhZGVyLWxnYCkgaXNEaWFsb2dIZWFkZXJMZyA9IGZhbHNlO1xuXG4gICAgQENvbnRlbnRDaGlsZCgnZGlhbG9nSGVhZGVyJylcbiAgICBwdWJsaWMgaGVhZGVyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBASW5wdXQoKSB0aHlUaXRsZTogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgc2V0IHRoeVNpemUodmFsdWU6ICdsZycgfCAnbWQnKSB7XG4gICAgICAgIHRoaXMuaXNEaWFsb2dIZWFkZXJMZyA9IHZhbHVlID09PSAnbGcnO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVRpdGxlVHJhbnNsYXRpb25LZXkoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGtleSAmJiAhdGhpcy50aHlUaXRsZSkge1xuICAgICAgICAgICAgdGhpcy50aHlUaXRsZSA9IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpIHRoeUljb246IHN0cmluZztcblxuICAgIEBPdXRwdXQoKSB0aHlPbkNsb3NlOiBFdmVudEVtaXR0ZXI8RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxFdmVudD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgZGlhbG9nOiBUaHlEaWFsb2csXG4gICAgICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUaHlUcmFuc2xhdGUsXG4gICAgICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZGlhbG9nQ29udGFpbmVyOiBUaHlEaWFsb2dDb250YWluZXJDb21wb25lbnRcbiAgICApIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpYWxvZ0NvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gV2hlbiB0aGlzIGRpcmVjdGl2ZSBpcyBpbmNsdWRlZCBpbiBhIGRpYWxvZyB2aWEgVGVtcGxhdGVSZWYgKHJhdGhlciB0aGFuIGJlaW5nXG4gICAgICAgICAgICAvLyBpbiBhIENvbXBvbmVudCksIHRoZSBUaHlEaWFsb2dDb250YWluZXJDb21wb25lbnQgaXNuJ3QgYXZhaWxhYmxlIHZpYSBpbmplY3Rpb24gYmVjYXVzZSBlbWJlZGRlZFxuICAgICAgICAgICAgLy8gdmlld3MgY2Fubm90IGJlIGdpdmVuIGEgY3VzdG9tIGluamVjdG9yLiBJbnN0ZWFkLCB3ZSBsb29rIHVwIHRoZSBUaHlEaWFsb2dDb250YWluZXJDb21wb25lbnQgYnlcbiAgICAgICAgICAgIC8vIElELiBUaGlzIG11c3Qgb2NjdXIgaW4gYG9uSW5pdGAsIGFzIHRoZSBJRCBiaW5kaW5nIGZvciB0aGUgZGlhbG9nIGNvbnRhaW5lciB3b24ndFxuICAgICAgICAgICAgLy8gYmUgcmVzb2x2ZWQgYXQgY29uc3RydWN0b3IgdGltZS5cbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nLmdldENsb3Nlc3REaWFsb2codGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpIGFzIFRoeUludGVybmFsRGlhbG9nUmVmPGFueT47XG4gICAgICAgICAgICB0aGlzLmRpYWxvZ0NvbnRhaW5lciA9IGRpYWxvZ1JlZiA/IGRpYWxvZ1JlZi5jb250YWluZXJJbnN0YW5jZSA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGFuZ2UgaW4gbmV4dCBtaWNyb3Rhc2sgYXZvaWQgdGhyb3cgRXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWRFcnJvclxuICAgICAgICAvLyBiZWNhdXNlIHN1YiBjb21wb25lbnQgY2hhbmdlIHBhcmVudCdzIEhvc3RCaW5kaW5nIHByb3BlcnR5IChhcmlhTGFiZWxsZWRCeSlcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5kaWFsb2dDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ0NvbnRhaW5lci5hcmlhTGFiZWxsZWRCeSA9IHRoaXMudGh5VGl0bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsb3NlKGV2ZW50PzogRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudGh5T25DbG9zZS5vYnNlcnZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy50aHlPbkNsb3NlLmVtaXQoZXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kaWFsb2cuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
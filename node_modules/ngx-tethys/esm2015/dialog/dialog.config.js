import { InjectionToken } from '@angular/core';
import { ThyAbstractOverlayConfig } from 'ngx-tethys/core';
export var ThyDialogSizes;
(function (ThyDialogSizes) {
    ThyDialogSizes["lg"] = "lg";
    ThyDialogSizes["supperLg"] = "supper-lg";
    ThyDialogSizes["maxLg"] = "max-lg";
    ThyDialogSizes["md"] = "md";
    ThyDialogSizes["sm"] = "sm";
    ThyDialogSizes["full"] = "full";
})(ThyDialogSizes || (ThyDialogSizes = {}));
/**
 * Configuration for opening a modal dialog with the ThyDialog service.
 */
export class ThyDialogConfig extends ThyAbstractOverlayConfig {
    constructor() {
        super(...arguments);
        /** The ARIA role of the dialog element. */
        this.role = 'dialog';
    }
}
/** Injection token that can be used to specify default dialog options. */
export const THY_DIALOG_DEFAULT_OPTIONS = new InjectionToken('thy-dialog-default-options');
const ɵ0 = {
    role: 'dialog',
    hasBackdrop: true,
    backdropClass: '',
    panelClass: '',
    backdropClosable: true,
    closeOnNavigation: true,
    autoFocus: true,
    restoreFocus: true
};
export const THY_DIALOG_DEFAULT_OPTIONS_PROVIDER = {
    provide: THY_DIALOG_DEFAULT_OPTIONS,
    useValue: ɵ0
};
export class ThyDialogLayoutConfig {
}
export const THY_DIALOG_LAYOUT_CONFIG = new InjectionToken('thy-dialog-layout-config');
const ɵ1 = {
    footerAlign: 'left',
    footerDivided: false
};
export const THY_DIALOG_LAYOUT_CONFIG_PROVIDER = {
    provide: THY_DIALOG_LAYOUT_CONFIG,
    useValue: ɵ1
};
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsb2cvZGlhbG9nLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBMkIsTUFBTSxpQkFBaUIsQ0FBQztBQUtwRixNQUFNLENBQU4sSUFBWSxjQU9YO0FBUEQsV0FBWSxjQUFjO0lBQ3RCLDJCQUFTLENBQUE7SUFDVCx3Q0FBc0IsQ0FBQTtJQUN0QixrQ0FBZ0IsQ0FBQTtJQUNoQiwyQkFBUyxDQUFBO0lBQ1QsMkJBQVMsQ0FBQTtJQUNULCtCQUFhLENBQUE7QUFDakIsQ0FBQyxFQVBXLGNBQWMsS0FBZCxjQUFjLFFBT3pCO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBNkIsU0FBUSx3QkFBK0I7SUFBakY7O1FBQ0ksMkNBQTJDO1FBQzNDLFNBQUksR0FBbUIsUUFBUSxDQUFDO0lBVXBDLENBQUM7Q0FBQTtBQUVELDBFQUEwRTtBQUMxRSxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLGNBQWMsQ0FBa0IsNEJBQTRCLENBQUMsQ0FBQztXQUk5RjtJQUNOLElBQUksRUFBRSxRQUFRO0lBQ2QsV0FBVyxFQUFFLElBQUk7SUFDakIsYUFBYSxFQUFFLEVBQUU7SUFDakIsVUFBVSxFQUFFLEVBQUU7SUFDZCxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCLGlCQUFpQixFQUFFLElBQUk7SUFDdkIsU0FBUyxFQUFFLElBQUk7SUFDZixZQUFZLEVBQUUsSUFBSTtDQUNyQjtBQVhMLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUFHO0lBQy9DLE9BQU8sRUFBRSwwQkFBMEI7SUFDbkMsUUFBUSxJQVNQO0NBQ0osQ0FBQztBQUlGLE1BQU0sT0FBTyxxQkFBcUI7Q0FHakM7QUFFRCxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLGNBQWMsQ0FBd0IsMEJBQTBCLENBQUMsQ0FBQztXQUloRztJQUNOLFdBQVcsRUFBRSxNQUFNO0lBQ25CLGFBQWEsRUFBRSxLQUFLO0NBQ3ZCO0FBTEwsTUFBTSxDQUFDLE1BQU0saUNBQWlDLEdBQUc7SUFDN0MsT0FBTyxFQUFFLHdCQUF3QjtJQUNqQyxRQUFRLElBR1A7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNjcm9sbFN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgVGh5QWJzdHJhY3RPdmVybGF5Q29uZmlnLCBUaHlVcHBlck92ZXJsYXlQb3NpdGlvbiB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5cbi8qKiBWYWxpZCBBUklBIHJvbGVzIGZvciBhIGRpYWxvZyBlbGVtZW50LiAqL1xuZXhwb3J0IHR5cGUgVGh5RGlhbG9nUm9sZSA9ICdkaWFsb2cnIHwgJ2FsZXJ0ZGlhbG9nJztcblxuZXhwb3J0IGVudW0gVGh5RGlhbG9nU2l6ZXMge1xuICAgIGxnID0gJ2xnJyxcbiAgICBzdXBwZXJMZyA9ICdzdXBwZXItbGcnLFxuICAgIG1heExnID0gJ21heC1sZycsXG4gICAgbWQgPSAnbWQnLFxuICAgIHNtID0gJ3NtJyxcbiAgICBmdWxsID0gJ2Z1bGwnXG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3Igb3BlbmluZyBhIG1vZGFsIGRpYWxvZyB3aXRoIHRoZSBUaHlEaWFsb2cgc2VydmljZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoeURpYWxvZ0NvbmZpZzxURGF0YSA9IGFueT4gZXh0ZW5kcyBUaHlBYnN0cmFjdE92ZXJsYXlDb25maWc8VERhdGE+IHtcbiAgICAvKiogVGhlIEFSSUEgcm9sZSBvZiB0aGUgZGlhbG9nIGVsZW1lbnQuICovXG4gICAgcm9sZT86IFRoeURpYWxvZ1JvbGUgPSAnZGlhbG9nJztcblxuICAgIC8qKiBQb3NpdGlvbiBvdmVycmlkZXMuICovXG4gICAgcG9zaXRpb24/OiBUaHlVcHBlck92ZXJsYXlQb3NpdGlvbjtcblxuICAgIC8qKiBEaWFsb2cgc2l6ZSBtZCwgbGcsIHNtKi9cbiAgICBzaXplPzogVGh5RGlhbG9nU2l6ZXM7XG5cbiAgICAvKiogU2Nyb2xsIHN0cmF0ZWd5IHRvIGJlIHVzZWQgZm9yIHRoZSBkaWFsb2cuICovXG4gICAgc2Nyb2xsU3RyYXRlZ3k/OiBTY3JvbGxTdHJhdGVneTtcbn1cblxuLyoqIEluamVjdGlvbiB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHNwZWNpZnkgZGVmYXVsdCBkaWFsb2cgb3B0aW9ucy4gKi9cbmV4cG9ydCBjb25zdCBUSFlfRElBTE9HX0RFRkFVTFRfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUaHlEaWFsb2dDb25maWc+KCd0aHktZGlhbG9nLWRlZmF1bHQtb3B0aW9ucycpO1xuXG5leHBvcnQgY29uc3QgVEhZX0RJQUxPR19ERUZBVUxUX09QVElPTlNfUFJPVklERVIgPSB7XG4gICAgcHJvdmlkZTogVEhZX0RJQUxPR19ERUZBVUxUX09QVElPTlMsXG4gICAgdXNlVmFsdWU6IHtcbiAgICAgICAgcm9sZTogJ2RpYWxvZycsXG4gICAgICAgIGhhc0JhY2tkcm9wOiB0cnVlLFxuICAgICAgICBiYWNrZHJvcENsYXNzOiAnJyxcbiAgICAgICAgcGFuZWxDbGFzczogJycsXG4gICAgICAgIGJhY2tkcm9wQ2xvc2FibGU6IHRydWUsXG4gICAgICAgIGNsb3NlT25OYXZpZ2F0aW9uOiB0cnVlLFxuICAgICAgICBhdXRvRm9jdXM6IHRydWUsXG4gICAgICAgIHJlc3RvcmVGb2N1czogdHJ1ZVxuICAgIH1cbn07XG5cbmV4cG9ydCB0eXBlIFRoeURpYWxvZ0Zvb3RlckFsaWduID0gJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdjZW50ZXInO1xuXG5leHBvcnQgY2xhc3MgVGh5RGlhbG9nTGF5b3V0Q29uZmlnIHtcbiAgICBmb290ZXJBbGlnbj86IFRoeURpYWxvZ0Zvb3RlckFsaWduO1xuICAgIGZvb3RlckRpdmlkZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgVEhZX0RJQUxPR19MQVlPVVRfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPFRoeURpYWxvZ0xheW91dENvbmZpZz4oJ3RoeS1kaWFsb2ctbGF5b3V0LWNvbmZpZycpO1xuXG5leHBvcnQgY29uc3QgVEhZX0RJQUxPR19MQVlPVVRfQ09ORklHX1BST1ZJREVSID0ge1xuICAgIHByb3ZpZGU6IFRIWV9ESUFMT0dfTEFZT1VUX0NPTkZJRyxcbiAgICB1c2VWYWx1ZToge1xuICAgICAgICBmb290ZXJBbGlnbjogJ2xlZnQnLFxuICAgICAgICBmb290ZXJEaXZpZGVkOiBmYWxzZVxuICAgIH1cbn07XG4iXX0=
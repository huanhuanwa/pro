import { UpdateHostClassService } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { Component, ContentChild, ElementRef, Inject, Input, TemplateRef } from '@angular/core';
import { THY_DIALOG_LAYOUT_CONFIG, ThyDialogLayoutConfig } from '../dialog.config';
export class DialogFooterComponent {
    constructor(dialogLayoutConfig, updateHostClassService, elementRef) {
        this.dialogLayoutConfig = dialogLayoutConfig;
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this.divided = this.dialogLayoutConfig.footerDivided;
    }
    set thyDivided(value) {
        this.divided = coerceBooleanProperty(value);
    }
    get align() {
        return !!this.thyAlign ? this.thyAlign : this.dialogLayoutConfig.footerAlign;
    }
    ngOnInit() {
        this.updateHostClassService.updateClassByMap({
            'dialog-footer': true,
            [`dialog-footer-actions-align-${this.align}`]: true,
            'dialog-footer-border-top': this.divided
        });
    }
}
DialogFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-dialog-footer',
                template: "<div class=\"dialog-footer-actions btn-pair\">\n  <ng-content></ng-content>\n</div>\n<div class=\"dialog-footer-description\" *ngIf=\"description\">\n  <ng-container [ngTemplateOutlet]=\"description\"></ng-container>\n</div>\n",
                // changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'thyDialogFooter',
                providers: [UpdateHostClassService]
            },] }
];
DialogFooterComponent.ctorParameters = () => [
    { type: ThyDialogLayoutConfig, decorators: [{ type: Inject, args: [THY_DIALOG_LAYOUT_CONFIG,] }] },
    { type: UpdateHostClassService },
    { type: ElementRef }
];
DialogFooterComponent.propDecorators = {
    description: [{ type: ContentChild, args: ['description',] }],
    thyDivided: [{ type: Input }],
    thyAlign: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWZvb3Rlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGlhbG9nL2Zvb3Rlci9kaWFsb2ctZm9vdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBVSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEcsT0FBTyxFQUFFLHdCQUF3QixFQUF3QixxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBU3pHLE1BQU0sT0FBTyxxQkFBcUI7SUFlOUIsWUFDOEMsa0JBQXlDLEVBQzNFLHNCQUE4QyxFQUM5QyxVQUFzQjtRQUZZLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBdUI7UUFDM0UsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBRTlCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQztJQUN6RCxDQUFDO0lBbkJELElBQWEsVUFBVSxDQUFDLEtBQWM7UUFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBTUQsSUFBWSxLQUFLO1FBQ2IsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQztJQUNqRixDQUFDO0lBV0QsUUFBUTtRQUNKLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQztZQUN6QyxlQUFlLEVBQUUsSUFBSTtZQUNyQixDQUFDLCtCQUErQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJO1lBQ25ELDBCQUEwQixFQUFFLElBQUksQ0FBQyxPQUFPO1NBQzNDLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQXJDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsOE9BQTZDO2dCQUM3QyxtREFBbUQ7Z0JBQ25ELFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO2FBQ3RDOzs7WUFSd0QscUJBQXFCLHVCQXlCckUsTUFBTSxTQUFDLHdCQUF3QjtZQTlCL0Isc0JBQXNCO1lBR0csVUFBVTs7OzBCQVl2QyxZQUFZLFNBQUMsYUFBYTt5QkFFMUIsS0FBSzt1QkFJTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbnB1dCwgT25Jbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUSFlfRElBTE9HX0xBWU9VVF9DT05GSUcsIFRoeURpYWxvZ0Zvb3RlckFsaWduLCBUaHlEaWFsb2dMYXlvdXRDb25maWcgfSBmcm9tICcuLi9kaWFsb2cuY29uZmlnJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktZGlhbG9nLWZvb3RlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RpYWxvZy1mb290ZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIC8vIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGV4cG9ydEFzOiAndGh5RGlhbG9nRm9vdGVyJyxcbiAgICBwcm92aWRlcnM6IFtVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBEaWFsb2dGb290ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBDb250ZW50Q2hpbGQoJ2Rlc2NyaXB0aW9uJykgZGVzY3JpcHRpb246IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBASW5wdXQoKSBzZXQgdGh5RGl2aWRlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmRpdmlkZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpIHRoeUFsaWduOiBUaHlEaWFsb2dGb290ZXJBbGlnbjtcblxuICAgIHByaXZhdGUgZGl2aWRlZDogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgZ2V0IGFsaWduKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnRoeUFsaWduID8gdGhpcy50aHlBbGlnbiA6IHRoaXMuZGlhbG9nTGF5b3V0Q29uZmlnLmZvb3RlckFsaWduO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRIWV9ESUFMT0dfTEFZT1VUX0NPTkZJRykgcHJpdmF0ZSBkaWFsb2dMYXlvdXRDb25maWc6IFRoeURpYWxvZ0xheW91dENvbmZpZyxcbiAgICAgICAgcHJpdmF0ZSB1cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlOiBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWZcbiAgICApIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLmluaXRpYWxpemVFbGVtZW50KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgdGhpcy5kaXZpZGVkID0gdGhpcy5kaWFsb2dMYXlvdXRDb25maWcuZm9vdGVyRGl2aWRlZDtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUNsYXNzQnlNYXAoe1xuICAgICAgICAgICAgJ2RpYWxvZy1mb290ZXInOiB0cnVlLFxuICAgICAgICAgICAgW2BkaWFsb2ctZm9vdGVyLWFjdGlvbnMtYWxpZ24tJHt0aGlzLmFsaWdufWBdOiB0cnVlLFxuICAgICAgICAgICAgJ2RpYWxvZy1mb290ZXItYm9yZGVyLXRvcCc6IHRoaXMuZGl2aWRlZFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=
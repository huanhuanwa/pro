import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Input } from '@angular/core';
import { ThyDialogRef } from '../dialog-ref';
import { THY_CONFIRM_DEFAULT_OPTIONS, THY_CONFIRM_DEFAULT_OPTIONS_VALUE } from '../confirm.config';
import { finalize } from 'rxjs/operators';
export class ThyConfirmComponent {
    constructor(dialogRef, changeDetectorRef, defaultConfig) {
        this.dialogRef = dialogRef;
        this.changeDetectorRef = changeDetectorRef;
        this.defaultConfig = defaultConfig;
        this.defaultConfig = Object.assign(Object.assign({}, THY_CONFIRM_DEFAULT_OPTIONS_VALUE), this.defaultConfig);
    }
    ngOnInit() {
        this.defaultConfig = Object.assign(Object.assign({}, this.defaultConfig), this.options);
        this.title = this.defaultConfig.title;
        this.content = this.defaultConfig.content;
        this.okText = this.defaultConfig.okText;
        this.okType = this.defaultConfig.okType;
        this.cancelText = this.defaultConfig.cancelText;
        this.okLoadingText = this.defaultConfig.okLoadingText || this.okText;
        this.footerAlign = this.defaultConfig.footerAlign;
    }
    confirm() {
        this.loading = true;
        const result = this.options.onOk();
        if (result && result.subscribe) {
            result
                .pipe(finalize(() => {
                this.loading = false;
                this.changeDetectorRef.markForCheck();
            }))
                .subscribe(success => {
                if (success) {
                    this.close();
                }
            });
        }
        else {
            this.close();
        }
    }
    close() {
        this.dialogRef.close();
    }
    ngOnDestroy() { }
}
ThyConfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-confirm-default',
                template: "<thy-dialog-header [thyTitle]=\"title || 'Install Angular'\" (thyOnClose)=\"close()\"> </thy-dialog-header>\n<thy-dialog-body class=\"thy-form\">\n  <form thyForm name=\"thyConfirm\" thyLayout=\"vertical\">\n    <div class=\"form-group\">\n      <p [innerHTML]=\"content\"></p>\n    </div>\n    <thy-form-group-footer [thyAlign]=\"footerAlign\">\n      <div class=\"thy-confirm-footer\" [ngClass]=\"'thy-confirm-footer-' + footerAlign\">\n        <button [thyButton]=\"okType\" (click)=\"confirm()\" [thyLoading]=\"loading\" [thyLoadingText]=\"okLoadingText\">{{ okText }}</button>\n        <button thyButton=\"link-secondary\" (click)=\"close()\" class=\"thy-confirm-cancel\">{{ cancelText }}</button>\n      </div>\n    </thy-form-group-footer>\n  </form>\n</thy-dialog-body>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyConfirmComponent.ctorParameters = () => [
    { type: ThyDialogRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [THY_CONFIRM_DEFAULT_OPTIONS,] }] }
];
ThyConfirmComponent.propDecorators = {
    options: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGlhbG9nL2NvbmZpcm0vY29uZmlybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBcUIsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBb0IsMkJBQTJCLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNySCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFRMUMsTUFBTSxPQUFPLG1CQUFtQjtJQW1CNUIsWUFDWSxTQUE0QyxFQUM1QyxpQkFBb0MsRUFDQyxhQUErQjtRQUZwRSxjQUFTLEdBQVQsU0FBUyxDQUFtQztRQUM1QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ0Msa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBRTVFLElBQUksQ0FBQyxhQUFhLG1DQUFTLGlDQUFzRCxHQUFLLElBQUksQ0FBQyxhQUFhLENBQUUsQ0FBQztJQUMvRyxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxhQUFhLG1DQUFRLElBQUksQ0FBQyxhQUFhLEdBQUssSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1FBQ2hFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUMxQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7UUFDeEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztRQUNoRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUN0RCxDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUM1QixNQUFNO2lCQUNELElBQUksQ0FDRCxRQUFRLENBQUMsR0FBRyxFQUFFO2dCQUNWLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUNyQixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDMUMsQ0FBQyxDQUFDLENBQ0w7aUJBQ0EsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNqQixJQUFJLE9BQU8sRUFBRTtvQkFDVCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2hCO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDVjthQUFNO1lBQ0gsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxXQUFXLEtBQUksQ0FBQzs7O1lBcEVuQixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsdXhCQUF1QztnQkFDdkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDbEQ7OztZQVRRLFlBQVk7WUFEMkMsaUJBQWlCOzRDQWlDeEUsTUFBTSxTQUFDLDJCQUEyQjs7O3NCQW5CdEMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5RGlhbG9nUmVmIH0gZnJvbSAnLi4vZGlhbG9nLXJlZic7XG5pbXBvcnQgeyBUaHlDb25maXJtQ29uZmlnLCBUSFlfQ09ORklSTV9ERUZBVUxUX09QVElPTlMsIFRIWV9DT05GSVJNX0RFRkFVTFRfT1BUSU9OU19WQUxVRSB9IGZyb20gJy4uL2NvbmZpcm0uY29uZmlnJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGh5Rm9ybUdyb3VwRm9vdGVyQWxpZ24gfSBmcm9tICduZ3gtdGV0aHlzL2Zvcm0nO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1jb25maXJtLWRlZmF1bHQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb25maXJtLmNvbXBvbmVudC5odG1sJyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUaHlDb25maXJtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKSBvcHRpb25zOiBUaHlDb25maXJtQ29uZmlnO1xuXG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgY29udGVudDogc3RyaW5nO1xuXG4gICAgcHVibGljIG9rVGV4dDogc3RyaW5nO1xuXG4gICAgcHVibGljIG9rVHlwZTogc3RyaW5nO1xuXG4gICAgcHVibGljIGNhbmNlbFRleHQ6IHN0cmluZztcblxuICAgIHB1YmxpYyBva0xvYWRpbmdUZXh0OiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgZm9vdGVyQWxpZ246IFRoeUZvcm1Hcm91cEZvb3RlckFsaWduO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZGlhbG9nUmVmOiBUaHlEaWFsb2dSZWY8VGh5Q29uZmlybUNvbXBvbmVudD4sXG4gICAgICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBASW5qZWN0KFRIWV9DT05GSVJNX0RFRkFVTFRfT1BUSU9OUykgcHJpdmF0ZSBkZWZhdWx0Q29uZmlnOiBUaHlDb25maXJtQ29uZmlnXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IHsgLi4uKFRIWV9DT05GSVJNX0RFRkFVTFRfT1BUSU9OU19WQUxVRSBhcyBUaHlDb25maXJtQ29uZmlnKSwgLi4udGhpcy5kZWZhdWx0Q29uZmlnIH07XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IHsgLi4udGhpcy5kZWZhdWx0Q29uZmlnLCAuLi50aGlzLm9wdGlvbnMgfTtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMuZGVmYXVsdENvbmZpZy50aXRsZTtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5kZWZhdWx0Q29uZmlnLmNvbnRlbnQ7XG4gICAgICAgIHRoaXMub2tUZXh0ID0gdGhpcy5kZWZhdWx0Q29uZmlnLm9rVGV4dDtcbiAgICAgICAgdGhpcy5va1R5cGUgPSB0aGlzLmRlZmF1bHRDb25maWcub2tUeXBlO1xuICAgICAgICB0aGlzLmNhbmNlbFRleHQgPSB0aGlzLmRlZmF1bHRDb25maWcuY2FuY2VsVGV4dDtcbiAgICAgICAgdGhpcy5va0xvYWRpbmdUZXh0ID0gdGhpcy5kZWZhdWx0Q29uZmlnLm9rTG9hZGluZ1RleHQgfHwgdGhpcy5va1RleHQ7XG4gICAgICAgIHRoaXMuZm9vdGVyQWxpZ24gPSB0aGlzLmRlZmF1bHRDb25maWcuZm9vdGVyQWxpZ247XG4gICAgfVxuXG4gICAgY29uZmlybSgpIHtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5vcHRpb25zLm9uT2soKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHN1Y2Nlc3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHt9XG59XG4iXX0=
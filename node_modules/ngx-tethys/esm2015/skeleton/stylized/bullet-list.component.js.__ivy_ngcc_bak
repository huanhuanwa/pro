import { Component, Input, ViewChild, TemplateRef } from '@angular/core';
import { ThySkeletonComponent } from '../skeleton.component';
export class ThySkeletonBulletListComponent {
    constructor(skeletonComponent) {
        this.skeletonComponent = skeletonComponent;
        this.thyCount = 5;
        this.items = [];
    }
    ngOnInit() {
        for (let i = 0; i <= this.thyCount; i++) {
            this.items.push({
                circle: {
                    cx: 10,
                    cy: i * 30 + 20,
                    r: 8
                },
                rect: {
                    x: 25,
                    y: i * 2 * 15 + 15,
                    rx: 5,
                    ry: 5,
                    width: '90%',
                    height: 10
                }
            });
        }
        this.skeletonComponent.addTemplate(this.contentTemplateRef);
    }
}
ThySkeletonBulletListComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-skeleton-bullet-list-template',
                template: `
        <ng-template #content>
            <ng-container *ngFor="let item of items">
                <svg:circle [attr.cx]="item.circle.cx" [attr.cy]="item.circle.cy" r="8" />
                <svg:rect [attr.x]="item.rect.x" [attr.y]="item.rect.y" rx="5" ry="5" width="90%" height="10" />
            </ng-container>
        </ng-template>
    `
            },] }
];
ThySkeletonBulletListComponent.ctorParameters = () => [
    { type: ThySkeletonComponent }
];
ThySkeletonBulletListComponent.propDecorators = {
    thyCount: [{ type: Input }],
    contentTemplateRef: [{ type: ViewChild, args: ['content', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsbGV0LWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NrZWxldG9uL3N0eWxpemVkL2J1bGxldC1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBa0I3RCxNQUFNLE9BQU8sOEJBQThCO0lBT3ZDLFlBQW9CLGlCQUF1QztRQUF2QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXNCO1FBTmxELGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFdEIsVUFBSyxHQUFxQixFQUFFLENBQUM7SUFJaUMsQ0FBQztJQUUvRCxRQUFRO1FBQ0osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ1osTUFBTSxFQUFFO29CQUNKLEVBQUUsRUFBRSxFQUFFO29CQUNOLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7b0JBQ2YsQ0FBQyxFQUFFLENBQUM7aUJBQ1A7Z0JBQ0QsSUFBSSxFQUFFO29CQUNGLENBQUMsRUFBRSxFQUFFO29CQUNMLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO29CQUNsQixFQUFFLEVBQUUsQ0FBQztvQkFDTCxFQUFFLEVBQUUsQ0FBQztvQkFDTCxLQUFLLEVBQUUsS0FBSztvQkFDWixNQUFNLEVBQUUsRUFBRTtpQkFDYjthQUNKLENBQUMsQ0FBQztTQUNOO1FBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNoRSxDQUFDOzs7WUF2Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQ0FBbUM7Z0JBQzdDLFFBQVEsRUFBRTs7Ozs7OztLQU9UO2FBQ0o7OztZQWpCUSxvQkFBb0I7Ozt1QkFtQnhCLEtBQUs7aUNBSUwsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFZpZXdDaGlsZCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeVNrZWxldG9uQ29tcG9uZW50IH0gZnJvbSAnLi4vc2tlbGV0b24uY29tcG9uZW50JztcblxuaW50ZXJmYWNlIEJ1bGxldExpc3RJdGVtIHtcbiAgICBjaXJjbGU6IHsgY3g6IG51bWJlcjsgY3k6IG51bWJlcjsgcjogbnVtYmVyIH07XG4gICAgcmVjdDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgcng6IG51bWJlcjsgcnk6IG51bWJlcjsgd2lkdGg6IG51bWJlciB8IHN0cmluZzsgaGVpZ2h0OiBudW1iZXIgfCBzdHJpbmcgfTtcbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktc2tlbGV0b24tYnVsbGV0LWxpc3QtdGVtcGxhdGUnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjY29udGVudD5cbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIj5cbiAgICAgICAgICAgICAgICA8c3ZnOmNpcmNsZSBbYXR0ci5jeF09XCJpdGVtLmNpcmNsZS5jeFwiIFthdHRyLmN5XT1cIml0ZW0uY2lyY2xlLmN5XCIgcj1cIjhcIiAvPlxuICAgICAgICAgICAgICAgIDxzdmc6cmVjdCBbYXR0ci54XT1cIml0ZW0ucmVjdC54XCIgW2F0dHIueV09XCJpdGVtLnJlY3QueVwiIHJ4PVwiNVwiIHJ5PVwiNVwiIHdpZHRoPVwiOTAlXCIgaGVpZ2h0PVwiMTBcIiAvPlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBUaHlTa2VsZXRvbkJ1bGxldExpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpIHRoeUNvdW50ID0gNTtcblxuICAgIGl0ZW1zOiBCdWxsZXRMaXN0SXRlbVtdID0gW107XG5cbiAgICBAVmlld0NoaWxkKCdjb250ZW50JywgeyBzdGF0aWM6IHRydWUgfSkgY29udGVudFRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBza2VsZXRvbkNvbXBvbmVudDogVGh5U2tlbGV0b25Db21wb25lbnQpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdGhpcy50aHlDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGNpcmNsZToge1xuICAgICAgICAgICAgICAgICAgICBjeDogMTAsXG4gICAgICAgICAgICAgICAgICAgIGN5OiBpICogMzAgKyAyMCxcbiAgICAgICAgICAgICAgICAgICAgcjogOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVjdDoge1xuICAgICAgICAgICAgICAgICAgICB4OiAyNSxcbiAgICAgICAgICAgICAgICAgICAgeTogaSAqIDIgKiAxNSArIDE1LFxuICAgICAgICAgICAgICAgICAgICByeDogNSxcbiAgICAgICAgICAgICAgICAgICAgcnk6IDUsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnOTAlJyxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2tlbGV0b25Db21wb25lbnQuYWRkVGVtcGxhdGUodGhpcy5jb250ZW50VGVtcGxhdGVSZWYpO1xuICAgIH1cbn1cbiJdfQ==
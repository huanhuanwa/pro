import { Component, Input, Inject, PLATFORM_ID, HostBinding, TemplateRef, ContentChild } from '@angular/core';
import { generateRandomStr } from 'ngx-tethys/util';
import { isPlatformBrowser } from '@angular/common';
export class ThySkeletonComponent {
    constructor(platformId) {
        this.platformId = platformId;
        this.addSkeletonClass = true;
        this.thyAnimate = true;
        this.thyBaseUrl = '';
        this.thyWidth = '100%';
        this.thyHeight = '100%';
        this.thyViewBoxWidth = 400;
        this.thyViewBoxHeight = 130;
        this.thySpeed = 2;
        this.thyPreserveAspectRatio = 'none'; // xMidYMid meet
        this.thyPrimaryColor = '#f0f0f0';
        this.thySecondaryColor = '#e0e0e0';
        this.thyPrimaryOpacity = 1;
        this.thySecondaryOpacity = 1;
        this.thyIgnoreBaseUrl = false;
        this.thyLoadingDone = false;
        this.contentTemplates = [];
        this.idClip = generateRandomStr();
        this.idGradient = generateRandomStr();
        this.defaultAnimation = ['-3; 1', '-2; 2', '-1; 3'];
        this.rtlAnimation = ['1; -3', '2; -2', '3; -1'];
    }
    ngOnInit() {
        this.animationValues = this.thyRtl ? this.rtlAnimation : this.defaultAnimation;
        if (this.thyBaseUrl === '' && !this.thyIgnoreBaseUrl && isPlatformBrowser(this.platformId)) {
            this.thyBaseUrl = window.location.pathname;
        }
        this.setFillStyle();
        this.setClipPath();
    }
    ngOnChanges(changes) {
        if (changes['thyBaseUrl']) {
            if (changes['thyBaseUrl'].previousValue !== changes['thyBaseUrl'].currentValue) {
                this.setFillStyle();
                this.setClipPath();
            }
        }
    }
    setFillStyle() {
        this.fillStyle = {
            fill: `url(${this.thyBaseUrl}#${this.idGradient})`
        };
    }
    setClipPath() {
        this.clipPath = `url(${this.thyBaseUrl}#${this.idClip})`;
    }
    assignInputProperties(input) {
        this.thyAnimate = input.thyAnimate;
        this.thyBaseUrl = input.thyBaseUrl;
        this.thyHeight = input.thyHeight;
        this.thyWidth = input.thyWidth;
        this.thyViewBoxHeight = input.thyViewBoxHeight;
        this.thyViewBoxWidth = input.thyViewBoxWidth;
        this.thyPreserveAspectRatio = input.thyPreserveAspectRatio;
        this.thyPrimaryColor = input.thyPrimaryColor;
        this.thyPrimaryOpacity = input.thyPrimaryOpacity;
        this.thySecondaryColor = input.thySecondaryColor;
        this.thySecondaryOpacity = input.thySecondaryOpacity;
        this.thyRtl = this.thyRtl;
        this.thySpeed = this.thySpeed;
        this.thyUniqueKey = this.thyUniqueKey;
    }
    addTemplate(template) {
        if (template) {
            this.contentTemplates.push(template);
        }
    }
}
ThySkeletonComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-skeleton',
                template: "<svg\n  *ngIf=\"!thyLoadingDone\"\n  attr.viewBox=\"0 0 {{ thyViewBoxWidth }} {{ thyViewBoxHeight }}\"\n  [attr.preserveAspectRatio]=\"thyPreserveAspectRatio\"\n  [ngStyle]=\"thyStyle\"\n  [attr.height]=\"thyHeight\"\n  [attr.width]=\"thyWidth\"\n>\n  <rect\n    [attr.clip-path]=\"clipPath\"\n    [ngStyle]=\"fillStyle\"\n    x=\"0\"\n    y=\"0\"\n    [attr.width]=\"thyWidth\"\n    [attr.height]=\"thyHeight\"\n  />\n\n  <defs>\n    <clipPath [attr.id]=\"idClip\">\n      <ng-container *ngIf=\"contentTemplates\">\n        <ng-container *ngFor=\"let content of contentTemplates\">\n          <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"customTemplate\">\n        <ng-container *ngTemplateOutlet=\"customTemplate\"></ng-container>\n      </ng-container>\n    </clipPath>\n\n    <linearGradient [attr.id]=\"idGradient\">\n      <stop offset=\"0%\" [attr.stop-color]=\"thyPrimaryColor\" [attr.stop-opacity]=\"thyPrimaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[0]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n\n      <stop offset=\"50%\" [attr.stop-color]=\"thySecondaryColor\" [attr.stop-opacity]=\"thySecondaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[1]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n\n      <stop offset=\"100%\" [attr.stop-color]=\"thyPrimaryColor\" [attr.stop-opacity]=\"thyPrimaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[2]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n    </linearGradient>\n  </defs>\n</svg>\n<ng-container *ngIf=\"thyLoadingDone\">\n  <ng-content></ng-content>\n</ng-container>\n"
            },] }
];
ThySkeletonComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
ThySkeletonComponent.propDecorators = {
    addSkeletonClass: [{ type: HostBinding, args: ['class.thy-skeleton',] }],
    thyAnimate: [{ type: Input }],
    thyBaseUrl: [{ type: Input }],
    thyWidth: [{ type: Input }],
    thyHeight: [{ type: Input }],
    thyViewBoxWidth: [{ type: Input }],
    thyViewBoxHeight: [{ type: Input }],
    thySpeed: [{ type: Input }],
    thyPreserveAspectRatio: [{ type: Input }],
    thyPrimaryColor: [{ type: Input }],
    thySecondaryColor: [{ type: Input }],
    thyPrimaryOpacity: [{ type: Input }],
    thySecondaryOpacity: [{ type: Input }],
    thyUniqueKey: [{ type: Input }],
    thyRtl: [{ type: Input }],
    thyStyle: [{ type: Input }],
    thyIgnoreBaseUrl: [{ type: Input }],
    thyLoadingDone: [{ type: Input }],
    customTemplate: [{ type: ContentChild, args: ['content',] }]
};
//# sourceMappingURL=data:application/json;base64,
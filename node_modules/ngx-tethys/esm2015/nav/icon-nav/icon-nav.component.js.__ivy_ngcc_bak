import { Component, HostBinding, Input, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
export class ThyIconNavComponent {
    constructor(updateHostClassService, changeDetectorRef, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.changeDetectorRef = changeDetectorRef;
        this.initialized = false;
        this.isIconNav = true;
        this.updateHostClassService.initializeElement(elementRef);
    }
    set thyType(type) {
        this.type = type;
        this.updateClasses();
        this.changeDetectorRef.markForCheck();
    }
    updateClasses(bypassInitialized) {
        if (!bypassInitialized && !this.initialized) {
            return;
        }
        this.updateHostClassService.updateClass(this.type ? [`thy-icon-nav-${this.type}`] : []);
    }
    ngOnInit() {
        this.initialized = true;
        this.updateClasses(true);
    }
}
ThyIconNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-icon-nav',
                template: "<ng-content></ng-content>\n",
                providers: [UpdateHostClassService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyIconNavComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
ThyIconNavComponent.propDecorators = {
    isIconNav: [{ type: HostBinding, args: [`class.thy-icon-nav`,] }],
    thyType: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1uYXYuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL25hdi9pY29uLW5hdi9pY29uLW5hdi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxXQUFXLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5SCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVN6RCxNQUFNLE9BQU8sbUJBQW1CO0lBbUI1QixZQUNZLHNCQUE4QyxFQUM5QyxpQkFBb0MsRUFDNUMsVUFBbUM7UUFGM0IsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBcEJ4QyxnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUdPLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFvQmhELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBbkJELElBQWEsT0FBTyxDQUFDLElBQWtCO1FBQ25DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUVPLGFBQWEsQ0FBQyxpQkFBMkI7UUFDN0MsSUFBSSxDQUFDLGlCQUFpQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN6QyxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBVUQsUUFBUTtRQUNKLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsdUNBQXdDO2dCQUN4QyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztnQkFDbkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDbEQ7OztZQVJRLHNCQUFzQjtZQURzRCxpQkFBaUI7WUFBdEQsVUFBVTs7O3dCQWNyRCxXQUFXLFNBQUMsb0JBQW9CO3NCQUVoQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEhvc3RCaW5kaW5nLCBJbnB1dCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcblxudHlwZSBJY29uTmF2VHlwZXMgPSAncHJpbWFyeScgfCAnc2Vjb25kYXJ5JyB8ICdpbmRpdmlkdWFsJyB8ICcnO1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktaWNvbi1uYXYnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9pY29uLW5hdi5jb21wb25lbnQuaHRtbCcsXG4gICAgcHJvdmlkZXJzOiBbVXBkYXRlSG9zdENsYXNzU2VydmljZV0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgVGh5SWNvbk5hdkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHR5cGU6IEljb25OYXZUeXBlcztcblxuICAgIEBIb3N0QmluZGluZyhgY2xhc3MudGh5LWljb24tbmF2YCkgaXNJY29uTmF2ID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpIHNldCB0aHlUeXBlKHR5cGU6IEljb25OYXZUeXBlcykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnVwZGF0ZUNsYXNzZXMoKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUNsYXNzZXMoYnlwYXNzSW5pdGlhbGl6ZWQ/OiBib29sZWFuKSB7XG4gICAgICAgIGlmICghYnlwYXNzSW5pdGlhbGl6ZWQgJiYgIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UudXBkYXRlQ2xhc3ModGhpcy50eXBlID8gW2B0aHktaWNvbi1uYXYtJHt0aGlzLnR5cGV9YF0gOiBbXSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogVXBkYXRlSG9zdENsYXNzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+XG4gICAgKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS5pbml0aWFsaXplRWxlbWVudChlbGVtZW50UmVmKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xhc3Nlcyh0cnVlKTtcbiAgICB9XG59XG4iXX0=
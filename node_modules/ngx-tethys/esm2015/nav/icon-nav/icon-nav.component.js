import { Component, HostBinding, Input, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';

const _c0 = ["*"];
export class ThyIconNavComponent {
    constructor(updateHostClassService, changeDetectorRef, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.changeDetectorRef = changeDetectorRef;
        this.initialized = false;
        this.isIconNav = true;
        this.updateHostClassService.initializeElement(elementRef);
    }
    set thyType(type) {
        this.type = type;
        this.updateClasses();
        this.changeDetectorRef.markForCheck();
    }
    updateClasses(bypassInitialized) {
        if (!bypassInitialized && !this.initialized) {
            return;
        }
        this.updateHostClassService.updateClass(this.type ? [`thy-icon-nav-${this.type}`] : []);
    }
    ngOnInit() {
        this.initialized = true;
        this.updateClasses(true);
    }
}
ThyIconNavComponent.ɵfac = function ThyIconNavComponent_Factory(t) { return new (t || ThyIconNavComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyIconNavComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyIconNavComponent, selectors: [["thy-icon-nav"]], hostVars: 2, hostBindings: function ThyIconNavComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-icon-nav", ctx.isIconNav);
    } }, inputs: { thyType: "thyType" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyIconNavComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ThyIconNavComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
ThyIconNavComponent.propDecorators = {
    isIconNav: [{ type: HostBinding, args: [`class.thy-icon-nav`,] }],
    thyType: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyIconNavComponent, [{
        type: Component,
        args: [{
                selector: 'thy-icon-nav',
                template: "<ng-content></ng-content>\n",
                providers: [UpdateHostClassService],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { isIconNav: [{
            type: HostBinding,
            args: [`class.thy-icon-nav`]
        }], thyType: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1uYXYuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbmF2L2ljb24tbmF2L2ljb24tbmF2LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7OztBQVN6RCxNQUFNLE9BQU8sbUJBQW1CO0FBQUcsSUFtQi9CLFlBQ1ksc0JBQThDLEVBQzlDLGlCQUFvQyxFQUM1QyxVQUFtQztBQUN4QyxRQUhhLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7QUFBQyxRQUMvQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0FBQUMsUUFwQnpDLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLFFBRXVDLGNBQVMsR0FBRyxJQUFJLENBQUM7QUFDeEQsUUFtQlEsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xFLElBQUksQ0FBQztBQUNMLElBcEJJLElBQWEsT0FBTyxDQUFDLElBQWtCO0FBQzNDLFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDekIsUUFBUSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDN0IsUUFBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDOUMsSUFBSSxDQUFDO0FBQ0wsSUFDWSxhQUFhLENBQUMsaUJBQTJCO0FBQ3JELFFBQVEsSUFBSSxDQUFDLGlCQUFpQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUNyRCxZQUFZLE9BQU87QUFDbkIsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEcsSUFBSSxDQUFDO0FBQ0wsSUFTSSxRQUFRO0FBQUssUUFDVCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUNoQyxRQUFRLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsSUFBSSxDQUFDO0FBQ0w7K0NBckNDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsY0FBYyxrQkFDeEIsdUNBQXdDLGtCQUN4QyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFDbkMsZUFBZSxFQUFFO1VBQXVCLENBQUMsTUFBTSxjQUNsRDs7Ozs7aURBQ0k7QUFBQztBQUE2QyxZQVQxQyxzQkFBc0I7QUFBSSxZQURrRCxpQkFBaUI7QUFBSSxZQUExRCxVQUFVO0FBQUc7QUFBRztBQUF1Qyx3QkFjbEcsV0FBVyxTQUFDLG9CQUFvQjtBQUFPLHNCQUV2QyxLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIElucHV0LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuXG50eXBlIEljb25OYXZUeXBlcyA9ICdwcmltYXJ5JyB8ICdzZWNvbmRhcnknIHwgJ2luZGl2aWR1YWwnIHwgJyc7XG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1pY29uLW5hdicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ljb24tbmF2LmNvbXBvbmVudC5odG1sJyxcbiAgICBwcm92aWRlcnM6IFtVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUaHlJY29uTmF2Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdHlwZTogSWNvbk5hdlR5cGVzO1xuXG4gICAgQEhvc3RCaW5kaW5nKGBjbGFzcy50aHktaWNvbi1uYXZgKSBpc0ljb25OYXYgPSB0cnVlO1xuXG4gICAgQElucHV0KCkgc2V0IHRoeVR5cGUodHlwZTogSWNvbk5hdlR5cGVzKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xhc3NlcygpO1xuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlQ2xhc3NlcyhieXBhc3NJbml0aWFsaXplZD86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKCFieXBhc3NJbml0aWFsaXplZCAmJiAhdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVDbGFzcyh0aGlzLnR5cGUgPyBbYHRoeS1pY29uLW5hdi0ke3RoaXMudHlwZX1gXSA6IFtdKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSB1cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlOiBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD5cbiAgICApIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLmluaXRpYWxpemVFbGVtZW50KGVsZW1lbnRSZWYpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVDbGFzc2VzKHRydWUpO1xuICAgIH1cbn1cbiJdfQ==
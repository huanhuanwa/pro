import { Component, ElementRef, Input, HostBinding } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
const navTypeClassesMap = {
    primary: ['nav-primary'],
    secondary: ['nav-secondary'],
    thirdly: ['nav-thirdly'],
    'secondary-divider': ['nav-secondary-divider']
};
const navSizeClassesMap = {
    sm: 'nav-sm'
};
const navHorizontalClassesMap = {
    left: '',
    center: 'justify-content-center',
    right: 'justify-content-end'
};
export class ThyNavComponent {
    constructor(updateHostClass, elementRef) {
        this.updateHostClass = updateHostClass;
        this.elementRef = elementRef;
        this._initialized = false;
        this._isVertical = false;
        this._isFill = false;
        this.updateHostClass.initializeElement(elementRef.nativeElement);
    }
    set thyType(type) {
        this._type = type || 'primary';
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thySize(size) {
        this._size = size;
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thyHorizontal(horizontal) {
        this._horizontal = horizontal;
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thyVertical(value) {
        this._isVertical = value;
    }
    set thyFill(value) {
        this._isFill = value;
    }
    _updateClasses() {
        let classNames = [];
        if (navTypeClassesMap[this._type]) {
            classNames = [...navTypeClassesMap[this._type]];
        }
        if (navSizeClassesMap[this._size]) {
            classNames.push(navSizeClassesMap[this._size]);
        }
        if (navHorizontalClassesMap[this._horizontal]) {
            classNames.push(navHorizontalClassesMap[this._horizontal]);
        }
        this.updateHostClass.updateClass(classNames);
    }
    ngOnInit() {
        this._initialized = true;
        this._updateClasses();
    }
}
ThyNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-nav',
                template: `
        <ng-content></ng-content>
    `,
                host: {
                    class: 'thy-nav'
                },
                providers: [UpdateHostClassService]
            },] }
];
ThyNavComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyNavComponent.propDecorators = {
    thyType: [{ type: Input }],
    thySize: [{ type: Input }],
    thyHorizontal: [{ type: Input }],
    thyVertical: [{ type: Input }],
    thyFill: [{ type: Input }],
    _isVertical: [{ type: HostBinding, args: ['class.thy-nav--vertical',] }],
    _isFill: [{ type: HostBinding, args: ['class.thy-nav--fill',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9uYXYvbmF2LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFhLFVBQVUsRUFBYSxLQUFLLEVBQUUsV0FBVyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBTXpELE1BQU0saUJBQWlCLEdBQUc7SUFDdEIsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQ3hCLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQztJQUM1QixPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDeEIsbUJBQW1CLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztDQUNqRCxDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBRztJQUN0QixFQUFFLEVBQUUsUUFBUTtDQUNmLENBQUM7QUFFRixNQUFNLHVCQUF1QixHQUFHO0lBQzVCLElBQUksRUFBRSxFQUFFO0lBQ1IsTUFBTSxFQUFFLHdCQUF3QjtJQUNoQyxLQUFLLEVBQUUscUJBQXFCO0NBQy9CLENBQUM7QUFZRixNQUFNLE9BQU8sZUFBZTtJQTBEeEIsWUFBb0IsZUFBdUMsRUFBVSxVQUFzQjtRQUF2RSxvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBdERuRixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQW9DVyxnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUV4QixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBaUJoRCxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBdERELElBQ0ksT0FBTyxDQUFDLElBQWdCO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLFNBQVMsQ0FBQztRQUMvQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQztJQUVELElBQ0ksT0FBTyxDQUFDLElBQWdCO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDekI7SUFDTCxDQUFDO0lBRUQsSUFDSSxhQUFhLENBQUMsVUFBNEI7UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN6QjtJQUNMLENBQUM7SUFFRCxJQUNJLFdBQVcsQ0FBQyxLQUFjO1FBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUNJLE9BQU8sQ0FBQyxLQUFjO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFNTyxjQUFjO1FBQ2xCLElBQUksVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUM5QixJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMvQixVQUFVLEdBQUcsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDL0IsVUFBVSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNsRDtRQUNELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQzNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBTUQsUUFBUTtRQUNKLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7WUEzRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxTQUFTO2dCQUNuQixRQUFRLEVBQUU7O0tBRVQ7Z0JBQ0QsSUFBSSxFQUFFO29CQUNGLEtBQUssRUFBRSxTQUFTO2lCQUNuQjtnQkFDRCxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzthQUN0Qzs7O1lBaENRLHNCQUFzQjtZQURBLFVBQVU7OztzQkF3Q3BDLEtBQUs7c0JBUUwsS0FBSzs0QkFRTCxLQUFLOzBCQVFMLEtBQUs7c0JBS0wsS0FBSzswQkFLTCxXQUFXLFNBQUMseUJBQXlCO3NCQUVyQyxXQUFXLFNBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5wdXQsIEhvc3RCaW5kaW5nLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBUaHlOYXZUeXBlID0gJ3ByaW1hcnknIHwgJ3NlY29uZGFyeScgfCAndGhpcmRseScgfCAnc2Vjb25kYXJ5LWRpdmlkZXInO1xuZXhwb3J0IHR5cGUgVGh5TmF2U2l6ZSA9ICcnIHwgJ3NtJztcbmV4cG9ydCB0eXBlIFRoeU5hdkhvcml6b250YWwgPSAnJyB8ICdsZWZ0JyB8ICdjZW50ZXInIHwgJ3JpZ2h0JztcblxuY29uc3QgbmF2VHlwZUNsYXNzZXNNYXAgPSB7XG4gICAgcHJpbWFyeTogWyduYXYtcHJpbWFyeSddLFxuICAgIHNlY29uZGFyeTogWyduYXYtc2Vjb25kYXJ5J10sXG4gICAgdGhpcmRseTogWyduYXYtdGhpcmRseSddLFxuICAgICdzZWNvbmRhcnktZGl2aWRlcic6IFsnbmF2LXNlY29uZGFyeS1kaXZpZGVyJ11cbn07XG5cbmNvbnN0IG5hdlNpemVDbGFzc2VzTWFwID0ge1xuICAgIHNtOiAnbmF2LXNtJ1xufTtcblxuY29uc3QgbmF2SG9yaXpvbnRhbENsYXNzZXNNYXAgPSB7XG4gICAgbGVmdDogJycsXG4gICAgY2VudGVyOiAnanVzdGlmeS1jb250ZW50LWNlbnRlcicsXG4gICAgcmlnaHQ6ICdqdXN0aWZ5LWNvbnRlbnQtZW5kJ1xufTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktbmF2JyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgYCxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAndGh5LW5hdidcbiAgICB9LFxuICAgIHByb3ZpZGVyczogW1VwZGF0ZUhvc3RDbGFzc1NlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIFRoeU5hdkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBfdHlwZTogVGh5TmF2VHlwZTtcbiAgICBwcml2YXRlIF9zaXplOiBUaHlOYXZTaXplO1xuICAgIHByaXZhdGUgX2hvcml6b250YWw6IFRoeU5hdkhvcml6b250YWw7XG4gICAgcHJpdmF0ZSBfaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVR5cGUodHlwZTogVGh5TmF2VHlwZSkge1xuICAgICAgICB0aGlzLl90eXBlID0gdHlwZSB8fCAncHJpbWFyeSc7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ2xhc3NlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5U2l6ZShzaXplOiBUaHlOYXZTaXplKSB7XG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNsYXNzZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUhvcml6b250YWwoaG9yaXpvbnRhbDogVGh5TmF2SG9yaXpvbnRhbCkge1xuICAgICAgICB0aGlzLl9ob3Jpem9udGFsID0gaG9yaXpvbnRhbDtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDbGFzc2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlWZXJ0aWNhbCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9pc1ZlcnRpY2FsID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5RmlsbCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9pc0ZpbGwgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1uYXYtLXZlcnRpY2FsJykgX2lzVmVydGljYWwgPSBmYWxzZTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudGh5LW5hdi0tZmlsbCcpIF9pc0ZpbGwgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgX3VwZGF0ZUNsYXNzZXMoKSB7XG4gICAgICAgIGxldCBjbGFzc05hbWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBpZiAobmF2VHlwZUNsYXNzZXNNYXBbdGhpcy5fdHlwZV0pIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMgPSBbLi4ubmF2VHlwZUNsYXNzZXNNYXBbdGhpcy5fdHlwZV1dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuYXZTaXplQ2xhc3Nlc01hcFt0aGlzLl9zaXplXSkge1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKG5hdlNpemVDbGFzc2VzTWFwW3RoaXMuX3NpemVdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmF2SG9yaXpvbnRhbENsYXNzZXNNYXBbdGhpcy5faG9yaXpvbnRhbF0pIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaChuYXZIb3Jpem9udGFsQ2xhc3Nlc01hcFt0aGlzLl9ob3Jpem9udGFsXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3MudXBkYXRlQ2xhc3MoY2xhc3NOYW1lcyk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB1cGRhdGVIb3N0Q2xhc3M6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzcy5pbml0aWFsaXplRWxlbWVudChlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNsYXNzZXMoKTtcbiAgICB9XG59XG4iXX0=
import { Component, ElementRef, Input, HostBinding } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';

const _c0 = ["*"];
const navTypeClassesMap = {
    primary: ['nav-primary'],
    secondary: ['nav-secondary'],
    thirdly: ['nav-thirdly'],
    'secondary-divider': ['nav-secondary-divider']
};
const navSizeClassesMap = {
    sm: 'nav-sm'
};
const navHorizontalClassesMap = {
    left: '',
    center: 'justify-content-center',
    right: 'justify-content-end'
};
export class ThyNavComponent {
    constructor(updateHostClass, elementRef) {
        this.updateHostClass = updateHostClass;
        this.elementRef = elementRef;
        this._initialized = false;
        this._isVertical = false;
        this._isFill = false;
        this.updateHostClass.initializeElement(elementRef.nativeElement);
    }
    set thyType(type) {
        this._type = type || 'primary';
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thySize(size) {
        this._size = size;
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thyHorizontal(horizontal) {
        this._horizontal = horizontal;
        if (this._initialized) {
            this._updateClasses();
        }
    }
    set thyVertical(value) {
        this._isVertical = value;
    }
    set thyFill(value) {
        this._isFill = value;
    }
    _updateClasses() {
        let classNames = [];
        if (navTypeClassesMap[this._type]) {
            classNames = [...navTypeClassesMap[this._type]];
        }
        if (navSizeClassesMap[this._size]) {
            classNames.push(navSizeClassesMap[this._size]);
        }
        if (navHorizontalClassesMap[this._horizontal]) {
            classNames.push(navHorizontalClassesMap[this._horizontal]);
        }
        this.updateHostClass.updateClass(classNames);
    }
    ngOnInit() {
        this._initialized = true;
        this._updateClasses();
    }
}
ThyNavComponent.ɵfac = function ThyNavComponent_Factory(t) { return new (t || ThyNavComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyNavComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyNavComponent, selectors: [["thy-nav"]], hostAttrs: [1, "thy-nav"], hostVars: 4, hostBindings: function ThyNavComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-nav--vertical", ctx._isVertical)("thy-nav--fill", ctx._isFill);
    } }, inputs: { thyType: "thyType", thySize: "thySize", thyHorizontal: "thyHorizontal", thyVertical: "thyVertical", thyFill: "thyFill" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyNavComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyNavComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyNavComponent.propDecorators = {
    thyType: [{ type: Input }],
    thySize: [{ type: Input }],
    thyHorizontal: [{ type: Input }],
    thyVertical: [{ type: Input }],
    thyFill: [{ type: Input }],
    _isVertical: [{ type: HostBinding, args: ['class.thy-nav--vertical',] }],
    _isFill: [{ type: HostBinding, args: ['class.thy-nav--fill',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyNavComponent, [{
        type: Component,
        args: [{
                selector: 'thy-nav',
                template: `
        <ng-content></ng-content>
    `,
                host: {
                    class: 'thy-nav'
                },
                providers: [UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { _isVertical: [{
            type: HostBinding,
            args: ['class.thy-nav--vertical']
        }], _isFill: [{
            type: HostBinding,
            args: ['class.thy-nav--fill']
        }], thyType: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thyHorizontal: [{
            type: Input
        }], thyVertical: [{
            type: Input
        }], thyFill: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25hdi9uYXYuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWEsVUFBVSxFQUFhLEtBQUssRUFBRSxXQUFXLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDeEcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBTXpELE1BQU0saUJBQWlCLEdBQUc7QUFDMUIsSUFBSSxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDNUIsSUFBSSxTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUM7QUFDaEMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDNUIsSUFBSSxtQkFBbUIsRUFBRSxDQUFDLHVCQUF1QixDQUFDO0FBQ2xELENBQUMsQ0FBQztBQUVGLE1BQU0saUJBQWlCLEdBQUc7QUFDMUIsSUFBSSxFQUFFLEVBQUUsUUFBUTtBQUNoQixDQUFDLENBQUM7QUFFRixNQUFNLHVCQUF1QixHQUFHO0FBQ2hDLElBQUksSUFBSSxFQUFFLEVBQUU7QUFDWixJQUFJLE1BQU0sRUFBRSx3QkFBd0I7QUFDcEMsSUFBSSxLQUFLLEVBQUUscUJBQXFCO0FBQ2hDLENBQUMsQ0FBQztBQVlGLE1BQU0sT0FBTyxlQUFlO0FBQUcsSUEwRDNCLFlBQW9CLGVBQXVDLEVBQVUsVUFBc0I7QUFDL0YsUUFEd0Isb0JBQWUsR0FBZixlQUFlLENBQXdCO0FBQUMsUUFBUyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUF0RHBGLGlCQUFZLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLFFBbUM0QyxnQkFBVyxHQUFHLEtBQUssQ0FBQztBQUNoRSxRQUN3QyxZQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hELFFBZ0JRLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3pFLElBQUksQ0FBQztBQUNMLElBdkRJLElBQ0ksT0FBTyxDQUFDLElBQWdCO0FBQ2hDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksU0FBUyxDQUFDO0FBQ3ZDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQy9CLFlBQVksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ2xDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQ0ksT0FBTyxDQUFDLElBQWdCO0FBQ2hDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDMUIsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDL0IsWUFBWSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDbEMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksSUFDSSxhQUFhLENBQUMsVUFBNEI7QUFDbEQsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztBQUN0QyxRQUFRLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtBQUMvQixZQUFZLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNsQyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUNJLFdBQVcsQ0FBQyxLQUFjO0FBQ2xDLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDakMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUNJLE9BQU8sQ0FBQyxLQUFjO0FBQzlCLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDN0IsSUFBSSxDQUFDO0FBQ0wsSUFLWSxjQUFjO0FBQzFCLFFBQVEsSUFBSSxVQUFVLEdBQWEsRUFBRSxDQUFDO0FBQ3RDLFFBQVEsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDM0MsWUFBWSxVQUFVLEdBQUcsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzVELFNBQVM7QUFDVCxRQUFRLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzNDLFlBQVksVUFBVSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMzRCxTQUFTO0FBQ1QsUUFBUSxJQUFJLHVCQUF1QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtBQUN2RCxZQUFZLFVBQVUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDdkUsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDO0FBQ0wsSUFLSSxRQUFRO0FBQ1osUUFBUSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUNqQyxRQUFRLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM5QixJQUFJLENBQUM7QUFDTDsyQ0E1RUMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxTQUFTLGtCQUNuQixRQUFRLEVBQUUseUNBRVQsa0JBQ0QsSUFBSSxFQUFFO1lBQ0YsS0FBSyxFQUFFLFNBQVMsa0JBQ25CLGtCQUNELFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLGNBQ3RDOzs7Ozs2QkFDSTtBQUFDO0FBQXlDLFlBakN0QyxzQkFBc0I7QUFBSSxZQURKLFVBQVU7QUFBRztBQUFHO0FBQW1DLHNCQXdDN0UsS0FBSztBQUNSLHNCQU9HLEtBQUs7QUFDUiw0QkFPRyxLQUFLO0FBQ1IsMEJBT0csS0FBSztBQUNSLHNCQUlHLEtBQUs7QUFDUiwwQkFJRyxXQUFXLFNBQUMseUJBQXlCO0FBQU8sc0JBRTVDLFdBQVcsU0FBQyxxQkFBcUI7QUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIElucHV0LCBIb3N0QmluZGluZywgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcblxuZXhwb3J0IHR5cGUgVGh5TmF2VHlwZSA9ICdwcmltYXJ5JyB8ICdzZWNvbmRhcnknIHwgJ3RoaXJkbHknIHwgJ3NlY29uZGFyeS1kaXZpZGVyJztcbmV4cG9ydCB0eXBlIFRoeU5hdlNpemUgPSAnJyB8ICdzbSc7XG5leHBvcnQgdHlwZSBUaHlOYXZIb3Jpem9udGFsID0gJycgfCAnbGVmdCcgfCAnY2VudGVyJyB8ICdyaWdodCc7XG5cbmNvbnN0IG5hdlR5cGVDbGFzc2VzTWFwID0ge1xuICAgIHByaW1hcnk6IFsnbmF2LXByaW1hcnknXSxcbiAgICBzZWNvbmRhcnk6IFsnbmF2LXNlY29uZGFyeSddLFxuICAgIHRoaXJkbHk6IFsnbmF2LXRoaXJkbHknXSxcbiAgICAnc2Vjb25kYXJ5LWRpdmlkZXInOiBbJ25hdi1zZWNvbmRhcnktZGl2aWRlciddXG59O1xuXG5jb25zdCBuYXZTaXplQ2xhc3Nlc01hcCA9IHtcbiAgICBzbTogJ25hdi1zbSdcbn07XG5cbmNvbnN0IG5hdkhvcml6b250YWxDbGFzc2VzTWFwID0ge1xuICAgIGxlZnQ6ICcnLFxuICAgIGNlbnRlcjogJ2p1c3RpZnktY29udGVudC1jZW50ZXInLFxuICAgIHJpZ2h0OiAnanVzdGlmeS1jb250ZW50LWVuZCdcbn07XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGh5LW5hdicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIGAsXG4gICAgaG9zdDoge1xuICAgICAgICBjbGFzczogJ3RoeS1uYXYnXG4gICAgfSxcbiAgICBwcm92aWRlcnM6IFtVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlOYXZDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgX3R5cGU6IFRoeU5hdlR5cGU7XG4gICAgcHJpdmF0ZSBfc2l6ZTogVGh5TmF2U2l6ZTtcbiAgICBwcml2YXRlIF9ob3Jpem9udGFsOiBUaHlOYXZIb3Jpem9udGFsO1xuICAgIHByaXZhdGUgX2luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlUeXBlKHR5cGU6IFRoeU5hdlR5cGUpIHtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGUgfHwgJ3ByaW1hcnknO1xuICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNsYXNzZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVNpemUoc2l6ZTogVGh5TmF2U2l6ZSkge1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDbGFzc2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlIb3Jpem9udGFsKGhvcml6b250YWw6IFRoeU5hdkhvcml6b250YWwpIHtcbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbCA9IGhvcml6b250YWw7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ2xhc3NlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5VmVydGljYWwodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNWZXJ0aWNhbCA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUZpbGwodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNGaWxsID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktbmF2LS12ZXJ0aWNhbCcpIF9pc1ZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1uYXYtLWZpbGwnKSBfaXNGaWxsID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIF91cGRhdGVDbGFzc2VzKCkge1xuICAgICAgICBsZXQgY2xhc3NOYW1lczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgaWYgKG5hdlR5cGVDbGFzc2VzTWFwW3RoaXMuX3R5cGVdKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzID0gWy4uLm5hdlR5cGVDbGFzc2VzTWFwW3RoaXMuX3R5cGVdXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmF2U2l6ZUNsYXNzZXNNYXBbdGhpcy5fc2l6ZV0pIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaChuYXZTaXplQ2xhc3Nlc01hcFt0aGlzLl9zaXplXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hdkhvcml6b250YWxDbGFzc2VzTWFwW3RoaXMuX2hvcml6b250YWxdKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2gobmF2SG9yaXpvbnRhbENsYXNzZXNNYXBbdGhpcy5faG9yaXpvbnRhbF0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzLnVwZGF0ZUNsYXNzKGNsYXNzTmFtZXMpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdXBkYXRlSG9zdENsYXNzOiBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3MuaW5pdGlhbGl6ZUVsZW1lbnQoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl91cGRhdGVDbGFzc2VzKCk7XG4gICAgfVxufVxuIl19
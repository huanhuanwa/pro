import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { TinyDate } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function YearPanelComponent_tr_10_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 7);
    ɵngcc0.ɵɵlistener("click", function YearPanelComponent_tr_10_td_1_Template_td_click_0_listener() { const yearCell_r3 = ctx.$implicit; return yearCell_r3.disabled ? null : yearCell_r3.onClick(); });
    ɵngcc0.ɵɵelementStart(1, "a");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const yearCell_r3 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", yearCell_r3.title);
    ɵngcc0.ɵɵproperty("ngClass", yearCell_r3.classMap);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("", ctx_r2.prefixCls, "-year");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(yearCell_r3.content);
} }
function YearPanelComponent_tr_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr", 5);
    ɵngcc0.ɵɵtemplate(1, YearPanelComponent_tr_10_td_1_Template, 3, 6, "td", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", row_r1)("ngForTrackBy", ctx_r0.trackPanelYear);
} }
const MAX_ROW = 4;
const MAX_COL = 3;
export class YearPanelComponent {
    constructor() {
        this.valueChange = new EventEmitter();
        this.decadePanelShow = new EventEmitter();
        this.prefixCls = 'thy-calendar-year-panel';
    }
    get currentYear() {
        return this.value.getYear();
    }
    get startYear() {
        return parseInt(`${this.currentYear / 10}`, 10) * 10;
    }
    get endYear() {
        return this.startYear + 9;
    }
    ngOnChanges(changes) {
        if (changes.value || changes.disabledDate) {
            this.render();
        }
    }
    previousDecade() {
        this.gotoYear(-10);
    }
    nextDecade() {
        this.gotoYear(10);
    }
    trackPanelYear(_index, yearData) {
        return yearData.content;
    }
    render() {
        if (this.value) {
            this.panelYears = this.makePanelYears();
        }
    }
    // Re-render panel content by the header's buttons (NOTE: Do not try to trigger final value change)
    gotoYear(amount) {
        this.value = this.value.addYears(amount);
        // this.valueChange.emit(this.value); // Do not trigger final value change
        this.render();
    }
    chooseYear(year) {
        this.value = this.value.setYear(year);
        this.valueChange.emit(this.value);
        this.render();
    }
    makePanelYears() {
        const years = [];
        const currentYear = this.currentYear;
        const startYear = this.startYear;
        const endYear = this.endYear;
        const previousYear = startYear - 1;
        let index = 0;
        for (let rowIndex = 0; rowIndex < MAX_ROW; rowIndex++) {
            years[rowIndex] = [];
            for (let colIndex = 0; colIndex < MAX_COL; colIndex++) {
                const year = previousYear + index;
                const content = String(year);
                const disabled = this.disabledDate ? this.disabledDate(this.value.setYear(year).nativeDate) : false;
                const cell = (years[rowIndex][colIndex] = {
                    disabled,
                    content,
                    year,
                    title: content,
                    isCurrent: year === currentYear,
                    isLowerThanStart: year < startYear,
                    isBiggerThanEnd: year > endYear,
                    classMap: null,
                    onClick: () => this.chooseYear(cell.year)
                });
                cell.classMap = {
                    [`${this.prefixCls}-cell`]: true,
                    [`${this.prefixCls}-selected-cell`]: cell.isCurrent,
                    [`${this.prefixCls}-cell-disabled`]: disabled,
                    [`${this.prefixCls}-last-decade-cell`]: cell.isLowerThanStart,
                    [`${this.prefixCls}-next-decade-cell`]: cell.isBiggerThanEnd
                };
                index++;
            }
        }
        return years;
    }
}
YearPanelComponent.ɵfac = function YearPanelComponent_Factory(t) { return new (t || YearPanelComponent)(); };
YearPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: YearPanelComponent, selectors: [["year-panel"]], inputs: { value: "value", disabledDate: "disabledDate" }, outputs: { valueChange: "valueChange", decadePanelShow: "decadePanelShow" }, exportAs: ["yearPanel"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 11, vars: 30, consts: [["role", "button", "title", "\u4E0A\u4E00\u5E74\u4EE3", 3, "click"], ["role", "button", "title", "\u9009\u62E9\u5E74\u4EE3", 3, "click"], ["title", "\u4E0B\u4E00\u5E74\u4EE3", "role", "button", 3, "click"], ["cellSpacing", "0", "role", "grid"], ["role", "row", 4, "ngFor", "ngForOf"], ["role", "row"], ["role", "gridcell", 3, "title", "ngClass", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["role", "gridcell", 3, "title", "ngClass", "click"]], template: function YearPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "a", 0);
        ɵngcc0.ɵɵlistener("click", function YearPanelComponent_Template_a_click_2_listener() { return ctx.previousDecade(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "a", 1);
        ɵngcc0.ɵɵlistener("click", function YearPanelComponent_Template_a_click_3_listener() { return ctx.decadePanelShow.emit(); });
        ɵngcc0.ɵɵelementStart(4, "span");
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "a", 2);
        ɵngcc0.ɵɵlistener("click", function YearPanelComponent_Template_a_click_6_listener() { return ctx.nextDecade(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div");
        ɵngcc0.ɵɵelementStart(8, "table", 3);
        ɵngcc0.ɵɵelementStart(9, "tbody");
        ɵngcc0.ɵɵtemplate(10, YearPanelComponent_tr_10_Template, 2, 2, "tr", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.prefixCls);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-header");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-prev-decade-btn");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-decade-select");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-decade-select-content");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate2(" ", ctx.startYear, "-", ctx.endYear, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-next-decade-btn");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-body");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-table");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-tbody");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.panelYears);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });
YearPanelComponent.ctorParameters = () => [];
YearPanelComponent.propDecorators = {
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    disabledDate: [{ type: Input }],
    decadePanelShow: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(YearPanelComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'year-panel',
                exportAs: 'yearPanel',
                template: "<div class=\"{{ prefixCls }}\">\n  <div class=\"{{ prefixCls }}-header\">\n    <a class=\"{{ prefixCls }}-prev-decade-btn\" role=\"button\" (click)=\"previousDecade()\" title=\"\u4E0A\u4E00\u5E74\u4EE3\"></a>\n    <a class=\"{{ prefixCls }}-decade-select\" role=\"button\" (click)=\"decadePanelShow.emit()\" title=\"\u9009\u62E9\u5E74\u4EE3\">\n      <span class=\"{{ prefixCls }}-decade-select-content\"> {{ startYear }}-{{ endYear }} </span>\n    </a>\n\n    <a class=\"{{ prefixCls }}-next-decade-btn\" (click)=\"nextDecade()\" title=\"\u4E0B\u4E00\u5E74\u4EE3\" role=\"button\"></a>\n  </div>\n  <div class=\"{{ prefixCls }}-body\">\n    <table class=\"{{ prefixCls }}-table\" cellSpacing=\"0\" role=\"grid\">\n      <tbody class=\"{{ prefixCls }}-tbody\">\n        <tr *ngFor=\"let row of panelYears\" role=\"row\">\n          <td\n            *ngFor=\"let yearCell of row; trackBy: trackPanelYear\"\n            role=\"gridcell\"\n            title=\"{{ yearCell.title }}\"\n            (click)=\"yearCell.disabled ? null : yearCell.onClick()\"\n            [ngClass]=\"yearCell.classMap\"\n          >\n            <a class=\"{{ prefixCls }}-year\">{{ yearCell.content }}</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { valueChange: [{
            type: Output
        }], decadePanelShow: [{
            type: Output
        }], value: [{
            type: Input
        }], disabledDate: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
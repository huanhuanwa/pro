import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { TinyDate } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../calendar/calendar-header.component';
import * as ɵngcc2 from '../date/date-table.component';
export class InnerPopupComponent {
    constructor() {
        this.panelModeChange = new EventEmitter();
        this.headerChange = new EventEmitter();
        this.selectDate = new EventEmitter();
        this.dayHover = new EventEmitter();
        this.prefixCls = 'thy-calendar';
    }
    ngOnChanges(changes) {
        if (changes.value && !this.value) {
            this.value = new TinyDate();
        }
    }
    // The value real changed to outside
    onSelectDate(date) {
        const value = date instanceof TinyDate ? date : new TinyDate(date);
        this.selectDate.emit(value);
    }
}
InnerPopupComponent.ɵfac = function InnerPopupComponent_Factory(t) { return new (t || InnerPopupComponent)(); };
InnerPopupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: InnerPopupComponent, selectors: [["inner-popup"]], inputs: { value: "value", showWeek: "showWeek", enablePrev: "enablePrev", enableNext: "enableNext", disabledDate: "disabledDate", dateRender: "dateRender", selectedValue: "selectedValue", hoverValue: "hoverValue", panelMode: "panelMode" }, outputs: { panelModeChange: "panelModeChange", headerChange: "headerChange", selectDate: "selectDate", dayHover: "dayHover" }, exportAs: ["innerPopup"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 13, consts: [[3, "panelMode", "value", "enablePrev", "enableNext", "panelModeChange", "valueChange"], ["showWeekNumber", "false", 3, "showWeek", "value", "disabledDate", "dateCellRender", "selectedValue", "hoverValue", "valueChange", "dayHover"]], template: function InnerPopupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "calendar-header", 0);
        ɵngcc0.ɵɵlistener("panelModeChange", function InnerPopupComponent_Template_calendar_header_panelModeChange_0_listener($event) { return ctx.panelMode = $event; })("panelModeChange", function InnerPopupComponent_Template_calendar_header_panelModeChange_0_listener($event) { return ctx.panelModeChange.emit($event); })("valueChange", function InnerPopupComponent_Template_calendar_header_valueChange_0_listener($event) { return ctx.value = $event; })("valueChange", function InnerPopupComponent_Template_calendar_header_valueChange_0_listener($event) { return ctx.headerChange.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "date-table", 1);
        ɵngcc0.ɵɵlistener("valueChange", function InnerPopupComponent_Template_date_table_valueChange_2_listener($event) { return ctx.onSelectDate($event); })("dayHover", function InnerPopupComponent_Template_date_table_dayHover_2_listener($event) { return ctx.dayHover.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("panelMode", ctx.panelMode)("value", ctx.value)("enablePrev", ctx.enablePrev)("enableNext", ctx.enableNext);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-body");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("showWeek", ctx.showWeek)("value", ctx.value)("disabledDate", ctx.disabledDate)("dateCellRender", ctx.dateRender)("selectedValue", ctx.selectedValue)("hoverValue", ctx.hoverValue);
    } }, directives: [ɵngcc1.CalendarHeaderComponent, ɵngcc2.DateTableComponent], encapsulation: 2, changeDetection: 0 });
InnerPopupComponent.ctorParameters = () => [];
InnerPopupComponent.propDecorators = {
    showWeek: [{ type: Input }],
    enablePrev: [{ type: Input }],
    enableNext: [{ type: Input }],
    disabledDate: [{ type: Input }],
    dateRender: [{ type: Input }],
    selectedValue: [{ type: Input }],
    hoverValue: [{ type: Input }],
    panelMode: [{ type: Input }],
    panelModeChange: [{ type: Output }],
    value: [{ type: Input }],
    headerChange: [{ type: Output }],
    selectDate: [{ type: Output }],
    dayHover: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InnerPopupComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'inner-popup',
                exportAs: 'innerPopup',
                template: "<calendar-header\n  [(panelMode)]=\"panelMode\"\n  (panelModeChange)=\"panelModeChange.emit($event)\"\n  [(value)]=\"value\"\n  (valueChange)=\"headerChange.emit($event)\"\n  [enablePrev]=\"enablePrev\"\n  [enableNext]=\"enableNext\"\n></calendar-header>\n\n<div class=\"{{ prefixCls }}-body\">\n  <date-table\n    [showWeek]=\"showWeek\"\n    [value]=\"value\"\n    (valueChange)=\"onSelectDate($event)\"\n    showWeekNumber=\"false\"\n    [disabledDate]=\"disabledDate\"\n    [dateCellRender]=\"dateRender\"\n    [selectedValue]=\"selectedValue\"\n    [hoverValue]=\"hoverValue\"\n    (dayHover)=\"dayHover.emit($event)\"\n  ></date-table>\n</div>\n"
            }]
    }], function () { return []; }, { panelModeChange: [{
            type: Output
        }], headerChange: [{
            type: Output
        }], selectDate: [{
            type: Output
        }], dayHover: [{
            type: Output
        }], value: [{
            type: Input
        }], showWeek: [{
            type: Input
        }], enablePrev: [{
            type: Input
        }], enableNext: [{
            type: Input
        }], disabledDate: [{
            type: Input
        }], dateRender: [{
            type: Input
        }], selectedValue: [{
            type: Input
        }], hoverValue: [{
            type: Input
        }], panelMode: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5uZXItcG9wdXAuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZGF0ZS1waWNrZXIvbGliL3BvcHVwcy9pbm5lci1wb3B1cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBOEIsTUFBTSxlQUFlLENBQUM7QUFHdkksT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBUzNDLE1BQU0sT0FBTyxtQkFBbUI7QUFBRyxJQXFCL0I7QUFBZ0IsUUFWRyxvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFhLENBQUM7QUFDdkUsUUFHdUIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBWSxDQUFDO0FBQ25FLFFBQXVCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBWSxDQUFDO0FBQ2pFLFFBQXVCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBWSxDQUFDO0FBQy9ELFFBQ0ksY0FBUyxHQUFHLGNBQWMsQ0FBQztBQUMvQixJQUNtQixDQUFDO0FBQ3BCLElBQ0ksV0FBVyxDQUFDLE9BQXNCO0FBQUksUUFDbEMsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtBQUMxQyxZQUFZLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUN4QyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxvQ0FBb0M7QUFDeEMsSUFBSSxZQUFZLENBQUMsSUFBcUI7QUFBSSxRQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQVksUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNFLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsSUFBSSxDQUFDO0FBQ0w7K0NBeENDLFNBQVMsU0FBQyxrQkFDUCxlQUFlLEVBQUU7VUFBdUIsQ0FBQyxNQUFNLGtCQUMvQyxRQUFRLEVBQUUsYUFBYSxrQkFDdkIsUUFBUSxFQUFFLFlBQVksa0JBQ3RCLHVwQkFBeUMsY0FDNUM7Ozs7Ozs7Ozs7Ozs7OzswSEFDSTtBQUFDO0FBQStDO0FBR2xELHVCQUZFLEtBQUs7QUFBSyx5QkFFVixLQUFLO0FBQUsseUJBQ1YsS0FBSztBQUFLLDJCQUNWLEtBQUs7QUFBSyx5QkFDVixLQUFLO0FBQUssNEJBQ1YsS0FBSztBQUFLLHlCQUNWLEtBQUs7QUFBSyx3QkFFVixLQUFLO0FBQUssOEJBQ1YsTUFBTTtBQUFLLG9CQUVYLEtBQUs7QUFBSywyQkFFVixNQUFNO0FBQUsseUJBQ1gsTUFBTTtBQUFLLHVCQUNYLE1BQU07QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBEaXNhYmxlZERhdGVGbiwgUGFuZWxNb2RlLCBTdXBwb3J0VGltZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9zdGFuZGFyZC10eXBlcyc7XG5pbXBvcnQgeyBUaW55RGF0ZSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5pbXBvcnQgeyBGdW5jdGlvblByb3AgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBzZWxlY3RvcjogJ2lubmVyLXBvcHVwJyxcbiAgICBleHBvcnRBczogJ2lubmVyUG9wdXAnLFxuICAgIHRlbXBsYXRlVXJsOiAnaW5uZXItcG9wdXAuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElubmVyUG9wdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIEBJbnB1dCgpIHNob3dXZWVrOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgZW5hYmxlUHJldjogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBlbmFibGVOZXh0OiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGRpc2FibGVkRGF0ZTogRGlzYWJsZWREYXRlRm47XG4gICAgQElucHV0KCkgZGF0ZVJlbmRlcjogRnVuY3Rpb25Qcm9wPFRlbXBsYXRlUmVmPERhdGU+IHwgc3RyaW5nPjtcbiAgICBASW5wdXQoKSBzZWxlY3RlZFZhbHVlOiBUaW55RGF0ZVtdOyAvLyBSYW5nZSBPTkxZXG4gICAgQElucHV0KCkgaG92ZXJWYWx1ZTogVGlueURhdGVbXTsgLy8gUmFuZ2UgT05MWVxuXG4gICAgQElucHV0KCkgcGFuZWxNb2RlOiBQYW5lbE1vZGU7XG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IHBhbmVsTW9kZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8UGFuZWxNb2RlPigpO1xuXG4gICAgQElucHV0KCkgdmFsdWU6IFRpbnlEYXRlO1xuXG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IGhlYWRlckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8VGlueURhdGU+KCk7XG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IHNlbGVjdERhdGUgPSBuZXcgRXZlbnRFbWl0dGVyPFRpbnlEYXRlPigpO1xuICAgIEBPdXRwdXQoKSByZWFkb25seSBkYXlIb3ZlciA9IG5ldyBFdmVudEVtaXR0ZXI8VGlueURhdGU+KCk7XG5cbiAgICBwcmVmaXhDbHMgPSAndGh5LWNhbGVuZGFyJztcblxuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAgICAgaWYgKGNoYW5nZXMudmFsdWUgJiYgIXRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBuZXcgVGlueURhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoZSB2YWx1ZSByZWFsIGNoYW5nZWQgdG8gb3V0c2lkZVxuICAgIG9uU2VsZWN0RGF0ZShkYXRlOiBUaW55RGF0ZSB8IERhdGUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBkYXRlIGluc3RhbmNlb2YgVGlueURhdGUgPyBkYXRlIDogbmV3IFRpbnlEYXRlKGRhdGUpO1xuICAgICAgICB0aGlzLnNlbGVjdERhdGUuZW1pdCh2YWx1ZSk7XG4gICAgfVxufVxuIl19
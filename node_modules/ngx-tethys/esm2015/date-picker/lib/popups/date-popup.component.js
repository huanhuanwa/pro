import { endOfDay, startOfDay } from 'date-fns';
import { sortRangeValue, TinyDate } from 'ngx-tethys/util';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { hasValue, makeValue, transformDateValue } from '../../picker.util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './inner-popup.component';
import * as ɵngcc3 from '../calendar/calendar-footer.component';

function DatePopupComponent_ng_container_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DatePopupComponent_ng_container_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c0 = function () { return { partType: "left" }; };
const _c1 = function () { return { partType: "right" }; };
function DatePopupComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DatePopupComponent_ng_container_4_ng_container_1_Template, 1, 0, "ng-container", 6);
    ɵngcc0.ɵɵtemplate(2, DatePopupComponent_ng_container_4_ng_container_2_Template, 1, 0, "ng-container", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r9 = ɵngcc0.ɵɵreference(14);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction0(4, _c0));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction0(5, _c1));
} }
function DatePopupComponent_ng_container_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DatePopupComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DatePopupComponent_ng_container_5_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r5 = ɵngcc0.ɵɵreference(10);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function DatePopupComponent_ng_container_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DatePopupComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DatePopupComponent_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r5 = ɵngcc0.ɵɵreference(10);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function DatePopupComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "inner-popup", 8);
    ɵngcc0.ɵɵlistener("panelModeChange", function DatePopupComponent_ng_template_7_Template_inner_popup_panelModeChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const partType_r15 = ctx.partType; const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.onPanelModeChange($event, partType_r15); })("dayHover", function DatePopupComponent_ng_template_7_Template_inner_popup_dayHover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.onDayHover($event); })("selectDate", function DatePopupComponent_ng_template_7_Template_inner_popup_selectDate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.changeValueFromSelect($event); })("headerChange", function DatePopupComponent_ng_template_7_Template_inner_popup_headerChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const partType_r15 = ctx.partType; const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onHeaderChange($event, partType_r15); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const partType_r15 = ctx.partType;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("showWeek", ctx_r4.showWeek)("panelMode", ctx_r4.getPanelMode(partType_r15))("value", ctx_r4.getValueBySelector(partType_r15))("disabledDate", ctx_r4.disabledDate)("dateRender", ctx_r4.dateRender)("selectedValue", ctx_r4.selectedValue)("hoverValue", ctx_r4.hoverValue)("enablePrev", ctx_r4.enablePrevNext("prev", partType_r15))("enableNext", ctx_r4.enablePrevNext("next", partType_r15));
} }
function DatePopupComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "calendar-footer", 9);
    ɵngcc0.ɵɵlistener("showTimePickerChange", function DatePopupComponent_ng_template_9_Template_calendar_footer_showTimePickerChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onShowTimePickerChange($event); })("selectTime", function DatePopupComponent_ng_template_9_Template_calendar_footer_selectTime_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.onSelectTime($event); })("clickOk", function DatePopupComponent_ng_template_9_Template_calendar_footer_clickOk_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onClickOk(); })("clickRemove", function DatePopupComponent_ng_template_9_Template_calendar_footer_clickRemove_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.onClickRemove(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("showTime", ctx_r6.showTime)("mustShowTime", ctx_r6.mustShowTime)("value", ctx_r6.value);
} }
function DatePopupComponent_ng_template_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DatePopupComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, DatePopupComponent_ng_template_11_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function DatePopupComponent_ng_template_13_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c2 = function (a0) { return { partType: a0 }; };
function DatePopupComponent_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵtemplate(2, DatePopupComponent_ng_template_13_ng_container_2_Template, 1, 0, "ng-container", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const partType_r27 = ctx.partType;
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵclassMapInterpolate3("", ctx_r10.prefixCls, "-range-part ", ctx_r10.prefixCls, "-range-", partType_r27, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(7, _c2, partType_r27));
} }
export class DatePopupComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.panelModeChange = new EventEmitter();
        this.calendarChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.resultOk = new EventEmitter(); // Emitted when done with date selecting
        this.showTimePickerChange = new EventEmitter();
        this.prefixCls = 'thy-calendar';
        this.showTimePicker = false;
        this.partTypeMap = { left: 0, right: 1 };
    }
    setProperty(key, value) {
        this[key] = value;
        this.cdr.markForCheck();
    }
    ngOnInit() {
        // Initialization for range properties to prevent errors while later assignment
        if (this.isRange) {
            ['panelMode', 'selectedValue', 'hoverValue'].forEach(prop => this.initialArray(prop));
        }
        if (this.defaultPickerValue && !hasValue(this.value)) {
            const { value } = transformDateValue(this.defaultPickerValue);
            this.value = makeValue(value, this.isRange);
            if (this.isRange) {
                this.reInitializeRangeRelatedValue();
            }
        }
        this.initDisabledDate();
    }
    ngOnChanges(changes) {
        if (this.isRange) {
            if (changes.value) {
                this.reInitializeRangeRelatedValue();
            }
        }
    }
    reInitializeRangeRelatedValue() {
        this.clearHoverValue();
        this.selectedValue = this.value;
        this.valueForRangeShow = this.normalizeRangeValue(this.value);
    }
    initDisabledDate() {
        let minDate;
        let maxDate;
        let disabledDateFn;
        if (this.minDate) {
            const { value } = transformDateValue(this.minDate);
            minDate = new TinyDate(value);
        }
        if (this.maxDate) {
            const { value } = transformDateValue(this.maxDate);
            maxDate = new TinyDate(value);
        }
        if (this.disabledDate) {
            disabledDateFn = this.disabledDate;
        }
        this.disabledDate = d => {
            let expression = false;
            if (minDate) {
                expression = d < minDate.startOfDay().nativeDate;
            }
            if (maxDate && !expression) {
                expression = d > maxDate.endOfDay().nativeDate;
            }
            if (disabledDateFn && typeof disabledDateFn === 'function' && !expression) {
                expression = disabledDateFn(d);
            }
            return expression;
        };
    }
    onShowTimePickerChange(show) {
        this.showTimePicker = show;
        this.showTimePickerChange.emit(show);
    }
    onClickOk() {
        this.setValue(this.value);
        this.valueChange.emit(this.value);
        this.resultOk.emit();
    }
    onClickRemove() {
        this.value = this.isRange ? [] : null;
        this.setValue(this.value);
        this.valueChange.emit(this.value);
    }
    onDayHover(value) {
        if (this.isRange && this.selectedValue[0] && !this.selectedValue[1]) {
            // When right value is selected, don't do hover
            const base = this.selectedValue[0]; // Use the left of selected value as the base to decide later hoverValue
            if (base.isBeforeDay(value)) {
                this.hoverValue = [base, value];
            }
            else {
                this.hoverValue = [value, base];
            }
        }
    }
    onPanelModeChange(mode, partType) {
        if (this.isRange) {
            this.panelMode[this.getPartTypeIndex(partType)] = mode;
        }
        else {
            this.panelMode = mode;
        }
        this.panelModeChange.emit(this.panelMode);
    }
    onHeaderChange(value, partType) {
        if (this.isRange) {
            this.valueForRangeShow[this.getPartTypeIndex(partType)] = value;
            this.valueForRangeShow = this.normalizeRangeValue(this.valueForRangeShow); // Should always take care of start/end
        }
        else {
            if (this.showTimePicker) {
                this.setValue(value);
            }
        }
    }
    onSelectTime(value, partType) {
        if (this.isRange) {
            // TODO:range picker set time
        }
        else {
            this.setValue(new TinyDate(value.nativeDate));
        }
    }
    changeValueFromSelect(value) {
        if (this.isRange) {
            const [left, right] = this.selectedValue;
            if ((!left && !right) || (left && right)) {
                // If totally full or empty, clean up && re-assign left first
                this.hoverValue = this.selectedValue = [value];
                this.selectedValue = [new TinyDate(startOfDay(this.selectedValue[0].nativeDate))];
                this.calendarChange.emit([this.selectedValue[0].clone()]);
            }
            else if (left && !right) {
                // If one of them is empty, assign the other one and sort, then set the final values
                this.clearHoverValue(); // Clean up
                this.setRangeValue('right', value);
                this.selectedValue = sortRangeValue(this.selectedValue); // Sort
                this.selectedValue = [
                    new TinyDate(startOfDay(this.selectedValue[0].nativeDate)),
                    new TinyDate(endOfDay(this.selectedValue[1].nativeDate))
                ];
                this.valueForRangeShow = this.normalizeRangeValue(this.selectedValue);
                this.setValue(this.cloneRangeDate(this.selectedValue));
                this.calendarChange.emit(this.cloneRangeDate(this.selectedValue));
            }
        }
        else {
            this.setValue(value);
        }
    }
    enablePrevNext(direction, partType) {
        if (this.isRange) {
            const [start, end] = this.valueForRangeShow;
            const showMiddle = !start.addMonths(1).isSame(end, 'month'); // One month diff then don't show middle prev/next
            if ((partType === 'left' && direction === 'next') || (partType === 'right' && direction === 'prev')) {
                return showMiddle;
            }
            return true;
        }
        else {
            return true;
        }
    }
    getPanelMode(partType) {
        if (this.isRange) {
            return this.panelMode[this.getPartTypeIndex(partType)];
        }
        else {
            return this.panelMode;
        }
    }
    getValueBySelector(partType) {
        if (this.isRange) {
            const valueShow = this.valueForRangeShow; // Use the real time value that without decorations when timepicker is shown up
            return valueShow[this.getPartTypeIndex(partType)];
        }
        else {
            return this.value;
        }
    }
    getPartTypeIndex(partType) {
        return this.partTypeMap[partType];
    }
    clearHoverValue() {
        this.hoverValue = [];
    }
    setValue(value) {
        this.value = value;
        if (!this.showTime || !this.showTimePicker) {
            this.valueChange.emit(this.value);
        }
    }
    normalizeRangeValue(value) {
        const [start, end] = value;
        const newStart = start || new TinyDate();
        const newEnd = end && end.isSameMonth(newStart) ? end.addMonths(1) : end || newStart.addMonths(1);
        return [newStart, newEnd];
    }
    // Renew and set a range value to trigger sub-component's change detection
    setRangeValue(partType, value) {
        const ref = (this.selectedValue = this.cloneRangeDate(this.selectedValue));
        ref[this.getPartTypeIndex(partType)] = value;
    }
    cloneRangeDate(value) {
        return [value[0] && value[0].clone(), value[1] && value[1].clone()];
    }
    initialArray(key) {
        if (!this[key] || !Array.isArray(this[key])) {
            this[key] = [];
        }
    }
}
DatePopupComponent.ɵfac = function DatePopupComponent_Factory(t) { return new (t || DatePopupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
DatePopupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatePopupComponent, selectors: [["date-popup"]], inputs: { value: "value", disabledDate: "disabledDate", panelMode: "panelMode", isRange: "isRange", showWeek: "showWeek", format: "format", minDate: "minDate", maxDate: "maxDate", showToday: "showToday", showTime: "showTime", mustShowTime: "mustShowTime", dateRender: "dateRender", className: "className", defaultPickerValue: "defaultPickerValue" }, outputs: { panelModeChange: "panelModeChange", calendarChange: "calendarChange", valueChange: "valueChange", resultOk: "resultOk", showTimePickerChange: "showTimePickerChange" }, exportAs: ["datePopup"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 15, vars: 19, consts: [[4, "ngIf", "ngIfElse"], [4, "ngIf"], ["tplInnerPopup", ""], ["tplFooter", ""], ["tplSinglePart", ""], ["tplRangePart", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngTemplateOutlet"], [3, "showWeek", "panelMode", "value", "disabledDate", "dateRender", "selectedValue", "hoverValue", "enablePrev", "enableNext", "panelModeChange", "dayHover", "selectDate", "headerChange"], [3, "showTime", "mustShowTime", "value", "showTimePickerChange", "selectTime", "clickOk", "clickRemove"], [2, "outline", "none"]], template: function DatePopupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵelementStart(3, "div");
        ɵngcc0.ɵɵtemplate(4, DatePopupComponent_ng_container_4_Template, 3, 6, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(5, DatePopupComponent_ng_container_5_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, DatePopupComponent_ng_container_6_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, DatePopupComponent_ng_template_7_Template, 1, 9, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(9, DatePopupComponent_ng_template_9_Template, 1, 3, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(11, DatePopupComponent_ng_template_11_Template, 2, 1, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(13, DatePopupComponent_ng_template_13_Template, 3, 9, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r7 = ɵngcc0.ɵɵreference(12);
        ɵngcc0.ɵɵclassMapInterpolate2("", ctx.prefixCls, "-picker-container ", ctx.className, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate3("", ctx.prefixCls, " ", ctx.showWeek ? ctx.prefixCls + "-week-number" : "", "\n     ", ctx.isRange ? ctx.prefixCls + "-range" : "", "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-panel");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("", ctx.prefixCls, "-date-panel");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRange)("ngIfElse", _r7);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isRange);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRange);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc2.InnerPopupComponent, ɵngcc3.CalendarFooterComponent], encapsulation: 2, changeDetection: 0 });
DatePopupComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DatePopupComponent.propDecorators = {
    isRange: [{ type: Input }],
    showWeek: [{ type: Input }],
    format: [{ type: Input }],
    disabledDate: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    showToday: [{ type: Input }],
    showTime: [{ type: Input }],
    mustShowTime: [{ type: Input }],
    dateRender: [{ type: Input }],
    className: [{ type: Input }],
    panelMode: [{ type: Input }],
    value: [{ type: Input }],
    defaultPickerValue: [{ type: Input }],
    panelModeChange: [{ type: Output }],
    calendarChange: [{ type: Output }],
    valueChange: [{ type: Output }],
    resultOk: [{ type: Output }],
    showTimePickerChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatePopupComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'date-popup',
                exportAs: 'datePopup',
                template: "<div class=\"{{ prefixCls }}-picker-container {{ className }}\">\n  <div\n    class=\"{{ prefixCls }} {{ showWeek ? prefixCls + '-week-number' : '' }}\n     {{ isRange ? prefixCls + '-range' : '' }}\"\n  >\n    <div class=\"{{ prefixCls }}-panel\">\n      <div class=\"{{ prefixCls }}-date-panel\">\n        <ng-container *ngIf=\"isRange; else tplSinglePart\">\n          <!-- Range Selectors -->\n          <ng-container *ngTemplateOutlet=\"tplRangePart; context: { partType: 'left' }\"></ng-container>\n          <ng-container *ngTemplateOutlet=\"tplRangePart; context: { partType: 'right' }\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"!isRange\">\n          <!-- Single ONLY -->\n          <ng-container *ngTemplateOutlet=\"tplFooter\"></ng-container>\n        </ng-container>\n      </div>\n      <ng-container *ngIf=\"isRange\">\n        <!-- Range ONLY -->\n        <ng-container *ngTemplateOutlet=\"tplFooter\"></ng-container>\n      </ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #tplInnerPopup let-partType=\"partType\">\n  <inner-popup\n    [showWeek]=\"showWeek\"\n    [panelMode]=\"getPanelMode(partType)\"\n    (panelModeChange)=\"onPanelModeChange($event, partType)\"\n    [value]=\"getValueBySelector(partType)\"\n    [disabledDate]=\"disabledDate\"\n    [dateRender]=\"dateRender\"\n    [selectedValue]=\"selectedValue\"\n    [hoverValue]=\"hoverValue\"\n    [enablePrev]=\"enablePrevNext('prev', partType)\"\n    [enableNext]=\"enablePrevNext('next', partType)\"\n    (dayHover)=\"onDayHover($event)\"\n    (selectDate)=\"changeValueFromSelect($event)\"\n    (headerChange)=\"onHeaderChange($event, partType)\"\n  ></inner-popup>\n</ng-template>\n\n<ng-template #tplFooter>\n  <calendar-footer\n    [showTime]=\"showTime\"\n    [mustShowTime]=\"mustShowTime\"\n    [value]=\"value\"\n    (showTimePickerChange)=\"onShowTimePickerChange($event)\"\n    (selectTime)=\"onSelectTime($event)\"\n    (clickOk)=\"onClickOk()\"\n    (clickRemove)=\"onClickRemove()\"\n  ></calendar-footer>\n</ng-template>\n\n<!-- Single ONLY -->\n<ng-template #tplSinglePart>\n  <div>\n    <ng-container *ngTemplateOutlet=\"tplInnerPopup\"></ng-container>\n  </div>\n</ng-template>\n\n<!-- Range ONLY -->\n<ng-template #tplRangePart let-partType=\"partType\">\n  <div class=\"{{ prefixCls }}-range-part {{ prefixCls }}-range-{{ partType }}\">\n    <div style=\"outline: none;\">\n      <ng-container *ngTemplateOutlet=\"tplInnerPopup; context: { partType: partType }\"></ng-container>\n    </div>\n  </div>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { panelModeChange: [{
            type: Output
        }], calendarChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], resultOk: [{
            type: Output
        }], showTimePickerChange: [{
            type: Output
        }], value: [{
            type: Input
        }], disabledDate: [{
            type: Input
        }], panelMode: [{
            type: Input
        }], isRange: [{
            type: Input
        }], showWeek: [{
            type: Input
        }], format: [{
            type: Input
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], showToday: [{
            type: Input
        }], showTime: [{
            type: Input
        }], mustShowTime: [{
            type: Input
        }], dateRender: [{
            type: Input
        }], className: [{
            type: Input
        }], defaultPickerValue: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
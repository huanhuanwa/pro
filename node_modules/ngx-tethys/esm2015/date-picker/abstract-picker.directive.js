import { ThyPopover, ThyPopoverConfig } from 'ngx-tethys/popover';
import { coerceBooleanProperty, warnDeprecation } from 'ngx-tethys/util';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, mapTo, takeUntil, tap } from 'rxjs/operators';
import { coerceArray } from '@angular/cdk/coercion';
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { AbstractPickerComponent } from './abstract-picker.component';
import { DatePopupComponent } from './lib/popups/date-popup.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/popover';
export class PickerDirective extends AbstractPickerComponent {
    constructor(elementRef, cdr, thyPopover) {
        super(cdr);
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.thyPopover = thyPopover;
        this.showWeek = false;
        this.thyOnPanelChange = new EventEmitter();
        this.thyOnCalendarChange = new EventEmitter();
        this.thyMustShowTime = false;
        this.thyPlacement = 'bottom';
        this.offset = 4;
        this.hasBackdrop = true;
        this.thyStopPropagation = true;
        this.destroy$ = new Subject();
        this.el = this.elementRef.nativeElement;
        this.$click = fromEvent(this.el, 'click').pipe(tap(e => {
            if (this.thyStopPropagation) {
                e.stopPropagation();
            }
        }), mapTo(true));
    }
    get thyShowTime() {
        return this._showTime;
    }
    set thyShowTime(value) {
        this._showTime = typeof value === 'object' ? value : coerceBooleanProperty(value);
    }
    set thyOffset(value) {
        warnDeprecation(`thyOffset parameter will be deprecated, please use thyPopoverOptions instead.`);
        this.offset = value;
    }
    set thyHasBackdrop(value) {
        warnDeprecation(`thyHasBackdrop parameter will be deprecated, please use thyPopoverOptions instead.`);
        this.hasBackdrop = value;
    }
    openOverlay() {
        const popoverRef = this.thyPopover.open(DatePopupComponent, Object.assign({
            origin: this.el,
            hasBackdrop: this.hasBackdrop,
            backdropClass: 'thy-overlay-transparent-backdrop',
            offset: this.offset,
            initialState: {
                isRange: this.isRange,
                showWeek: this.showWeek,
                value: this.thyValue,
                showTime: this.thyShowTime,
                mustShowTime: this.withTime,
                format: this.thyFormat,
                dateRender: this.thyDateRender,
                disabledDate: this.thyDisabledDate,
                placeholder: this.thyPlaceHolder,
                className: this.thyPanelClassName,
                defaultPickerValue: this.thyDefaultPickerValue,
                minDate: this.thyMinDate,
                maxDate: this.thyMaxDate
            },
            placement: this.thyPlacement
        }, this.thyPopoverOptions));
        if (popoverRef) {
            const componentInstance = popoverRef.componentInstance;
            componentInstance.valueChange.pipe(takeUntil(this.destroy$)).subscribe((event) => this.onValueChange(event));
            componentInstance.calendarChange.pipe(takeUntil(this.destroy$)).subscribe((event) => {
                const rangeValue = coerceArray(event).map(x => x.nativeDate);
                this.thyOnCalendarChange.emit(rangeValue);
            });
            componentInstance.showTimePickerChange
                .pipe(takeUntil(this.destroy$))
                .subscribe((event) => this.onShowTimePickerChange(event));
            // tslint:disable-next-line: max-line-length
            componentInstance.ngOnChanges({ value: {} }); // dynamically created components don't call ngOnChanges, manual call
            popoverRef
                .afterOpened()
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => this.thyOpenChange.emit(true));
            popoverRef
                .afterClosed()
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => this.thyOpenChange.emit(false));
        }
    }
    closeOverlay() {
        this.thyPopover.close();
    }
    initActionSubscribe() {
        this.$click.pipe(debounceTime(50), takeUntil(this.destroy$)).subscribe(() => {
            if (!this.thyDisabled && !this.thyReadonly) {
                this.openOverlay();
            }
        });
    }
    ngAfterViewInit() {
        this.setDefaultTimePickerState();
        this.initActionSubscribe();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onValueChange(value) {
        this.restoreTimePickerState(value);
        super.onValueChange(value);
        this.closeOverlay();
    }
    // Displays the time directly when the time must be displayed by default
    setDefaultTimePickerState() {
        this.withTime = this.thyMustShowTime;
    }
    // Restore after clearing time to select whether the original picker time is displayed or not
    restoreTimePickerState(value) {
        if (!value) {
            this.withTime = this.thyMustShowTime || this.originWithTime;
        }
    }
    onShowTimePickerChange(show) {
        this.withTime = show;
    }
}
PickerDirective.ɵfac = function PickerDirective_Factory(t) { return new (t || PickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyPopover)); };
PickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PickerDirective, inputs: { thyMustShowTime: "thyMustShowTime", thyPlacement: "thyPlacement", thyStopPropagation: "thyStopPropagation", thyShowTime: "thyShowTime", thyOffset: "thyOffset", thyHasBackdrop: "thyHasBackdrop", thyDateRender: "thyDateRender", thyMode: "thyMode", thyPopoverOptions: "thyPopoverOptions" }, outputs: { thyOnPanelChange: "thyOnPanelChange", thyOnCalendarChange: "thyOnCalendarChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
PickerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: ThyPopover }
];
PickerDirective.propDecorators = {
    thyDateRender: [{ type: Input }],
    thyMode: [{ type: Input }],
    thyOnPanelChange: [{ type: Output }],
    thyOnCalendarChange: [{ type: Output }],
    thyShowTime: [{ type: Input }],
    thyMustShowTime: [{ type: Input }],
    thyPlacement: [{ type: Input }],
    thyOffset: [{ type: Input }],
    thyHasBackdrop: [{ type: Input }],
    thyPopoverOptions: [{ type: Input }],
    thyStopPropagation: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PickerDirective, [{
        type: Directive
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ThyPopover }]; }, { thyOnPanelChange: [{
            type: Output
        }], thyOnCalendarChange: [{
            type: Output
        }], thyMustShowTime: [{
            type: Input
        }], thyPlacement: [{
            type: Input
        }], thyStopPropagation: [{
            type: Input
        }], thyShowTime: [{
            type: Input
        }], thyOffset: [{
            type: Input
        }], thyHasBackdrop: [{
            type: Input
        }], thyDateRender: [{
            type: Input
        }], thyMode: [{
            type: Input
        }], thyPopoverOptions: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
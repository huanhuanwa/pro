import { forwardRef, ChangeDetectorRef, ElementRef, Directive } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PickerDirective } from './abstract-picker.directive';
import { ThyPopover } from 'ngx-tethys/popover';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/popover';
export class ThyRangePickerDirective extends PickerDirective {
    constructor(elementRef, cdr, thyPopover) {
        super(elementRef, cdr, thyPopover);
        this.isRange = true;
    }
}
ThyRangePickerDirective.ɵfac = function ThyRangePickerDirective_Factory(t) { return new (t || ThyRangePickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyPopover)); };
ThyRangePickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyRangePickerDirective, selectors: [["", "thyRangePicker", ""]], exportAs: ["thyRangePicker"], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => ThyRangePickerDirective)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
ThyRangePickerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: ThyPopover }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyRangePickerDirective, [{
        type: Directive,
        args: [{
                selector: '[thyRangePicker]',
                exportAs: 'thyRangePicker',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => ThyRangePickerDirective)
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ThyPopover }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UtcGlja2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RhdGUtcGlja2VyL3JhbmdlLXBpY2tlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQVUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQWFoRCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsZUFBZTtBQUFHLElBRzNELFlBQVksVUFBc0IsRUFBRSxHQUFzQixFQUFFLFVBQXNCO0FBQ3RGLFFBQVEsS0FBSyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0MsUUFKSSxZQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ25CLElBR0ksQ0FBQztBQUNMO21EQWpCQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLGtCQUFrQixrQkFDNUIsUUFBUSxFQUFFLGdCQUFnQixrQkFDMUIsU0FBUyxFQUFFLHNCQUNQLDBCQUNJLE9BQU8sRUFBRSxpQkFBaUI7dUJBQzFCLEtBQUssRUFBRSxJQUFJLDBCQUNYLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsc0JBQ3pELGtCQUNKLGNBQ0o7Ozs7OztrREFDSTtBQUFDO0FBQWlELFlBakJmLFVBQVU7QUFBSSxZQUFqQyxpQkFBaUI7QUFBSSxZQUlqQyxVQUFVO0FBQUc7Ozs7Ozs7Ozs7Ozs7OzRJQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3J3YXJkUmVmLCBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgT25Jbml0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBQaWNrZXJEaXJlY3RpdmUgfSBmcm9tICcuL2Fic3RyYWN0LXBpY2tlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGh5UG9wb3ZlciB9IGZyb20gJ25neC10ZXRoeXMvcG9wb3Zlcic7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeVJhbmdlUGlja2VyXScsXG4gICAgZXhwb3J0QXM6ICd0aHlSYW5nZVBpY2tlcicsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaHlSYW5nZVBpY2tlckRpcmVjdGl2ZSlcbiAgICAgICAgfVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgVGh5UmFuZ2VQaWNrZXJEaXJlY3RpdmUgZXh0ZW5kcyBQaWNrZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGlzUmFuZ2UgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgdGh5UG9wb3ZlcjogVGh5UG9wb3Zlcikge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCBjZHIsIHRoeVBvcG92ZXIpO1xuICAgIH1cbn1cbiJdfQ==
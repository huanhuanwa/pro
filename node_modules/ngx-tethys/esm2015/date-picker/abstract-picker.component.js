import { __decorate, __metadata } from "tslib";
import { ChangeDetectorRef, EventEmitter, Input, Output, ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { InputBoolean } from 'ngx-tethys/core';
import { ThyPickerComponent } from './picker.component';
import { transformDateValue, makeValue } from './picker.util';
import * as ɵngcc0 from '@angular/core';
export class AbstractPickerComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.thyAllowClear = true;
        this.thyAutoFocus = false;
        this.thyDisabled = false;
        this.thySize = 'default';
        // tslint:disable-next-line: max-line-length
        this.thyAutoStartAndEnd = false; // only for range picker, Whether to automatically take the beginning and ending unixTime of the day
        this.thyDefaultPickerValue = null;
        this.thySuffixIcon = 'calendar';
        this.thyOpenChange = new EventEmitter();
        this.isRange = false;
        this.destroyed$ = new Subject();
        this.isCustomPlaceHolder = false;
        this.onlyEmitDate = false;
        this.onChangeFn = () => void 0;
        this.onTouchedFn = () => void 0;
    }
    get realOpenState() {
        return this.picker.realOpenState;
    }
    initValue() {
        this.thyValue = this.isRange ? [] : null;
    }
    ngOnInit() {
        this.setDefaultPlaceHolder();
        this.initValue();
    }
    ngOnChanges(changes) {
        if (changes.thyPlaceHolder && changes.thyPlaceHolder.firstChange && typeof this.thyPlaceHolder !== 'undefined') {
            this.isCustomPlaceHolder = true;
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    closeOverlay() {
        this.picker.hideOverlay();
    }
    onValueChange(originalValue) {
        this.setFormatRule();
        this.thyValue = originalValue;
        if (this.isRange) {
            const vAsRange = this.thyValue;
            let value = { begin: null, end: null };
            if (vAsRange.length) {
                const [begin, end] = vAsRange;
                if (this.thyAutoStartAndEnd) {
                    value = {
                        begin: begin.startOfDay().getUnixTime(),
                        end: end.endOfDay().getUnixTime()
                    };
                }
                else {
                    value = {
                        begin: begin.getUnixTime(),
                        end: end.getUnixTime()
                    };
                }
            }
            this.onChangeFn(value);
        }
        else {
            const value = { date: null, with_time: this.withTime ? 1 : 0 };
            if (this.thyValue) {
                value.date = this.thyValue.getUnixTime();
            }
            if (this.onlyEmitDate) {
                this.onChangeFn(value.date);
            }
            else {
                this.onChangeFn(value);
            }
        }
        this.onTouchedFn();
    }
    setFormatRule() {
        if (!this.thyFormat) {
            if (this.withTime) {
                this.thyFormat = 'yyyy-MM-dd HH:mm';
            }
            else {
                if (!this.onlyEmitDate) {
                    this.thyFormat = 'yyyy-MM-dd';
                }
            }
        }
    }
    onOpenChange(open) {
        this.thyOpen = open;
        this.thyOpenChange.emit(open);
    }
    writeValue(originalValue) {
        const { value, withTime } = transformDateValue(originalValue);
        this.setValue(value);
        this.setTimePickerState(withTime);
        this.onlyEmitDate = typeof withTime === 'undefined';
        this.originWithTime = withTime;
        this.setFormatRule();
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedFn = fn;
    }
    setTimePickerState(withTime) {
        this.withTime = withTime;
    }
    setDisabledState(disabled) {
        this.thyDisabled = disabled;
        this.cdr.markForCheck();
    }
    setDefaultPlaceHolder() {
        if (!this.isCustomPlaceHolder) {
            this.thyPlaceHolder = this.isRange ? ['开始日期', '结束日期'] : '请选择日期';
        }
        this.cdr.markForCheck();
    }
    setValue(value) {
        this.thyValue = makeValue(value, this.isRange);
    }
}
AbstractPickerComponent.ɵfac = function AbstractPickerComponent_Factory(t) { return new (t || AbstractPickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
AbstractPickerComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractPickerComponent, viewQuery: function AbstractPickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(ThyPickerComponent, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.picker = _t.first);
    } }, inputs: { thyAllowClear: "thyAllowClear", thyAutoFocus: "thyAutoFocus", thyDisabled: "thyDisabled", thySize: "thySize", thyAutoStartAndEnd: "thyAutoStartAndEnd", thyDefaultPickerValue: "thyDefaultPickerValue", thySuffixIcon: "thySuffixIcon", thyFormat: "thyFormat", thyOpen: "thyOpen", thyPlaceHolder: "thyPlaceHolder", thyDisabledDate: "thyDisabledDate", thyMinDate: "thyMinDate", thyMaxDate: "thyMaxDate", thyReadonly: "thyReadonly", thyOriginClassName: "thyOriginClassName", thyPanelClassName: "thyPanelClassName" }, outputs: { thyOpenChange: "thyOpenChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
AbstractPickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
AbstractPickerComponent.propDecorators = {
    thyAllowClear: [{ type: Input }],
    thyAutoFocus: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    thyOpen: [{ type: Input }],
    thyDisabledDate: [{ type: Input }],
    thyMinDate: [{ type: Input }],
    thyMaxDate: [{ type: Input }],
    thyPlaceHolder: [{ type: Input }],
    thyReadonly: [{ type: Input }],
    thyOriginClassName: [{ type: Input }],
    thyPanelClassName: [{ type: Input }],
    thySize: [{ type: Input }],
    thyFormat: [{ type: Input }],
    thyAutoStartAndEnd: [{ type: Input }],
    thyDefaultPickerValue: [{ type: Input }],
    thySuffixIcon: [{ type: Input }],
    thyOpenChange: [{ type: Output }],
    picker: [{ type: ViewChild, args: [ThyPickerComponent, { static: true },] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], AbstractPickerComponent.prototype, "thyAllowClear", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], AbstractPickerComponent.prototype, "thyAutoFocus", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], AbstractPickerComponent.prototype, "thyDisabled", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], AbstractPickerComponent.prototype, "thyOpen", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], AbstractPickerComponent.prototype, "thyReadonly", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AbstractPickerComponent, [{
        type: Directive
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { thyAllowClear: [{
            type: Input
        }], thyAutoFocus: [{
            type: Input
        }], thyDisabled: [{
            type: Input
        }], thySize: [{
            type: Input
        }], thyAutoStartAndEnd: [{
            type: Input
        }], thyDefaultPickerValue: [{
            type: Input
        }], thySuffixIcon: [{
            type: Input
        }], thyOpenChange: [{
            type: Output
        }], thyFormat: [{
            type: Input
        }], thyOpen: [{
            type: Input
        }], thyPlaceHolder: [{
            type: Input
        }], thyDisabledDate: [{
            type: Input
        }], thyMinDate: [{
            type: Input
        }], thyMaxDate: [{
            type: Input
        }], thyReadonly: [{
            type: Input
        }], thyOriginClassName: [{
            type: Input
        }], thyPanelClassName: [{
            type: Input
        }], picker: [{
            type: ViewChild,
            args: [ThyPickerComponent, { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
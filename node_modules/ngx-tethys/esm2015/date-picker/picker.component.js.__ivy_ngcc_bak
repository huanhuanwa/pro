import { getFlexiblePositions } from 'ngx-tethys/core';
import { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DateHelperService } from './date-helper.service';
export class ThyPickerComponent {
    constructor(changeDetector, dateHelper) {
        this.changeDetector = changeDetector;
        this.dateHelper = dateHelper;
        this.isRange = false;
        this.open = undefined;
        this.placement = 'bottomLeft';
        this.valueChange = new EventEmitter();
        this.openChange = new EventEmitter(); // Emitted when overlay's open state change
        this.prefixCls = 'thy-calendar';
        this.animationOpenState = false;
        this.overlayOpen = false; // Available when "open"=undefined
        this.overlayPositions = getFlexiblePositions(this.placement, 4);
    }
    get realOpenState() {
        // The value that really decide the open state of overlay
        return this.isOpenHandledByUser() ? !!this.open : this.overlayOpen;
    }
    ngAfterViewInit() {
        this.overlayPositions = getFlexiblePositions(this.placement, 4);
        if (this.autoFocus) {
            this.focus();
        }
    }
    focus() {
        this.pickerInput.nativeElement.focus();
    }
    showOverlay() {
        if (!this.realOpenState) {
            this.overlayOpen = true;
            if (this.realOpenState) {
                this.animationOpenState = true;
            }
            this.openChange.emit(this.overlayOpen);
            setTimeout(() => {
                if (this.cdkConnectedOverlay && this.cdkConnectedOverlay.overlayRef) {
                    this.cdkConnectedOverlay.overlayRef.updatePosition();
                }
            });
        }
    }
    hideOverlay() {
        if (this.realOpenState) {
            this.overlayOpen = false;
            if (!this.realOpenState) {
                this.animationOpenState = false;
            }
            this.openChange.emit(this.overlayOpen);
            this.focus();
        }
    }
    onClickInputBox() {
        if (!this.disabled && !this.readonly && !this.isOpenHandledByUser()) {
            this.showOverlay();
        }
    }
    onClickBackdrop() {
        this.hideOverlay();
    }
    onOverlayDetach() {
        this.hideOverlay();
    }
    onPositionChange(position) {
        this.changeDetector.detectChanges();
    }
    onClickClear(event) {
        event.preventDefault();
        event.stopPropagation();
        this.value = this.isRange ? [] : null;
        this.valueChange.emit(this.value);
    }
    getPartTypeIndex(partType) {
        return { left: 0, right: 1 }[partType];
    }
    isEmptyValue(value) {
        if (value === null) {
            return true;
        }
        else if (this.isRange) {
            return !value || !Array.isArray(value) || value.every(val => !val);
        }
        else {
            return !value;
        }
    }
    // Whether open state is permanently controlled by user himself
    isOpenHandledByUser() {
        return this.open !== undefined;
    }
    getReadableValue() {
        let value;
        if (this.isRange) {
            const start = this.value[0] ? this.dateHelper.format(this.value[0].nativeDate, this.format) : '';
            const end = this.value[1] ? this.dateHelper.format(this.value[1].nativeDate, this.format) : '';
            return start && end ? `${start} ~ ${end}` : null;
        }
        else {
            value = this.value;
            return value ? this.dateHelper.format(value.nativeDate, this.format) : null;
        }
    }
    getPlaceholder() {
        return this.isRange && this.placeholder && Array.isArray(this.placeholder)
            ? this.placeholder.join(' ~ ')
            : this.placeholder;
    }
}
ThyPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-picker',
                exportAs: 'thyPicker',
                template: "<span\n  cdkOverlayOrigin\n  #origin=\"cdkOverlayOrigin\"\n  class=\"{{ prefixCls }}-picker {{ size ? prefixCls + '-picker-' + size : '' }} {{ className }}\"\n  (click)=\"onClickInputBox()\"\n>\n  <ng-container>\n    <input\n      #pickerInput\n      thyInput\n      class=\"form-control-{{ size }} form-control {{ prefixCls }}-picker-input\"\n      [thySize]=\"size\"\n      [class.thy-input-disabled]=\"disabled\"\n      [class.thy-input-readonly]=\"readonly\"\n      [disabled]=\"disabled\"\n      readonly\n      value=\"{{ getReadableValue() }}\"\n      placeholder=\"{{ getPlaceholder() }}\"\n    />\n    <ng-container *ngTemplateOutlet=\"tplRightRest\"></ng-container>\n  </ng-container>\n</span>\n\n<!-- Right operator icons -->\n<ng-template #tplRightRest>\n  <span class=\"{{ prefixCls }}-picker-clear\">\n    <thy-icon\n      thyIconName=\"close-circle-bold-fill\"\n      *ngIf=\"!disabled && !isEmptyValue(value) && allowClear && !readonly\"\n      (click)=\"onClickClear($event)\"\n      ngClass=\"remove-link remove-link-{{ size }}\"\n    ></thy-icon>\n  </span>\n  <span class=\"{{ prefixCls }}-picker-icon\">\n    <thy-icon [thyIconName]=\"suffixIcon\" ngClass=\"remove-link-{{ size }}\"></thy-icon>\n  </span>\n</ng-template>\n\n<!-- Overlay -->\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"realOpenState\"\n  [cdkConnectedOverlayHasBackdrop]=\"!isOpenHandledByUser()\"\n  [cdkConnectedOverlayPositions]=\"overlayPositions\"\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  (positionChange)=\"onPositionChange($event)\"\n  (backdropClick)=\"onClickBackdrop()\"\n  (detach)=\"onOverlayDetach()\"\n>\n  <div style=\"position: relative;\">\n    <!-- Compatible for overlay that not support offset dynamically and immediately -->\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyPickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DateHelperService }
];
ThyPickerComponent.propDecorators = {
    isRange: [{ type: Input }],
    open: [{ type: Input }],
    disabled: [{ type: Input }],
    placeholder: [{ type: Input }],
    readonly: [{ type: Input }],
    allowClear: [{ type: Input }],
    autoFocus: [{ type: Input }],
    className: [{ type: Input }],
    format: [{ type: Input }],
    size: [{ type: Input }],
    value: [{ type: Input }],
    suffixIcon: [{ type: Input }],
    placement: [{ type: Input }],
    valueChange: [{ type: Output }],
    openChange: [{ type: Output }],
    origin: [{ type: ViewChild, args: ['origin', { static: true },] }],
    cdkConnectedOverlay: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: true },] }],
    pickerInput: [{ type: ViewChild, args: ['pickerInput', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Pipe } from '@angular/core';
import { DateHelperService } from './date-helper.service';
import { transformDateValue } from './picker.util';
export class ThyDatePickerFormatPipe {
    constructor(dateHelper) {
        this.dateHelper = dateHelper;
    }
    transform(originalValue, formatStr) {
        const { value, withTime } = transformDateValue(originalValue);
        if (!formatStr) {
            formatStr = withTime ? 'yyyy-MM-dd HH:mm' : 'yyyy-MM-dd';
        }
        if (!Array.isArray(value)) {
            return this.dateHelper.format(value, formatStr);
        }
        else {
            return value.map(date => this.dateHelper.format(date, formatStr)).join(' ~ ');
        }
    }
}
ThyDatePickerFormatPipe.decorators = [
    { type: Pipe, args: [{ name: 'thyDatePickerFormat' },] }
];
ThyDatePickerFormatPipe.ctorParameters = () => [
    { type: DateHelperService }
];
export class ThyDatePickerFormatStringPipe {
    constructor(dateHelper) {
        this.dateHelper = dateHelper;
    }
    transform(originalValue) {
        const { withTime } = transformDateValue(originalValue);
        return withTime ? 'yyyy-MM-dd HH:mm' : 'yyyy-MM-dd';
    }
}
ThyDatePickerFormatStringPipe.decorators = [
    { type: Pipe, args: [{ name: 'thyDatePickerFormatString' },] }
];
ThyDatePickerFormatStringPipe.ctorParameters = () => [
    { type: DateHelperService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLnBpcGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RhdGUtcGlja2VyL3BpY2tlci5waXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHbkQsTUFBTSxPQUFPLHVCQUF1QjtJQUNoQyxZQUFvQixVQUE2QjtRQUE3QixlQUFVLEdBQVYsVUFBVSxDQUFtQjtJQUFHLENBQUM7SUFFckQsU0FBUyxDQUFDLGFBQXNELEVBQUUsU0FBa0I7UUFDaEYsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osU0FBUyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztTQUM1RDtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ25EO2FBQU07WUFDSCxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakY7SUFDTCxDQUFDOzs7WUFoQkosSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFOzs7WUFKNUIsaUJBQWlCOztBQXdCMUIsTUFBTSxPQUFPLDZCQUE2QjtJQUN0QyxZQUFvQixVQUE2QjtRQUE3QixlQUFVLEdBQVYsVUFBVSxDQUFtQjtJQUFHLENBQUM7SUFFckQsU0FBUyxDQUFDLGFBQXNEO1FBQzVELE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV2RCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUN4RCxDQUFDOzs7WUFSSixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsMkJBQTJCLEVBQUU7OztZQXZCbEMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZUhlbHBlclNlcnZpY2UgfSBmcm9tICcuL2RhdGUtaGVscGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tcGF0aWJsZURhdGUsIERhdGVFbnRyeSwgUmFuZ2VFbnRyeSB9IGZyb20gJy4vc3RhbmRhcmQtdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtRGF0ZVZhbHVlIH0gZnJvbSAnLi9waWNrZXIudXRpbCc7XG5cbkBQaXBlKHsgbmFtZTogJ3RoeURhdGVQaWNrZXJGb3JtYXQnIH0pXG5leHBvcnQgY2xhc3MgVGh5RGF0ZVBpY2tlckZvcm1hdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGVIZWxwZXI6IERhdGVIZWxwZXJTZXJ2aWNlKSB7fVxuXG4gICAgdHJhbnNmb3JtKG9yaWdpbmFsVmFsdWU6IENvbXBhdGlibGVEYXRlIHwgRGF0ZUVudHJ5IHwgUmFuZ2VFbnRyeSwgZm9ybWF0U3RyPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgd2l0aFRpbWUgfSA9IHRyYW5zZm9ybURhdGVWYWx1ZShvcmlnaW5hbFZhbHVlKTtcblxuICAgICAgICBpZiAoIWZvcm1hdFN0cikge1xuICAgICAgICAgICAgZm9ybWF0U3RyID0gd2l0aFRpbWUgPyAneXl5eS1NTS1kZCBISDptbScgOiAneXl5eS1NTS1kZCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlSGVscGVyLmZvcm1hdCh2YWx1ZSwgZm9ybWF0U3RyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoZGF0ZSA9PiB0aGlzLmRhdGVIZWxwZXIuZm9ybWF0KGRhdGUsIGZvcm1hdFN0cikpLmpvaW4oJyB+ICcpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5AUGlwZSh7IG5hbWU6ICd0aHlEYXRlUGlja2VyRm9ybWF0U3RyaW5nJyB9KVxuZXhwb3J0IGNsYXNzIFRoeURhdGVQaWNrZXJGb3JtYXRTdHJpbmdQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlSGVscGVyOiBEYXRlSGVscGVyU2VydmljZSkge31cblxuICAgIHRyYW5zZm9ybShvcmlnaW5hbFZhbHVlOiBDb21wYXRpYmxlRGF0ZSB8IERhdGVFbnRyeSB8IFJhbmdlRW50cnkpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB7IHdpdGhUaW1lIH0gPSB0cmFuc2Zvcm1EYXRlVmFsdWUob3JpZ2luYWxWYWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHdpdGhUaW1lID8gJ3l5eXktTU0tZGQgSEg6bW0nIDogJ3l5eXktTU0tZGQnO1xuICAgIH1cbn1cbiJdfQ==
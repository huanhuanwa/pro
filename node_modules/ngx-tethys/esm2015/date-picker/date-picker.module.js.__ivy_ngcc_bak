import { OverlayModule } from '@angular/cdk/overlay';
import { CommonModule, registerLocaleData } from '@angular/common';
import { NgModule } from '@angular/core';
import localeZhHans from '@angular/common/locales/zh-Hans';
import { LibPackerModule } from './lib/lib-packer.module';
import { BasePickerComponent } from './base-picker.component';
import { HeaderPickerComponent } from './header-picker.component';
import { ThyDatePickerComponent } from './date-picker.component';
import { ThyMonthPickerComponent } from './month-picker.component';
import { ThyRangePickerComponent } from './range-picker.component';
import { ThyWeekPickerComponent } from './week-picker.component';
import { ThyYearPickerComponent } from './year-picker.component';
import { ThyPickerComponent } from './picker.component';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyInputModule } from 'ngx-tethys/input';
import { DatePickerRequiredValidator, RangePickerRequiredValidator } from './picker.validators';
import { ThyDatePickerFormatPipe, ThyDatePickerFormatStringPipe } from './picker.pipes';
import { ThyDatePickerDirective } from './date-picker.directive';
import { ThyRangePickerDirective } from './range-picker.directive';
import { DatePopupComponent } from './lib/popups/date-popup.component';
import { ThyPopoverModule } from 'ngx-tethys/popover';
registerLocaleData(localeZhHans, 'zh-Hans');
export class ThyDatePickerModule {
}
ThyDatePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, OverlayModule, LibPackerModule, ThyIconModule, ThyInputModule, ThyPopoverModule],
                exports: [
                    ThyDatePickerComponent,
                    ThyRangePickerComponent,
                    ThyMonthPickerComponent,
                    ThyYearPickerComponent,
                    ThyWeekPickerComponent,
                    DatePickerRequiredValidator,
                    RangePickerRequiredValidator,
                    ThyDatePickerFormatPipe,
                    ThyDatePickerFormatStringPipe,
                    ThyDatePickerDirective,
                    ThyRangePickerDirective
                ],
                declarations: [
                    HeaderPickerComponent,
                    BasePickerComponent,
                    ThyPickerComponent,
                    ThyDatePickerComponent,
                    ThyMonthPickerComponent,
                    ThyYearPickerComponent,
                    ThyWeekPickerComponent,
                    ThyRangePickerComponent,
                    DatePickerRequiredValidator,
                    RangePickerRequiredValidator,
                    ThyDatePickerFormatPipe,
                    ThyDatePickerFormatStringPipe,
                    ThyDatePickerDirective,
                    ThyRangePickerDirective
                ],
                entryComponents: [DatePopupComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxZQUFZLE1BQU0saUNBQWlDLENBQUM7QUFFM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ25FLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLDRCQUE0QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLDZCQUE2QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDakUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEQsa0JBQWtCLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBbUM1QyxNQUFNLE9BQU8sbUJBQW1COzs7WUFqQy9CLFFBQVEsU0FBQztnQkFDTixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixDQUFDO2dCQUN4RyxPQUFPLEVBQUU7b0JBQ0wsc0JBQXNCO29CQUN0Qix1QkFBdUI7b0JBQ3ZCLHVCQUF1QjtvQkFDdkIsc0JBQXNCO29CQUN0QixzQkFBc0I7b0JBQ3RCLDJCQUEyQjtvQkFDM0IsNEJBQTRCO29CQUM1Qix1QkFBdUI7b0JBQ3ZCLDZCQUE2QjtvQkFDN0Isc0JBQXNCO29CQUN0Qix1QkFBdUI7aUJBQzFCO2dCQUNELFlBQVksRUFBRTtvQkFDVixxQkFBcUI7b0JBQ3JCLG1CQUFtQjtvQkFDbkIsa0JBQWtCO29CQUNsQixzQkFBc0I7b0JBQ3RCLHVCQUF1QjtvQkFDdkIsc0JBQXNCO29CQUN0QixzQkFBc0I7b0JBQ3RCLHVCQUF1QjtvQkFDdkIsMkJBQTJCO29CQUMzQiw0QkFBNEI7b0JBQzVCLHVCQUF1QjtvQkFDdkIsNkJBQTZCO29CQUM3QixzQkFBc0I7b0JBQ3RCLHVCQUF1QjtpQkFDMUI7Z0JBQ0QsZUFBZSxFQUFFLENBQUMsa0JBQWtCLENBQUM7YUFDeEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdmVybGF5TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlLCByZWdpc3RlckxvY2FsZURhdGEgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBsb2NhbGVaaEhhbnMgZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2xvY2FsZXMvemgtSGFucyc7XG5cbmltcG9ydCB7IExpYlBhY2tlck1vZHVsZSB9IGZyb20gJy4vbGliL2xpYi1wYWNrZXIubW9kdWxlJztcblxuaW1wb3J0IHsgQmFzZVBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vYmFzZS1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEhlYWRlclBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vaGVhZGVyLXBpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGh5RGF0ZVBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vZGF0ZS1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRoeU1vbnRoUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9tb250aC1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRoeVJhbmdlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9yYW5nZS1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRoeVdlZWtQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL3dlZWstcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaHlZZWFyUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi95ZWFyLXBpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGh5UGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRoeUljb25Nb2R1bGUgfSBmcm9tICduZ3gtdGV0aHlzL2ljb24nO1xuaW1wb3J0IHsgVGh5SW5wdXRNb2R1bGUgfSBmcm9tICduZ3gtdGV0aHlzL2lucHV0JztcbmltcG9ydCB7IERhdGVQaWNrZXJSZXF1aXJlZFZhbGlkYXRvciwgUmFuZ2VQaWNrZXJSZXF1aXJlZFZhbGlkYXRvciB9IGZyb20gJy4vcGlja2VyLnZhbGlkYXRvcnMnO1xuaW1wb3J0IHsgVGh5RGF0ZVBpY2tlckZvcm1hdFBpcGUsIFRoeURhdGVQaWNrZXJGb3JtYXRTdHJpbmdQaXBlIH0gZnJvbSAnLi9waWNrZXIucGlwZXMnO1xuaW1wb3J0IHsgVGh5RGF0ZVBpY2tlckRpcmVjdGl2ZSB9IGZyb20gJy4vZGF0ZS1waWNrZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRoeVJhbmdlUGlja2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9yYW5nZS1waWNrZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IERhdGVQb3B1cENvbXBvbmVudCB9IGZyb20gJy4vbGliL3BvcHVwcy9kYXRlLXBvcHVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaHlQb3BvdmVyTW9kdWxlIH0gZnJvbSAnbmd4LXRldGh5cy9wb3BvdmVyJztcblxucmVnaXN0ZXJMb2NhbGVEYXRhKGxvY2FsZVpoSGFucywgJ3poLUhhbnMnKTtcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBPdmVybGF5TW9kdWxlLCBMaWJQYWNrZXJNb2R1bGUsIFRoeUljb25Nb2R1bGUsIFRoeUlucHV0TW9kdWxlLCBUaHlQb3BvdmVyTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFRoeURhdGVQaWNrZXJDb21wb25lbnQsXG4gICAgICAgIFRoeVJhbmdlUGlja2VyQ29tcG9uZW50LFxuICAgICAgICBUaHlNb250aFBpY2tlckNvbXBvbmVudCxcbiAgICAgICAgVGh5WWVhclBpY2tlckNvbXBvbmVudCxcbiAgICAgICAgVGh5V2Vla1BpY2tlckNvbXBvbmVudCxcbiAgICAgICAgRGF0ZVBpY2tlclJlcXVpcmVkVmFsaWRhdG9yLFxuICAgICAgICBSYW5nZVBpY2tlclJlcXVpcmVkVmFsaWRhdG9yLFxuICAgICAgICBUaHlEYXRlUGlja2VyRm9ybWF0UGlwZSxcbiAgICAgICAgVGh5RGF0ZVBpY2tlckZvcm1hdFN0cmluZ1BpcGUsXG4gICAgICAgIFRoeURhdGVQaWNrZXJEaXJlY3RpdmUsXG4gICAgICAgIFRoeVJhbmdlUGlja2VyRGlyZWN0aXZlXG4gICAgXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgSGVhZGVyUGlja2VyQ29tcG9uZW50LFxuICAgICAgICBCYXNlUGlja2VyQ29tcG9uZW50LFxuICAgICAgICBUaHlQaWNrZXJDb21wb25lbnQsXG4gICAgICAgIFRoeURhdGVQaWNrZXJDb21wb25lbnQsXG4gICAgICAgIFRoeU1vbnRoUGlja2VyQ29tcG9uZW50LFxuICAgICAgICBUaHlZZWFyUGlja2VyQ29tcG9uZW50LFxuICAgICAgICBUaHlXZWVrUGlja2VyQ29tcG9uZW50LFxuICAgICAgICBUaHlSYW5nZVBpY2tlckNvbXBvbmVudCxcbiAgICAgICAgRGF0ZVBpY2tlclJlcXVpcmVkVmFsaWRhdG9yLFxuICAgICAgICBSYW5nZVBpY2tlclJlcXVpcmVkVmFsaWRhdG9yLFxuICAgICAgICBUaHlEYXRlUGlja2VyRm9ybWF0UGlwZSxcbiAgICAgICAgVGh5RGF0ZVBpY2tlckZvcm1hdFN0cmluZ1BpcGUsXG4gICAgICAgIFRoeURhdGVQaWNrZXJEaXJlY3RpdmUsXG4gICAgICAgIFRoeVJhbmdlUGlja2VyRGlyZWN0aXZlXG4gICAgXSxcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtEYXRlUG9wdXBDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFRoeURhdGVQaWNrZXJNb2R1bGUge31cbiJdfQ==
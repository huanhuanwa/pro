import { coerceBooleanProperty } from 'ngx-tethys/util';
import { ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { AbstractPickerComponent } from './abstract-picker.component';
import * as ɵngcc0 from '@angular/core';
export class BasePickerComponent extends AbstractPickerComponent {
    constructor(cdr) {
        super(cdr);
        this.showWeek = false;
        this.thyOnPanelChange = new EventEmitter();
        this.thyOnCalendarChange = new EventEmitter();
        this.thyMustShowTime = false;
        this.thyPlacement = 'bottomLeft';
        this.thyOnOk = new EventEmitter();
    }
    get thyShowTime() {
        return this._showTime;
    }
    set thyShowTime(value) {
        this._showTime = typeof value === 'object' ? value : coerceBooleanProperty(value);
    }
    ngOnInit() {
        super.ngOnInit();
        if (!this.thyFormat) {
            if (this.showWeek) {
                this.thyFormat = 'yyyy-ww';
            }
            else {
                this.thyFormat = this.thyShowTime ? 'yyyy-MM-dd HH:mm' : 'yyyy-MM-dd';
            }
        }
        this.setDefaultTimePickerState();
    }
    onValueChange(value) {
        this.restoreTimePickerState(value);
        super.onValueChange(value);
        this.closeOverlay();
    }
    // Displays the time directly when the time must be displayed by default
    setDefaultTimePickerState() {
        this.withTime = this.thyMustShowTime;
    }
    // Restore after clearing time to select whether the original picker time is displayed or not
    restoreTimePickerState(value) {
        if (!value) {
            this.withTime = this.thyMustShowTime || this.originWithTime;
        }
    }
    // Emit thyOnCalendarChange when select date by thy-range-picker
    onCalendarChange(value) {
        if (this.isRange) {
            const rangeValue = value.map(x => x.nativeDate);
            this.thyOnCalendarChange.emit(rangeValue);
        }
    }
    onShowTimePickerChange(show) {
        this.withTime = show;
    }
    onResultOk() {
        if (this.isRange) {
            const value = this.thyValue;
            if (value.length) {
                this.thyOnOk.emit([value[0].nativeDate, value[1].nativeDate]);
            }
            else {
                this.thyOnOk.emit([]);
            }
        }
        else {
            if (this.thyValue) {
                this.thyOnOk.emit(this.thyValue.nativeDate);
            }
            else {
                this.thyOnOk.emit(null);
            }
        }
        this.closeOverlay();
    }
    onOpenChange(open) {
        this.thyOpenChange.emit(open);
    }
}
BasePickerComponent.ɵfac = function BasePickerComponent_Factory(t) { return new (t || BasePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
BasePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BasePickerComponent, selectors: [["ng-component"]], inputs: { thyMustShowTime: "thyMustShowTime", thyPlacement: "thyPlacement", thyShowTime: "thyShowTime", thyDateRender: "thyDateRender", thyMode: "thyMode" }, outputs: { thyOnPanelChange: "thyOnPanelChange", thyOnCalendarChange: "thyOnCalendarChange", thyOnOk: "thyOnOk" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function BasePickerComponent_Template(rf, ctx) { }, encapsulation: 2 });
BasePickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
BasePickerComponent.propDecorators = {
    thyDateRender: [{ type: Input }],
    thyMode: [{ type: Input }],
    thyOnPanelChange: [{ type: Output }],
    thyOnCalendarChange: [{ type: Output }],
    thyShowTime: [{ type: Input }],
    thyMustShowTime: [{ type: Input }],
    thyPlacement: [{ type: Input }],
    thyOnOk: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BasePickerComponent, [{
        type: Component,
        args: [{
                template: ``
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { thyOnPanelChange: [{
            type: Output
        }], thyOnCalendarChange: [{
            type: Output
        }], thyMustShowTime: [{
            type: Input
        }], thyPlacement: [{
            type: Input
        }], thyOnOk: [{
            type: Output
        }], thyShowTime: [{
            type: Input
        }], thyDateRender: [{
            type: Input
        }], thyMode: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { __decorate, __metadata } from "tslib";
import { ChangeDetectorRef, EventEmitter, Input, Output, ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { InputBoolean } from 'ngx-tethys/core';
import { ThyPickerComponent } from './picker.component';
import { transformDateValue, makeValue } from './picker.util';
export class AbstractPickerComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.thyAllowClear = true;
        this.thyAutoFocus = false;
        this.thyDisabled = false;
        this.thySize = 'default';
        // tslint:disable-next-line: max-line-length
        this.thyAutoStartAndEnd = false; // only for range picker, Whether to automatically take the beginning and ending unixTime of the day
        this.thyDefaultPickerValue = null;
        this.thySuffixIcon = 'calendar';
        this.thyOpenChange = new EventEmitter();
        this.isRange = false;
        this.destroyed$ = new Subject();
        this.isCustomPlaceHolder = false;
        this.onlyEmitDate = false;
        this.onChangeFn = () => void 0;
        this.onTouchedFn = () => void 0;
    }
    get realOpenState() {
        return this.picker.realOpenState;
    }
    initValue() {
        this.thyValue = this.isRange ? [] : null;
    }
    ngOnInit() {
        this.setDefaultPlaceHolder();
        this.initValue();
    }
    ngOnChanges(changes) {
        if (changes.thyPlaceHolder && changes.thyPlaceHolder.firstChange && typeof this.thyPlaceHolder !== 'undefined') {
            this.isCustomPlaceHolder = true;
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    closeOverlay() {
        this.picker.hideOverlay();
    }
    onValueChange(originalValue) {
        this.setFormatRule();
        this.thyValue = originalValue;
        if (this.isRange) {
            const vAsRange = this.thyValue;
            let value = { begin: null, end: null };
            if (vAsRange.length) {
                const [begin, end] = vAsRange;
                if (this.thyAutoStartAndEnd) {
                    value = {
                        begin: begin.startOfDay().getUnixTime(),
                        end: end.endOfDay().getUnixTime()
                    };
                }
                else {
                    value = {
                        begin: begin.getUnixTime(),
                        end: end.getUnixTime()
                    };
                }
            }
            this.onChangeFn(value);
        }
        else {
            const value = { date: null, with_time: this.withTime ? 1 : 0 };
            if (this.thyValue) {
                value.date = this.thyValue.getUnixTime();
            }
            if (this.onlyEmitDate) {
                this.onChangeFn(value.date);
            }
            else {
                this.onChangeFn(value);
            }
        }
        this.onTouchedFn();
    }
    setFormatRule() {
        if (!this.thyFormat) {
            if (this.withTime) {
                this.thyFormat = 'yyyy-MM-dd HH:mm';
            }
            else {
                if (!this.onlyEmitDate) {
                    this.thyFormat = 'yyyy-MM-dd';
                }
            }
        }
    }
    onOpenChange(open) {
        this.thyOpen = open;
        this.thyOpenChange.emit(open);
    }
    writeValue(originalValue) {
        const { value, withTime } = transformDateValue(originalValue);
        this.setValue(value);
        this.setTimePickerState(withTime);
        this.onlyEmitDate = typeof withTime === 'undefined';
        this.originWithTime = withTime;
        this.setFormatRule();
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedFn = fn;
    }
    setTimePickerState(withTime) {
        this.withTime = withTime;
    }
    setDisabledState(disabled) {
        this.thyDisabled = disabled;
        this.cdr.markForCheck();
    }
    setDefaultPlaceHolder() {
        if (!this.isCustomPlaceHolder) {
            this.thyPlaceHolder = this.isRange ? ['开始日期', '结束日期'] : '请选择日期';
        }
        this.cdr.markForCheck();
    }
    setValue(value) {
        this.thyValue = makeValue(value, this.isRange);
    }
}
AbstractPickerComponent.decorators = [
    { type: Directive }
];
AbstractPickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
AbstractPickerComponent.propDecorators = {
    thyAllowClear: [{ type: Input }],
    thyAutoFocus: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    thyOpen: [{ type: Input }],
    thyDisabledDate: [{ type: Input }],
    thyMinDate: [{ type: Input }],
    thyMaxDate: [{ type: Input }],
    thyPlaceHolder: [{ type: Input }],
    thyReadonly: [{ type: Input }],
    thyOriginClassName: [{ type: Input }],
    thyPanelClassName: [{ type: Input }],
    thySize: [{ type: Input }],
    thyFormat: [{ type: Input }],
    thyAutoStartAndEnd: [{ type: Input }],
    thyDefaultPickerValue: [{ type: Input }],
    thySuffixIcon: [{ type: Input }],
    thyOpenChange: [{ type: Output }],
    picker: [{ type: ViewChild, args: [ThyPickerComponent, { static: true },] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], AbstractPickerComponent.prototype, "thyAllowClear", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], AbstractPickerComponent.prototype, "thyAutoFocus", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], AbstractPickerComponent.prototype, "thyDisabled", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], AbstractPickerComponent.prototype, "thyOpen", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], AbstractPickerComponent.prototype, "thyReadonly", void 0);
//# sourceMappingURL=data:application/json;base64,
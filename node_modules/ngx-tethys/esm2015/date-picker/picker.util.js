import { instanceOfDateEntry, instanceOfRangeEntry } from './standard-types';
import { fromUnixTime } from 'date-fns';
import { TinyDate } from 'ngx-tethys/util';
export function transformDateValue(value) {
    if (!value) {
        return { value: null };
    }
    let withTime;
    if (value && typeof value === 'number') {
        value = convertDate(value);
    }
    if (value && instanceOfDateEntry(value)) {
        const { date, with_time } = value;
        value = date ? convertDate(date) : null;
        withTime = !!with_time;
    }
    if (value && instanceOfRangeEntry(value)) {
        const rangeValue = value;
        value = [];
        if (rangeValue.begin && rangeValue.end) {
            value[0] = convertDate(rangeValue.begin);
            value[1] = convertDate(rangeValue.end);
        }
    }
    return { value: value, withTime };
}
export function convertDate(date) {
    if (typeof date === 'number') {
        if (date.toString().length < 13) {
            return fromUnixTime(date);
        }
        else {
            return new Date(date);
        }
    }
    else {
        return date;
    }
}
export function hasValue(value) {
    if (Array.isArray(value)) {
        return !!value[0] && !!value[1];
    }
    else {
        return !!value;
    }
}
export function makeValue(value, isRange = false) {
    if (isRange) {
        return value ? value.map(val => new TinyDate(val)) : [];
    }
    else {
        return value ? new TinyDate(value) : null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0ZS1waWNrZXIvcGlja2VyLnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF5QyxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBbUIsTUFBTSxrQkFBa0IsQ0FBQztBQUVySSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxNQUFNLFVBQVUsa0JBQWtCLENBQUMsS0FBdUQ7SUFDdEYsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNSLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDMUI7SUFDRCxJQUFJLFFBQVEsQ0FBQztJQUNiLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUNwQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlCO0lBQ0QsSUFBSSxLQUFLLElBQUksbUJBQW1CLENBQUMsS0FBa0IsQ0FBQyxFQUFFO1FBQ2xELE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBa0IsQ0FBQztRQUMvQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN4QyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztLQUMxQjtJQUNELElBQUksS0FBSyxJQUFJLG9CQUFvQixDQUFDLEtBQW1CLENBQUMsRUFBRTtRQUNwRCxNQUFNLFVBQVUsR0FBRyxLQUFtQixDQUFDO1FBQ3ZDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxJQUFJLFVBQVUsQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNwQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQztLQUNKO0lBQ0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUF1QixFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ3hELENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLElBQW1CO0lBQzNDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzFCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUU7WUFDN0IsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7YUFBTTtZQUNILE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekI7S0FDSjtTQUFNO1FBQ0gsT0FBTyxJQUFJLENBQUM7S0FDZjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQXNCO0lBQzNDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0QixPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNuQztTQUFNO1FBQ0gsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO0tBQ2xCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsS0FBNEIsRUFBRSxVQUFtQixLQUFLO0lBQzVFLElBQUksT0FBTyxFQUFFO1FBQ1QsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFFLEtBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ3ZFO1NBQU07UUFDSCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztLQUNyRDtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wYXRpYmxlRGF0ZSwgRGF0ZUVudHJ5LCBSYW5nZUVudHJ5LCBpbnN0YW5jZU9mRGF0ZUVudHJ5LCBpbnN0YW5jZU9mUmFuZ2VFbnRyeSwgQ29tcGF0aWJsZVZhbHVlIH0gZnJvbSAnLi9zdGFuZGFyZC10eXBlcyc7XG5cbmltcG9ydCB7IGZyb21Vbml4VGltZSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IFRpbnlEYXRlIH0gZnJvbSAnbmd4LXRldGh5cy91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGVWYWx1ZSh2YWx1ZTogQ29tcGF0aWJsZURhdGUgfCBudW1iZXIgfCBEYXRlRW50cnkgfCBSYW5nZUVudHJ5KTogeyB2YWx1ZTogQ29tcGF0aWJsZURhdGU7IHdpdGhUaW1lPzogYm9vbGVhbiB9IHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBudWxsIH07XG4gICAgfVxuICAgIGxldCB3aXRoVGltZTtcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YWx1ZSA9IGNvbnZlcnREYXRlKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICYmIGluc3RhbmNlT2ZEYXRlRW50cnkodmFsdWUgYXMgRGF0ZUVudHJ5KSkge1xuICAgICAgICBjb25zdCB7IGRhdGUsIHdpdGhfdGltZSB9ID0gdmFsdWUgYXMgRGF0ZUVudHJ5O1xuICAgICAgICB2YWx1ZSA9IGRhdGUgPyBjb252ZXJ0RGF0ZShkYXRlKSA6IG51bGw7XG4gICAgICAgIHdpdGhUaW1lID0gISF3aXRoX3RpbWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAmJiBpbnN0YW5jZU9mUmFuZ2VFbnRyeSh2YWx1ZSBhcyBSYW5nZUVudHJ5KSkge1xuICAgICAgICBjb25zdCByYW5nZVZhbHVlID0gdmFsdWUgYXMgUmFuZ2VFbnRyeTtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgaWYgKHJhbmdlVmFsdWUuYmVnaW4gJiYgcmFuZ2VWYWx1ZS5lbmQpIHtcbiAgICAgICAgICAgIHZhbHVlWzBdID0gY29udmVydERhdGUocmFuZ2VWYWx1ZS5iZWdpbik7XG4gICAgICAgICAgICB2YWx1ZVsxXSA9IGNvbnZlcnREYXRlKHJhbmdlVmFsdWUuZW5kKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUgYXMgQ29tcGF0aWJsZURhdGUsIHdpdGhUaW1lIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0RGF0ZShkYXRlOiBEYXRlIHwgbnVtYmVyKTogRGF0ZSB7XG4gICAgaWYgKHR5cGVvZiBkYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZGF0ZS50b1N0cmluZygpLmxlbmd0aCA8IDEzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVVuaXhUaW1lKGRhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWU6IENvbXBhdGlibGVWYWx1ZSk6IGJvb2xlYW4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gISF2YWx1ZVswXSAmJiAhIXZhbHVlWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAhIXZhbHVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VWYWx1ZSh2YWx1ZTogQ29tcGF0aWJsZURhdGUgfCBudWxsLCBpc1JhbmdlOiBib29sZWFuID0gZmFsc2UpOiBDb21wYXRpYmxlVmFsdWUge1xuICAgIGlmIChpc1JhbmdlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/ICh2YWx1ZSBhcyBEYXRlW10pLm1hcCh2YWwgPT4gbmV3IFRpbnlEYXRlKHZhbCkpIDogW107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gbmV3IFRpbnlEYXRlKHZhbHVlIGFzIERhdGUpIDogbnVsbDtcbiAgICB9XG59XG4iXX0=
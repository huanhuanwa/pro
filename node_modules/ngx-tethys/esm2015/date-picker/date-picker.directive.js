import { forwardRef, ChangeDetectorRef, ElementRef, Directive } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PickerDirective } from './abstract-picker.directive';
import { ThyPopover } from 'ngx-tethys/popover';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/popover';
export class ThyDatePickerDirective extends PickerDirective {
    constructor(elementRef, cdr, thyPopover) {
        super(elementRef, cdr, thyPopover);
        this.isRange = false;
    }
}
ThyDatePickerDirective.ɵfac = function ThyDatePickerDirective_Factory(t) { return new (t || ThyDatePickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyPopover)); };
ThyDatePickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyDatePickerDirective, selectors: [["", "thyDatePicker", ""]], exportAs: ["thyDatePicker"], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => ThyDatePickerDirective)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
ThyDatePickerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: ThyPopover }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDatePickerDirective, [{
        type: Directive,
        args: [{
                selector: '[thyDatePicker]',
                exportAs: 'thyDatePicker',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => ThyDatePickerDirective)
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ThyPopover }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFhaEQsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGVBQWU7QUFBRyxJQUcxRCxZQUFZLFVBQXNCLEVBQUUsR0FBc0IsRUFBRSxVQUFzQjtBQUN0RixRQUFRLEtBQUssQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzNDLFFBSkksWUFBTyxHQUFHLEtBQUssQ0FBQztBQUNwQixJQUdJLENBQUM7QUFDTDtrREFqQkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxpQkFBaUIsa0JBQzNCLFFBQVEsRUFBRSxlQUFlLGtCQUN6QixTQUFTLEVBQUUsc0JBQ1AsMEJBQ0ksT0FBTyxFQUFFLGlCQUFpQjt1QkFDMUIsS0FBSyxFQUFFLElBQUksMEJBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxzQkFDeEQsa0JBQ0osY0FDSjs7Ozs7O2tEQUNJO0FBQUM7QUFBZ0QsWUFqQmQsVUFBVTtBQUFJLFlBQWpDLGlCQUFpQjtBQUFJLFlBSWpDLFVBQVU7QUFBRzs7Ozs7Ozs7Ozs7Ozs7NElBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcndhcmRSZWYsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBPbkluaXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IFBpY2tlckRpcmVjdGl2ZSB9IGZyb20gJy4vYWJzdHJhY3QtcGlja2VyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBUaHlQb3BvdmVyIH0gZnJvbSAnbmd4LXRldGh5cy9wb3BvdmVyJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdGh5RGF0ZVBpY2tlcl0nLFxuICAgIGV4cG9ydEFzOiAndGh5RGF0ZVBpY2tlcicsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaHlEYXRlUGlja2VyRGlyZWN0aXZlKVxuICAgICAgICB9XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlEYXRlUGlja2VyRGlyZWN0aXZlIGV4dGVuZHMgUGlja2VyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBpc1JhbmdlID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCB0aHlQb3BvdmVyOiBUaHlQb3BvdmVyKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIGNkciwgdGh5UG9wb3Zlcik7XG4gICAgfVxufVxuIl19
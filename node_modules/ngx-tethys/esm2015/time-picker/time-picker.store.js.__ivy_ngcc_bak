import { __decorate, __metadata } from "tslib";
import { Store, Action } from 'ngx-tethys/store';
import { canChangeHours, canChangeMinutes, canChangeSeconds, canChangeValue, timePickerControls } from './time-picker-controls.util';
import { changeTime, setTime, isValidLimit } from './time-picker.utils';
import { Injectable } from '@angular/core';
import { TimePickerConfig } from './time-picker.config';
export const initialState = {
    value: null,
    config: new TimePickerConfig(),
    controls: {
        canIncrementHours: true,
        canIncrementMinutes: true,
        canIncrementSeconds: true,
        canDecrementHours: true,
        canDecrementMinutes: true,
        canDecrementSeconds: true,
        canToggleMeridian: true
    }
};
export class ThyTimePickerStore extends Store {
    constructor() {
        super(initialState);
    }
    writeValue(value) {
        this.setState({ value: value });
    }
    changeHours(event) {
        const state = this.snapshot;
        if (!canChangeValue(state.config, event) || !canChangeHours(event, state.controls)) {
            return state;
        }
        const _newTime = changeTime(state.value, { hour: event.step });
        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {
            return state;
        }
        this.setState({ value: _newTime });
    }
    changeMinutes(event) {
        const state = this.snapshot;
        if (!canChangeValue(state.config, event) || !canChangeMinutes(event, state.controls)) {
            return state;
        }
        const _newTime = changeTime(state.value, { minute: event.step });
        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {
            return state;
        }
        this.setState({ value: _newTime });
    }
    changeSeconds(event) {
        const state = this.snapshot;
        if (!canChangeValue(state.config, event) || !canChangeSeconds(event, state.controls)) {
            return state;
        }
        const _newTime = changeTime(state.value, {
            seconds: event.step
        });
        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {
            return state;
        }
        this.setState({ value: _newTime });
    }
    setTime(value) {
        const state = this.snapshot;
        if (!canChangeValue(state.config)) {
            return state;
        }
        const _newTime = setTime(state.value, value);
        this.setState({ value: _newTime });
    }
    updateControls(value) {
        const state = this.snapshot;
        const _newControlsState = timePickerControls(state.value, value);
        const _newState = {
            value: state.value,
            config: value,
            controls: _newControlsState
        };
        if (state.config.showMeridian !== _newState.config.showMeridian) {
            if (state.value) {
                _newState.value = new Date(state.value);
            }
        }
        this.setState(_newState);
    }
}
ThyTimePickerStore.decorators = [
    { type: Injectable }
];
ThyTimePickerStore.ctorParameters = () => [];
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Date]),
    __metadata("design:returntype", void 0)
], ThyTimePickerStore.prototype, "writeValue", null);
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ThyTimePickerStore.prototype, "changeHours", null);
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ThyTimePickerStore.prototype, "changeMinutes", null);
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ThyTimePickerStore.prototype, "changeSeconds", null);
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ThyTimePickerStore.prototype, "setTime", null);
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ThyTimePickerStore.prototype, "updateControls", null);
//# sourceMappingURL=data:application/json;base64,
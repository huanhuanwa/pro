import { Platform } from '@angular/cdk/platform';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, NgZone, Output, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil, throttleTime } from 'rxjs/operators';
import { getOffset } from 'ngx-tethys/util';
import { ThyScrollService } from 'ngx-tethys/core';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/platform';
import * as ɵngcc2 from 'ngx-tethys/core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from 'ngx-tethys/affix';

const _c0 = ["ink"];
function ThyAnchorComponent_thy_affix_0_ng_template_1_Template(rf, ctx) { }
function ThyAnchorComponent_thy_affix_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "thy-affix", 2);
    ɵngcc0.ɵɵtemplate(1, ThyAnchorComponent_thy_affix_0_ng_template_1_Template, 0, 0, "ng-template", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵproperty("thyOffsetTop", ctx_r0.thyOffsetTop)("thyContainer", ctx_r0.container);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1);
} }
function ThyAnchorComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "div", 6);
    ɵngcc0.ɵɵelement(3, "div", 7, 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵprojection(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r2.wrapperStyle);
} }
const _c1 = ["*"];
const sharpMatcherRegx = /#([^#]+)$/;
export class ThyAnchorComponent {
    constructor(document, cdr, platform, zone, renderer, scrollService) {
        this.document = document;
        this.cdr = cdr;
        this.platform = platform;
        this.zone = zone;
        this.renderer = renderer;
        this.scrollService = scrollService;
        this.thyAffix = true;
        this.thyBounds = 5;
        this.thyOffsetTop = undefined;
        this.thyTarget = '';
        this.thyClick = new EventEmitter();
        this.thyScroll = new EventEmitter();
        this.visible = false;
        this.wrapperStyle = { 'max-height': '100vh' };
        this.links = [];
        this.animating = false;
        this.destroy$ = new Subject();
        this.handleScrollTimeoutID = -1;
    }
    registerLink(link) {
        this.links.push(link);
    }
    unregisterLink(link) {
        this.links.splice(this.links.indexOf(link), 1);
    }
    getContainer() {
        return this.container || window;
    }
    ngAfterViewInit() {
        this.registerScrollEvent();
    }
    ngOnDestroy() {
        clearTimeout(this.handleScrollTimeoutID);
        this.destroy$.next();
        this.destroy$.complete();
    }
    registerScrollEvent() {
        if (!this.platform.isBrowser) {
            return;
        }
        this.destroy$.next();
        this.zone.runOutsideAngular(() => {
            fromEvent(this.getContainer(), 'scroll')
                .pipe(throttleTime(50), takeUntil(this.destroy$))
                .subscribe(() => this.handleScroll());
        });
        // Browser would maintain the scrolling position when refreshing.
        // So we have to delay calculation in avoid of getting a incorrect result.
        this.handleScrollTimeoutID = setTimeout(() => this.handleScroll());
    }
    handleScroll() {
        if (typeof document === 'undefined' || this.animating) {
            return;
        }
        const container = this.container instanceof HTMLElement ? this.container : this.document;
        const sections = [];
        const scope = (this.thyOffsetTop || 0) + this.thyBounds;
        this.links.forEach(linkComponent => {
            const sharpLinkMatch = sharpMatcherRegx.exec(linkComponent.thyHref.toString());
            if (!sharpLinkMatch) {
                return;
            }
            const target = container.querySelector(`#${sharpLinkMatch[1]}`);
            if (target) {
                const top = getOffset(target, this.getContainer()).top;
                if (top < scope) {
                    sections.push({
                        top,
                        linkComponent
                    });
                }
            }
        });
        this.visible = !!sections.length;
        if (!this.visible) {
            this.clearActive();
            this.cdr.detectChanges();
        }
        else {
            const maxSection = sections.reduce((prev, curr) => (curr.top > prev.top ? curr : prev));
            this.handleActive(maxSection.linkComponent);
        }
        this.setVisible();
    }
    clearActive() {
        this.links.forEach(i => {
            i.unsetActive();
        });
    }
    handleActive(linkComponent) {
        this.clearActive();
        linkComponent.setActive();
        const linkNode = linkComponent.getLinkTitleElement();
        this.ink.nativeElement.style.top = `${linkNode.offsetTop}px`;
        this.ink.nativeElement.style.height = `${linkNode.clientHeight}px`;
        this.visible = true;
        this.setVisible();
        this.thyScroll.emit(linkComponent);
    }
    setVisible() {
        const visible = this.visible;
        const visibleClassname = 'visible';
        if (this.ink) {
            if (visible) {
                this.renderer.addClass(this.ink.nativeElement, visibleClassname);
            }
            else {
                this.renderer.removeClass(this.ink.nativeElement, visibleClassname);
            }
        }
    }
    handleScrollTo(linkComponent) {
        const container = this.container instanceof HTMLElement ? this.container : this.document;
        const linkElement = container.querySelector(linkComponent.thyHref);
        if (!linkElement) {
            return;
        }
        this.animating = true;
        const containerScrollTop = this.scrollService.getScroll(this.getContainer());
        const elementOffsetTop = getOffset(linkElement, this.getContainer()).top;
        const targetScrollTop = containerScrollTop + elementOffsetTop - (this.thyOffsetTop || 0);
        this.scrollService.scrollTo(this.getContainer(), targetScrollTop, undefined, () => {
            this.animating = false;
        });
        this.handleActive(linkComponent);
        this.thyClick.emit(linkComponent);
    }
    ngOnChanges(changes) {
        const { thyOffsetTop, thyContainer } = changes;
        if (thyOffsetTop) {
            this.wrapperStyle = {
                'max-height': `calc(100vh - ${this.thyOffsetTop}px)`
            };
        }
        if (thyContainer && this.thyContainer) {
            const container = this.thyContainer || this.thyTarget;
            this.container = typeof container === 'string' ? this.document.querySelector(container) : container;
            this.registerScrollEvent();
        }
    }
}
ThyAnchorComponent.ɵfac = function ThyAnchorComponent_Factory(t) { return new (t || ThyAnchorComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyScrollService)); };
ThyAnchorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyAnchorComponent, selectors: [["thy-anchor"]], viewQuery: function ThyAnchorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ink = _t.first);
    } }, inputs: { thyAffix: "thyAffix", thyBounds: "thyBounds", thyOffsetTop: "thyOffsetTop", thyTarget: "thyTarget", thyContainer: "thyContainer" }, outputs: { thyClick: "thyClick", thyScroll: "thyScroll" }, exportAs: ["thyAnchor"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 3, vars: 2, consts: [[3, "thyOffsetTop", "thyContainer", 4, "ngIf", "ngIfElse"], ["content", ""], [3, "thyOffsetTop", "thyContainer"], [3, "ngTemplateOutlet"], [1, "thy-anchor-wrapper", 3, "ngStyle"], [1, "thy-anchor"], [1, "thy-anchor-ink"], [1, "thy-anchor-ink-full"], ["ink", ""]], template: function ThyAnchorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyAnchorComponent_thy_affix_0_Template, 2, 3, "thy-affix", 0);
        ɵngcc0.ɵɵtemplate(1, ThyAnchorComponent_ng_template_1_Template, 6, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thyAffix)("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.ThyAffixComponent, ɵngcc3.NgTemplateOutlet, ɵngcc3.NgStyle], encapsulation: 2, changeDetection: 0 });
ThyAnchorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef },
    { type: Platform },
    { type: NgZone },
    { type: Renderer2 },
    { type: ThyScrollService }
];
ThyAnchorComponent.propDecorators = {
    ink: [{ type: ViewChild, args: ['ink',] }],
    thyAffix: [{ type: Input }],
    thyBounds: [{ type: Input }],
    thyOffsetTop: [{ type: Input }],
    thyContainer: [{ type: Input }],
    thyTarget: [{ type: Input }],
    thyClick: [{ type: Output }],
    thyScroll: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyAnchorComponent, [{
        type: Component,
        args: [{
                selector: 'thy-anchor',
                exportAs: 'thyAnchor',
                preserveWhitespaces: false,
                template: `
        <thy-affix *ngIf="thyAffix; else content" [thyOffsetTop]="thyOffsetTop" [thyContainer]="container">
            <ng-template [ngTemplateOutlet]="content"></ng-template>
        </thy-affix>
        <ng-template #content>
            <div class="thy-anchor-wrapper" [ngStyle]="wrapperStyle">
                <div class="thy-anchor">
                    <div class="thy-anchor-ink">
                        <div class="thy-anchor-ink-full" #ink></div>
                    </div>
                    <ng-content></ng-content>
                </div>
            </div>
        </ng-template>
    `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc2.ThyScrollService }]; }, { thyAffix: [{
            type: Input
        }], thyBounds: [{
            type: Input
        }], thyOffsetTop: [{
            type: Input
        }], thyTarget: [{
            type: Input
        }], thyClick: [{
            type: Output
        }], thyScroll: [{
            type: Output
        }], ink: [{
            type: ViewChild,
            args: ['ink']
        }], thyContainer: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { Component, Input, Output, EventEmitter, forwardRef, ElementRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { helpers } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["switch"];
export class ThySwitchComponent {
    constructor() {
        this.type = 'primary';
        this.size = '';
        this.disabled = false;
        this.typeArray = ['primary', 'info', 'warning', 'danger'];
        this.sizeArray = ['lg', '', 'sm'];
        this.initialized = false;
        this.thyChange = new EventEmitter();
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    set thyType(value) {
        if (!this.typeArray.includes(value)) {
            value = 'primary';
        }
        this.type = value;
        if (this.initialized) {
            this.setClassNames();
        }
    }
    set thySize(value) {
        if (!this.sizeArray.includes(value)) {
            value = '';
        }
        this.size = value;
        if (this.initialized) {
            this.setClassNames();
        }
    }
    ngOnInit() {
        this.setClassNames();
        this.initialized = true;
    }
    ngOnChanges(changes) {
        // 兼容降级后的Switch，使用onChanges
        if (changes.thyDisabled) {
            const value = changes.thyDisabled.currentValue;
            this.disabled = helpers.isBoolean(value) ? Boolean(value) : value === 'true' || value === '1';
            this.setClassNames();
        }
    }
    writeValue(value) {
        this.model = value;
        // this.setClassNames();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.setClassNames();
    }
    toggle(event) {
        this.model = !this.model;
        this.onModelChange(this.model);
        this.thyChange.emit(event);
    }
    setClassNames() {
        this.classNames = [`thy-switch-${this.type}`];
        if (this.size) {
            this.classNames.push(`thy-switch-${this.size}`);
        }
        if (this.disabled) {
            this.classNames.push(`thy-switch-disabled`);
            if (this.model) {
                this.classNames.push(`thy-switch-disabled-true`);
            }
        }
    }
}
ThySwitchComponent.ɵfac = function ThySwitchComponent_Factory(t) { return new (t || ThySwitchComponent)(); };
ThySwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThySwitchComponent, selectors: [["thy-switch"]], viewQuery: function ThySwitchComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.switchElementRef = _t.first);
    } }, inputs: { thyType: "thyType", thySize: "thySize", thyDisabled: "thyDisabled" }, outputs: { thyChange: "thyChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThySwitchComponent),
                multi: true
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 3, consts: [[1, "thy-switch", 3, "ngClass"], ["switch", ""], ["type", "checkbox", 1, "thy-switch-input", 3, "disabled", "checked", "change"], [1, "thy-switch-label"], [1, "thy-switch-handle"]], template: function ThySwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "input", 2);
        ɵngcc0.ɵɵlistener("change", function ThySwitchComponent_Template_input_change_2_listener($event) { return ctx.toggle($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "span", 3);
        ɵngcc0.ɵɵelement(4, "span", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.classNames);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("checked", ctx.model);
    } }, directives: [ɵngcc1.NgClass], encapsulation: 2 });
ThySwitchComponent.ctorParameters = () => [];
ThySwitchComponent.propDecorators = {
    switchElementRef: [{ type: ViewChild, args: ['switch', { static: true },] }],
    thyType: [{ type: Input }],
    thySize: [{ type: Input }],
    thyDisabled: [{ type: Input }],
    thyChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThySwitchComponent, [{
        type: Component,
        args: [{
                selector: 'thy-switch',
                template: "<label #switch class=\"thy-switch\" [ngClass]=\"classNames\">\n    <input type=\"checkbox\" [disabled]=\"disabled\" class=\"thy-switch-input\" [checked]=\"model\" (change)=\"toggle($event)\">\n    <span class=\"thy-switch-label\"></span>\n    <span class=\"thy-switch-handle\"></span>\n</label>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThySwitchComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, { thyChange: [{
            type: Output
        }], thyType: [{
            type: Input
        }], thySize: [{
            type: Input
        }], switchElementRef: [{
            type: ViewChild,
            args: ['switch', { static: true }]
        }], thyDisabled: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
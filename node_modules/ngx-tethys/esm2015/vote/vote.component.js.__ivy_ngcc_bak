import { Component, Input, HostBinding, ElementRef, TemplateRef, ContentChild } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { UpdateHostClassService } from 'ngx-tethys/core';
export class ThyVoteComponent {
    constructor(elementRef, updateHostClassService) {
        this.elementRef = elementRef;
        this.updateHostClassService = updateHostClassService;
        this._initialized = false;
        this._isRound = false;
        this.class = true;
        this._hasVoted = true;
        this.thyIcon = 'thumb-up';
        this.updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySize(value) {
        this._size = value;
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    set thyVote(value) {
        this._type = value;
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    set thyRound(value) {
        this._isRound = coerceBooleanProperty(value);
    }
    set thyLayout(value) {
        this._layout = value;
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    set thyHasVoted(value) {
        this._hasVoted = coerceBooleanProperty(value);
        if (this._initialized) {
            this._setClassesByType();
        }
    }
    ngOnInit() {
        this._setClassesByType();
        this._initialized = true;
    }
    _setClassesByType() {
        const classNames = [];
        if (!this._type) {
            this._type = 'primary';
        }
        if (!this._layout) {
            this._layout = 'horizontal';
        }
        if (!this._size) {
            this._size = 'default';
        }
        if (this._isRound) {
            classNames.push('thy-vote-round');
        }
        classNames.push(`thy-vote-${this._type}`);
        classNames.push(`thy-vote-${this._layout}`);
        classNames.push(`thy-vote-${this._layout}-size-${this._size}`);
        this.updateHostClassService.updateClass(classNames);
    }
}
ThyVoteComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-vote,[thyVote]',
                template: "<thy-icon *ngIf=\"!voteIcon\" [thyIconName]=\"thyIcon\" [thyIconType]=\"_hasVoted ? 'fill' : ''\"></thy-icon>\n<ng-container *ngIf=\"voteIcon\" [ngTemplateOutlet]=\"voteIcon\"></ng-container>\n<div>{{ thyVoteCount }}</div>\n",
                providers: [UpdateHostClassService]
            },] }
];
ThyVoteComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService }
];
ThyVoteComponent.propDecorators = {
    class: [{ type: HostBinding, args: [`class.thy-vote`,] }],
    _hasVoted: [{ type: HostBinding, args: [`class.has-voted`,] }],
    thySize: [{ type: Input }],
    thyVote: [{ type: Input }],
    thyRound: [{ type: Input }],
    thyLayout: [{ type: Input }],
    thyVoteCount: [{ type: Input }],
    thyIcon: [{ type: Input }],
    thyHasVoted: [{ type: Input }],
    voteIcon: [{ type: ContentChild, args: ['voteIcon',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm90ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdm90ZS92b3RlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0csT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFhekQsTUFBTSxPQUFPLGdCQUFnQjtJQTBEekIsWUFBb0IsVUFBc0IsRUFBVSxzQkFBOEM7UUFBOUUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFuRGxHLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBRXJCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFYyxVQUFLLEdBQUcsSUFBSSxDQUFDO1FBRVosY0FBUyxHQUFHLElBQUksQ0FBQztRQWlDeEMsWUFBTyxHQUFHLFVBQVUsQ0FBQztRQWExQixJQUFJLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUE3Q0QsSUFDSSxPQUFPLENBQUMsS0FBbUI7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQztJQUVELElBQ0ksT0FBTyxDQUFDLEtBQWtCO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztTQUM1QjtJQUNMLENBQUM7SUFFRCxJQUNJLFFBQVEsQ0FBQyxLQUFjO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELElBQ0ksU0FBUyxDQUFDLEtBQW9CO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztTQUM1QjtJQUNMLENBQUM7SUFNRCxJQUNJLFdBQVcsQ0FBQyxLQUFjO1FBQzFCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQztJQVFELFFBQVE7UUFDSixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRUQsaUJBQWlCO1FBQ2IsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7U0FDMUI7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztTQUMxQjtRQUNELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLFVBQVUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNyQztRQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxQyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDNUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RCxDQUFDOzs7WUExRkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLDRPQUFvQztnQkFDcEMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLENBQUM7YUFDdEM7OztZQWQrQyxVQUFVO1lBRWpELHNCQUFzQjs7O29CQXdCMUIsV0FBVyxTQUFDLGdCQUFnQjt3QkFFNUIsV0FBVyxTQUFDLGlCQUFpQjtzQkFFN0IsS0FBSztzQkFRTCxLQUFLO3VCQVFMLEtBQUs7d0JBS0wsS0FBSzsyQkFRTCxLQUFLO3NCQUVMLEtBQUs7MEJBRUwsS0FBSzt1QkFRTCxZQUFZLFNBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYsIFRlbXBsYXRlUmVmLCBDb250ZW50Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5pbXBvcnQgeyBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcblxuZXhwb3J0IHR5cGUgVGh5Vm90ZVNpemVzID0gJ2RlZmF1bHQnIHwgJ3NtJztcblxuZXhwb3J0IHR5cGUgVGh5Vm90ZVR5cGUgPSAncHJpbWFyeScgfCAnc3VjY2VzcycgfCAncHJpbWFyeS13ZWFrJyB8ICdzdWNjZXNzLXdlYWsnO1xuXG5leHBvcnQgdHlwZSBUaHlWb3RlTGF5b3V0ID0gJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktdm90ZSxbdGh5Vm90ZV0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi92b3RlLmNvbXBvbmVudC5odG1sJyxcbiAgICBwcm92aWRlcnM6IFtVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlWb3RlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBfc2l6ZTogVGh5Vm90ZVNpemVzO1xuXG4gICAgX3R5cGU6IFRoeVZvdGVUeXBlO1xuXG4gICAgX2xheW91dDogVGh5Vm90ZUxheW91dDtcblxuICAgIF9pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgX2lzUm91bmQgPSBmYWxzZTtcblxuICAgIEBIb3N0QmluZGluZyhgY2xhc3MudGh5LXZvdGVgKSBjbGFzcyA9IHRydWU7XG5cbiAgICBASG9zdEJpbmRpbmcoYGNsYXNzLmhhcy12b3RlZGApIF9oYXNWb3RlZCA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlTaXplKHZhbHVlOiBUaHlWb3RlU2l6ZXMpIHtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldENsYXNzZXNCeVR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVZvdGUodmFsdWU6IFRoeVZvdGVUeXBlKSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRDbGFzc2VzQnlUeXBlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlSb3VuZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9pc1JvdW5kID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlMYXlvdXQodmFsdWU6IFRoeVZvdGVMYXlvdXQpIHtcbiAgICAgICAgdGhpcy5fbGF5b3V0ID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0Q2xhc3Nlc0J5VHlwZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KCkgdGh5Vm90ZUNvdW50OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSB0aHlJY29uID0gJ3RodW1iLXVwJztcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUhhc1ZvdGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2hhc1ZvdGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRDbGFzc2VzQnlUeXBlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAQ29udGVudENoaWxkKCd2b3RlSWNvbicpIHZvdGVJY29uOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLmluaXRpYWxpemVFbGVtZW50KGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuX3NldENsYXNzZXNCeVR5cGUoKTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIF9zZXRDbGFzc2VzQnlUeXBlKCkge1xuICAgICAgICBjb25zdCBjbGFzc05hbWVzID0gW107XG4gICAgICAgIGlmICghdGhpcy5fdHlwZSkge1xuICAgICAgICAgICAgdGhpcy5fdHlwZSA9ICdwcmltYXJ5JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2xheW91dCkge1xuICAgICAgICAgICAgdGhpcy5fbGF5b3V0ID0gJ2hvcml6b250YWwnO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9ICdkZWZhdWx0JztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNSb3VuZCkge1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCd0aHktdm90ZS1yb3VuZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaChgdGh5LXZvdGUtJHt0aGlzLl90eXBlfWApO1xuICAgICAgICBjbGFzc05hbWVzLnB1c2goYHRoeS12b3RlLSR7dGhpcy5fbGF5b3V0fWApO1xuICAgICAgICBjbGFzc05hbWVzLnB1c2goYHRoeS12b3RlLSR7dGhpcy5fbGF5b3V0fS1zaXplLSR7dGhpcy5fc2l6ZX1gKTtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUNsYXNzKGNsYXNzTmFtZXMpO1xuICAgIH1cbn1cbiJdfQ==
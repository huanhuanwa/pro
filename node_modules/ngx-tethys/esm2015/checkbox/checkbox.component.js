import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThyTranslate } from 'ngx-tethys/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { ThyFormCheckBaseComponent } from 'ngx-tethys/shared';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from '@angular/common';

function ThyCheckboxComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0._labelText);
} }
const _c0 = function (a0, a1) { return { "form-check-indeterminate": a0, "form-check-no-label-text": a1 }; };
const _c1 = ["*"];
const noop = () => { };
const ɵ0 = noop;
export class ThyCheckboxComponent extends ThyFormCheckBaseComponent {
    constructor(thyTranslate) {
        super(thyTranslate);
        this.isIndeterminate = false;
    }
    set thyIndeterminate(value) {
        this.isIndeterminate = coerceBooleanProperty(value);
    }
}
ThyCheckboxComponent.ɵfac = function ThyCheckboxComponent_Factory(t) { return new (t || ThyCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyTranslate)); };
ThyCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyCheckboxComponent, selectors: [["thy-checkbox"], ["", "thy-checkbox", ""], ["", "thyCheckbox", ""]], inputs: { thyIndeterminate: "thyIndeterminate" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ThyCheckboxComponent),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 3, vars: 7, consts: [["type", "checkbox", 1, "form-check-input", 3, "ngClass", "checked", "disabled", "change"], ["class", "form-check-label", 4, "ngIf"], [1, "form-check-label"]], template: function ThyCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "input", 0);
        ɵngcc0.ɵɵlistener("change", function ThyCheckboxComponent_Template_input_change_0_listener() { return ctx.change(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(1, ThyCheckboxComponent_span_1_Template, 2, 1, "span", 1);
        ɵngcc0.ɵɵprojection(2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c0, ctx.isIndeterminate, !ctx._labelText))("checked", ctx._innerValue)("disabled", ctx._disabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx._labelText);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgIf], encapsulation: 2 });
ThyCheckboxComponent.ctorParameters = () => [
    { type: ThyTranslate }
];
ThyCheckboxComponent.propDecorators = {
    thyIndeterminate: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'thy-checkbox,[thy-checkbox],[thyCheckbox]',
                template: "<input\n  class=\"form-check-input\"\n  [ngClass]=\"{ 'form-check-indeterminate': isIndeterminate, 'form-check-no-label-text': !_labelText }\"\n  [checked]=\"_innerValue\"\n  (change)=\"change()\"\n  type=\"checkbox\"\n  [disabled]=\"_disabled\"\n/>\n<span class=\"form-check-label\" *ngIf=\"_labelText\">{{ _labelText }}</span>\n<ng-content></ng-content>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ThyCheckboxComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.ThyTranslate }]; }, { thyIndeterminate: [{
            type: Input
        }] }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUE2QixLQUFLLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFFLGlCQUFpQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztBQUU5RCxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7QUFDdEI7QUFZQSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEseUJBQXlCO0FBQ25FLElBT0ksWUFBWSxZQUEwQjtBQUMxQyxRQUFRLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM1QixRQVRJLG9CQUFlLEdBQUcsS0FBSyxDQUFDO0FBQzVCLElBUUksQ0FBQztBQUNMLElBUkksSUFDSSxnQkFBZ0IsQ0FBQyxLQUFjO0FBQ3ZDLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1RCxJQUFJLENBQUM7QUFDTDtnREFsQkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSwyQ0FBMkMsa0JBQ3JEOzs7O21EQUF3QztBQUN4QyxTQUFTLEVBQUU7S0FDUDtpQkFDSSxPQUFPLEVBQUUsaUJBQWlCLDBCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLDBCQUNuRCxLQUFLLEVBQUUsSUFBSSxzQkFDZCxrQkFDSixjQUNKOzs7Ozs7Ozs7Ozt3RUFDSTtBQUFDO0FBQThDLFlBbEIzQyxZQUFZO0FBQUc7QUFBRztBQUNSLCtCQW9CZCxLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVGh5VHJhbnNsYXRlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbmltcG9ydCB7IFRoeUZvcm1DaGVja0Jhc2VDb21wb25lbnQgfSBmcm9tICduZ3gtdGV0aHlzL3NoYXJlZCc7XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktY2hlY2tib3gsW3RoeS1jaGVja2JveF0sW3RoeUNoZWNrYm94XScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NoZWNrYm94LmNvbXBvbmVudC5odG1sJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaHlDaGVja2JveENvbXBvbmVudCksXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlDaGVja2JveENvbXBvbmVudCBleHRlbmRzIFRoeUZvcm1DaGVja0Jhc2VDb21wb25lbnQge1xuICAgIGlzSW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5SW5kZXRlcm1pbmF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmlzSW5kZXRlcm1pbmF0ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IodGh5VHJhbnNsYXRlOiBUaHlUcmFuc2xhdGUpIHtcbiAgICAgICAgc3VwZXIodGh5VHJhbnNsYXRlKTtcbiAgICB9XG59XG4iXX0=
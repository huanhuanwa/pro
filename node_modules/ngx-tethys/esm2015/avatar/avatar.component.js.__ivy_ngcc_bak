import { Component, Input, Output, EventEmitter, ElementRef, HostBinding, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyAvatarService } from './avatar.service';
import { isString } from 'ngx-tethys/util';
import { DomSanitizer } from '@angular/platform-browser';
const sizeArray = [22, 24, 28, 32, 36, 48, 68, 110, 160];
const DEFAULT_SIZE = 36;
export const thyAvatarSizeMap = {
    xxs: 22,
    xs: 24,
    sm: 32,
    md: 36,
    lg: 48
};
export class ThyAvatarComponent {
    constructor(updateHostClassService, elementRef, thyAvatarService, domSanitizer) {
        this.updateHostClassService = updateHostClassService;
        this.elementRef = elementRef;
        this.thyAvatarService = thyAvatarService;
        this.domSanitizer = domSanitizer;
        this._showRemove = false;
        this._isAvatar = true;
        this.thyOnRemove = new EventEmitter();
        this.thyError = new EventEmitter();
        updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thySrc(value) {
        this._setAvatarSrc(value);
    }
    set thyName(value) {
        // this._name = value;
        this._setAvatarName(value);
    }
    set thySize(value) {
        if (thyAvatarSizeMap[value]) {
            this._setAvatarSize(thyAvatarSizeMap[value]);
        }
        else {
            this._setAvatarSize(value * 1);
        }
    }
    set thyShowRemove(value) {
        this._showRemove = coerceBooleanProperty(value);
    }
    _setAvatarSize(size) {
        if (sizeArray.indexOf(size) > -1) {
            this._size = size;
        }
        else {
            this._size = this.findClosestSize(sizeArray, size);
        }
    }
    findClosestSize(sizes, value) {
        let left = 0, right = sizes.length - 1, middle, result;
        while (left <= right) {
            middle = Math.floor((left + right) / 2);
            if (right - left <= 1) {
                result = sizes[right];
                break;
            }
            result = sizes[middle];
            if (result === value) {
                return value;
            }
            else if (result > value) {
                right = middle;
            }
            else {
                left = middle;
            }
        }
        return value - sizes[left] < sizes[right] - value ? sizes[left] : sizes[right];
    }
    _setAvatarSrc(src) {
        if (src && this.thyAvatarService.ignoreAvatarSrcPaths.indexOf(src) < 0) {
            this._src = src;
        }
        else {
            this._src = null;
        }
    }
    _setAvatarName(value) {
        const name = this.thyAvatarService.nameTransform(value);
        if (isString(name)) {
            this.avatarName = name;
        }
        else {
            this.avatarName = value;
            this.avatarNameSafeHtml = name;
        }
    }
    ngOnInit() {
        if (!this._size) {
            this._setAvatarSize(DEFAULT_SIZE);
        }
        this.updateHostClassService.updateClass([`thy-avatar-${this._size}`]);
    }
    remove($event) {
        this.thyOnRemove.emit($event);
    }
    avatarImgError($event) {
        this._setAvatarSrc(null);
        this.thyError.emit($event);
    }
}
ThyAvatarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-avatar',
                template: "<img\n  *ngIf=\"_src\"\n  [src]=\"_src | thyAvatarSrc: _size\"\n  class=\"avatar-avatar\"\n  [ngClass]=\"thyImgClass\"\n  alt=\"{{ avatarName || '' }}\"\n  (error)=\"avatarImgError($event)\"\n/>\n<span *ngIf=\"!_src\" class=\"avatar-default\" [ngStyle]=\"avatarName | avatarBgColor\">\n  <div>{{ avatarName | avatarShortName }}</div>\n</span>\n<ng-container *ngIf=\"thyShowName\">\n  <div *ngIf=\"!avatarNameSafeHtml\" class=\"avatar-name\">{{ avatarName }}</div>\n  <div *ngIf=\"avatarNameSafeHtml\" class=\"avatar-name\" [innerHtml]=\"avatarNameSafeHtml\"></div>\n</ng-container>\n<a *ngIf=\"_showRemove\" (click)=\"remove($event)\" href=\"javascript:;\" class=\"remove-link avatar-remove\"\n  ><thy-icon class=\"remove-link-icon\" thyIconName=\"close-circle-bold-fill\"></thy-icon\n></a>\n<div *ngIf=\"thyDisabled\" class=\"thy-avatar-disabled\">\n  <thy-icon class=\"thy-avatar-disabled-icon\" thyIconName=\"ban\"></thy-icon>\n</div>\n",
                providers: [UpdateHostClassService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyAvatarComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: ThyAvatarService },
    { type: DomSanitizer }
];
ThyAvatarComponent.propDecorators = {
    _isAvatar: [{ type: HostBinding, args: ['class.thy-avatar',] }],
    thyOnRemove: [{ type: Output }],
    thyError: [{ type: Output }],
    thyShowName: [{ type: Input }],
    thySrc: [{ type: Input }],
    thyName: [{ type: Input }],
    thySize: [{ type: Input }],
    thyShowRemove: [{ type: Input }],
    thyImgClass: [{ type: Input }],
    thyDisabled: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,
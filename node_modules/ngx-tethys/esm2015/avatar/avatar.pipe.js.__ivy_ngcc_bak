import { Pipe } from '@angular/core';
import { ThyAvatarService } from './avatar.service';
export class AvatarShortNamePipe {
    transform(name) {
        if (!name) {
            return;
        }
        name = name.trim();
        if (/^[\u4e00-\u9fa5]+$/.test(name)) {
            if (name.length > 2) {
                return name.substr(name.length - 2, 2);
            }
        }
        if (/^[a-zA-Z\/ ]+$/.test(name)) {
            if (name.indexOf(' ') > 0) {
                const ens = name.split(' ');
                return (ens[0].substr(0, 1) + ens[1].substr(0, 1)).toUpperCase();
            }
        }
        if (name.length > 2) {
            return name.substr(0, 2).toUpperCase();
        }
        return name.toUpperCase();
    }
}
AvatarShortNamePipe.decorators = [
    { type: Pipe, args: [{ name: 'avatarShortName' },] }
];
export class AvatarBgColorPipe {
    transform(name) {
        if (!name) {
            return;
        }
        const colors = [
            '#56abfb',
            '#5dcfff',
            '#84e17e',
            '#73d897',
            '#ff9f73',
            '#fa8888',
            '#fb7fb7',
            '#9a7ef4',
            '#868af6'
        ];
        const nameArray = name.split('');
        const code = name && name.length > 0
            ? nameArray.reduce(function (result, item) {
                result.value += item.charCodeAt(0);
                return result;
            }, { value: 0 }).value
            : 0;
        return {
            'background-color': colors[code % 9]
        };
    }
}
AvatarBgColorPipe.decorators = [
    { type: Pipe, args: [{ name: 'avatarBgColor' },] }
];
export class AvatarSrcPipe {
    constructor(thyAvatarService) {
        this.thyAvatarService = thyAvatarService;
    }
    transform(src, size) {
        return this.thyAvatarService.avatarSrcTransform(src, size);
    }
}
AvatarSrcPipe.decorators = [
    { type: Pipe, args: [{ name: 'thyAvatarSrc' },] }
];
AvatarSrcPipe.ctorParameters = () => [
    { type: ThyAvatarService }
];
export const AvatarPipes = [AvatarShortNamePipe, AvatarBgColorPipe, AvatarSrcPipe];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXZhdGFyL2F2YXRhci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3BELE1BQU0sT0FBTyxtQkFBbUI7SUFDNUIsU0FBUyxDQUFDLElBQVk7UUFDbEIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLE9BQU87U0FDVjtRQUNELElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkIsSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDakIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzFDO1NBQ0o7UUFDRCxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixNQUFNLEdBQUcsR0FBYSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNwRTtTQUNKO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7O1lBdEJKLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRTs7QUEwQmpDLE1BQU0sT0FBTyxpQkFBaUI7SUFDMUIsU0FBUyxDQUFDLElBQVk7UUFDbEIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLE9BQU87U0FDVjtRQUNELE1BQU0sTUFBTSxHQUFHO1lBQ1gsU0FBUztZQUNULFNBQVM7WUFDVCxTQUFTO1lBQ1QsU0FBUztZQUNULFNBQVM7WUFDVCxTQUFTO1lBQ1QsU0FBUztZQUNULFNBQVM7WUFDVCxTQUFTO1NBQ1osQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsTUFBTSxJQUFJLEdBQ04sSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNuQixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDWixVQUFTLE1BQU0sRUFBRSxJQUFJO2dCQUNqQixNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLE9BQU8sTUFBTSxDQUFDO1lBQ2xCLENBQUMsRUFDRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FDZixDQUFDLEtBQUs7WUFDVCxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1osT0FBTztZQUNILGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZDLENBQUM7SUFDTixDQUFDOzs7WUEvQkosSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRTs7QUFtQy9CLE1BQU0sT0FBTyxhQUFhO0lBQ3RCLFlBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUcsQ0FBQztJQUMxRCxTQUFTLENBQUMsR0FBVyxFQUFFLElBQVk7UUFDL0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7OztZQUxKLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7OztZQTdEckIsZ0JBQWdCOztBQXFFekIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaHlBdmF0YXJTZXJ2aWNlIH0gZnJvbSAnLi9hdmF0YXIuc2VydmljZSc7XG5cbkBQaXBlKHsgbmFtZTogJ2F2YXRhclNob3J0TmFtZScgfSlcbmV4cG9ydCBjbGFzcyBBdmF0YXJTaG9ydE5hbWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgdHJhbnNmb3JtKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5hbWUgPSBuYW1lLnRyaW0oKTtcbiAgICAgICAgaWYgKC9eW1xcdTRlMDAtXFx1OWZhNV0rJC8udGVzdChuYW1lKSkge1xuICAgICAgICAgICAgaWYgKG5hbWUubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lLnN1YnN0cihuYW1lLmxlbmd0aCAtIDIsIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgvXlthLXpBLVpcXC8gXSskLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICBpZiAobmFtZS5pbmRleE9mKCcgJykgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5zOiBzdHJpbmdbXSA9IG5hbWUuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGVuc1swXS5zdWJzdHIoMCwgMSkgKyBlbnNbMV0uc3Vic3RyKDAsIDEpKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lLnN1YnN0cigwLCAyKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxufVxuXG5AUGlwZSh7IG5hbWU6ICdhdmF0YXJCZ0NvbG9yJyB9KVxuZXhwb3J0IGNsYXNzIEF2YXRhckJnQ29sb3JQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgdHJhbnNmb3JtKG5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2xvcnMgPSBbXG4gICAgICAgICAgICAnIzU2YWJmYicsXG4gICAgICAgICAgICAnIzVkY2ZmZicsXG4gICAgICAgICAgICAnIzg0ZTE3ZScsXG4gICAgICAgICAgICAnIzczZDg5NycsXG4gICAgICAgICAgICAnI2ZmOWY3MycsXG4gICAgICAgICAgICAnI2ZhODg4OCcsXG4gICAgICAgICAgICAnI2ZiN2ZiNycsXG4gICAgICAgICAgICAnIzlhN2VmNCcsXG4gICAgICAgICAgICAnIzg2OGFmNidcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgbmFtZUFycmF5OiBzdHJpbmdbXSA9IG5hbWUuc3BsaXQoJycpO1xuICAgICAgICBjb25zdCBjb2RlOiBudW1iZXIgPVxuICAgICAgICAgICAgbmFtZSAmJiBuYW1lLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IG5hbWVBcnJheS5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24ocmVzdWx0LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC52YWx1ZSArPSBpdGVtLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAwIH1cbiAgICAgICAgICAgICAgICAgICkudmFsdWVcbiAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6IGNvbG9yc1tjb2RlICUgOV1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cbkBQaXBlKHsgbmFtZTogJ3RoeUF2YXRhclNyYycgfSlcbmV4cG9ydCBjbGFzcyBBdmF0YXJTcmNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0aHlBdmF0YXJTZXJ2aWNlOiBUaHlBdmF0YXJTZXJ2aWNlKSB7fVxuICAgIHRyYW5zZm9ybShzcmM6IHN0cmluZywgc2l6ZTogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoeUF2YXRhclNlcnZpY2UuYXZhdGFyU3JjVHJhbnNmb3JtKHNyYywgc2l6ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgQXZhdGFyUGlwZXMgPSBbQXZhdGFyU2hvcnROYW1lUGlwZSwgQXZhdGFyQmdDb2xvclBpcGUsIEF2YXRhclNyY1BpcGVdO1xuIl19
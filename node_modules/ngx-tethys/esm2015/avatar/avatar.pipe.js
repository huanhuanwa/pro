import { Pipe } from '@angular/core';
import { ThyAvatarService } from './avatar.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './avatar.service';
export class AvatarShortNamePipe {
    transform(name) {
        if (!name) {
            return;
        }
        name = name.trim();
        if (/^[\u4e00-\u9fa5]+$/.test(name)) {
            if (name.length > 2) {
                return name.substr(name.length - 2, 2);
            }
        }
        if (/^[a-zA-Z\/ ]+$/.test(name)) {
            if (name.indexOf(' ') > 0) {
                const ens = name.split(' ');
                return (ens[0].substr(0, 1) + ens[1].substr(0, 1)).toUpperCase();
            }
        }
        if (name.length > 2) {
            return name.substr(0, 2).toUpperCase();
        }
        return name.toUpperCase();
    }
}
AvatarShortNamePipe.ɵfac = function AvatarShortNamePipe_Factory(t) { return new (t || AvatarShortNamePipe)(); };
AvatarShortNamePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "avatarShortName", type: AvatarShortNamePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvatarShortNamePipe, [{
        type: Pipe,
        args: [{ name: 'avatarShortName' }]
    }], null, null); })();
export class AvatarBgColorPipe {
    transform(name) {
        if (!name) {
            return;
        }
        const colors = [
            '#56abfb',
            '#5dcfff',
            '#84e17e',
            '#73d897',
            '#ff9f73',
            '#fa8888',
            '#fb7fb7',
            '#9a7ef4',
            '#868af6'
        ];
        const nameArray = name.split('');
        const code = name && name.length > 0
            ? nameArray.reduce(function (result, item) {
                result.value += item.charCodeAt(0);
                return result;
            }, { value: 0 }).value
            : 0;
        return {
            'background-color': colors[code % 9]
        };
    }
}
AvatarBgColorPipe.ɵfac = function AvatarBgColorPipe_Factory(t) { return new (t || AvatarBgColorPipe)(); };
AvatarBgColorPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "avatarBgColor", type: AvatarBgColorPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvatarBgColorPipe, [{
        type: Pipe,
        args: [{ name: 'avatarBgColor' }]
    }], null, null); })();
export class AvatarSrcPipe {
    constructor(thyAvatarService) {
        this.thyAvatarService = thyAvatarService;
    }
    transform(src, size) {
        return this.thyAvatarService.avatarSrcTransform(src, size);
    }
}
AvatarSrcPipe.ɵfac = function AvatarSrcPipe_Factory(t) { return new (t || AvatarSrcPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyAvatarService)); };
AvatarSrcPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "thyAvatarSrc", type: AvatarSrcPipe, pure: true });
AvatarSrcPipe.ctorParameters = () => [
    { type: ThyAvatarService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvatarSrcPipe, [{
        type: Pipe,
        args: [{ name: 'thyAvatarSrc' }]
    }], function () { return [{ type: ɵngcc1.ThyAvatarService }]; }, null); })();
export const AvatarPipes = [AvatarShortNamePipe, AvatarBgColorPipe, AvatarSrcPipe];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLnBpcGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hdmF0YXIvYXZhdGFyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUdwRCxNQUFNLE9BQU8sbUJBQW1CO0FBQUcsSUFDL0IsU0FBUyxDQUFDLElBQVk7QUFBSSxRQUN0QixJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ25CLFlBQVksT0FBTztBQUNuQixTQUFTO0FBQ1QsUUFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzNCLFFBQVEsSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDN0MsWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ2pDLGdCQUFnQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkQsYUFBYTtBQUNiLFNBQVM7QUFDVCxRQUFRLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3pDLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN2QyxnQkFBZ0IsTUFBTSxHQUFHLEdBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0RCxnQkFBZ0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDakYsYUFBYTtBQUNiLFNBQVM7QUFDVCxRQUFRLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDN0IsWUFBWSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ25ELFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2xDLElBQUksQ0FBQztBQUNMOytDQXZCQyxJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7Ozs7OzBCQUM1QjtBQXlCTCxNQUFNLE9BQU8saUJBQWlCO0FBQUcsSUFDN0IsU0FBUyxDQUFDLElBQVk7QUFDMUIsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ25CLFlBQVksT0FBTztBQUNuQixTQUFTO0FBQ1QsUUFBUSxNQUFNLE1BQU0sR0FBRztBQUN2QixZQUFZLFNBQVM7QUFDckIsWUFBWSxTQUFTO0FBQ3JCLFlBQVksU0FBUztBQUNyQixZQUFZLFNBQVM7QUFDckIsWUFBWSxTQUFTO0FBQ3JCLFlBQVksU0FBUztBQUNyQixZQUFZLFNBQVM7QUFDckIsWUFBWSxTQUFTO0FBQ3JCLFlBQVksU0FBUztBQUNyQixTQUFTLENBQUM7QUFDVixRQUFRLE1BQU0sU0FBUyxHQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkQsUUFBUSxNQUFNLElBQUksR0FDTixJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO0FBQ25DLFlBQWdCLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUNaLFVBQVMsTUFBTSxFQUFFLElBQUk7QUFDM0MsZ0JBQTBCLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3RCxnQkFBMEIsT0FBTyxNQUFNLENBQUM7QUFDeEMsWUFBc0IsQ0FBQyxFQUNELEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUNmLENBQUMsS0FBSztBQUN6QixZQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLFFBQVEsT0FBTztBQUNmLFlBQVksa0JBQWtCLEVBQUUsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7QUFDaEQsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0w7NkNBaENDLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7Ozs7OzBCQUMxQjtBQWtDTCxNQUFNLE9BQU8sYUFBYTtBQUFHLElBQ3pCLFlBQW9CLGdCQUFrQztBQUFJLFFBQXRDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxJQUFFLENBQUM7QUFDOUQsSUFBSSxTQUFTLENBQUMsR0FBVyxFQUFFLElBQVk7QUFDdkMsUUFBUSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkUsSUFBSSxDQUFDO0FBQ0w7eUNBTkMsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtxR0FDekI7QUFBQztBQUF1QyxZQTlEcEMsZ0JBQWdCO0FBQUc7Ozs7aUZBQUU7QUFxRTlCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLG1CQUFtQixFQUFFLGlCQUFpQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ25GIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5QXZhdGFyU2VydmljZSB9IGZyb20gJy4vYXZhdGFyLnNlcnZpY2UnO1xuXG5AUGlwZSh7IG5hbWU6ICdhdmF0YXJTaG9ydE5hbWUnIH0pXG5leHBvcnQgY2xhc3MgQXZhdGFyU2hvcnROYW1lUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHRyYW5zZm9ybShuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBuYW1lID0gbmFtZS50cmltKCk7XG4gICAgICAgIGlmICgvXltcXHU0ZTAwLVxcdTlmYTVdKyQvLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIGlmIChuYW1lLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZS5zdWJzdHIobmFtZS5sZW5ndGggLSAyLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoL15bYS16QS1aXFwvIF0rJC8udGVzdChuYW1lKSkge1xuICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignICcpID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuczogc3RyaW5nW10gPSBuYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChlbnNbMF0uc3Vic3RyKDAsIDEpICsgZW5zWzFdLnN1YnN0cigwLCAxKSkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmFtZS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZS5zdWJzdHIoMCwgMikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbn1cblxuQFBpcGUoeyBuYW1lOiAnYXZhdGFyQmdDb2xvcicgfSlcbmV4cG9ydCBjbGFzcyBBdmF0YXJCZ0NvbG9yUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHRyYW5zZm9ybShuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sb3JzID0gW1xuICAgICAgICAgICAgJyM1NmFiZmInLFxuICAgICAgICAgICAgJyM1ZGNmZmYnLFxuICAgICAgICAgICAgJyM4NGUxN2UnLFxuICAgICAgICAgICAgJyM3M2Q4OTcnLFxuICAgICAgICAgICAgJyNmZjlmNzMnLFxuICAgICAgICAgICAgJyNmYTg4ODgnLFxuICAgICAgICAgICAgJyNmYjdmYjcnLFxuICAgICAgICAgICAgJyM5YTdlZjQnLFxuICAgICAgICAgICAgJyM4NjhhZjYnXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IG5hbWVBcnJheTogc3RyaW5nW10gPSBuYW1lLnNwbGl0KCcnKTtcbiAgICAgICAgY29uc3QgY29kZTogbnVtYmVyID1cbiAgICAgICAgICAgIG5hbWUgJiYgbmFtZS5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyBuYW1lQXJyYXkucmVkdWNlKFxuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHJlc3VsdCwgaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudmFsdWUgKz0gaXRlbS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgeyB2YWx1ZTogMCB9XG4gICAgICAgICAgICAgICAgICApLnZhbHVlXG4gICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBjb2xvcnNbY29kZSAlIDldXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5AUGlwZSh7IG5hbWU6ICd0aHlBdmF0YXJTcmMnIH0pXG5leHBvcnQgY2xhc3MgQXZhdGFyU3JjUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGh5QXZhdGFyU2VydmljZTogVGh5QXZhdGFyU2VydmljZSkge31cbiAgICB0cmFuc2Zvcm0oc3JjOiBzdHJpbmcsIHNpemU6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy50aHlBdmF0YXJTZXJ2aWNlLmF2YXRhclNyY1RyYW5zZm9ybShzcmMsIHNpemUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IEF2YXRhclBpcGVzID0gW0F2YXRhclNob3J0TmFtZVBpcGUsIEF2YXRhckJnQ29sb3JQaXBlLCBBdmF0YXJTcmNQaXBlXTtcbiJdfQ==
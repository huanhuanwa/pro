import { Directive, Input, ElementRef, Optional, Host, Renderer2 } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyRowDirective } from './thy-row.directive';
import { takeUntil } from 'rxjs/operators';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
import * as ɵngcc2 from './thy-row.directive';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyColDirective extends _MixinBase {
    constructor(elementRef, renderer, updateHostClassService, thyRowDirective) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.updateHostClassService = updateHostClassService;
        this.thyRowDirective = thyRowDirective;
        this.thyFlex = null;
        this.thySpan = 24;
        this.thyOrder = null;
        this.thyOffset = null;
        this.thyPush = null;
        this.thyPull = null;
        this.thyXs = null;
        this.thySm = null;
        this.thyMd = null;
        this.thyLg = null;
        this.thyXl = null;
        this.thyXXl = null;
        this.updateHostClassService.initializeElement(this.elementRef);
    }
    ngOnInit() {
        this._setHostClassMap();
    }
    ngOnChanges(changes) {
        this._setHostClassMap();
    }
    ngAfterViewInit() {
        if (this.thyRowDirective) {
            this.thyRowDirective.actualGutter$.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(([horizontalGutter, verticalGutter]) => {
                const renderGutter = (name, gutter) => {
                    const nativeElement = this.elementRef.nativeElement;
                    this.renderer.setStyle(nativeElement, name, `${gutter / 2}px`);
                };
                if (horizontalGutter > 0) {
                    renderGutter('padding-left', horizontalGutter);
                    renderGutter('padding-right', horizontalGutter);
                }
                if (verticalGutter > 0) {
                    renderGutter('padding-top', verticalGutter);
                    renderGutter('padding-bottom', verticalGutter);
                }
            });
        }
    }
    _setHostClassMap() {
        this.updateHostClassService.updateClassByMap({
            [`thy-col-${this.thySpan}`]: true
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyColDirective.ɵfac = function ThyColDirective_Factory(t) { return new (t || ThyColDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyRowDirective, 9)); };
ThyColDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyColDirective, selectors: [["", "thyCol", ""]], hostAttrs: [1, "thy-col"], inputs: { thyFlex: "thyFlex", thySpan: "thySpan", thyOrder: "thyOrder", thyOffset: "thyOffset", thyPush: "thyPush", thyPull: "thyPull", thyXs: "thyXs", thySm: "thySm", thyMd: "thyMd", thyLg: "thyLg", thyXl: "thyXl", thyXXl: "thyXXl" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
ThyColDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: UpdateHostClassService },
    { type: ThyRowDirective, decorators: [{ type: Optional }, { type: Host }] }
];
ThyColDirective.propDecorators = {
    thyFlex: [{ type: Input }],
    thySpan: [{ type: Input }],
    thyOrder: [{ type: Input }],
    thyOffset: [{ type: Input }],
    thyPush: [{ type: Input }],
    thyPull: [{ type: Input }],
    thyXs: [{ type: Input }],
    thySm: [{ type: Input }],
    thyMd: [{ type: Input }],
    thyLg: [{ type: Input }],
    thyXl: [{ type: Input }],
    thyXXl: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyColDirective, [{
        type: Directive,
        args: [{
                selector: '[thyCol]',
                providers: [UpdateHostClassService],
                host: {
                    class: 'thy-col'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc2.ThyRowDirective, decorators: [{
                type: Optional
            }, {
                type: Host
            }] }]; }, { thyFlex: [{
            type: Input
        }], thySpan: [{
            type: Input
        }], thyOrder: [{
            type: Input
        }], thyOffset: [{
            type: Input
        }], thyPush: [{
            type: Input
        }], thyPull: [{
            type: Input
        }], thyXs: [{
            type: Input
        }], thySm: [{
            type: Input
        }], thyMd: [{
            type: Input
        }], thyLg: [{
            type: Input
        }], thyXl: [{
            type: Input
        }], thyXXl: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
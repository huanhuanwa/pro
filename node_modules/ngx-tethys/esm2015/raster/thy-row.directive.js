import { Directive, Input, Renderer2, ElementRef } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { isString } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyRowDirective extends _MixinBase {
    constructor(renderer, elementRef) {
        super();
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.thyAlign = null;
        this.thyJustify = null;
        this.actualGutter$ = new ReplaySubject(1);
    }
    ngOnInit() {
        this._setGutterStyle();
    }
    ngOnChanges() {
        this._setGutterStyle();
    }
    ngAfterViewInit() { }
    _setGutterStyle() {
        const [horizontalGutter, verticalGutter] = this._getGutter();
        this.actualGutter$.next([horizontalGutter, verticalGutter]);
        const renderGutter = (name, gutter) => {
            const nativeElement = this.elementRef.nativeElement;
            this.renderer.setStyle(nativeElement, name, `-${gutter / 2}px`);
        };
        if (horizontalGutter > 0) {
            renderGutter('margin-left', horizontalGutter);
            renderGutter('margin-right', horizontalGutter);
        }
        if (verticalGutter > 0) {
            renderGutter('margin-top', verticalGutter);
            renderGutter('margin-bottom', verticalGutter);
        }
    }
    _getGutter() {
        if (isString(this.thyGutter)) {
            throw Error(`thyGutter value can not be string type`);
        }
        return [this.thyGutter, 0];
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyRowDirective.ɵfac = function ThyRowDirective_Factory(t) { return new (t || ThyRowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyRowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyRowDirective, selectors: [["", "thyRow", ""]], hostAttrs: [1, "thy-row"], inputs: { thyAlign: "thyAlign", thyJustify: "thyJustify", thyGutter: "thyGutter" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
ThyRowDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ThyRowDirective.propDecorators = {
    thyGutter: [{ type: Input }],
    thyAlign: [{ type: Input }],
    thyJustify: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyRowDirective, [{
        type: Directive,
        args: [{
                selector: '[thyRow]',
                host: {
                    class: 'thy-row'
                }
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { thyAlign: [{
            type: Input
        }], thyJustify: [{
            type: Input
        }], thyGutter: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LXJvdy5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yYXN0ZXIvdGh5LXJvdy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBZSxLQUFLLEVBQUUsU0FBUyxFQUErQyxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEksT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUErQixNQUFNLGlCQUFpQixDQUFDO0FBQzNGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFLM0MsTUFBTSxVQUFVLEdBQW1ELGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBTy9GLE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7QUFBRyxJQU05QyxZQUFvQixRQUFtQixFQUFVLFVBQXNCO0FBQzNFLFFBQVEsS0FBSyxFQUFFLENBQUM7QUFDaEIsUUFGd0IsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBSi9ELGFBQVEsR0FBdUIsSUFBSSxDQUFDO0FBQ2pELFFBQWEsZUFBVSxHQUF5QixJQUFJLENBQUM7QUFDckQsUUFBVyxrQkFBYSxHQUFHLElBQUksYUFBYSxDQUFtQixDQUFDLENBQUMsQ0FBQztBQUNsRSxJQUdJLENBQUM7QUFDTCxJQUNJLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUMvQixJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFDZixRQUFRLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUMvQixJQUFJLENBQUM7QUFDTCxJQUNJLGVBQWUsS0FBVSxDQUFDO0FBQzlCLElBQ1ksZUFBZTtBQUMzQixRQUFRLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDckUsUUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFDcEUsUUFBUSxNQUFNLFlBQVksR0FBRyxDQUFDLElBQVksRUFBRSxNQUFjLEVBQUUsRUFBRTtBQUM5RCxZQUFZLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO0FBQ2hFLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVFLFFBQVEsQ0FBQyxDQUFDO0FBQ1YsUUFBUSxJQUFJLGdCQUFnQixHQUFHLENBQUMsRUFBRTtBQUNsQyxZQUFZLFlBQVksQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUMxRCxZQUFZLFlBQVksQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUMzRCxTQUFTO0FBQ1QsUUFBUSxJQUFJLGNBQWMsR0FBRyxDQUFDLEVBQUU7QUFDaEMsWUFBWSxZQUFZLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3ZELFlBQVksWUFBWSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUMxRCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDWSxVQUFVO0FBQ3RCLFFBQVEsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ3RDLFlBQVksTUFBTSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztBQUNsRSxTQUFTO0FBQ1QsUUFBUSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDN0MsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQUssUUFDWixLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDNUIsSUFBSSxDQUFDO0FBQ0w7MkNBckRDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsVUFBVSxrQkFDcEIsSUFBSSxFQUFFLHNCQUNGLEtBQUssRUFBRSxTQUFTLGtCQUNuQjtLQUNKLGtTQUNJO0FBQUM7QUFBeUMsWUFmUCxTQUFTO0FBQUksWUFBMkMsVUFBVTtBQUFHO0FBQUc7QUFDaEcsd0JBZVgsS0FBSztBQUFLLHVCQUNWLEtBQUs7QUFBSyx5QkFDVixLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXQsIFJlbmRlcmVyMiwgT25DaGFuZ2VzLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWl4aW5VbnN1YnNjcmliZSwgTWl4aW5CYXNlLCBDb25zdHJ1Y3RvciwgVGh5VW5zdWJzY3JpYmUgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuXG5leHBvcnQgdHlwZSBUaHlSb3dKdXN0aWZ5ID0gJ3N0YXJ0JyB8ICdlbmQnIHwgJ2NlbnRlcicgfCAnc3BhY2UtYXJvdW5kJyB8ICdzcGFjZS1iZXR3ZWVuJztcbmV4cG9ydCB0eXBlIFRoeVJvd0FsaWduID0gJ3RvcCcgfCAnbWlkZGxlJyB8ICdib3R0b20nO1xuXG5jb25zdCBfTWl4aW5CYXNlOiBDb25zdHJ1Y3RvcjxUaHlVbnN1YnNjcmliZT4gJiB0eXBlb2YgTWl4aW5CYXNlID0gbWl4aW5VbnN1YnNjcmliZShNaXhpbkJhc2UpO1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdGh5Um93XScsXG4gICAgaG9zdDoge1xuICAgICAgICBjbGFzczogJ3RoeS1yb3cnXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBUaHlSb3dEaXJlY3RpdmUgZXh0ZW5kcyBfTWl4aW5CYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgQElucHV0KCkgdGh5R3V0dGVyOiBudW1iZXIgfCB7IHhzPzogbnVtYmVyOyBzbT86IG51bWJlcjsgbWQ/OiBudW1iZXI7IGxnPzogbnVtYmVyOyB4bD86IG51bWJlcjsgeHhsPzogbnVtYmVyIH07XG4gICAgQElucHV0KCkgdGh5QWxpZ246IFRoeVJvd0FsaWduIHwgbnVsbCA9IG51bGw7XG4gICAgQElucHV0KCkgdGh5SnVzdGlmeTogVGh5Um93SnVzdGlmeSB8IG51bGwgPSBudWxsO1xuICAgIHB1YmxpYyBhY3R1YWxHdXR0ZXIkID0gbmV3IFJlcGxheVN1YmplY3Q8W251bWJlciwgbnVtYmVyXT4oMSk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLl9zZXRHdXR0ZXJTdHlsZSgpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLl9zZXRHdXR0ZXJTdHlsZSgpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHt9XG5cbiAgICBwcml2YXRlIF9zZXRHdXR0ZXJTdHlsZSgpIHtcbiAgICAgICAgY29uc3QgW2hvcml6b250YWxHdXR0ZXIsIHZlcnRpY2FsR3V0dGVyXSA9IHRoaXMuX2dldEd1dHRlcigpO1xuICAgICAgICB0aGlzLmFjdHVhbEd1dHRlciQubmV4dChbaG9yaXpvbnRhbEd1dHRlciwgdmVydGljYWxHdXR0ZXJdKTtcbiAgICAgICAgY29uc3QgcmVuZGVyR3V0dGVyID0gKG5hbWU6IHN0cmluZywgZ3V0dGVyOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUobmF0aXZlRWxlbWVudCwgbmFtZSwgYC0ke2d1dHRlciAvIDJ9cHhgKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGhvcml6b250YWxHdXR0ZXIgPiAwKSB7XG4gICAgICAgICAgICByZW5kZXJHdXR0ZXIoJ21hcmdpbi1sZWZ0JywgaG9yaXpvbnRhbEd1dHRlcik7XG4gICAgICAgICAgICByZW5kZXJHdXR0ZXIoJ21hcmdpbi1yaWdodCcsIGhvcml6b250YWxHdXR0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2ZXJ0aWNhbEd1dHRlciA+IDApIHtcbiAgICAgICAgICAgIHJlbmRlckd1dHRlcignbWFyZ2luLXRvcCcsIHZlcnRpY2FsR3V0dGVyKTtcbiAgICAgICAgICAgIHJlbmRlckd1dHRlcignbWFyZ2luLWJvdHRvbScsIHZlcnRpY2FsR3V0dGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2dldEd1dHRlcigpIHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHRoaXMudGh5R3V0dGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYHRoeUd1dHRlciB2YWx1ZSBjYW4gbm90IGJlIHN0cmluZyB0eXBlYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0aGlzLnRoeUd1dHRlciBhcyBudW1iZXIsIDBdO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICAgIH1cbn1cbiJdfQ==
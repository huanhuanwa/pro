import { Directive, Input, ElementRef, Optional, Host, Renderer2 } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { ThyRowDirective } from './thy-row.directive';
import { takeUntil } from 'rxjs/operators';
import { mixinUnsubscribe, MixinBase } from 'ngx-tethys/core';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyColDirective extends _MixinBase {
    constructor(elementRef, renderer, updateHostClassService, thyRowDirective) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.updateHostClassService = updateHostClassService;
        this.thyRowDirective = thyRowDirective;
        this.thyFlex = null;
        this.thySpan = 24;
        this.thyOrder = null;
        this.thyOffset = null;
        this.thyPush = null;
        this.thyPull = null;
        this.thyXs = null;
        this.thySm = null;
        this.thyMd = null;
        this.thyLg = null;
        this.thyXl = null;
        this.thyXXl = null;
        this.updateHostClassService.initializeElement(this.elementRef);
    }
    ngOnInit() {
        this._setHostClassMap();
    }
    ngOnChanges(changes) {
        this._setHostClassMap();
    }
    ngAfterViewInit() {
        if (this.thyRowDirective) {
            this.thyRowDirective.actualGutter$.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(([horizontalGutter, verticalGutter]) => {
                const renderGutter = (name, gutter) => {
                    const nativeElement = this.elementRef.nativeElement;
                    this.renderer.setStyle(nativeElement, name, `${gutter / 2}px`);
                };
                if (horizontalGutter > 0) {
                    renderGutter('padding-left', horizontalGutter);
                    renderGutter('padding-right', horizontalGutter);
                }
                if (verticalGutter > 0) {
                    renderGutter('padding-top', verticalGutter);
                    renderGutter('padding-bottom', verticalGutter);
                }
            });
        }
    }
    _setHostClassMap() {
        this.updateHostClassService.updateClassByMap({
            [`thy-col-${this.thySpan}`]: true
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyColDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyCol]',
                providers: [UpdateHostClassService],
                host: {
                    class: 'thy-col'
                }
            },] }
];
ThyColDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: UpdateHostClassService },
    { type: ThyRowDirective, decorators: [{ type: Optional }, { type: Host }] }
];
ThyColDirective.propDecorators = {
    thyFlex: [{ type: Input }],
    thySpan: [{ type: Input }],
    thyOrder: [{ type: Input }],
    thyOffset: [{ type: Input }],
    thyPush: [{ type: Input }],
    thyPull: [{ type: Input }],
    thyXs: [{ type: Input }],
    thySm: [{ type: Input }],
    thyMd: [{ type: Input }],
    thyLg: [{ type: Input }],
    thyXl: [{ type: Input }],
    thyXXl: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh5LWNvbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmFzdGVyL3RoeS1jb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBRVQsS0FBSyxFQUVMLFVBQVUsRUFDVixRQUFRLEVBQ1IsSUFBSSxFQUlKLFNBQVMsRUFFWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQStCLE1BQU0saUJBQWlCLENBQUM7QUFVM0YsTUFBTSxVQUFVLEdBQW1ELGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBUy9GLE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7SUFjM0MsWUFDWSxVQUFzQixFQUN0QixRQUFtQixFQUNuQixzQkFBOEMsRUFDM0IsZUFBZ0M7UUFFM0QsS0FBSyxFQUFFLENBQUM7UUFMQSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUMzQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFqQnRELFlBQU8sR0FBMkIsSUFBSSxDQUFDO1FBQ3ZDLFlBQU8sR0FBa0IsRUFBRSxDQUFDO1FBQzVCLGFBQVEsR0FBa0IsSUFBSSxDQUFDO1FBQy9CLGNBQVMsR0FBa0IsSUFBSSxDQUFDO1FBQ2hDLFlBQU8sR0FBa0IsSUFBSSxDQUFDO1FBQzlCLFlBQU8sR0FBa0IsSUFBSSxDQUFDO1FBQzlCLFVBQUssR0FBMkMsSUFBSSxDQUFDO1FBQ3JELFVBQUssR0FBMkMsSUFBSSxDQUFDO1FBQ3JELFVBQUssR0FBMkMsSUFBSSxDQUFDO1FBQ3JELFVBQUssR0FBMkMsSUFBSSxDQUFDO1FBQ3JELFVBQUssR0FBMkMsSUFBSSxDQUFDO1FBQ3JELFdBQU0sR0FBMkMsSUFBSSxDQUFDO1FBUzNELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQThDO1FBQ3RELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxlQUFlO1FBQ1gsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFO2dCQUNySCxNQUFNLFlBQVksR0FBRyxDQUFDLElBQVksRUFBRSxNQUFjLEVBQUUsRUFBRTtvQkFDbEQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7b0JBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkUsQ0FBQyxDQUFDO2dCQUNGLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFO29CQUN0QixZQUFZLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLENBQUM7b0JBQy9DLFlBQVksQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztpQkFDbkQ7Z0JBQ0QsSUFBSSxjQUFjLEdBQUcsQ0FBQyxFQUFFO29CQUNwQixZQUFZLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDO29CQUM1QyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7aUJBQ2xEO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFFTyxnQkFBZ0I7UUFDcEIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDO1lBQ3pDLENBQUMsV0FBVyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJO1NBQ3BDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxXQUFXO1FBQ1AsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7OztZQWxFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO2dCQUNuQyxJQUFJLEVBQUU7b0JBQ0YsS0FBSyxFQUFFLFNBQVM7aUJBQ25CO2FBQ0o7OztZQTlCRyxVQUFVO1lBTVYsU0FBUztZQUdKLHNCQUFzQjtZQUN0QixlQUFlLHVCQXVDZixRQUFRLFlBQUksSUFBSTs7O3NCQWpCcEIsS0FBSztzQkFDTCxLQUFLO3VCQUNMLEtBQUs7d0JBQ0wsS0FBSztzQkFDTCxLQUFLO3NCQUNMLEtBQUs7b0JBQ0wsS0FBSztvQkFDTCxLQUFLO29CQUNMLEtBQUs7b0JBQ0wsS0FBSztvQkFDTCxLQUFLO3FCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbnB1dCxcbiAgICBPbkNoYW5nZXMsXG4gICAgRWxlbWVudFJlZixcbiAgICBPcHRpb25hbCxcbiAgICBIb3N0LFxuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgUmVuZGVyZXIyLFxuICAgIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuaW1wb3J0IHsgVGh5Um93RGlyZWN0aXZlIH0gZnJvbSAnLi90aHktcm93LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBtaXhpblVuc3Vic2NyaWJlLCBNaXhpbkJhc2UsIENvbnN0cnVjdG9yLCBUaHlVbnN1YnNjcmliZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGh5Q29sRW1iZWRkZWRQcm9wZXJ0eSB7XG4gICAgc3Bhbj86IG51bWJlcjtcbiAgICBwdWxsPzogbnVtYmVyO1xuICAgIHB1c2g/OiBudW1iZXI7XG4gICAgb2Zmc2V0PzogbnVtYmVyO1xuICAgIG9yZGVyPzogbnVtYmVyO1xufVxuXG5jb25zdCBfTWl4aW5CYXNlOiBDb25zdHJ1Y3RvcjxUaHlVbnN1YnNjcmliZT4gJiB0eXBlb2YgTWl4aW5CYXNlID0gbWl4aW5VbnN1YnNjcmliZShNaXhpbkJhc2UpO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0aHlDb2xdJyxcbiAgICBwcm92aWRlcnM6IFtVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlXSxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAndGh5LWNvbCdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIFRoeUNvbERpcmVjdGl2ZSBleHRlbmRzIF9NaXhpbkJhc2UgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKSB0aHlGbGV4OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgICBASW5wdXQoKSB0aHlTcGFuOiBudW1iZXIgfCBudWxsID0gMjQ7XG4gICAgQElucHV0KCkgdGh5T3JkZXI6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICAgIEBJbnB1dCgpIHRoeU9mZnNldDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgQElucHV0KCkgdGh5UHVzaDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgQElucHV0KCkgdGh5UHVsbDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgQElucHV0KCkgdGh5WHM6IG51bWJlciB8IFRoeUNvbEVtYmVkZGVkUHJvcGVydHkgfCBudWxsID0gbnVsbDtcbiAgICBASW5wdXQoKSB0aHlTbTogbnVtYmVyIHwgVGh5Q29sRW1iZWRkZWRQcm9wZXJ0eSB8IG51bGwgPSBudWxsO1xuICAgIEBJbnB1dCgpIHRoeU1kOiBudW1iZXIgfCBUaHlDb2xFbWJlZGRlZFByb3BlcnR5IHwgbnVsbCA9IG51bGw7XG4gICAgQElucHV0KCkgdGh5TGc6IG51bWJlciB8IFRoeUNvbEVtYmVkZGVkUHJvcGVydHkgfCBudWxsID0gbnVsbDtcbiAgICBASW5wdXQoKSB0aHlYbDogbnVtYmVyIHwgVGh5Q29sRW1iZWRkZWRQcm9wZXJ0eSB8IG51bGwgPSBudWxsO1xuICAgIEBJbnB1dCgpIHRoeVhYbDogbnVtYmVyIHwgVGh5Q29sRW1iZWRkZWRQcm9wZXJ0eSB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICBwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgcHVibGljIHRoeVJvd0RpcmVjdGl2ZTogVGh5Um93RGlyZWN0aXZlXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS5pbml0aWFsaXplRWxlbWVudCh0aGlzLmVsZW1lbnRSZWYpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLl9zZXRIb3N0Q2xhc3NNYXAoKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBpbXBvcnQoJ0Bhbmd1bGFyL2NvcmUnKS5TaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3NldEhvc3RDbGFzc01hcCgpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudGh5Um93RGlyZWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnRoeVJvd0RpcmVjdGl2ZS5hY3R1YWxHdXR0ZXIkLnBpcGUodGFrZVVudGlsKHRoaXMubmdVbnN1YnNjcmliZSQpKS5zdWJzY3JpYmUoKFtob3Jpem9udGFsR3V0dGVyLCB2ZXJ0aWNhbEd1dHRlcl0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJHdXR0ZXIgPSAobmFtZTogc3RyaW5nLCBndXR0ZXI6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUobmF0aXZlRWxlbWVudCwgbmFtZSwgYCR7Z3V0dGVyIC8gMn1weGApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGhvcml6b250YWxHdXR0ZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckd1dHRlcigncGFkZGluZy1sZWZ0JywgaG9yaXpvbnRhbEd1dHRlcik7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckd1dHRlcigncGFkZGluZy1yaWdodCcsIGhvcml6b250YWxHdXR0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWxHdXR0ZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckd1dHRlcigncGFkZGluZy10b3AnLCB2ZXJ0aWNhbEd1dHRlcik7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckd1dHRlcigncGFkZGluZy1ib3R0b20nLCB2ZXJ0aWNhbEd1dHRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9zZXRIb3N0Q2xhc3NNYXAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSG9zdENsYXNzU2VydmljZS51cGRhdGVDbGFzc0J5TWFwKHtcbiAgICAgICAgICAgIFtgdGh5LWNvbC0ke3RoaXMudGh5U3Bhbn1gXTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIubmdPbkRlc3Ryb3koKTtcbiAgICB9XG59XG4iXX0=
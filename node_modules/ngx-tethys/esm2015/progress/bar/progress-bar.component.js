import { Component, Input, HostBinding, ElementRef, ViewEncapsulation, InjectionToken, Inject } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';

const _c0 = ["*"];
export const THY_PROGRESS_COMPONENT = new InjectionToken('THY_PROGRESS_COMPONENT');
export class ThyProgressBarComponent {
    constructor(updateHostClassService, elementRef, progress) {
        this.updateHostClassService = updateHostClassService;
        this.progress = progress;
        this.isProgressBar = true;
        this.percent = 0;
        this.color = '';
        updateHostClassService.initializeElement(elementRef.nativeElement);
    }
    set thyType(type) {
        // this.type = type;
        this.updateHostClassService.updateClass(type ? [`progress-bar-${type}`, `bg-${type}`] : []);
    }
    set thyValue(value) {
        if (!value && value !== 0) {
            return;
        }
        this.value = value;
        this.recalculatePercentage();
    }
    set thyColor(color) {
        this.color = color || '';
    }
    recalculatePercentage() {
        this.percent = +((this.value / this.progress.max) * 100).toFixed(2);
        // if (this.progress && this.progress.bars) {
        //     const totalPercentage = this.progress.bars.reduce(function(total: number, bar): number {
        //         return total + bar.percent;
        //     }, 0);
        //     if (totalPercentage > 100) {
        //         this.percent -= totalPercentage - 100;
        //     }
        // }
    }
}
ThyProgressBarComponent.ɵfac = function ThyProgressBarComponent_Factory(t) { return new (t || ThyProgressBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_PROGRESS_COMPONENT)); };
ThyProgressBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyProgressBarComponent, selectors: [["thy-progress-bar"]], hostVars: 6, hostBindings: function ThyProgressBarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.percent, "%")("background-color", ctx.color);
        ɵngcc0.ɵɵclassProp("progress-bar", ctx.isProgressBar);
    } }, inputs: { thyType: "thyType", thyValue: "thyValue", thyColor: "thyColor", thyTips: "thyTips" }, features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ThyProgressBarComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [THY_PROGRESS_COMPONENT,] }] }
];
ThyProgressBarComponent.propDecorators = {
    isProgressBar: [{ type: HostBinding, args: [`class.progress-bar`,] }],
    percent: [{ type: HostBinding, args: ['style.width.%',] }],
    color: [{ type: HostBinding, args: ['style.background-color',] }],
    thyTips: [{ type: Input }],
    thyType: [{ type: Input }],
    thyValue: [{ type: Input }],
    thyColor: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyProgressBarComponent, [{
        type: Component,
        args: [{
                selector: 'thy-progress-bar',
                template: "<ng-content></ng-content>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [THY_PROGRESS_COMPONENT]
            }] }]; }, { isProgressBar: [{
            type: HostBinding,
            args: [`class.progress-bar`]
        }], percent: [{
            type: HostBinding,
            args: ['style.width.%']
        }], color: [{
            type: HostBinding,
            args: ['style.background-color']
        }], thyType: [{
            type: Input
        }], thyValue: [{
            type: Input
        }], thyColor: [{
            type: Input
        }], thyTips: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb2dyZXNzL2Jhci9wcm9ncmVzcy1iYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFFeEksT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBTXpELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLElBQUksY0FBYyxDQUFvQix3QkFBd0IsQ0FBQyxDQUFDO0FBUXRHLE1BQU0sT0FBTyx1QkFBdUI7QUFDcEMsSUE2QkksWUFDWSxzQkFBOEMsRUFDdEQsVUFBc0IsRUFDa0IsUUFBMkI7QUFDeEUsUUFIYSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO0FBQUMsUUFFZixhQUFRLEdBQVIsUUFBUSxDQUFtQjtBQUMzRSxRQTdCdUMsa0JBQWEsR0FBRyxJQUFJLENBQUM7QUFDNUQsUUFDa0MsWUFBTyxHQUFHLENBQUMsQ0FBQztBQUM5QyxRQUMyQyxVQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ3RELFFBeUJRLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMzRSxJQUFJLENBQUM7QUFDTCxJQXhCSSxJQUFhLE9BQU8sQ0FBQyxJQUFzQjtBQUMvQyxRQUFRLG9CQUFvQjtBQUM1QixRQUFRLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixJQUFJLEVBQUUsRUFBRSxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BHLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBYSxRQUFRLENBQUMsS0FBYTtBQUN2QyxRQUFRLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtBQUNuQyxZQUFZLE9BQU87QUFDbkIsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDM0IsUUFBUSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUNyQyxJQUFJLENBQUM7QUFDTCxJQUNJLElBQWEsUUFBUSxDQUFDLEtBQWE7QUFDdkMsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFDakMsSUFBSSxDQUFDO0FBQ0wsSUFTSSxxQkFBcUI7QUFBSyxRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUUsUUFDUSw2Q0FBNkM7QUFDckQsUUFBUSwrRkFBK0Y7QUFDdkcsUUFBUSxzQ0FBc0M7QUFDOUMsUUFBUSxhQUFhO0FBQ3JCLFFBQ1EsbUNBQW1DO0FBQzNDLFFBQVEsaURBQWlEO0FBQ3pELFFBQVEsUUFBUTtBQUNoQixRQUFRLElBQUk7QUFDWixJQUFJLENBQUM7QUFDTDttREF6REMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxrQkFBa0Isa0JBQzVCLHVDQUE0QyxrQkFDNUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksa0JBQ3JDLFNBQVMsRUFBRSxDQUFDO0lBQXNCLENBQUMsY0FDdEM7Ozs7Ozs2QkFDSTtBQUFDO0FBQ1UsWUFmUCxzQkFBc0I7QUFBSSxZQUZLLFVBQVU7QUFBSSw0Q0FpRDdDLE1BQU0sU0FBQyxzQkFBc0I7QUFBUTtBQUFHO0FBRXpDLDRCQTlCSCxXQUFXLFNBQUMsb0JBQW9CO0FBQU8sc0JBRXZDLFdBQVcsU0FBQyxlQUFlO0FBQU8sb0JBRWxDLFdBQVcsU0FBQyx3QkFBd0I7QUFBTyxzQkFFM0MsS0FBSztBQUFLLHNCQUVWLEtBQUs7QUFBSyx1QkFLVixLQUFLO0FBQUssdUJBUVYsS0FBSztBQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0LCBIb3N0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5UHJvZ3Jlc3NUeXBlcyB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgVXBkYXRlSG9zdENsYXNzU2VydmljZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGh5UGFyZW50UHJvZ3Jlc3Mge1xuICAgIG1heDogbnVtYmVyO1xuICAgIGJhcnM6IFRoeVByb2dyZXNzQmFyQ29tcG9uZW50W107XG59XG5leHBvcnQgY29uc3QgVEhZX1BST0dSRVNTX0NPTVBPTkVOVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUaHlQYXJlbnRQcm9ncmVzcz4oJ1RIWV9QUk9HUkVTU19DT01QT05FTlQnKTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktcHJvZ3Jlc3MtYmFyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIHByb3ZpZGVyczogW1VwZGF0ZUhvc3RDbGFzc1NlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIFRoeVByb2dyZXNzQmFyQ29tcG9uZW50IHtcbiAgICAvLyBwcml2YXRlIHR5cGU6IFByb2dyZXNzVHlwZXM7XG5cbiAgICBwcml2YXRlIHZhbHVlOiBudW1iZXI7XG5cbiAgICBASG9zdEJpbmRpbmcoYGNsYXNzLnByb2dyZXNzLWJhcmApIGlzUHJvZ3Jlc3NCYXIgPSB0cnVlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS53aWR0aC4lJykgcGVyY2VudCA9IDA7XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmJhY2tncm91bmQtY29sb3InKSBjb2xvciA9ICcnO1xuXG4gICAgQElucHV0KCkgdGh5VGlwczogc3RyaW5nIHwgVGVtcGxhdGVSZWY8SFRNTEVsZW1lbnQ+O1xuXG4gICAgQElucHV0KCkgc2V0IHRoeVR5cGUodHlwZTogVGh5UHJvZ3Jlc3NUeXBlcykge1xuICAgICAgICAvLyB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UudXBkYXRlQ2xhc3ModHlwZSA/IFtgcHJvZ3Jlc3MtYmFyLSR7dHlwZX1gLCBgYmctJHt0eXBlfWBdIDogW10pO1xuICAgIH1cblxuICAgIEBJbnB1dCgpIHNldCB0aHlWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVQZXJjZW50YWdlKCk7XG4gICAgfVxuXG4gICAgQElucHV0KCkgc2V0IHRoeUNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yIHx8ICcnO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsXG4gICAgICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIEBJbmplY3QoVEhZX1BST0dSRVNTX0NPTVBPTkVOVCkgcHJpdmF0ZSBwcm9ncmVzczogVGh5UGFyZW50UHJvZ3Jlc3NcbiAgICApIHtcbiAgICAgICAgdXBkYXRlSG9zdENsYXNzU2VydmljZS5pbml0aWFsaXplRWxlbWVudChlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJlY2FsY3VsYXRlUGVyY2VudGFnZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wZXJjZW50ID0gKygodGhpcy52YWx1ZSAvIHRoaXMucHJvZ3Jlc3MubWF4KSAqIDEwMCkudG9GaXhlZCgyKTtcblxuICAgICAgICAvLyBpZiAodGhpcy5wcm9ncmVzcyAmJiB0aGlzLnByb2dyZXNzLmJhcnMpIHtcbiAgICAgICAgLy8gICAgIGNvbnN0IHRvdGFsUGVyY2VudGFnZSA9IHRoaXMucHJvZ3Jlc3MuYmFycy5yZWR1Y2UoZnVuY3Rpb24odG90YWw6IG51bWJlciwgYmFyKTogbnVtYmVyIHtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdG90YWwgKyBiYXIucGVyY2VudDtcbiAgICAgICAgLy8gICAgIH0sIDApO1xuXG4gICAgICAgIC8vICAgICBpZiAodG90YWxQZXJjZW50YWdlID4gMTAwKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5wZXJjZW50IC09IHRvdGFsUGVyY2VudGFnZSAtIDEwMDtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuICAgIH1cbn1cbiJdfQ==
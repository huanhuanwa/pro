import { Component, Input, HostBinding, ChangeDetectionStrategy, ElementRef, ViewEncapsulation, ViewChildren, QueryList } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { THY_PROGRESS_COMPONENT, ThyProgressBarComponent } from './bar/progress-bar.component';
export class ThyProgressComponent {
    constructor(updateHostClassService, elementRef) {
        this.updateHostClassService = updateHostClassService;
        this.bars = [];
        this.max = 100;
        this.isStacked = false;
        this.isProgress = true;
        this.updateHostClassService.initializeElement(elementRef);
    }
    set barsQueryList(value) {
        this.bars = value.toArray();
    }
    set thyValue(value) {
        this.isStacked = Array.isArray(value);
        this.value = value;
        // 自动求和计算 max
        if (this.isStacked) {
            this.thyMax = value.reduce((total, item) => {
                return total + item.value;
            }, 0);
        }
    }
    set thySize(size) {
        this.updateHostClassService.updateClass(size ? [`progress-${size}`] : []);
    }
    set thyMax(max) {
        this.max = max;
        this.bars.forEach(bar => {
            bar.recalculatePercentage();
        });
    }
}
ThyProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-progress',
                template: "<ng-container *ngIf=\"isStacked; else general\">\n  <thy-progress-bar\n    *ngFor=\"let item of value\"\n    [thyType]=\"item.type\"\n    [ngClass]=\"{ 'cursor-pointer': item.tips || thyTips }\"\n    [thyTooltip]=\"item.tips || thyTips\"\n    [thyTooltipTemplateContext]=\"item\"\n    [thyTooltipDisabled]=\"!thyTips && !item.tips\"\n    [thyColor]=\"item.color\"\n    [thyValue]=\"item.value\"\n    >{{ item.label }}\n  </thy-progress-bar>\n</ng-container>\n\n<ng-template #general>\n  <thy-progress-bar\n    *ngIf=\"value\"\n    [thyType]=\"thyType\"\n    [ngClass]=\"{ 'cursor-pointer': thyTips }\"\n    [thyTooltip]=\"thyTips\"\n    [thyTooltipTemplateContext]=\"value\"\n    [thyTooltipDisabled]=\"!thyTips\"\n    [thyValue]=\"value\"\n  >\n    <ng-content></ng-content>\n  </thy-progress-bar>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    UpdateHostClassService,
                    {
                        provide: THY_PROGRESS_COMPONENT,
                        useExisting: ThyProgressComponent
                    }
                ]
            },] }
];
ThyProgressComponent.ctorParameters = () => [
    { type: UpdateHostClassService },
    { type: ElementRef }
];
ThyProgressComponent.propDecorators = {
    max: [{ type: HostBinding, args: ['attr.max',] }],
    isStacked: [{ type: HostBinding, args: [`class.progress-stacked`,] }],
    isProgress: [{ type: HostBinding, args: [`class.progress`,] }],
    barsQueryList: [{ type: ViewChildren, args: [ThyProgressBarComponent,] }],
    thyType: [{ type: Input }],
    thyTips: [{ type: Input }],
    thyValue: [{ type: Input }],
    thySize: [{ type: Input }],
    thyMax: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb2dyZXNzL3Byb2dyZXNzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsdUJBQXVCLEVBQ3ZCLFVBQVUsRUFDVixpQkFBaUIsRUFDakIsWUFBWSxFQUNaLFNBQVMsRUFFWixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsdUJBQXVCLEVBQXFCLE1BQU0sOEJBQThCLENBQUM7QUFlbEgsTUFBTSxPQUFPLG9CQUFvQjtJQTJDN0IsWUFBb0Isc0JBQThDLEVBQUUsVUFBc0I7UUFBdEUsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQXhDbEUsU0FBSSxHQUE4QixFQUFFLENBQUM7UUFFWixRQUFHLEdBQUcsR0FBRyxDQUFDO1FBRUksY0FBUyxHQUFHLEtBQUssQ0FBQztRQUUxQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBbUM3QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQWxDRCxJQUNJLGFBQWEsQ0FBQyxLQUF5QztRQUN2RCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBTUQsSUFBYSxRQUFRLENBQUMsS0FBaUM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLGFBQWE7UUFDYixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBSSxLQUEyQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDOUQsT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM5QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDVDtJQUNMLENBQUM7SUFFRCxJQUFhLE9BQU8sQ0FBQyxJQUFZO1FBQzdCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELElBQWEsTUFBTSxDQUFDLEdBQVc7UUFDM0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQixHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQXRESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLDR6QkFBd0M7Z0JBQ3hDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsU0FBUyxFQUFFO29CQUNQLHNCQUFzQjtvQkFDdEI7d0JBQ0ksT0FBTyxFQUFFLHNCQUFzQjt3QkFDL0IsV0FBVyxFQUFFLG9CQUFvQjtxQkFDcEM7aUJBQ0o7YUFDSjs7O1lBZlEsc0JBQXNCO1lBUDNCLFVBQVU7OztrQkE0QlQsV0FBVyxTQUFDLFVBQVU7d0JBRXRCLFdBQVcsU0FBQyx3QkFBd0I7eUJBRXBDLFdBQVcsU0FBQyxnQkFBZ0I7NEJBRTVCLFlBQVksU0FBQyx1QkFBdUI7c0JBS3BDLEtBQUs7c0JBRUwsS0FBSzt1QkFFTCxLQUFLO3NCQVlMLEtBQUs7cUJBSUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgVmlld0NoaWxkcmVuLFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeVByb2dyZXNzVHlwZXMsIFRoeVN0YWNrZWRWYWx1ZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcbmltcG9ydCB7IFRIWV9QUk9HUkVTU19DT01QT05FTlQsIFRoeVByb2dyZXNzQmFyQ29tcG9uZW50LCBUaHlQYXJlbnRQcm9ncmVzcyB9IGZyb20gJy4vYmFyL3Byb2dyZXNzLWJhci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1wcm9ncmVzcycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Byb2dyZXNzLmNvbXBvbmVudC5odG1sJyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUSFlfUFJPR1JFU1NfQ09NUE9ORU5ULFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFRoeVByb2dyZXNzQ29tcG9uZW50XG4gICAgICAgIH1cbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFRoeVByb2dyZXNzQ29tcG9uZW50IGltcGxlbWVudHMgVGh5UGFyZW50UHJvZ3Jlc3Mge1xuICAgIHZhbHVlOiBudW1iZXIgfCBUaHlTdGFja2VkVmFsdWVbXTtcblxuICAgIGJhcnM6IFRoeVByb2dyZXNzQmFyQ29tcG9uZW50W10gPSBbXTtcblxuICAgIEBIb3N0QmluZGluZygnYXR0ci5tYXgnKSBtYXggPSAxMDA7XG5cbiAgICBASG9zdEJpbmRpbmcoYGNsYXNzLnByb2dyZXNzLXN0YWNrZWRgKSBpc1N0YWNrZWQgPSBmYWxzZTtcblxuICAgIEBIb3N0QmluZGluZyhgY2xhc3MucHJvZ3Jlc3NgKSBpc1Byb2dyZXNzID0gdHJ1ZTtcblxuICAgIEBWaWV3Q2hpbGRyZW4oVGh5UHJvZ3Jlc3NCYXJDb21wb25lbnQpXG4gICAgc2V0IGJhcnNRdWVyeUxpc3QodmFsdWU6IFF1ZXJ5TGlzdDxUaHlQcm9ncmVzc0JhckNvbXBvbmVudD4pIHtcbiAgICAgICAgdGhpcy5iYXJzID0gdmFsdWUudG9BcnJheSgpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpIHRoeVR5cGU6IFRoeVByb2dyZXNzVHlwZXM7XG5cbiAgICBASW5wdXQoKSB0aHlUaXBzOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxIVE1MRWxlbWVudD47XG5cbiAgICBASW5wdXQoKSBzZXQgdGh5VmFsdWUodmFsdWU6IG51bWJlciB8IFRoeVN0YWNrZWRWYWx1ZVtdKSB7XG4gICAgICAgIHRoaXMuaXNTdGFja2VkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICAvLyDoh6rliqjmsYLlkozorqHnrpcgbWF4XG4gICAgICAgIGlmICh0aGlzLmlzU3RhY2tlZCkge1xuICAgICAgICAgICAgdGhpcy50aHlNYXggPSAodmFsdWUgYXMgVGh5U3RhY2tlZFZhbHVlW10pLnJlZHVjZSgodG90YWwsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG90YWwgKyBpdGVtLnZhbHVlO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKSBzZXQgdGh5U2l6ZShzaXplOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUNsYXNzKHNpemUgPyBbYHByb2dyZXNzLSR7c2l6ZX1gXSA6IFtdKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKSBzZXQgdGh5TWF4KG1heDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgICAgICB0aGlzLmJhcnMuZm9yRWFjaChiYXIgPT4ge1xuICAgICAgICAgICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLmluaXRpYWxpemVFbGVtZW50KGVsZW1lbnRSZWYpO1xuICAgIH1cbn1cbiJdfQ==
import { Component, Input, HostBinding, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ThyLoadingComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "h4");
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 3);
    ɵngcc0.ɵɵelement(5, "span", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵstyleProp("display", ctx_r0.tip ? "inline" : "none");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.tip);
} }
function ThyLoadingComponent_ng_content_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "isMask || isDone"]);
} }
const _c0 = ["*"];
export class ThyLoadingComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.loadingClassName = true;
    }
    set thyDone(value) {
        this.isDone = coerceBooleanProperty(value);
        this.changeDetectorRef.markForCheck();
    }
    set thyTip(value) {
        this.tip = value;
        this.changeDetectorRef.markForCheck();
    }
    // 不传或穿false,没有遮罩层，加载完成出现内容
    set thyIsMask(value) {
        this.isMask = coerceBooleanProperty(value);
        this.changeDetectorRef.markForCheck();
    }
}
ThyLoadingComponent.ɵfac = function ThyLoadingComponent_Factory(t) { return new (t || ThyLoadingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyLoadingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyLoadingComponent, selectors: [["thy-loading"]], hostVars: 2, hostBindings: function ThyLoadingComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-loading", ctx.loadingClassName);
    } }, inputs: { thyDone: "thyDone", thyTip: "thyTip", thyIsMask: "thyIsMask" }, ngContentSelectors: _c0, decls: 3, vars: 4, consts: [["class", "thy-loading-indicator", 4, "ngIf"], [4, "ngIf"], [1, "thy-loading-indicator"], [1, "thy-loading-ellipsis"], [1, "thy-spot"]], template: function ThyLoadingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, ThyLoadingComponent_div_1_Template, 6, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(2, ThyLoadingComponent_ng_content_2_Template, 1, 0, "ng-content", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-loading-mask", ctx.isMask && !ctx.isDone);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isDone);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isMask || ctx.isDone);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
ThyLoadingComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyLoadingComponent.propDecorators = {
    thyDone: [{ type: Input }],
    thyTip: [{ type: Input }],
    thyIsMask: [{ type: Input }],
    loadingClassName: [{ type: HostBinding, args: ['class.thy-loading',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyLoadingComponent, [{
        type: Component,
        args: [{
                selector: 'thy-loading',
                template: "<div [class.thy-loading-mask]=\"isMask && !isDone\">\n    <div class=\"thy-loading-indicator\" *ngIf=\"!isDone\">\n        <h4>\n            <span [style.display]=\"tip ? 'inline' : 'none'\">{{tip}}</span>\n            <div class=\"thy-loading-ellipsis\">\n                <span class=\"thy-spot\"></span>\n            </div>\n        </h4>\n    </div>\n    <ng-content *ngIf=\"isMask || isDone\"></ng-content>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { loadingClassName: [{
            type: HostBinding,
            args: ['class.thy-loading']
        }], thyDone: [{
            type: Input
        }], thyTip: [{
            type: Input
        }], thyIsMask: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2FkaW5nL2xvYWRpbmcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPeEQsTUFBTSxPQUFPLG1CQUFtQjtBQUNoQyxJQTJCSSxZQUFvQixpQkFBb0M7QUFBSSxRQUF4QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0FBQUMsUUFGdkIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0FBQzlELElBQytELENBQUM7QUFDaEUsSUF0QkksSUFDSSxPQUFPLENBQUMsS0FBdUI7QUFDdkMsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25ELFFBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzlDLElBQUksQ0FBQztBQUNMLElBQ0ksSUFDSSxNQUFNLENBQUMsS0FBYTtBQUM1QixRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzlDLElBQUksQ0FBQztBQUNMLElBQ0ksMkJBQTJCO0FBQy9CLElBQUksSUFDSSxTQUFTLENBQUMsS0FBdUI7QUFDekMsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25ELFFBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzlDLElBQUksQ0FBQztBQUNMOytDQTlCQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLGFBQWEsa0JBQ3ZCOzs7MkhBQXVDLGtCQUN2QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxjQUNsRDs7Ozs7Ozs7Ozs7OzRFQUNJO0FBQUM7QUFDVSxZQVRpRCxpQkFBaUI7QUFBRztBQUFHO0FBQ3BFLHNCQWNmLEtBQUs7QUFDUixxQkFLRyxLQUFLO0FBQ1Isd0JBTUcsS0FBSztBQUNSLCtCQUtHLFdBQVcsU0FBQyxtQkFBbUI7QUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGh5LWxvYWRpbmcnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9sb2FkaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUaHlMb2FkaW5nQ29tcG9uZW50IHtcbiAgICBwdWJsaWMgaXNEb25lOiBib29sZWFuO1xuXG4gICAgcHVibGljIHRpcDogc3RyaW5nO1xuXG4gICAgcHVibGljIGlzTWFzazogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeURvbmUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5pc0RvbmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVRpcCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGlwID0gdmFsdWU7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgLy8g5LiN5Lyg5oiW56m/ZmFsc2Us5rKh5pyJ6YGu572p5bGC77yM5Yqg6L295a6M5oiQ5Ye6546w5YaF5a65XG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5SXNNYXNrKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaXNNYXNrID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRoeS1sb2FkaW5nJykgbG9hZGluZ0NsYXNzTmFtZSA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cbn1cbiJdfQ==
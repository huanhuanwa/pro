import { Component, Input, HostBinding, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
export class ThyLoadingComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.loadingClassName = true;
    }
    set thyDone(value) {
        this.isDone = coerceBooleanProperty(value);
        this.changeDetectorRef.markForCheck();
    }
    set thyTip(value) {
        this.tip = value;
        this.changeDetectorRef.markForCheck();
    }
    // 不传或穿false,没有遮罩层，加载完成出现内容
    set thyIsMask(value) {
        this.isMask = coerceBooleanProperty(value);
        this.changeDetectorRef.markForCheck();
    }
}
ThyLoadingComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-loading',
                template: "<div [class.thy-loading-mask]=\"isMask && !isDone\">\n    <div class=\"thy-loading-indicator\" *ngIf=\"!isDone\">\n        <h4>\n            <span [style.display]=\"tip ? 'inline' : 'none'\">{{tip}}</span>\n            <div class=\"thy-loading-ellipsis\">\n                <span class=\"thy-spot\"></span>\n            </div>\n        </h4>\n    </div>\n    <ng-content *ngIf=\"isMask || isDone\"></ng-content>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyLoadingComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThyLoadingComponent.propDecorators = {
    thyDone: [{ type: Input }],
    thyTip: [{ type: Input }],
    thyIsMask: [{ type: Input }],
    loadingClassName: [{ type: HostBinding, args: ['class.thy-loading',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbG9hZGluZy9sb2FkaW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPeEQsTUFBTSxPQUFPLG1CQUFtQjtJQTRCNUIsWUFBb0IsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFGdEIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBRUMsQ0FBQztJQXJCNUQsSUFDSSxPQUFPLENBQUMsS0FBdUI7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUVELElBQ0ksTUFBTSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDakIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCwyQkFBMkI7SUFDM0IsSUFDSSxTQUFTLENBQUMsS0FBdUI7UUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQzs7O1lBN0JKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsZ2JBQXVDO2dCQUN2QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNsRDs7O1lBUGdFLGlCQUFpQjs7O3NCQWU3RSxLQUFLO3FCQU1MLEtBQUs7d0JBT0wsS0FBSzsrQkFNTCxXQUFXLFNBQUMsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnbmd4LXRldGh5cy91dGlsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0aHktbG9hZGluZycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2xvYWRpbmcuY29tcG9uZW50Lmh0bWwnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFRoeUxvYWRpbmdDb21wb25lbnQge1xuICAgIHB1YmxpYyBpc0RvbmU6IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgdGlwOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgaXNNYXNrOiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5RG9uZSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgICAgICB0aGlzLmlzRG9uZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5VGlwKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50aXAgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICAvLyDkuI3kvKDmiJbnqb9mYWxzZSzmsqHmnInpga7nvanlsYLvvIzliqDovb3lrozmiJDlh7rnjrDlhoXlrrlcbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlJc01hc2sodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5pc01hc2sgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudGh5LWxvYWRpbmcnKSBsb2FkaW5nQ2xhc3NOYW1lID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7fVxufVxuIl19
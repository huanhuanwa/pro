/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, NgZone } from '@angular/core';
import { ThyEventDispatcher } from './event-dispatcher';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as ɵngcc0 from '@angular/core';
const DEFAULT_KEYDOWN_TIME = 100;
export class ThyKeyboardDispatcher extends ThyEventDispatcher {
    constructor(document, ngZone) {
        super(document, ngZone, 'keydown');
    }
    keydown(auditTimeInMs = DEFAULT_KEYDOWN_TIME) {
        return this.subscribe(auditTimeInMs);
    }
}
ThyKeyboardDispatcher.ɵfac = function ThyKeyboardDispatcher_Factory(t) { return new (t || ThyKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
ThyKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyKeyboardDispatcher_Factory() { return new ThyKeyboardDispatcher(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone)); }, token: ThyKeyboardDispatcher, providedIn: "root" });
ThyKeyboardDispatcher.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyKeyboardDispatcher, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.NgZone }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtZGlzcGF0Y2hlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvZXZlbnQtZGlzcGF0Y2hlcnMva2V5Ym9hcmQtZGlzcGF0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFDSCxNQUFNLEVBQ04sVUFBVSxFQUNWLE1BQU0sRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RDtBQUdDOztBQUZELE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0FBS2pDLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxrQkFBa0I7QUFDN0QsSUFDSSxZQUNzQixRQUFhLEVBQy9CLE1BQWM7QUFDbkIsUUFDSyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzQyxJQUFJLENBQUM7QUFDTCxJQUNJLE9BQU8sQ0FBQyxnQkFBd0Isb0JBQW9CO0FBQUksUUFDcEQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzdDLElBQUksQ0FBQztBQUNMOytLQUFDO0FBQ0QscVBBYks7QUFBQztFQUhMLFVBQVUsU0FBQyxrQkFDUixVQUFVLEVBQUUsTUFBTSxjQUNyQix2RUFDb0QsNENBRzVDLE1BQU0sU0FBQyxRQUFRO0FBQVMsWUFiN0IsTUFBTTtBQUNSOzs7Ozs7Ozs7MkRBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIEluamVjdCxcbiAgICBJbmplY3RhYmxlLFxuICAgIE5nWm9uZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRoeUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4vZXZlbnQtZGlzcGF0Y2hlcic7XG5cbmNvbnN0IERFRkFVTFRfS0VZRE9XTl9USU1FID0gMTAwO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRoeUtleWJvYXJkRGlzcGF0Y2hlciBleHRlbmRzIFRoeUV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueSxcbiAgICAgICAgbmdab25lOiBOZ1pvbmVcbiAgICApIHtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQsIG5nWm9uZSwgJ2tleWRvd24nKTtcbiAgICB9XG5cbiAgICBrZXlkb3duKGF1ZGl0VGltZUluTXM6IG51bWJlciA9IERFRkFVTFRfS0VZRE9XTl9USU1FKTogT2JzZXJ2YWJsZTxFdmVudD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmUoYXVkaXRUaW1lSW5Ncyk7XG4gICAgfVxufVxuXG5cbi8vIEBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG4vLyBleHBvcnQgY2xhc3MgVGh5S2V5Ym9hcmREaXNwYXRjaGVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcbi8vICAgICAvKiogQ3VycmVudGx5IGF0dGFjaGVkIGtleWRvd24gcmVmcyBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIGF0dGFjaGVkLiAqL1xuLy8gICAgIF9hdHRhY2hlZEtleWRvd25TdWJqZWN0czogU3ViamVjdDxLZXlib2FyZEV2ZW50PltdID0gW107XG5cbi8vICAgICBwcml2YXRlIF9kb2N1bWVudDogRG9jdW1lbnQ7XG5cbi8vICAgICBwcml2YXRlIF9pc0F0dGFjaGVkOiBib29sZWFuO1xuXG4vLyAgICAgLyoqIEtleWJvYXJkIGV2ZW50IGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGUgYm9keS4gKi9cbi8vICAgICBwcml2YXRlIF9rZXlkb3duTGlzdGVuZXIgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbi8vICAgICAgICAgY29uc3Qga2V5ZG93blJlZnMgPSB0aGlzLl9hdHRhY2hlZEtleWRvd25TdWJqZWN0cztcblxuLy8gICAgICAgICBmb3IgKGxldCBpID0ga2V5ZG93blJlZnMubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbi8vICAgICAgICAgICAgIGtleWRvd25SZWZzW2ldLm5leHQoZXZlbnQpO1xuLy8gICAgICAgICAgICAgYnJlYWs7XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG5cbi8vICAgICAvKiogRGV0YWNoZXMgdGhlIGdsb2JhbCBrZXlib2FyZCBldmVudCBsaXN0ZW5lci4gKi9cbi8vICAgICBwcml2YXRlIF9kZXRhY2goKSB7XG4vLyAgICAgICAgIGlmICh0aGlzLl9pc0F0dGFjaGVkKSB7XG4vLyAgICAgICAgICAgICB0aGlzLl9kb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4vLyAgICAgICAgICAgICAgICAgJ2tleWRvd24nLFxuLy8gICAgICAgICAgICAgICAgIHRoaXMuX2tleWRvd25MaXN0ZW5lcixcbi8vICAgICAgICAgICAgICAgICB0cnVlXG4vLyAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgdGhpcy5faXNBdHRhY2hlZCA9IGZhbHNlO1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuXG4vLyAgICAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueSkge1xuLy8gICAgICAgICB0aGlzLl9kb2N1bWVudCA9IGRvY3VtZW50O1xuLy8gICAgIH1cblxuLy8gICAgIG5nT25EZXN0cm95KCkge1xuLy8gICAgICAgICB0aGlzLl9kZXRhY2goKTtcbi8vICAgICB9XG5cbi8vICAgICAvKiogQWRkIGEgbmV3IG92ZXJsYXkgdG8gdGhlIGxpc3Qgb2YgYXR0YWNoZWQgb3ZlcmxheSByZWZzLiAqL1xuLy8gICAgIGFkZChrZXlkb3duU3ViamVjdDogU3ViamVjdDxLZXlib2FyZEV2ZW50Pik6IHZvaWQge1xuLy8gICAgICAgICAvLyBFbnN1cmUgdGhhdCB3ZSBkb24ndCBnZXQgdGhlIHNhbWUgb3ZlcmxheSBtdWx0aXBsZSB0aW1lcy5cbi8vICAgICAgICAgdGhpcy5yZW1vdmUoa2V5ZG93blN1YmplY3QpO1xuXG4vLyAgICAgICAgIC8vIExhemlseSBzdGFydCBkaXNwYXRjaGVyIG9uY2UgZmlyc3Qgb3ZlcmxheSBpcyBhZGRlZFxuLy8gICAgICAgICBpZiAoIXRoaXMuX2lzQXR0YWNoZWQpIHtcbi8vICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcbi8vICAgICAgICAgICAgICAgICAna2V5ZG93bicsXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5fa2V5ZG93bkxpc3RlbmVyLFxuLy8gICAgICAgICAgICAgICAgIHRydWVcbi8vICAgICAgICAgICAgICk7XG4vLyAgICAgICAgICAgICB0aGlzLl9pc0F0dGFjaGVkID0gdHJ1ZTtcbi8vICAgICAgICAgfVxuXG4vLyAgICAgICAgIHRoaXMuX2F0dGFjaGVkS2V5ZG93blN1YmplY3RzLnB1c2goa2V5ZG93blN1YmplY3QpO1xuLy8gICAgIH1cblxuLy8gICAgIC8qKiBSZW1vdmUgYW4ga2V5ZG93biByZWYgZnJvbSB0aGUgbGlzdCBvZiBhdHRhY2hlZCBrZXlkb3duIHJlZnMuICovXG4vLyAgICAgcmVtb3ZlKGtleWRvd25SZWY6IFN1YmplY3Q8S2V5Ym9hcmRFdmVudD4pOiB2b2lkIHtcbi8vICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9hdHRhY2hlZEtleWRvd25TdWJqZWN0cy5pbmRleE9mKGtleWRvd25SZWYpO1xuXG4vLyAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4vLyAgICAgICAgICAgICB0aGlzLl9hdHRhY2hlZEtleWRvd25TdWJqZWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuLy8gICAgICAgICB9XG5cbi8vICAgICAgICAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgbGlzdGVuZXIgb25jZSB0aGVyZSBhcmUgbm8gbW9yZSByZWZzLlxuLy8gICAgICAgICBpZiAodGhpcy5fYXR0YWNoZWRLZXlkb3duU3ViamVjdHMubGVuZ3RoID09PSAwKSB7XG4vLyAgICAgICAgICAgICB0aGlzLl9kZXRhY2goKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbiJdfQ==
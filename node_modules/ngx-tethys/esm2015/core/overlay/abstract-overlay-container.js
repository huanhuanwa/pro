import { EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
export function throwPopoverContentAlreadyAttachedError(name) {
    throw Error(`Attempting to attach ${name} content after content is already attached`);
}
export class ThyAbstractOverlayContainer {
    constructor(options, changeDetectorRef) {
        this.options = options;
        this.changeDetectorRef = changeDetectorRef;
        this.animationStateChanged = new EventEmitter();
        this.containerDestroy = new Subject();
    }
    /** Before detach content*/
    beforeDetachPortal() { }
    /**
     * Attach a TemplatePortal as content to this overlay container.
     * @param portal Portal to be attached as the overlay content.
     */
    attachTemplatePortal(portal) {
        if (this.portalOutlet.hasAttached()) {
            throwPopoverContentAlreadyAttachedError(this.options.name);
        }
        this.beforeAttachPortal();
        return this.portalOutlet.attachTemplatePortal(portal);
    }
    /**
     * Attach a ComponentPortal as content to this overlay container.
     * @param portal Portal to be attached as the overlay content.
     */
    attachComponentPortal(portal) {
        if (this.portalOutlet.hasAttached()) {
            throwPopoverContentAlreadyAttachedError(this.options.name);
        }
        this.beforeAttachPortal();
        return this.portalOutlet.attachComponentPortal(portal);
    }
    startExitAnimation() {
        if (this.options.animationEnabled) {
            this.animationState = 'exit';
        }
        else {
            // this.animationClosingDone.
        }
        this.beforeDetachPortal();
        // Mark the container for check so it can react if the
        // view container is using OnPush change detection.
        this.changeDetectorRef.markForCheck();
    }
    destroy() {
        this.containerDestroy.next();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3Qtb3ZlcmxheS1jb250YWluZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9vdmVybGF5L2Fic3RyYWN0LW92ZXJsYXktY29udGFpbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBaUMsWUFBWSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSTNDLE1BQU0sVUFBVSx1Q0FBdUMsQ0FBQyxJQUFZO0lBQ2hFLE1BQU0sS0FBSyxDQUFDLHdCQUF3QixJQUFJLDRDQUE0QyxDQUFDLENBQUM7QUFDMUYsQ0FBQztBQUVELE1BQU0sT0FBZ0IsMkJBQTJCO0lBOEI3QyxZQUFvQixPQUErQixFQUFZLGlCQUFvQztRQUEvRSxZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUFZLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUF6Qm5HLDBCQUFxQixHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBRTNELHFCQUFnQixHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUF1QitELENBQUM7SUFIdkcsMkJBQTJCO0lBQzNCLGtCQUFrQixLQUFJLENBQUM7SUFJdkI7OztPQUdHO0lBQ0gsb0JBQW9CLENBQUksTUFBeUI7UUFDN0MsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ2pDLHVDQUF1QyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUQ7UUFFRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVEOzs7T0FHRztJQUNILHFCQUFxQixDQUFJLE1BQTBCO1FBQy9DLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUNqQyx1Q0FBdUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxrQkFBa0I7UUFDZCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUM7U0FDaEM7YUFBTTtZQUNILDZCQUE2QjtTQUNoQztRQUNELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBRTFCLHNEQUFzRDtRQUN0RCxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENka1BvcnRhbE91dGxldCwgVGVtcGxhdGVQb3J0YWwsIENvbXBvbmVudFBvcnRhbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgRW1iZWRkZWRWaWV3UmVmLCBDb21wb25lbnRSZWYsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRoeVVwcGVyT3ZlcmxheU9wdGlvbnMsIFRoeUFic3RyYWN0T3ZlcmxheUNvbmZpZyB9IGZyb20gJy4vYWJzdHJhY3Qtb3ZlcmxheS5jb25maWcnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UG9wb3ZlckNvbnRlbnRBbHJlYWR5QXR0YWNoZWRFcnJvcihuYW1lOiBzdHJpbmcpIHtcbiAgICB0aHJvdyBFcnJvcihgQXR0ZW1wdGluZyB0byBhdHRhY2ggJHtuYW1lfSBjb250ZW50IGFmdGVyIGNvbnRlbnQgaXMgYWxyZWFkeSBhdHRhY2hlZGApO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGh5QWJzdHJhY3RPdmVybGF5Q29udGFpbmVyIHtcbiAgICBpZD86IHN0cmluZztcblxuICAgIGFuaW1hdGlvblN0YXRlOiBzdHJpbmc7XG5cbiAgICBhbmltYXRpb25TdGF0ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkV2ZW50PigpO1xuXG4gICAgY29udGFpbmVyRGVzdHJveSA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBhYnN0cmFjdCBjb25maWc6IFRoeUFic3RyYWN0T3ZlcmxheUNvbmZpZztcblxuICAgIC8qKnBvcnRhbCBvdXRsZXQgKi9cbiAgICBhYnN0cmFjdCBwb3J0YWxPdXRsZXQ6IENka1BvcnRhbE91dGxldDtcblxuICAgIC8qKlxuICAgICAqIE9wZW5pbmcgb3ZlcmxheSBhbmltYXRpb24gZG9uZVxuICAgICAqL1xuICAgIGFic3RyYWN0IGFuaW1hdGlvbk9wZW5pbmdEb25lOiBPYnNlcnZhYmxlPEFuaW1hdGlvbkV2ZW50PjtcblxuICAgIC8qKlxuICAgICAqIENsb3Npbmcgb3ZlcmxheSBhbmltYXRpb24gZG9uZVxuICAgICAqL1xuICAgIGFic3RyYWN0IGFuaW1hdGlvbkNsb3NpbmdEb25lOiBPYnNlcnZhYmxlPEFuaW1hdGlvbkV2ZW50PjtcblxuICAgIC8qKiBCZWZvcmUgYXR0YWNoIGNvbnRlbnQoVGVtcGxhdGVQb3J0YWwgb3IgQ29tcG9uZW50UG9ydGFsKSBwb3J0YWwgdG8gcG9ydGFsT3V0bGV0Ki9cbiAgICBhYnN0cmFjdCBiZWZvcmVBdHRhY2hQb3J0YWwoKTogdm9pZDtcblxuICAgIC8qKiBCZWZvcmUgZGV0YWNoIGNvbnRlbnQqL1xuICAgIGJlZm9yZURldGFjaFBvcnRhbCgpIHt9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IFRoeVVwcGVyT3ZlcmxheU9wdGlvbnMsIHByb3RlY3RlZCBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBUZW1wbGF0ZVBvcnRhbCBhcyBjb250ZW50IHRvIHRoaXMgb3ZlcmxheSBjb250YWluZXIuXG4gICAgICogQHBhcmFtIHBvcnRhbCBQb3J0YWwgdG8gYmUgYXR0YWNoZWQgYXMgdGhlIG92ZXJsYXkgY29udGVudC5cbiAgICAgKi9cbiAgICBhdHRhY2hUZW1wbGF0ZVBvcnRhbDxDPihwb3J0YWw6IFRlbXBsYXRlUG9ydGFsPEM+KTogRW1iZWRkZWRWaWV3UmVmPEM+IHtcbiAgICAgICAgaWYgKHRoaXMucG9ydGFsT3V0bGV0Lmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93UG9wb3ZlckNvbnRlbnRBbHJlYWR5QXR0YWNoZWRFcnJvcih0aGlzLm9wdGlvbnMubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJlZm9yZUF0dGFjaFBvcnRhbCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wb3J0YWxPdXRsZXQuYXR0YWNoVGVtcGxhdGVQb3J0YWwocG9ydGFsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBDb21wb25lbnRQb3J0YWwgYXMgY29udGVudCB0byB0aGlzIG92ZXJsYXkgY29udGFpbmVyLlxuICAgICAqIEBwYXJhbSBwb3J0YWwgUG9ydGFsIHRvIGJlIGF0dGFjaGVkIGFzIHRoZSBvdmVybGF5IGNvbnRlbnQuXG4gICAgICovXG4gICAgYXR0YWNoQ29tcG9uZW50UG9ydGFsPFQ+KHBvcnRhbDogQ29tcG9uZW50UG9ydGFsPFQ+KTogQ29tcG9uZW50UmVmPFQ+IHtcbiAgICAgICAgaWYgKHRoaXMucG9ydGFsT3V0bGV0Lmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93UG9wb3ZlckNvbnRlbnRBbHJlYWR5QXR0YWNoZWRFcnJvcih0aGlzLm9wdGlvbnMubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWZvcmVBdHRhY2hQb3J0YWwoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9ydGFsT3V0bGV0LmF0dGFjaENvbXBvbmVudFBvcnRhbChwb3J0YWwpO1xuICAgIH1cblxuICAgIHN0YXJ0RXhpdEFuaW1hdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25FbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvblN0YXRlID0gJ2V4aXQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcy5hbmltYXRpb25DbG9zaW5nRG9uZS5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZm9yZURldGFjaFBvcnRhbCgpO1xuXG4gICAgICAgIC8vIE1hcmsgdGhlIGNvbnRhaW5lciBmb3IgY2hlY2sgc28gaXQgY2FuIHJlYWN0IGlmIHRoZVxuICAgICAgICAvLyB2aWV3IGNvbnRhaW5lciBpcyB1c2luZyBPblB1c2ggY2hhbmdlIGRldGVjdGlvbi5cbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckRlc3Ryb3kubmV4dCgpO1xuICAgIH1cbn1cbiJdfQ==
import { concatArray } from 'ngx-tethys/util';
import { Subject } from 'rxjs';
import { OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { TemplateRef } from '@angular/core';
export class ThyAbstractOverlayService {
    constructor(options, // component name, e.g: dialog | popover | slide
    overlay, injector, defaultConfig, scrollStrategy) {
        this.options = options;
        this.overlay = overlay;
        this.injector = injector;
        this.defaultConfig = defaultConfig;
        this.scrollStrategy = scrollStrategy;
        this.openedOverlays = [];
        this._afterAllClosed = new Subject();
        this._afterOpened = new Subject();
    }
    /** Attach component or template ref to overlay container */
    attachUpperOverlayContent(componentOrTemplateRef, containerInstance, overlayRef, config) {
        // Create a reference to the dialog we're creating in order to give the user a handle
        // to modify and close it.
        const upperOverlayRef = this.createUpperOverlayRef(overlayRef, containerInstance, config);
        // When the backdrop is clicked, we want to close it.
        if (config.hasBackdrop) {
            overlayRef.backdropClick().subscribe(() => {
                if (upperOverlayRef.backdropClosable) {
                    upperOverlayRef.close();
                }
            });
        }
        if (componentOrTemplateRef instanceof TemplateRef) {
            containerInstance.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {
                $implicit: config.initialState,
                [`${this.options.name}Ref`]: upperOverlayRef
            }));
        }
        else {
            const injector = this.createInjector(config, upperOverlayRef, containerInstance);
            const contentRef = containerInstance.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));
            if (config.initialState) {
                Object.assign(contentRef.instance, config.initialState);
            }
            upperOverlayRef.componentInstance = contentRef.instance;
        }
        return upperOverlayRef;
    }
    removeOpenedOverlay(upperOverlayRef) {
        const index = this.openedOverlays.indexOf(upperOverlayRef);
        if (index > -1) {
            this.openedOverlays.splice(index, 1);
            if (!this.openedOverlays.length) {
                this._afterAllClosed.next();
            }
        }
    }
    getUpperOverlayById(id) {
        return this.openedOverlays.find(overlay => overlay.id === id);
    }
    buildBaseOverlayConfig(config, defaultPanelClass) {
        const overlayConfig = new OverlayConfig({
            positionStrategy: this.overlay.position().global(),
            hasBackdrop: config.hasBackdrop,
            direction: config.direction,
            width: config.width,
            height: config.height,
            minWidth: config.minWidth,
            minHeight: config.minHeight,
            maxWidth: config.maxWidth,
            maxHeight: config.maxHeight,
            disposeOnNavigation: config.closeOnNavigation
        });
        if (config.backdropClass) {
            overlayConfig.backdropClass = config.backdropClass;
        }
        overlayConfig.panelClass = concatArray(config.panelClass, defaultPanelClass);
        return overlayConfig;
    }
    openUpperOverlay(componentOrTemplateRef, config) {
        config = Object.assign(Object.assign({}, this.defaultConfig), config);
        if (config.id && this.getUpperOverlayById(config.id)) {
            throw Error(`${this.options.name} with id ${config.id} exists already. The ${this.options.name} id must be unique.`);
        }
        const overlayConfig = this.buildOverlayConfig(config);
        const overlayRef = this.overlay.create(overlayConfig);
        const overlayContainer = this.attachUpperOverlayContainer(overlayRef, config);
        const upperOverlayRef = this.attachUpperOverlayContent(componentOrTemplateRef, overlayContainer, overlayRef, config);
        this.openedOverlays.push(upperOverlayRef);
        upperOverlayRef.afterClosed().subscribe(() => {
            this.removeOpenedOverlay(upperOverlayRef);
        });
        this._afterOpened.next(upperOverlayRef);
        return upperOverlayRef;
    }
    afterAllClosed() {
        return this._afterAllClosed;
    }
    afterOpened() {
        return this._afterOpened;
    }
    close(result) {
        if (this.openedOverlays.length > 0) {
            const lastOverlayRef = this.openedOverlays[this.openedOverlays.length - 1];
            if (lastOverlayRef) {
                lastOverlayRef.close(result);
            }
        }
    }
    closeAll() {
        let i = this.openedOverlays.length;
        while (i--) {
            // 不需要操作 openedOverlays, 因为 close 会触发 afterClosed 的订阅
            // 触发订阅后会自动从 openedOverlays 中移除
            this.openedOverlays[i].close();
        }
    }
    dispose() {
        this.closeAll();
        this._afterAllClosed.complete();
        this._afterOpened.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,
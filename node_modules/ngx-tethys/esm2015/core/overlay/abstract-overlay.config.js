export class ThyAbstractOverlayConfig {
    constructor() {
        /** Custom class for the overlay pane. */
        this.panelClass = '';
        /** Whether the dialog has a backdrop. */
        this.hasBackdrop = true;
        /** Custom class for the backdrop, */
        this.backdropClass = '';
        /** Whether the user can use escape or clicking on the backdrop to close the overlay. */
        this.backdropClosable = true;
        /** Width of the dialog. */
        this.width = '';
        /** Height of the dialog. */
        this.height = '';
        /** Data being injected into the child component. */
        this.initialState = null;
        /** ID of the element that describes the dialog. */
        this.ariaDescribedBy = null;
        /** Aria label to assign to the dialog element */
        this.ariaLabel = null;
        /** Whether the dialog should focus the first focusable element on open. */
        this.autoFocus = true;
        /**
         * Whether the dialog should restore focus to the
         * previously-focused element, after it's closed.
         */
        this.restoreFocus = true;
        /**
         * Whether the dialog should close when the user goes backwards/forwards in history.
         * Note that this usually doesn't include clicking on links (unless the user is using
         * the `HashLocationStrategy`).
         */
        this.closeOnNavigation = true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3Qtb3ZlcmxheS5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9vdmVybGF5L2Fic3RyYWN0LW92ZXJsYXkuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxNQUFNLE9BQU8sd0JBQXdCO0lBQXJDO1FBWUkseUNBQXlDO1FBQ3pDLGVBQVUsR0FBdUIsRUFBRSxDQUFDO1FBRXBDLHlDQUF5QztRQUN6QyxnQkFBVyxHQUFJLElBQUksQ0FBQztRQUVwQixxQ0FBcUM7UUFDckMsa0JBQWEsR0FBdUIsRUFBRSxDQUFDO1FBRXZDLHdGQUF3RjtRQUN4RixxQkFBZ0IsR0FBSSxJQUFJLENBQUM7UUFFekIsMkJBQTJCO1FBQzNCLFVBQUssR0FBSSxFQUFFLENBQUM7UUFFWiw0QkFBNEI7UUFDNUIsV0FBTSxHQUFJLEVBQUUsQ0FBQztRQWNiLG9EQUFvRDtRQUNwRCxpQkFBWSxHQUFrQixJQUFJLENBQUM7UUFLbkMsbURBQW1EO1FBQ25ELG9CQUFlLEdBQW1CLElBQUksQ0FBQztRQUV2QyxpREFBaUQ7UUFDakQsY0FBUyxHQUFtQixJQUFJLENBQUM7UUFFakMsMkVBQTJFO1FBQzNFLGNBQVMsR0FBSSxJQUFJLENBQUM7UUFFbEI7OztXQUdHO1FBQ0gsaUJBQVksR0FBSSxJQUFJLENBQUM7UUFFckI7Ozs7V0FJRztRQUNILHNCQUFpQixHQUFJLElBQUksQ0FBQztJQUM5QixDQUFDO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XG5pbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGh5VXBwZXJPdmVybGF5UG9zaXRpb24ge1xuICAgIC8qKiBPdmVycmlkZSBmb3IgdGhlIG92ZXJsYXkncyB0b3AgcG9zaXRpb24uICovXG4gICAgdG9wPzogc3RyaW5nO1xuXG4gICAgLyoqIE92ZXJyaWRlIGZvciB0aGUgb3ZlcmxheSdzIGJvdHRvbSBwb3NpdGlvbi4gKi9cbiAgICBib3R0b20/OiBzdHJpbmc7XG5cbiAgICAvKiogT3ZlcnJpZGUgZm9yIHRoZSBvdmVybGF5J3MgbGVmdCBwb3NpdGlvbi4gKi9cbiAgICBsZWZ0Pzogc3RyaW5nO1xuXG4gICAgLyoqIE92ZXJyaWRlIGZvciB0aGUgb3ZlcmxheSdzIHJpZ2h0IHBvc2l0aW9uLiAqL1xuICAgIHJpZ2h0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVGh5QWJzdHJhY3RPdmVybGF5Q29uZmlnPFREYXRhID0gdW5rbm93bj4ge1xuICAgIC8qKlxuICAgICAqIFdoZXJlIHRoZSBhdHRhY2hlZCBjb21wb25lbnQgc2hvdWxkIGxpdmUgaW4gQW5ndWxhcidzICpsb2dpY2FsKiBjb21wb25lbnQgdHJlZS5cbiAgICAgKiBUaGlzIGFmZmVjdHMgd2hhdCBpcyBhdmFpbGFibGUgZm9yIGluamVjdGlvbiBhbmQgdGhlIGNoYW5nZSBkZXRlY3Rpb24gb3JkZXIgZm9yIHRoZVxuICAgICAqIGNvbXBvbmVudCBpbnN0YW50aWF0ZWQgaW5zaWRlIG9mIHRoZSBkaWFsb2cuIFRoaXMgZG9lcyBub3QgYWZmZWN0IHdoZXJlIHRoZSBkaWFsb2dcbiAgICAgKiBjb250ZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAgICovXG4gICAgdmlld0NvbnRhaW5lclJlZj86IFZpZXdDb250YWluZXJSZWY7XG5cbiAgICAvKiogSUQgZm9yIHRoZSBkaWFsb2cuIElmIG9taXR0ZWQsIGEgdW5pcXVlIG9uZSB3aWxsIGJlIGdlbmVyYXRlZC4gKi9cbiAgICBpZD86IHN0cmluZztcblxuICAgIC8qKiBDdXN0b20gY2xhc3MgZm9yIHRoZSBvdmVybGF5IHBhbmUuICovXG4gICAgcGFuZWxDbGFzcz86IHN0cmluZyB8IHN0cmluZ1tdID0gJyc7XG5cbiAgICAvKiogV2hldGhlciB0aGUgZGlhbG9nIGhhcyBhIGJhY2tkcm9wLiAqL1xuICAgIGhhc0JhY2tkcm9wPyA9IHRydWU7XG5cbiAgICAvKiogQ3VzdG9tIGNsYXNzIGZvciB0aGUgYmFja2Ryb3AsICovXG4gICAgYmFja2Ryb3BDbGFzcz86IHN0cmluZyB8IHN0cmluZ1tdID0gJyc7XG5cbiAgICAvKiogV2hldGhlciB0aGUgdXNlciBjYW4gdXNlIGVzY2FwZSBvciBjbGlja2luZyBvbiB0aGUgYmFja2Ryb3AgdG8gY2xvc2UgdGhlIG92ZXJsYXkuICovXG4gICAgYmFja2Ryb3BDbG9zYWJsZT8gPSB0cnVlO1xuXG4gICAgLyoqIFdpZHRoIG9mIHRoZSBkaWFsb2cuICovXG4gICAgd2lkdGg/ID0gJyc7XG5cbiAgICAvKiogSGVpZ2h0IG9mIHRoZSBkaWFsb2cuICovXG4gICAgaGVpZ2h0PyA9ICcnO1xuXG4gICAgLyoqIE1pbi13aWR0aCBvZiB0aGUgZGlhbG9nLiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgcGl4ZWwgdW5pdHMgYXJlIGFzc3VtZWQuICovXG4gICAgbWluV2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgICAvKiogTWluLWhlaWdodCBvZiB0aGUgZGlhbG9nLiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgcGl4ZWwgdW5pdHMgYXJlIGFzc3VtZWQuICovXG4gICAgbWluSGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuXG4gICAgLyoqIE1heC13aWR0aCBvZiB0aGUgZGlhbG9nLiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgcGl4ZWwgdW5pdHMgYXJlIGFzc3VtZWQuIERlZmF1bHRzIHRvIDgwdncgKi9cbiAgICBtYXhXaWR0aD86IG51bWJlciB8IHN0cmluZztcblxuICAgIC8qKiBNYXgtaGVpZ2h0IG9mIHRoZSBkaWFsb2cuIElmIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCBwaXhlbCB1bml0cyBhcmUgYXNzdW1lZC4gKi9cbiAgICBtYXhIZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgICAvKiogRGF0YSBiZWluZyBpbmplY3RlZCBpbnRvIHRoZSBjaGlsZCBjb21wb25lbnQuICovXG4gICAgaW5pdGlhbFN0YXRlPzogVERhdGEgfCBudWxsID0gbnVsbDtcblxuICAgIC8qKiBMYXlvdXQgZGlyZWN0aW9uIGZvciB0aGUgb3ZlcmxheSdzIGNvbnRlbnQuICovXG4gICAgZGlyZWN0aW9uPzogRGlyZWN0aW9uO1xuXG4gICAgLyoqIElEIG9mIHRoZSBlbGVtZW50IHRoYXQgZGVzY3JpYmVzIHRoZSBkaWFsb2cuICovXG4gICAgYXJpYURlc2NyaWJlZEJ5Pzogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKiogQXJpYSBsYWJlbCB0byBhc3NpZ24gdG8gdGhlIGRpYWxvZyBlbGVtZW50ICovXG4gICAgYXJpYUxhYmVsPzogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKiogV2hldGhlciB0aGUgZGlhbG9nIHNob3VsZCBmb2N1cyB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgb24gb3Blbi4gKi9cbiAgICBhdXRvRm9jdXM/ID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGRpYWxvZyBzaG91bGQgcmVzdG9yZSBmb2N1cyB0byB0aGVcbiAgICAgKiBwcmV2aW91c2x5LWZvY3VzZWQgZWxlbWVudCwgYWZ0ZXIgaXQncyBjbG9zZWQuXG4gICAgICovXG4gICAgcmVzdG9yZUZvY3VzPyA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBkaWFsb2cgc2hvdWxkIGNsb3NlIHdoZW4gdGhlIHVzZXIgZ29lcyBiYWNrd2FyZHMvZm9yd2FyZHMgaW4gaGlzdG9yeS5cbiAgICAgKiBOb3RlIHRoYXQgdGhpcyB1c3VhbGx5IGRvZXNuJ3QgaW5jbHVkZSBjbGlja2luZyBvbiBsaW5rcyAodW5sZXNzIHRoZSB1c2VyIGlzIHVzaW5nXG4gICAgICogdGhlIGBIYXNoTG9jYXRpb25TdHJhdGVneWApLlxuICAgICAqL1xuICAgIGNsb3NlT25OYXZpZ2F0aW9uPyA9IHRydWU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGh5VXBwZXJPdmVybGF5T3B0aW9ucyB7XG4gICAgLyoqIGNvbXBvbmVudCBuYW1lLCBlLmcuIGRpYWxvZyB8IHBvcG92ZXIgfCBzbGlkZSAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKiogV2hldGhlciBlbmFibGUgYW5pbWF0aW9uICovXG4gICAgYW5pbWF0aW9uRW5hYmxlZDogYm9vbGVhbjtcbiAgICAvKiogV2hldGhlciBkaXNwb3NlIGNkayBvdmVybGF5IHJlZiB3aGVuIGNsb3NlIHVwcGVyIG92ZXJsYXkgKi9cbiAgICBkaXNwb3NlV2hlbkNsb3NlOiBib29sZWFuO1xufVxuIl19
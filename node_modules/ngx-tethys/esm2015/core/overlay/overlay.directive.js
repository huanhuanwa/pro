import { Subject, fromEvent } from 'rxjs';
import { takeUntil, take } from 'rxjs/operators';
export class ThyOverlayDirectiveBase {
    constructor(elementRef, platform, focusMonitor, ngZone) {
        this.initialized = false;
        /** Trigger Overlay */
        this._trigger = 'click';
        this.manualListeners = new Map();
        this.ngUnsubscribe$ = new Subject();
        this.showDelay = 0;
        this.hideDelay = 0;
        this.touchendHideDelay = 0;
        this.disabled = false;
        this.elementRef = elementRef;
        this.platform = platform;
        this.focusMonitor = focusMonitor;
        this.ngZone = ngZone;
    }
    get trigger() {
        return this._trigger;
    }
    set trigger(value) {
        this._trigger = value;
        // Trigger reinitialize when trigger changed which can't contain first
        if (this.initialized) {
            this.clearEventListeners();
            this.initialize();
        }
    }
    clearEventListeners() {
        this.manualListeners.forEach((listener, event) => {
            this.elementRef.nativeElement.removeEventListener(event, listener);
        });
        this.manualListeners.clear();
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    clearTimer() {
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
        }
        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
        }
    }
    initialize() {
        this.initialized = true;
        const element = this.elementRef.nativeElement;
        if (!this.platform.IOS && !this.platform.ANDROID) {
            if (this.trigger === 'hover') {
                this.manualListeners
                    .set('mouseenter', () => {
                    this.show();
                })
                    .set('mouseleave', (event) => {
                    // element which mouse moved to
                    const overlayElement = this.overlayRef && this.overlayRef.overlayElement;
                    const toElement = event['toElement'] || event.relatedTarget;
                    // if element which moved to is in overlayElement, don't hide tooltip
                    if (overlayElement && overlayElement.contains && overlayElement.contains(toElement) && this.tooltipPin) {
                        fromEvent(overlayElement, 'mouseleave')
                            .pipe(take(1))
                            .subscribe(() => {
                            this.hide();
                        });
                    }
                    else {
                        this.hide();
                    }
                    // if showDelay is too long and mouseleave immediately, overlayRef is not exist, we should clearTimeout
                    if (!this.overlayRef) {
                        this.clearTimer();
                    }
                });
            }
            else if (this.trigger === 'focus') {
                this.focusMonitor
                    .monitor(this.elementRef)
                    .pipe(takeUntil(this.ngUnsubscribe$))
                    .subscribe(origin => {
                    // Note that the focus monitor runs outside the Angular zone.
                    if (!origin) {
                        this.ngZone.run(() => this.hide(0));
                    }
                    else {
                        this.ngZone.run(() => this.show());
                    }
                });
                // this.manualListeners.set('focus', () => this.show());
                // this.manualListeners.set('blur', () => this.hide());
            }
            else if (this.trigger === 'click') {
                this.manualListeners.set('click', () => this.show());
            }
            else {
                throw new Error(`${this.trigger} is not support, only support hover | focus | click`);
            }
        }
        else {
            const touchendListener = () => {
                // this.hide(this.touchendHideDelay);
                setTimeout(() => {
                    this.hide();
                }, this.touchendHideDelay);
            };
            // Reserve extensions for mobile in the future
            this.manualListeners
                .set('touchend', touchendListener)
                .set('touchcancel', touchendListener)
                .set('touchstart', () => {
                this.show();
            });
        }
        this.manualListeners.forEach((listener, event) => element.addEventListener(event, listener));
    }
    dispose() {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
        this.clearEventListeners();
        this.clearTimer();
    }
}
//# sourceMappingURL=data:application/json;base64,
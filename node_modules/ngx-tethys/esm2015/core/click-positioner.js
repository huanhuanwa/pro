import { Injectable } from '@angular/core';
import { ThyClickDispatcher } from './event-dispatchers/index';
import * as i0 from "@angular/core";
import * as i1 from "./event-dispatchers/click-dispatcher";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './event-dispatchers/index';
export class ThyClickPositioner {
    constructor(clickDispatcher) {
        this.clickDispatcher = clickDispatcher;
        this.lastPosition = null;
        this.initialized = false;
    }
    get lastClickPosition() {
        return this.lastPosition;
    }
    runTaskUseLastPosition(task) {
        setTimeout(() => {
            task(this.lastClickPosition);
        });
    }
    initialize() {
        if (this.initialized) {
            return;
        }
        this.initialized = true;
        this.clickDispatcher.clicked(0).subscribe((event) => {
            this.lastPosition = { x: event.clientX, y: event.clientY };
        });
    }
}
ThyClickPositioner.ɵfac = function ThyClickPositioner_Factory(t) { return new (t || ThyClickPositioner)(ɵngcc0.ɵɵinject(ɵngcc1.ThyClickDispatcher)); };
ThyClickPositioner.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyClickPositioner_Factory() { return new ThyClickPositioner(i0.ɵɵinject(i1.ThyClickDispatcher)); }, token: ThyClickPositioner, providedIn: "root" });
ThyClickPositioner.ctorParameters = () => [
    { type: ThyClickDispatcher }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyClickPositioner, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.ThyClickDispatcher }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2stcG9zaXRpb25lci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcmUvY2xpY2stcG9zaXRpb25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRDtBQUVBOzs7QUFPQSxNQUFNLE9BQU8sa0JBQWtCO0FBQy9CLElBSUksWUFBb0IsZUFBbUM7QUFBSSxRQUF2QyxvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7QUFBQyxRQUpoRCxpQkFBWSxHQUFxQixJQUFJLENBQUM7QUFDbEQsUUFDWSxnQkFBVyxHQUFHLEtBQUssQ0FBQztBQUNoQyxJQUM4RCxDQUFDO0FBQy9ELElBQ0ksSUFBSSxpQkFBaUI7QUFBSyxRQUN0QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDakMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxzQkFBc0IsQ0FBQyxJQUEyQztBQUN0RSxRQUFRLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDeEIsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDekMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0ksVUFBVTtBQUFLLFFBQ1gsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzlCLFlBQVksT0FBTztBQUNuQixTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUNoQyxRQUFRLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtBQUN4RSxZQUFZLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3ZFLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTDt1SkFBQztBQUNELDJOQTNCSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUlJLFlBWFAsa0JBQWtCO0FBQUc7R0FRMUIsVUFBVSxFQUFFLE1BQU0sY0FDckI7Ozs7O21GQVQrQjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeUNsaWNrRGlzcGF0Y2hlciB9IGZyb20gJy4vZXZlbnQtZGlzcGF0Y2hlcnMvaW5kZXgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRoeUNsaWNrUG9zaXRpb24ge1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGh5Q2xpY2tQb3NpdGlvbmVyIHtcbiAgICBwcml2YXRlIGxhc3RQb3NpdGlvbjogVGh5Q2xpY2tQb3NpdGlvbiA9IG51bGw7XG5cbiAgICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWNrRGlzcGF0Y2hlcjogVGh5Q2xpY2tEaXNwYXRjaGVyKSB7fVxuXG4gICAgZ2V0IGxhc3RDbGlja1Bvc2l0aW9uKCk6IFRoeUNsaWNrUG9zaXRpb24gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdFBvc2l0aW9uO1xuICAgIH1cblxuICAgIHJ1blRhc2tVc2VMYXN0UG9zaXRpb24odGFzazogKHBvc2l0aW9uPzogVGh5Q2xpY2tQb3NpdGlvbikgPT4gdm9pZCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRhc2sodGhpcy5sYXN0Q2xpY2tQb3NpdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xpY2tEaXNwYXRjaGVyLmNsaWNrZWQoMCkuc3Vic2NyaWJlKChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24gPSB7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19
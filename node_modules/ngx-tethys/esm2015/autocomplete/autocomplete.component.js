import { Component, TemplateRef, ViewChild, ChangeDetectionStrategy, ContentChildren, QueryList, Output, EventEmitter, NgZone, ChangeDetectorRef, Input, ElementRef } from '@angular/core';
import { defer, merge, timer } from 'rxjs';
import { take, switchMap, takeUntil, startWith } from 'rxjs/operators';
import { MixinBase, mixinUnsubscribe } from 'ngx-tethys/core';
import { SelectionModel } from '@angular/cdk/collections';
import { THY_OPTION_PARENT_COMPONENT, ThyOptionComponent, ThyOptionSelectionChangeEvent } from 'ngx-tethys/shared';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/shared';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-tethys/empty';

const _c0 = ["contentTemplate"];
const _c1 = ["panel"];
function ThyAutocompleteComponent_ng_template_0_thy_empty_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-empty", 5);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("thyMessage", ctx_r3.thyEmptyText);
} }
function ThyAutocompleteComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2, 3);
    ɵngcc0.ɵɵprojection(3);
    ɵngcc0.ɵɵtemplate(4, ThyAutocompleteComponent_ng_template_0_thy_empty_4_Template, 1, 1, "thy-empty", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.dropDownClass);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isEmptyOptions);
} }
const _c2 = ["*"];
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyAutocompleteComponent extends _MixinBase {
    constructor(ngZone, changeDetectorRef) {
        super();
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        this.isMultiple = false;
        this.mode = '';
        this.isEmptyOptions = false;
        this.isOpened = false;
        this.optionSelectionChanges = defer(() => {
            if (this.options) {
                return merge(...this.options.map(option => option.selectionChange));
            }
            return this.ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelectionChanges));
        });
        this.thyEmptyText = '没有任何数据';
        this.thyOptionSelected = new EventEmitter();
        this.thyOpened = new EventEmitter();
        this.thyClosed = new EventEmitter();
        /** Emits whenever an option is activated using the keyboard. */
        this.thyOptionActivated = new EventEmitter();
    }
    get thyAutoActiveFirstOption() {
        return this._autoActiveFirstOption;
    }
    set thyAutoActiveFirstOption(value) {
        this._autoActiveFirstOption = coerceBooleanProperty(value);
    }
    ngOnInit() {
        this.setDropDownClass();
        this.instanceSelectionModel();
    }
    ngAfterContentInit() {
        this.options.changes.pipe(startWith(null), takeUntil(this.ngUnsubscribe$)).subscribe(() => {
            this.resetOptions();
            timer().subscribe(() => {
                this.isEmptyOptions = this.options.length <= 0;
                this.changeDetectorRef.detectChanges();
            });
            this.initKeyManager();
        });
    }
    initKeyManager() {
        const changedOrDestroyed$ = merge(this.options.changes, this.ngUnsubscribe$);
        this.keyManager = new ActiveDescendantKeyManager(this.options).withWrap();
        this.keyManager.change.pipe(takeUntil(changedOrDestroyed$)).subscribe(index => {
            this.thyOptionActivated.emit({ source: this, option: this.options.toArray()[index] || null });
        });
    }
    open() {
        this.isOpened = true;
        this.changeDetectorRef.markForCheck();
        this.thyOpened.emit();
    }
    close() {
        this.isOpened = false;
        this.thyClosed.emit();
    }
    resetOptions() {
        const changedOrDestroyed$ = merge(this.options.changes, this.ngUnsubscribe$);
        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed$)).subscribe((event) => {
            this.onSelect(event.option, event.isUserInput);
        });
    }
    instanceSelectionModel() {
        if (this.selectionModel) {
            this.selectionModel.clear();
        }
        this.selectionModel = new SelectionModel(this.isMultiple);
        this.selectionModel.changed.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(event => {
            event.added.forEach(option => option.select());
            event.removed.forEach(option => option.deselect());
        });
    }
    onSelect(option, isUserInput) {
        const wasSelected = this.selectionModel.isSelected(option);
        if (option.thyValue == null && !this.isMultiple) {
            option.deselect();
            this.selectionModel.clear();
        }
        else {
            if (wasSelected !== option.selected) {
                option.selected ? this.selectionModel.select(option) : this.selectionModel.deselect(option);
            }
            if (isUserInput) {
                this.keyManager.setActiveItem(option);
            }
            // if (this.isMultiple) {
            //     this.sortValues();
            //     if (isUserInput) {
            //         this.focus();
            //     }
            // }
        }
        if (wasSelected !== this.selectionModel.isSelected(option)) {
            this.thyOptionSelected.emit(new ThyOptionSelectionChangeEvent(option, false));
        }
        this.changeDetectorRef.markForCheck();
    }
    setDropDownClass() {
        let modeClass = '';
        if (this.isMultiple) {
            modeClass = `thy-select-dropdown-${this.mode}`;
        }
        else {
            modeClass = `thy-select-dropdown-single`;
        }
        this.dropDownClass = {
            [`thy-select-dropdown`]: true,
            [modeClass]: true
        };
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyAutocompleteComponent.ɵfac = function ThyAutocompleteComponent_Factory(t) { return new (t || ThyAutocompleteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyAutocompleteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyAutocompleteComponent, selectors: [["thy-autocomplete"]], contentQueries: function ThyAutocompleteComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ThyOptionComponent, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);
    } }, viewQuery: function ThyAutocompleteComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionsContainer = _t.first);
    } }, inputs: { thyEmptyText: "thyEmptyText", thyAutoActiveFirstOption: "thyAutoActiveFirstOption" }, outputs: { thyOptionSelected: "thyOptionSelected", thyOpened: "thyOpened", thyClosed: "thyClosed", thyOptionActivated: "thyOptionActivated" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: THY_OPTION_PARENT_COMPONENT,
                useExisting: ThyAutocompleteComponent
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 2, vars: 0, consts: [["contentTemplate", ""], ["thyStopPropagation", "", 3, "ngClass"], [1, "thy-select-dropdown-options"], ["panel", ""], [3, "thyMessage", 4, "ngIf"], [3, "thyMessage"]], template: function ThyAutocompleteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyAutocompleteComponent_ng_template_0_Template, 5, 2, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc1.ThyStopPropagationDirective, ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc3.ThyEmptyComponent], encapsulation: 2, changeDetection: 0 });
ThyAutocompleteComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef }
];
ThyAutocompleteComponent.propDecorators = {
    contentTemplateRef: [{ type: ViewChild, args: ['contentTemplate', { static: true },] }],
    optionsContainer: [{ type: ViewChild, args: ['panel',] }],
    options: [{ type: ContentChildren, args: [ThyOptionComponent, { descendants: true },] }],
    thyEmptyText: [{ type: Input }],
    thyAutoActiveFirstOption: [{ type: Input }],
    thyOptionSelected: [{ type: Output }],
    thyOpened: [{ type: Output }],
    thyClosed: [{ type: Output }],
    thyOptionActivated: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyAutocompleteComponent, [{
        type: Component,
        args: [{
                selector: 'thy-autocomplete',
                template: "<ng-template #contentTemplate>\n  <div thyStopPropagation [ngClass]=\"dropDownClass\">\n    <div #panel class=\"thy-select-dropdown-options\">\n      <ng-content></ng-content>\n      <thy-empty *ngIf=\"isEmptyOptions\" [thyMessage]=\"thyEmptyText\"></thy-empty>\n    </div>\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: THY_OPTION_PARENT_COMPONENT,
                        useExisting: ThyAutocompleteComponent
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }]; }, { thyEmptyText: [{
            type: Input
        }], thyOptionSelected: [{
            type: Output
        }], thyOpened: [{
            type: Output
        }], thyClosed: [{
            type: Output
        }], thyOptionActivated: [{
            type: Output
        }], thyAutoActiveFirstOption: [{
            type: Input
        }], contentTemplateRef: [{
            type: ViewChild,
            args: ['contentTemplate', { static: true }]
        }], optionsContainer: [{
            type: ViewChild,
            args: ['panel']
        }], options: [{
            type: ContentChildren,
            args: [ThyOptionComponent, { descendants: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
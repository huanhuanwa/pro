import { Directive, ElementRef, NgZone, Input, ViewContainerRef, HostBinding, Optional, Inject, ChangeDetectorRef } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { ThyAutocompleteService } from './overlay/autocomplete.service';
import { ThyAutocompleteComponent } from './autocomplete.component';
import { ThyOptionSelectionChangeEvent } from 'ngx-tethys/shared';
import { DOCUMENT } from '@angular/common';
import { Subject, merge, fromEvent, of } from 'rxjs';
import { ESCAPE, UP_ARROW, ENTER, DOWN_ARROW, TAB } from 'ngx-tethys/util';
import { filter, map, take, delay, switchMap } from 'rxjs/operators';
import { ScrollToService } from 'ngx-tethys/core';
import { warnDeprecation } from 'ngx-tethys/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
import * as ɵngcc2 from './overlay/autocomplete.service';
export class ThyAutocompleteTriggerDirective {
    constructor(elementRef, ngZone, overlay, autocompleteService, viewContainerRef, document, cdr) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.overlay = overlay;
        this.autocompleteService = autocompleteService;
        this.viewContainerRef = viewContainerRef;
        this.document = document;
        this.cdr = cdr;
        this.closeKeyEventStream = new Subject();
        this.panelOpened = false;
        this.thyOffset = 4;
        this.thyPlacement = 'bottomLeft';
    }
    set autocompleteComponent(data) {
        this._autocompleteComponent = data;
    }
    set autocomplete(data) {
        warnDeprecation(`The property thyAutocomplete will be deprecated, please use thyAutocompleteComponent instead.`);
        this._autocompleteComponent = data;
    }
    get autocompleteComponent() {
        return this._autocompleteComponent;
    }
    get activeOption() {
        if (this.autocompleteComponent && this.autocompleteComponent.keyManager) {
            return this.autocompleteComponent.keyManager.activeItem;
        }
        return null;
    }
    get panelClosingActions() {
        return merge(this.autocompleteComponent.thyOptionSelected, this.autocompleteComponent.keyManager.tabOut.pipe(filter(() => this.panelOpened)), this.closeKeyEventStream, this.getOutsideClickStream(), this.overlayRef ? this.overlayRef.detachments().pipe(filter(() => this.panelOpened)) : of()).pipe(
        // Normalize the output so we return a consistent type.
        map(event => (event instanceof ThyOptionSelectionChangeEvent ? event : null)));
    }
    ngOnInit() { }
    onFocus() {
        if (this.canOpen()) {
            this.openPanel();
        }
    }
    onKeydown(event) {
        const keyCode = event.keyCode;
        // Prevent the default action on all escape key presses. This is here primarily to bring IE
        // in line with other browsers. By default, pressing escape on IE will cause it to revert
        // the input value to the one that it had on focus, however it won't dispatch any events
        // which means that the model value will be out of sync with the view.
        if (keyCode === ESCAPE) {
            event.preventDefault();
        }
        if (this.activeOption && keyCode === ENTER && this.panelOpened) {
            this.activeOption.selectViaInteraction();
            this.resetActiveItem();
            event.preventDefault();
        }
        else if (this.autocompleteComponent) {
            const prevActiveItem = this.autocompleteComponent.keyManager.activeItem;
            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;
            if (this.panelOpened || keyCode === TAB) {
                this.autocompleteComponent.keyManager.onKeydown(event);
            }
            else if (isArrowKey && this.canOpen()) {
                this.openPanel();
            }
            if ((isArrowKey || this.autocompleteComponent.keyManager.activeItem !== prevActiveItem) &&
                this.autocompleteComponent.keyManager.activeItem) {
                ScrollToService.scrollToElement(this.autocompleteComponent.keyManager.activeItem.element.nativeElement, this.autocompleteComponent.optionsContainer.nativeElement);
            }
        }
    }
    handleInput(event) {
        if (this.canOpen() && document.activeElement === event.target) {
            this.openPanel();
        }
    }
    openPanel() {
        if (this.overlayRef && this.overlayRef.hasAttached()) {
            return;
        }
        const overlayRef = this.createOverlay();
        this.overlayRef = overlayRef;
        overlayRef.keydownEvents().subscribe(event => {
            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
            if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {
                this.resetActiveItem();
                this.closeKeyEventStream.next();
                // We need to stop propagation, otherwise the event will eventually
                // reach the input itself and cause the overlay to be reopened.
                event.stopPropagation();
                event.preventDefault();
            }
        });
        this.panelOpened = true;
        this.autocompleteComponent.open();
    }
    closePanel() {
        if (this.autocompleteRef) {
            this.autocompleteRef.close();
            this.cdr.detectChanges();
            this.closingActionsSubscription.unsubscribe();
        }
    }
    createOverlay() {
        const config = Object.assign({
            origin: this.elementRef.nativeElement,
            viewContainerRef: this.viewContainerRef,
            placement: this.thyPlacement,
            offset: this.thyOffset,
            scrollStrategy: this.overlay.scrollStrategies.reposition(),
            width: this.thyAutocompleteWidth || this.elementRef.nativeElement.clientWidth
        });
        this.autocompleteRef = this.autocompleteService.open(this.autocompleteComponent.contentTemplateRef, config);
        this.autocompleteRef.afterClosed().subscribe(() => {
            this.panelOpened = false;
            this.autocompleteComponent.close();
        });
        // delay 200ms to prevent emit document click rightnow
        this.autocompleteRef
            .afterOpened()
            .pipe(delay(200))
            .subscribe(() => {
            this.closingActionsSubscription = this.subscribeToClosingActions();
        });
        return this.autocompleteRef.getOverlayRef();
    }
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     */
    subscribeToClosingActions() {
        const firstStable = this.ngZone.onStable.asObservable().pipe(take(1));
        const optionChanges = this.autocompleteComponent.options.changes.pipe(
        // Defer emitting to the stream until the next tick, because changing
        // bindings in here will cause "changed after checked" errors.
        delay(0));
        // When the zone is stable initially, and when the option list changes...
        return (merge(firstStable, optionChanges)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap(() => {
            this.resetActiveItem();
            if (this.panelOpened) {
                this.overlayRef.updatePosition();
            }
            return this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        take(1))
            // set the value, close the panel, and complete.
            .subscribe(event => this.setValueAndClose(event)));
    }
    setValueAndClose(event) {
        if (event && event.option) {
            this.setValue(event.option.thyLabelText);
        }
        this.closePanel();
    }
    /** Stream of clicks outside of the autocomplete panel. */
    getOutsideClickStream() {
        return merge(fromEvent(this.document, 'click'), fromEvent(this.document, 'touchend')).pipe(filter(event => {
            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to
            // fall back to check the first element in the path of the click event.
            const clickTarget = event.target;
            const formField = null;
            return (this.panelOpened &&
                clickTarget !== this.elementRef.nativeElement &&
                (!formField || !formField.contains(clickTarget)) &&
                !!this.overlayRef &&
                !this.overlayRef.overlayElement.contains(clickTarget));
        }));
    }
    setValue(value) {
        this.elementRef.nativeElement.value = value;
        this.elementRef.nativeElement.focus();
    }
    canOpen() {
        const element = this.elementRef.nativeElement;
        return !element.readOnly && !element.disabled;
    }
    resetActiveItem() {
        this.autocompleteComponent.keyManager.setActiveItem(this.autocompleteComponent.thyAutoActiveFirstOption ? 0 : -1);
    }
    destroyPanel() {
        if (this.overlayRef) {
            this.closePanel();
            this.overlayRef.dispose();
            this.overlayRef = null;
        }
    }
    ngOnDestroy() {
        this.closeKeyEventStream.complete();
        this.destroyPanel();
    }
}
ThyAutocompleteTriggerDirective.ɵfac = function ThyAutocompleteTriggerDirective_Factory(t) { return new (t || ThyAutocompleteTriggerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyAutocompleteService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ThyAutocompleteTriggerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyAutocompleteTriggerDirective, selectors: [["input", "thyAutocompleteTrigger", ""], ["textarea", "thyAutocompleteTrigger", ""]], hostVars: 2, hostBindings: function ThyAutocompleteTriggerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function ThyAutocompleteTriggerDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); })("focusin", function ThyAutocompleteTriggerDirective_focusin_HostBindingHandler() { return ctx.onFocus(); })("keydown", function ThyAutocompleteTriggerDirective_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-autocomplete-opened", ctx.panelOpened);
    } }, inputs: { thyOffset: "thyOffset", thyPlacement: "thyPlacement", autocompleteComponent: ["thyAutocompleteComponent", "autocompleteComponent"], autocomplete: ["thyAutocomplete", "autocomplete"], thyAutocompleteWidth: "thyAutocompleteWidth" }, exportAs: ["thyAutocompleteTrigger"] });
ThyAutocompleteTriggerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Overlay },
    { type: ThyAutocompleteService },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef }
];
ThyAutocompleteTriggerDirective.propDecorators = {
    panelOpened: [{ type: HostBinding, args: [`class.thy-autocomplete-opened`,] }],
    autocompleteComponent: [{ type: Input, args: ['thyAutocompleteComponent',] }],
    autocomplete: [{ type: Input, args: ['thyAutocomplete',] }],
    thyOffset: [{ type: Input }],
    thyAutocompleteWidth: [{ type: Input }],
    thyPlacement: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyAutocompleteTriggerDirective, [{
        type: Directive,
        args: [{
                selector: 'input[thyAutocompleteTrigger], textarea[thyAutocompleteTrigger]',
                exportAs: 'thyAutocompleteTrigger',
                host: {
                    '(input)': 'handleInput($event)',
                    '(focusin)': 'onFocus()',
                    '(keydown)': 'onKeydown($event)'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Overlay }, { type: ɵngcc2.ThyAutocompleteService }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { panelOpened: [{
            type: HostBinding,
            args: [`class.thy-autocomplete-opened`]
        }], thyOffset: [{
            type: Input
        }], thyPlacement: [{
            type: Input
        }], autocompleteComponent: [{
            type: Input,
            args: ['thyAutocompleteComponent']
        }], autocomplete: [{
            type: Input,
            args: ['thyAutocomplete']
        }], thyAutocompleteWidth: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
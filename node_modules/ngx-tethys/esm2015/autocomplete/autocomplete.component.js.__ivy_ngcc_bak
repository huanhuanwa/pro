import { Component, TemplateRef, ViewChild, ChangeDetectionStrategy, ContentChildren, QueryList, Output, EventEmitter, NgZone, ChangeDetectorRef, Input, ElementRef } from '@angular/core';
import { defer, merge, timer } from 'rxjs';
import { take, switchMap, takeUntil, startWith } from 'rxjs/operators';
import { MixinBase, mixinUnsubscribe } from 'ngx-tethys/core';
import { SelectionModel } from '@angular/cdk/collections';
import { THY_OPTION_PARENT_COMPONENT, ThyOptionComponent, ThyOptionSelectionChangeEvent } from 'ngx-tethys/shared';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
const _MixinBase = mixinUnsubscribe(MixinBase);
export class ThyAutocompleteComponent extends _MixinBase {
    constructor(ngZone, changeDetectorRef) {
        super();
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        this.isMultiple = false;
        this.mode = '';
        this.isEmptyOptions = false;
        this.isOpened = false;
        this.optionSelectionChanges = defer(() => {
            if (this.options) {
                return merge(...this.options.map(option => option.selectionChange));
            }
            return this.ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelectionChanges));
        });
        this.thyEmptyText = '没有任何数据';
        this.thyOptionSelected = new EventEmitter();
        this.thyOpened = new EventEmitter();
        this.thyClosed = new EventEmitter();
        /** Emits whenever an option is activated using the keyboard. */
        this.thyOptionActivated = new EventEmitter();
    }
    get thyAutoActiveFirstOption() {
        return this._autoActiveFirstOption;
    }
    set thyAutoActiveFirstOption(value) {
        this._autoActiveFirstOption = coerceBooleanProperty(value);
    }
    ngOnInit() {
        this.setDropDownClass();
        this.instanceSelectionModel();
    }
    ngAfterContentInit() {
        this.options.changes.pipe(startWith(null), takeUntil(this.ngUnsubscribe$)).subscribe(() => {
            this.resetOptions();
            timer().subscribe(() => {
                this.isEmptyOptions = this.options.length <= 0;
                this.changeDetectorRef.detectChanges();
            });
            this.initKeyManager();
        });
    }
    initKeyManager() {
        const changedOrDestroyed$ = merge(this.options.changes, this.ngUnsubscribe$);
        this.keyManager = new ActiveDescendantKeyManager(this.options).withWrap();
        this.keyManager.change.pipe(takeUntil(changedOrDestroyed$)).subscribe(index => {
            this.thyOptionActivated.emit({ source: this, option: this.options.toArray()[index] || null });
        });
    }
    open() {
        this.isOpened = true;
        this.changeDetectorRef.markForCheck();
        this.thyOpened.emit();
    }
    close() {
        this.isOpened = false;
        this.thyClosed.emit();
    }
    resetOptions() {
        const changedOrDestroyed$ = merge(this.options.changes, this.ngUnsubscribe$);
        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed$)).subscribe((event) => {
            this.onSelect(event.option, event.isUserInput);
        });
    }
    instanceSelectionModel() {
        if (this.selectionModel) {
            this.selectionModel.clear();
        }
        this.selectionModel = new SelectionModel(this.isMultiple);
        this.selectionModel.changed.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(event => {
            event.added.forEach(option => option.select());
            event.removed.forEach(option => option.deselect());
        });
    }
    onSelect(option, isUserInput) {
        const wasSelected = this.selectionModel.isSelected(option);
        if (option.thyValue == null && !this.isMultiple) {
            option.deselect();
            this.selectionModel.clear();
        }
        else {
            if (wasSelected !== option.selected) {
                option.selected ? this.selectionModel.select(option) : this.selectionModel.deselect(option);
            }
            if (isUserInput) {
                this.keyManager.setActiveItem(option);
            }
            // if (this.isMultiple) {
            //     this.sortValues();
            //     if (isUserInput) {
            //         this.focus();
            //     }
            // }
        }
        if (wasSelected !== this.selectionModel.isSelected(option)) {
            this.thyOptionSelected.emit(new ThyOptionSelectionChangeEvent(option, false));
        }
        this.changeDetectorRef.markForCheck();
    }
    setDropDownClass() {
        let modeClass = '';
        if (this.isMultiple) {
            modeClass = `thy-select-dropdown-${this.mode}`;
        }
        else {
            modeClass = `thy-select-dropdown-single`;
        }
        this.dropDownClass = {
            [`thy-select-dropdown`]: true,
            [modeClass]: true
        };
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
ThyAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-autocomplete',
                template: "<ng-template #contentTemplate>\n  <div thyStopPropagation [ngClass]=\"dropDownClass\">\n    <div #panel class=\"thy-select-dropdown-options\">\n      <ng-content></ng-content>\n      <thy-empty *ngIf=\"isEmptyOptions\" [thyMessage]=\"thyEmptyText\"></thy-empty>\n    </div>\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: THY_OPTION_PARENT_COMPONENT,
                        useExisting: ThyAutocompleteComponent
                    }
                ]
            },] }
];
ThyAutocompleteComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef }
];
ThyAutocompleteComponent.propDecorators = {
    contentTemplateRef: [{ type: ViewChild, args: ['contentTemplate', { static: true },] }],
    optionsContainer: [{ type: ViewChild, args: ['panel',] }],
    options: [{ type: ContentChildren, args: [ThyOptionComponent, { descendants: true },] }],
    thyEmptyText: [{ type: Input }],
    thyAutoActiveFirstOption: [{ type: Input }],
    thyOptionSelected: [{ type: Output }],
    thyOpened: [{ type: Output }],
    thyClosed: [{ type: Output }],
    thyOptionActivated: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,
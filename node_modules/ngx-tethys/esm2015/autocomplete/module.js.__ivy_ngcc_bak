import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ThyAutocompleteTriggerDirective } from './autocomplete.trigger.directive';
import { ThyInputModule } from 'ngx-tethys/input';
import { ThyAutocompleteComponent } from './autocomplete.component';
import { ThyLabelModule } from 'ngx-tethys/label';
import { OverlayModule } from '@angular/cdk/overlay';
import { ThyLoadingModule } from 'ngx-tethys/loading';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyEmptyModule } from 'ngx-tethys/empty';
import { ThyAutocompleteContainerComponent } from './overlay/autocomplete-container.component';
import { THY_AUTOCOMPLETE_DEFAULT_CONFIG_PROVIDER } from './overlay/autocomplete.config';
import { ThyOptionModule } from 'ngx-tethys/shared';
import { PortalModule } from '@angular/cdk/portal';
export class ThyAutocompleteModule {
}
ThyAutocompleteModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ThyInputModule,
                    ThyLabelModule,
                    OverlayModule,
                    PortalModule,
                    ThyLoadingModule,
                    ThySharedModule,
                    ThyIconModule,
                    ThyEmptyModule,
                    ThyOptionModule
                ],
                declarations: [ThyAutocompleteTriggerDirective, ThyAutocompleteComponent, ThyAutocompleteContainerComponent],
                entryComponents: [ThyAutocompleteContainerComponent],
                exports: [ThyAutocompleteTriggerDirective, ThyAutocompleteComponent, ThyAutocompleteContainerComponent, ThyOptionModule],
                providers: [THY_AUTOCOMPLETE_DEFAULT_CONFIG_PROVIDER]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2F1dG9jb21wbGV0ZS9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQy9GLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFxQm5ELE1BQU0sT0FBTyxxQkFBcUI7OztZQW5CakMsUUFBUSxTQUFDO2dCQUNOLE9BQU8sRUFBRTtvQkFDTCxZQUFZO29CQUNaLFdBQVc7b0JBQ1gsY0FBYztvQkFDZCxjQUFjO29CQUNkLGFBQWE7b0JBQ2IsWUFBWTtvQkFDWixnQkFBZ0I7b0JBQ2hCLGVBQWU7b0JBQ2YsYUFBYTtvQkFDYixjQUFjO29CQUNkLGVBQWU7aUJBQ2xCO2dCQUNELFlBQVksRUFBRSxDQUFDLCtCQUErQixFQUFFLHdCQUF3QixFQUFFLGlDQUFpQyxDQUFDO2dCQUM1RyxlQUFlLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztnQkFDcEQsT0FBTyxFQUFFLENBQUMsK0JBQStCLEVBQUUsd0JBQXdCLEVBQUUsaUNBQWlDLEVBQUUsZUFBZSxDQUFDO2dCQUN4SCxTQUFTLEVBQUUsQ0FBQyx3Q0FBd0MsQ0FBQzthQUN4RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBUaHlBdXRvY29tcGxldGVUcmlnZ2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9hdXRvY29tcGxldGUudHJpZ2dlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGh5SW5wdXRNb2R1bGUgfSBmcm9tICduZ3gtdGV0aHlzL2lucHV0JztcbmltcG9ydCB7IFRoeUF1dG9jb21wbGV0ZUNvbXBvbmVudCB9IGZyb20gJy4vYXV0b2NvbXBsZXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaHlMYWJlbE1vZHVsZSB9IGZyb20gJ25neC10ZXRoeXMvbGFiZWwnO1xuaW1wb3J0IHsgT3ZlcmxheU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFRoeUxvYWRpbmdNb2R1bGUgfSBmcm9tICduZ3gtdGV0aHlzL2xvYWRpbmcnO1xuaW1wb3J0IHsgVGh5U2hhcmVkTW9kdWxlIH0gZnJvbSAnbmd4LXRldGh5cy9zaGFyZWQnO1xuaW1wb3J0IHsgVGh5SWNvbk1vZHVsZSB9IGZyb20gJ25neC10ZXRoeXMvaWNvbic7XG5pbXBvcnQgeyBUaHlFbXB0eU1vZHVsZSB9IGZyb20gJ25neC10ZXRoeXMvZW1wdHknO1xuaW1wb3J0IHsgVGh5QXV0b2NvbXBsZXRlQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9vdmVybGF5L2F1dG9jb21wbGV0ZS1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRIWV9BVVRPQ09NUExFVEVfREVGQVVMVF9DT05GSUdfUFJPVklERVIgfSBmcm9tICcuL292ZXJsYXkvYXV0b2NvbXBsZXRlLmNvbmZpZyc7XG5pbXBvcnQgeyBUaHlPcHRpb25Nb2R1bGUgfSBmcm9tICduZ3gtdGV0aHlzL3NoYXJlZCc7XG5pbXBvcnQgeyBQb3J0YWxNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFRoeUlucHV0TW9kdWxlLFxuICAgICAgICBUaHlMYWJlbE1vZHVsZSxcbiAgICAgICAgT3ZlcmxheU1vZHVsZSxcbiAgICAgICAgUG9ydGFsTW9kdWxlLFxuICAgICAgICBUaHlMb2FkaW5nTW9kdWxlLFxuICAgICAgICBUaHlTaGFyZWRNb2R1bGUsXG4gICAgICAgIFRoeUljb25Nb2R1bGUsXG4gICAgICAgIFRoeUVtcHR5TW9kdWxlLFxuICAgICAgICBUaHlPcHRpb25Nb2R1bGVcbiAgICBdLFxuICAgIGRlY2xhcmF0aW9uczogW1RoeUF1dG9jb21wbGV0ZVRyaWdnZXJEaXJlY3RpdmUsIFRoeUF1dG9jb21wbGV0ZUNvbXBvbmVudCwgVGh5QXV0b2NvbXBsZXRlQ29udGFpbmVyQ29tcG9uZW50XSxcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtUaHlBdXRvY29tcGxldGVDb250YWluZXJDb21wb25lbnRdLFxuICAgIGV4cG9ydHM6IFtUaHlBdXRvY29tcGxldGVUcmlnZ2VyRGlyZWN0aXZlLCBUaHlBdXRvY29tcGxldGVDb21wb25lbnQsIFRoeUF1dG9jb21wbGV0ZUNvbnRhaW5lckNvbXBvbmVudCwgVGh5T3B0aW9uTW9kdWxlXSxcbiAgICBwcm92aWRlcnM6IFtUSFlfQVVUT0NPTVBMRVRFX0RFRkFVTFRfQ09ORklHX1BST1ZJREVSXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlBdXRvY29tcGxldGVNb2R1bGUge31cbiJdfQ==
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ThyAutocompleteTriggerDirective } from './autocomplete.trigger.directive';
import { ThyInputModule } from 'ngx-tethys/input';
import { ThyAutocompleteComponent } from './autocomplete.component';
import { ThyLabelModule } from 'ngx-tethys/label';
import { OverlayModule } from '@angular/cdk/overlay';
import { ThyLoadingModule } from 'ngx-tethys/loading';
import { ThySharedModule } from 'ngx-tethys/shared';
import { ThyIconModule } from 'ngx-tethys/icon';
import { ThyEmptyModule } from 'ngx-tethys/empty';
import { ThyAutocompleteContainerComponent } from './overlay/autocomplete-container.component';
import { THY_AUTOCOMPLETE_DEFAULT_CONFIG_PROVIDER } from './overlay/autocomplete.config';
import { ThyOptionModule } from 'ngx-tethys/shared';
import { PortalModule } from '@angular/cdk/portal';
import * as ɵngcc0 from '@angular/core';
export class ThyAutocompleteModule {
}
ThyAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyAutocompleteModule });
ThyAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyAutocompleteModule_Factory(t) { return new (t || ThyAutocompleteModule)(); }, providers: [THY_AUTOCOMPLETE_DEFAULT_CONFIG_PROVIDER], imports: [[
            CommonModule,
            FormsModule,
            ThyInputModule,
            ThyLabelModule,
            OverlayModule,
            PortalModule,
            ThyLoadingModule,
            ThySharedModule,
            ThyIconModule,
            ThyEmptyModule,
            ThyOptionModule
        ], ThyOptionModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyAutocompleteModule, { declarations: function () { return [ThyAutocompleteTriggerDirective, ThyAutocompleteComponent, ThyAutocompleteContainerComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        ThyInputModule,
        ThyLabelModule,
        OverlayModule,
        PortalModule,
        ThyLoadingModule,
        ThySharedModule,
        ThyIconModule,
        ThyEmptyModule,
        ThyOptionModule]; }, exports: function () { return [ThyAutocompleteTriggerDirective, ThyAutocompleteComponent, ThyAutocompleteContainerComponent, ThyOptionModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyAutocompleteModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ThyInputModule,
                    ThyLabelModule,
                    OverlayModule,
                    PortalModule,
                    ThyLoadingModule,
                    ThySharedModule,
                    ThyIconModule,
                    ThyEmptyModule,
                    ThyOptionModule
                ],
                declarations: [ThyAutocompleteTriggerDirective, ThyAutocompleteComponent, ThyAutocompleteContainerComponent],
                entryComponents: [ThyAutocompleteContainerComponent],
                exports: [ThyAutocompleteTriggerDirective, ThyAutocompleteComponent, ThyAutocompleteContainerComponent, ThyOptionModule],
                providers: [THY_AUTOCOMPLETE_DEFAULT_CONFIG_PROVIDER]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXV0b2NvbXBsZXRlL21vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbkYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDL0YsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFxQm5ELE1BQU0sT0FBTyxxQkFBcUI7QUFBRztpREFuQnBDLFFBQVEsU0FBQyxrQkFDTjtJQUFPLEVBQUUsc0JBQ0wsWUFBWSxzQkFDWixXQUFXLHNCQUNYLGNBQWMsc0JBQ2QsY0FBYyxzQkFDZCxhQUFhLHNCQUNiLFlBQVk7ZUFDWjtLQUFnQjtFQUNoQixlQUFlO1dBQ2YsYUFBYTtrQkFDYjtLQUFjO0NBQ2QsZUFBZTtJQUNsQixrQkFDRDtLQUFZLEVBQUUsQ0FBQztZQUErQixFQUFFO1VBQXdCLEVBQUU7aUJBQWlDLENBQUM7SUFDNUcsZUFBZSxFQUFFLENBQUMsaUNBQWlDLENBQUMsa0JBQ3BELE9BQU8sRUFBRSxDQUFDLCtCQUErQixFQUFFLHdCQUF3QixFQUFFLGlDQUFpQyxFQUFFLGVBQWUsQ0FBQyxrQkFDeEgsU0FBUyxFQUFFLENBQUMsd0NBQXdDLENBQUMsY0FDeEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVGh5QXV0b2NvbXBsZXRlVHJpZ2dlckRpcmVjdGl2ZSB9IGZyb20gJy4vYXV0b2NvbXBsZXRlLnRyaWdnZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRoeUlucHV0TW9kdWxlIH0gZnJvbSAnbmd4LXRldGh5cy9pbnB1dCc7XG5pbXBvcnQgeyBUaHlBdXRvY29tcGxldGVDb21wb25lbnQgfSBmcm9tICcuL2F1dG9jb21wbGV0ZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGh5TGFiZWxNb2R1bGUgfSBmcm9tICduZ3gtdGV0aHlzL2xhYmVsJztcbmltcG9ydCB7IE92ZXJsYXlNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBUaHlMb2FkaW5nTW9kdWxlIH0gZnJvbSAnbmd4LXRldGh5cy9sb2FkaW5nJztcbmltcG9ydCB7IFRoeVNoYXJlZE1vZHVsZSB9IGZyb20gJ25neC10ZXRoeXMvc2hhcmVkJztcbmltcG9ydCB7IFRoeUljb25Nb2R1bGUgfSBmcm9tICduZ3gtdGV0aHlzL2ljb24nO1xuaW1wb3J0IHsgVGh5RW1wdHlNb2R1bGUgfSBmcm9tICduZ3gtdGV0aHlzL2VtcHR5JztcbmltcG9ydCB7IFRoeUF1dG9jb21wbGV0ZUNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vb3ZlcmxheS9hdXRvY29tcGxldGUtY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUSFlfQVVUT0NPTVBMRVRFX0RFRkFVTFRfQ09ORklHX1BST1ZJREVSIH0gZnJvbSAnLi9vdmVybGF5L2F1dG9jb21wbGV0ZS5jb25maWcnO1xuaW1wb3J0IHsgVGh5T3B0aW9uTW9kdWxlIH0gZnJvbSAnbmd4LXRldGh5cy9zaGFyZWQnO1xuaW1wb3J0IHsgUG9ydGFsTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBUaHlJbnB1dE1vZHVsZSxcbiAgICAgICAgVGh5TGFiZWxNb2R1bGUsXG4gICAgICAgIE92ZXJsYXlNb2R1bGUsXG4gICAgICAgIFBvcnRhbE1vZHVsZSxcbiAgICAgICAgVGh5TG9hZGluZ01vZHVsZSxcbiAgICAgICAgVGh5U2hhcmVkTW9kdWxlLFxuICAgICAgICBUaHlJY29uTW9kdWxlLFxuICAgICAgICBUaHlFbXB0eU1vZHVsZSxcbiAgICAgICAgVGh5T3B0aW9uTW9kdWxlXG4gICAgXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtUaHlBdXRvY29tcGxldGVUcmlnZ2VyRGlyZWN0aXZlLCBUaHlBdXRvY29tcGxldGVDb21wb25lbnQsIFRoeUF1dG9jb21wbGV0ZUNvbnRhaW5lckNvbXBvbmVudF0sXG4gICAgZW50cnlDb21wb25lbnRzOiBbVGh5QXV0b2NvbXBsZXRlQ29udGFpbmVyQ29tcG9uZW50XSxcbiAgICBleHBvcnRzOiBbVGh5QXV0b2NvbXBsZXRlVHJpZ2dlckRpcmVjdGl2ZSwgVGh5QXV0b2NvbXBsZXRlQ29tcG9uZW50LCBUaHlBdXRvY29tcGxldGVDb250YWluZXJDb21wb25lbnQsIFRoeU9wdGlvbk1vZHVsZV0sXG4gICAgcHJvdmlkZXJzOiBbVEhZX0FVVE9DT01QTEVURV9ERUZBVUxUX0NPTkZJR19QUk9WSURFUl1cbn0pXG5leHBvcnQgY2xhc3MgVGh5QXV0b2NvbXBsZXRlTW9kdWxlIHt9XG4iXX0=
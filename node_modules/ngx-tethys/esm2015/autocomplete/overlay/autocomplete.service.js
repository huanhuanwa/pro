import { Overlay, ScrollDispatcher, OverlayContainer, FlexibleConnectedPositionStrategy } from '@angular/cdk/overlay';
import { Injectable, Injector, Inject, NgZone } from '@angular/core';
import { coerceElement, coerceArray } from '@angular/cdk/coercion';
import { ComponentPortal } from '@angular/cdk/portal';
import { ThyAutocompleteContainerComponent } from './autocomplete-container.component';
import { ThyAutocompleteConfig, THY_AUTOCOMPLETE_DEFAULT_CONFIG } from './autocomplete.config';
import { ThyAutocompleteRef, ThyInternalAutocompleteRef } from './autocomplete-ref';
import { Directionality } from '@angular/cdk/bidi';
import { of, Subject } from 'rxjs';
import { getFlexiblePositions, ThyAbstractOverlayService } from 'ngx-tethys/core';
import { takeUntil } from 'rxjs/operators';
import { autocompleteUpperOverlayOptions } from './autocomplete.options';
import { ViewportRuler } from '@angular/cdk/scrolling';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "./autocomplete.config";
import * as i3 from "@angular/cdk/scrolling";
import * as i4 from "@angular/common";
import * as i5 from "@angular/cdk/platform";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
import * as ɵngcc2 from '@angular/cdk/scrolling';
import * as ɵngcc3 from '@angular/cdk/platform';
import * as ɵngcc4 from './autocomplete.config';
export class ThyAutocompleteService extends ThyAbstractOverlayService {
    constructor(overlay, injector, defaultConfig, scrollDispatcher, ngZone, _viewportRuler, _document, _platform, _overlayContainer) {
        super(autocompleteUpperOverlayOptions, overlay, injector, defaultConfig);
        this.scrollDispatcher = scrollDispatcher;
        this.ngZone = ngZone;
        this._viewportRuler = _viewportRuler;
        this._document = _document;
        this._platform = _platform;
        this._overlayContainer = _overlayContainer;
        this.ngUnsubscribe$ = new Subject();
        this.originInstancesMap = new Map();
    }
    buildPositionStrategy(config) {
        const positionStrategy = new FlexibleConnectedPositionStrategy(config.origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);
        const positions = getFlexiblePositions(config.placement, config.offset, 'thy-autocomplete');
        positionStrategy.withPositions(positions);
        positionStrategy.withGrowAfterOpen(true);
        positionStrategy.positionChanges.pipe(takeUntil(this.ngUnsubscribe$)).subscribe(change => {
            if (change.scrollableViewProperties.isOverlayClipped) {
                // After position changes occur and the overlay is clipped by
                // a parent scrollable then close the tooltip.
                this.ngZone.run(() => this.close());
            }
        });
        return positionStrategy;
    }
    buildOverlayConfig(config) {
        const strategy = this.buildPositionStrategy(config);
        const overlayConfig = this.buildBaseOverlayConfig(config);
        overlayConfig.positionStrategy = strategy;
        overlayConfig.scrollStrategy = config.scrollStrategy || this.overlay.scrollStrategies.block();
        overlayConfig.width = config.width;
        return overlayConfig;
    }
    attachUpperOverlayContainer(overlay, config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injector = Injector.create({
            parent: userInjector || this.injector,
            providers: [{ provide: ThyAutocompleteConfig, useValue: config }]
        });
        const containerPortal = new ComponentPortal(ThyAutocompleteContainerComponent, config.viewContainerRef, injector);
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    createUpperOverlayRef(overlayRef, containerInstance, config) {
        return new ThyInternalAutocompleteRef(overlayRef, containerInstance, config);
    }
    createInjector(config, autocompleteRef, autocompleteContainer) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injectionTokens = [
            {
                provide: ThyAutocompleteContainerComponent,
                useValue: autocompleteContainer
            },
            {
                provide: ThyAutocompleteRef,
                useValue: autocompleteRef
            }
        ];
        if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {
            injectionTokens.push({
                provide: Directionality,
                useValue: {
                    value: config.direction,
                    change: of()
                }
            });
        }
        return Injector.create({ parent: userInjector || this.injector, providers: injectionTokens });
    }
    originElementAddActiveClass(config) {
        if (config.originActiveClass) {
            coerceElement(config.origin).classList.add(...coerceArray(config.originActiveClass));
        }
    }
    originElementRemoveActiveClass(config) {
        if (config.originActiveClass) {
            coerceElement(config.origin).classList.remove(...coerceArray(config.originActiveClass));
        }
    }
    open(componentOrTemplateRef, config) {
        const originElement = coerceElement(config.origin);
        const autocompleteRef = this.openUpperOverlay(componentOrTemplateRef, config);
        config = autocompleteRef.containerInstance.config;
        autocompleteRef.afterClosed().subscribe(() => {
            this.originElementRemoveActiveClass(config);
            this.originInstancesMap.delete(originElement);
        });
        this.originElementAddActiveClass(config);
        this.originInstancesMap.set(originElement, {
            config,
            autocompleteRef
        });
        return autocompleteRef;
    }
    ngOnDestroy() {
        this.dispose();
    }
}
ThyAutocompleteService.ɵfac = function ThyAutocompleteService_Factory(t) { return new (t || ThyAutocompleteService)(ɵngcc0.ɵɵinject(ɵngcc1.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(THY_AUTOCOMPLETE_DEFAULT_CONFIG), ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc2.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Platform), ɵngcc0.ɵɵinject(ɵngcc1.OverlayContainer)); };
ThyAutocompleteService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThyAutocompleteService_Factory() { return new ThyAutocompleteService(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i2.THY_AUTOCOMPLETE_DEFAULT_CONFIG), i0.ɵɵinject(i3.ScrollDispatcher), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i3.ViewportRuler), i0.ɵɵinject(i4.DOCUMENT), i0.ɵɵinject(i5.Platform), i0.ɵɵinject(i1.OverlayContainer)); }, token: ThyAutocompleteService, providedIn: "root" });
ThyAutocompleteService.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: ThyAutocompleteConfig, decorators: [{ type: Inject, args: [THY_AUTOCOMPLETE_DEFAULT_CONFIG,] }] },
    { type: ScrollDispatcher },
    { type: NgZone },
    { type: ViewportRuler },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Platform },
    { type: OverlayContainer }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyAutocompleteService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.ThyAutocompleteConfig, decorators: [{
                type: Inject,
                args: [THY_AUTOCOMPLETE_DEFAULT_CONFIG]
            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ViewportRuler }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc3.Platform }, { type: ɵngcc1.OverlayContainer }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
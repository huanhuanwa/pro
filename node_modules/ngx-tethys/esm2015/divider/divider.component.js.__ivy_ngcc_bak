import { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';
export class ThyDividerComponent {
    constructor() {
        this.thyStyle = 'solid';
        this.thyTextDirection = 'center';
    }
    set thyText(value) {
        if (value instanceof TemplateRef) {
            this.templateContent = value;
        }
        else {
            this.textContent = value;
        }
    }
}
ThyDividerComponent.decorators = [
    { type: Component, args: [{
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                selector: 'thy-divider',
                template: `
        <div *ngIf="templateContent" class="thy-divider-inner-template">
            <ng-template *ngTemplateOutlet="templateContent"></ng-template>
        </div>

        <span *ngIf="textContent" class="thy-divider-inner-text">{{ textContent }}</span>
    `,
                host: {
                    '[class.thy-divider]': `true`,
                    '[class.thy-divider-horizontal]': `!thyVertical`,
                    '[class.thy-divider-vertical]': `thyVertical`,
                    '[class.thy-divider-with-content]': `textContent || templateContent`,
                    '[class.thy-divider-with-content-left]': `(textContent || templateContent) && thyTextDirection === 'left'`,
                    '[class.thy-divider-with-content-right]': `(textContent || templateContent) && thyTextDirection === 'right'`,
                    '[class.thy-divider-with-content-center]': `(textContent || templateContent) && thyTextDirection === 'center'`,
                    '[class.thy-divider-solid]': `thyStyle === 'solid'`,
                    '[class.thy-divider-dashed]': `thyStyle === 'dashed'`
                }
            },] }
];
ThyDividerComponent.ctorParameters = () => [];
ThyDividerComponent.propDecorators = {
    thyText: [{ type: Input }],
    thyVertical: [{ type: Input }],
    thyStyle: [{ type: Input }],
    thyTextDirection: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGl2aWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGl2aWRlci9kaXZpZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUE2QmpGLE1BQU0sT0FBTyxtQkFBbUI7SUFtQjVCO1FBSlMsYUFBUSxHQUFvQixPQUFPLENBQUM7UUFFcEMscUJBQWdCLEdBQTRCLFFBQVEsQ0FBQztJQUUvQyxDQUFDO0lBZGhCLElBQWEsT0FBTyxDQUFDLEtBQXdDO1FBQ3pELElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtZQUM5QixJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztTQUNoQzthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDNUI7SUFDTCxDQUFDOzs7WUFsQ0osU0FBUyxTQUFDO2dCQUNQLG1CQUFtQixFQUFFLEtBQUs7Z0JBQzFCLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFOzs7Ozs7S0FNVDtnQkFDRCxJQUFJLEVBQUU7b0JBQ0YscUJBQXFCLEVBQUUsTUFBTTtvQkFDN0IsZ0NBQWdDLEVBQUUsY0FBYztvQkFDaEQsOEJBQThCLEVBQUUsYUFBYTtvQkFDN0Msa0NBQWtDLEVBQUUsZ0NBQWdDO29CQUNwRSx1Q0FBdUMsRUFBRSxpRUFBaUU7b0JBQzFHLHdDQUF3QyxFQUFFLGtFQUFrRTtvQkFDNUcseUNBQXlDLEVBQUUsbUVBQW1FO29CQUM5RywyQkFBMkIsRUFBRSxzQkFBc0I7b0JBQ25ELDRCQUE0QixFQUFFLHVCQUF1QjtpQkFDeEQ7YUFDSjs7OztzQkFNSSxLQUFLOzBCQVFMLEtBQUs7dUJBRUwsS0FBSzsrQkFFTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIFRoeURpdmlkZXJTdHlsZSA9ICdzb2xpZCcgfCAnZGFzaGVkJztcblxuZXhwb3J0IHR5cGUgVGh5RGl2aWRlclRleHREaXJlY3Rpb24gPSAnbGVmdCcgfCAncmlnaHQnIHwgJ2NlbnRlcic7XG5cbkBDb21wb25lbnQoe1xuICAgIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgc2VsZWN0b3I6ICd0aHktZGl2aWRlcicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiAqbmdJZj1cInRlbXBsYXRlQ29udGVudFwiIGNsYXNzPVwidGh5LWRpdmlkZXItaW5uZXItdGVtcGxhdGVcIj5cbiAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdUZW1wbGF0ZU91dGxldD1cInRlbXBsYXRlQ29udGVudFwiPjwvbmctdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxzcGFuICpuZ0lmPVwidGV4dENvbnRlbnRcIiBjbGFzcz1cInRoeS1kaXZpZGVyLWlubmVyLXRleHRcIj57eyB0ZXh0Q29udGVudCB9fTwvc3Bhbj5cbiAgICBgLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1tjbGFzcy50aHktZGl2aWRlcl0nOiBgdHJ1ZWAsXG4gICAgICAgICdbY2xhc3MudGh5LWRpdmlkZXItaG9yaXpvbnRhbF0nOiBgIXRoeVZlcnRpY2FsYCxcbiAgICAgICAgJ1tjbGFzcy50aHktZGl2aWRlci12ZXJ0aWNhbF0nOiBgdGh5VmVydGljYWxgLFxuICAgICAgICAnW2NsYXNzLnRoeS1kaXZpZGVyLXdpdGgtY29udGVudF0nOiBgdGV4dENvbnRlbnQgfHwgdGVtcGxhdGVDb250ZW50YCxcbiAgICAgICAgJ1tjbGFzcy50aHktZGl2aWRlci13aXRoLWNvbnRlbnQtbGVmdF0nOiBgKHRleHRDb250ZW50IHx8IHRlbXBsYXRlQ29udGVudCkgJiYgdGh5VGV4dERpcmVjdGlvbiA9PT0gJ2xlZnQnYCxcbiAgICAgICAgJ1tjbGFzcy50aHktZGl2aWRlci13aXRoLWNvbnRlbnQtcmlnaHRdJzogYCh0ZXh0Q29udGVudCB8fCB0ZW1wbGF0ZUNvbnRlbnQpICYmIHRoeVRleHREaXJlY3Rpb24gPT09ICdyaWdodCdgLFxuICAgICAgICAnW2NsYXNzLnRoeS1kaXZpZGVyLXdpdGgtY29udGVudC1jZW50ZXJdJzogYCh0ZXh0Q29udGVudCB8fCB0ZW1wbGF0ZUNvbnRlbnQpICYmIHRoeVRleHREaXJlY3Rpb24gPT09ICdjZW50ZXInYCxcbiAgICAgICAgJ1tjbGFzcy50aHktZGl2aWRlci1zb2xpZF0nOiBgdGh5U3R5bGUgPT09ICdzb2xpZCdgLFxuICAgICAgICAnW2NsYXNzLnRoeS1kaXZpZGVyLWRhc2hlZF0nOiBgdGh5U3R5bGUgPT09ICdkYXNoZWQnYFxuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgVGh5RGl2aWRlckNvbXBvbmVudCB7XG4gICAgdGVtcGxhdGVDb250ZW50OiBUZW1wbGF0ZVJlZjxIVE1MRWxlbWVudD47XG5cbiAgICB0ZXh0Q29udGVudDogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgc2V0IHRoeVRleHQodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPEhUTUxFbGVtZW50Pikge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZUNvbnRlbnQgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpIHRoeVZlcnRpY2FsOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgdGh5U3R5bGU6IFRoeURpdmlkZXJTdHlsZSA9ICdzb2xpZCc7XG5cbiAgICBASW5wdXQoKSB0aHlUZXh0RGlyZWN0aW9uOiBUaHlEaXZpZGVyVGV4dERpcmVjdGlvbiA9ICdjZW50ZXInO1xuXG4gICAgY29uc3RydWN0b3IoKSB7fVxufVxuIl19
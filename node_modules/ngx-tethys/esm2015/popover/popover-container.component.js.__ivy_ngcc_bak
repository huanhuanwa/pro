import { Component, ViewChild, Inject, ElementRef, EventEmitter, HostListener, ChangeDetectorRef, NgZone } from '@angular/core';
import { CdkPortalOutlet } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ThyPopoverConfig } from './popover.config';
import { thyPopoverAnimations } from './popover-animations';
import { ThyAbstractOverlayContainer } from 'ngx-tethys/core';
import { popoverUpperOverlayOptions } from './popover.options';
import { timer } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { ThyClickDispatcher } from 'ngx-tethys/core';
export class ThyPopoverContainerComponent extends ThyAbstractOverlayContainer {
    constructor(elementRef, document, config, changeDetectorRef, thyClickDispatcher, ngZone) {
        super(popoverUpperOverlayOptions, changeDetectorRef);
        this.elementRef = elementRef;
        this.document = document;
        this.config = config;
        this.thyClickDispatcher = thyClickDispatcher;
        this.ngZone = ngZone;
        /** State of the popover animation. */
        this.animationState = 'enter';
        /** Emits when an animation state changes. */
        this.animationStateChanged = new EventEmitter();
        this.insideClicked = new EventEmitter();
        this.outsideClicked = new EventEmitter();
        this.animationOpeningDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === 'enter';
        }));
        this.animationClosingDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === 'exit';
        }));
    }
    beforeAttachPortal() { }
    ngAfterViewInit() {
        if (this.config.outsideClosable && !this.config.hasBackdrop) {
            timer().subscribe(() => {
                this.thyClickDispatcher
                    .clicked()
                    .pipe(takeUntil(this.animationClosingDone))
                    .subscribe((event) => {
                    if (!this.elementRef.nativeElement.contains(event.target)) {
                        this.ngZone.run(() => {
                            this.outsideClicked.emit();
                        });
                    }
                });
            });
        }
    }
    /** Callback, invoked whenever an animation on the host completes. */
    onAnimationDone(event) {
        // if (event.toState === 'void') {
        //     this.trapFocus();
        // } else if (event.toState === 'exit') {
        //     this.restoreFocus();
        // }
        this.animationStateChanged.emit(event);
    }
    /** Callback, invoked when an animation on the host starts. */
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    startExitAnimation() {
        this.animationState = 'exit';
        // Mark the container for check so it can react if the
        // view container is using OnPush change detection.
        this.changeDetectorRef.markForCheck();
    }
    onInsideClick() {
        if (this.config.insideClosable) {
            this.insideClicked.emit();
        }
    }
    ngOnDestroy() {
        super.destroy();
    }
}
ThyPopoverContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-popover-container',
                template: "<ng-template cdkPortalOutlet></ng-template>\n",
                animations: [thyPopoverAnimations.popoverContainer],
                host: {
                    class: 'thy-popover-container',
                    tabindex: '-1',
                    '[attr.role]': `'popover'`,
                    '[@popoverContainer]': 'animationState',
                    '(@popoverContainer.start)': 'onAnimationStart($event)',
                    '(@popoverContainer.done)': 'onAnimationDone($event)'
                }
            },] }
];
ThyPopoverContainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ThyPopoverConfig },
    { type: ChangeDetectorRef },
    { type: ThyClickDispatcher },
    { type: NgZone }
];
ThyPopoverContainerComponent.propDecorators = {
    portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }],
    onInsideClick: [{ type: HostListener, args: ['click', [],] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Directive, ElementRef, NgZone, Input, ViewContainerRef, HostBinding } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { FocusMonitor } from '@angular/cdk/a11y';
import { ThyOverlayDirectiveBase } from 'ngx-tethys/core';
import { ThyPopover } from './popover.service';
import { ThyPopoverConfig } from './popover.config';
export class ThyPopoverDirective extends ThyOverlayDirectiveBase {
    constructor(elementRef, platform, focusMonitor, ngZone, popover, viewContainerRef) {
        super(elementRef, platform, focusMonitor, ngZone);
        this.popover = popover;
        this.viewContainerRef = viewContainerRef;
        this.popoverOpened = false;
        this.showDelay = 0;
        this.hideDelay = 0;
        this.tooltipPin = true;
    }
    set thyTrigger(trigger) {
        this.trigger = trigger;
    }
    ngOnInit() {
        this.initialize();
    }
    createOverlay() {
        const config = Object.assign({
            origin: this.elementRef.nativeElement,
            hasBackdrop: this.trigger === 'click' || this.trigger === 'focus',
            viewContainerRef: this.viewContainerRef,
            placement: this.thyPlacement,
            offset: this.thyOffset
        }, this.thyConfig);
        this.popoverRef = this.popover.open(this.content, config);
        this.popoverRef.afterClosed().subscribe(() => {
            this.popoverOpened = false;
        });
        return this.popoverRef.getOverlayRef();
    }
    show(delay = this.showDelay) {
        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
            this.hideTimeoutId = null;
        }
        if (this.disabled || (this.overlayRef && this.overlayRef.hasAttached())) {
            return;
        }
        if (this.trigger !== 'hover') {
            delay = 0;
        }
        this.showTimeoutId = setTimeout(() => {
            const overlayRef = this.createOverlay();
            this.overlayRef = overlayRef;
            this.popoverOpened = true;
            this.showTimeoutId = null;
        }, delay);
    }
    hide(delay = this.hideDelay) {
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
            this.showTimeoutId = null;
        }
        this.hideTimeoutId = setTimeout(() => {
            if (this.popoverRef) {
                this.popoverRef.close();
            }
            this.hideTimeoutId = null;
        }, delay);
    }
    ngOnDestroy() {
        this.dispose();
    }
}
ThyPopoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyPopover]'
            },] }
];
ThyPopoverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Platform },
    { type: FocusMonitor },
    { type: NgZone },
    { type: ThyPopover },
    { type: ViewContainerRef }
];
ThyPopoverDirective.propDecorators = {
    popoverOpened: [{ type: HostBinding, args: [`class.thy-popover-opened`,] }],
    content: [{ type: Input, args: ['thyPopover',] }],
    thyTrigger: [{ type: Input }],
    thyPlacement: [{ type: Input }],
    thyOffset: [{ type: Input }],
    thyConfig: [{ type: Input }],
    showDelay: [{ type: Input, args: ['thyShowDelay',] }],
    hideDelay: [{ type: Input, args: ['thyHideDelay',] }]
};
//# sourceMappingURL=data:application/json;base64,
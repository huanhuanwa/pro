import { Component, ViewChild, Inject, ElementRef, EventEmitter, HostListener, ChangeDetectorRef, NgZone } from '@angular/core';
import { CdkPortalOutlet } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ThyPopoverConfig } from './popover.config';
import { thyPopoverAnimations } from './popover-animations';
import { ThyAbstractOverlayContainer } from 'ngx-tethys/core';
import { popoverUpperOverlayOptions } from './popover.options';
import { timer } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { ThyClickDispatcher } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './popover.config';
import * as ɵngcc2 from 'ngx-tethys/core';
import * as ɵngcc3 from '@angular/cdk/portal';

function ThyPopoverContainerComponent_ng_template_0_Template(rf, ctx) { }
export class ThyPopoverContainerComponent extends ThyAbstractOverlayContainer {
    constructor(elementRef, document, config, changeDetectorRef, thyClickDispatcher, ngZone) {
        super(popoverUpperOverlayOptions, changeDetectorRef);
        this.elementRef = elementRef;
        this.document = document;
        this.config = config;
        this.thyClickDispatcher = thyClickDispatcher;
        this.ngZone = ngZone;
        /** State of the popover animation. */
        this.animationState = 'enter';
        /** Emits when an animation state changes. */
        this.animationStateChanged = new EventEmitter();
        this.insideClicked = new EventEmitter();
        this.outsideClicked = new EventEmitter();
        this.animationOpeningDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === 'enter';
        }));
        this.animationClosingDone = this.animationStateChanged.pipe(filter((event) => {
            return event.phaseName === 'done' && event.toState === 'exit';
        }));
    }
    beforeAttachPortal() { }
    ngAfterViewInit() {
        if (this.config.outsideClosable && !this.config.hasBackdrop) {
            timer().subscribe(() => {
                this.thyClickDispatcher
                    .clicked()
                    .pipe(takeUntil(this.animationClosingDone))
                    .subscribe((event) => {
                    if (!this.elementRef.nativeElement.contains(event.target)) {
                        this.ngZone.run(() => {
                            this.outsideClicked.emit();
                        });
                    }
                });
            });
        }
    }
    /** Callback, invoked whenever an animation on the host completes. */
    onAnimationDone(event) {
        // if (event.toState === 'void') {
        //     this.trapFocus();
        // } else if (event.toState === 'exit') {
        //     this.restoreFocus();
        // }
        this.animationStateChanged.emit(event);
    }
    /** Callback, invoked when an animation on the host starts. */
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    startExitAnimation() {
        this.animationState = 'exit';
        // Mark the container for check so it can react if the
        // view container is using OnPush change detection.
        this.changeDetectorRef.markForCheck();
    }
    onInsideClick() {
        if (this.config.insideClosable) {
            this.insideClicked.emit();
        }
    }
    ngOnDestroy() {
        super.destroy();
    }
}
ThyPopoverContainerComponent.ɵfac = function ThyPopoverContainerComponent_Factory(t) { return new (t || ThyPopoverContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyPopoverConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyClickDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ThyPopoverContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyPopoverContainerComponent, selectors: [["thy-popover-container"]], viewQuery: function ThyPopoverContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.portalOutlet = _t.first);
    } }, hostAttrs: ["tabindex", "-1", 1, "thy-popover-container"], hostVars: 2, hostBindings: function ThyPopoverContainerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵsyntheticHostListener("@popoverContainer.start", function ThyPopoverContainerComponent_animation_popoverContainer_start_HostBindingHandler($event) { return ctx.onAnimationStart($event); })("@popoverContainer.done", function ThyPopoverContainerComponent_animation_popoverContainer_done_HostBindingHandler($event) { return ctx.onAnimationDone($event); });
        ɵngcc0.ɵɵlistener("click", function ThyPopoverContainerComponent_click_HostBindingHandler() { return ctx.onInsideClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", "popover");
        ɵngcc0.ɵɵsyntheticHostProperty("@popoverContainer", ctx.animationState);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkPortalOutlet", ""]], template: function ThyPopoverContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ThyPopoverContainerComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
    } }, directives: [ɵngcc3.CdkPortalOutlet], encapsulation: 2, data: { animation: [thyPopoverAnimations.popoverContainer] } });
ThyPopoverContainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ThyPopoverConfig },
    { type: ChangeDetectorRef },
    { type: ThyClickDispatcher },
    { type: NgZone }
];
ThyPopoverContainerComponent.propDecorators = {
    portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }],
    onInsideClick: [{ type: HostListener, args: ['click', [],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyPopoverContainerComponent, [{
        type: Component,
        args: [{
                selector: 'thy-popover-container',
                template: "<ng-template cdkPortalOutlet></ng-template>\n",
                animations: [thyPopoverAnimations.popoverContainer],
                host: {
                    class: 'thy-popover-container',
                    tabindex: '-1',
                    '[attr.role]': `'popover'`,
                    '[@popoverContainer]': 'animationState',
                    '(@popoverContainer.start)': 'onAnimationStart($event)',
                    '(@popoverContainer.done)': 'onAnimationDone($event)'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc1.ThyPopoverConfig }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.ThyClickDispatcher }, { type: ɵngcc0.NgZone }]; }, { onInsideClick: [{
            type: HostListener,
            args: ['click', []]
        }], portalOutlet: [{
            type: ViewChild,
            args: [CdkPortalOutlet, { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
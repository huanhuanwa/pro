import { Directive, ElementRef, NgZone, Input, ViewContainerRef, HostBinding } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { FocusMonitor } from '@angular/cdk/a11y';
import { ThyOverlayDirectiveBase } from 'ngx-tethys/core';
import { ThyPopover } from './popover.service';
import { ThyPopoverConfig } from './popover.config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/platform';
import * as ɵngcc2 from '@angular/cdk/a11y';
import * as ɵngcc3 from './popover.service';
export class ThyPopoverDirective extends ThyOverlayDirectiveBase {
    constructor(elementRef, platform, focusMonitor, ngZone, popover, viewContainerRef) {
        super(elementRef, platform, focusMonitor, ngZone);
        this.popover = popover;
        this.viewContainerRef = viewContainerRef;
        this.popoverOpened = false;
        this.showDelay = 0;
        this.hideDelay = 0;
        this.tooltipPin = true;
    }
    set thyTrigger(trigger) {
        this.trigger = trigger;
    }
    ngOnInit() {
        this.initialize();
    }
    createOverlay() {
        const config = Object.assign({
            origin: this.elementRef.nativeElement,
            hasBackdrop: this.trigger === 'click' || this.trigger === 'focus',
            viewContainerRef: this.viewContainerRef,
            placement: this.thyPlacement,
            offset: this.thyOffset
        }, this.thyConfig);
        this.popoverRef = this.popover.open(this.content, config);
        this.popoverRef.afterClosed().subscribe(() => {
            this.popoverOpened = false;
        });
        return this.popoverRef.getOverlayRef();
    }
    show(delay = this.showDelay) {
        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
            this.hideTimeoutId = null;
        }
        if (this.disabled || (this.overlayRef && this.overlayRef.hasAttached())) {
            return;
        }
        if (this.trigger !== 'hover') {
            delay = 0;
        }
        this.showTimeoutId = setTimeout(() => {
            const overlayRef = this.createOverlay();
            this.overlayRef = overlayRef;
            this.popoverOpened = true;
            this.showTimeoutId = null;
        }, delay);
    }
    hide(delay = this.hideDelay) {
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
            this.showTimeoutId = null;
        }
        this.hideTimeoutId = setTimeout(() => {
            if (this.popoverRef) {
                this.popoverRef.close();
            }
            this.hideTimeoutId = null;
        }, delay);
    }
    ngOnDestroy() {
        this.dispose();
    }
}
ThyPopoverDirective.ɵfac = function ThyPopoverDirective_Factory(t) { return new (t || ThyPopoverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ThyPopover), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ThyPopoverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyPopoverDirective, selectors: [["", "thyPopover", ""]], hostVars: 2, hostBindings: function ThyPopoverDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-popover-opened", ctx.popoverOpened);
    } }, inputs: { showDelay: ["thyShowDelay", "showDelay"], hideDelay: ["thyHideDelay", "hideDelay"], thyTrigger: "thyTrigger", content: ["thyPopover", "content"], thyPlacement: "thyPlacement", thyOffset: "thyOffset", thyConfig: "thyConfig" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
ThyPopoverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Platform },
    { type: FocusMonitor },
    { type: NgZone },
    { type: ThyPopover },
    { type: ViewContainerRef }
];
ThyPopoverDirective.propDecorators = {
    popoverOpened: [{ type: HostBinding, args: [`class.thy-popover-opened`,] }],
    content: [{ type: Input, args: ['thyPopover',] }],
    thyTrigger: [{ type: Input }],
    thyPlacement: [{ type: Input }],
    thyOffset: [{ type: Input }],
    thyConfig: [{ type: Input }],
    showDelay: [{ type: Input, args: ['thyShowDelay',] }],
    hideDelay: [{ type: Input, args: ['thyHideDelay',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyPopoverDirective, [{
        type: Directive,
        args: [{
                selector: '[thyPopover]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.ThyPopover }, { type: ɵngcc0.ViewContainerRef }]; }, { popoverOpened: [{
            type: HostBinding,
            args: [`class.thy-popover-opened`]
        }], showDelay: [{
            type: Input,
            args: ['thyShowDelay']
        }], hideDelay: [{
            type: Input,
            args: ['thyHideDelay']
        }], thyTrigger: [{
            type: Input
        }], content: [{
            type: Input,
            args: ['thyPopover']
        }], thyPlacement: [{
            type: Input
        }], thyOffset: [{
            type: Input
        }], thyConfig: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import { MentionAdapter } from './adapter';
export class TextareaMentionAdapter extends MentionAdapter {
    constructor(inputor) {
        super(inputor);
    }
    seekQuery(event, mention) {
        const selectionStart = this.inputor.selectionStart;
        const value = this.inputor.value.replace(/[\r\n]/g, ' ');
        // @123 | @456 => 0(start) => @123
        // @123 @456 | => 5(start) => @456
        const start = value.lastIndexOf(mention.trigger, selectionStart);
        const fistSpaceIndexFromStart = value.indexOf(' ', selectionStart);
        const end = fistSpaceIndexFromStart > -1 ? fistSpaceIndexFromStart : value.length;
        const termWithTrigger = value.substring(start, end);
        const startBeforeHasSpace = start > 0 && value[start - 1] === ' ';
        if ((startBeforeHasSpace || start === 0) && !termWithTrigger.includes(' ') && !termWithTrigger.includes(mention.trigger, 1)) {
            return {
                start: start,
                end: end,
                term: termWithTrigger.substring(mention.trigger.length)
            };
        }
        else {
            return null;
        }
    }
    insertMention(item) {
        if (!this.matchedMention) {
            throw new Error(`matchedMention is null`);
        }
        const insertValue = this.getInsertValue(item);
        const value = this.inputor.value;
        const newValue = [
            value.slice(0, this.matchedMention.query.start),
            insertValue,
            value.slice(this.matchedMention.query.end, value.length)
        ].join('');
        this.inputor.value = newValue;
        this.focus(this.matchedMention.query.start + insertValue.length);
        return newValue;
    }
    getInsertValue(item) {
        if (this.matchedMention.mention.insertTransform) {
            return this.matchedMention.mention.insertTransform(item).trim() + ' ';
        }
        else {
            return `${this.matchedMention.mention.trigger}${item['name']}`.trim() + ' ';
        }
    }
    focus(caretPosition) {
        this.inputor.focus();
        this.inputor.setSelectionRange(caretPosition, caretPosition);
    }
    isEditable() {
        return !this.inputor.readOnly && !this.inputor.disabled;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZW50aW9uL2FkYXB0ZXIvdGV4dGFyZWEuYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUEwQyxNQUFNLFdBQVcsQ0FBQztBQUduRixNQUFNLE9BQU8sc0JBQXVCLFNBQVEsY0FBYztJQUd0RCxZQUFZLE9BQThCO1FBQ3RDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQVksRUFBRSxPQUFnQjtRQUMzQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pELGtDQUFrQztRQUNsQyxrQ0FBa0M7UUFDbEMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sdUJBQXVCLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDbkUsTUFBTSxHQUFHLEdBQUcsdUJBQXVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2xGLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztRQUNsRSxJQUFJLENBQUMsbUJBQW1CLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRTtZQUN6SCxPQUFPO2dCQUNILEtBQUssRUFBRSxLQUFLO2dCQUNaLEdBQUcsRUFBRSxHQUFHO2dCQUNSLElBQUksRUFBRSxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2FBQzFELENBQUM7U0FDTDthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7SUFFTSxhQUFhLENBQUMsSUFBNEI7UUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxNQUFNLEtBQUssR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUN6QyxNQUFNLFFBQVEsR0FBRztZQUNiLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUMvQyxXQUFXO1lBQ1gsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQztTQUMzRCxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakUsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVPLGNBQWMsQ0FBQyxJQUE0QjtRQUMvQyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRTtZQUM3QyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUM7U0FDekU7YUFBTTtZQUNILE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDO1NBQy9FO0lBQ0wsQ0FBQztJQUVPLEtBQUssQ0FBQyxhQUFzQjtRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTyxVQUFVO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDNUQsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVudGlvbkFkYXB0ZXIsIE1lbnRpb25JbnB1dG9yRWxlbWVudCwgU2Vla1F1ZXJ5UmVzdWx0IH0gZnJvbSAnLi9hZGFwdGVyJztcbmltcG9ydCB7IE1lbnRpb24sIE1lbnRpb25EZWZhdWx0RGF0YUl0ZW0gfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIFRleHRhcmVhTWVudGlvbkFkYXB0ZXIgZXh0ZW5kcyBNZW50aW9uQWRhcHRlciB7XG4gICAgaW5wdXRvcjogTWVudGlvbklucHV0b3JFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoaW5wdXRvcjogTWVudGlvbklucHV0b3JFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyKGlucHV0b3IpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZWVrUXVlcnkoZXZlbnQ6IEV2ZW50LCBtZW50aW9uOiBNZW50aW9uKTogU2Vla1F1ZXJ5UmVzdWx0IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnQgPSB0aGlzLmlucHV0b3Iuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnB1dG9yLnZhbHVlLnJlcGxhY2UoL1tcXHJcXG5dL2csICcgJyk7XG4gICAgICAgIC8vIEAxMjMgfCBANDU2ID0+IDAoc3RhcnQpID0+IEAxMjNcbiAgICAgICAgLy8gQDEyMyBANDU2IHwgPT4gNShzdGFydCkgPT4gQDQ1NlxuICAgICAgICBjb25zdCBzdGFydCA9IHZhbHVlLmxhc3RJbmRleE9mKG1lbnRpb24udHJpZ2dlciwgc2VsZWN0aW9uU3RhcnQpO1xuICAgICAgICBjb25zdCBmaXN0U3BhY2VJbmRleEZyb21TdGFydCA9IHZhbHVlLmluZGV4T2YoJyAnLCBzZWxlY3Rpb25TdGFydCk7XG4gICAgICAgIGNvbnN0IGVuZCA9IGZpc3RTcGFjZUluZGV4RnJvbVN0YXJ0ID4gLTEgPyBmaXN0U3BhY2VJbmRleEZyb21TdGFydCA6IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdGVybVdpdGhUcmlnZ2VyID0gdmFsdWUuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICBjb25zdCBzdGFydEJlZm9yZUhhc1NwYWNlID0gc3RhcnQgPiAwICYmIHZhbHVlW3N0YXJ0IC0gMV0gPT09ICcgJztcbiAgICAgICAgaWYgKChzdGFydEJlZm9yZUhhc1NwYWNlIHx8IHN0YXJ0ID09PSAwKSAmJiAhdGVybVdpdGhUcmlnZ2VyLmluY2x1ZGVzKCcgJykgJiYgIXRlcm1XaXRoVHJpZ2dlci5pbmNsdWRlcyhtZW50aW9uLnRyaWdnZXIsIDEpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgICAgICAgICB0ZXJtOiB0ZXJtV2l0aFRyaWdnZXIuc3Vic3RyaW5nKG1lbnRpb24udHJpZ2dlci5sZW5ndGgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgaW5zZXJ0TWVudGlvbihpdGVtOiBNZW50aW9uRGVmYXVsdERhdGFJdGVtKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoZWRNZW50aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1hdGNoZWRNZW50aW9uIGlzIG51bGxgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnNlcnRWYWx1ZSA9IHRoaXMuZ2V0SW5zZXJ0VmFsdWUoaXRlbSk7XG4gICAgICAgIGNvbnN0IHZhbHVlOiBzdHJpbmcgPSB0aGlzLmlucHV0b3IudmFsdWU7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gW1xuICAgICAgICAgICAgdmFsdWUuc2xpY2UoMCwgdGhpcy5tYXRjaGVkTWVudGlvbi5xdWVyeS5zdGFydCksXG4gICAgICAgICAgICBpbnNlcnRWYWx1ZSxcbiAgICAgICAgICAgIHZhbHVlLnNsaWNlKHRoaXMubWF0Y2hlZE1lbnRpb24ucXVlcnkuZW5kLCB2YWx1ZS5sZW5ndGgpXG4gICAgICAgIF0uam9pbignJyk7XG4gICAgICAgIHRoaXMuaW5wdXRvci52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB0aGlzLmZvY3VzKHRoaXMubWF0Y2hlZE1lbnRpb24ucXVlcnkuc3RhcnQgKyBpbnNlcnRWYWx1ZS5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRJbnNlcnRWYWx1ZShpdGVtOiBNZW50aW9uRGVmYXVsdERhdGFJdGVtKSB7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoZWRNZW50aW9uLm1lbnRpb24uaW5zZXJ0VHJhbnNmb3JtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXRjaGVkTWVudGlvbi5tZW50aW9uLmluc2VydFRyYW5zZm9ybShpdGVtKS50cmltKCkgKyAnICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5tYXRjaGVkTWVudGlvbi5tZW50aW9uLnRyaWdnZXJ9JHtpdGVtWyduYW1lJ119YC50cmltKCkgKyAnICc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZvY3VzKGNhcmV0UG9zaXRpb24/OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbnB1dG9yLmZvY3VzKCk7XG4gICAgICAgIHRoaXMuaW5wdXRvci5zZXRTZWxlY3Rpb25SYW5nZShjYXJldFBvc2l0aW9uLCBjYXJldFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRWRpdGFibGUoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pbnB1dG9yLnJlYWRPbmx5ICYmICF0aGlzLmlucHV0b3IuZGlzYWJsZWQ7XG4gICAgfVxufVxuIl19
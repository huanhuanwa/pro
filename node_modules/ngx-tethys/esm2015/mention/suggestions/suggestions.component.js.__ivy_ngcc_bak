import { Component, HostBinding, ElementRef, NgZone } from '@angular/core';
import { Subject, Observable, of } from 'rxjs';
import { debounceTime, switchMap, catchError, take } from 'rxjs/operators';
import { ThyPopoverRef } from 'ngx-tethys/popover';
export class ThyMentionSuggestionsComponent {
    constructor(elementRef, ngZone, popoverRef) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.popoverRef = popoverRef;
        this.suggestionSelect$ = new Subject();
        this.debounce = 150;
        this.loadingDone = true;
        this.search$ = new Subject();
        this.suggestionsClass = true;
        this.search$
            .pipe(switchMap(query => {
            const data = this.mention.search(query.term, this.mention.data);
            if (data instanceof Observable) {
                this.loadingDone = false;
                return data.pipe(debounceTime(this.debounce));
            }
            else {
                return of(data);
            }
        }), catchError(() => {
            this.loadingDone = false;
            return [];
        }))
            .subscribe(data => {
            this.loadingDone = true;
            this.data = data || [];
            if (this.popoverRef) {
                if (this.mention.autoClose && this.data.length === 0) {
                    this.popoverRef.close();
                }
                this.ngZone.onStable.pipe(take(1)).subscribe(() => {
                    this.popoverRef.updatePosition();
                });
            }
        });
    }
    ngOnInit() {
        if (this.mention.popoverClass) {
            this.elementRef.nativeElement.classList.add(this.mention.popoverClass);
        }
    }
    search(query) {
        this.search$.next(query);
    }
    select(item, event) {
        this.suggestionSelect$.next({
            event,
            item
        });
    }
    selectionChange(event) {
        this.select(event.value, event.event);
    }
    ngOnDestroy() {
        this.search$.next();
        this.search$.complete();
    }
}
ThyMentionSuggestionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-mention-suggestions',
                template: "<thy-loading [thyDone]=\"loadingDone\"></thy-loading>\n<ng-container *ngIf=\"loadingDone\">\n  <thy-selection-list\n    *ngIf=\"data?.length > 0; else empty\"\n    thyBindKeyEventContainer=\"body\"\n    thyMultiple=\"false\"\n    thyAutoActiveFirstItem=\"true\"\n    thySpaceKeyEnabled=\"false\"\n    [thyScrollContainer]=\"elementRef\"\n    (thySelectionChange)=\"selectionChange($event)\"\n  >\n    <thy-list-option *ngFor=\"let item of data\" [thyValue]=\"item\">\n      <ng-container *ngIf=\"mention?.displayTemplateRef; else default\">\n        <ng-template *ngTemplateOutlet=\"mention?.displayTemplateRef; context: { $implicit: item }\"></ng-template>\n      </ng-container>\n      <ng-template #default>\n        {{ item['name'] || '' }}\n      </ng-template>\n    </thy-list-option>\n  </thy-selection-list>\n</ng-container>\n<ng-template #empty>\n  <div class=\"text-desc p-3\">\n    {{ mention?.emptyText }}\n  </div>\n</ng-template>\n"
            },] }
];
ThyMentionSuggestionsComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: ThyPopoverRef }
];
ThyMentionSuggestionsComponent.propDecorators = {
    suggestionsClass: [{ type: HostBinding, args: ['class.thy-mention-suggestions',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VnZ2VzdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21lbnRpb24vc3VnZ2VzdGlvbnMvc3VnZ2VzdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUcvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTW5ELE1BQU0sT0FBTyw4QkFBOEI7SUFldkMsWUFBbUIsVUFBbUMsRUFBVSxNQUFjLEVBQVUsVUFBOEI7UUFBbkcsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFWdEgsc0JBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQWdDLENBQUM7UUFFaEUsYUFBUSxHQUFHLEdBQUcsQ0FBQztRQUVmLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBRVgsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFtQixDQUFDO1FBRUgscUJBQWdCLEdBQUcsSUFBSSxDQUFDO1FBR2xFLElBQUksQ0FBQyxPQUFPO2FBQ1AsSUFBSSxDQUNELFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNkLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoRSxJQUFJLElBQUksWUFBWSxVQUFVLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2dCQUN6QixPQUFRLElBQTRCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUMxRTtpQkFBTTtnQkFDSCxPQUFPLEVBQUUsQ0FBQyxJQUFlLENBQUMsQ0FBQzthQUM5QjtRQUNMLENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUN6QixPQUFPLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUNMO2FBQ0EsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1lBRXZCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDakIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ2xELElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQzNCO2dCQUNELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO29CQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUNyQyxDQUFDLENBQUMsQ0FBQzthQUNOO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzFFO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFzQjtRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVcsRUFBRSxLQUFZO1FBQzVCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7WUFDeEIsS0FBSztZQUNMLElBQUk7U0FDUCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQW9DO1FBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7O1lBM0VKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyw2N0JBQTJDO2FBQzlDOzs7WUFYbUQsVUFBVTtZQUFFLE1BQU07WUFNN0QsYUFBYTs7OytCQW1CakIsV0FBVyxTQUFDLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkRlc3Ryb3ksIEhvc3RCaW5kaW5nLCBFbGVtZW50UmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUaHlTZWxlY3Rpb25MaXN0Q2hhbmdlIH0gZnJvbSAnbmd4LXRldGh5cy9saXN0JztcbmltcG9ydCB7IE1lbnRpb25EZWZhdWx0RGF0YUl0ZW0sIE1lbnRpb24sIE1lbnRpb25TdWdnZXN0aW9uU2VsZWN0RXZlbnQgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgc3dpdGNoTWFwLCBjYXRjaEVycm9yLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU2Vla1F1ZXJ5UmVzdWx0IH0gZnJvbSAnLi4vYWRhcHRlci9hZGFwdGVyJztcbmltcG9ydCB7IFRoeVBvcG92ZXJSZWYgfSBmcm9tICduZ3gtdGV0aHlzL3BvcG92ZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1tZW50aW9uLXN1Z2dlc3Rpb25zJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc3VnZ2VzdGlvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRoeU1lbnRpb25TdWdnZXN0aW9uc0NvbXBvbmVudDxUSXRlbSA9IE1lbnRpb25EZWZhdWx0RGF0YUl0ZW0+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIGRhdGE6IFRJdGVtW107XG5cbiAgICBtZW50aW9uOiBNZW50aW9uPFRJdGVtPjtcblxuICAgIHN1Z2dlc3Rpb25TZWxlY3QkID0gbmV3IFN1YmplY3Q8TWVudGlvblN1Z2dlc3Rpb25TZWxlY3RFdmVudD4oKTtcblxuICAgIGRlYm91bmNlID0gMTUwO1xuXG4gICAgbG9hZGluZ0RvbmUgPSB0cnVlO1xuXG4gICAgcHJpdmF0ZSBzZWFyY2gkID0gbmV3IFN1YmplY3Q8U2Vla1F1ZXJ5UmVzdWx0PigpO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50aHktbWVudGlvbi1zdWdnZXN0aW9ucycpIHN1Z2dlc3Rpb25zQ2xhc3MgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBwcml2YXRlIG5nWm9uZTogTmdab25lLCBwcml2YXRlIHBvcG92ZXJSZWY6IFRoeVBvcG92ZXJSZWY8YW55Pikge1xuICAgICAgICB0aGlzLnNlYXJjaCRcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcChxdWVyeSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLm1lbnRpb24uc2VhcmNoKHF1ZXJ5LnRlcm0sIHRoaXMubWVudGlvbi5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdEb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGRhdGEgYXMgT2JzZXJ2YWJsZTxUSXRlbVtdPikucGlwZShkZWJvdW5jZVRpbWUodGhpcy5kZWJvdW5jZSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKGRhdGEgYXMgVEl0ZW1bXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nRG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nRG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YSB8fCBbXTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvcG92ZXJSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVudGlvbi5hdXRvQ2xvc2UgJiYgdGhpcy5kYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BvdmVyUmVmLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZ1pvbmUub25TdGFibGUucGlwZSh0YWtlKDEpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BvdmVyUmVmLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5tZW50aW9uLnBvcG92ZXJDbGFzcykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLm1lbnRpb24ucG9wb3ZlckNsYXNzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlYXJjaChxdWVyeTogU2Vla1F1ZXJ5UmVzdWx0KSB7XG4gICAgICAgIHRoaXMuc2VhcmNoJC5uZXh0KHF1ZXJ5KTtcbiAgICB9XG5cbiAgICBzZWxlY3QoaXRlbTogVEl0ZW0sIGV2ZW50OiBFdmVudCkge1xuICAgICAgICB0aGlzLnN1Z2dlc3Rpb25TZWxlY3QkLm5leHQoe1xuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBpdGVtXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGVjdGlvbkNoYW5nZShldmVudDogVGh5U2VsZWN0aW9uTGlzdENoYW5nZTxUSXRlbT4pIHtcbiAgICAgICAgdGhpcy5zZWxlY3QoZXZlbnQudmFsdWUsIGV2ZW50LmV2ZW50KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zZWFyY2gkLm5leHQoKTtcbiAgICAgICAgdGhpcy5zZWFyY2gkLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19
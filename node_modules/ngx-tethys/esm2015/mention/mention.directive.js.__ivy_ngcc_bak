import { Directive, ElementRef, Input, EventEmitter, Output, Optional, Self } from '@angular/core';
import { NgControl } from '@angular/forms';
import { ThyPopover, ThyPopoverConfig } from 'ngx-tethys/popover';
import { ThyMentionSuggestionsComponent } from './suggestions/suggestions.component';
import { CaretPositioner } from './caret-positioner';
import { createMentionAdapter } from './adapter';
const SUGGESTION_BACKDROP_CLASS = 'thy-mention-suggestions-backdrop';
const POPOVER_DEFAULT_CONFIG = {
    backdropClass: SUGGESTION_BACKDROP_CLASS,
    placement: 'bottomLeft'
};
const ɵ0 = (term, data) => {
    return data.filter(item => {
        return !item.name || item.name.toLowerCase().includes(term.toLowerCase());
    });
};
const DEFAULT_MENTION_CONFIG = {
    autoClose: true,
    emptyText: '无匹配数据，按空格完成输入',
    search: ɵ0
};
export class ThyMentionDirective {
    constructor(elementRef, thyPopover, ngControl) {
        this.elementRef = elementRef;
        this.thyPopover = thyPopover;
        this.ngControl = ngControl;
        this.adapter = null;
        this.select = new EventEmitter();
        this.adapter = createMentionAdapter(elementRef.nativeElement);
        this.bindEvents();
    }
    get mentions() {
        return this._mentions;
    }
    set mentions(value) {
        this._mentions = value;
        if (this._mentions) {
            this._mentions = this._mentions.map(mention => {
                if (!mention.trigger) {
                    throw new Error(`mention trigger is required`);
                }
                return Object.assign({}, DEFAULT_MENTION_CONFIG, mention);
            });
        }
    }
    ngOnInit() { }
    bindEvents() {
        this.elementRef.nativeElement.addEventListener('input', (event) => {
            this.onInput(event);
        });
        this.elementRef.nativeElement.addEventListener('click', (event) => {
            this.onClick(event);
        });
    }
    onClick(event) {
        this.lookup(event);
    }
    onInput(event) {
        this.lookup(event);
    }
    lookup(event) {
        const matched = this.adapter.lookup(event, this.mentions);
        if (matched) {
            this.openSuggestions(matched);
        }
        else {
            this.closeSuggestions();
        }
    }
    openSuggestions(matched) {
        if (!this.openedSuggestionsRef) {
            const inputElement = this.elementRef.nativeElement;
            const position = CaretPositioner.getCaretPosition(inputElement, matched.query.start);
            const fontSize = parseInt(getComputedStyle(this.elementRef.nativeElement).fontSize, 10);
            this.openedSuggestionsRef = this.thyPopover.open(ThyMentionSuggestionsComponent, Object.assign({}, POPOVER_DEFAULT_CONFIG, this.popoverConfig, {
                origin: this.elementRef,
                originPosition: {
                    x: position.left,
                    y: position.top,
                    width: fontSize,
                    height: fontSize
                },
                initialState: {
                    mention: matched.mention
                }
            }));
            this.openedSuggestionsRef.afterClosed().subscribe(() => {
                this.openedSuggestionsRef = null;
            });
            this.openedSuggestionsRef.componentInstance.suggestionSelect$.subscribe(event => {
                const newValue = this.adapter.insertMention(event.item);
                if (this.ngControl && this.ngControl.control) {
                    this.ngControl.control.setValue(newValue);
                }
                this.openedSuggestionsRef.close();
                this.select.emit(event);
            });
        }
        if (this.openedSuggestionsRef) {
            this.openedSuggestionsRef.componentInstance.search(matched.query);
        }
    }
    closeSuggestions() {
        if (this.openedSuggestionsRef) {
            this.openedSuggestionsRef.close();
        }
    }
    isEditable() {
        const element = this.elementRef.nativeElement;
        return !element.readOnly && !element.disabled;
    }
}
ThyMentionDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyMention]',
                providers: []
            },] }
];
ThyMentionDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyPopover },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }
];
ThyMentionDirective.propDecorators = {
    mentions: [{ type: Input, args: ['thyMention',] }],
    popoverConfig: [{ type: Input, args: ['thyPopoverConfig',] }],
    select: [{ type: Output, args: ['thySelectSuggestion',] }]
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,
import { Component, HostBinding, Optional, Input, ViewEncapsulation, ContentChild, ChangeDetectionStrategy } from '@angular/core';
import { ThyFormDirective } from './form.directive';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { TemplateRef } from '@angular/core';
import { ThyTranslate } from 'ngx-tethys/core';
const internalIconMap = {
    date: 'wtf wtf-schedule-o'
};
export class ThyFormGroupComponent {
    constructor(thyParentForm, thyTranslate) {
        this.thyParentForm = thyParentForm;
        this.thyTranslate = thyTranslate;
        this.labelRequired = false;
        this.labelPaddingTopClear = false;
        this._rowFill = false;
        this._isFormGroup = true;
        this.isHorizontal = true;
        this.hasFeedback = false;
    }
    set thyLabelText(value) {
        this.labelText = value;
    }
    set thyLabelTextTranslateKey(value) {
        if (value) {
            this.labelText = this.thyTranslate.instant(value);
        }
        else {
            this.labelText = '';
        }
    }
    set thyLabelRequired(value) {
        this.labelRequired = coerceBooleanProperty(value);
    }
    set thyLabelPaddingTopClear(value) {
        this.labelPaddingTopClear = coerceBooleanProperty(value);
    }
    set thyFeedbackIcon(value) {
        this.hasFeedback = true;
        if (internalIconMap[value]) {
            this.feedbackIcon = internalIconMap[value];
            this.feedbackSvgIconName = null;
        }
        else {
            this.feedbackSvgIconName = value;
            this.feedbackIcon = null;
        }
    }
    set thyTips(value) {
        this.tips = value;
    }
    set thyTipsTranslateKey(value) {
        this.tips = this.thyTranslate.instant(value);
    }
    set thyRowFill(value) {
        this._rowFill = coerceBooleanProperty(value);
    }
    ngOnInit() {
        this.isHorizontal = this.thyParentForm ? this.thyParentForm.isHorizontal : true;
    }
}
ThyFormGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thy-form-group',
                template: "<ng-container *ngIf=\"contentTemplateRef; else defaultTpl\">\n  <ng-container [ngTemplateOutlet]=\"contentTemplateRef\"></ng-container>\n  <ng-container *ngIf=\"feedbackSvgIconName; else iconFont\">\n    <thy-icon class=\"form-control-feedback\" [thyIconName]=\"feedbackSvgIconName\"></thy-icon>\n  </ng-container>\n</ng-container>\n<ng-template #defaultTpl>\n  <label\n    *ngIf=\"!(!isHorizontal && !labelText)\"\n    class=\"form-label \"\n    [ngClass]=\"{\n      'col-sm-2 col-form-label': isHorizontal,\n      'label-required': labelRequired,\n      'pt-0': labelPaddingTopClear\n    }\"\n    >{{ labelText }}</label\n  >\n  <div [ngClass]=\"{ 'col-sm-10 col-form-control': isHorizontal, 'position-relative': !isHorizontal }\">\n    <ng-content></ng-content>\n    <ng-container *ngIf=\"feedbackSvgIconName; else iconFont\">\n      <thy-icon class=\"form-control-feedback\" [thyIconName]=\"feedbackSvgIconName\"></thy-icon>\n    </ng-container>\n    <span *ngIf=\"tips\" class=\"form-text text-desc\">{{ tips }}</span>\n  </div>\n</ng-template>\n\n<ng-template #iconFont>\n  <span *ngIf=\"feedbackIcon\" class=\"form-control-feedback {{ feedbackIcon }}\"></span>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ThyFormGroupComponent.ctorParameters = () => [
    { type: ThyFormDirective, decorators: [{ type: Optional }] },
    { type: ThyTranslate }
];
ThyFormGroupComponent.propDecorators = {
    _rowFill: [{ type: HostBinding, args: ['class.row-fill',] }],
    _isFormGroup: [{ type: HostBinding, args: ['class.form-group',] }],
    isHorizontal: [{ type: HostBinding, args: ['class.row',] }],
    hasFeedback: [{ type: HostBinding, args: ['class.has-feedback',] }],
    thyLabelText: [{ type: Input }],
    thyLabelTextTranslateKey: [{ type: Input }],
    thyLabelRequired: [{ type: Input }],
    thyLabelPaddingTopClear: [{ type: Input }],
    thyFeedbackIcon: [{ type: Input }],
    thyTips: [{ type: Input }],
    thyTipsTranslateKey: [{ type: Input }],
    thyRowFill: [{ type: Input }],
    contentTemplateRef: [{ type: ContentChild, args: ['formGroup',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZm9ybS9mb3JtLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBVSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxSSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxNQUFNLGVBQWUsR0FBRztJQUNwQixJQUFJLEVBQUUsb0JBQW9CO0NBQzdCLENBQUM7QUFRRixNQUFNLE9BQU8scUJBQXFCO0lBc0U5QixZQUFnQyxhQUErQixFQUFVLFlBQTBCO1FBQW5FLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBcEVuRyxrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUN0Qix5QkFBb0IsR0FBRyxLQUFLLENBQUM7UUFLRSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWYsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFFM0IsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFFWCxnQkFBVyxHQUFHLEtBQUssQ0FBQztJQXdEK0MsQ0FBQztJQXREdkcsSUFDSSxZQUFZLENBQUMsS0FBYTtRQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFDSSx3QkFBd0IsQ0FBQyxLQUFhO1FBQ3RDLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRUQsSUFDSSxnQkFBZ0IsQ0FBQyxLQUFhO1FBQzlCLElBQUksQ0FBQyxhQUFhLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQ0ksdUJBQXVCLENBQUMsS0FBYTtRQUNyQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQ0ksZUFBZSxDQUFDLEtBQWE7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztTQUNuQzthQUFNO1lBQ0gsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQztZQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNMLENBQUM7SUFFRCxJQUNJLE9BQU8sQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUNJLG1CQUFtQixDQUFDLEtBQWE7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFDSSxVQUFVLENBQUMsS0FBYztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFPRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3BGLENBQUM7OztZQWhGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsNnFDQUEwQztnQkFDMUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2xEOzs7WUFkUSxnQkFBZ0IsdUJBcUZSLFFBQVE7WUFsRmhCLFlBQVk7Ozt1QkFvQmhCLFdBQVcsU0FBQyxnQkFBZ0I7MkJBRTVCLFdBQVcsU0FBQyxrQkFBa0I7MkJBRTlCLFdBQVcsU0FBQyxXQUFXOzBCQUV2QixXQUFXLFNBQUMsb0JBQW9COzJCQUVoQyxLQUFLO3VDQUtMLEtBQUs7K0JBU0wsS0FBSztzQ0FLTCxLQUFLOzhCQUtMLEtBQUs7c0JBWUwsS0FBSztrQ0FLTCxLQUFLO3lCQUtMLEtBQUs7aUNBS0wsWUFBWSxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBPcHRpb25hbCwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9uLCBDb250ZW50Q2hpbGQsIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoeUZvcm1EaXJlY3RpdmUgfSBmcm9tICcuL2Zvcm0uZGlyZWN0aXZlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5pbXBvcnQgeyBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5VHJhbnNsYXRlIH0gZnJvbSAnbmd4LXRldGh5cy9jb3JlJztcblxuY29uc3QgaW50ZXJuYWxJY29uTWFwID0ge1xuICAgIGRhdGU6ICd3dGYgd3RmLXNjaGVkdWxlLW8nXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RoeS1mb3JtLWdyb3VwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1ncm91cC5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUaHlGb3JtR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGxhYmVsVGV4dDogc3RyaW5nO1xuICAgIGxhYmVsUmVxdWlyZWQgPSBmYWxzZTtcbiAgICBsYWJlbFBhZGRpbmdUb3BDbGVhciA9IGZhbHNlO1xuICAgIGZlZWRiYWNrSWNvbjogc3RyaW5nO1xuICAgIGZlZWRiYWNrU3ZnSWNvbk5hbWU6IHN0cmluZztcbiAgICB0aXBzOiBzdHJpbmc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJvdy1maWxsJykgX3Jvd0ZpbGwgPSBmYWxzZTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZm9ybS1ncm91cCcpIF9pc0Zvcm1Hcm91cCA9IHRydWU7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJvdycpIGlzSG9yaXpvbnRhbCA9IHRydWU7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhhcy1mZWVkYmFjaycpIGhhc0ZlZWRiYWNrID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlMYWJlbFRleHQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxhYmVsVGV4dCA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUxhYmVsVGV4dFRyYW5zbGF0ZUtleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5sYWJlbFRleHQgPSB0aGlzLnRoeVRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxUZXh0ID0gJyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlMYWJlbFJlcXVpcmVkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sYWJlbFJlcXVpcmVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlMYWJlbFBhZGRpbmdUb3BDbGVhcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubGFiZWxQYWRkaW5nVG9wQ2xlYXIgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUZlZWRiYWNrSWNvbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaGFzRmVlZGJhY2sgPSB0cnVlO1xuICAgICAgICBpZiAoaW50ZXJuYWxJY29uTWFwW3ZhbHVlXSkge1xuICAgICAgICAgICAgdGhpcy5mZWVkYmFja0ljb24gPSBpbnRlcm5hbEljb25NYXBbdmFsdWVdO1xuICAgICAgICAgICAgdGhpcy5mZWVkYmFja1N2Z0ljb25OYW1lID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmVlZGJhY2tTdmdJY29uTmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5mZWVkYmFja0ljb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5VGlwcyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGlwcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeVRpcHNUcmFuc2xhdGVLZXkodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRpcHMgPSB0aGlzLnRoeVRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlSb3dGaWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX3Jvd0ZpbGwgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIEBDb250ZW50Q2hpbGQoJ2Zvcm1Hcm91cCcpXG4gICAgcHVibGljIGNvbnRlbnRUZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgdGh5UGFyZW50Rm9ybTogVGh5Rm9ybURpcmVjdGl2ZSwgcHJpdmF0ZSB0aHlUcmFuc2xhdGU6IFRoeVRyYW5zbGF0ZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmlzSG9yaXpvbnRhbCA9IHRoaXMudGh5UGFyZW50Rm9ybSA/IHRoaXMudGh5UGFyZW50Rm9ybS5pc0hvcml6b250YWwgOiB0cnVlO1xuICAgIH1cbn1cbiJdfQ==
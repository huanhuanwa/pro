import { Injectable } from '@angular/core';
import { ThyFormValidatorLoader, ERROR_VALUE_REPLACE_REGEX } from './form-validator-loader';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './form-validator-loader';
export class ThyFormValidatorService {
    constructor(thyFormValidateLoader) {
        this.thyFormValidateLoader = thyFormValidateLoader;
        this.errors = [];
        // 记录所有元素的验证信息
        this.validations = {};
    }
    _getElement(name) {
        const element = this._formElement[name];
        if (element) {
            return element;
        }
        else {
            return this._formElement.querySelector(`[name='${name}']`);
        }
    }
    _clearElementError(name) {
        if (this.validations[name] && this.validations[name].hasError) {
            this.validations[name].hasError = false;
            this.validations[name].errorMessages = [];
            this.thyFormValidateLoader.removeError(this._getElement(name));
        }
    }
    _tryGetValidation(name) {
        if (!this.validations[name]) {
            this._initializeFormControlValidation(name, this._ngForm.controls[name]);
        }
        return this.validations[name];
    }
    _addError(message) {
        this.errors.unshift(message);
    }
    _clearErrors() {
        this.errors = [];
    }
    _initializeFormControlValidation(name, control) {
        this.validations[name] = {
            hasError: false,
            errorMessages: []
        };
        control.valueChanges.subscribe(() => {
            this._clearElementError(name);
            this._clearErrors();
        });
    }
    _restFormControlValidation(name) {
        const validation = this.validations[name];
        if (validation) {
            validation.hasError = false;
            validation.errorMessages = [];
        }
    }
    _formatValidationMessage(name, message) {
        const control = this._ngForm.controls[name];
        if (control) {
            return message.replace(ERROR_VALUE_REPLACE_REGEX, (tag, key) => {
                if (key) {
                    return control.errors[key][key] || control.errors[key].requiredLength;
                }
            });
        }
        else {
            return message;
        }
    }
    _getValidationMessage(name, validationError) {
        let message = null;
        if (this._config &&
            this._config.validationMessages &&
            this._config.validationMessages[name] &&
            this._config.validationMessages[name][validationError]) {
            message = this._config.validationMessages[name][validationError];
        }
        else {
            message = this.thyFormValidateLoader.getErrorMessage(name, validationError);
        }
        return this._formatValidationMessage(name, message);
    }
    _getValidationMessages(name, validationErrors) {
        const messages = [];
        for (const validationError in validationErrors) {
            if (validationErrors.hasOwnProperty(validationError)) {
                messages.push(this._getValidationMessage(name, validationError));
            }
        }
        return messages;
    }
    _setControlValidationError(name, errorMessages) {
        const validation = this._tryGetValidation(name);
        validation.errorMessages = errorMessages;
        validation.hasError = true;
        this.thyFormValidateLoader.showError(this._getElement(name), errorMessages);
    }
    initialize(ngForm, formElement) {
        this._ngForm = ngForm;
        this._formElement = formElement;
    }
    setValidatorConfig(config) {
        this._config = config;
    }
    validateControl(name) {
        this._clearElementError(name);
        const control = this._ngForm.controls[name];
        if (control && control.invalid) {
            const errorMessages = this._getValidationMessages(name, control.errors);
            this._setControlValidationError(name, errorMessages);
        }
    }
    validateControls() {
        // 主要是 无法检测到 ngForm 的 controls 的变化，或者是我没有找到
        // 验证的时候循环 ngForm 的 controls 验证
        // 发现没有 validation 初始化一个，已经存在不会重新初始化，保存缓存数据
        for (const name in this._ngForm.controls) {
            if (this._ngForm.controls.hasOwnProperty(name)) {
                this._tryGetValidation(name);
                this.validateControl(name);
            }
        }
        // 移除已经不存在的 validation
        const names = Object.keys(this.validations);
        names.forEach(name => {
            if (!this._ngForm.controls[name]) {
                delete this.validations[name];
            }
        });
    }
    addError(message) {
        this._addError(message);
    }
    validate($event) {
        this._ngForm.onSubmit($event);
        this.validateControls();
        return this._ngForm.valid;
    }
    reset() {
        this._ngForm.reset();
        for (const name in this.validations) {
            if (this.validations.hasOwnProperty(name)) {
                this._restFormControlValidation(name);
                this._clearElementError(name);
            }
        }
    }
    setElementErrorMessage(name, message) {
        this._clearElementError(name);
        this._setControlValidationError(name, [message]);
    }
}
ThyFormValidatorService.ɵfac = function ThyFormValidatorService_Factory(t) { return new (t || ThyFormValidatorService)(ɵngcc0.ɵɵinject(ɵngcc1.ThyFormValidatorLoader)); };
ThyFormValidatorService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyFormValidatorService, factory: ThyFormValidatorService.ɵfac });
ThyFormValidatorService.ctorParameters = () => [
    { type: ThyFormValidatorLoader }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormValidatorService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ThyFormValidatorLoader }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
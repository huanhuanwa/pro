import { Directive, ElementRef, Input, Renderer2, HostBinding, NgZone, Inject } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { NgForm } from '@angular/forms';
import { keycodes } from 'ngx-tethys/util';
import { THY_FORM_CONFIG } from './form.class';
import { ThyFormValidatorService } from './form-validator.service';
import { coerceBooleanProperty } from 'ngx-tethys/util';
// 1. submit 按 Enter 键提交, Textare或包含[contenteditable]属性的元素 除外，需要按 Ctrl | Command + Enter 提交
// 2. alwaysSubmit 不管是哪个元素 按 Enter 键都提交
// 3. forbidSubmit Enter 键禁止提交
// 默认 submit
export var ThyEnterKeyMode;
(function (ThyEnterKeyMode) {
    ThyEnterKeyMode["submit"] = "submit";
    ThyEnterKeyMode["alwaysSubmit"] = "alwaysSubmit";
    ThyEnterKeyMode["forbidSubmit"] = "forbidSubmit";
})(ThyEnterKeyMode || (ThyEnterKeyMode = {}));
export class ThyFormDirective {
    constructor(ngForm, elementRef, renderer, ngZone, updateHostClassService, validator, config) {
        this.ngForm = ngForm;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.updateHostClassService = updateHostClassService;
        this.validator = validator;
        this.config = config;
        this.initialized = false;
        this.wasValidated = false;
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this.layout = this.config.layout;
    }
    set thyLayout(value) {
        if (value) {
            this.layout = value;
            if (this.initialized) {
                this.updateClasses();
            }
        }
    }
    get thyLayout() {
        return this.layout;
    }
    get isHorizontal() {
        return this.layout === 'horizontal';
    }
    set thyFormValidatorConfig(config) {
        this.validator.setValidatorConfig(config);
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this._unsubscribe = this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.onKeydown.bind(this));
        });
        this.updateClasses();
        this.initialized = true;
        this.validator.initialize(this.ngForm, this.elementRef.nativeElement);
    }
    submit($event) {
        if (this.validator.validate($event)) {
            this.onSubmitSuccess($event);
        }
        else {
            // this.wasValidated = true;
        }
    }
    updateClasses() {
        this.updateHostClassService.updateClassByMap({
            [`thy-form-${this.thyLayout}`]: true
        });
    }
    submitRunInZone($event) {
        this.ngZone.run(() => {
            this.submit($event);
        });
    }
    onKeydown($event) {
        const currentInput = document.activeElement;
        const key = $event.which || $event.keyCode;
        if (key === keycodes.ENTER && currentInput.tagName) {
            if (!this.thyEnterKeyMode || this.thyEnterKeyMode === ThyEnterKeyMode.submit) {
                // TEXTAREA或包含[contenteditable]属性的元素 Ctrl + Enter 或者 Command + Enter 阻止默认行为并提交
                if (currentInput.tagName === 'TEXTAREA' || coerceBooleanProperty(currentInput.getAttribute('contenteditable'))) {
                    if ($event.ctrlKey || $event.metaKey) {
                        $event.preventDefault();
                        this.submitRunInZone($event);
                    }
                }
                else {
                    // 不是 TEXTAREA Enter 阻止默认行为并提交
                    $event.preventDefault();
                    this.submitRunInZone($event);
                }
            }
            else if (this.thyEnterKeyMode === ThyEnterKeyMode.alwaysSubmit) {
                $event.preventDefault();
                this.submitRunInZone($event);
            }
            else {
                // do nothing
            }
        }
    }
    ngOnDestroy() {
        if (this._unsubscribe) {
            this._unsubscribe();
            this._unsubscribe = null;
        }
    }
}
ThyFormDirective.decorators = [
    { type: Directive, args: [{
                selector: '[thyForm],[thy-form]',
                providers: [UpdateHostClassService, ThyFormValidatorService],
                exportAs: 'thyForm',
                host: {
                    class: 'thy-form'
                }
            },] }
];
ThyFormDirective.ctorParameters = () => [
    { type: NgForm },
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: UpdateHostClassService },
    { type: ThyFormValidatorService },
    { type: undefined, decorators: [{ type: Inject, args: [THY_FORM_CONFIG,] }] }
];
ThyFormDirective.propDecorators = {
    thyLayout: [{ type: Input }],
    thyEnterKeyMode: [{ type: Input }],
    thyFormValidatorConfig: [{ type: Input }],
    wasValidated: [{ type: HostBinding, args: ['class.was-validated',] }]
};
//# sourceMappingURL=data:application/json;base64,
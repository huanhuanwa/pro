import { Directive, HostBinding, Input } from '@angular/core';
import { coerceBooleanProperty } from 'ngx-tethys/util';
import { ThyTranslate } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-tethys/core';
export class ThyFormGroupLabelDirective {
    constructor(thyTranslate) {
        this.thyTranslate = thyTranslate;
        this.labelRequired = false;
        this._isFormGroupLabel = true;
    }
    set thyLabelText(value) {
        this.labelText = value;
    }
    set thyLabelTranslateKey(translateKey) {
        if (translateKey) {
            this.labelText = this.thyTranslate.instant(translateKey);
        }
    }
    set thyLabelRequired(value) {
        this.labelRequired = coerceBooleanProperty(value);
    }
}
ThyFormGroupLabelDirective.ɵfac = function ThyFormGroupLabelDirective_Factory(t) { return new (t || ThyFormGroupLabelDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyTranslate)); };
ThyFormGroupLabelDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyFormGroupLabelDirective, selectors: [["", "thyFormGroupLabel", ""]], hostVars: 4, hostBindings: function ThyFormGroupLabelDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("label-required", ctx.labelRequired)("col-form-label", ctx._isFormGroupLabel);
    } }, inputs: { thyLabelText: "thyLabelText", thyLabelTranslateKey: "thyLabelTranslateKey", thyLabelRequired: "thyLabelRequired" } });
ThyFormGroupLabelDirective.ctorParameters = () => [
    { type: ThyTranslate }
];
ThyFormGroupLabelDirective.propDecorators = {
    labelRequired: [{ type: HostBinding, args: ['class.label-required',] }],
    _isFormGroupLabel: [{ type: HostBinding, args: ['class.col-form-label',] }],
    thyLabelText: [{ type: Input }],
    thyLabelTranslateKey: [{ type: Input }],
    thyLabelRequired: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormGroupLabelDirective, [{
        type: Directive,
        args: [{
                selector: '[thyFormGroupLabel]'
            }]
    }], function () { return [{ type: ɵngcc1.ThyTranslate }]; }, { labelRequired: [{
            type: HostBinding,
            args: ['class.label-required']
        }], _isFormGroupLabel: [{
            type: HostBinding,
            args: ['class.col-form-label']
        }], thyLabelText: [{
            type: Input
        }], thyLabelTranslateKey: [{
            type: Input
        }], thyLabelRequired: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ncm91cC1sYWJlbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mb3JtL2Zvcm0tZ3JvdXAtbGFiZWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFZLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFFM0YsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFLL0MsTUFBTSxPQUFPLDBCQUEwQjtBQUN2QyxJQXVCSSxZQUFvQixZQUEwQjtBQUFJLFFBQTlCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0FBQUMsUUFyQlYsa0JBQWEsR0FBRyxLQUFLLENBQUM7QUFDL0QsUUFDeUMsc0JBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQ2xFLElBa0JxRCxDQUFDO0FBQ3RELElBbEJJLElBQ0ksWUFBWSxDQUFDLEtBQWE7QUFDbEMsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztBQUMvQixJQUFJLENBQUM7QUFDTCxJQUNJLElBQ0ksb0JBQW9CLENBQUMsWUFBb0I7QUFDakQsUUFBUSxJQUFJLFlBQVksRUFBRTtBQUMxQixZQUFZLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckUsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksSUFDSSxnQkFBZ0IsQ0FBQyxLQUFhO0FBQ3RDLFFBQVEsSUFBSSxDQUFDLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxRCxJQUFJLENBQUM7QUFDTDtzREExQkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxxQkFBcUIsY0FDbEM7Ozt5SUFDSTtBQUFDO0FBQ1UsWUFOUCxZQUFZO0FBQUc7QUFBRztBQUdoQiw0QkFLTixXQUFXLFNBQUMsc0JBQXNCO0FBQU8sZ0NBRXpDLFdBQVcsU0FBQyxzQkFBc0I7QUFBTywyQkFFekMsS0FBSztBQUNSLG1DQUlHLEtBQUs7QUFDUiwrQkFNRyxLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgT3B0aW9uYWwsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh5Rm9ybURpcmVjdGl2ZSB9IGZyb20gJy4vZm9ybS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnbmd4LXRldGh5cy91dGlsJztcbmltcG9ydCB7IFRoeVRyYW5zbGF0ZSB9IGZyb20gJ25neC10ZXRoeXMvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3RoeUZvcm1Hcm91cExhYmVsXSdcbn0pXG5leHBvcnQgY2xhc3MgVGh5Rm9ybUdyb3VwTGFiZWxEaXJlY3RpdmUge1xuICAgIHB1YmxpYyBsYWJlbFRleHQ6IHN0cmluZztcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MubGFiZWwtcmVxdWlyZWQnKSBsYWJlbFJlcXVpcmVkID0gZmFsc2U7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbC1mb3JtLWxhYmVsJykgX2lzRm9ybUdyb3VwTGFiZWwgPSB0cnVlO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5TGFiZWxUZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sYWJlbFRleHQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlMYWJlbFRyYW5zbGF0ZUtleSh0cmFuc2xhdGVLZXk6IHN0cmluZykge1xuICAgICAgICBpZiAodHJhbnNsYXRlS2V5KSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsVGV4dCA9IHRoaXMudGh5VHJhbnNsYXRlLmluc3RhbnQodHJhbnNsYXRlS2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRoeUxhYmVsUmVxdWlyZWQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxhYmVsUmVxdWlyZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGh5VHJhbnNsYXRlOiBUaHlUcmFuc2xhdGUpIHt9XG59XG4iXX0=
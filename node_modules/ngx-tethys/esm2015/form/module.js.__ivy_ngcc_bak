import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ThyFormDirective } from './form.directive';
import { ThyFormGroupComponent } from './form-group.component';
import { ThyFormGroupLabelDirective } from './form-group-label.directive';
import { ThyFormSubmitDirective } from './form-submit.directive';
import { ThyInputModule } from 'ngx-tethys/input';
import { ThyFormGroupFooterComponent } from './from-group-footer/form-group-footer.component';
import { ThyFormGroupErrorComponent } from './form-group-error/form-group-error.component';
import { ThyFormValidatorLoader } from './form-validator-loader';
import { THY_VALIDATOR_CONFIG, THY_FORM_CONFIG_PROVIDER } from './form.class';
import { ThyUniqueCheckValidator, ThyMaxDirective, ThyMinDirective, ThyConfirmValidatorDirective } from './validator/index';
import { ThyAlertModule } from 'ngx-tethys/alert';
import { ThyIconModule } from 'ngx-tethys/icon';
export class ThyFormModule {
    static forRoot(config) {
        return {
            ngModule: ThyFormModule,
            providers: [
                {
                    provide: THY_VALIDATOR_CONFIG,
                    useValue: config
                }
            ]
        };
    }
}
ThyFormModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, ThyInputModule, ThyAlertModule, ThyIconModule],
                declarations: [
                    ThyFormDirective,
                    ThyFormGroupComponent,
                    ThyFormGroupLabelDirective,
                    ThyFormSubmitDirective,
                    ThyFormGroupFooterComponent,
                    ThyUniqueCheckValidator,
                    ThyFormGroupErrorComponent,
                    ThyMinDirective,
                    ThyMaxDirective,
                    ThyConfirmValidatorDirective
                ],
                exports: [
                    ThyFormDirective,
                    ThyFormGroupComponent,
                    ThyFormGroupLabelDirective,
                    ThyFormSubmitDirective,
                    ThyFormGroupFooterComponent,
                    ThyUniqueCheckValidator,
                    ThyFormGroupErrorComponent,
                    ThyMinDirective,
                    ThyMaxDirective,
                    ThyConfirmValidatorDirective
                ],
                providers: [ThyFormValidatorLoader, THY_FORM_CONFIG_PROVIDER]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Zvcm0vbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDakUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQzlGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBZ0Msb0JBQW9CLEVBQW1CLHdCQUF3QixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDNUgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQThCaEQsTUFBTSxPQUFPLGFBQWE7SUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFvQztRQUMvQyxPQUFPO1lBQ0gsUUFBUSxFQUFFLGFBQWE7WUFDdkIsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxvQkFBb0I7b0JBQzdCLFFBQVEsRUFBRSxNQUFNO2lCQUNuQjthQUNKO1NBQ0osQ0FBQztJQUNOLENBQUM7OztZQXZDSixRQUFRLFNBQUM7Z0JBQ04sT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLGFBQWEsQ0FBQztnQkFDbkYsWUFBWSxFQUFFO29CQUNWLGdCQUFnQjtvQkFDaEIscUJBQXFCO29CQUNyQiwwQkFBMEI7b0JBQzFCLHNCQUFzQjtvQkFDdEIsMkJBQTJCO29CQUMzQix1QkFBdUI7b0JBQ3ZCLDBCQUEwQjtvQkFDMUIsZUFBZTtvQkFDZixlQUFlO29CQUNmLDRCQUE0QjtpQkFDL0I7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLGdCQUFnQjtvQkFDaEIscUJBQXFCO29CQUNyQiwwQkFBMEI7b0JBQzFCLHNCQUFzQjtvQkFDdEIsMkJBQTJCO29CQUMzQix1QkFBdUI7b0JBQ3ZCLDBCQUEwQjtvQkFDMUIsZUFBZTtvQkFDZixlQUFlO29CQUNmLDRCQUE0QjtpQkFDL0I7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsd0JBQXdCLENBQUM7YUFDaEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVGh5Rm9ybURpcmVjdGl2ZSB9IGZyb20gJy4vZm9ybS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGh5Rm9ybUdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaHlGb3JtR3JvdXBMYWJlbERpcmVjdGl2ZSB9IGZyb20gJy4vZm9ybS1ncm91cC1sYWJlbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGh5Rm9ybVN1Ym1pdERpcmVjdGl2ZSB9IGZyb20gJy4vZm9ybS1zdWJtaXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRoeUlucHV0TW9kdWxlIH0gZnJvbSAnbmd4LXRldGh5cy9pbnB1dCc7XG5pbXBvcnQgeyBUaHlGb3JtR3JvdXBGb290ZXJDb21wb25lbnQgfSBmcm9tICcuL2Zyb20tZ3JvdXAtZm9vdGVyL2Zvcm0tZ3JvdXAtZm9vdGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaHlGb3JtR3JvdXBFcnJvckNvbXBvbmVudCB9IGZyb20gJy4vZm9ybS1ncm91cC1lcnJvci9mb3JtLWdyb3VwLWVycm9yLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaHlGb3JtVmFsaWRhdG9yTG9hZGVyIH0gZnJvbSAnLi9mb3JtLXZhbGlkYXRvci1sb2FkZXInO1xuaW1wb3J0IHsgVGh5Rm9ybVZhbGlkYXRvckdsb2JhbENvbmZpZywgVEhZX1ZBTElEQVRPUl9DT05GSUcsIFRIWV9GT1JNX0NPTkZJRywgVEhZX0ZPUk1fQ09ORklHX1BST1ZJREVSIH0gZnJvbSAnLi9mb3JtLmNsYXNzJztcbmltcG9ydCB7IFRoeVVuaXF1ZUNoZWNrVmFsaWRhdG9yLCBUaHlNYXhEaXJlY3RpdmUsIFRoeU1pbkRpcmVjdGl2ZSwgVGh5Q29uZmlybVZhbGlkYXRvckRpcmVjdGl2ZSB9IGZyb20gJy4vdmFsaWRhdG9yL2luZGV4JztcbmltcG9ydCB7IFRoeUFsZXJ0TW9kdWxlIH0gZnJvbSAnbmd4LXRldGh5cy9hbGVydCc7XG5pbXBvcnQgeyBUaHlJY29uTW9kdWxlIH0gZnJvbSAnbmd4LXRldGh5cy9pY29uJztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgVGh5SW5wdXRNb2R1bGUsIFRoeUFsZXJ0TW9kdWxlLCBUaHlJY29uTW9kdWxlXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgVGh5Rm9ybURpcmVjdGl2ZSxcbiAgICAgICAgVGh5Rm9ybUdyb3VwQ29tcG9uZW50LFxuICAgICAgICBUaHlGb3JtR3JvdXBMYWJlbERpcmVjdGl2ZSxcbiAgICAgICAgVGh5Rm9ybVN1Ym1pdERpcmVjdGl2ZSxcbiAgICAgICAgVGh5Rm9ybUdyb3VwRm9vdGVyQ29tcG9uZW50LFxuICAgICAgICBUaHlVbmlxdWVDaGVja1ZhbGlkYXRvcixcbiAgICAgICAgVGh5Rm9ybUdyb3VwRXJyb3JDb21wb25lbnQsXG4gICAgICAgIFRoeU1pbkRpcmVjdGl2ZSxcbiAgICAgICAgVGh5TWF4RGlyZWN0aXZlLFxuICAgICAgICBUaHlDb25maXJtVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFRoeUZvcm1EaXJlY3RpdmUsXG4gICAgICAgIFRoeUZvcm1Hcm91cENvbXBvbmVudCxcbiAgICAgICAgVGh5Rm9ybUdyb3VwTGFiZWxEaXJlY3RpdmUsXG4gICAgICAgIFRoeUZvcm1TdWJtaXREaXJlY3RpdmUsXG4gICAgICAgIFRoeUZvcm1Hcm91cEZvb3RlckNvbXBvbmVudCxcbiAgICAgICAgVGh5VW5pcXVlQ2hlY2tWYWxpZGF0b3IsXG4gICAgICAgIFRoeUZvcm1Hcm91cEVycm9yQ29tcG9uZW50LFxuICAgICAgICBUaHlNaW5EaXJlY3RpdmUsXG4gICAgICAgIFRoeU1heERpcmVjdGl2ZSxcbiAgICAgICAgVGh5Q29uZmlybVZhbGlkYXRvckRpcmVjdGl2ZVxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbVGh5Rm9ybVZhbGlkYXRvckxvYWRlciwgVEhZX0ZPUk1fQ09ORklHX1BST1ZJREVSXVxufSlcbmV4cG9ydCBjbGFzcyBUaHlGb3JtTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdChjb25maWc6IFRoeUZvcm1WYWxpZGF0b3JHbG9iYWxDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFRoeUZvcm1Nb2R1bGU+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBUaHlGb3JtTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBUSFlfVkFMSURBVE9SX0NPTkZJRyxcbiAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=
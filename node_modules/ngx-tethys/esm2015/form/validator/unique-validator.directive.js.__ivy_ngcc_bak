import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { Directive, Input, Optional, ElementRef } from '@angular/core';
import { of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { ThyFormDirective } from '../form.directive';
export class ThyUniqueCheckValidator {
    constructor(elementRef, thyForm) {
        this.elementRef = elementRef;
        this.thyForm = thyForm;
    }
    validate(ctrl) {
        return this.thyUniqueCheck(ctrl.value).pipe(map((failed) => {
            setTimeout(() => {
                if (failed && this.thyForm && this.elementRef.nativeElement.name) {
                    this.thyForm.validator.validateControl(this.elementRef.nativeElement.name);
                }
            });
            return failed ? { thyUniqueCheck: failed } : null;
        }), catchError(() => of(null)));
    }
}
ThyUniqueCheckValidator.decorators = [
    { type: Directive, args: [{
                selector: '[thyUniqueCheck]',
                providers: [
                    {
                        provide: NG_ASYNC_VALIDATORS,
                        useExisting: ThyUniqueCheckValidator,
                        multi: true
                    }
                ]
            },] }
];
ThyUniqueCheckValidator.ctorParameters = () => [
    { type: ElementRef },
    { type: ThyFormDirective, decorators: [{ type: Optional }] }
];
ThyUniqueCheckValidator.propDecorators = {
    thyUniqueCheck: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZm9ybS92YWxpZGF0b3IvdW5pcXVlLXZhbGlkYXRvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFxRCxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hHLE9BQU8sRUFBYyxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBTyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBWXJELE1BQU0sT0FBTyx1QkFBdUI7SUFHaEMsWUFBb0IsVUFBc0IsRUFBc0IsT0FBeUI7UUFBckUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFzQixZQUFPLEdBQVAsT0FBTyxDQUFrQjtJQUFHLENBQUM7SUFFN0YsUUFBUSxDQUFDLElBQXFCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUN2QyxHQUFHLENBQUMsQ0FBQyxNQUFlLEVBQUUsRUFBRTtZQUNwQixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNaLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFO29CQUM5RCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzlFO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN0RCxDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzdCLENBQUM7SUFDTixDQUFDOzs7WUEzQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFNBQVMsRUFBRTtvQkFDUDt3QkFDSSxPQUFPLEVBQUUsbUJBQW1CO3dCQUM1QixXQUFXLEVBQUUsdUJBQXVCO3dCQUNwQyxLQUFLLEVBQUUsSUFBSTtxQkFDZDtpQkFDSjthQUNKOzs7WUFkZ0QsVUFBVTtZQUdsRCxnQkFBZ0IsdUJBZXdCLFFBQVE7Ozs2QkFGcEQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMsIE5HX0FTWU5DX1ZBTElEQVRPUlMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBEaXJlY3RpdmUsIElucHV0LCBPcHRpb25hbCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGh5Rm9ybURpcmVjdGl2ZSB9IGZyb20gJy4uL2Zvcm0uZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdGh5VW5pcXVlQ2hlY2tdJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTkdfQVNZTkNfVkFMSURBVE9SUyxcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBUaHlVbmlxdWVDaGVja1ZhbGlkYXRvcixcbiAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFRoeVVuaXF1ZUNoZWNrVmFsaWRhdG9yIGltcGxlbWVudHMgQXN5bmNWYWxpZGF0b3Ige1xuICAgIEBJbnB1dCgpIHRoeVVuaXF1ZUNoZWNrOiAodmFsdWU6IGFueSkgPT4gT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgQE9wdGlvbmFsKCkgcHJpdmF0ZSB0aHlGb3JtOiBUaHlGb3JtRGlyZWN0aXZlKSB7fVxuXG4gICAgdmFsaWRhdGUoY3RybDogQWJzdHJhY3RDb250cm9sKTogUHJvbWlzZTxWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbD4gfCBPYnNlcnZhYmxlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoeVVuaXF1ZUNoZWNrKGN0cmwudmFsdWUpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGZhaWxlZDogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmFpbGVkICYmIHRoaXMudGh5Rm9ybSAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRoeUZvcm0udmFsaWRhdG9yLnZhbGlkYXRlQ29udHJvbCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsZWQgPyB7IHRoeVVuaXF1ZUNoZWNrOiBmYWlsZWQgfSA6IG51bGw7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKCkgPT4gb2YobnVsbCkpXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19
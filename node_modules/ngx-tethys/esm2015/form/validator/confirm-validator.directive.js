import { Directive, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export function confirmValidator(value) {
    return (control) => {
        const isEqual = value === control.value;
        return !isEqual ? { confirm: { value: value, actual: control.value } } : null;
    };
}
export class ThyConfirmValidatorDirective {
    validate(control) {
        return confirmValidator(this.confirm)(control);
    }
}
ThyConfirmValidatorDirective.ɵfac = function ThyConfirmValidatorDirective_Factory(t) { return new (t || ThyConfirmValidatorDirective)(); };
ThyConfirmValidatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyConfirmValidatorDirective, selectors: [["", "confirm", ""]], inputs: { confirm: "confirm" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: ThyConfirmValidatorDirective, multi: true }])] });
ThyConfirmValidatorDirective.propDecorators = {
    confirm: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyConfirmValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[confirm]',
                providers: [{ provide: NG_VALIDATORS, useExisting: ThyConfirmValidatorDirective, multi: true }]
            }]
    }], null, { confirm: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS12YWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZm9ybS92YWxpZGF0b3IvY29uZmlybS12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBbUIsYUFBYSxFQUEwQixNQUFNLGdCQUFnQixDQUFDOztBQUV4RixNQUFNLFVBQVUsZ0JBQWdCLENBQUMsS0FBYTtBQUFJLElBQzlDLE9BQU8sQ0FBQyxPQUF3QixFQUFpQyxFQUFFO0FBQ3ZFLFFBQVEsTUFBTSxPQUFPLEdBQUcsS0FBSyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDaEQsUUFBUSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDdEYsSUFBSSxDQUFDLENBQUM7QUFDTixDQUFDO0FBTUQsTUFBTSxPQUFPLDRCQUE0QjtBQUFHLElBR3hDLFFBQVEsQ0FBQyxPQUF3QjtBQUNyQyxRQUFRLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZELElBQUksQ0FBQztBQUNMO3dEQVZDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsV0FBVyxrQkFDckI7QUFBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSw0QkFBNEIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsY0FDbEcsZ01BQ0k7QUFBQztBQUFnRCxzQkFDakQsS0FBSztBQUFJOzs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpcm1WYWxpZGF0b3IodmFsdWU6IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBudWxsID0+IHtcbiAgICAgICAgY29uc3QgaXNFcXVhbCA9IHZhbHVlID09PSBjb250cm9sLnZhbHVlO1xuICAgICAgICByZXR1cm4gIWlzRXF1YWwgPyB7IGNvbmZpcm06IHsgdmFsdWU6IHZhbHVlLCBhY3R1YWw6IGNvbnRyb2wudmFsdWUgfSB9IDogbnVsbDtcbiAgICB9O1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tjb25maXJtXScsXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogVGh5Q29uZmlybVZhbGlkYXRvckRpcmVjdGl2ZSwgbXVsdGk6IHRydWUgfV1cbn0pXG5leHBvcnQgY2xhc3MgVGh5Q29uZmlybVZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG4gICAgQElucHV0KCkgY29uZmlybTogc3RyaW5nO1xuXG4gICAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSB7XG4gICAgICAgIHJldHVybiBjb25maXJtVmFsaWRhdG9yKHRoaXMuY29uZmlybSkoY29udHJvbCk7XG4gICAgfVxufVxuIl19
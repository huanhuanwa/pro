import { Directive, ElementRef, Input, Renderer2, HostBinding, NgZone, Inject } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { NgForm } from '@angular/forms';
import { keycodes } from 'ngx-tethys/util';
import { THY_FORM_CONFIG } from './form.class';
import { ThyFormValidatorService } from './form-validator.service';
import { coerceBooleanProperty } from 'ngx-tethys/util';
// 1. submit 按 Enter 键提交, Textare或包含[contenteditable]属性的元素 除外，需要按 Ctrl | Command + Enter 提交
// 2. alwaysSubmit 不管是哪个元素 按 Enter 键都提交
// 3. forbidSubmit Enter 键禁止提交
// 默认 submit
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from 'ngx-tethys/core';
import * as ɵngcc3 from './form-validator.service';
export var ThyEnterKeyMode;
(function (ThyEnterKeyMode) {
    ThyEnterKeyMode["submit"] = "submit";
    ThyEnterKeyMode["alwaysSubmit"] = "alwaysSubmit";
    ThyEnterKeyMode["forbidSubmit"] = "forbidSubmit";
})(ThyEnterKeyMode || (ThyEnterKeyMode = {}));
export class ThyFormDirective {
    constructor(ngForm, elementRef, renderer, ngZone, updateHostClassService, validator, config) {
        this.ngForm = ngForm;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.updateHostClassService = updateHostClassService;
        this.validator = validator;
        this.config = config;
        this.initialized = false;
        this.wasValidated = false;
        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
        this.layout = this.config.layout;
    }
    set thyLayout(value) {
        if (value) {
            this.layout = value;
            if (this.initialized) {
                this.updateClasses();
            }
        }
    }
    get thyLayout() {
        return this.layout;
    }
    get isHorizontal() {
        return this.layout === 'horizontal';
    }
    set thyFormValidatorConfig(config) {
        this.validator.setValidatorConfig(config);
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this._unsubscribe = this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.onKeydown.bind(this));
        });
        this.updateClasses();
        this.initialized = true;
        this.validator.initialize(this.ngForm, this.elementRef.nativeElement);
    }
    submit($event) {
        if (this.validator.validate($event)) {
            this.onSubmitSuccess($event);
        }
        else {
            // this.wasValidated = true;
        }
    }
    updateClasses() {
        this.updateHostClassService.updateClassByMap({
            [`thy-form-${this.thyLayout}`]: true
        });
    }
    submitRunInZone($event) {
        this.ngZone.run(() => {
            this.submit($event);
        });
    }
    onKeydown($event) {
        const currentInput = document.activeElement;
        const key = $event.which || $event.keyCode;
        if (key === keycodes.ENTER && currentInput.tagName) {
            if (!this.thyEnterKeyMode || this.thyEnterKeyMode === ThyEnterKeyMode.submit) {
                // TEXTAREA或包含[contenteditable]属性的元素 Ctrl + Enter 或者 Command + Enter 阻止默认行为并提交
                if (currentInput.tagName === 'TEXTAREA' || coerceBooleanProperty(currentInput.getAttribute('contenteditable'))) {
                    if ($event.ctrlKey || $event.metaKey) {
                        $event.preventDefault();
                        this.submitRunInZone($event);
                    }
                }
                else {
                    // 不是 TEXTAREA Enter 阻止默认行为并提交
                    $event.preventDefault();
                    this.submitRunInZone($event);
                }
            }
            else if (this.thyEnterKeyMode === ThyEnterKeyMode.alwaysSubmit) {
                $event.preventDefault();
                this.submitRunInZone($event);
            }
            else {
                // do nothing
            }
        }
    }
    ngOnDestroy() {
        if (this._unsubscribe) {
            this._unsubscribe();
            this._unsubscribe = null;
        }
    }
}
ThyFormDirective.ɵfac = function ThyFormDirective_Factory(t) { return new (t || ThyFormDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgForm), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ThyFormValidatorService), ɵngcc0.ɵɵdirectiveInject(THY_FORM_CONFIG)); };
ThyFormDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyFormDirective, selectors: [["", "thyForm", ""], ["", "thy-form", ""]], hostAttrs: [1, "thy-form"], hostVars: 2, hostBindings: function ThyFormDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("was-validated", ctx.wasValidated);
    } }, inputs: { thyLayout: "thyLayout", thyFormValidatorConfig: "thyFormValidatorConfig", thyEnterKeyMode: "thyEnterKeyMode" }, exportAs: ["thyForm"], features: [ɵngcc0.ɵɵProvidersFeature([UpdateHostClassService, ThyFormValidatorService])] });
ThyFormDirective.ctorParameters = () => [
    { type: NgForm },
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: UpdateHostClassService },
    { type: ThyFormValidatorService },
    { type: undefined, decorators: [{ type: Inject, args: [THY_FORM_CONFIG,] }] }
];
ThyFormDirective.propDecorators = {
    thyLayout: [{ type: Input }],
    thyEnterKeyMode: [{ type: Input }],
    thyFormValidatorConfig: [{ type: Input }],
    wasValidated: [{ type: HostBinding, args: ['class.was-validated',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormDirective, [{
        type: Directive,
        args: [{
                selector: '[thyForm],[thy-form]',
                providers: [UpdateHostClassService, ThyFormValidatorService],
                exportAs: 'thyForm',
                host: {
                    class: 'thy-form'
                }
            }]
    }], function () { return [{ type: ɵngcc1.NgForm }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.UpdateHostClassService }, { type: ɵngcc3.ThyFormValidatorService }, { type: undefined, decorators: [{
                type: Inject,
                args: [THY_FORM_CONFIG]
            }] }]; }, { wasValidated: [{
            type: HostBinding,
            args: ['class.was-validated']
        }], thyLayout: [{
            type: Input
        }], thyFormValidatorConfig: [{
            type: Input
        }], thyEnterKeyMode: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mb3JtL2Zvcm0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBVSxTQUFTLEVBQUUsV0FBVyxFQUFhLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQXdELGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNyRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCwyRkFBMkY7QUFDM0YsdUNBQXVDO0FBQ3ZDLCtCQUErQjtBQUMvQixZQUFZOzs7OztBQUNaLE1BQU0sQ0FBTixJQUFZLGVBSVg7QUFKRCxXQUFZLGVBQWU7QUFDMUIsSUFBRyxvQ0FBaUIsQ0FBQTtBQUFDLElBQ2xCLGdEQUE2QixDQUFBO0FBQUMsSUFDOUIsZ0RBQTZCLENBQUE7QUFDakMsQ0FBQyxFQUpXLGVBQWUsS0FBZixlQUFlLFFBSTFCO0FBVUQsTUFBTSxPQUFPLGdCQUFnQjtBQUFHLElBb0M1QixZQUNZLE1BQWMsRUFDZCxVQUFzQixFQUN0QixRQUFtQixFQUNuQixNQUFjLEVBQ2Qsc0JBQThDLEVBQy9DLFNBQWtDLEVBQ1IsTUFBcUI7QUFDM0QsUUFQYSxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFDZixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDdkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQ3BCLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxRQUNmLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7QUFBQyxRQUNoRCxjQUFTLEdBQVQsU0FBUyxDQUF5QjtBQUFDLFFBQ1QsV0FBTSxHQUFOLE1BQU0sQ0FBZTtBQUM5RCxRQXpDWSxnQkFBVyxHQUFHLEtBQUssQ0FBQztBQUNoQyxRQTBCd0MsaUJBQVksR0FBRyxLQUFLLENBQUM7QUFDN0QsUUFjUSxJQUFJLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNyRixRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDekMsSUFBSSxDQUFDO0FBQ0wsSUEzQ0ksSUFDSSxTQUFTLENBQUMsS0FBb0I7QUFDdEMsUUFBUSxJQUFJLEtBQUssRUFBRTtBQUNuQixZQUFZLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLFlBQVksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQ2xDLGdCQUFnQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDckMsYUFBYTtBQUNiLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksU0FBUztBQUFLLFFBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzNCLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxZQUFZO0FBQ3BCLFFBQVEsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFlBQVksQ0FBQztBQUM1QyxJQUFJLENBQUM7QUFDTCxJQUdJLElBQ0ksc0JBQXNCLENBQUMsTUFBOEI7QUFDN0QsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xELElBQUksQ0FBQztBQUNMLElBb0JJLFFBQVE7QUFBSyxRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO0FBQzNDLFlBQVksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMxSCxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsUUFBUSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDN0IsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUNoQyxRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM5RSxJQUFJLENBQUM7QUFDTCxJQUNJLE1BQU0sQ0FBQyxNQUFhO0FBQ3hCLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUM3QyxZQUFZLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekMsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLDRCQUE0QjtBQUN4QyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxhQUFhO0FBQ2pCLFFBQVEsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDO0FBQ3JELFlBQVksQ0FBQyxZQUFZLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLElBQUk7QUFDaEQsU0FBUyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLGVBQWUsQ0FBQyxNQUFXO0FBQy9CLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO0FBQzdCLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsSUFBSSxDQUFDO0FBQ0wsSUFDSSxTQUFTLENBQUMsTUFBcUI7QUFDbkMsUUFBUSxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO0FBQ3BELFFBQVEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ25ELFFBQVEsSUFBSSxHQUFHLEtBQUssUUFBUSxDQUFDLEtBQUssSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFO0FBQzVELFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxlQUFlLENBQUMsTUFBTSxFQUFFO0FBQzFGLGdCQUFnQiwrRUFBK0U7QUFDL0YsZ0JBQWdCLElBQUksWUFBWSxDQUFDLE9BQU8sS0FBSyxVQUFVLElBQUkscUJBQXFCLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUU7QUFDaEksb0JBQW9CLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO0FBQzFELHdCQUF3QixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDaEQsd0JBQXdCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckQscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUFDLHFCQUFLO0FBQ3ZCLG9CQUFvQiwrQkFBK0I7QUFDbkQsb0JBQW9CLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM1QyxvQkFBb0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqRCxpQkFBaUI7QUFDakIsYUFBYTtBQUFDLGlCQUFLLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxlQUFlLENBQUMsWUFBWSxFQUFFO0FBQzlFLGdCQUFnQixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEMsZ0JBQWdCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0MsYUFBYTtBQUFDLGlCQUFLO0FBQ25CLGdCQUFnQixhQUFhO0FBQzdCLGFBQWE7QUFDYixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQ2YsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDL0IsWUFBWSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDaEMsWUFBWSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUNyQyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7NENBckhDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsc0JBQXNCLGtCQUNoQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSx1QkFBdUIsQ0FBQyxrQkFDNUQsUUFBUSxFQUFFLFNBQVMsa0JBQ25CLElBQUksRUFBRSxzQkFDRixLQUFLLEVBQUUsVUFBVSxrQkFDcEIsY0FDSjs7O3NQQUNJO0FBQUM7QUFBMEMsWUF4QnZDLE1BQU07QUFBSSxZQUZDLFVBQVU7QUFBSSxZQUFhLFNBQVM7QUFBSSxZQUFzQixNQUFNO0FBQUksWUFDbkYsc0JBQXNCO0FBQUksWUFJMUIsdUJBQXVCO0FBQUksNENBZ0UzQixNQUFNLFNBQUMsZUFBZTtBQUFRO0FBQUc7QUFFbkMsd0JBeENGLEtBQUs7QUFDUiw4QkFpQkcsS0FBSztBQUFLLHFDQUVWLEtBQUs7QUFDUiwyQkFJRyxXQUFXLFNBQUMscUJBQXFCO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMiwgSG9zdEJpbmRpbmcsIE9uRGVzdHJveSwgTmdab25lLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICduZ3gtdGV0aHlzL2NvcmUnO1xuaW1wb3J0IHsgTmdGb3JtIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsga2V5Y29kZXMgfSBmcm9tICduZ3gtdGV0aHlzL3V0aWwnO1xuaW1wb3J0IHsgVGh5Rm9ybUxheW91dCwgVGh5Rm9ybVZhbGlkYXRvckNvbmZpZywgVGh5Rm9ybUNvbmZpZywgVEhZX0ZPUk1fQ09ORklHIH0gZnJvbSAnLi9mb3JtLmNsYXNzJztcbmltcG9ydCB7IFRoeUZvcm1WYWxpZGF0b3JTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtLXZhbGlkYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ25neC10ZXRoeXMvdXRpbCc7XG5cbi8vIDEuIHN1Ym1pdCDmjIkgRW50ZXIg6ZSu5o+Q5LqkLCBUZXh0YXJl5oiW5YyF5ZCrW2NvbnRlbnRlZGl0YWJsZV3lsZ7mgKfnmoTlhYPntKAg6Zmk5aSW77yM6ZyA6KaB5oyJIEN0cmwgfCBDb21tYW5kICsgRW50ZXIg5o+Q5LqkXG4vLyAyLiBhbHdheXNTdWJtaXQg5LiN566h5piv5ZOq5Liq5YWD57SgIOaMiSBFbnRlciDplK7pg73mj5DkuqRcbi8vIDMuIGZvcmJpZFN1Ym1pdCBcYkVudGVyIOmUruemgeatouaPkOS6pFxuLy8g6buY6K6kIHN1Ym1pdFxuZXhwb3J0IGVudW0gVGh5RW50ZXJLZXlNb2RlIHtcbiAgICBzdWJtaXQgPSAnc3VibWl0JyxcbiAgICBhbHdheXNTdWJtaXQgPSAnYWx3YXlzU3VibWl0JyxcbiAgICBmb3JiaWRTdWJtaXQgPSAnZm9yYmlkU3VibWl0J1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0aHlGb3JtXSxbdGh5LWZvcm1dJyxcbiAgICBwcm92aWRlcnM6IFtVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLCBUaHlGb3JtVmFsaWRhdG9yU2VydmljZV0sXG4gICAgZXhwb3J0QXM6ICd0aHlGb3JtJyxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAndGh5LWZvcm0nXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBUaHlGb3JtRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgbGF5b3V0OiBUaHlGb3JtTGF5b3V0O1xuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdGh5TGF5b3V0KHZhbHVlOiBUaHlGb3JtTGF5b3V0KSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDbGFzc2VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdGh5TGF5b3V0KCk6IFRoeUZvcm1MYXlvdXQge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXQ7XG4gICAgfVxuXG4gICAgZ2V0IGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0ID09PSAnaG9yaXpvbnRhbCc7XG4gICAgfVxuXG4gICAgQElucHV0KCkgdGh5RW50ZXJLZXlNb2RlOiBUaHlFbnRlcktleU1vZGU7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0aHlGb3JtVmFsaWRhdG9yQ29uZmlnKGNvbmZpZzogVGh5Rm9ybVZhbGlkYXRvckNvbmZpZykge1xuICAgICAgICB0aGlzLnZhbGlkYXRvci5zZXRWYWxpZGF0b3JDb25maWcoY29uZmlnKTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLndhcy12YWxpZGF0ZWQnKSB3YXNWYWxpZGF0ZWQgPSBmYWxzZTtcblxuICAgIG9uU3VibWl0U3VjY2VzczogKCRldmVudDogYW55KSA9PiB2b2lkO1xuXG4gICAgcHJpdmF0ZSBfdW5zdWJzY3JpYmU6ICgpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBuZ0Zvcm06IE5nRm9ybSxcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTogVXBkYXRlSG9zdENsYXNzU2VydmljZSxcbiAgICAgICAgcHVibGljIHZhbGlkYXRvcjogVGh5Rm9ybVZhbGlkYXRvclNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoVEhZX0ZPUk1fQ09ORklHKSBwcml2YXRlIGNvbmZpZzogVGh5Rm9ybUNvbmZpZ1xuICAgICkge1xuICAgICAgICB0aGlzLnVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UuaW5pdGlhbGl6ZUVsZW1lbnQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLmxheW91dCA9IHRoaXMuY29uZmlnLmxheW91dDtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2tleWRvd24nLCB0aGlzLm9uS2V5ZG93bi5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xhc3NlcygpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52YWxpZGF0b3IuaW5pdGlhbGl6ZSh0aGlzLm5nRm9ybSwgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHN1Ym1pdCgkZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnZhbGlkYXRvci52YWxpZGF0ZSgkZXZlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLm9uU3VibWl0U3VjY2VzcygkZXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcy53YXNWYWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQ2xhc3NlcygpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLnVwZGF0ZUNsYXNzQnlNYXAoe1xuICAgICAgICAgICAgW2B0aHktZm9ybS0ke3RoaXMudGh5TGF5b3V0fWBdOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN1Ym1pdFJ1bkluWm9uZSgkZXZlbnQ6IGFueSkge1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdWJtaXQoJGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25LZXlkb3duKCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBjb25zdCBjdXJyZW50SW5wdXQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBrZXkgPSAkZXZlbnQud2hpY2ggfHwgJGV2ZW50LmtleUNvZGU7XG4gICAgICAgIGlmIChrZXkgPT09IGtleWNvZGVzLkVOVEVSICYmIGN1cnJlbnRJbnB1dC50YWdOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudGh5RW50ZXJLZXlNb2RlIHx8IHRoaXMudGh5RW50ZXJLZXlNb2RlID09PSBUaHlFbnRlcktleU1vZGUuc3VibWl0KSB7XG4gICAgICAgICAgICAgICAgLy8gVEVYVEFSRUHmiJbljIXlkKtbY29udGVudGVkaXRhYmxlXeWxnuaAp+eahOWFg+e0oCBDdHJsICsgRW50ZXIg5oiW6ICFIENvbW1hbmQgKyBFbnRlciDpmLvmraJcYum7mOiupOihjOS4uuW5tuaPkOS6pFxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SW5wdXQudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyB8fCBjb2VyY2VCb29sZWFuUHJvcGVydHkoY3VycmVudElucHV0LmdldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQuY3RybEtleSB8fCAkZXZlbnQubWV0YUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdFJ1bkluWm9uZSgkZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g5LiN5pivIFRFWFRBUkVBIEVudGVyIOmYu+atolxi6buY6K6k6KGM5Li65bm25o+Q5LqkXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdFJ1bkluWm9uZSgkZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50aHlFbnRlcktleU1vZGUgPT09IFRoeUVudGVyS2V5TW9kZS5hbHdheXNTdWJtaXQpIHtcbiAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdFJ1bkluWm9uZSgkZXZlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Vuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
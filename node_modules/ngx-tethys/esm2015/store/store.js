import { __decorate, __metadata } from "tslib";
import { Observable, BehaviorSubject, from } from 'rxjs';
import { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';
import { META_KEY } from './types';
import { helpers } from 'ngx-tethys/util';
import { getSingletonRootStore } from './root-store';
import { isDevMode, Injectable } from '@angular/core';
import { ActionState } from './action-state';
import { Action } from './action';
import * as ɵngcc0 from '@angular/core';
export class Store {
    constructor(initialState) {
        this.reduxToolEnabled = isDevMode();
        this._defaultStoreInstanceId = this._getClassName();
        this.state$ = new BehaviorSubject(initialState);
        this.initialStateCache = Object.assign({}, initialState);
        if (this.reduxToolEnabled) {
            const rootStore = getSingletonRootStore();
            ActionState.changeAction(`Add-${this._defaultStoreInstanceId}`);
            rootStore.registerStore(this);
        }
    }
    get snapshot() {
        return this.state$.getValue();
    }
    dispatch(type, payload) {
        ActionState.changeAction(`${this._defaultStoreInstanceId}-${type}`);
        const result = this._dispatch({
            type: type,
            payload: payload
        });
        result.subscribe();
        return result;
    }
    _dispatch(action) {
        const meta = this[META_KEY];
        if (!meta) {
            throw new Error(`${META_KEY} is not found, current store has not action`);
        }
        const actionMeta = meta.actions[action.type];
        if (!actionMeta) {
            throw new Error(`${action.type} is not found`);
        }
        // let result: any = this[actionMeta.fn](this.snapshot, action.payload);
        let result = actionMeta.originalFn.call(this, this.snapshot, action.payload);
        if (result instanceof Promise) {
            result = from(result);
        }
        if (result instanceof Observable) {
            result = result.pipe(map(r => r));
        }
        else {
            result = new Observable((observer) => {
                observer.next({});
            });
        }
        return result.pipe(shareReplay());
    }
    select(selector) {
        return this.state$.pipe(map(selector), distinctUntilChanged());
    }
    next(state) {
        this.state$.next(state);
    }
    error(error) {
        this.state$.error(error);
    }
    complete() {
        this.state$.complete();
    }
    subscribe(next, error, complete) {
        return this.state$.subscribe(next, error, complete);
    }
    /**
     * set store new state
     *
     * @example
     * this.setState(newState);
     * this.setState({ users: produce(this.snapshot.users).add(user) });
     * this.setState((state) => {
     *    return {
     *        users: produce(state.users).add(user)
     *    }
     * });
     * @param fn
     */
    setState(fn) {
        if (helpers.isFunction(fn)) {
            this.next(Object.assign(Object.assign({}, this.snapshot), fn(this.snapshot)));
        }
        else {
            this.next(Object.assign(Object.assign({}, this.snapshot), fn));
        }
    }
    getState() {
        return this.snapshot;
    }
    clearState() {
        this.setState(this.initialStateCache);
    }
    ngOnDestroy() {
        if (this.reduxToolEnabled) {
            const rootStore = getSingletonRootStore();
            rootStore.unregisterStore(this);
        }
    }
    /**
     * You can override this method if you want to give your container instance a custom id.
     * The returned id must be unique in the application.
     */
    getStoreInstanceId() {
        return this._defaultStoreInstanceId;
    }
    _getClassName() {
        const name = this.constructor.name || /function (.+)\(/.exec(this.constructor + '')[1];
        if (this.reduxToolEnabled) {
            const rootStore = getSingletonRootStore();
            if (!rootStore.existStoreInstanceId(name)) {
                return name;
            }
            let j = 0;
            for (let i = 1; i < 20; i++) {
                if (!rootStore.existStoreInstanceId(`${name}-${i}`)) {
                    j = i;
                    break;
                }
            }
            return `${name}-${j}`;
        }
        return name;
    }
}
Store.ɵfac = function Store_Factory(t) { return new (t || Store)(ɵngcc0.ɵɵinject(undefined)); };
Store.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Store, factory: Store.ɵfac });
Store.ctorParameters = () => [
    { type: undefined }
];
__decorate([
    Action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Store.prototype, "clearState", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Store, [{
        type: Injectable
    }], function () { return [{ type: undefined }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
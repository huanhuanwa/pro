import { isDevMode, Injectable } from '@angular/core';
import { Subscription, combineLatest } from 'rxjs';
import { map, switchMap, tap } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import getReduxDevToolsPlugin from './plugins/redux_devtools';
import { ActionState } from './action-state';
let rootStore;
/**
 * @internal
 */
export class RootStore {
    constructor() {
        this.connectSuccessed = false;
        /**
         * 数据流 数据是一个Map，k,v键值对，关键字->状态数据
         */
        this._containers = new BehaviorSubject(new Map());
        this._plugin = getReduxDevToolsPlugin();
        this._combinedStateSubscription = new Subscription();
        if (this._plugin.isConnectSuccessed()) {
            this.connectSuccessed = true;
            this._assignCombinedState(); // 最终调用handleNewState
            console.log(`是否在Angular开发环境：${isDevMode()}, 初始化root-store`);
        }
    }
    _assignCombinedState() {
        this._combinedStateSubscription = this._containers
            .pipe(switchMap(containers => this._getCombinedState(containers)))
            .pipe(map(states => {
            const actionName = ActionState.getActionName();
            const state = states.reduce((acc, curr) => {
                acc[curr.containerName] = curr.state;
                return acc;
            }, {});
            return { state: state, actionName: actionName };
        }))
            .subscribe(c => {
            this._plugin.handleNewState(c.actionName, c.state);
        });
    }
    /**
     * 合并数据流
     * 合并状态数据，把状态数据转换为这样的数据：{ containerName: string, state: any }，并且
     * 通过combineLatest合并成一个数据数据流，这样状态数据只有涉及更新，那么这边就会得到通知
     * @param containers 状态数据的Map
     */
    _getCombinedState(containers) {
        return combineLatest(...Array.from(containers.entries()).map(([containerName, container]) => {
            return container.state$.pipe(map(state => ({ containerName, state })), tap(data => { }));
        }));
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this._combinedStateSubscription.unsubscribe();
    }
    /**
     * @internal
     */
    registerStore(store) {
        if (!this.connectSuccessed) {
            return;
        }
        const containers = new Map(this._containers.value);
        if (containers.has(store.getStoreInstanceId())) {
            throw new Error(`Store: Store with duplicate instance ID found! ${store.getStoreInstanceId()}` +
                ` is already registered. Please check your getStoreInstanceId() methods!`);
        }
        containers.set(store.getStoreInstanceId(), store);
        this._containers.next(containers);
    }
    existStoreInstanceId(instanceId) {
        const containers = new Map(this._containers.value);
        if (containers.has(instanceId)) {
            return true;
        }
        return false;
    }
    /**
     * @internal
     */
    unregisterStore(store) {
        if (!this.connectSuccessed) {
            return;
        }
        const containers = new Map(this._containers.value);
        containers.delete(store.getStoreInstanceId());
        this._containers.next(containers);
    }
}
RootStore.decorators = [
    { type: Injectable }
];
RootStore.ctorParameters = () => [];
export function getSingletonRootStore() {
    if (!rootStore) {
        rootStore = new RootStore();
    }
    return rootStore;
}
//# sourceMappingURL=data:application/json;base64,
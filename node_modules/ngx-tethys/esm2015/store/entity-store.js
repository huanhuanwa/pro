import { Store } from './store';
import { helpers, produce } from 'ngx-tethys/util';
import { mergeReferences, buildReferencesKeyBy } from 'ngx-tethys/util';
import { map } from 'rxjs/operators';
export class EntityStore extends Store {
    constructor(initialState = {
        entities: []
    }, options = { idKey: '_id' }) {
        super(initialState);
        this.entities$ = this.select(state => {
            return state.entities;
        });
        this.entitiesWithRefs$ = this.entities$.pipe(map(entities => {
            if (!entities) {
                return entities;
            }
            return entities.map(entity => {
                const newEntity = Object.assign({}, entity);
                if (this['onCombineRefs']) {
                    if (!newEntity['refs']) {
                        newEntity['refs'] = {};
                    }
                    this['onCombineRefs'](newEntity, this.internalReferencesIdMap, this.snapshot.references);
                }
                else {
                    throw new Error(`onCombineRefs is not empty`);
                }
                return newEntity;
            });
        }));
        this.trackBy = (_index, entity) => {
            return entity[this.options.idKey];
        };
        this.options = Object.assign({ idKey: '_id' }, options);
        if (!this.options.idKey) {
            throw new Error(`idKey is required in EntityStore`);
        }
        this.buildReferencesIdMap();
    }
    get entities() {
        return this.snapshot.entities;
    }
    resetPagination(pagination, count) {
        pagination.count = count;
        // 向上取整 21 / 20 = 1.05 = 2 pageCount is 2
        const pageCount = Math.ceil(pagination.count / pagination.pageSize);
        pagination.pageCount = pageCount;
        this.snapshot.pagination = Object.assign({}, pagination);
    }
    increasePagination(amount) {
        const pagination = this.snapshot.pagination;
        this.resetPagination(pagination, pagination.count + amount);
    }
    decreasePagination(amount) {
        const pagination = this.snapshot.pagination;
        if (pagination) {
            this.resetPagination(pagination, pagination.count - amount);
        }
    }
    buildReferencesIdMap() {
        if (this.snapshot.references) {
            this.internalReferencesIdMap = buildReferencesKeyBy(this.snapshot.references, this.options.referencesIdKeys);
        }
    }
    /**
     *
     * Replace current collection with provided collection
     *
     * @example
     * this.store.initialize([Entity, Entity], pagination: PaginationInfo);
     *
     */
    initialize(entities, pagination) {
        const state = this.snapshot;
        state.entities = entities || [];
        state.pagination = pagination;
        this.next(state);
    }
    /**
     *
     * Replace current collection with provided collection with references
     *
     * @example
     * this.store.initializeWithReferences([Entity, Entity], references: TReferences, pagination: PaginationInfo);
     *
     */
    initializeWithReferences(entities, references, pagination) {
        const state = this.snapshot;
        state.entities = entities || [];
        state.pagination = pagination;
        state.references = references;
        this.buildReferencesIdMap();
        this.next(state);
    }
    /**
     * Add entity or entities for internal
     * @param entity
     * @param references
     * @param addOptions
     */
    addInternal(entity, references, addOptions) {
        const addEntities = helpers.coerceArray(entity);
        if (addEntities.length === 0) {
            return;
        }
        const state = this.snapshot;
        state.entities = produce(state.entities).add(addEntities, addOptions);
        if (state.references) {
            mergeReferences(state.references, references, this.options.referencesIdKeys);
            this.buildReferencesIdMap();
        }
        if (state.pagination) {
            this.increasePagination(addEntities.length);
            if (addOptions && !addOptions.prepend && addOptions.autoGotoLastPage) {
                state.pagination.pageIndex = state.pagination.pageCount;
            }
        }
        this.next(state);
    }
    /**
     * Add an entity or entities to the store.
     *
     * @example
     * this.store.add(Entity);
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity, { prepend: true });
     */
    add(entity, addOptions) {
        this.addInternal(entity, undefined, addOptions);
    }
    /**
     * Add an entity or entities to the store with references.
     *
     * @example
     * this.store.add(Entity);
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity, { prepend: true });
     */
    addWithReferences(entity, references, addOptions) {
        this.addInternal(entity, references, addOptions);
    }
    /**
     *
     * Update an entity or entities in the store.
     *
     * @example
     * this.store.update(3, {
     *   name: 'New Name'
     * }, references);
     *
     *  this.store.update(3, entity => {
     *    return {
     *      ...entity,
     *      name: 'New Name'
     *    }
     *  }, references);
     *
     * this.store.update([1,2,3], {
     *   name: 'New Name'
     * }, references);
     */
    updateInternal(idsOrFn, 
    // | Partial<TState>
    // | ((state: Readonly<TState>) => Partial<TState>)
    // | ((entity: Readonly<TEntity>) => boolean),
    newStateOrFn, references) {
        const ids = helpers.coerceArray(idsOrFn);
        const state = this.snapshot;
        for (let i = 0; i < state.entities.length; i++) {
            const oldEntity = state.entities[i];
            if (ids.indexOf(oldEntity[this.options.idKey]) > -1) {
                const newState = helpers.isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
                state.entities[i] = Object.assign(Object.assign({}, oldEntity), newState);
            }
        }
        state.entities = [...state.entities];
        if (state.references) {
            mergeReferences(state.references, references, this.options.referencesIdKeys);
            this.buildReferencesIdMap();
        }
        this.next(state);
    }
    /**
     *
     * Update an entity or entities in the store with references.
     *
     * @example
     * this.store.update(3, {
     *   name: 'New Name'
     * }, references);
     *
     *  this.store.update(3, entity => {
     *    return {
     *      ...entity,
     *      name: 'New Name'
     *    }
     *  }, references);
     *
     * this.store.update([1,2,3], {
     *   name: 'New Name'
     * }, references);
     */
    update(idsOrFn, newStateOrFn) {
        this.updateInternal(idsOrFn, newStateOrFn, undefined);
    }
    /**
     *
     * Update an entity or entities in the store with references.
     *
     * @example
     * this.store.updateWithReferences(3, {
     *   name: 'New Name'
     * }, references);
     *
     *  this.store.updateWithReferences(3, entity => {
     *    return {
     *      ...entity,
     *      name: 'New Name'
     *    }
     *  }, references);
     *
     * this.store.updateWithReferences([1,2,3], {
     *   name: 'New Name'
     * }, references);
     */
    updateWithReferences(idsOrFn, newStateOrFn, references) {
        this.updateInternal(idsOrFn, newStateOrFn, references);
    }
    remove(idsOrFn) {
        const state = this.snapshot;
        const originalLength = state.entities.length;
        state.entities = produce(state.entities, this.options).remove(idsOrFn);
        this.decreasePagination(originalLength - state.entities.length);
        this.next(state);
    }
    clearPagination() {
        const state = this.snapshot;
        state.pagination = null;
        this.next(state);
    }
    clear() {
        const state = this.snapshot;
        state.entities = [];
        state.pagination = null;
        state.references = null;
        this.next(state);
    }
}
//# sourceMappingURL=data:application/json;base64,
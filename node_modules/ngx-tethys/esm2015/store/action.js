import { findAndCreateStoreMetadata } from './utils';
import { Observable, of, throwError } from 'rxjs';
import { shareReplay, catchError, exhaustMap } from 'rxjs/operators';
import { ActionState } from './action-state';
/**
 * Decorates a method with a action information.
 */
export function Action(action) {
    return function (target, name, descriptor) {
        const meta = findAndCreateStoreMetadata(target);
        // default use function name as action type
        if (!action) {
            action = {
                type: name
            };
        }
        // support string for type
        if (typeof action === 'string') {
            action = {
                type: action
            };
        }
        const type = action.type;
        if (!action.type) {
            throw new Error(`Action ${action.type} is missing a static "type" property`);
        }
        const originalFn = descriptor.value;
        meta.actions[type] = {
            fn: name,
            originalFn: originalFn,
            type
        };
        descriptor.value = function (...args) {
            ActionState.changeAction(`${target.constructor.name}-${name}`);
            let result = originalFn.call(this, ...args);
            if (result instanceof Observable) {
                result = result.pipe(catchError(error => {
                    return of({ status: "ERRORED" /* Errored */, action: action, error: error });
                }), shareReplay(), exhaustMap((result) => {
                    if (result && result.status === "ERRORED" /* Errored */) {
                        return throwError(result.error);
                    }
                    else {
                        return of(result);
                    }
                }));
                result.subscribe();
            }
            return result;
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3JlL2FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBWSxFQUFFLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVELE9BQU8sRUFBTyxXQUFXLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVE3Qzs7R0FFRztBQUNILE1BQU0sVUFBVSxNQUFNLENBQUMsTUFBd0M7SUFDM0QsT0FBTyxVQUFTLE1BQVcsRUFBRSxJQUFZLEVBQUUsVUFBd0M7UUFDL0UsTUFBTSxJQUFJLEdBQUcsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEQsMkNBQTJDO1FBQzNDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxNQUFNLEdBQUc7Z0JBQ0wsSUFBSSxFQUFFLElBQUk7YUFDYixDQUFDO1NBQ0w7UUFDRCwwQkFBMEI7UUFDMUIsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDNUIsTUFBTSxHQUFHO2dCQUNMLElBQUksRUFBRSxNQUFNO2FBQ2YsQ0FBQztTQUNMO1FBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUV6QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxNQUFNLENBQUMsSUFBSSxzQ0FBc0MsQ0FBQyxDQUFDO1NBQ2hGO1FBRUQsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ2pCLEVBQUUsRUFBRSxJQUFJO1lBQ1IsVUFBVSxFQUFFLFVBQVU7WUFDdEIsSUFBSTtTQUNQLENBQUM7UUFFRixVQUFVLENBQUMsS0FBSyxHQUFHLFVBQVMsR0FBRyxJQUFXO1lBQ3RDLFdBQVcsQ0FBQyxZQUFZLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQy9ELElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxNQUFNLFlBQVksVUFBVSxFQUFFO2dCQUM5QixNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FDaEIsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUNmLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSx5QkFBc0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUM5RSxDQUFDLENBQUMsRUFDRixXQUFXLEVBQUUsRUFDYixVQUFVLENBQUMsQ0FBQyxNQUEyQixFQUFFLEVBQUU7b0JBQ3ZDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLDRCQUF5QixFQUFFO3dCQUNsRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ25DO3lCQUFNO3dCQUNILE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUNyQjtnQkFDTCxDQUFDLENBQUMsQ0FDTCxDQUFDO2dCQUNGLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUN0QjtZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNRVRBX0tFWSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgZmluZEFuZENyZWF0ZVN0b3JlTWV0YWRhdGEgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyLCBvZiwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZVJlcGxheSwgY2F0Y2hFcnJvciwgZXhoYXVzdE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFjdGlvblN0YXRlIH0gZnJvbSAnLi9hY3Rpb24tc3RhdGUnO1xuaW1wb3J0IHsgQWN0aW9uQ29udGV4dCwgQWN0aW9uU3RhdHVzIH0gZnJvbSAnLi9hY3Rpb25zLXN0cmVhbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVjb3JhdG9yQWN0aW9uT3B0aW9ucyB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHBheWxvYWQ/OiBhbnk7XG59XG5cbi8qKlxuICogRGVjb3JhdGVzIGEgbWV0aG9kIHdpdGggYSBhY3Rpb24gaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBY3Rpb24oYWN0aW9uPzogRGVjb3JhdG9yQWN0aW9uT3B0aW9ucyB8IHN0cmluZykge1xuICAgIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nLCBkZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBmaW5kQW5kQ3JlYXRlU3RvcmVNZXRhZGF0YSh0YXJnZXQpO1xuXG4gICAgICAgIC8vIGRlZmF1bHQgdXNlIGZ1bmN0aW9uIG5hbWUgYXMgYWN0aW9uIHR5cGVcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBuYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIHN1cHBvcnQgc3RyaW5nIGZvciB0eXBlXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IGFjdGlvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlID0gYWN0aW9uLnR5cGU7XG5cbiAgICAgICAgaWYgKCFhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBY3Rpb24gJHthY3Rpb24udHlwZX0gaXMgbWlzc2luZyBhIHN0YXRpYyBcInR5cGVcIiBwcm9wZXJ0eWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3JpZ2luYWxGbiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIG1ldGEuYWN0aW9uc1t0eXBlXSA9IHtcbiAgICAgICAgICAgIGZuOiBuYW1lLFxuICAgICAgICAgICAgb3JpZ2luYWxGbjogb3JpZ2luYWxGbixcbiAgICAgICAgICAgIHR5cGVcbiAgICAgICAgfTtcblxuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgICAgIEFjdGlvblN0YXRlLmNoYW5nZUFjdGlvbihgJHt0YXJnZXQuY29uc3RydWN0b3IubmFtZX0tJHtuYW1lfWApO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG9yaWdpbmFsRm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHsgc3RhdHVzOiBBY3Rpb25TdGF0dXMuRXJyb3JlZCwgYWN0aW9uOiBhY3Rpb24sIGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUmVwbGF5KCksXG4gICAgICAgICAgICAgICAgICAgIGV4aGF1c3RNYXAoKHJlc3VsdDogQWN0aW9uQ29udGV4dCB8IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuRXJyb3JlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZihyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuIl19
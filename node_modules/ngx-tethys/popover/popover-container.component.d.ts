import { ElementRef, EventEmitter, ChangeDetectorRef, AfterViewInit, NgZone, OnDestroy } from '@angular/core';
import { CdkPortalOutlet } from '@angular/cdk/portal';
import { AnimationEvent } from '@angular/animations';
import { ThyPopoverConfig } from './popover.config';
import { ThyAbstractOverlayContainer } from 'ngx-tethys/core';
import { Observable } from 'rxjs';
import { ThyClickDispatcher } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
export declare class ThyPopoverContainerComponent extends ThyAbstractOverlayContainer implements AfterViewInit, OnDestroy {
    private elementRef;
    private document;
    config: ThyPopoverConfig;
    private thyClickDispatcher;
    private ngZone;
    portalOutlet: CdkPortalOutlet;
    /** State of the popover animation. */
    animationState: 'void' | 'enter' | 'exit';
    /** Emits when an animation state changes. */
    animationStateChanged: EventEmitter<AnimationEvent>;
    animationOpeningDone: Observable<AnimationEvent>;
    animationClosingDone: Observable<AnimationEvent>;
    insideClicked: EventEmitter<any>;
    outsideClicked: EventEmitter<any>;
    beforeAttachPortal(): void;
    constructor(elementRef: ElementRef, document: any, config: ThyPopoverConfig, changeDetectorRef: ChangeDetectorRef, thyClickDispatcher: ThyClickDispatcher, ngZone: NgZone);
    ngAfterViewInit(): void;
    /** Callback, invoked whenever an animation on the host completes. */
    onAnimationDone(event: AnimationEvent): void;
    /** Callback, invoked when an animation on the host starts. */
    onAnimationStart(event: AnimationEvent): void;
    startExitAnimation(): void;
    onInsideClick(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyPopoverContainerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyPopoverContainerComponent, "thy-popover-container", never, {}, {}, never, never>;
}

//# sourceMappingURL=popover-container.component.d.ts.map
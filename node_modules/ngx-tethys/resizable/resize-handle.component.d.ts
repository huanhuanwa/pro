import { OnInit, OnDestroy, EventEmitter, ChangeDetectorRef, ElementRef } from '@angular/core';
import { ThyResizeDirection } from './interface';
import { ThyResizableService } from './resizable.service';
import { Constructor, ThyUnsubscribe, MixinBase } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
export declare class ThyResizeHandleMouseDownEvent {
    direction: ThyResizeDirection;
    mouseEvent: MouseEvent | TouchEvent;
    constructor(direction: ThyResizeDirection, mouseEvent: MouseEvent | TouchEvent);
}
declare const _MixinBase: Constructor<ThyUnsubscribe> & typeof MixinBase;
export declare class ThyResizeHandleComponent extends _MixinBase implements OnInit, OnDestroy {
    private thyResizableService;
    private cdr;
    private elementRef;
    thyDirection: ThyResizeDirection;
    readonly thyMouseDown: EventEmitter<ThyResizeHandleMouseDownEvent>;
    entered: boolean;
    constructor(thyResizableService: ThyResizableService, cdr: ChangeDetectorRef, elementRef: ElementRef);
    ngOnInit(): void;
    onMousedown(event: MouseEvent | TouchEvent): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyResizeHandleComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyResizeHandleComponent, "thy-resize-handle, [thy-resize-handle]", ["thyResizeHandle"], { "thyDirection": "thyDirection"; }, { "thyMouseDown": "thyMouseDown"; }, never, ["*"]>;
}
export {};

//# sourceMappingURL=resize-handle.component.d.ts.map
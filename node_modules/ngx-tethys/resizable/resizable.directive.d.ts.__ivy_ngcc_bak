import { AfterViewInit, OnDestroy, ElementRef, Renderer2, NgZone, EventEmitter } from '@angular/core';
import { Constructor, ThyUnsubscribe, MixinBase } from 'ngx-tethys/core';
import { ThyResizableService } from './resizable.service';
import { Platform } from '@angular/cdk/platform';
import { ThyResizeEvent } from './interface';
declare const _MixinBase: Constructor<ThyUnsubscribe> & typeof MixinBase;
export declare class ThyResizableDirective extends _MixinBase implements AfterViewInit, OnDestroy {
    private elementRef;
    private renderer;
    private platform;
    private ngZone;
    private thyResizableService;
    thyBounds: 'window' | 'parent' | ElementRef<HTMLElement>;
    thyMaxHeight?: number;
    thyMaxWidth?: number;
    thyMinHeight: number;
    thyMinWidth: number;
    thyGridColumnCount: number;
    thyMaxColumn: number;
    thyMinColumn: number;
    thyLockAspectRatio: boolean;
    thyPreview: boolean;
    thyDisabled: boolean;
    readonly thyResize: EventEmitter<ThyResizeEvent>;
    readonly thyResizeEnd: EventEmitter<ThyResizeEvent>;
    readonly thyResizeStart: EventEmitter<ThyResizeEvent>;
    resizing: boolean;
    private nativeElement;
    private nativeElementRect;
    private sizeCache;
    private ghostElement;
    private currentHandleEvent;
    constructor(elementRef: ElementRef<HTMLElement>, renderer: Renderer2, platform: Platform, ngZone: NgZone, thyResizableService: ThyResizableService);
    ngAfterViewInit(): void;
    setCursor(): void;
    setPosition(): void;
    onMouseenter(): void;
    onMouseleave(): void;
    endResize(event: MouseEvent | TouchEvent): void;
    resize(event: MouseEvent | TouchEvent): void;
    calcSize(width: number, height: number, ratio: number): ThyResizeEvent;
    previewResize({ width, height }: ThyResizeEvent): void;
    createGhostElement(): void;
    removeGhostElement(): void;
    ngOnDestroy(): void;
}
export {};

{"version":3,"file":"icon-registry.d.ts","sources":["icon-registry.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { SafeResourceUrl, SafeHtml, DomSanitizer } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nexport declare type IconMode = 'font' | 'svg';\nexport declare class ThyIconRegistry {\n    private sanitizer;\n    private httpClient;\n    private document;\n    private defaultFontSetClass;\n    private internalIconMode;\n    private svgIconConfigs;\n    private svgIconSetConfigs;\n    private inProgressUrlFetches;\n    get iconMode(): IconMode;\n    constructor(sanitizer: DomSanitizer, httpClient: HttpClient, document: any);\n    private getIconNameNotFoundError;\n    private getIconFailedToSanitizeLiteralError;\n    private internalAddSvgIconSet;\n    private cloneSvg;\n    private fetchUrl;\n    private toSvgElement;\n    private extractSvgIconFromIconSet;\n    private extractIconWithNameFromIconSetConfigs;\n    private svgElementFromString;\n    private setSvgAttributes;\n    private createSvgElementForSingleIcon;\n    private loadSvgIconFromConfig;\n    private loadSvgIconSetFromConfig;\n    private getSvgFromConfig;\n    private getSvgFromIconSetConfigs;\n    private internalAddSvgIconConfig;\n    buildIconKey(namespace: string, name: string): string;\n    splitIconName(iconName: string): [string, string];\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this;\n    addSvgIconSet(url: SafeResourceUrl): this;\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this;\n    addSvgIconSetLiteral(literal: SafeHtml): this;\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName: string, literal: SafeHtml): this;\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this;\n    getDefaultFontSetClass(): string;\n    getFontSetClassByAlias(fontSet: string): string;\n    getSvgIcon(name: string, namespace?: string): Observable<SVGElement>;\n    setIconMode(mode: IconMode): void;\n}\n"]}
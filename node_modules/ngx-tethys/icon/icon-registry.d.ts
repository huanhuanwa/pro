import { SafeResourceUrl, SafeHtml, DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import * as ɵngcc0 from '@angular/core';
export declare type IconMode = 'font' | 'svg';
export declare class ThyIconRegistry {
    private sanitizer;
    private httpClient;
    private document;
    private defaultFontSetClass;
    private internalIconMode;
    private svgIconConfigs;
    private svgIconSetConfigs;
    private inProgressUrlFetches;
    get iconMode(): IconMode;
    constructor(sanitizer: DomSanitizer, httpClient: HttpClient, document: any);
    private getIconNameNotFoundError;
    private getIconFailedToSanitizeLiteralError;
    private internalAddSvgIconSet;
    private cloneSvg;
    private fetchUrl;
    private toSvgElement;
    private extractSvgIconFromIconSet;
    private extractIconWithNameFromIconSetConfigs;
    private svgElementFromString;
    private setSvgAttributes;
    private createSvgElementForSingleIcon;
    private loadSvgIconFromConfig;
    private loadSvgIconSetFromConfig;
    private getSvgFromConfig;
    private getSvgFromIconSetConfigs;
    private internalAddSvgIconConfig;
    buildIconKey(namespace: string, name: string): string;
    splitIconName(iconName: string): [string, string];
    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this;
    addSvgIconSet(url: SafeResourceUrl): this;
    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this;
    addSvgIconSetLiteral(literal: SafeHtml): this;
    /**
     * Registers an icon by URL in the specified namespace.
     * @param namespace Namespace in which the icon should be registered.
     * @param iconName Name under which the icon should be registered.
     * @param url
     */
    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this;
    /**
     * Registers an icon by URL in the default namespace.
     * @param iconName Name under which the icon should be registered.
     * @param url
     */
    addSvgIcon(iconName: string, url: SafeResourceUrl): this;
    /**
     * Registers an icon using an HTML string in the default namespace.
     * @param iconName Name under which the icon should be registered.
     * @param literal SVG source of the icon.
     */
    addSvgIconLiteral(iconName: string, literal: SafeHtml): this;
    /**
     * Registers an icon using an HTML string in the specified namespace.
     * @param namespace Namespace in which the icon should be registered.
     * @param iconName Name under which the icon should be registered.
     * @param literal SVG source of the icon.
     */
    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this;
    getDefaultFontSetClass(): string;
    getFontSetClassByAlias(fontSet: string): string;
    getSvgIcon(name: string, namespace?: string): Observable<SVGElement>;
    setIconMode(mode: IconMode): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyIconRegistry, never>;
}

//# sourceMappingURL=icon-registry.d.ts.map
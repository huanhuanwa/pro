{"version":3,"file":"autocomplete.trigger.directive.d.ts","sources":["autocomplete.trigger.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, NgZone, OnDestroy, OnInit, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { OverlayRef, Overlay } from '@angular/cdk/overlay';\nimport { ThyPlacement } from 'ngx-tethys/core';\nimport { ThyAutocompleteService } from './overlay/autocomplete.service';\nimport { ThyAutocompleteComponent } from './autocomplete.component';\nimport { ThyOptionComponent, ThyOptionSelectionChangeEvent } from 'ngx-tethys/shared';\nimport { Observable } from 'rxjs';\nexport declare class ThyAutocompleteTriggerDirective implements OnInit, OnDestroy {\n    private elementRef;\n    private ngZone;\n    private overlay;\n    private autocompleteService;\n    private viewContainerRef;\n    private document;\n    private cdr;\n    protected overlayRef: OverlayRef;\n    private autocompleteRef;\n    private readonly closeKeyEventStream;\n    private closingActionsSubscription;\n    private _autocompleteComponent;\n    panelOpened: boolean;\n    set autocompleteComponent(data: ThyAutocompleteComponent);\n    set autocomplete(data: ThyAutocompleteComponent);\n    get autocompleteComponent(): ThyAutocompleteComponent;\n    thyOffset: number;\n    thyAutocompleteWidth: number;\n    thyPlacement: ThyPlacement;\n    get activeOption(): ThyOptionComponent | null;\n    get panelClosingActions(): Observable<ThyOptionSelectionChangeEvent | null>;\n    constructor(elementRef: ElementRef, ngZone: NgZone, overlay: Overlay, autocompleteService: ThyAutocompleteService, viewContainerRef: ViewContainerRef, document: any, cdr: ChangeDetectorRef);\n    ngOnInit(): void;\n    onFocus(): void;\n    onKeydown(event: KeyboardEvent): void;\n    handleInput(event: KeyboardEvent): void;\n    openPanel(): void;\n    closePanel(): void;\n    createOverlay(): OverlayRef;\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions;\n    private setValueAndClose;\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream;\n    private setValue;\n    private canOpen;\n    private resetActiveItem;\n    private destroyPanel;\n    ngOnDestroy(): void;\n}\n"]}
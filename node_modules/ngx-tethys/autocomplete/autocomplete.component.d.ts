import { TemplateRef, QueryList, OnInit, EventEmitter, NgZone, OnDestroy, AfterContentInit, ChangeDetectorRef, ElementRef } from '@angular/core';
import { Constructor, ThyUnsubscribe } from 'ngx-tethys/core';
import { Observable } from 'rxjs';
import { MixinBase } from 'ngx-tethys/core';
import { SelectionModel } from '@angular/cdk/collections';
import { IThyOptionParentComponent, ThyOptionComponent, ThyOptionSelectionChangeEvent } from 'ngx-tethys/shared';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
/** Event object that is emitted when an autocomplete option is activated. */
import * as ɵngcc0 from '@angular/core';
export interface ThyAutocompleteActivatedEvent {
    /** Reference to the autocomplete panel that emitted the event. */
    source: ThyAutocompleteComponent;
    /** Option that was selected. */
    option: ThyOptionComponent | null;
}
declare const _MixinBase: Constructor<ThyUnsubscribe> & typeof MixinBase;
export declare class ThyAutocompleteComponent extends _MixinBase implements IThyOptionParentComponent, OnInit, AfterContentInit, OnDestroy {
    private ngZone;
    private changeDetectorRef;
    dropDownClass: {
        [key: string]: boolean;
    };
    isMultiple: boolean;
    mode: string;
    isEmptyOptions: boolean;
    selectionModel: SelectionModel<ThyOptionComponent>;
    isOpened: boolean;
    /** Manages active item in option list based on key events. */
    keyManager: ActiveDescendantKeyManager<ThyOptionComponent>;
    contentTemplateRef: TemplateRef<any>;
    optionsContainer: ElementRef<any>;
    options: QueryList<ThyOptionComponent>;
    readonly optionSelectionChanges: Observable<ThyOptionSelectionChangeEvent>;
    thyEmptyText: string;
    get thyAutoActiveFirstOption(): boolean;
    set thyAutoActiveFirstOption(value: boolean);
    private _autoActiveFirstOption;
    thyOptionSelected: EventEmitter<ThyOptionSelectionChangeEvent>;
    readonly thyOpened: EventEmitter<void>;
    readonly thyClosed: EventEmitter<void>;
    /** Emits whenever an option is activated using the keyboard. */
    readonly thyOptionActivated: EventEmitter<ThyAutocompleteActivatedEvent>;
    constructor(ngZone: NgZone, changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    initKeyManager(): void;
    open(): void;
    close(): void;
    private resetOptions;
    private instanceSelectionModel;
    private onSelect;
    private setDropDownClass;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyAutocompleteComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyAutocompleteComponent, "thy-autocomplete", never, { "thyEmptyText": "thyEmptyText"; "thyAutoActiveFirstOption": "thyAutoActiveFirstOption"; }, { "thyOptionSelected": "thyOptionSelected"; "thyOpened": "thyOpened"; "thyClosed": "thyClosed"; "thyOptionActivated": "thyOptionActivated"; }, ["options"], ["*"]>;
}
export {};

//# sourceMappingURL=autocomplete.component.d.ts.map
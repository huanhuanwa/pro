{"version":3,"file":"autocomplete.component.d.ts","sources":["autocomplete.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { TemplateRef, QueryList, OnInit, EventEmitter, NgZone, OnDestroy, AfterContentInit, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { Constructor, ThyUnsubscribe } from 'ngx-tethys/core';\nimport { Observable } from 'rxjs';\nimport { MixinBase } from 'ngx-tethys/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { IThyOptionParentComponent, ThyOptionComponent, ThyOptionSelectionChangeEvent } from 'ngx-tethys/shared';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\n/** Event object that is emitted when an autocomplete option is activated. */\nexport interface ThyAutocompleteActivatedEvent {\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: ThyAutocompleteComponent;\n    /** Option that was selected. */\n    option: ThyOptionComponent | null;\n}\ndeclare const _MixinBase: Constructor<ThyUnsubscribe> & typeof MixinBase;\nexport declare class ThyAutocompleteComponent extends _MixinBase implements IThyOptionParentComponent, OnInit, AfterContentInit, OnDestroy {\n    private ngZone;\n    private changeDetectorRef;\n    dropDownClass: {\n        [key: string]: boolean;\n    };\n    isMultiple: boolean;\n    mode: string;\n    isEmptyOptions: boolean;\n    selectionModel: SelectionModel<ThyOptionComponent>;\n    isOpened: boolean;\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<ThyOptionComponent>;\n    contentTemplateRef: TemplateRef<any>;\n    optionsContainer: ElementRef<any>;\n    options: QueryList<ThyOptionComponent>;\n    readonly optionSelectionChanges: Observable<ThyOptionSelectionChangeEvent>;\n    thyEmptyText: string;\n    get thyAutoActiveFirstOption(): boolean;\n    set thyAutoActiveFirstOption(value: boolean);\n    private _autoActiveFirstOption;\n    thyOptionSelected: EventEmitter<ThyOptionSelectionChangeEvent>;\n    readonly thyOpened: EventEmitter<void>;\n    readonly thyClosed: EventEmitter<void>;\n    /** Emits whenever an option is activated using the keyboard. */\n    readonly thyOptionActivated: EventEmitter<ThyAutocompleteActivatedEvent>;\n    constructor(ngZone: NgZone, changeDetectorRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    initKeyManager(): void;\n    open(): void;\n    close(): void;\n    private resetOptions;\n    private instanceSelectionModel;\n    private onSelect;\n    private setDropDownClass;\n    ngOnDestroy(): void;\n}\nexport {};\n"]}
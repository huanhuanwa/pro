{"version":3,"sources":["../../src/date-range/optional-dates/optional-dates.component.ts","../../src/date-range/date-range.component.ts","../../src/date-range/module.ts","../../src/date-range/date-range.class.ts"],"names":["OptionalDateRangesComponent","thyPopover","this","hiddenMenu","customValue","prototype","ngOnInit","_selectDateRange","dateRange","selectedDate","selectedDateRange","close","_selectedCustomDate","date","begin","end","key","customKey","text","Component","args","selector","template","ThyPopover","INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ThyDateRangeComponent","multi","cdr","thyHiddenMenu","thyDisabledSwitch","thyCustomTextValue","thyCustomKey","optionalDateRanges","getUnixTime","startOfISOWeek","Date","endOfISOWeek","timestamp","interval","unit","startOfMonth","endOfMonth","onModelChange","onModelTouched","Object","defineProperty","value","length","writeValue","_setSelectedDateRange","detectChanges","registerOnChange","fn","registerOnTouched","_calculateNewTime","type","beginDate","endDate","addDays","addMonths","addYears","_setPreviousOrNextDate","assign","previous","next","openOptionalDateRangesMenu","event","_this","open","origin","currentTarget","hasBackdrop","backdropClass","offset","manualClosure","originActiveClass","initialState","minDate","thyMinDate","maxDate","thyMaxDate","providers","ChangeDetectorRef","Input","NgModule","imports","CommonModule","FormsModule","ThyActionMenuModule","ThySharedModule","ThyIconModule","ThyDatePickerModule","ThyNavModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DateRangeItemInfo } from '../date-range.class';\nimport { ThyPopover } from 'ngx-tethys/popover';\n\n@Component({\n    selector: 'date-range-optional',\n    templateUrl: './optional-dates.component.html'\n})\nexport class OptionalDateRangesComponent implements OnInit {\n    hiddenMenu = false;\n\n    optionalDateRanges: DateRangeItemInfo[];\n\n    customValue = '自定义';\n\n    customKey: string;\n\n    minDate: number | Date;\n\n    maxDate: number | Date;\n\n    selectedDateRange: (date: DateRangeItemInfo) => void;\n\n    selectedDate: DateRangeItemInfo;\n\n    constructor(private thyPopover: ThyPopover) {}\n\n    ngOnInit() {}\n\n    _selectDateRange(dateRange: DateRangeItemInfo) {\n        this.selectedDate = dateRange;\n        this.selectedDateRange(dateRange);\n        this.thyPopover.close();\n    }\n\n    _selectedCustomDate(date: DateRangeItemInfo) {\n        this.selectedDate = {\n            begin: date.begin,\n            end: date.end,\n            key: this.customKey,\n            text: this.customValue\n        };\n        this.selectedDateRange(this.selectedDate);\n    }\n}\n","import { Component, forwardRef, OnInit, Input, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { DateRangeItemInfo } from './date-range.class';\nimport { helpers } from 'ngx-tethys/util';\nimport { ThyPopover } from 'ngx-tethys/popover';\nimport { OptionalDateRangesComponent } from './optional-dates/optional-dates.component';\n\nimport { getUnixTime, startOfISOWeek, endOfISOWeek, endOfMonth, startOfMonth, addDays, addMonths, addYears } from 'date-fns';\nconst allDayTimestamp = 24 * 60 * 60;\n\nconst INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThyDateRangeComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'thy-date-range',\n    templateUrl: './date-range.component.html',\n    providers: [INPUT_CONTROL_VALUE_ACCESSOR]\n})\nexport class ThyDateRangeComponent implements OnInit, ControlValueAccessor {\n    @Input()\n    set thyOptionalDateRanges(value: DateRangeItemInfo[]) {\n        this.optionalDateRanges = value.length > 0 ? value : this.optionalDateRanges;\n    }\n\n    @Input() thyHiddenMenu = false;\n\n    @Input() thyDisabledSwitch = false;\n\n    @Input() thyCustomTextValue = '自定义';\n\n    @Input() thyMinDate: Date | number;\n\n    @Input() thyMaxDate: Date | number;\n\n    @Input() thyCustomKey: 'custom' | 'exception' = 'custom';\n\n    @Input() thyPickerFormat: string;\n\n    public selectedDate?: DateRangeItemInfo;\n\n    public optionalDateRanges: DateRangeItemInfo[] = [\n        {\n            key: 'week',\n            text: '本周',\n            begin: getUnixTime(startOfISOWeek(new Date())),\n            end: getUnixTime(endOfISOWeek(new Date())),\n            timestamp: {\n                interval: 7,\n                unit: 'day'\n            }\n        },\n        {\n            key: 'month',\n            text: '本月',\n            begin: getUnixTime(startOfMonth(new Date())),\n            end: getUnixTime(endOfMonth(new Date())),\n            timestamp: {\n                interval: 1,\n                unit: 'month'\n            }\n        }\n    ];\n\n    public selectedDateRange: {\n        begin: number;\n        end: number;\n    };\n\n    public onModelChange: Function = () => {};\n\n    public onModelTouched: Function = () => {};\n\n    constructor(private thyPopover: ThyPopover, private cdr: ChangeDetectorRef) {}\n\n    writeValue(value: any): void {\n        if (value) {\n            this.selectedDate = value;\n        } else if (this.optionalDateRanges.length > 0) {\n            this.selectedDate = this.optionalDateRanges[0];\n            this.onModelChange(this.selectedDate);\n        }\n        this._setSelectedDateRange();\n        this.cdr.detectChanges();\n    }\n\n    registerOnChange(fn: any): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onModelTouched = fn;\n    }\n\n    ngOnInit() {}\n\n    private _setSelectedDateRange() {\n        this.selectedDateRange = {\n            begin: this.selectedDate.begin,\n            end: this.selectedDate.end\n        };\n    }\n\n    private _calculateNewTime(type: string) {\n        if (this.selectedDate.timestamp) {\n            const beginDate = new Date(this.selectedDate.begin * 1000);\n            const endDate = new Date(this.selectedDate.end * 1000);\n            const interval = this.selectedDate.timestamp.interval;\n\n            if (this.selectedDate.timestamp.unit === 'day') {\n                if (type === 'previous') {\n                    return {\n                        begin: getUnixTime(addDays(beginDate, -1 * interval)),\n                        end: getUnixTime(addDays(endDate, -1 * interval)),\n                        key: this.thyCustomKey\n                    };\n                } else {\n                    return {\n                        begin: getUnixTime(addDays(beginDate, 1 * interval)),\n                        end: getUnixTime(addDays(endDate, 1 * interval)),\n                        key: this.thyCustomKey\n                    };\n                }\n            } else if (this.selectedDate.timestamp.unit === 'month') {\n                if (type === 'previous') {\n                    return {\n                        begin: getUnixTime(addMonths(beginDate, -1 * interval)),\n                        end: getUnixTime(addMonths(endDate, -1 * interval)),\n                        key: this.thyCustomKey\n                    };\n                } else {\n                    return {\n                        begin: getUnixTime(addMonths(beginDate, 1 * interval)),\n                        end: getUnixTime(addMonths(endDate, 1 * interval)),\n                        key: this.thyCustomKey\n                    };\n                }\n            } else if (this.selectedDate.timestamp.unit === 'year') {\n                if (type === 'previous') {\n                    return {\n                        begin: getUnixTime(addYears(beginDate, -1 * interval)),\n                        end: getUnixTime(addYears(endDate, -1 * interval)),\n                        key: this.thyCustomKey\n                    };\n                } else {\n                    return {\n                        begin: getUnixTime(addYears(beginDate, 1 * interval)),\n                        end: getUnixTime(addYears(endDate, 1 * interval)),\n                        key: this.thyCustomKey\n                    };\n                }\n            }\n        } else {\n            const interval: number = this.selectedDate.end - this.selectedDate.begin + allDayTimestamp;\n            if (type === 'previous') {\n                return {\n                    begin: this.selectedDate.begin - interval,\n                    end: this.selectedDate.end - interval,\n                    key: this.thyCustomKey\n                };\n            } else {\n                return {\n                    begin: this.selectedDate.begin + interval,\n                    end: this.selectedDate.end + interval,\n                    key: this.thyCustomKey\n                };\n            }\n        }\n    }\n\n    private _setPreviousOrNextDate(type: string) {\n        this.selectedDate = Object.assign({}, this.selectedDate, this._calculateNewTime(type));\n        this._setSelectedDateRange();\n        this.onModelChange(this.selectedDate);\n    }\n\n    public previous() {\n        this._setPreviousOrNextDate('previous');\n    }\n\n    public next() {\n        this._setPreviousOrNextDate('next');\n    }\n\n    public openOptionalDateRangesMenu(event: Event) {\n        if (this.thyHiddenMenu) {\n            return;\n        }\n        this.thyPopover.open(OptionalDateRangesComponent, {\n            origin: event.currentTarget as HTMLElement,\n            hasBackdrop: true,\n            backdropClass: 'thy-overlay-transparent-backdrop',\n            offset: 0,\n            manualClosure: true,\n            originActiveClass: 'thy-date-range-text-active',\n            initialState: {\n                hiddenMenu: this.thyHiddenMenu,\n                optionalDateRanges: this.optionalDateRanges,\n                selectedDate: this.selectedDate,\n                minDate: this.thyMinDate,\n                maxDate: this.thyMaxDate,\n                customValue: this.thyCustomTextValue,\n                customKey: this.thyCustomKey,\n                selectedDateRange: (dateRange: DateRangeItemInfo) => {\n                    this.onModelChange(dateRange);\n                    this.selectedDate = dateRange;\n                }\n            }\n        });\n    }\n}\n","import { ThyIconModule } from 'ngx-tethys/icon';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ThyDateRangeComponent } from './date-range.component';\nimport { ThyActionMenuModule } from 'ngx-tethys/action-menu';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyDatePickerModule } from 'ngx-tethys/date-picker';\nimport { OptionalDateRangesComponent } from './optional-dates/optional-dates.component';\nimport { ThyNavModule } from 'ngx-tethys/nav';\n@NgModule({\n    imports: [CommonModule, FormsModule, ThyActionMenuModule, ThySharedModule, ThyIconModule, ThyDatePickerModule, ThyNavModule],\n    declarations: [ThyDateRangeComponent, OptionalDateRangesComponent],\n    exports: [ThyDateRangeComponent],\n    entryComponents: [OptionalDateRangesComponent]\n})\nexport class ThyDateRangeModule {}\n","export type AttachTypes = 'day' | 'month' | 'year';\n\nexport class DateRangeItemInfo {\n    begin?: number;\n    end?: number;\n    key?: string;\n    text?: string;\n    timestamp?: { interval?: number, unit?: AttachTypes };\n}\n"]}
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/platform-browser'),exports, require('@angular/core'), require('@angular/platform-browser'), require('ngx-tethys/types'), require('ngx-tethys/util')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/markdown', ['@angular/core','@angular/platform-browser','exports', '@angular/core', '@angular/platform-browser', 'ngx-tethys/types', 'ngx-tethys/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.platformBrowser,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].markdown = {}), global.ng.core, global.ng.platformBrowser, global['ngx-tethys'].types, global['ngx-tethys'].util));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, platformBrowser, types, util) { 'use strict';

    var ThyMarkdownParserService = /** @class */ (function () {
        function ThyMarkdownParserService(sanitizer) {
            this.sanitizer = sanitizer;
        }
        ThyMarkdownParserService.prototype.getEmojisRender = function () {
            return null;
        };
        ThyMarkdownParserService.prototype.setHighLightWords = function () {
            return [];
        };
        ThyMarkdownParserService.prototype.filterHTML = function (html) {
            return html;
        };
        ThyMarkdownParserService.prototype.sanitizeHTML = function (html) {
            return this.sanitizer.sanitize(core.SecurityContext.HTML, html);
        };
ThyMarkdownParserService.ɵfac = function ThyMarkdownParserService_Factory(t) { return new (t || ThyMarkdownParserService)(ɵngcc0.ɵɵinject(ɵngcc1.DomSanitizer)); };
ThyMarkdownParserService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyMarkdownParserService, factory: function (t) { return ThyMarkdownParserService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownParserService, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc1.DomSanitizer }]; }, null); })();
        return ThyMarkdownParserService;
    }());
    ThyMarkdownParserService.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };

    var ThyMarkdownParserDirective = /** @class */ (function () {
        function ThyMarkdownParserDirective(elementRef, thyMarkdownParserService) {
            this.elementRef = elementRef;
            this.thyMarkdownParserService = thyMarkdownParserService;
            this.bypassSecurityTrustHtml = false;
            this.liteMarkedOptions = {
                gfm: true,
                tables: true,
                breaks: true,
                pedantic: false,
                sanitize: false,
                smartLists: true,
                smartypants: true,
                heading: true,
                link: true,
                list: true,
                wtlink: true,
                wthexcolor: true,
                wthexcolorRender: {
                    className: 'msg-inline-color'
                },
                wtat: false,
                wthash: false,
                wtentity: true,
                wtentityRender: {
                    className: 'slide-trigger'
                },
                wthashRender: {
                    chlPrefix: '/messages/groups/'
                },
                wtexclamation: true,
                wtemoji: false,
                isParagraphDefault: true,
                isImageDefault: true,
                isBlockquoteDefault: true,
                isHrDefault: true,
                isStrongDefault: true,
                isEmDefault: true,
                isCodespanDefault: true,
                isCodeDefault: true,
                isDelDefault: true,
                isHtmlDefault: true,
                isTextEscape: true,
                isDef: true,
                isImgPreview: true
            };
        }
        Object.defineProperty(ThyMarkdownParserDirective.prototype, "thyMarkdownParser", {
            set: function (value) {
                if (value) {
                    this.value = value;
                    this.translateHTML();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyMarkdownParserDirective.prototype, "thyBypassSecurityTrustHtml", {
            set: function (value) {
                this.bypassSecurityTrustHtml = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        ThyMarkdownParserDirective.prototype.initGantt = function () {
            if (types.mermaid) {
                types.mermaid.parseError = function (err, hash) {
                    types.mermaid.error = err;
                };
                types.mermaid.ganttConfig = {
                    // Configuration for Gantt diagrams
                    numberSectionStyles: 4,
                    axisFormatter: [
                        [
                            '%I:%M',
                            function (d) {
                                // Within a day
                                return d.getHours();
                            }
                        ],
                        [
                            'w. %U',
                            function (d) {
                                // Monday a week
                                return d.getDay() === 1;
                            }
                        ],
                        [
                            '%a %d',
                            function (d) {
                                // Day within a week (not monday)
                                return d.getDay() && d.getDate() !== 1;
                            }
                        ],
                        [
                            '%b %d',
                            function (d) {
                                // within a month
                                return d.getDate() !== 1;
                            }
                        ],
                        [
                            '%m-%y',
                            function (d) {
                                // Month
                                return d.getMonth();
                            }
                        ]
                    ]
                };
            }
        };
        ThyMarkdownParserDirective.prototype.initMarked = function () {
            // 设置marked
            var renderer = new types.liteMarked.Renderer();
            renderer.listitem = function (text) {
                if (!/^\[[ x]\]\s/.test(text)) {
                    return types.liteMarked.Renderer.prototype.listitem(text);
                }
                // 任务列表
                var checkbox = types.$('<input type="checkbox" disabled/>');
                if (/^\[x\]\s/.test(text)) {
                    // 完成的任务列表
                    checkbox.attr('checked', true);
                }
                return types.$(types.liteMarked.Renderer.prototype.listitem(text.substring(3)))
                    .addClass('task-list-item')
                    .prepend(checkbox)[0].outerHTML;
            };
            renderer.codespan = function (text) {
                // inline code
                if (/^\$.+\$$/.test(text)) {
                    // inline math
                    var raw = /^\$(.+)\$$/.exec(text)[1];
                    var line = raw
                        .replace(/&lt;/g, '<')
                        .replace(/&gt;/g, '>')
                        .replace(/&amp;/g, '&')
                        .replace(/&quot;/g, '"')
                        .replace(/&#39;/g, "'"); // unescape html characters
                    try {
                        return types.katex.renderToString(line, { displayMode: false });
                    }
                    catch (err) {
                        return '<code>' + err + '</code>';
                    }
                }
                return types.liteMarked.Renderer.prototype.codespan.apply(this, arguments);
            };
            renderer.code = function (code, language, escaped, line_number) {
                code = code.trim();
                var firstLine = code.split(/\n/)[0].trim();
                if (language === 'math') {
                    // 数学公式
                    var tex_1 = '';
                    code.split(/\n\n/).forEach(function (line) {
                        // 连续两个换行，则开始下一个公式
                        line = line.trim();
                        if (line.length > 0) {
                            try {
                                tex_1 += types.katex.renderToString(line, { displayMode: true });
                            }
                            catch (err) {
                                tex_1 += '<pre>' + err + '</pre>';
                            }
                        }
                    });
                    return '<div data-line="' + line_number + '">' + tex_1 + '</div>';
                }
                else if (firstLine === 'gantt' || firstLine === 'sequenceDiagram' || firstLine.match(/^graph (?:TB|BT|RL|LR|TD);?$/)) {
                    // mermaid
                    if (firstLine === 'sequenceDiagram') {
                        code += '\n'; // 如果末尾没有空行，则语法错误
                    }
                    if (types.mermaid && types.mermaid.parse(code)) {
                        return '<div class="mermaid" data-line="' + line_number + '">' + code + '</div>';
                    }
                    else {
                        if (types.mermaid && types.mermaid.error) {
                            return '<pre data-line="' + line_number + '">' + types.mermaid.error + '</pre>';
                        }
                    }
                }
                else {
                    return types.liteMarked.Renderer.prototype.code.apply(this, arguments);
                }
            };
            renderer.html = function (html) {
                var result = types.liteMarked.Renderer.prototype.html.apply(this, arguments);
                var h = types.$(result.bold());
                return h.html();
            };
            renderer.paragraph = function (text) {
                var result = types.liteMarked.Renderer.prototype.paragraph.apply(this, arguments);
                var h = types.$(result.bold());
                return h.html();
            };
            types.liteMarked.setOptions(this.liteMarkedOptions);
        };
        ThyMarkdownParserDirective.prototype.initComponent = function () {
            // 初始化甘特图
            this.initGantt();
            // 初始解析器
            this.initMarked();
        };
        ThyMarkdownParserDirective.prototype.parseMarked = function (_value) {
            if (types.liteMarked && _value) {
                return types.liteMarked(_value);
            }
            else {
                return _value;
            }
        };
        ThyMarkdownParserDirective.prototype.parseMermaid = function () {
            if (types.mermaid) {
                types.mermaid.init();
            }
        };
        ThyMarkdownParserDirective.prototype.translateHTML = function () {
            var _this = this;
            this.initComponent();
            var _value = this.thyMarkdownParserService.filterHTML(this.value);
            _value = this.parseMarked(_value);
            if (!this.bypassSecurityTrustHtml) {
                _value = this.thyMarkdownParserService.sanitizeHTML(_value);
            }
            setTimeout(function () {
                _this.parseMermaid();
            }, 100);
            this.elementRef.nativeElement.innerHTML = _value;
            types.$(this.elementRef.nativeElement)
                .find('a')
                .attr('target', function () {
                if (this.host !== location.host) {
                    return '_blank';
                }
                else {
                    var outer_path = [
                        'shared/',
                        'share/',
                        'club',
                        'videos',
                        'blog',
                        'plan',
                        'tour',
                        'mobile',
                        'security',
                        'uservoice',
                        'customers',
                        'press',
                        'help',
                        'guide',
                        'feedback',
                        'about',
                        'contact',
                        'privacy',
                        'terms'
                    ].join(')|(/');
                    outer_path = new RegExp('^(/' + outer_path + ')');
                    if (outer_path.test(this.pathname)) {
                        return '_blank';
                    }
                }
            });
        };
        ThyMarkdownParserDirective.prototype.ngOnInit = function () {
            var emojisRender = this.thyMarkdownParserService.getEmojisRender();
            if (emojisRender) {
                this.liteMarkedOptions.wtemoji = true;
                this.liteMarkedOptions.wtemojiRender = emojisRender;
            }
            this.translateHTML();
        };
ThyMarkdownParserDirective.ɵfac = function ThyMarkdownParserDirective_Factory(t) { return new (t || ThyMarkdownParserDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThyMarkdownParserService)); };
ThyMarkdownParserDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMarkdownParserDirective, selectors: [["", "thyMarkdownParser", ""]], inputs: { thyMarkdownParser: "thyMarkdownParser", thyBypassSecurityTrustHtml: "thyBypassSecurityTrustHtml" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownParserDirective, [{
        type: core.Directive,
        args: [{
                selector: '[thyMarkdownParser]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ThyMarkdownParserService }]; }, { thyMarkdownParser: [{
            type: core.Input
        }], thyBypassSecurityTrustHtml: [{
            type: core.Input
        }] }); })();
        return ThyMarkdownParserDirective;
    }());
    ThyMarkdownParserDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: ThyMarkdownParserService }
    ]; };
    ThyMarkdownParserDirective.propDecorators = {
        thyMarkdownParser: [{ type: core.Input }],
        thyBypassSecurityTrustHtml: [{ type: core.Input }]
    };

    var ThyMarkdownPlanTextParserDirective = /** @class */ (function () {
        function ThyMarkdownPlanTextParserDirective(elementRef, thyMarkdownParserService) {
            this.elementRef = elementRef;
            this.thyMarkdownParserService = thyMarkdownParserService;
            this.value = '';
            this.prefix = '';
            this.liteMarkedOptions = {
                gfm: true,
                tables: false,
                breaks: true,
                pedantic: false,
                sanitize: false,
                smartLists: false,
                smartypants: false,
                heading: false,
                link: false,
                list: false,
                wtlink: true,
                wthexcolor: true,
                wthexcolorRender: {
                    className: 'msg-inline-color'
                },
                wtat: true,
                wtatRender: {
                    memberPrefix: this.prefix,
                    className: 'slide-trigger'
                },
                wthash: true,
                wtentity: true,
                wtentityRender: {
                    className: 'slide-trigger'
                },
                wthashRender: {
                    chlPrefix: '/messages/groups/'
                },
                wtexclamation: true,
                wtemoji: false,
                isParagraphDefault: false,
                isImageDefault: false,
                isBlockquoteDefault: false,
                isHrDefault: false,
                isStrongDefault: false,
                isEmDefault: false,
                isCodespanDefault: false,
                isCodeDefault: false,
                isDelDefault: false,
                isHtmlDefault: false,
                isTextEscape: true
            };
            this.hasClass = true;
        }
        Object.defineProperty(ThyMarkdownPlanTextParserDirective.prototype, "thyMarkdownPlanText", {
            set: function (value) {
                if (value) {
                    this.value = value;
                    this.translateHTML();
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyMarkdownPlanTextParserDirective.prototype.translateHTML = function () {
            types.liteMarked.setOptions(this.liteMarkedOptions);
            var _value = types.liteMarked.toHTML(this.value, this.liteMarkedOptions.highLightWords);
            _value = this.thyMarkdownParserService.sanitizeHTML(_value);
            this.elementRef.nativeElement.innerHTML = _value;
        };
        ThyMarkdownPlanTextParserDirective.prototype.ngOnInit = function () {
            var emojisRender = this.thyMarkdownParserService.getEmojisRender();
            if (emojisRender) {
                this.liteMarkedOptions.wtemoji = true;
                this.liteMarkedOptions.wtemojiRender = emojisRender;
            }
            var _highLightWords = this.thyMarkdownParserService.setHighLightWords();
            if (_highLightWords && _highLightWords instanceof Array) {
                this.liteMarkedOptions.highLightWords = _highLightWords;
            }
            this.translateHTML();
        };
ThyMarkdownPlanTextParserDirective.ɵfac = function ThyMarkdownPlanTextParserDirective_Factory(t) { return new (t || ThyMarkdownPlanTextParserDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThyMarkdownParserService)); };
ThyMarkdownPlanTextParserDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMarkdownPlanTextParserDirective, selectors: [["", "thyMarkdownPlanText", ""]], hostVars: 2, hostBindings: function ThyMarkdownPlanTextParserDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("thy-markdown-plan-text", ctx.hasClass);
    } }, inputs: { thyMarkdownPlanText: "thyMarkdownPlanText" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownPlanTextParserDirective, [{
        type: core.Directive,
        args: [{
                selector: '[thyMarkdownPlanText]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ThyMarkdownParserService }]; }, { hasClass: [{
            type: core.HostBinding,
            args: ['class.thy-markdown-plan-text']
        }], thyMarkdownPlanText: [{
            type: core.Input
        }] }); })();
        return ThyMarkdownPlanTextParserDirective;
    }());
    ThyMarkdownPlanTextParserDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: ThyMarkdownParserService }
    ]; };
    ThyMarkdownPlanTextParserDirective.propDecorators = {
        thyMarkdownPlanText: [{ type: core.Input }],
        hasClass: [{ type: core.HostBinding, args: ['class.thy-markdown-plan-text',] }]
    };

    var ThyMarkdownModule = /** @class */ (function () {
        function ThyMarkdownModule() {
        }
ThyMarkdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyMarkdownModule });
ThyMarkdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyMarkdownModule_Factory(t) { return new (t || ThyMarkdownModule)(); }, providers: [ThyMarkdownParserService] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyMarkdownModule, { declarations: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective], exports: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMarkdownModule, [{
        type: core.NgModule,
        args: [{
                declarations: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective],
                exports: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective],
                providers: [ThyMarkdownParserService]
            }]
    }], function () { return []; }, null); })();
        return ThyMarkdownModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyMarkdownModule = ThyMarkdownModule;
    exports.ThyMarkdownParserDirective = ThyMarkdownParserDirective;
    exports.ThyMarkdownParserService = ThyMarkdownParserService;
    exports.ThyMarkdownPlanTextParserDirective = ThyMarkdownPlanTextParserDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-markdown.umd.js.map
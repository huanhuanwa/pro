(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/portal'), require('ngx-tethys/util')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/skeleton', ['exports', '@angular/core', '@angular/common', '@angular/cdk/portal', 'ngx-tethys/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].skeleton = {}), global.ng.core, global.ng.common, global.ng.cdk.portal, global['ngx-tethys'].util));
}(this, (function (exports, core, common, portal, util) { 'use strict';

    var ThySkeletonComponent = /** @class */ (function () {
        function ThySkeletonComponent(platformId) {
            this.platformId = platformId;
            this.addSkeletonClass = true;
            this.thyAnimate = true;
            this.thyBaseUrl = '';
            this.thyWidth = '100%';
            this.thyHeight = '100%';
            this.thyViewBoxWidth = 400;
            this.thyViewBoxHeight = 130;
            this.thySpeed = 2;
            this.thyPreserveAspectRatio = 'none'; // xMidYMid meet
            this.thyPrimaryColor = '#f0f0f0';
            this.thySecondaryColor = '#e0e0e0';
            this.thyPrimaryOpacity = 1;
            this.thySecondaryOpacity = 1;
            this.thyIgnoreBaseUrl = false;
            this.thyLoadingDone = false;
            this.contentTemplates = [];
            this.idClip = util.generateRandomStr();
            this.idGradient = util.generateRandomStr();
            this.defaultAnimation = ['-3; 1', '-2; 2', '-1; 3'];
            this.rtlAnimation = ['1; -3', '2; -2', '3; -1'];
        }
        ThySkeletonComponent.prototype.ngOnInit = function () {
            this.animationValues = this.thyRtl ? this.rtlAnimation : this.defaultAnimation;
            if (this.thyBaseUrl === '' && !this.thyIgnoreBaseUrl && common.isPlatformBrowser(this.platformId)) {
                this.thyBaseUrl = window.location.pathname;
            }
            this.setFillStyle();
            this.setClipPath();
        };
        ThySkeletonComponent.prototype.ngOnChanges = function (changes) {
            if (changes['thyBaseUrl']) {
                if (changes['thyBaseUrl'].previousValue !== changes['thyBaseUrl'].currentValue) {
                    this.setFillStyle();
                    this.setClipPath();
                }
            }
        };
        ThySkeletonComponent.prototype.setFillStyle = function () {
            this.fillStyle = {
                fill: "url(" + this.thyBaseUrl + "#" + this.idGradient + ")"
            };
        };
        ThySkeletonComponent.prototype.setClipPath = function () {
            this.clipPath = "url(" + this.thyBaseUrl + "#" + this.idClip + ")";
        };
        ThySkeletonComponent.prototype.assignInputProperties = function (input) {
            this.thyAnimate = input.thyAnimate;
            this.thyBaseUrl = input.thyBaseUrl;
            this.thyHeight = input.thyHeight;
            this.thyWidth = input.thyWidth;
            this.thyViewBoxHeight = input.thyViewBoxHeight;
            this.thyViewBoxWidth = input.thyViewBoxWidth;
            this.thyPreserveAspectRatio = input.thyPreserveAspectRatio;
            this.thyPrimaryColor = input.thyPrimaryColor;
            this.thyPrimaryOpacity = input.thyPrimaryOpacity;
            this.thySecondaryColor = input.thySecondaryColor;
            this.thySecondaryOpacity = input.thySecondaryOpacity;
            this.thyRtl = this.thyRtl;
            this.thySpeed = this.thySpeed;
            this.thyUniqueKey = this.thyUniqueKey;
        };
        ThySkeletonComponent.prototype.addTemplate = function (template) {
            if (template) {
                this.contentTemplates.push(template);
            }
        };
        return ThySkeletonComponent;
    }());
    ThySkeletonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-skeleton',
                    template: "<svg\n  *ngIf=\"!thyLoadingDone\"\n  attr.viewBox=\"0 0 {{ thyViewBoxWidth }} {{ thyViewBoxHeight }}\"\n  [attr.preserveAspectRatio]=\"thyPreserveAspectRatio\"\n  [ngStyle]=\"thyStyle\"\n  [attr.height]=\"thyHeight\"\n  [attr.width]=\"thyWidth\"\n>\n  <rect\n    [attr.clip-path]=\"clipPath\"\n    [ngStyle]=\"fillStyle\"\n    x=\"0\"\n    y=\"0\"\n    [attr.width]=\"thyWidth\"\n    [attr.height]=\"thyHeight\"\n  />\n\n  <defs>\n    <clipPath [attr.id]=\"idClip\">\n      <ng-container *ngIf=\"contentTemplates\">\n        <ng-container *ngFor=\"let content of contentTemplates\">\n          <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"customTemplate\">\n        <ng-container *ngTemplateOutlet=\"customTemplate\"></ng-container>\n      </ng-container>\n    </clipPath>\n\n    <linearGradient [attr.id]=\"idGradient\">\n      <stop offset=\"0%\" [attr.stop-color]=\"thyPrimaryColor\" [attr.stop-opacity]=\"thyPrimaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[0]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n\n      <stop offset=\"50%\" [attr.stop-color]=\"thySecondaryColor\" [attr.stop-opacity]=\"thySecondaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[1]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n\n      <stop offset=\"100%\" [attr.stop-color]=\"thyPrimaryColor\" [attr.stop-opacity]=\"thyPrimaryOpacity\">\n        <ng-container *ngIf=\"thyAnimate\">\n          <animate\n            attributeName=\"offset\"\n            [attr.values]=\"animationValues[2]\"\n            attr.dur=\"{{ thySpeed }}\"\n            repeatCount=\"indefinite\"\n          />\n        </ng-container>\n      </stop>\n    </linearGradient>\n  </defs>\n</svg>\n<ng-container *ngIf=\"thyLoadingDone\">\n  <ng-content></ng-content>\n</ng-container>\n"
                },] }
    ];
    ThySkeletonComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
    ]; };
    ThySkeletonComponent.propDecorators = {
        addSkeletonClass: [{ type: core.HostBinding, args: ['class.thy-skeleton',] }],
        thyAnimate: [{ type: core.Input }],
        thyBaseUrl: [{ type: core.Input }],
        thyWidth: [{ type: core.Input }],
        thyHeight: [{ type: core.Input }],
        thyViewBoxWidth: [{ type: core.Input }],
        thyViewBoxHeight: [{ type: core.Input }],
        thySpeed: [{ type: core.Input }],
        thyPreserveAspectRatio: [{ type: core.Input }],
        thyPrimaryColor: [{ type: core.Input }],
        thySecondaryColor: [{ type: core.Input }],
        thyPrimaryOpacity: [{ type: core.Input }],
        thySecondaryOpacity: [{ type: core.Input }],
        thyUniqueKey: [{ type: core.Input }],
        thyRtl: [{ type: core.Input }],
        thyStyle: [{ type: core.Input }],
        thyIgnoreBaseUrl: [{ type: core.Input }],
        thyLoadingDone: [{ type: core.Input }],
        customTemplate: [{ type: core.ContentChild, args: ['content',] }]
    };

    var ThySkeletonListComponent = /** @class */ (function () {
        function ThySkeletonListComponent(skeletonComponent) {
            this.skeletonComponent = skeletonComponent;
        }
        ThySkeletonListComponent.prototype.ngOnInit = function () {
            this.skeletonComponent.addTemplate(this.contentTemplateRef);
        };
        return ThySkeletonListComponent;
    }());
    ThySkeletonListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-skeleton-list-template',
                    template: "\n        <ng-template #content>\n            <svg:rect x=\"0\" y=\"0\" rx=\"3\" ry=\"3\" width=\"250\" height=\"10\" />\n            <svg:rect x=\"20\" y=\"20\" rx=\"3\" ry=\"3\" width=\"220\" height=\"10\" />\n            <svg:rect x=\"20\" y=\"40\" rx=\"3\" ry=\"3\" width=\"170\" height=\"10\" />\n            <svg:rect x=\"0\" y=\"60\" rx=\"3\" ry=\"3\" width=\"250\" height=\"10\" />\n            <svg:rect x=\"20\" y=\"80\" rx=\"3\" ry=\"3\" width=\"200\" height=\"10\" />\n            <svg:rect x=\"20\" y=\"100\" rx=\"3\" ry=\"3\" width=\"80\" height=\"10\" />\n        </ng-template>\n    "
                },] }
    ];
    ThySkeletonListComponent.ctorParameters = function () { return [
        { type: ThySkeletonComponent }
    ]; };
    ThySkeletonListComponent.propDecorators = {
        contentTemplateRef: [{ type: core.ViewChild, args: ['content', { static: true },] }]
    };

    var ThySkeletonBulletListComponent = /** @class */ (function () {
        function ThySkeletonBulletListComponent(skeletonComponent) {
            this.skeletonComponent = skeletonComponent;
            this.thyCount = 5;
            this.items = [];
        }
        ThySkeletonBulletListComponent.prototype.ngOnInit = function () {
            for (var i = 0; i <= this.thyCount; i++) {
                this.items.push({
                    circle: {
                        cx: 10,
                        cy: i * 30 + 20,
                        r: 8
                    },
                    rect: {
                        x: 25,
                        y: i * 2 * 15 + 15,
                        rx: 5,
                        ry: 5,
                        width: '90%',
                        height: 10
                    }
                });
            }
            this.skeletonComponent.addTemplate(this.contentTemplateRef);
        };
        return ThySkeletonBulletListComponent;
    }());
    ThySkeletonBulletListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-skeleton-bullet-list-template',
                    template: "\n        <ng-template #content>\n            <ng-container *ngFor=\"let item of items\">\n                <svg:circle [attr.cx]=\"item.circle.cx\" [attr.cy]=\"item.circle.cy\" r=\"8\" />\n                <svg:rect [attr.x]=\"item.rect.x\" [attr.y]=\"item.rect.y\" rx=\"5\" ry=\"5\" width=\"90%\" height=\"10\" />\n            </ng-container>\n        </ng-template>\n    "
                },] }
    ];
    ThySkeletonBulletListComponent.ctorParameters = function () { return [
        { type: ThySkeletonComponent }
    ]; };
    ThySkeletonBulletListComponent.propDecorators = {
        thyCount: [{ type: core.Input }],
        contentTemplateRef: [{ type: core.ViewChild, args: ['content', { static: true },] }]
    };

    var ThySkeletonTitleComponent = /** @class */ (function () {
        function ThySkeletonTitleComponent(skeletonComponent) {
            this.skeletonComponent = skeletonComponent;
            this.width = 100;
            this.height = 10;
        }
        Object.defineProperty(ThySkeletonTitleComponent.prototype, "thyWidth", {
            set: function (value) {
                if (value) {
                    this.width = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThySkeletonTitleComponent.prototype, "thyHeight", {
            set: function (value) {
                if (value) {
                    this.height = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        ThySkeletonTitleComponent.prototype.ngOnInit = function () {
            this.skeletonComponent.addTemplate(this.contentTemplateRef);
        };
        return ThySkeletonTitleComponent;
    }());
    ThySkeletonTitleComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-skeleton-title-template,[thySkeletonTitleTemplate]',
                    template: "\n        <ng-template #content>\n            <svg:rect x=\"15\" y=\"13\" rx=\"4\" ry=\"4\" [attr.width]=\"width\" [attr.height]=\"height\" />\n        </ng-template>\n    ",
                    exportAs: 'thySkeletonTitleTemplate'
                },] }
    ];
    ThySkeletonTitleComponent.ctorParameters = function () { return [
        { type: ThySkeletonComponent }
    ]; };
    ThySkeletonTitleComponent.propDecorators = {
        contentTemplateRef: [{ type: core.ViewChild, args: ['content', { static: true },] }],
        thyWidth: [{ type: core.Input }],
        thyHeight: [{ type: core.Input }]
    };

    var ThySkeletonAvatarComponent = /** @class */ (function () {
        function ThySkeletonAvatarComponent(skeletonComponent) {
            this.skeletonComponent = skeletonComponent;
        }
        ThySkeletonAvatarComponent.prototype.ngOnInit = function () {
            this.skeletonComponent.addTemplate(this.contentTemplateRef);
        };
        return ThySkeletonAvatarComponent;
    }());
    ThySkeletonAvatarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-skeleton-avatar-template,[thySkeletonAvatarTemplate]',
                    template: "\n        <ng-template #content>\n            <svg:circle cx=\"30\" cy=\"30\" r=\"30\" />\n        </ng-template>\n    "
                },] }
    ];
    ThySkeletonAvatarComponent.ctorParameters = function () { return [
        { type: ThySkeletonComponent }
    ]; };
    ThySkeletonAvatarComponent.propDecorators = {
        contentTemplateRef: [{ type: core.ViewChild, args: ['content', { static: true },] }]
    };

    var ThySkeletonParagraphComponent = /** @class */ (function () {
        function ThySkeletonParagraphComponent(skeletonComponent) {
            this.skeletonComponent = skeletonComponent;
        }
        ThySkeletonParagraphComponent.prototype.ngOnInit = function () {
            this.skeletonComponent.addTemplate(this.contentTemplateRef);
        };
        return ThySkeletonParagraphComponent;
    }());
    ThySkeletonParagraphComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-skeleton-paragraph-template,[thySkeletonParagraphTemplate]',
                    template: "\n        <ng-template #content>\n            <svg:rect x=\"0\" y=\"0\" rx=\"2\" ry=\"2\" width=\"38%\" height=\"10\" />\n            <svg:rect x=\"20\" y=\"20\" rx=\"2\" ry=\"2\" width=\"92%\" height=\"10\" />\n            <svg:rect x=\"20\" y=\"40\" rx=\"2\" ry=\"2\" width=\"92%\" height=\"10\" />\n            <svg:rect x=\"0\" y=\"60\" rx=\"2\" ry=\"2\" width=\"61%\" height=\"10\" />\n        </ng-template>\n    ",
                    exportAs: 'thySkeletonParagraphTemplate'
                },] }
    ];
    ThySkeletonParagraphComponent.ctorParameters = function () { return [
        { type: ThySkeletonComponent }
    ]; };
    ThySkeletonParagraphComponent.propDecorators = {
        contentTemplateRef: [{ type: core.ViewChild, args: ['content', { static: true },] }]
    };

    var ThySkeletonModule = /** @class */ (function () {
        function ThySkeletonModule() {
        }
        return ThySkeletonModule;
    }());
    ThySkeletonModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ThySkeletonComponent,
                        ThySkeletonListComponent,
                        ThySkeletonBulletListComponent,
                        ThySkeletonAvatarComponent,
                        ThySkeletonTitleComponent,
                        ThySkeletonParagraphComponent
                    ],
                    imports: [common.CommonModule, portal.PortalModule],
                    entryComponents: [ThySkeletonComponent],
                    exports: [
                        ThySkeletonComponent,
                        ThySkeletonListComponent,
                        ThySkeletonBulletListComponent,
                        ThySkeletonTitleComponent,
                        ThySkeletonAvatarComponent,
                        ThySkeletonParagraphComponent
                    ],
                    providers: []
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThySkeletonAvatarComponent = ThySkeletonAvatarComponent;
    exports.ThySkeletonBulletListComponent = ThySkeletonBulletListComponent;
    exports.ThySkeletonComponent = ThySkeletonComponent;
    exports.ThySkeletonListComponent = ThySkeletonListComponent;
    exports.ThySkeletonModule = ThySkeletonModule;
    exports.ThySkeletonParagraphComponent = ThySkeletonParagraphComponent;
    exports.ThySkeletonTitleComponent = ThySkeletonTitleComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-skeleton.umd.js.map

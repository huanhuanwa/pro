(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-tethys/tooltip'), require('ngx-tethys/core'), require('@angular/cdk/observers'), require('rxjs/operators'), require('ngx-tethys/util')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/flexible-text', ['exports', '@angular/core', '@angular/common', 'ngx-tethys/tooltip', 'ngx-tethys/core', '@angular/cdk/observers', 'rxjs/operators', 'ngx-tethys/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys']['flexible-text'] = {}), global.ng.core, global.ng.common, global['ngx-tethys'].tooltip, global['ngx-tethys'].core, global.ng.cdk.observers, global.rxjs.operators, global['ngx-tethys'].util));
}(this, (function (exports, core, common, tooltip, core$1, observers, operators, util) { 'use strict';

    var ThyFlexibleTextComponent = /** @class */ (function () {
        function ThyFlexibleTextComponent(elementRef, viewContainerRef, tooltipService, updateHostClassService, contentObserver) {
            this.elementRef = elementRef;
            this.viewContainerRef = viewContainerRef;
            this.tooltipService = tooltipService;
            this.updateHostClassService = updateHostClassService;
            this.contentObserver = contentObserver;
            this.isOverflow = false;
            this.subscription = null;
            this.updateHostClassService.initializeElement(this.elementRef);
        }
        Object.defineProperty(ThyFlexibleTextComponent.prototype, "thyContainerClass", {
            get: function () {
                return this.containerClass;
            },
            set: function (value) {
                this.containerClass = value;
                this.updateContainerClass();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFlexibleTextComponent.prototype, "thyContent", {
            set: function (value) {
                this.content = value;
                if (this.tooltipService.thyTooltipDirective) {
                    this.tooltipService.thyTooltipDirective.content = this.content;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFlexibleTextComponent.prototype, "thyPlacement", {
            set: function (value) {
                this.placement = value;
                if (this.tooltipService.thyTooltipDirective) {
                    this.tooltipService.thyTooltipDirective.placement = this.placement;
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyFlexibleTextComponent.prototype.ngOnInit = function () {
            this.updateContainerClass();
            this.tooltipService.attach(this.elementRef, this.viewContainerRef, this.trigger);
            if (this.placement) {
                this.tooltipService.thyTooltipDirective.placement = this.placement;
            }
            this.tooltipService.thyTooltipDirective.content = this.content;
            this.tooltipService.thyTooltipDirective.thyTooltipDisabled = true;
        };
        ThyFlexibleTextComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.applyOverflow();
            this.subscription = this.contentObserver
                .observe(this.elementRef)
                .pipe(operators.debounceTime(100))
                .subscribe(function (value) {
                _this.applyOverflow();
            });
        };
        ThyFlexibleTextComponent.prototype.ngOnDestroy = function () {
            this.tooltipService.detach();
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        ThyFlexibleTextComponent.prototype.applyOverflow = function () {
            var nativeElement = this.elementRef.nativeElement;
            if (nativeElement.clientWidth < nativeElement.scrollWidth) {
                this.isOverflow = true;
            }
            else {
                this.isOverflow = false;
            }
            this.tooltipService.thyTooltipDirective.thyTooltipDisabled = !this.isOverflow;
        };
        ThyFlexibleTextComponent.prototype.updateContainerClass = function () {
            var _a;
            var containerClass = util.isUndefinedOrNull(this.containerClass) ? 'flexible-text-container' : this.containerClass;
            var flexibleTextClass = (_a = {
                    'text-truncate': true
                },
                _a[containerClass] = containerClass !== '',
                _a);
            this.updateHostClassService.updateClassByMap(flexibleTextClass);
        };
        return ThyFlexibleTextComponent;
    }());
    ThyFlexibleTextComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-flexible-text,[thyFlexibleText]',
                    exportAs: 'thyFlexibleText',
                    template: "<ng-content></ng-content>\n",
                    providers: [tooltip.TooltipService, core$1.UpdateHostClassService]
                },] }
    ];
    ThyFlexibleTextComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.ViewContainerRef },
        { type: tooltip.TooltipService },
        { type: core$1.UpdateHostClassService },
        { type: observers.ContentObserver }
    ]; };
    ThyFlexibleTextComponent.propDecorators = {
        trigger: [{ type: core.Input, args: ['thyTooltipTrigger',] }],
        thyContainerClass: [{ type: core.Input, args: ['thyContainerClass',] }],
        thyContent: [{ type: core.Input, args: ['thyTooltipContent',] }],
        thyPlacement: [{ type: core.Input, args: ['thyTooltipPlacement',] }]
    };

    var ThyFlexibleTextModule = /** @class */ (function () {
        function ThyFlexibleTextModule() {
        }
        return ThyFlexibleTextModule;
    }());
    ThyFlexibleTextModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyFlexibleTextComponent],
                    imports: [common.CommonModule, tooltip.ThyTooltipModule, observers.ObserversModule],
                    exports: [ThyFlexibleTextComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyFlexibleTextComponent = ThyFlexibleTextComponent;
    exports.ThyFlexibleTextModule = ThyFlexibleTextModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-flexible-text.umd.js.map

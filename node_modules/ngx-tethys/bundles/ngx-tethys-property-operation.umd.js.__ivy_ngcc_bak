(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ngx-tethys/button'), require('ngx-tethys/flexible-text'), require('ngx-tethys/icon'), require('@angular/common'), require('@angular/core'), require('ngx-tethys/core'), require('ngx-tethys/util')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/property-operation', ['exports', 'ngx-tethys/button', 'ngx-tethys/flexible-text', 'ngx-tethys/icon', '@angular/common', '@angular/core', 'ngx-tethys/core', 'ngx-tethys/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys']['property-operation'] = {}), global['ngx-tethys'].button, global['ngx-tethys']['flexible-text'], global['ngx-tethys'].icon, global.ng.common, global.ng.core, global['ngx-tethys'].core, global['ngx-tethys'].util));
}(this, (function (exports, button, flexibleText, icon, common, core, core$1, util) { 'use strict';

    var ThyPropertyOperationGroupComponent = /** @class */ (function () {
        function ThyPropertyOperationGroupComponent() {
            this._isPropertyOperationGroup = true;
        }
        return ThyPropertyOperationGroupComponent;
    }());
    ThyPropertyOperationGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-property-operation-group',
                    template: "<ng-content></ng-content>\n"
                },] }
    ];
    ThyPropertyOperationGroupComponent.ctorParameters = function () { return []; };
    ThyPropertyOperationGroupComponent.propDecorators = {
        _isPropertyOperationGroup: [{ type: core.HostBinding, args: ['class.thy-property-operation-group',] }]
    };

    var ThyPropertyOperationComponent = /** @class */ (function () {
        function ThyPropertyOperationComponent(thyTranslate, updateHostClassService, elementRef) {
            this.thyTranslate = thyTranslate;
            this.updateHostClassService = updateHostClassService;
            this.elementRef = elementRef;
            this.initialized = false;
            this.onlyHasTips = false;
            this.showClose = false;
            this.labelHideWhenHasValue = false;
            this.thyOnRemove = new core.EventEmitter();
            this.thyClick = new core.EventEmitter();
            this._isPropertyOperation = true;
        }
        Object.defineProperty(ThyPropertyOperationComponent.prototype, "thyLabelText", {
            set: function (value) {
                this.labelText = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyPropertyOperationComponent.prototype, "thyValue", {
            set: function (value) {
                this.value = value;
                this.setOnlyHasTips();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyPropertyOperationComponent.prototype, "thyLabelTextTranslateKey", {
            set: function (value) {
                this.labelText = this.thyTranslate.instant(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyPropertyOperationComponent.prototype, "thyIcon", {
            set: function (value) {
                this.icon = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyPropertyOperationComponent.prototype, "thyShowClose", {
            set: function (value) {
                this.showClose = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyPropertyOperationComponent.prototype, "thyLabelHasValue", {
            // 支持有值时，label不显示
            set: function (value) {
                this.labelHideWhenHasValue = !util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyPropertyOperationComponent.prototype, "thyLabelHideWhenHasValue", {
            set: function (value) {
                this.labelHideWhenHasValue = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyPropertyOperationComponent.prototype, "thyType", {
            set: function (value) {
                this.type = value;
                this.setHostClass();
            },
            enumerable: false,
            configurable: true
        });
        ThyPropertyOperationComponent.prototype.setHostClass = function (first) {
            if (first === void 0) { first = false; }
            if (!this.initialized && !first) {
                return;
            }
            this.updateHostClassService.updateClass(this.type ? ["thy-property-operation-" + this.type] : []);
        };
        ThyPropertyOperationComponent.prototype.setOnlyHasTips = function (first) {
            if (first === void 0) { first = false; }
            if (!this.initialized && !first) {
                return;
            }
            if (this.value) {
                this.onlyHasTips = false;
            }
            else if (util.htmlElementIsEmpty(this.contentElement.nativeElement)) {
                this.onlyHasTips = true;
            }
            else {
                this.onlyHasTips = false;
            }
        };
        ThyPropertyOperationComponent.prototype.ngOnInit = function () {
            this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
            this.setHostClass(true);
        };
        ThyPropertyOperationComponent.prototype.onclick = function (event) {
            if (!this.disabled) {
                this.thyClick.emit(event);
            }
        };
        ThyPropertyOperationComponent.prototype.ngAfterContentInit = function () {
            this.setOnlyHasTips(true);
            this.initialized = true;
        };
        ThyPropertyOperationComponent.prototype.remove = function ($event) {
            $event.stopPropagation();
            this.thyOnRemove.emit($event);
        };
        return ThyPropertyOperationComponent;
    }());
    ThyPropertyOperationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-property-operation',
                    template: "<div class=\"thy-operation-icon\">\n  <ng-container *ngTemplateOutlet=\"operationIcon\"></ng-container>\n  <button\n    *ngIf=\"icon\"\n    [ngClass]=\"{ disabled: disabled }\"\n    [thyButtonIcon]=\"icon\"\n    [thyShape]=\"onlyHasTips ? 'circle-thick-dashed' : 'circle-thick-solid'\"\n  ></button>\n</div>\n<div class=\"thy-operation-content\" [ngClass]=\"{ 'only-has-tips': onlyHasTips }\">\n  <div #contentElement>\n    <ng-content></ng-content>\n  </div>\n  <ng-container *ngIf=\"value\">\n    <span thyFlexibleText [thyTooltipContent]=\"value\">{{ value }}</span>\n  </ng-container>\n\n  <div class=\"thy-tips\" *ngIf=\"!value || (!labelHideWhenHasValue && value)\">{{ labelText }}</div>\n</div>\n<span *ngIf=\"showClose && !disabled\" (click)=\"remove($event)\" class=\"close-link close-link-danger\">\n  <thy-icon thyIconName=\"close\" class=\" close-link-sm\"></thy-icon>\n</span>\n",
                    providers: [core$1.UpdateHostClassService]
                },] }
    ];
    ThyPropertyOperationComponent.ctorParameters = function () { return [
        { type: core$1.ThyTranslate },
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef }
    ]; };
    ThyPropertyOperationComponent.propDecorators = {
        thyOnRemove: [{ type: core.Output }],
        thyClick: [{ type: core.Output }],
        _isPropertyOperation: [{ type: core.HostBinding, args: ['class.thy-property-operation',] }],
        operationIcon: [{ type: core.ContentChild, args: ['operationIcon',] }],
        contentElement: [{ type: core.ViewChild, args: ['contentElement', { static: true },] }],
        thyLabelText: [{ type: core.Input }],
        thyValue: [{ type: core.Input }],
        thyLabelTextTranslateKey: [{ type: core.Input }],
        thyIcon: [{ type: core.Input }],
        thyShowClose: [{ type: core.Input }],
        thyLabelHasValue: [{ type: core.Input }],
        thyLabelHideWhenHasValue: [{ type: core.Input }],
        thyType: [{ type: core.Input }],
        active: [{ type: core.HostBinding, args: ['class.active',] }, { type: core.Input, args: ['thyActive',] }],
        disabled: [{ type: core.HostBinding, args: ['class.thy-property-operation-disabled',] }, { type: core.Input, args: ['thyDisabled',] }],
        onclick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
    };

    var ThyPropertyOperationModule = /** @class */ (function () {
        function ThyPropertyOperationModule() {
        }
        return ThyPropertyOperationModule;
    }());
    ThyPropertyOperationModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent],
                    imports: [common.CommonModule, button.ThyButtonModule, icon.ThyIconModule, flexibleText.ThyFlexibleTextModule],
                    exports: [ThyPropertyOperationComponent, ThyPropertyOperationGroupComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyPropertyOperationComponent = ThyPropertyOperationComponent;
    exports.ThyPropertyOperationGroupComponent = ThyPropertyOperationGroupComponent;
    exports.ThyPropertyOperationModule = ThyPropertyOperationModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-property-operation.umd.js.map

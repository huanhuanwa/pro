(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-tethys/core'), require('ngx-tethys/shared'), require('ngx-tethys/util'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/a11y'), require('@angular/cdk/collections'), require('@angular/forms'), require('ngx-tethys/avatar')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/list', ['exports', '@angular/core', '@angular/common', 'ngx-tethys/core', 'ngx-tethys/shared', 'ngx-tethys/util', 'rxjs', 'rxjs/operators', '@angular/cdk/a11y', '@angular/cdk/collections', '@angular/forms', 'ngx-tethys/avatar'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].list = {}), global.ng.core, global.ng.common, global['ngx-tethys'].core, global['ngx-tethys'].shared, global['ngx-tethys'].util, global.rxjs, global.rxjs.operators, global.ng.cdk.a11y, global.ng.cdk.collections, global.ng.forms, global['ngx-tethys'].avatar));
}(this, (function (exports, core, common, core$1, shared, util, rxjs, operators, a11y, collections, forms, avatar) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ThyListComponent = /** @class */ (function () {
        function ThyListComponent() {
            this._isDivided = false;
            this._isList = true;
        }
        Object.defineProperty(ThyListComponent.prototype, "thyDivided", {
            set: function (value) {
                this._isDivided = value;
            },
            enumerable: false,
            configurable: true
        });
        return ThyListComponent;
    }());
    ThyListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-list',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    ThyListComponent.ctorParameters = function () { return []; };
    ThyListComponent.propDecorators = {
        thyDivided: [{ type: core.Input }],
        _isDivided: [{ type: core.HostBinding, args: ["class.thy-list-divided",] }],
        _isList: [{ type: core.HostBinding, args: ["class.thy-list",] }]
    };
    __decorate([
        core$1.InputBoolean(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ThyListComponent.prototype, "thyDivided", null);

    var ThyListItemComponent = /** @class */ (function () {
        function ThyListItemComponent() {
            this._isListItem = true;
        }
        return ThyListItemComponent;
    }());
    ThyListItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-list-item,[thy-list-item]',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    ThyListItemComponent.ctorParameters = function () { return []; };
    ThyListItemComponent.propDecorators = {
        _isListItem: [{ type: core.HostBinding, args: ["class.thy-list-item",] }]
    };

    var listSizesMap = {
        sm: 'thy-list-sm'
    };
    var ThySelectionListComponent = /** @class */ (function () {
        function ThySelectionListComponent(renderer, elementRef, ngZone, updateHostClassService) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.ngZone = ngZone;
            this.updateHostClassService = updateHostClassService;
            this._selectionChangesUnsubscribe$ = rxjs.Subscription.EMPTY;
            this.layout = 'list';
            this._isList = true;
            this._isSelectionList = true;
            this.multiple = true;
            this.isLayoutGrid = false;
            this.spaceEnabled = true;
            /** Emits a change event whenever the selected state of an option changes. */
            this.thySelectionChange = new core.EventEmitter();
            this._onTouched = function () { };
            this._onChange = function (_) { };
            this.updateHostClassService.initializeElement(elementRef.nativeElement);
        }
        Object.defineProperty(ThySelectionListComponent.prototype, "thyMultiple", {
            set: function (value) {
                var previousValue = this.multiple;
                this.multiple = util.coerceBooleanProperty(value);
                if (previousValue !== this.multiple) {
                    this._instanceSelectionModel();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThySelectionListComponent.prototype, "thyLayout", {
            set: function (value) {
                this.layout = value;
                this.isLayoutGrid = value === 'grid';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThySelectionListComponent.prototype, "thyAutoActiveFirstItem", {
            set: function (value) {
                this.autoActiveFirstItem = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThySelectionListComponent.prototype, "thySize", {
            set: function (value) {
                this._setListSize(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThySelectionListComponent.prototype, "thySpaceKeyEnabled", {
            /** Whether keydown space toggle focused option */
            set: function (value) {
                this.spaceEnabled = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        ThySelectionListComponent.prototype._emitChangeEvent = function (option, event) {
            this.thySelectionChange.emit({
                source: this,
                value: option.thyValue,
                option: option,
                event: event,
                selected: this.isSelected(option)
            });
        };
        ThySelectionListComponent.prototype._emitModelValueChange = function () {
            var _this = this;
            if (this.options) {
                var selectedValues = this.selectionModel.selected;
                if (this.thyUniqueKey) {
                    selectedValues = selectedValues.map(function (selectedValue) {
                        var selectedOption = _this.options.find(function (option) {
                            return option.thyValue[_this.thyUniqueKey] === selectedValue;
                        });
                        if (selectedOption) {
                            return selectedOption.thyValue;
                        }
                        else {
                            return _this._modelValues.find(function (value) {
                                return value[_this.thyUniqueKey] === selectedValue;
                            });
                        }
                    });
                }
                this._modelValues = selectedValues;
                var changeValue = selectedValues;
                if (!this.multiple && selectedValues && selectedValues.length > 0) {
                    changeValue = selectedValues[0];
                }
                this._onChange(changeValue);
            }
        };
        ThySelectionListComponent.prototype._toggleFocusedOption = function (event) {
            var _this = this;
            if (this._keyManager.activeItem) {
                this.ngZone.run(function () {
                    _this.toggleOption(_this._keyManager.activeItem, event);
                });
            }
        };
        ThySelectionListComponent.prototype._initializeFocusKeyManager = function () {
            this._keyManager = new a11y.ActiveDescendantKeyManager(this.options)
                .withWrap()
                // .withTypeAhead()
                // Allow disabled items to be focusable. For accessibility reasons, there must be a way for
                // screenreader users, that allows reading the different options of the list.
                .skipPredicate(function () { return false; });
        };
        ThySelectionListComponent.prototype._instanceSelectionModel = function () {
            this.selectionModel = new collections.SelectionModel(this.multiple);
        };
        ThySelectionListComponent.prototype._getElementBySelector = function (element) {
            return util.dom.getHTMLElementBySelector(element, this.elementRef);
        };
        ThySelectionListComponent.prototype._compareValue = function (value1, value2) {
            if (this.thyCompareWith) {
                var compareFn = this.thyCompareWith;
                return compareFn(value1, value2);
            }
            else if (this.thyUniqueKey) {
                return value1 && value1[this.thyUniqueKey] === value2 && value2[this.thyUniqueKey];
            }
            else {
                return value1 === value2;
            }
        };
        ThySelectionListComponent.prototype._getOptionSelectionValue = function (option) {
            if (option.thyValue) {
                return this.thyUniqueKey ? option.thyValue[this.thyUniqueKey] : option.thyValue;
            }
            else {
                return option;
            }
        };
        ThySelectionListComponent.prototype._setSelectionByValues = function (values) {
            var _this = this;
            this.selectionModel.clear();
            values.forEach(function (value) {
                if (_this.thyUniqueKey) {
                    _this.selectionModel.select(value[_this.thyUniqueKey]);
                }
                else {
                    _this.selectionModel.select(value);
                }
            });
        };
        ThySelectionListComponent.prototype._setAllOptionsSelected = function (toIsSelected) {
            var _this = this;
            // Keep track of whether anything changed, because we only want to
            // emit the changed event when something actually changed.
            var hasChanged = false;
            this.options.forEach(function (option) {
                var fromIsSelected = _this.selectionModel.isSelected(option.thyValue);
                if (fromIsSelected !== toIsSelected) {
                    hasChanged = true;
                    _this.selectionModel.toggle(option.thyValue);
                }
            });
            if (hasChanged) {
                this._emitModelValueChange();
            }
        };
        ThySelectionListComponent.prototype._getOptionByValue = function (value) {
            var _this = this;
            return this.options.find(function (option) {
                return _this._compareValue(option.thyValue, value);
            });
        };
        ThySelectionListComponent.prototype._getActiveOption = function () {
            if (this._keyManager.activeItem) {
                return this._getOptionByValue(this._keyManager.activeItem.thyValue);
            }
            else {
                return null;
            }
        };
        ThySelectionListComponent.prototype._setListSize = function (size) {
            for (var key in listSizesMap) {
                if (listSizesMap.hasOwnProperty(key)) {
                    this.updateHostClassService.removeClass(listSizesMap[key]);
                }
            }
            if (size) {
                this.updateHostClassService.addClass(listSizesMap[size]);
            }
        };
        ThySelectionListComponent.prototype.ngOnInit = function () {
            var _this = this;
            var bindKeyEventElement = this._getElementBySelector(this.thyBindKeyEventContainer);
            this.ngZone.runOutsideAngular(function () {
                _this._bindKeyEventUnsubscribe = _this.renderer.listen(bindKeyEventElement, 'keydown', _this.onKeydown.bind(_this));
            });
            this._instanceSelectionModel();
        };
        ThySelectionListComponent.prototype.writeValue = function (value) {
            if (value) {
                if (this.multiple && !util.helpers.isArray(value)) {
                    throw new Error("multiple selection ngModel must be array.");
                }
                if (!this.multiple && util.helpers.isArray(value)) {
                    throw new Error("single selection ngModel not be array.");
                }
            }
            var values = util.helpers.isArray(value) ? value : value ? [value] : [];
            this._modelValues = values;
            if (this.options) {
                this._setSelectionByValues(values);
            }
        };
        ThySelectionListComponent.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        ThySelectionListComponent.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        ThySelectionListComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        ThySelectionListComponent.prototype.onKeydown = function (event) {
            if (this.thyBeforeKeydown) {
                // stop key down event
                var isContinue = this.thyBeforeKeydown(event);
                if (!isContinue) {
                    return;
                }
            }
            var keyCode = event.keyCode || event.which;
            var manager = this._keyManager;
            var previousFocusIndex = manager.activeItemIndex;
            switch (keyCode) {
                case util.keycodes.SPACE:
                case util.keycodes.ENTER:
                    if (keyCode === util.keycodes.SPACE && !this.spaceEnabled) {
                        return;
                    }
                    this._toggleFocusedOption(event);
                    // Always prevent space from scrolling the page since the list has focus
                    event.preventDefault();
                    break;
                default:
                    manager.onKeydown(event);
            }
            if ((keyCode === util.keycodes.UP_ARROW || keyCode === util.keycodes.DOWN_ARROW) &&
                event.shiftKey &&
                manager.activeItemIndex !== previousFocusIndex) {
                this._toggleFocusedOption(event);
            }
        };
        ThySelectionListComponent.prototype.toggleOption = function (option, event) {
            if (option && !option.disabled) {
                this.selectionModel.toggle(this._getOptionSelectionValue(option));
                // Emit a change event because the focused option changed its state through user
                // interaction.
                this._emitModelValueChange();
                this._emitChangeEvent(option, event);
            }
        };
        ThySelectionListComponent.prototype.setActiveOption = function (option) {
            this._keyManager.updateActiveItem(option); // .updateActiveItemIndex(this._getOptionIndex(option));
        };
        ThySelectionListComponent.prototype.scrollIntoView = function (option) {
            var scrollContainerElement = util.dom.getHTMLElementBySelector(this.thyScrollContainer, this.elementRef);
            core$1.ScrollToService.scrollToElement(option.element.nativeElement, scrollContainerElement);
        };
        ThySelectionListComponent.prototype.isSelected = function (option) {
            return this.selectionModel.isSelected(this._getOptionSelectionValue(option));
        };
        ThySelectionListComponent.prototype.clearActiveItem = function () {
            if (this._keyManager.activeItem) {
                this._keyManager.setActiveItem(-1);
            }
        };
        ThySelectionListComponent.prototype.determineClearActiveItem = function () {
            if (!this._getActiveOption()) {
                this.clearActiveItem();
            }
        };
        /** Selects all of the options. */
        ThySelectionListComponent.prototype.selectAll = function () {
            this._setAllOptionsSelected(true);
        };
        /** Deselects all of the options. */
        ThySelectionListComponent.prototype.deselectAll = function () {
            this._setAllOptionsSelected(false);
        };
        ThySelectionListComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._initializeFocusKeyManager();
            this.options.changes.pipe(operators.startWith(true)).subscribe(function () {
                if (_this.autoActiveFirstItem) {
                    if (!_this._keyManager.activeItem || _this.options.toArray().indexOf(_this._keyManager.activeItem) < 0) {
                        _this._keyManager.setFirstItemActive();
                    }
                }
            });
            // if (this._tempValues) {
            //     this._setSelectionByValues(this._tempValues);
            //     this._tempValues = null;
            // }
        };
        ThySelectionListComponent.prototype.ngOnDestroy = function () {
            this._selectionChangesUnsubscribe$.unsubscribe();
            if (this._bindKeyEventUnsubscribe) {
                this._bindKeyEventUnsubscribe();
            }
        };
        return ThySelectionListComponent;
    }());
    ThySelectionListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-selection-list,[thy-selection-list]',
                    template: '<ng-content></ng-content>',
                    providers: [
                        core$1.UpdateHostClassService,
                        {
                            provide: shared.THY_LIST_OPTION_PARENT_COMPONENT,
                            useExisting: ThySelectionListComponent
                        },
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return ThySelectionListComponent; }),
                            multi: true
                        }
                    ],
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ThySelectionListComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: core.NgZone },
        { type: core$1.UpdateHostClassService }
    ]; };
    ThySelectionListComponent.propDecorators = {
        _isList: [{ type: core.HostBinding, args: ["class.thy-list",] }],
        _isSelectionList: [{ type: core.HostBinding, args: ["class.thy-selection-list",] }],
        multiple: [{ type: core.HostBinding, args: ["class.thy-multiple-selection-list",] }],
        isLayoutGrid: [{ type: core.HostBinding, args: ["class.thy-grid-list",] }],
        options: [{ type: core.ContentChildren, args: [shared.ThyListOptionComponent,] }],
        thyMultiple: [{ type: core.Input }],
        thyBindKeyEventContainer: [{ type: core.Input }],
        thyScrollContainer: [{ type: core.Input }],
        thyBeforeKeydown: [{ type: core.Input }],
        thyUniqueKey: [{ type: core.Input }],
        thyCompareWith: [{ type: core.Input }],
        thyLayout: [{ type: core.Input }],
        thyAutoActiveFirstItem: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        thySpaceKeyEnabled: [{ type: core.Input }],
        thySelectionChange: [{ type: core.Output }]
    };

    var ThyListItemMetaComponent = /** @class */ (function () {
        function ThyListItemMetaComponent() {
            this.className = "thy-list-item-meta";
        }
        return ThyListItemMetaComponent;
    }());
    ThyListItemMetaComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-list-item-meta,[thy-list-item-meta]',
                    template: "<div class=\"thy-list-item-meta-avatar\">\n  <ng-container *ngIf=\"thyAvatar; else avatarTemplateRef\">\n    <thy-avatar [thySrc]=\"thyAvatar\"></thy-avatar>\n  </ng-container>\n</div>\n<div class=\"thy-list-item-meta-content\">\n  <div class=\"thy-list-item-meta-title\">\n    <ng-container *ngIf=\"thyTitle; else titleTemplateRef\">{{ thyTitle }}</ng-container>\n  </div>\n  <div class=\"thy-list-item-meta-description\">\n    <ng-container *ngIf=\"thyDescription; else descriptionTemplateRef\">{{ thyDescription }}</ng-container>\n  </div>\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ThyListItemMetaComponent.ctorParameters = function () { return []; };
    ThyListItemMetaComponent.propDecorators = {
        thyAvatar: [{ type: core.Input }],
        thyTitle: [{ type: core.Input }],
        thyDescription: [{ type: core.Input }],
        avatarTemplateRef: [{ type: core.ContentChild, args: ['metaAvatar',] }],
        titleTemplateRef: [{ type: core.ContentChild, args: ['metaTitle',] }],
        descriptionTemplateRef: [{ type: core.ContentChild, args: ['metaDescription',] }],
        className: [{ type: core.HostBinding, args: ['class',] }]
    };

    var ThyListModule = /** @class */ (function () {
        function ThyListModule() {
        }
        return ThyListModule;
    }());
    ThyListModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyListComponent, ThyListItemComponent, ThySelectionListComponent, ThyListItemMetaComponent],
                    imports: [common.CommonModule, shared.ThyOptionModule, avatar.ThyAvatarModule],
                    exports: [ThyListComponent, ThyListItemComponent, ThySelectionListComponent, ThyListItemMetaComponent, shared.ThyOptionModule]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyListComponent = ThyListComponent;
    exports.ThyListItemComponent = ThyListItemComponent;
    exports.ThyListItemMetaComponent = ThyListItemMetaComponent;
    exports.ThyListModule = ThyListModule;
    exports.ThySelectionListComponent = ThySelectionListComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-list.umd.js.map

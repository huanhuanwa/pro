{"version":3,"file":"ngx-tethys-markdown.umd.js","sources":["../../src/markdown/thy-markdown-parser.service.ts","../../src/markdown/thy-markdown-parser.directive.ts","../../src/markdown/thy-markdown-text-parser.directive.ts","../../src/markdown/module.ts","../../src/markdown/ngx-tethys-markdown.ts"],"names":["SecurityContext","Injectable","DomSanitizer","coerceBooleanProperty","mermaid","liteMarked","$","katex","Directive","ElementRef","Input","HostBinding","NgModule"],"mappings":"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","sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nexport interface EmojisRenderInfo {\n    emojis: any[];\n    getImageSrc: (emoji: string) => string;\n    className: string;\n}\n\n@Injectable()\nexport class ThyMarkdownParserService {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    getEmojisRender(): EmojisRenderInfo {\n        return null;\n    }\n\n    setHighLightWords(): string[] {\n        return [];\n    }\n\n    filterHTML(html: string) {\n        return html;\n    }\n\n    sanitizeHTML(html: string) {\n        return this.sanitizer.sanitize(SecurityContext.HTML, html);\n    }\n}\n","import { Directive, ElementRef, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ThyMarkdownParserService } from './thy-markdown-parser.service';\nimport { $, liteMarked, mermaid, katex } from 'ngx-tethys/types';\nimport { coerceBooleanProperty } from 'ngx-tethys/util';\n\n@Directive({\n    selector: '[thyMarkdownParser]'\n})\nexport class ThyMarkdownParserDirective implements OnInit {\n    public value: string;\n\n    private bypassSecurityTrustHtml = false;\n\n    private liteMarkedOptions: any = {\n        gfm: true,\n        tables: true,\n        breaks: true,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: true,\n        heading: true,\n        link: true,\n        list: true,\n        wtlink: true,\n        wthexcolor: true,\n        wthexcolorRender: {\n            className: 'msg-inline-color'\n        },\n        wtat: false,\n        wthash: false,\n        wtentity: true,\n        wtentityRender: {\n            className: 'slide-trigger'\n        },\n        wthashRender: {\n            chlPrefix: '/messages/groups/'\n        },\n        wtexclamation: true,\n        wtemoji: false,\n        isParagraphDefault: true,\n        isImageDefault: true,\n        isBlockquoteDefault: true,\n        isHrDefault: true,\n        isStrongDefault: true,\n        isEmDefault: true,\n        isCodespanDefault: true,\n        isCodeDefault: true,\n        isDelDefault: true,\n        isHtmlDefault: true,\n        isTextEscape: true,\n        isDef: true,\n        isImgPreview: true\n    };\n\n    @Input()\n    set thyMarkdownParser(value: string) {\n        if (value) {\n            this.value = value;\n            this.translateHTML();\n        }\n    }\n\n    @Input() set thyBypassSecurityTrustHtml(value: boolean) {\n        this.bypassSecurityTrustHtml = coerceBooleanProperty(value);\n    }\n\n    constructor(private elementRef: ElementRef, private thyMarkdownParserService: ThyMarkdownParserService) {}\n\n    initGantt() {\n        if (mermaid) {\n            mermaid.parseError = function(err: any, hash: any) {\n                mermaid.error = err;\n            };\n            mermaid.ganttConfig = {\n                // Configuration for Gantt diagrams\n                numberSectionStyles: 4,\n                axisFormatter: [\n                    [\n                        '%I:%M',\n                        function(d: any) {\n                            // Within a day\n                            return d.getHours();\n                        }\n                    ],\n                    [\n                        'w. %U',\n                        function(d: any) {\n                            // Monday a week\n                            return d.getDay() === 1;\n                        }\n                    ],\n                    [\n                        '%a %d',\n                        function(d: any) {\n                            // Day within a week (not monday)\n                            return d.getDay() && d.getDate() !== 1;\n                        }\n                    ],\n                    [\n                        '%b %d',\n                        function(d: any) {\n                            // within a month\n                            return d.getDate() !== 1;\n                        }\n                    ],\n                    [\n                        '%m-%y',\n                        function(d: any) {\n                            // Month\n                            return d.getMonth();\n                        }\n                    ]\n                ]\n            };\n        }\n    }\n\n    initMarked() {\n        // 设置marked\n        const renderer = new liteMarked.Renderer();\n        renderer.listitem = function(text: string) {\n            if (!/^\\[[ x]\\]\\s/.test(text)) {\n                return liteMarked.Renderer.prototype.listitem(text);\n            }\n            // 任务列表\n            const checkbox = $('<input type=\"checkbox\" disabled/>');\n            if (/^\\[x\\]\\s/.test(text)) {\n                // 完成的任务列表\n                checkbox.attr('checked', true);\n            }\n            return $(liteMarked.Renderer.prototype.listitem(text.substring(3)))\n                .addClass('task-list-item')\n                .prepend(checkbox)[0].outerHTML;\n        };\n        renderer.codespan = function(text: string) {\n            // inline code\n            if (/^\\$.+\\$$/.test(text)) {\n                // inline math\n                const raw = /^\\$(.+)\\$$/.exec(text)[1];\n                const line = raw\n                    .replace(/&lt;/g, '<')\n                    .replace(/&gt;/g, '>')\n                    .replace(/&amp;/g, '&')\n                    .replace(/&quot;/g, '\"')\n                    .replace(/&#39;/g, \"'\"); // unescape html characters\n                try {\n                    return katex.renderToString(line, { displayMode: false });\n                } catch (err) {\n                    return '<code>' + err + '</code>';\n                }\n            }\n            return liteMarked.Renderer.prototype.codespan.apply(this, arguments);\n        };\n        renderer.code = function(code: any, language: any, escaped: any, line_number: any) {\n            code = code.trim();\n            const firstLine = code.split(/\\n/)[0].trim();\n            if (language === 'math') {\n                // 数学公式\n                let tex = '';\n                code.split(/\\n\\n/).forEach(function(line: any) {\n                    // 连续两个换行，则开始下一个公式\n                    line = line.trim();\n                    if (line.length > 0) {\n                        try {\n                            tex += katex.renderToString(line, { displayMode: true });\n                        } catch (err) {\n                            tex += '<pre>' + err + '</pre>';\n                        }\n                    }\n                });\n                return '<div data-line=\"' + line_number + '\">' + tex + '</div>';\n            } else if (firstLine === 'gantt' || firstLine === 'sequenceDiagram' || firstLine.match(/^graph (?:TB|BT|RL|LR|TD);?$/)) {\n                // mermaid\n                if (firstLine === 'sequenceDiagram') {\n                    code += '\\n'; // 如果末尾没有空行，则语法错误\n                }\n                if (mermaid && mermaid.parse(code)) {\n                    return '<div class=\"mermaid\" data-line=\"' + line_number + '\">' + code + '</div>';\n                } else {\n                    if (mermaid && mermaid.error) {\n                        return '<pre data-line=\"' + line_number + '\">' + mermaid.error + '</pre>';\n                    }\n                }\n            } else {\n                return liteMarked.Renderer.prototype.code.apply(this, arguments);\n            }\n        };\n        renderer.html = function(html: string) {\n            const result = liteMarked.Renderer.prototype.html.apply(this, arguments);\n            const h = $(result.bold());\n            return h.html();\n        };\n        renderer.paragraph = function(text: string) {\n            const result = liteMarked.Renderer.prototype.paragraph.apply(this, arguments);\n            const h = $(result.bold());\n            return h.html();\n        };\n        liteMarked.setOptions(this.liteMarkedOptions);\n    }\n\n    initComponent() {\n        // 初始化甘特图\n        this.initGantt();\n        // 初始解析器\n        this.initMarked();\n    }\n\n    parseMarked(_value: string) {\n        if (liteMarked && _value) {\n            return liteMarked(_value);\n        } else {\n            return _value;\n        }\n    }\n\n    parseMermaid() {\n        if (mermaid) {\n            mermaid.init();\n        }\n    }\n\n    translateHTML() {\n        this.initComponent();\n        let _value = this.thyMarkdownParserService.filterHTML(this.value);\n        _value = this.parseMarked(_value);\n        if (!this.bypassSecurityTrustHtml) {\n            _value = this.thyMarkdownParserService.sanitizeHTML(_value);\n        }\n        setTimeout(() => {\n            this.parseMermaid();\n        }, 100);\n        this.elementRef.nativeElement.innerHTML = _value;\n        $(this.elementRef.nativeElement)\n            .find('a')\n            .attr('target', function() {\n                if (this.host !== location.host) {\n                    return '_blank';\n                } else {\n                    let outer_path: any = [\n                        'shared/',\n                        'share/',\n                        'club',\n                        'videos',\n                        'blog',\n                        'plan',\n                        'tour',\n                        'mobile',\n                        'security',\n                        'uservoice',\n                        'customers',\n                        'press',\n                        'help',\n                        'guide',\n                        'feedback',\n                        'about',\n                        'contact',\n                        'privacy',\n                        'terms'\n                    ].join(')|(/');\n                    outer_path = new RegExp('^(/' + outer_path + ')');\n                    if (outer_path.test(this.pathname)) {\n                        return '_blank';\n                    }\n                }\n            });\n    }\n\n    ngOnInit() {\n        const emojisRender = this.thyMarkdownParserService.getEmojisRender();\n        if (emojisRender) {\n            this.liteMarkedOptions.wtemoji = true;\n            this.liteMarkedOptions.wtemojiRender = emojisRender;\n        }\n        this.translateHTML();\n    }\n}\n","import { Directive, ElementRef, OnInit, Input, HostBinding } from '@angular/core';\nimport { ThyMarkdownParserService } from './thy-markdown-parser.service';\nimport { liteMarked } from 'ngx-tethys/types';\n\n@Directive({\n    selector: '[thyMarkdownPlanText]'\n})\nexport class ThyMarkdownPlanTextParserDirective implements OnInit {\n    private value = '';\n\n    private prefix = '';\n\n    private liteMarkedOptions: any = {\n        gfm: true,\n        tables: false,\n        breaks: true,\n        pedantic: false,\n        sanitize: false,\n        smartLists: false,\n        smartypants: false,\n        heading: false,\n        link: false,\n        list: false,\n        wtlink: true,\n        wthexcolor: true,\n        wthexcolorRender: {\n            className: 'msg-inline-color'\n        },\n        wtat: true,\n        wtatRender: {\n            memberPrefix: this.prefix,\n            className: 'slide-trigger'\n        },\n        wthash: true,\n        wtentity: true,\n        wtentityRender: {\n            className: 'slide-trigger'\n        },\n        wthashRender: {\n            chlPrefix: '/messages/groups/'\n        },\n        wtexclamation: true,\n        wtemoji: false,\n        isParagraphDefault: false,\n        isImageDefault: false,\n        isBlockquoteDefault: false,\n        isHrDefault: false,\n        isStrongDefault: false,\n        isEmDefault: false,\n        isCodespanDefault: false,\n        isCodeDefault: false,\n        isDelDefault: false,\n        isHtmlDefault: false,\n        isTextEscape: true\n    };\n\n    @Input()\n    set thyMarkdownPlanText(value: string) {\n        if (value) {\n            this.value = value;\n            this.translateHTML();\n        }\n    }\n\n    @HostBinding('class.thy-markdown-plan-text') hasClass = true;\n\n    constructor(private elementRef: ElementRef, private thyMarkdownParserService: ThyMarkdownParserService) {}\n\n    translateHTML() {\n        liteMarked.setOptions(this.liteMarkedOptions);\n        let _value = liteMarked.toHTML(this.value, this.liteMarkedOptions.highLightWords);\n        _value = this.thyMarkdownParserService.sanitizeHTML(_value);\n        this.elementRef.nativeElement.innerHTML = _value;\n    }\n\n    ngOnInit() {\n        const emojisRender = this.thyMarkdownParserService.getEmojisRender();\n        if (emojisRender) {\n            this.liteMarkedOptions.wtemoji = true;\n            this.liteMarkedOptions.wtemojiRender = emojisRender;\n        }\n        const _highLightWords = this.thyMarkdownParserService.setHighLightWords();\n        if (_highLightWords && _highLightWords instanceof Array) {\n            this.liteMarkedOptions.highLightWords = _highLightWords;\n        }\n        this.translateHTML();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { ThyMarkdownParserService } from './thy-markdown-parser.service';\nimport { ThyMarkdownParserDirective } from './thy-markdown-parser.directive';\nimport { ThyMarkdownPlanTextParserDirective } from './thy-markdown-text-parser.directive';\n\n@NgModule({\n    declarations: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective],\n    exports: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective],\n    providers: [ThyMarkdownParserService]\n})\nexport class ThyMarkdownModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/common'), require('@angular/core'), require('@angular/common/locales/zh-Hans'), require('@angular/forms'), require('ngx-tethys/util'), require('date-fns'), require('ngx-tethys/button'), require('ngx-tethys/icon'), require('ngx-tethys/time-picker'), require('rxjs'), require('ngx-tethys/core'), require('ngx-tethys/input'), require('ngx-tethys/popover'), require('rxjs/operators'), require('@angular/cdk/coercion')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/date-picker', ['exports', '@angular/cdk/overlay', '@angular/common', '@angular/core', '@angular/common/locales/zh-Hans', '@angular/forms', 'ngx-tethys/util', 'date-fns', 'ngx-tethys/button', 'ngx-tethys/icon', 'ngx-tethys/time-picker', 'rxjs', 'ngx-tethys/core', 'ngx-tethys/input', 'ngx-tethys/popover', 'rxjs/operators', '@angular/cdk/coercion'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys']['date-picker'] = {}), global.ng.cdk.overlay, global.ng.common, global.ng.core, global.ng.common.locales.zhHans, global.ng.forms, global['ngx-tethys'].util, global.dateFns, global['ngx-tethys'].button, global['ngx-tethys'].icon, global['ngx-tethys']['time-picker'], global.rxjs, global['ngx-tethys'].core, global['ngx-tethys'].input, global['ngx-tethys'].popover, global.rxjs.operators, global.ng.cdk.coercion));
}(this, (function (exports, overlay, common, i0, localeZhHans, forms, util, dateFns, button, icon, timePicker, rxjs, core, input, popover, operators, coercion) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var localeZhHans__default = /*#__PURE__*/_interopDefaultLegacy(localeZhHans);

    function instanceOfDateEntry(object) {
        return isSupportDateType(object, 'date') && typeof object.with_time === 'number';
    }
    function instanceOfRangeEntry(object) {
        return isSupportDateType(object, 'begin') && isSupportDateType(object, 'end');
    }
    function isSupportDateType(object, key) {
        return typeof object[key] === 'number' || object[key] === null || object[key] instanceof Date;
    }

    var CalendarFooterComponent = /** @class */ (function () {
        function CalendarFooterComponent(_elementRef, _renderer, _viewContainerRef) {
            this.showTime = false;
            this.mustShowTime = false;
            this.selectTime = new i0.EventEmitter();
            this.clickOk = new i0.EventEmitter();
            this.clickRemove = new i0.EventEmitter();
            this.showTimePickerChange = new i0.EventEmitter();
            this.isShowTime = false;
            this.isCanTime = false;
        }
        CalendarFooterComponent.prototype.ngOnInit = function () {
            this._initTimeShowMode();
            if (!this.value) {
                this.value = new util.TinyDate();
            }
        };
        CalendarFooterComponent.prototype.onSelectTime = function (date) {
            this.selectTime.emit(new util.TinyDate(date));
        };
        CalendarFooterComponent.prototype.onTimeOk = function () {
            this.selectTime.emit(this.value);
            this.clickOk.emit();
        };
        CalendarFooterComponent.prototype.onClear = function () {
            this.value = null;
            this.clickRemove.emit();
        };
        CalendarFooterComponent.prototype.changeTimeShowMode = function (type) {
            switch (type) {
                case 'can':
                    this.isCanTime = true;
                    this.isShowTime = false;
                    break;
                case 'show':
                    this.isCanTime = false;
                    this.isShowTime = true;
                    break;
            }
            this.showTimePickerChange.emit(this.isShowTime);
        };
        CalendarFooterComponent.prototype._initTimeShowMode = function () {
            if (this.mustShowTime) {
                this.changeTimeShowMode('show');
            }
            else {
                if (this.showTime) {
                    this.changeTimeShowMode('can');
                }
            }
        };
        return CalendarFooterComponent;
    }());
    CalendarFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'calendar-footer',
                    exportAs: 'calendarFooter',
                    template: "<div *ngIf=\"isShowTime || isCanTime\" class=\"time-picker-section\" (click)=\"$event.stopPropagation()\">\n  <a\n    href=\"javascript:;\"\n    *ngIf=\"isCanTime\"\n    class=\"link-has-icon time-picker-set-btn\"\n    (click)=\"changeTimeShowMode('show')\"\n  >\n    <thy-icon thyIconName=\"clock-circle\"></thy-icon>\u8BBE\u7F6E\u65F6\u95F4\n  </a>\n  <thy-time-picker\n    *ngIf=\"isShowTime\"\n    class=\"time-picker-wrap\"\n    [showMeridian]=\"false\"\n    [ngModel]=\"value?.nativeDate\"\n    (ngModelChange)=\"onSelectTime($event)\"\n  ></thy-time-picker>\n  <div class=\"time-picker-btn-wrap\">\n    <button *ngIf=\"!isCanTime\" class=\"time-picker-ok-btn\" thyButton=\"primary\" thySize=\"sm\" (click)=\"onTimeOk()\">\n      \u786E\u5B9A\n    </button>\n    <button class=\"time-picker-clear-btn\" thyButton=\"link-secondary\" thySize=\"sm\" (click)=\"onClear()\">\n      \u6E05\u9664\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    CalendarFooterComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i0.ViewContainerRef }
    ]; };
    CalendarFooterComponent.propDecorators = {
        showTime: [{ type: i0.Input }],
        mustShowTime: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        selectTime: [{ type: i0.Output }],
        clickOk: [{ type: i0.Output }],
        clickRemove: [{ type: i0.Output }],
        showTimePickerChange: [{ type: i0.Output }]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    function DATE_HELPER_SERVICE_FACTORY() {
        return new DateHelperByDatePipe();
    }
    var DateHelperService = /** @class */ (function () {
        function DateHelperService() {
            this.relyOnDatePipe = this instanceof DateHelperByDatePipe;
        }
        return DateHelperService;
    }());
    DateHelperService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: DATE_HELPER_SERVICE_FACTORY, token: DateHelperService, providedIn: "root" });
    DateHelperService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useFactory: DATE_HELPER_SERVICE_FACTORY
                },] }
    ];
    var DateHelperByDatePipe = /** @class */ (function (_super) {
        __extends(DateHelperByDatePipe, _super);
        function DateHelperByDatePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DateHelperByDatePipe.prototype.getISOWeek = function (date) {
            return +this.format(date, 'w');
        };
        DateHelperByDatePipe.prototype.getFirstDayOfWeek = function () {
            return 0;
        };
        DateHelperByDatePipe.prototype.format = function (date, formatStr) {
            return date ? common.formatDate(date, formatStr, 'zh-Hans') : '';
        };
        DateHelperByDatePipe.prototype.transCompatFormat = function (format) {
            return format && format.replace(/Y/g, 'y').replace(/D/g, 'd');
        };
        return DateHelperByDatePipe;
    }(DateHelperService));
    DateHelperByDatePipe.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: DATE_HELPER_SERVICE_FACTORY, token: DateHelperByDatePipe, providedIn: "root" });

    var CalendarHeaderComponent = /** @class */ (function () {
        function CalendarHeaderComponent(dateHelper) {
            this.dateHelper = dateHelper;
            this.enablePrev = true;
            this.enableNext = true;
            this.valueChange = new i0.EventEmitter();
            this.panelModeChange = new i0.EventEmitter();
            this.chooseDecade = new i0.EventEmitter();
            this.chooseYear = new i0.EventEmitter();
            this.chooseMonth = new i0.EventEmitter();
            this.prefixCls = 'thy-calendar';
            // tslint:disable-next-line: max-line-length
            this.yearToMonth = false; // Indicate whether should change to month panel when current is year panel (if referer=month, it should show month panel when choosed a year)
        }
        CalendarHeaderComponent.prototype.ngOnInit = function () {
            if (!this.value) {
                this.value = new util.TinyDate();
            }
        };
        CalendarHeaderComponent.prototype.ngOnChanges = function (changes) {
            if (changes.value) {
                this.render();
            }
        };
        CalendarHeaderComponent.prototype.previousYear = function () {
            this.gotoYear(-1);
        };
        CalendarHeaderComponent.prototype.nextYear = function () {
            this.gotoYear(1);
        };
        CalendarHeaderComponent.prototype.previousMonth = function () {
            this.gotoMonth(-1);
        };
        CalendarHeaderComponent.prototype.nextMonth = function () {
            this.gotoMonth(1);
        };
        CalendarHeaderComponent.prototype.changePanel = function (mode, value) {
            this.panelModeChange.emit(mode);
            if (value) {
                this.changeValueFromInside(value);
            }
        };
        CalendarHeaderComponent.prototype.onChooseDecade = function (value) {
            this.changePanel('year', value);
            this.chooseDecade.emit(value);
        };
        CalendarHeaderComponent.prototype.onChooseYear = function (value) {
            this.changePanel(this.yearToMonth ? 'month' : 'date', value);
            this.yearToMonth = false; // Clear
            this.chooseYear.emit(value);
        };
        CalendarHeaderComponent.prototype.onChooseMonth = function (value) {
            this.changePanel('date', value);
            this.yearToMonth = false; // Clear
            this.chooseMonth.emit(value);
        };
        CalendarHeaderComponent.prototype.changeToMonthPanel = function () {
            this.changePanel('month');
            this.yearToMonth = true;
        };
        CalendarHeaderComponent.prototype.render = function () {
            if (this.value) {
                this.yearMonthDaySelectors = this.createYearMonthDaySelectors();
            }
        };
        CalendarHeaderComponent.prototype.gotoMonth = function (amount) {
            this.changeValueFromInside(this.value.addMonths(amount));
        };
        CalendarHeaderComponent.prototype.gotoYear = function (amount) {
            this.changeValueFromInside(this.value.addYears(amount));
        };
        CalendarHeaderComponent.prototype.changeValueFromInside = function (value) {
            if (this.value !== value) {
                this.value = value;
                this.valueChange.emit(this.value);
                this.render();
            }
        };
        CalendarHeaderComponent.prototype.formatDateTime = function (format) {
            return this.dateHelper.format(this.value.nativeDate, format);
        };
        CalendarHeaderComponent.prototype.createYearMonthDaySelectors = function () {
            var _this = this;
            var year;
            var month;
            // NOTE: Compat for DatePipe formatting rules
            var yearFormat = 'yyyy年';
            if (this.dateHelper.relyOnDatePipe) {
                yearFormat = this.dateHelper.transCompatFormat(yearFormat);
            }
            year = {
                className: this.prefixCls + "-year-select",
                onClick: function () { return _this.changePanel('year'); },
                label: this.formatDateTime(yearFormat)
            };
            month = {
                className: this.prefixCls + "-month-select",
                onClick: function () { return _this.changeToMonthPanel(); },
                label: this.formatDateTime('MMM')
            };
            // NOTE: Compat for DatePipe formatting rules
            var dayFormat = 'd日';
            if (this.dateHelper.relyOnDatePipe) {
                dayFormat = this.dateHelper.transCompatFormat(dayFormat);
            }
            var result;
            result = [year, month];
            return result.filter(function (selector) { return !!selector; });
        };
        return CalendarHeaderComponent;
    }());
    CalendarHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'calendar-header',
                    exportAs: 'calendarHeader',
                    template: "<div class=\"{{ prefixCls }}-header\">\n  <div style=\"position: relative;\">\n    <a *ngIf=\"enablePrev\" class=\"{{ prefixCls }}-prev-year-btn\" role=\"button\" (click)=\"previousYear()\" title=\"\u53BB\u5E74\"></a>\n    <a\n      *ngIf=\"enablePrev\"\n      class=\"{{ prefixCls }}-prev-month-btn\"\n      role=\"button\"\n      (click)=\"previousMonth()\"\n      title=\"\u4E0A\u6708\"\n    ></a>\n\n    <span class=\"{{ prefixCls }}-my-select\">\n      <ng-container *ngFor=\"let selector of yearMonthDaySelectors\">\n        <a\n          class=\"{{ selector.className }}\"\n          role=\"button\"\n          (click)=\"selector.onClick ? selector.onClick() : null\"\n          title=\"{{ selector.title || null }}\"\n        >\n          {{ selector.label }}\n        </a>\n      </ng-container>\n    </span>\n\n    <a *ngIf=\"enableNext\" class=\"{{ prefixCls }}-next-month-btn\" role=\"button\" (click)=\"nextMonth()\" title=\"\u4E0B\u4E2A\u6708\"></a>\n    <a *ngIf=\"enableNext\" class=\"{{ prefixCls }}-next-year-btn\" role=\"button\" (click)=\"nextYear()\" title=\"\u4E0B\u4E00\u5E74\"></a>\n  </div>\n\n  <ng-container [ngSwitch]=\"panelMode\">\n    <ng-container *ngSwitchCase=\"'decade'\">\n      <decade-panel [value]=\"value\" (valueChange)=\"onChooseDecade($event)\"></decade-panel>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'year'\">\n      <year-panel\n        [value]=\"value\"\n        [disabledDate]=\"disabledYear\"\n        (valueChange)=\"onChooseYear($event)\"\n        (decadePanelShow)=\"changePanel('decade')\"\n      ></year-panel>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'month'\">\n      <month-panel\n        [value]=\"value\"\n        [disabledDate]=\"disabledMonth\"\n        (valueChange)=\"onChooseMonth($event)\"\n        (yearPanelShow)=\"changePanel('year')\"\n      ></month-panel>\n    </ng-container>\n  </ng-container>\n</div>\n"
                },] }
    ];
    CalendarHeaderComponent.ctorParameters = function () { return [
        { type: DateHelperService }
    ]; };
    CalendarHeaderComponent.propDecorators = {
        enablePrev: [{ type: i0.Input }],
        enableNext: [{ type: i0.Input }],
        disabledMonth: [{ type: i0.Input }],
        disabledYear: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        valueChange: [{ type: i0.Output }],
        panelMode: [{ type: i0.Input }],
        panelModeChange: [{ type: i0.Output }],
        chooseDecade: [{ type: i0.Output }],
        chooseYear: [{ type: i0.Output }],
        chooseMonth: [{ type: i0.Output }]
    };

    var MAX_ROW$2 = 4;
    var MAX_COL$2 = 3;
    var DecadePanelComponent = /** @class */ (function () {
        function DecadePanelComponent() {
            this.valueChange = new i0.EventEmitter();
            this.prefixCls = 'thy-calendar-decade-panel';
        }
        Object.defineProperty(DecadePanelComponent.prototype, "startYear", {
            get: function () {
                return parseInt("" + this.value.getYear() / 100, 10) * 100;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DecadePanelComponent.prototype, "endYear", {
            get: function () {
                return this.startYear + 99;
            },
            enumerable: false,
            configurable: true
        });
        DecadePanelComponent.prototype.ngOnChanges = function (changes) {
            if (changes.value) {
                this.render();
            }
        };
        DecadePanelComponent.prototype.previousCentury = function () {
            this.gotoYear(-100);
        };
        DecadePanelComponent.prototype.nextCentury = function () {
            this.gotoYear(100);
        };
        DecadePanelComponent.prototype.trackPanelDecade = function (_index, decadeData) {
            return decadeData.content;
        };
        DecadePanelComponent.prototype.render = function () {
            if (this.value) {
                this.panelDecades = this.makePanelDecades();
            }
        };
        // Re-render panel content by the header's buttons (NOTE: Do not try to trigger final value change)
        DecadePanelComponent.prototype.gotoYear = function (amount) {
            this.value = this.value.addYears(amount);
            // this.valueChange.emit(this.value); // Do not try to trigger final value change
            this.render();
        };
        DecadePanelComponent.prototype.chooseDecade = function (startYear) {
            this.value = this.value.setYear(startYear);
            this.valueChange.emit(this.value);
        };
        DecadePanelComponent.prototype.makePanelDecades = function () {
            var _this = this;
            var decades = [];
            var currentYear = this.value.getYear();
            var startYear = this.startYear;
            var endYear = this.endYear;
            var previousYear = startYear - 10;
            var index = 0;
            for (var rowIndex = 0; rowIndex < MAX_ROW$2; rowIndex++) {
                decades[rowIndex] = [];
                var _loop_1 = function (colIndex) {
                    var _a;
                    var start = previousYear + index * 10;
                    var end = previousYear + index * 10 + 9;
                    var content = start + "-" + end;
                    var cell = (decades[rowIndex][colIndex] = {
                        content: content,
                        title: content,
                        isCurrent: currentYear >= start && currentYear <= end,
                        isLowerThanStart: end < startYear,
                        isBiggerThanEnd: start > endYear,
                        classMap: null,
                        onClick: function () { return _this.chooseDecade(start); }
                    });
                    cell.classMap = (_a = {},
                        _a[this_1.prefixCls + "-cell"] = true,
                        _a[this_1.prefixCls + "-selected-cell"] = cell.isCurrent,
                        _a[this_1.prefixCls + "-last-century-cell"] = cell.isLowerThanStart,
                        _a[this_1.prefixCls + "-next-century-cell"] = cell.isBiggerThanEnd,
                        _a);
                    index++;
                };
                var this_1 = this;
                for (var colIndex = 0; colIndex < MAX_COL$2; colIndex++) {
                    _loop_1(colIndex);
                }
            }
            return decades;
        };
        return DecadePanelComponent;
    }());
    DecadePanelComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'decade-panel',
                    exportAs: 'decadePanel',
                    template: "<div class=\"{{ prefixCls }}\">\n  <div class=\"{{ prefixCls }}-header\">\n    <a class=\"{{ prefixCls }}-prev-century-btn\" role=\"button\" (click)=\"previousCentury()\" title=\"\u4E0A\u4E00\u4E16\u7EAA\"></a>\n\n    <div class=\"{{ prefixCls }}-century\">{{ startYear }}-{{ endYear }}</div>\n    <a class=\"{{ prefixCls }}-next-century-btn\" role=\"button\" (click)=\"nextCentury()\" title=\"\u4E0B\u4E00\u4E16\u7EAA\"></a>\n  </div>\n  <div class=\"{{ prefixCls }}-body\">\n    <table class=\"{{ prefixCls }}-table\" cellSpacing=\"0\" role=\"grid\">\n      <tbody class=\"{{ prefixCls }}-tbody\">\n        <tr *ngFor=\"let row of panelDecades\" role=\"row\">\n          <td\n            *ngFor=\"let cell of row; trackBy: trackPanelDecade\"\n            role=\"gridcell\"\n            title=\"{{ cell.title }}\"\n            (click)=\"cell.onClick()\"\n            [ngClass]=\"cell.classMap\"\n          >\n            <a class=\"{{ prefixCls }}-decade\">{{ cell.content }}</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n"
                },] }
    ];
    DecadePanelComponent.ctorParameters = function () { return []; };
    DecadePanelComponent.propDecorators = {
        value: [{ type: i0.Input }],
        valueChange: [{ type: i0.Output }]
    };

    var MonthPanelComponent = /** @class */ (function () {
        function MonthPanelComponent() {
            this.valueChange = new i0.EventEmitter();
            this.yearPanelShow = new i0.EventEmitter();
            this.prefixCls = 'thy-calendar-month-panel';
        }
        MonthPanelComponent.prototype.previousYear = function () {
            this.gotoYear(-1);
        };
        MonthPanelComponent.prototype.nextYear = function () {
            this.gotoYear(1);
        };
        MonthPanelComponent.prototype.gotoYear = function (amount) {
            this.value = this.value.addYears(amount);
        };
        return MonthPanelComponent;
    }());
    MonthPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'month-panel',
                    exportAs: 'monthPanel',
                    template: "<div class=\"{{ prefixCls }}\">\n  <div class=\"{{ prefixCls }}-header\">\n    <a class=\"{{ prefixCls }}-prev-year-btn\" role=\"button\" (click)=\"previousYear()\" title=\"\u53BB\u5E74\"></a>\n\n    <a class=\"{{ prefixCls }}-year-select\" role=\"button\" (click)=\"yearPanelShow.emit()\" title=\"\u9009\u62E9\u5E74\u4EFD\">\n      <span class=\"{{ prefixCls }}-year-select-content\">{{ value.getYear() }}</span>\n    </a>\n\n    <a class=\"{{ prefixCls }}-next-year-btn\" role=\"button\" (click)=\"nextYear()\" title=\"\u4E0B\u4E00\u5E74\"></a>\n  </div>\n  <div class=\"{{ prefixCls }}-body\">\n    <month-table\n      [prefixCls]=\"'thy-calendar'\"\n      [disabledDate]=\"disabledDate\"\n      [value]=\"value\"\n      (valueChange)=\"valueChange.emit($event)\"\n    ></month-table>\n  </div>\n</div>\n"
                },] }
    ];
    MonthPanelComponent.propDecorators = {
        value: [{ type: i0.Input }],
        disabledDate: [{ type: i0.Input }],
        valueChange: [{ type: i0.Output }],
        yearPanelShow: [{ type: i0.Output }]
    };

    function transformDateValue(value) {
        if (!value) {
            return { value: null };
        }
        var withTime;
        if (value && typeof value === 'number') {
            value = convertDate(value);
        }
        if (value && instanceOfDateEntry(value)) {
            var date = value.date, with_time = value.with_time;
            value = date ? convertDate(date) : null;
            withTime = !!with_time;
        }
        if (value && instanceOfRangeEntry(value)) {
            var rangeValue = value;
            value = [];
            if (rangeValue.begin && rangeValue.end) {
                value[0] = convertDate(rangeValue.begin);
                value[1] = convertDate(rangeValue.end);
            }
        }
        return { value: value, withTime: withTime };
    }
    function convertDate(date) {
        if (typeof date === 'number') {
            if (date.toString().length < 13) {
                return dateFns.fromUnixTime(date);
            }
            else {
                return new Date(date);
            }
        }
        else {
            return date;
        }
    }
    function hasValue(value) {
        if (Array.isArray(value)) {
            return !!value[0] && !!value[1];
        }
        else {
            return !!value;
        }
    }
    function makeValue(value, isRange) {
        if (isRange === void 0) { isRange = false; }
        if (isRange) {
            return value ? value.map(function (val) { return new util.TinyDate(val); }) : [];
        }
        else {
            return value ? new util.TinyDate(value) : null;
        }
    }

    var DatePopupComponent = /** @class */ (function () {
        function DatePopupComponent(cdr) {
            this.cdr = cdr;
            this.panelModeChange = new i0.EventEmitter();
            this.calendarChange = new i0.EventEmitter();
            this.valueChange = new i0.EventEmitter();
            this.resultOk = new i0.EventEmitter(); // Emitted when done with date selecting
            this.showTimePickerChange = new i0.EventEmitter();
            this.prefixCls = 'thy-calendar';
            this.showTimePicker = false;
            this.partTypeMap = { left: 0, right: 1 };
        }
        DatePopupComponent.prototype.setProperty = function (key, value) {
            this[key] = value;
            this.cdr.markForCheck();
        };
        DatePopupComponent.prototype.ngOnInit = function () {
            var _this = this;
            // Initialization for range properties to prevent errors while later assignment
            if (this.isRange) {
                ['panelMode', 'selectedValue', 'hoverValue'].forEach(function (prop) { return _this.initialArray(prop); });
            }
            if (this.defaultPickerValue && !hasValue(this.value)) {
                var value = transformDateValue(this.defaultPickerValue).value;
                this.value = makeValue(value, this.isRange);
                if (this.isRange) {
                    this.reInitializeRangeRelatedValue();
                }
            }
            this.initDisabledDate();
        };
        DatePopupComponent.prototype.ngOnChanges = function (changes) {
            if (this.isRange) {
                if (changes.value) {
                    this.reInitializeRangeRelatedValue();
                }
            }
        };
        DatePopupComponent.prototype.reInitializeRangeRelatedValue = function () {
            this.clearHoverValue();
            this.selectedValue = this.value;
            this.valueForRangeShow = this.normalizeRangeValue(this.value);
        };
        DatePopupComponent.prototype.initDisabledDate = function () {
            var minDate;
            var maxDate;
            var disabledDateFn;
            if (this.minDate) {
                var value = transformDateValue(this.minDate).value;
                minDate = new util.TinyDate(value);
            }
            if (this.maxDate) {
                var value = transformDateValue(this.maxDate).value;
                maxDate = new util.TinyDate(value);
            }
            if (this.disabledDate) {
                disabledDateFn = this.disabledDate;
            }
            this.disabledDate = function (d) {
                var expression = false;
                if (minDate) {
                    expression = d < minDate.startOfDay().nativeDate;
                }
                if (maxDate && !expression) {
                    expression = d > maxDate.endOfDay().nativeDate;
                }
                if (disabledDateFn && typeof disabledDateFn === 'function' && !expression) {
                    expression = disabledDateFn(d);
                }
                return expression;
            };
        };
        DatePopupComponent.prototype.onShowTimePickerChange = function (show) {
            this.showTimePicker = show;
            this.showTimePickerChange.emit(show);
        };
        DatePopupComponent.prototype.onClickOk = function () {
            this.setValue(this.value);
            this.valueChange.emit(this.value);
            this.resultOk.emit();
        };
        DatePopupComponent.prototype.onClickRemove = function () {
            this.value = this.isRange ? [] : null;
            this.setValue(this.value);
            this.valueChange.emit(this.value);
        };
        DatePopupComponent.prototype.onDayHover = function (value) {
            if (this.isRange && this.selectedValue[0] && !this.selectedValue[1]) {
                // When right value is selected, don't do hover
                var base = this.selectedValue[0]; // Use the left of selected value as the base to decide later hoverValue
                if (base.isBeforeDay(value)) {
                    this.hoverValue = [base, value];
                }
                else {
                    this.hoverValue = [value, base];
                }
            }
        };
        DatePopupComponent.prototype.onPanelModeChange = function (mode, partType) {
            if (this.isRange) {
                this.panelMode[this.getPartTypeIndex(partType)] = mode;
            }
            else {
                this.panelMode = mode;
            }
            this.panelModeChange.emit(this.panelMode);
        };
        DatePopupComponent.prototype.onHeaderChange = function (value, partType) {
            if (this.isRange) {
                this.valueForRangeShow[this.getPartTypeIndex(partType)] = value;
                this.valueForRangeShow = this.normalizeRangeValue(this.valueForRangeShow); // Should always take care of start/end
            }
            else {
                if (this.showTimePicker) {
                    this.setValue(value);
                }
            }
        };
        DatePopupComponent.prototype.onSelectTime = function (value, partType) {
            if (this.isRange) {
                // TODO:range picker set time
            }
            else {
                this.setValue(new util.TinyDate(value.nativeDate));
            }
        };
        DatePopupComponent.prototype.changeValueFromSelect = function (value) {
            if (this.isRange) {
                var _a = __read(this.selectedValue, 2), left = _a[0], right = _a[1];
                if ((!left && !right) || (left && right)) {
                    // If totally full or empty, clean up && re-assign left first
                    this.hoverValue = this.selectedValue = [value];
                    this.selectedValue = [new util.TinyDate(dateFns.startOfDay(this.selectedValue[0].nativeDate))];
                    this.calendarChange.emit([this.selectedValue[0].clone()]);
                }
                else if (left && !right) {
                    // If one of them is empty, assign the other one and sort, then set the final values
                    this.clearHoverValue(); // Clean up
                    this.setRangeValue('right', value);
                    this.selectedValue = util.sortRangeValue(this.selectedValue); // Sort
                    this.selectedValue = [
                        new util.TinyDate(dateFns.startOfDay(this.selectedValue[0].nativeDate)),
                        new util.TinyDate(dateFns.endOfDay(this.selectedValue[1].nativeDate))
                    ];
                    this.valueForRangeShow = this.normalizeRangeValue(this.selectedValue);
                    this.setValue(this.cloneRangeDate(this.selectedValue));
                    this.calendarChange.emit(this.cloneRangeDate(this.selectedValue));
                }
            }
            else {
                this.setValue(value);
            }
        };
        DatePopupComponent.prototype.enablePrevNext = function (direction, partType) {
            if (this.isRange) {
                var _a = __read(this.valueForRangeShow, 2), start = _a[0], end = _a[1];
                var showMiddle = !start.addMonths(1).isSame(end, 'month'); // One month diff then don't show middle prev/next
                if ((partType === 'left' && direction === 'next') || (partType === 'right' && direction === 'prev')) {
                    return showMiddle;
                }
                return true;
            }
            else {
                return true;
            }
        };
        DatePopupComponent.prototype.getPanelMode = function (partType) {
            if (this.isRange) {
                return this.panelMode[this.getPartTypeIndex(partType)];
            }
            else {
                return this.panelMode;
            }
        };
        DatePopupComponent.prototype.getValueBySelector = function (partType) {
            if (this.isRange) {
                var valueShow = this.valueForRangeShow; // Use the real time value that without decorations when timepicker is shown up
                return valueShow[this.getPartTypeIndex(partType)];
            }
            else {
                return this.value;
            }
        };
        DatePopupComponent.prototype.getPartTypeIndex = function (partType) {
            return this.partTypeMap[partType];
        };
        DatePopupComponent.prototype.clearHoverValue = function () {
            this.hoverValue = [];
        };
        DatePopupComponent.prototype.setValue = function (value) {
            this.value = value;
            if (!this.showTime || !this.showTimePicker) {
                this.valueChange.emit(this.value);
            }
        };
        DatePopupComponent.prototype.normalizeRangeValue = function (value) {
            var _a = __read(value, 2), start = _a[0], end = _a[1];
            var newStart = start || new util.TinyDate();
            var newEnd = end && end.isSameMonth(newStart) ? end.addMonths(1) : end || newStart.addMonths(1);
            return [newStart, newEnd];
        };
        // Renew and set a range value to trigger sub-component's change detection
        DatePopupComponent.prototype.setRangeValue = function (partType, value) {
            var ref = (this.selectedValue = this.cloneRangeDate(this.selectedValue));
            ref[this.getPartTypeIndex(partType)] = value;
        };
        DatePopupComponent.prototype.cloneRangeDate = function (value) {
            return [value[0] && value[0].clone(), value[1] && value[1].clone()];
        };
        DatePopupComponent.prototype.initialArray = function (key) {
            if (!this[key] || !Array.isArray(this[key])) {
                this[key] = [];
            }
        };
        return DatePopupComponent;
    }());
    DatePopupComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'date-popup',
                    exportAs: 'datePopup',
                    template: "<div class=\"{{ prefixCls }}-picker-container {{ className }}\">\n  <div\n    class=\"{{ prefixCls }} {{ showWeek ? prefixCls + '-week-number' : '' }}\n     {{ isRange ? prefixCls + '-range' : '' }}\"\n  >\n    <div class=\"{{ prefixCls }}-panel\">\n      <div class=\"{{ prefixCls }}-date-panel\">\n        <ng-container *ngIf=\"isRange; else tplSinglePart\">\n          <!-- Range Selectors -->\n          <ng-container *ngTemplateOutlet=\"tplRangePart; context: { partType: 'left' }\"></ng-container>\n          <ng-container *ngTemplateOutlet=\"tplRangePart; context: { partType: 'right' }\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"!isRange\">\n          <!-- Single ONLY -->\n          <ng-container *ngTemplateOutlet=\"tplFooter\"></ng-container>\n        </ng-container>\n      </div>\n      <ng-container *ngIf=\"isRange\">\n        <!-- Range ONLY -->\n        <ng-container *ngTemplateOutlet=\"tplFooter\"></ng-container>\n      </ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #tplInnerPopup let-partType=\"partType\">\n  <inner-popup\n    [showWeek]=\"showWeek\"\n    [panelMode]=\"getPanelMode(partType)\"\n    (panelModeChange)=\"onPanelModeChange($event, partType)\"\n    [value]=\"getValueBySelector(partType)\"\n    [disabledDate]=\"disabledDate\"\n    [dateRender]=\"dateRender\"\n    [selectedValue]=\"selectedValue\"\n    [hoverValue]=\"hoverValue\"\n    [enablePrev]=\"enablePrevNext('prev', partType)\"\n    [enableNext]=\"enablePrevNext('next', partType)\"\n    (dayHover)=\"onDayHover($event)\"\n    (selectDate)=\"changeValueFromSelect($event)\"\n    (headerChange)=\"onHeaderChange($event, partType)\"\n  ></inner-popup>\n</ng-template>\n\n<ng-template #tplFooter>\n  <calendar-footer\n    [showTime]=\"showTime\"\n    [mustShowTime]=\"mustShowTime\"\n    [value]=\"value\"\n    (showTimePickerChange)=\"onShowTimePickerChange($event)\"\n    (selectTime)=\"onSelectTime($event)\"\n    (clickOk)=\"onClickOk()\"\n    (clickRemove)=\"onClickRemove()\"\n  ></calendar-footer>\n</ng-template>\n\n<!-- Single ONLY -->\n<ng-template #tplSinglePart>\n  <div>\n    <ng-container *ngTemplateOutlet=\"tplInnerPopup\"></ng-container>\n  </div>\n</ng-template>\n\n<!-- Range ONLY -->\n<ng-template #tplRangePart let-partType=\"partType\">\n  <div class=\"{{ prefixCls }}-range-part {{ prefixCls }}-range-{{ partType }}\">\n    <div style=\"outline: none;\">\n      <ng-container *ngTemplateOutlet=\"tplInnerPopup; context: { partType: partType }\"></ng-container>\n    </div>\n  </div>\n</ng-template>\n"
                },] }
    ];
    DatePopupComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    DatePopupComponent.propDecorators = {
        isRange: [{ type: i0.Input }],
        showWeek: [{ type: i0.Input }],
        format: [{ type: i0.Input }],
        disabledDate: [{ type: i0.Input }],
        minDate: [{ type: i0.Input }],
        maxDate: [{ type: i0.Input }],
        showToday: [{ type: i0.Input }],
        showTime: [{ type: i0.Input }],
        mustShowTime: [{ type: i0.Input }],
        dateRender: [{ type: i0.Input }],
        className: [{ type: i0.Input }],
        panelMode: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        defaultPickerValue: [{ type: i0.Input }],
        panelModeChange: [{ type: i0.Output }],
        calendarChange: [{ type: i0.Output }],
        valueChange: [{ type: i0.Output }],
        resultOk: [{ type: i0.Output }],
        showTimePickerChange: [{ type: i0.Output }]
    };

    var InnerPopupComponent = /** @class */ (function () {
        function InnerPopupComponent() {
            this.panelModeChange = new i0.EventEmitter();
            this.headerChange = new i0.EventEmitter();
            this.selectDate = new i0.EventEmitter();
            this.dayHover = new i0.EventEmitter();
            this.prefixCls = 'thy-calendar';
        }
        InnerPopupComponent.prototype.ngOnChanges = function (changes) {
            if (changes.value && !this.value) {
                this.value = new util.TinyDate();
            }
        };
        // The value real changed to outside
        InnerPopupComponent.prototype.onSelectDate = function (date) {
            var value = date instanceof util.TinyDate ? date : new util.TinyDate(date);
            this.selectDate.emit(value);
        };
        return InnerPopupComponent;
    }());
    InnerPopupComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'inner-popup',
                    exportAs: 'innerPopup',
                    template: "<calendar-header\n  [(panelMode)]=\"panelMode\"\n  (panelModeChange)=\"panelModeChange.emit($event)\"\n  [(value)]=\"value\"\n  (valueChange)=\"headerChange.emit($event)\"\n  [enablePrev]=\"enablePrev\"\n  [enableNext]=\"enableNext\"\n></calendar-header>\n\n<div class=\"{{ prefixCls }}-body\">\n  <date-table\n    [showWeek]=\"showWeek\"\n    [value]=\"value\"\n    (valueChange)=\"onSelectDate($event)\"\n    showWeekNumber=\"false\"\n    [disabledDate]=\"disabledDate\"\n    [dateCellRender]=\"dateRender\"\n    [selectedValue]=\"selectedValue\"\n    [hoverValue]=\"hoverValue\"\n    (dayHover)=\"dayHover.emit($event)\"\n  ></date-table>\n</div>\n"
                },] }
    ];
    InnerPopupComponent.ctorParameters = function () { return []; };
    InnerPopupComponent.propDecorators = {
        showWeek: [{ type: i0.Input }],
        enablePrev: [{ type: i0.Input }],
        enableNext: [{ type: i0.Input }],
        disabledDate: [{ type: i0.Input }],
        dateRender: [{ type: i0.Input }],
        selectedValue: [{ type: i0.Input }],
        hoverValue: [{ type: i0.Input }],
        panelMode: [{ type: i0.Input }],
        panelModeChange: [{ type: i0.Output }],
        value: [{ type: i0.Input }],
        headerChange: [{ type: i0.Output }],
        selectDate: [{ type: i0.Output }],
        dayHover: [{ type: i0.Output }]
    };

    var MAX_ROW$1 = 4;
    var MAX_COL$1 = 3;
    var YearPanelComponent = /** @class */ (function () {
        function YearPanelComponent() {
            this.valueChange = new i0.EventEmitter();
            this.decadePanelShow = new i0.EventEmitter();
            this.prefixCls = 'thy-calendar-year-panel';
        }
        Object.defineProperty(YearPanelComponent.prototype, "currentYear", {
            get: function () {
                return this.value.getYear();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(YearPanelComponent.prototype, "startYear", {
            get: function () {
                return parseInt("" + this.currentYear / 10, 10) * 10;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(YearPanelComponent.prototype, "endYear", {
            get: function () {
                return this.startYear + 9;
            },
            enumerable: false,
            configurable: true
        });
        YearPanelComponent.prototype.ngOnChanges = function (changes) {
            if (changes.value || changes.disabledDate) {
                this.render();
            }
        };
        YearPanelComponent.prototype.previousDecade = function () {
            this.gotoYear(-10);
        };
        YearPanelComponent.prototype.nextDecade = function () {
            this.gotoYear(10);
        };
        YearPanelComponent.prototype.trackPanelYear = function (_index, yearData) {
            return yearData.content;
        };
        YearPanelComponent.prototype.render = function () {
            if (this.value) {
                this.panelYears = this.makePanelYears();
            }
        };
        // Re-render panel content by the header's buttons (NOTE: Do not try to trigger final value change)
        YearPanelComponent.prototype.gotoYear = function (amount) {
            this.value = this.value.addYears(amount);
            // this.valueChange.emit(this.value); // Do not trigger final value change
            this.render();
        };
        YearPanelComponent.prototype.chooseYear = function (year) {
            this.value = this.value.setYear(year);
            this.valueChange.emit(this.value);
            this.render();
        };
        YearPanelComponent.prototype.makePanelYears = function () {
            var _this = this;
            var years = [];
            var currentYear = this.currentYear;
            var startYear = this.startYear;
            var endYear = this.endYear;
            var previousYear = startYear - 1;
            var index = 0;
            for (var rowIndex = 0; rowIndex < MAX_ROW$1; rowIndex++) {
                years[rowIndex] = [];
                var _loop_1 = function (colIndex) {
                    var _a;
                    var year = previousYear + index;
                    var content = String(year);
                    var disabled = this_1.disabledDate ? this_1.disabledDate(this_1.value.setYear(year).nativeDate) : false;
                    var cell = (years[rowIndex][colIndex] = {
                        disabled: disabled,
                        content: content,
                        year: year,
                        title: content,
                        isCurrent: year === currentYear,
                        isLowerThanStart: year < startYear,
                        isBiggerThanEnd: year > endYear,
                        classMap: null,
                        onClick: function () { return _this.chooseYear(cell.year); }
                    });
                    cell.classMap = (_a = {},
                        _a[this_1.prefixCls + "-cell"] = true,
                        _a[this_1.prefixCls + "-selected-cell"] = cell.isCurrent,
                        _a[this_1.prefixCls + "-cell-disabled"] = disabled,
                        _a[this_1.prefixCls + "-last-decade-cell"] = cell.isLowerThanStart,
                        _a[this_1.prefixCls + "-next-decade-cell"] = cell.isBiggerThanEnd,
                        _a);
                    index++;
                };
                var this_1 = this;
                for (var colIndex = 0; colIndex < MAX_COL$1; colIndex++) {
                    _loop_1(colIndex);
                }
            }
            return years;
        };
        return YearPanelComponent;
    }());
    YearPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'year-panel',
                    exportAs: 'yearPanel',
                    template: "<div class=\"{{ prefixCls }}\">\n  <div class=\"{{ prefixCls }}-header\">\n    <a class=\"{{ prefixCls }}-prev-decade-btn\" role=\"button\" (click)=\"previousDecade()\" title=\"\u4E0A\u4E00\u5E74\u4EE3\"></a>\n    <a class=\"{{ prefixCls }}-decade-select\" role=\"button\" (click)=\"decadePanelShow.emit()\" title=\"\u9009\u62E9\u5E74\u4EE3\">\n      <span class=\"{{ prefixCls }}-decade-select-content\"> {{ startYear }}-{{ endYear }} </span>\n    </a>\n\n    <a class=\"{{ prefixCls }}-next-decade-btn\" (click)=\"nextDecade()\" title=\"\u4E0B\u4E00\u5E74\u4EE3\" role=\"button\"></a>\n  </div>\n  <div class=\"{{ prefixCls }}-body\">\n    <table class=\"{{ prefixCls }}-table\" cellSpacing=\"0\" role=\"grid\">\n      <tbody class=\"{{ prefixCls }}-tbody\">\n        <tr *ngFor=\"let row of panelYears\" role=\"row\">\n          <td\n            *ngFor=\"let yearCell of row; trackBy: trackPanelYear\"\n            role=\"gridcell\"\n            title=\"{{ yearCell.title }}\"\n            (click)=\"yearCell.disabled ? null : yearCell.onClick()\"\n            [ngClass]=\"yearCell.classMap\"\n          >\n            <a class=\"{{ prefixCls }}-year\">{{ yearCell.content }}</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n"
                },] }
    ];
    YearPanelComponent.ctorParameters = function () { return []; };
    YearPanelComponent.propDecorators = {
        value: [{ type: i0.Input }],
        valueChange: [{ type: i0.Output }],
        disabledDate: [{ type: i0.Input }],
        decadePanelShow: [{ type: i0.Output }]
    };

    var MAX_ROW = 4;
    var MAX_COL = 3;
    var MonthTableComponent = /** @class */ (function () {
        function MonthTableComponent(dateHelper) {
            this.dateHelper = dateHelper;
            this.value = new util.TinyDate();
            this.prefixCls = 'thy-calendar';
            this.valueChange = new i0.EventEmitter();
        }
        MonthTableComponent.prototype.ngOnChanges = function (changes) {
            if (changes.value || changes.disabledDate) {
                this.render();
            }
        };
        MonthTableComponent.prototype.trackYear = function (_index) {
            return this.value ? this.value.getYear() : _index;
        };
        MonthTableComponent.prototype.trackPanelMonth = function (_index, monthData) {
            return monthData.content;
        };
        MonthTableComponent.prototype.render = function () {
            if (this.value) {
                this.panelMonths = this.makePanelMonths();
            }
        };
        MonthTableComponent.prototype.makePanelMonths = function () {
            var _this = this;
            var months = [];
            var currentMonth = this.value.getMonth();
            var today = new util.TinyDate();
            var monthValue = 0;
            for (var rowIndex = 0; rowIndex < MAX_ROW; rowIndex++) {
                months[rowIndex] = [];
                var _loop_1 = function (colIndex) {
                    var _a;
                    var month = this_1.value.setMonth(monthValue);
                    var disabled = this_1.disabledDate ? this_1.disabledDate(this_1.value.setMonth(monthValue).nativeDate) : false;
                    var content = this_1.dateHelper.format(month.nativeDate, 'MMMM');
                    var cell = (months[rowIndex][colIndex] = {
                        value: month.nativeDate,
                        disabled: disabled,
                        content: content,
                        month: monthValue,
                        title: content,
                        classMap: null,
                        onClick: function () { return _this.chooseMonth(cell.month); } // don't use monthValue here
                    });
                    cell.classMap = (_a = {},
                        _a[this_1.prefixCls + "-month-panel-cell"] = true,
                        _a[this_1.prefixCls + "-month-panel-cell-disabled"] = disabled,
                        _a[this_1.prefixCls + "-month-panel-selected-cell"] = monthValue === currentMonth,
                        _a[this_1.prefixCls + "-month-panel-current-cell"] = today.getYear() === this_1.value.getYear() && monthValue === today.getMonth(),
                        _a);
                    monthValue++;
                };
                var this_1 = this;
                for (var colIndex = 0; colIndex < MAX_COL; colIndex++) {
                    _loop_1(colIndex);
                }
            }
            return months;
        };
        MonthTableComponent.prototype.chooseMonth = function (month) {
            this.value = this.value.setMonth(month);
            this.valueChange.emit(this.value);
            this.render();
        };
        return MonthTableComponent;
    }());
    MonthTableComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'month-table',
                    exportAs: 'monthTable',
                    template: "<table class=\"{{ prefixCls }}-month-panel-table\" cellSpacing=\"0\" role=\"grid\">\n  <tbody class=\"{{ prefixCls }}-month-panel-tbody\">\n    <tr *ngFor=\"let row of panelMonths; trackBy: trackYear\" role=\"row\">\n      <td\n        *ngFor=\"let monthCell of row; trackBy: trackPanelMonth\"\n        role=\"gridcell\"\n        title=\"{{ monthCell.title }}\"\n        (click)=\"monthCell.disabled ? null : monthCell.onClick()\"\n        [ngClass]=\"monthCell.classMap\"\n      >\n        <ng-container [ngSwitch]=\"prefixCls\">\n          <ng-container *ngSwitchCase=\"'thy-calendar'\">\n            <a class=\"{{ prefixCls }}-month-panel-month\">{{ monthCell.content }}</a>\n          </ng-container>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
                },] }
    ];
    MonthTableComponent.ctorParameters = function () { return [
        { type: DateHelperService }
    ]; };
    MonthTableComponent.propDecorators = {
        value: [{ type: i0.Input }],
        prefixCls: [{ type: i0.Input }],
        valueChange: [{ type: i0.Output }],
        disabledDate: [{ type: i0.Input }]
    };

    var DATE_ROW_NUM = 6;
    var DATE_COL_NUM = 7;
    var DateTableComponent = /** @class */ (function () {
        function DateTableComponent(dateHelper) {
            this.dateHelper = dateHelper;
            this.prefixCls = 'thy-calendar';
            this.showWeek = false;
            this.dayHover = new i0.EventEmitter(); // Emitted when hover on a day by mouse enter
            this.valueChange = new i0.EventEmitter();
        }
        Object.defineProperty(DateTableComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (date) {
                this._value = date;
            },
            enumerable: false,
            configurable: true
        });
        DateTableComponent.prototype.ngOnChanges = function (changes) {
            if (this.isDateRealChange(changes.value) ||
                this.isDateRealChange(changes.selectedValue) ||
                this.isDateRealChange(changes.hoverValue)) {
                this.render();
            }
        };
        DateTableComponent.prototype.isDateRealChange = function (change) {
            if (change) {
                var previousValue_1 = change.previousValue;
                var currentValue = change.currentValue;
                if (Array.isArray(currentValue)) {
                    return (!Array.isArray(previousValue_1) ||
                        currentValue.length !== previousValue_1.length ||
                        currentValue.some(function (value, index) {
                            var previousTinyDate = previousValue_1[index];
                            return previousTinyDate instanceof util.TinyDate ? previousTinyDate.isSameDay(value) : previousTinyDate !== value;
                        }));
                }
                else {
                    return !this.isSameDate(previousValue_1, currentValue);
                }
            }
            return false;
        };
        DateTableComponent.prototype.isSameDate = function (left, right) {
            return (!left && !right) || (left && right && right.isSameDay(left));
        };
        DateTableComponent.prototype.render = function () {
            if (this.value) {
                this.headWeekDays = this.makeHeadWeekDays();
                this.weekRows = this.makeWeekRows();
            }
        };
        DateTableComponent.prototype.changeValueFromInside = function (value) {
            // Only change date not change time
            var newValue = this.value
                .setYear(value.getYear())
                .setMonth(value.getMonth())
                .setDate(value.getDate());
            this.valueChange.emit(newValue);
        };
        DateTableComponent.prototype.makeHeadWeekDays = function () {
            var weekDays = [];
            var start = this.value.calendarStart({ weekStartsOn: this.dateHelper.getFirstDayOfWeek() });
            for (var colIndex = 0; colIndex < DATE_COL_NUM; colIndex++) {
                var day = start.addDays(colIndex);
                weekDays[colIndex] = {
                    short: this.dateHelper.format(day.nativeDate, this.dateHelper.relyOnDatePipe ? 'E' : 'ddd'),
                    veryShort: this.dateHelper.format(day.nativeDate, this.getVeryShortWeekFormat()) // eg. 二
                };
            }
            return weekDays;
        };
        DateTableComponent.prototype.getVeryShortWeekFormat = function () {
            if (this.dateHelper.relyOnDatePipe) {
                return 'EEEEE'; // eg. 二
            }
            return 'dd';
        };
        DateTableComponent.prototype.makeWeekRows = function () {
            var _a;
            var _this = this;
            var weekRows = [];
            var firstDayOfMonth = this.value.calendarStart({ weekStartsOn: this.dateHelper.getFirstDayOfWeek() });
            for (var week = 0; week < DATE_ROW_NUM; week++) {
                var weekStart = firstDayOfMonth.addDays(week * 7);
                var row = {
                    isActive: false,
                    isCurrent: false,
                    dateCells: [],
                    year: weekStart.getYear()
                };
                var _loop_1 = function (day) {
                    var _a;
                    var date = weekStart.addDays(day);
                    var dateFormat = this_1.dateHelper.relyOnDatePipe ? 'longDate' : 'YYYY-MM-DD';
                    var title = this_1.dateHelper.format(date.nativeDate, dateFormat);
                    var label = this_1.dateHelper.format(date.nativeDate, this_1.dateHelper.relyOnDatePipe ? 'dd' : 'DD');
                    var cell = {
                        value: date.nativeDate,
                        label: label,
                        isSelected: false,
                        isDisabled: false,
                        isToday: false,
                        title: title,
                        dateCellRender: util.valueFunctionProp(this_1.dateCellRender, date),
                        content: "" + date.getDate(),
                        onClick: function () { return _this.changeValueFromInside(date); },
                        // 暂时用不到鼠标事件的交互,在html这种删除了
                        onMouseEnter: function () { return _this.dayHover.emit(date); }
                    };
                    if (this_1.showWeek && !row.weekNum) {
                        row.weekNum = this_1.dateHelper.getISOWeek(date.nativeDate);
                    }
                    if (date.isToday()) {
                        cell.isToday = true;
                        row.isCurrent = true;
                    }
                    if (Array.isArray(this_1.selectedValue)) {
                        // Range selections
                        var rangeValue = this_1.hoverValue && this_1.hoverValue.length ? this_1.hoverValue : this_1.selectedValue;
                        var start = rangeValue[0];
                        var end = rangeValue[1];
                        if (start) {
                            if (start.isSameDay(date)) {
                                cell.isSelectedStartDate = true;
                                cell.isSelected = true;
                                row.isActive = true;
                            }
                            if (end) {
                                if (end.isSameDay(date)) {
                                    cell.isSelectedEndDate = true;
                                    cell.isSelected = true;
                                    row.isActive = true;
                                }
                                else if (date.isAfterDay(start) && date.isBeforeDay(end)) {
                                    cell.isInRange = true;
                                }
                            }
                        }
                    }
                    else if (date.isSameDay(this_1.value)) {
                        cell.isSelected = true;
                        row.isActive = true;
                    }
                    if (this_1.disabledDate && this_1.disabledDate(date.nativeDate)) {
                        cell.isDisabled = true;
                    }
                    cell.classMap = (_a = {},
                        _a[this_1.prefixCls + "-cell"] = true,
                        _a[this_1.prefixCls + "-today"] = cell.isToday,
                        _a[this_1.prefixCls + "-last-month-cell"] = date.isBeforeMonth(this_1.value),
                        _a[this_1.prefixCls + "-next-month-btn-day"] = date.isAfterMonth(this_1.value),
                        _a[this_1.prefixCls + "-selected-day"] = cell.isSelected,
                        _a[this_1.prefixCls + "-disabled-cell"] = cell.isDisabled,
                        _a[this_1.prefixCls + "-selected-start-date"] = !!cell.isSelectedStartDate,
                        _a[this_1.prefixCls + "-selected-end-date"] = !!cell.isSelectedEndDate,
                        _a[this_1.prefixCls + "-in-range-cell"] = !!cell.isInRange,
                        _a);
                    row.dateCells.push(cell);
                };
                var this_1 = this;
                for (var day = 0; day < 7; day++) {
                    _loop_1(day);
                }
                row.classMap = (_a = {},
                    _a[this.prefixCls + "-current-week"] = row.isCurrent,
                    _a[this.prefixCls + "-active-week"] = row.isActive,
                    _a);
                weekRows.push(row);
            }
            return weekRows;
        };
        DateTableComponent.prototype.trackByDateFn = function (_index, item) {
            return "" + item.title;
        };
        DateTableComponent.prototype.trackByWeekFn = function (_index, item) {
            return item.year + "-" + item.weekNum;
        };
        return DateTableComponent;
    }());
    DateTableComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'date-table',
                    exportAs: 'dateTable',
                    template: "<table class=\"{{ prefixCls }}-table\" cellSpacing=\"0\" role=\"grid\">\n  <thead>\n    <tr role=\"row\">\n      <th *ngIf=\"showWeek\" role=\"columnheader\" class=\"{{ prefixCls }}-column-header {{ prefixCls }}-week-number-header\">\n        <span class=\"{{ prefixCls }}-column-header-inner\">x</span>\n      </th>\n      <th *ngFor=\"let cell of headWeekDays\" role=\"columnheader\" title=\"{{ cell.short }}\" class=\"{{ prefixCls }}-column-header\">\n        <span *ngIf=\"prefixCls === 'thy-calendar'\" class=\"{{ prefixCls }}-column-header-inner\">{{ cell.veryShort }}</span>\n        <span *ngIf=\"prefixCls === 'thy-calendar-full'\" class=\"{{ prefixCls }}-column-header-inner\">\u5468{{ cell.veryShort }}</span>\n      </th>\n    </tr>\n  </thead>\n  <tbody class=\"{{ prefixCls }}-tbody\">\n    <tr *ngFor=\"let row of weekRows; trackBy: trackByWeekFn\" [ngClass]=\"row.classMap\" role=\"row\">\n      <td *ngIf=\"row.weekNum\" role=\"gridcell\" class=\"{{ prefixCls }}-week-number-cell\">\n        {{ row.weekNum }}\n      </td>\n      <!-- \u5728td\u4E2D\u5220\u9664\u4E86\u9F20\u6807\u4E8B\u4EF6 -->\n      <!-- \u53BB\u6389tooltip\uFF0C\u6545\u53BB\u6389title\u5C5E\u6027 -->\n      <td\n        *ngFor=\"let cell of row.dateCells; trackBy: trackByDateFn\"\n        role=\"gridcell\"\n        [ngClass]=\"cell.classMap\"\n        (click)=\"cell.isDisabled ? null : cell.onClick()\"\n        date-table-cell\n        [prefixCls]=\"prefixCls\"\n        [cell]=\"cell\"\n      ></td>\n    </tr>\n  </tbody>\n</table>\n"
                },] }
    ];
    DateTableComponent.ctorParameters = function () { return [
        { type: DateHelperService }
    ]; };
    DateTableComponent.propDecorators = {
        prefixCls: [{ type: i0.Input }],
        selectedValue: [{ type: i0.Input }],
        hoverValue: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        showWeek: [{ type: i0.Input }],
        disabledDate: [{ type: i0.Input }],
        dateCellRender: [{ type: i0.Input }],
        dayHover: [{ type: i0.Output }],
        valueChange: [{ type: i0.Output }]
    };

    var DateTableCellComponent = /** @class */ (function () {
        function DateTableCellComponent() {
            this.isTemplateRef = util.isTemplateRef;
            this.isNonEmptyString = function (v) { return util.isEmpty(v) && util.isString(v); };
        }
        return DateTableCellComponent;
    }());
    DateTableCellComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: '[date-table-cell]',
                    exportAs: 'dateTableCell',
                    template: "<ng-container [ngSwitch]=\"prefixCls\">\n  <ng-container *ngSwitchCase=\"'thy-calendar'\">\n    <ng-container [ngSwitch]=\"true\">\n      <ng-container *ngSwitchCase=\"isTemplateRef(cell.dateCellRender)\">\n        <ng-container *ngTemplateOutlet=\"cell.dateCellRender; context: { $implicit: cell.value }\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"isNonEmptyString(cell.dateCellRender)\">\n        <span [innerHTML]=\"cell.dateCellRender\"></span>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <div class=\"{{ prefixCls }}-date\" [attr.aria-selected]=\"cell.isSelected\" [attr.aria-disabled]=\"cell.isDisabled\">\n          {{ cell.content }}\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'thy-calendar-full'\">\n    <div\n      tabindex=\"0\"\n      class=\"{{ prefixCls }}-date thy-calendar-full-cell-inner\"\n      [class.thy-calendar-full-calendar-date-today]=\"cell.isToday\"\n    >\n      <ng-container *ngIf=\"cell.fullCellRender; else defaultCell\">\n        <ng-container *ngTemplateOutlet=\"$any(cell.fullCellRender); context: { $implicit: cell.value }\"> </ng-container>\n      </ng-container>\n      <ng-template #defaultCell>\n        <div class=\"{{ prefixCls }}-date-value\">\n          <span class=\"{{ prefixCls }}-date-value-today-text\">\n            <span class=\"{{ prefixCls }}-date-value-text\">{{ cell.content }}</span>\n          </span>\n        </div>\n        <div class=\"{{ prefixCls }}-date-content\">\n          <ng-container *ngTemplateOutlet=\"$any(cell.dateCellRender); context: { $implicit: cell.value }\"> </ng-container>\n        </div>\n      </ng-template>\n    </div>\n  </ng-container>\n</ng-container>\n"
                },] }
    ];
    DateTableCellComponent.propDecorators = {
        prefixCls: [{ type: i0.Input }],
        cell: [{ type: i0.Input }]
    };

    var LibPackerModule = /** @class */ (function () {
        function LibPackerModule() {
        }
        return LibPackerModule;
    }());
    LibPackerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, button.ThyButtonModule, icon.ThyIconModule, timePicker.ThyTimePickerModule],
                    exports: [
                        CalendarHeaderComponent,
                        CalendarFooterComponent,
                        DateTableComponent,
                        YearPanelComponent,
                        MonthTableComponent,
                        MonthPanelComponent,
                        DecadePanelComponent,
                        InnerPopupComponent,
                        DatePopupComponent,
                        DateTableCellComponent
                    ],
                    declarations: [
                        CalendarHeaderComponent,
                        CalendarFooterComponent,
                        DateTableComponent,
                        YearPanelComponent,
                        MonthTableComponent,
                        MonthPanelComponent,
                        DecadePanelComponent,
                        InnerPopupComponent,
                        DatePopupComponent,
                        DateTableCellComponent
                    ]
                },] }
    ];

    var ThyPickerComponent = /** @class */ (function () {
        function ThyPickerComponent(changeDetector, dateHelper) {
            this.changeDetector = changeDetector;
            this.dateHelper = dateHelper;
            this.isRange = false;
            this.open = undefined;
            this.placement = 'bottomLeft';
            this.valueChange = new i0.EventEmitter();
            this.openChange = new i0.EventEmitter(); // Emitted when overlay's open state change
            this.prefixCls = 'thy-calendar';
            this.animationOpenState = false;
            this.overlayOpen = false; // Available when "open"=undefined
            this.overlayPositions = core.getFlexiblePositions(this.placement, 4);
        }
        Object.defineProperty(ThyPickerComponent.prototype, "realOpenState", {
            get: function () {
                // The value that really decide the open state of overlay
                return this.isOpenHandledByUser() ? !!this.open : this.overlayOpen;
            },
            enumerable: false,
            configurable: true
        });
        ThyPickerComponent.prototype.ngAfterViewInit = function () {
            this.overlayPositions = core.getFlexiblePositions(this.placement, 4);
            if (this.autoFocus) {
                this.focus();
            }
        };
        ThyPickerComponent.prototype.focus = function () {
            this.pickerInput.nativeElement.focus();
        };
        ThyPickerComponent.prototype.showOverlay = function () {
            var _this = this;
            if (!this.realOpenState) {
                this.overlayOpen = true;
                if (this.realOpenState) {
                    this.animationOpenState = true;
                }
                this.openChange.emit(this.overlayOpen);
                setTimeout(function () {
                    if (_this.cdkConnectedOverlay && _this.cdkConnectedOverlay.overlayRef) {
                        _this.cdkConnectedOverlay.overlayRef.updatePosition();
                    }
                });
            }
        };
        ThyPickerComponent.prototype.hideOverlay = function () {
            if (this.realOpenState) {
                this.overlayOpen = false;
                if (!this.realOpenState) {
                    this.animationOpenState = false;
                }
                this.openChange.emit(this.overlayOpen);
                this.focus();
            }
        };
        ThyPickerComponent.prototype.onClickInputBox = function () {
            if (!this.disabled && !this.readonly && !this.isOpenHandledByUser()) {
                this.showOverlay();
            }
        };
        ThyPickerComponent.prototype.onClickBackdrop = function () {
            this.hideOverlay();
        };
        ThyPickerComponent.prototype.onOverlayDetach = function () {
            this.hideOverlay();
        };
        ThyPickerComponent.prototype.onPositionChange = function (position) {
            this.changeDetector.detectChanges();
        };
        ThyPickerComponent.prototype.onClickClear = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.value = this.isRange ? [] : null;
            this.valueChange.emit(this.value);
        };
        ThyPickerComponent.prototype.getPartTypeIndex = function (partType) {
            return { left: 0, right: 1 }[partType];
        };
        ThyPickerComponent.prototype.isEmptyValue = function (value) {
            if (value === null) {
                return true;
            }
            else if (this.isRange) {
                return !value || !Array.isArray(value) || value.every(function (val) { return !val; });
            }
            else {
                return !value;
            }
        };
        // Whether open state is permanently controlled by user himself
        ThyPickerComponent.prototype.isOpenHandledByUser = function () {
            return this.open !== undefined;
        };
        ThyPickerComponent.prototype.getReadableValue = function () {
            var value;
            if (this.isRange) {
                var start = this.value[0] ? this.dateHelper.format(this.value[0].nativeDate, this.format) : '';
                var end = this.value[1] ? this.dateHelper.format(this.value[1].nativeDate, this.format) : '';
                return start && end ? start + " ~ " + end : null;
            }
            else {
                value = this.value;
                return value ? this.dateHelper.format(value.nativeDate, this.format) : null;
            }
        };
        ThyPickerComponent.prototype.getPlaceholder = function () {
            return this.isRange && this.placeholder && Array.isArray(this.placeholder)
                ? this.placeholder.join(' ~ ')
                : this.placeholder;
        };
        return ThyPickerComponent;
    }());
    ThyPickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thy-picker',
                    exportAs: 'thyPicker',
                    template: "<span\n  cdkOverlayOrigin\n  #origin=\"cdkOverlayOrigin\"\n  class=\"{{ prefixCls }}-picker {{ size ? prefixCls + '-picker-' + size : '' }} {{ className }}\"\n  (click)=\"onClickInputBox()\"\n>\n  <ng-container>\n    <input\n      #pickerInput\n      thyInput\n      class=\"form-control-{{ size }} form-control {{ prefixCls }}-picker-input\"\n      [thySize]=\"size\"\n      [class.thy-input-disabled]=\"disabled\"\n      [class.thy-input-readonly]=\"readonly\"\n      [disabled]=\"disabled\"\n      readonly\n      value=\"{{ getReadableValue() }}\"\n      placeholder=\"{{ getPlaceholder() }}\"\n    />\n    <ng-container *ngTemplateOutlet=\"tplRightRest\"></ng-container>\n  </ng-container>\n</span>\n\n<!-- Right operator icons -->\n<ng-template #tplRightRest>\n  <span class=\"{{ prefixCls }}-picker-clear\">\n    <thy-icon\n      thyIconName=\"close-circle-bold-fill\"\n      *ngIf=\"!disabled && !isEmptyValue(value) && allowClear && !readonly\"\n      (click)=\"onClickClear($event)\"\n      ngClass=\"remove-link remove-link-{{ size }}\"\n    ></thy-icon>\n  </span>\n  <span class=\"{{ prefixCls }}-picker-icon\">\n    <thy-icon [thyIconName]=\"suffixIcon\" ngClass=\"remove-link-{{ size }}\"></thy-icon>\n  </span>\n</ng-template>\n\n<!-- Overlay -->\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"realOpenState\"\n  [cdkConnectedOverlayHasBackdrop]=\"!isOpenHandledByUser()\"\n  [cdkConnectedOverlayPositions]=\"overlayPositions\"\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  (positionChange)=\"onPositionChange($event)\"\n  (backdropClick)=\"onClickBackdrop()\"\n  (detach)=\"onOverlayDetach()\"\n>\n  <div style=\"position: relative;\">\n    <!-- Compatible for overlay that not support offset dynamically and immediately -->\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ThyPickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: DateHelperService }
    ]; };
    ThyPickerComponent.propDecorators = {
        isRange: [{ type: i0.Input }],
        open: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        readonly: [{ type: i0.Input }],
        allowClear: [{ type: i0.Input }],
        autoFocus: [{ type: i0.Input }],
        className: [{ type: i0.Input }],
        format: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        suffixIcon: [{ type: i0.Input }],
        placement: [{ type: i0.Input }],
        valueChange: [{ type: i0.Output }],
        openChange: [{ type: i0.Output }],
        origin: [{ type: i0.ViewChild, args: ['origin', { static: true },] }],
        cdkConnectedOverlay: [{ type: i0.ViewChild, args: [overlay.CdkConnectedOverlay, { static: true },] }],
        pickerInput: [{ type: i0.ViewChild, args: ['pickerInput', { static: true },] }]
    };

    var AbstractPickerComponent = /** @class */ (function () {
        function AbstractPickerComponent(cdr) {
            this.cdr = cdr;
            this.thyAllowClear = true;
            this.thyAutoFocus = false;
            this.thyDisabled = false;
            this.thySize = 'default';
            // tslint:disable-next-line: max-line-length
            this.thyAutoStartAndEnd = false; // only for range picker, Whether to automatically take the beginning and ending unixTime of the day
            this.thyDefaultPickerValue = null;
            this.thySuffixIcon = 'calendar';
            this.thyOpenChange = new i0.EventEmitter();
            this.isRange = false;
            this.destroyed$ = new rxjs.Subject();
            this.isCustomPlaceHolder = false;
            this.onlyEmitDate = false;
            this.onChangeFn = function () { return void 0; };
            this.onTouchedFn = function () { return void 0; };
        }
        Object.defineProperty(AbstractPickerComponent.prototype, "realOpenState", {
            get: function () {
                return this.picker.realOpenState;
            },
            enumerable: false,
            configurable: true
        });
        AbstractPickerComponent.prototype.initValue = function () {
            this.thyValue = this.isRange ? [] : null;
        };
        AbstractPickerComponent.prototype.ngOnInit = function () {
            this.setDefaultPlaceHolder();
            this.initValue();
        };
        AbstractPickerComponent.prototype.ngOnChanges = function (changes) {
            if (changes.thyPlaceHolder && changes.thyPlaceHolder.firstChange && typeof this.thyPlaceHolder !== 'undefined') {
                this.isCustomPlaceHolder = true;
            }
        };
        AbstractPickerComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        AbstractPickerComponent.prototype.closeOverlay = function () {
            this.picker.hideOverlay();
        };
        AbstractPickerComponent.prototype.onValueChange = function (originalValue) {
            this.setFormatRule();
            this.thyValue = originalValue;
            if (this.isRange) {
                var vAsRange = this.thyValue;
                var value = { begin: null, end: null };
                if (vAsRange.length) {
                    var _a = __read(vAsRange, 2), begin = _a[0], end = _a[1];
                    if (this.thyAutoStartAndEnd) {
                        value = {
                            begin: begin.startOfDay().getUnixTime(),
                            end: end.endOfDay().getUnixTime()
                        };
                    }
                    else {
                        value = {
                            begin: begin.getUnixTime(),
                            end: end.getUnixTime()
                        };
                    }
                }
                this.onChangeFn(value);
            }
            else {
                var value = { date: null, with_time: this.withTime ? 1 : 0 };
                if (this.thyValue) {
                    value.date = this.thyValue.getUnixTime();
                }
                if (this.onlyEmitDate) {
                    this.onChangeFn(value.date);
                }
                else {
                    this.onChangeFn(value);
                }
            }
            this.onTouchedFn();
        };
        AbstractPickerComponent.prototype.setFormatRule = function () {
            if (!this.thyFormat) {
                if (this.withTime) {
                    this.thyFormat = 'yyyy-MM-dd HH:mm';
                }
                else {
                    if (!this.onlyEmitDate) {
                        this.thyFormat = 'yyyy-MM-dd';
                    }
                }
            }
        };
        AbstractPickerComponent.prototype.onOpenChange = function (open) {
            this.thyOpen = open;
            this.thyOpenChange.emit(open);
        };
        AbstractPickerComponent.prototype.writeValue = function (originalValue) {
            var _a = transformDateValue(originalValue), value = _a.value, withTime = _a.withTime;
            this.setValue(value);
            this.setTimePickerState(withTime);
            this.onlyEmitDate = typeof withTime === 'undefined';
            this.originWithTime = withTime;
            this.setFormatRule();
            this.cdr.markForCheck();
        };
        AbstractPickerComponent.prototype.registerOnChange = function (fn) {
            this.onChangeFn = fn;
        };
        AbstractPickerComponent.prototype.registerOnTouched = function (fn) {
            this.onTouchedFn = fn;
        };
        AbstractPickerComponent.prototype.setTimePickerState = function (withTime) {
            this.withTime = withTime;
        };
        AbstractPickerComponent.prototype.setDisabledState = function (disabled) {
            this.thyDisabled = disabled;
            this.cdr.markForCheck();
        };
        AbstractPickerComponent.prototype.setDefaultPlaceHolder = function () {
            if (!this.isCustomPlaceHolder) {
                this.thyPlaceHolder = this.isRange ? ['开始日期', '结束日期'] : '请选择日期';
            }
            this.cdr.markForCheck();
        };
        AbstractPickerComponent.prototype.setValue = function (value) {
            this.thyValue = makeValue(value, this.isRange);
        };
        return AbstractPickerComponent;
    }());
    AbstractPickerComponent.decorators = [
        { type: i0.Directive }
    ];
    AbstractPickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    AbstractPickerComponent.propDecorators = {
        thyAllowClear: [{ type: i0.Input }],
        thyAutoFocus: [{ type: i0.Input }],
        thyDisabled: [{ type: i0.Input }],
        thyOpen: [{ type: i0.Input }],
        thyDisabledDate: [{ type: i0.Input }],
        thyMinDate: [{ type: i0.Input }],
        thyMaxDate: [{ type: i0.Input }],
        thyPlaceHolder: [{ type: i0.Input }],
        thyReadonly: [{ type: i0.Input }],
        thyOriginClassName: [{ type: i0.Input }],
        thyPanelClassName: [{ type: i0.Input }],
        thySize: [{ type: i0.Input }],
        thyFormat: [{ type: i0.Input }],
        thyAutoStartAndEnd: [{ type: i0.Input }],
        thyDefaultPickerValue: [{ type: i0.Input }],
        thySuffixIcon: [{ type: i0.Input }],
        thyOpenChange: [{ type: i0.Output }],
        picker: [{ type: i0.ViewChild, args: [ThyPickerComponent, { static: true },] }]
    };
    __decorate([
        core.InputBoolean(),
        __metadata("design:type", Object)
    ], AbstractPickerComponent.prototype, "thyAllowClear", void 0);
    __decorate([
        core.InputBoolean(),
        __metadata("design:type", Object)
    ], AbstractPickerComponent.prototype, "thyAutoFocus", void 0);
    __decorate([
        core.InputBoolean(),
        __metadata("design:type", Object)
    ], AbstractPickerComponent.prototype, "thyDisabled", void 0);
    __decorate([
        core.InputBoolean(),
        __metadata("design:type", Boolean)
    ], AbstractPickerComponent.prototype, "thyOpen", void 0);
    __decorate([
        core.InputBoolean(),
        __metadata("design:type", Boolean)
    ], AbstractPickerComponent.prototype, "thyReadonly", void 0);

    var BasePickerComponent = /** @class */ (function (_super) {
        __extends(BasePickerComponent, _super);
        function BasePickerComponent(cdr) {
            var _this = _super.call(this, cdr) || this;
            _this.showWeek = false;
            _this.thyOnPanelChange = new i0.EventEmitter();
            _this.thyOnCalendarChange = new i0.EventEmitter();
            _this.thyMustShowTime = false;
            _this.thyPlacement = 'bottomLeft';
            _this.thyOnOk = new i0.EventEmitter();
            return _this;
        }
        Object.defineProperty(BasePickerComponent.prototype, "thyShowTime", {
            get: function () {
                return this._showTime;
            },
            set: function (value) {
                this._showTime = typeof value === 'object' ? value : util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        BasePickerComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            if (!this.thyFormat) {
                if (this.showWeek) {
                    this.thyFormat = 'yyyy-ww';
                }
                else {
                    this.thyFormat = this.thyShowTime ? 'yyyy-MM-dd HH:mm' : 'yyyy-MM-dd';
                }
            }
            this.setDefaultTimePickerState();
        };
        BasePickerComponent.prototype.onValueChange = function (value) {
            this.restoreTimePickerState(value);
            _super.prototype.onValueChange.call(this, value);
            this.closeOverlay();
        };
        // Displays the time directly when the time must be displayed by default
        BasePickerComponent.prototype.setDefaultTimePickerState = function () {
            this.withTime = this.thyMustShowTime;
        };
        // Restore after clearing time to select whether the original picker time is displayed or not
        BasePickerComponent.prototype.restoreTimePickerState = function (value) {
            if (!value) {
                this.withTime = this.thyMustShowTime || this.originWithTime;
            }
        };
        // Emit thyOnCalendarChange when select date by thy-range-picker
        BasePickerComponent.prototype.onCalendarChange = function (value) {
            if (this.isRange) {
                var rangeValue = value.map(function (x) { return x.nativeDate; });
                this.thyOnCalendarChange.emit(rangeValue);
            }
        };
        BasePickerComponent.prototype.onShowTimePickerChange = function (show) {
            this.withTime = show;
        };
        BasePickerComponent.prototype.onResultOk = function () {
            if (this.isRange) {
                var value = this.thyValue;
                if (value.length) {
                    this.thyOnOk.emit([value[0].nativeDate, value[1].nativeDate]);
                }
                else {
                    this.thyOnOk.emit([]);
                }
            }
            else {
                if (this.thyValue) {
                    this.thyOnOk.emit(this.thyValue.nativeDate);
                }
                else {
                    this.thyOnOk.emit(null);
                }
            }
            this.closeOverlay();
        };
        BasePickerComponent.prototype.onOpenChange = function (open) {
            this.thyOpenChange.emit(open);
        };
        return BasePickerComponent;
    }(AbstractPickerComponent));
    BasePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    template: ""
                },] }
    ];
    BasePickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    BasePickerComponent.propDecorators = {
        thyDateRender: [{ type: i0.Input }],
        thyMode: [{ type: i0.Input }],
        thyOnPanelChange: [{ type: i0.Output }],
        thyOnCalendarChange: [{ type: i0.Output }],
        thyShowTime: [{ type: i0.Input }],
        thyMustShowTime: [{ type: i0.Input }],
        thyPlacement: [{ type: i0.Input }],
        thyOnOk: [{ type: i0.Output }]
    };

    var HeaderPickerComponent = /** @class */ (function (_super) {
        __extends(HeaderPickerComponent, _super);
        function HeaderPickerComponent(cdr) {
            return _super.call(this, cdr) || this;
        }
        HeaderPickerComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.panelMode = this.endPanelMode;
            var allHeaderPanels = ['decade', 'year', 'month'];
            this.supportPanels = allHeaderPanels.slice(0, allHeaderPanels.indexOf(this.endPanelMode) + 1);
        };
        HeaderPickerComponent.prototype.onPanelModeChange = function (mode) {
            if (this.supportPanels.indexOf(mode) > -1) {
                this.panelMode = mode;
            }
            else {
                // Since the default "click year" logic can be "year panel" -> "date panel", we need force to the end panel otherwise
                this.panelMode = this.endPanelMode;
            }
        };
        HeaderPickerComponent.prototype.onChooseValue = function (mode, value) {
            if (this.endPanelMode === mode) {
                _super.prototype.onValueChange.call(this, value);
                this.closeOverlay();
            }
        };
        HeaderPickerComponent.prototype.onOpenChange = function (open) {
            if (!open) {
                this.cleanUp();
            }
            this.thyOpenChange.emit(open);
        };
        // Restore some initial props to let open as new in next time
        HeaderPickerComponent.prototype.cleanUp = function () {
            this.panelMode = this.endPanelMode;
        };
        return HeaderPickerComponent;
    }(AbstractPickerComponent));
    HeaderPickerComponent.decorators = [
        { type: i0.Component, args: [{
                    template: ""
                },] }
    ];
    HeaderPickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    HeaderPickerComponent.propDecorators = {
        thyPlaceHolder: [{ type: i0.Input }],
        thyDefaultValue: [{ type: i0.Input }],
        thyFormat: [{ type: i0.Input }]
    };

    var ThyDatePickerComponent = /** @class */ (function (_super) {
        __extends(ThyDatePickerComponent, _super);
        function ThyDatePickerComponent(cdr, renderer, elementRef) {
            var _this = _super.call(this, cdr) || this;
            _this.renderer = renderer;
            _this.elementRef = elementRef;
            _this.isRange = false;
            renderer.addClass(elementRef.nativeElement, 'thy-calendar-picker');
            return _this;
        }
        return ThyDatePickerComponent;
    }(BasePickerComponent));
    ThyDatePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'thy-date-picker',
                    exportAs: 'thyDatePicker',
                    template: "<thy-picker\n  [isRange]=\"isRange\"\n  [value]=\"thyValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"thyOpen\"\n  [disabled]=\"thyDisabled\"\n  [format]=\"thyFormat\"\n  [allowClear]=\"thyAllowClear\"\n  [className]=\"thyOriginClassName\"\n  [autoFocus]=\"thyAutoFocus\"\n  [placeholder]=\"thyPlaceHolder\"\n  [readonly]=\"thyReadonly\"\n  [size]=\"thySize\"\n  [suffixIcon]=\"thySuffixIcon\"\n  [placement]=\"thyPlacement\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <date-popup\n    *ngIf=\"realOpenState\"\n    [isRange]=\"isRange\"\n    [showWeek]=\"showWeek\"\n    [panelMode]=\"thyMode\"\n    [defaultPickerValue]=\"thyDefaultPickerValue\"\n    (panelModeChange)=\"thyOnPanelChange.emit($event)\"\n    (showTimePickerChange)=\"onShowTimePickerChange($event)\"\n    [value]=\"thyValue\"\n    (valueChange)=\"onValueChange($event)\"\n    (calendarChange)=\"onCalendarChange($event)\"\n    [showTime]=\"thyShowTime\"\n    [mustShowTime]=\"withTime\"\n    [format]=\"thyFormat\"\n    [dateRender]=\"thyDateRender\"\n    [disabledDate]=\"thyDisabledDate\"\n    [minDate]=\"thyMinDate\"\n    [maxDate]=\"thyMaxDate\"\n    [className]=\"thyPanelClassName\"\n    (resultOk)=\"onResultOk()\"\n  ></date-popup>\n</thy-picker>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ThyDatePickerComponent; })
                        }
                    ]
                },] }
    ];
    ThyDatePickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var ThyMonthPickerComponent = /** @class */ (function (_super) {
        __extends(ThyMonthPickerComponent, _super);
        function ThyMonthPickerComponent(cdr, renderer, elementRef) {
            var _this = _super.call(this, cdr) || this;
            _this.thyFormat = 'yyyy-MM';
            _this.endPanelMode = 'month';
            renderer.addClass(elementRef.nativeElement, 'thy-calendar-picker');
            return _this;
        }
        return ThyMonthPickerComponent;
    }(HeaderPickerComponent));
    ThyMonthPickerComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'thy-month-picker',
                    exportAs: 'thyMonthPicker',
                    template: "<thy-picker\n  [isRange]=\"false\"\n  [value]=\"thyValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"thyOpen\"\n  [disabled]=\"thyDisabled\"\n  [format]=\"thyFormat\"\n  [allowClear]=\"thyAllowClear\"\n  [className]=\"thyOriginClassName\"\n  [autoFocus]=\"thyAutoFocus\"\n  [placeholder]=\"thyPlaceHolder\"\n  [readonly]=\"thyReadonly\"\n  [size]=\"thySize\"\n  [suffixIcon]=\"thySuffixIcon\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <div *ngIf=\"realOpenState\">\n    <div class=\"thy-calendar-picker-container thy-calendar thy-calendar-month {{ thyPanelClassName }}\">\n      <div class=\"thy-calendar-header-wrap\">\n        <calendar-header\n          [disabledMonth]=\"thyDisabledDate\"\n          [disabledYear]=\"thyDisabledDate\"\n          [panelMode]=\"panelMode\"\n          (panelModeChange)=\"onPanelModeChange($event)\"\n          [value]=\"thyValue\"\n          (chooseYear)=\"onChooseValue('year', $event)\"\n          (chooseMonth)=\"onChooseValue('month', $event)\"\n          [enablePrev]=\"true\"\n          [enableNext]=\"true\"\n        ></calendar-header>\n      </div>\n    </div>\n  </div>\n</thy-picker>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ThyMonthPickerComponent; })
                        }
                    ]
                },] }
    ];
    ThyMonthPickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    ThyMonthPickerComponent.propDecorators = {
        thyFormat: [{ type: i0.Input }]
    };

    var ThyRangePickerComponent = /** @class */ (function (_super) {
        __extends(ThyRangePickerComponent, _super);
        function ThyRangePickerComponent(cdr, renderer, elementRef) {
            var _this = _super.call(this, cdr) || this;
            _this.renderer = renderer;
            _this.elementRef = elementRef;
            _this.isRange = true;
            renderer.addClass(elementRef.nativeElement, 'thy-calendar-picker');
            return _this;
        }
        return ThyRangePickerComponent;
    }(BasePickerComponent));
    ThyRangePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'thy-range-picker',
                    exportAs: 'thyRangePicker',
                    template: "<thy-picker\n  [isRange]=\"isRange\"\n  [value]=\"thyValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"thyOpen\"\n  [disabled]=\"thyDisabled\"\n  [format]=\"thyFormat\"\n  [allowClear]=\"thyAllowClear\"\n  [className]=\"thyOriginClassName\"\n  [autoFocus]=\"thyAutoFocus\"\n  [placeholder]=\"thyPlaceHolder\"\n  [readonly]=\"thyReadonly\"\n  [size]=\"thySize\"\n  [suffixIcon]=\"thySuffixIcon\"\n  [placement]=\"thyPlacement\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <date-popup\n    *ngIf=\"realOpenState\"\n    [isRange]=\"isRange\"\n    [showWeek]=\"showWeek\"\n    [panelMode]=\"thyMode\"\n    [defaultPickerValue]=\"thyDefaultPickerValue\"\n    (panelModeChange)=\"thyOnPanelChange.emit($event)\"\n    (showTimePickerChange)=\"onShowTimePickerChange($event)\"\n    [value]=\"thyValue\"\n    (valueChange)=\"onValueChange($event)\"\n    (calendarChange)=\"onCalendarChange($event)\"\n    [showTime]=\"thyShowTime\"\n    [mustShowTime]=\"withTime\"\n    [format]=\"thyFormat\"\n    [dateRender]=\"thyDateRender\"\n    [disabledDate]=\"thyDisabledDate\"\n    [minDate]=\"thyMinDate\"\n    [maxDate]=\"thyMaxDate\"\n    [className]=\"thyPanelClassName\"\n    (resultOk)=\"onResultOk()\"\n  ></date-popup>\n</thy-picker>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ThyRangePickerComponent; })
                        }
                    ]
                },] }
    ];
    ThyRangePickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var ThyWeekPickerComponent = /** @class */ (function (_super) {
        __extends(ThyWeekPickerComponent, _super);
        function ThyWeekPickerComponent(cdr, renderer, elementRef) {
            var _this = _super.call(this, cdr) || this;
            _this.showWeek = true;
            renderer.addClass(elementRef.nativeElement, 'thy-calendar-picker');
            return _this;
        }
        return ThyWeekPickerComponent;
    }(BasePickerComponent));
    ThyWeekPickerComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'thy-week-picker',
                    exportAs: 'thyWeekPicker',
                    template: "<thy-picker\n  [isRange]=\"isRange\"\n  [value]=\"thyValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"thyOpen\"\n  [disabled]=\"thyDisabled\"\n  [format]=\"thyFormat\"\n  [allowClear]=\"thyAllowClear\"\n  [className]=\"thyOriginClassName\"\n  [autoFocus]=\"thyAutoFocus\"\n  [placeholder]=\"thyPlaceHolder\"\n  [readonly]=\"thyReadonly\"\n  [size]=\"thySize\"\n  [suffixIcon]=\"thySuffixIcon\"\n  [placement]=\"thyPlacement\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <date-popup\n    *ngIf=\"realOpenState\"\n    [isRange]=\"isRange\"\n    [showWeek]=\"showWeek\"\n    [panelMode]=\"thyMode\"\n    [defaultPickerValue]=\"thyDefaultPickerValue\"\n    (panelModeChange)=\"thyOnPanelChange.emit($event)\"\n    (showTimePickerChange)=\"onShowTimePickerChange($event)\"\n    [value]=\"thyValue\"\n    (valueChange)=\"onValueChange($event)\"\n    (calendarChange)=\"onCalendarChange($event)\"\n    [showTime]=\"thyShowTime\"\n    [mustShowTime]=\"withTime\"\n    [format]=\"thyFormat\"\n    [dateRender]=\"thyDateRender\"\n    [disabledDate]=\"thyDisabledDate\"\n    [minDate]=\"thyMinDate\"\n    [maxDate]=\"thyMaxDate\"\n    [className]=\"thyPanelClassName\"\n    (resultOk)=\"onResultOk()\"\n  ></date-popup>\n</thy-picker>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ThyWeekPickerComponent; })
                        }
                    ]
                },] }
    ];
    ThyWeekPickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var ThyYearPickerComponent = /** @class */ (function (_super) {
        __extends(ThyYearPickerComponent, _super);
        function ThyYearPickerComponent(cdr, renderer, elementRef) {
            var _this = _super.call(this, cdr) || this;
            _this.thyFormat = 'yyyy';
            _this.endPanelMode = 'year';
            renderer.addClass(elementRef.nativeElement, 'thy-calendar-picker');
            return _this;
        }
        return ThyYearPickerComponent;
    }(HeaderPickerComponent));
    ThyYearPickerComponent.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'thy-year-picker',
                    exportAs: 'thyYearPicker',
                    template: "<thy-picker\n  [isRange]=\"false\"\n  [value]=\"thyValue\"\n  (valueChange)=\"onValueChange($event)\"\n  [open]=\"thyOpen\"\n  [disabled]=\"thyDisabled\"\n  [format]=\"thyFormat\"\n  [allowClear]=\"thyAllowClear\"\n  [className]=\"thyOriginClassName\"\n  [autoFocus]=\"thyAutoFocus\"\n  [placeholder]=\"thyPlaceHolder\"\n  [readonly]=\"thyReadonly\"\n  [size]=\"thySize\"\n  [suffixIcon]=\"thySuffixIcon\"\n  (openChange)=\"onOpenChange($event)\"\n>\n  <div *ngIf=\"realOpenState\">\n    <div class=\"thy-calendar-picker-container thy-calendar thy-calendar-month {{ thyPanelClassName }}\">\n      <div class=\"thy-calendar-header-wrap\">\n        <calendar-header\n          [disabledMonth]=\"thyDisabledDate\"\n          [disabledYear]=\"thyDisabledDate\"\n          [panelMode]=\"panelMode\"\n          (panelModeChange)=\"onPanelModeChange($event)\"\n          [value]=\"thyValue\"\n          (chooseYear)=\"onChooseValue('year', $event)\"\n          (chooseMonth)=\"onChooseValue('month', $event)\"\n          [enablePrev]=\"true\"\n          [enableNext]=\"true\"\n        ></calendar-header>\n      </div>\n    </div>\n  </div>\n</thy-picker>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ThyYearPickerComponent; })
                        }
                    ]
                },] }
    ];
    ThyYearPickerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    ThyYearPickerComponent.propDecorators = {
        thyFormat: [{ type: i0.Input }]
    };

    var DATE_PICKER_REQUIRED_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: i0.forwardRef(function () { return DatePickerRequiredValidator; }),
        multi: true
    };
    var DatePickerRequiredValidator = /** @class */ (function () {
        function DatePickerRequiredValidator() {
        }
        Object.defineProperty(DatePickerRequiredValidator.prototype, "required", {
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = value != null && value !== false && "" + value !== 'false';
            },
            enumerable: false,
            configurable: true
        });
        DatePickerRequiredValidator.prototype.validate = function (control) {
            return this.required ? this.validateRequired(control) : null;
        };
        DatePickerRequiredValidator.prototype.validateRequired = function (control) {
            return isEmptyInputDateValue(control.value) ? { required: true } : null;
        };
        return DatePickerRequiredValidator;
    }());
    DatePickerRequiredValidator.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[thyDatePicker][required][formControlName],[thyDatePicker][required][formControl],[thyDatePicker][required][ngModel],thy-date-picker[required][formControlName],thy-date-picker[required][formControl],thy-date-picker[required][ngModel]',
                    providers: [DATE_PICKER_REQUIRED_VALIDATOR]
                },] }
    ];
    DatePickerRequiredValidator.propDecorators = {
        required: [{ type: i0.Input }]
    };
    var RANGE_PICKER_REQUIRED_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        // tslint:disable-next-line: no-use-before-declare
        useExisting: i0.forwardRef(function () { return RangePickerRequiredValidator; }),
        multi: true
    };
    var RangePickerRequiredValidator = /** @class */ (function () {
        function RangePickerRequiredValidator() {
        }
        Object.defineProperty(RangePickerRequiredValidator.prototype, "required", {
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = value != null && value !== false && "" + value !== 'false';
            },
            enumerable: false,
            configurable: true
        });
        RangePickerRequiredValidator.prototype.validate = function (control) {
            return this.required ? this.validateRequired(control) : null;
        };
        RangePickerRequiredValidator.prototype.validateRequired = function (control) {
            return isEmptyInputRangeValue(control.value) ? { required: true } : null;
        };
        return RangePickerRequiredValidator;
    }());
    RangePickerRequiredValidator.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[thyRangePicker][required][formControlName],[thyRangePicker][required][formControl],[thyRangePicker][required][ngModel],thy-range-picker[required][formControlName],thy-range-picker[required][formControl],thy-range-picker[required][ngModel]',
                    providers: [RANGE_PICKER_REQUIRED_VALIDATOR]
                },] }
    ];
    RangePickerRequiredValidator.propDecorators = {
        required: [{ type: i0.Input }]
    };
    function isEmptyInputRangeValue(value) {
        return value == null || (instanceOfRangeEntry(value) && (value.begin == null || value.end == null));
    }
    function isEmptyInputDateValue(value) {
        return value == null || (instanceOfDateEntry(value) && value.date == null);
    }

    var ThyDatePickerFormatPipe = /** @class */ (function () {
        function ThyDatePickerFormatPipe(dateHelper) {
            this.dateHelper = dateHelper;
        }
        ThyDatePickerFormatPipe.prototype.transform = function (originalValue, formatStr) {
            var _this = this;
            var _a = transformDateValue(originalValue), value = _a.value, withTime = _a.withTime;
            if (!formatStr) {
                formatStr = withTime ? 'yyyy-MM-dd HH:mm' : 'yyyy-MM-dd';
            }
            if (!Array.isArray(value)) {
                return this.dateHelper.format(value, formatStr);
            }
            else {
                return value.map(function (date) { return _this.dateHelper.format(date, formatStr); }).join(' ~ ');
            }
        };
        return ThyDatePickerFormatPipe;
    }());
    ThyDatePickerFormatPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'thyDatePickerFormat' },] }
    ];
    ThyDatePickerFormatPipe.ctorParameters = function () { return [
        { type: DateHelperService }
    ]; };
    var ThyDatePickerFormatStringPipe = /** @class */ (function () {
        function ThyDatePickerFormatStringPipe(dateHelper) {
            this.dateHelper = dateHelper;
        }
        ThyDatePickerFormatStringPipe.prototype.transform = function (originalValue) {
            var withTime = transformDateValue(originalValue).withTime;
            return withTime ? 'yyyy-MM-dd HH:mm' : 'yyyy-MM-dd';
        };
        return ThyDatePickerFormatStringPipe;
    }());
    ThyDatePickerFormatStringPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'thyDatePickerFormatString' },] }
    ];
    ThyDatePickerFormatStringPipe.ctorParameters = function () { return [
        { type: DateHelperService }
    ]; };

    var PickerDirective = /** @class */ (function (_super) {
        __extends(PickerDirective, _super);
        function PickerDirective(elementRef, cdr, thyPopover) {
            var _this = _super.call(this, cdr) || this;
            _this.elementRef = elementRef;
            _this.cdr = cdr;
            _this.thyPopover = thyPopover;
            _this.showWeek = false;
            _this.thyOnPanelChange = new i0.EventEmitter();
            _this.thyOnCalendarChange = new i0.EventEmitter();
            _this.thyMustShowTime = false;
            _this.thyPlacement = 'bottom';
            _this.offset = 4;
            _this.hasBackdrop = true;
            _this.thyStopPropagation = true;
            _this.destroy$ = new rxjs.Subject();
            _this.el = _this.elementRef.nativeElement;
            _this.$click = rxjs.fromEvent(_this.el, 'click').pipe(operators.tap(function (e) {
                if (_this.thyStopPropagation) {
                    e.stopPropagation();
                }
            }), operators.mapTo(true));
            return _this;
        }
        Object.defineProperty(PickerDirective.prototype, "thyShowTime", {
            get: function () {
                return this._showTime;
            },
            set: function (value) {
                this._showTime = typeof value === 'object' ? value : util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PickerDirective.prototype, "thyOffset", {
            set: function (value) {
                util.warnDeprecation("thyOffset parameter will be deprecated, please use thyPopoverOptions instead.");
                this.offset = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PickerDirective.prototype, "thyHasBackdrop", {
            set: function (value) {
                util.warnDeprecation("thyHasBackdrop parameter will be deprecated, please use thyPopoverOptions instead.");
                this.hasBackdrop = value;
            },
            enumerable: false,
            configurable: true
        });
        PickerDirective.prototype.openOverlay = function () {
            var _this = this;
            var popoverRef = this.thyPopover.open(DatePopupComponent, Object.assign({
                origin: this.el,
                hasBackdrop: this.hasBackdrop,
                backdropClass: 'thy-overlay-transparent-backdrop',
                offset: this.offset,
                initialState: {
                    isRange: this.isRange,
                    showWeek: this.showWeek,
                    value: this.thyValue,
                    showTime: this.thyShowTime,
                    mustShowTime: this.withTime,
                    format: this.thyFormat,
                    dateRender: this.thyDateRender,
                    disabledDate: this.thyDisabledDate,
                    placeholder: this.thyPlaceHolder,
                    className: this.thyPanelClassName,
                    defaultPickerValue: this.thyDefaultPickerValue,
                    minDate: this.thyMinDate,
                    maxDate: this.thyMaxDate
                },
                placement: this.thyPlacement
            }, this.thyPopoverOptions));
            if (popoverRef) {
                var componentInstance = popoverRef.componentInstance;
                componentInstance.valueChange.pipe(operators.takeUntil(this.destroy$)).subscribe(function (event) { return _this.onValueChange(event); });
                componentInstance.calendarChange.pipe(operators.takeUntil(this.destroy$)).subscribe(function (event) {
                    var rangeValue = coercion.coerceArray(event).map(function (x) { return x.nativeDate; });
                    _this.thyOnCalendarChange.emit(rangeValue);
                });
                componentInstance.showTimePickerChange
                    .pipe(operators.takeUntil(this.destroy$))
                    .subscribe(function (event) { return _this.onShowTimePickerChange(event); });
                // tslint:disable-next-line: max-line-length
                componentInstance.ngOnChanges({ value: {} }); // dynamically created components don't call ngOnChanges, manual call
                popoverRef
                    .afterOpened()
                    .pipe(operators.takeUntil(this.destroy$))
                    .subscribe(function () { return _this.thyOpenChange.emit(true); });
                popoverRef
                    .afterClosed()
                    .pipe(operators.takeUntil(this.destroy$))
                    .subscribe(function () { return _this.thyOpenChange.emit(false); });
            }
        };
        PickerDirective.prototype.closeOverlay = function () {
            this.thyPopover.close();
        };
        PickerDirective.prototype.initActionSubscribe = function () {
            var _this = this;
            this.$click.pipe(operators.debounceTime(50), operators.takeUntil(this.destroy$)).subscribe(function () {
                if (!_this.thyDisabled && !_this.thyReadonly) {
                    _this.openOverlay();
                }
            });
        };
        PickerDirective.prototype.ngAfterViewInit = function () {
            this.setDefaultTimePickerState();
            this.initActionSubscribe();
        };
        PickerDirective.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        PickerDirective.prototype.onValueChange = function (value) {
            this.restoreTimePickerState(value);
            _super.prototype.onValueChange.call(this, value);
            this.closeOverlay();
        };
        // Displays the time directly when the time must be displayed by default
        PickerDirective.prototype.setDefaultTimePickerState = function () {
            this.withTime = this.thyMustShowTime;
        };
        // Restore after clearing time to select whether the original picker time is displayed or not
        PickerDirective.prototype.restoreTimePickerState = function (value) {
            if (!value) {
                this.withTime = this.thyMustShowTime || this.originWithTime;
            }
        };
        PickerDirective.prototype.onShowTimePickerChange = function (show) {
            this.withTime = show;
        };
        return PickerDirective;
    }(AbstractPickerComponent));
    PickerDirective.decorators = [
        { type: i0.Directive }
    ];
    PickerDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: popover.ThyPopover }
    ]; };
    PickerDirective.propDecorators = {
        thyDateRender: [{ type: i0.Input }],
        thyMode: [{ type: i0.Input }],
        thyOnPanelChange: [{ type: i0.Output }],
        thyOnCalendarChange: [{ type: i0.Output }],
        thyShowTime: [{ type: i0.Input }],
        thyMustShowTime: [{ type: i0.Input }],
        thyPlacement: [{ type: i0.Input }],
        thyOffset: [{ type: i0.Input }],
        thyHasBackdrop: [{ type: i0.Input }],
        thyPopoverOptions: [{ type: i0.Input }],
        thyStopPropagation: [{ type: i0.Input }]
    };

    var ThyDatePickerDirective = /** @class */ (function (_super) {
        __extends(ThyDatePickerDirective, _super);
        function ThyDatePickerDirective(elementRef, cdr, thyPopover) {
            var _this = _super.call(this, elementRef, cdr, thyPopover) || this;
            _this.isRange = false;
            return _this;
        }
        return ThyDatePickerDirective;
    }(PickerDirective));
    ThyDatePickerDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[thyDatePicker]',
                    exportAs: 'thyDatePicker',
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ThyDatePickerDirective; })
                        }
                    ]
                },] }
    ];
    ThyDatePickerDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: popover.ThyPopover }
    ]; };

    var ThyRangePickerDirective = /** @class */ (function (_super) {
        __extends(ThyRangePickerDirective, _super);
        function ThyRangePickerDirective(elementRef, cdr, thyPopover) {
            var _this = _super.call(this, elementRef, cdr, thyPopover) || this;
            _this.isRange = true;
            return _this;
        }
        return ThyRangePickerDirective;
    }(PickerDirective));
    ThyRangePickerDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[thyRangePicker]',
                    exportAs: 'thyRangePicker',
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: i0.forwardRef(function () { return ThyRangePickerDirective; })
                        }
                    ]
                },] }
    ];
    ThyRangePickerDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: popover.ThyPopover }
    ]; };

    common.registerLocaleData(localeZhHans__default['default'], 'zh-Hans');
    var ThyDatePickerModule = /** @class */ (function () {
        function ThyDatePickerModule() {
        }
        return ThyDatePickerModule;
    }());
    ThyDatePickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, overlay.OverlayModule, LibPackerModule, icon.ThyIconModule, input.ThyInputModule, popover.ThyPopoverModule],
                    exports: [
                        ThyDatePickerComponent,
                        ThyRangePickerComponent,
                        ThyMonthPickerComponent,
                        ThyYearPickerComponent,
                        ThyWeekPickerComponent,
                        DatePickerRequiredValidator,
                        RangePickerRequiredValidator,
                        ThyDatePickerFormatPipe,
                        ThyDatePickerFormatStringPipe,
                        ThyDatePickerDirective,
                        ThyRangePickerDirective
                    ],
                    declarations: [
                        HeaderPickerComponent,
                        BasePickerComponent,
                        ThyPickerComponent,
                        ThyDatePickerComponent,
                        ThyMonthPickerComponent,
                        ThyYearPickerComponent,
                        ThyWeekPickerComponent,
                        ThyRangePickerComponent,
                        DatePickerRequiredValidator,
                        RangePickerRequiredValidator,
                        ThyDatePickerFormatPipe,
                        ThyDatePickerFormatStringPipe,
                        ThyDatePickerDirective,
                        ThyRangePickerDirective
                    ],
                    entryComponents: [DatePopupComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AbstractPickerComponent = AbstractPickerComponent;
    exports.BasePickerComponent = BasePickerComponent;
    exports.CalendarFooterComponent = CalendarFooterComponent;
    exports.CalendarHeaderComponent = CalendarHeaderComponent;
    exports.DATE_HELPER_SERVICE_FACTORY = DATE_HELPER_SERVICE_FACTORY;
    exports.DateHelperByDatePipe = DateHelperByDatePipe;
    exports.DateHelperService = DateHelperService;
    exports.DatePickerRequiredValidator = DatePickerRequiredValidator;
    exports.DatePopupComponent = DatePopupComponent;
    exports.DateTableCellComponent = DateTableCellComponent;
    exports.DateTableComponent = DateTableComponent;
    exports.DecadePanelComponent = DecadePanelComponent;
    exports.HeaderPickerComponent = HeaderPickerComponent;
    exports.InnerPopupComponent = InnerPopupComponent;
    exports.LibPackerModule = LibPackerModule;
    exports.MonthPanelComponent = MonthPanelComponent;
    exports.MonthTableComponent = MonthTableComponent;
    exports.PickerDirective = PickerDirective;
    exports.RangePickerRequiredValidator = RangePickerRequiredValidator;
    exports.ThyDatePickerComponent = ThyDatePickerComponent;
    exports.ThyDatePickerDirective = ThyDatePickerDirective;
    exports.ThyDatePickerFormatPipe = ThyDatePickerFormatPipe;
    exports.ThyDatePickerFormatStringPipe = ThyDatePickerFormatStringPipe;
    exports.ThyDatePickerModule = ThyDatePickerModule;
    exports.ThyMonthPickerComponent = ThyMonthPickerComponent;
    exports.ThyPickerComponent = ThyPickerComponent;
    exports.ThyRangePickerComponent = ThyRangePickerComponent;
    exports.ThyRangePickerDirective = ThyRangePickerDirective;
    exports.ThyWeekPickerComponent = ThyWeekPickerComponent;
    exports.ThyYearPickerComponent = ThyYearPickerComponent;
    exports.YearPanelComponent = YearPanelComponent;
    exports.instanceOfDateEntry = instanceOfDateEntry;
    exports.instanceOfRangeEntry = instanceOfRangeEntry;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-date-picker.umd.js.map

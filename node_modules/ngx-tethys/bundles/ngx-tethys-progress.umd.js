(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('ngx-tethys/core'),require('@angular/common'),require('ngx-tethys/tooltip'),exports, require('@angular/common'), require('@angular/core'), require('ngx-tethys/tooltip'), require('ngx-tethys/core')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/progress', ['@angular/core','ngx-tethys/core','@angular/common','ngx-tethys/tooltip','exports', '@angular/common', '@angular/core', 'ngx-tethys/tooltip', 'ngx-tethys/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ngxTethys.core,global.ng.common,global.ngxTethys.tooltip,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].progress = {}), global.ng.common, global.ng.core, global['ngx-tethys'].tooltip, global['ngx-tethys'].core));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,exports, common, core, tooltip, core$1) { 
var _c0 = ["*"];
var _c1 = function (a0) { return { "cursor-pointer": a0 }; };
function ThyProgressComponent_ng_container_0_thy_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "thy-progress-bar", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r4 = ctx.$implicit;
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("thyType", item_r4.type)("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c1, item_r4.tips || ctx_r3.thyTips))("thyTooltip", item_r4.tips || ctx_r3.thyTips)("thyTooltipTemplateContext", item_r4)("thyTooltipDisabled", !ctx_r3.thyTips && !item_r4.tips)("thyColor", item_r4.color)("thyValue", item_r4.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", item_r4.label, " ");
} }
function ThyProgressComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyProgressComponent_ng_container_0_thy_progress_bar_1_Template, 2, 10, "thy-progress-bar", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.value);
} }
function ThyProgressComponent_ng_template_1_thy_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "thy-progress-bar", 5);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("thyType", ctx_r5.thyType)("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c1, ctx_r5.thyTips))("thyTooltip", ctx_r5.thyTips)("thyTooltipTemplateContext", ctx_r5.value)("thyTooltipDisabled", !ctx_r5.thyTips)("thyValue", ctx_r5.value);
} }
function ThyProgressComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyProgressComponent_ng_template_1_thy_progress_bar_0_Template, 2, 8, "thy-progress-bar", 4);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.value);
} }
'use strict';

    var THY_PROGRESS_COMPONENT = new core.InjectionToken('THY_PROGRESS_COMPONENT');
    var ThyProgressBarComponent = /** @class */ (function () {
        function ThyProgressBarComponent(updateHostClassService, elementRef, progress) {
            this.updateHostClassService = updateHostClassService;
            this.progress = progress;
            this.isProgressBar = true;
            this.percent = 0;
            this.color = '';
            updateHostClassService.initializeElement(elementRef.nativeElement);
        }
        Object.defineProperty(ThyProgressBarComponent.prototype, "thyType", {
            set: function (type) {
                // this.type = type;
                this.updateHostClassService.updateClass(type ? ["progress-bar-" + type, "bg-" + type] : []);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressBarComponent.prototype, "thyValue", {
            set: function (value) {
                if (!value && value !== 0) {
                    return;
                }
                this.value = value;
                this.recalculatePercentage();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressBarComponent.prototype, "thyColor", {
            set: function (color) {
                this.color = color || '';
            },
            enumerable: false,
            configurable: true
        });
        ThyProgressBarComponent.prototype.recalculatePercentage = function () {
            this.percent = +((this.value / this.progress.max) * 100).toFixed(2);
            // if (this.progress && this.progress.bars) {
            //     const totalPercentage = this.progress.bars.reduce(function(total: number, bar): number {
            //         return total + bar.percent;
            //     }, 0);
            //     if (totalPercentage > 100) {
            //         this.percent -= totalPercentage - 100;
            //     }
            // }
        };
ThyProgressBarComponent.ɵfac = function ThyProgressBarComponent_Factory(t) { return new (t || ThyProgressBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_PROGRESS_COMPONENT)); };
ThyProgressBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyProgressBarComponent, selectors: [["thy-progress-bar"]], hostVars: 6, hostBindings: function ThyProgressBarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.percent, "%")("background-color", ctx.color);
        ɵngcc0.ɵɵclassProp("progress-bar", ctx.isProgressBar);
    } }, inputs: { thyType: "thyType", thyValue: "thyValue", thyColor: "thyColor", thyTips: "thyTips" }, features: [ɵngcc0.ɵɵProvidersFeature([core$1.UpdateHostClassService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyProgressBarComponent, [{
        type: core.Component,
        args: [{
                selector: 'thy-progress-bar',
                template: "<ng-content></ng-content>\n",
                encapsulation: core.ViewEncapsulation.None,
                providers: [core$1.UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [THY_PROGRESS_COMPONENT]
            }] }]; }, { isProgressBar: [{
            type: core.HostBinding,
            args: ["class.progress-bar"]
        }], percent: [{
            type: core.HostBinding,
            args: ['style.width.%']
        }], color: [{
            type: core.HostBinding,
            args: ['style.background-color']
        }], thyType: [{
            type: core.Input
        }], thyValue: [{
            type: core.Input
        }], thyColor: [{
            type: core.Input
        }], thyTips: [{
            type: core.Input
        }] }); })();
        return ThyProgressBarComponent;
    }());
    ThyProgressBarComponent.ctorParameters = function () { return [
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [THY_PROGRESS_COMPONENT,] }] }
    ]; };
    ThyProgressBarComponent.propDecorators = {
        isProgressBar: [{ type: core.HostBinding, args: ["class.progress-bar",] }],
        percent: [{ type: core.HostBinding, args: ['style.width.%',] }],
        color: [{ type: core.HostBinding, args: ['style.background-color',] }],
        thyTips: [{ type: core.Input }],
        thyType: [{ type: core.Input }],
        thyValue: [{ type: core.Input }],
        thyColor: [{ type: core.Input }]
    };

    var ThyProgressComponent = /** @class */ (function () {
        function ThyProgressComponent(updateHostClassService, elementRef) {
            this.updateHostClassService = updateHostClassService;
            this.bars = [];
            this.max = 100;
            this.isStacked = false;
            this.isProgress = true;
            this.updateHostClassService.initializeElement(elementRef);
        }
        Object.defineProperty(ThyProgressComponent.prototype, "barsQueryList", {
            set: function (value) {
                this.bars = value.toArray();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressComponent.prototype, "thyValue", {
            set: function (value) {
                this.isStacked = Array.isArray(value);
                this.value = value;
                // 自动求和计算 max
                if (this.isStacked) {
                    this.thyMax = value.reduce(function (total, item) {
                        return total + item.value;
                    }, 0);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressComponent.prototype, "thySize", {
            set: function (size) {
                this.updateHostClassService.updateClass(size ? ["progress-" + size] : []);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressComponent.prototype, "thyMax", {
            set: function (max) {
                this.max = max;
                this.bars.forEach(function (bar) {
                    bar.recalculatePercentage();
                });
            },
            enumerable: false,
            configurable: true
        });
ThyProgressComponent.ɵfac = function ThyProgressComponent_Factory(t) { return new (t || ThyProgressComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyProgressComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyProgressComponent, selectors: [["thy-progress"]], viewQuery: function ThyProgressComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(ThyProgressBarComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.barsQueryList = _t);
    } }, hostVars: 5, hostBindings: function ThyProgressComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("max", ctx.max);
        ɵngcc0.ɵɵclassProp("progress-stacked", ctx.isStacked)("progress", ctx.isProgress);
    } }, inputs: { thyValue: "thyValue", thySize: "thySize", thyMax: "thyMax", thyType: "thyType", thyTips: "thyTips" }, features: [ɵngcc0.ɵɵProvidersFeature([
            core$1.UpdateHostClassService,
            {
                provide: THY_PROGRESS_COMPONENT,
                useExisting: ThyProgressComponent
            }
        ])], ngContentSelectors: _c0, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["general", ""], [3, "thyType", "ngClass", "thyTooltip", "thyTooltipTemplateContext", "thyTooltipDisabled", "thyColor", "thyValue", 4, "ngFor", "ngForOf"], [3, "thyType", "ngClass", "thyTooltip", "thyTooltipTemplateContext", "thyTooltipDisabled", "thyColor", "thyValue"], [3, "thyType", "ngClass", "thyTooltip", "thyTooltipTemplateContext", "thyTooltipDisabled", "thyValue", 4, "ngIf"], [3, "thyType", "ngClass", "thyTooltip", "thyTooltipTemplateContext", "thyTooltipDisabled", "thyValue"]], template: function ThyProgressComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyProgressComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, ThyProgressComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isStacked)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf, ThyProgressBarComponent, ɵngcc2.NgClass, ɵngcc3.ThyTooltipDirective], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyProgressComponent, [{
        type: core.Component,
        args: [{
                selector: 'thy-progress',
                template: "<ng-container *ngIf=\"isStacked; else general\">\n  <thy-progress-bar\n    *ngFor=\"let item of value\"\n    [thyType]=\"item.type\"\n    [ngClass]=\"{ 'cursor-pointer': item.tips || thyTips }\"\n    [thyTooltip]=\"item.tips || thyTips\"\n    [thyTooltipTemplateContext]=\"item\"\n    [thyTooltipDisabled]=\"!thyTips && !item.tips\"\n    [thyColor]=\"item.color\"\n    [thyValue]=\"item.value\"\n    >{{ item.label }}\n  </thy-progress-bar>\n</ng-container>\n\n<ng-template #general>\n  <thy-progress-bar\n    *ngIf=\"value\"\n    [thyType]=\"thyType\"\n    [ngClass]=\"{ 'cursor-pointer': thyTips }\"\n    [thyTooltip]=\"thyTips\"\n    [thyTooltipTemplateContext]=\"value\"\n    [thyTooltipDisabled]=\"!thyTips\"\n    [thyValue]=\"value\"\n  >\n    <ng-content></ng-content>\n  </thy-progress-bar>\n</ng-template>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                encapsulation: core.ViewEncapsulation.None,
                providers: [
                    core$1.UpdateHostClassService,
                    {
                        provide: THY_PROGRESS_COMPONENT,
                        useExisting: ThyProgressComponent
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { max: [{
            type: core.HostBinding,
            args: ['attr.max']
        }], isStacked: [{
            type: core.HostBinding,
            args: ["class.progress-stacked"]
        }], isProgress: [{
            type: core.HostBinding,
            args: ["class.progress"]
        }], barsQueryList: [{
            type: core.ViewChildren,
            args: [ThyProgressBarComponent]
        }], thyValue: [{
            type: core.Input
        }], thySize: [{
            type: core.Input
        }], thyMax: [{
            type: core.Input
        }], thyType: [{
            type: core.Input
        }], thyTips: [{
            type: core.Input
        }] }); })();
        return ThyProgressComponent;
    }());
    ThyProgressComponent.ctorParameters = function () { return [
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef }
    ]; };
    ThyProgressComponent.propDecorators = {
        max: [{ type: core.HostBinding, args: ['attr.max',] }],
        isStacked: [{ type: core.HostBinding, args: ["class.progress-stacked",] }],
        isProgress: [{ type: core.HostBinding, args: ["class.progress",] }],
        barsQueryList: [{ type: core.ViewChildren, args: [ThyProgressBarComponent,] }],
        thyType: [{ type: core.Input }],
        thyTips: [{ type: core.Input }],
        thyValue: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        thyMax: [{ type: core.Input }]
    };

    var ThyProgressModule = /** @class */ (function () {
        function ThyProgressModule() {
        }
ThyProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyProgressModule });
ThyProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyProgressModule_Factory(t) { return new (t || ThyProgressModule)(); }, imports: [[common.CommonModule, tooltip.ThyTooltipModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyProgressModule, { declarations: [ThyProgressComponent, ThyProgressBarComponent], imports: [ɵngcc2.CommonModule, ɵngcc3.ThyTooltipModule], exports: [ThyProgressComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyProgressModule, [{
        type: core.NgModule,
        args: [{
                declarations: [ThyProgressComponent, ThyProgressBarComponent],
                imports: [common.CommonModule, tooltip.ThyTooltipModule],
                exports: [ThyProgressComponent]
            }]
    }], function () { return []; }, null); })();
        return ThyProgressModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.THY_PROGRESS_COMPONENT = THY_PROGRESS_COMPONENT;
    exports.ThyProgressBarComponent = ThyProgressBarComponent;
    exports.ThyProgressComponent = ThyProgressComponent;
    exports.ThyProgressModule = ThyProgressModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-progress.umd.js.map
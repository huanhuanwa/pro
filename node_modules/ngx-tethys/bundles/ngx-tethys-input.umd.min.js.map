{"version":3,"sources":["../../src/input/input.directive.ts","../../src/input/input.component.ts","../../src/input/input-group.component.ts","../../src/input/input-search.component.ts","../../src/input/module.ts"],"names":["inputGroupSizeMap","xs","sm","md","lg","ThyInputDirective","updateHostClassService","elementRef","render","this","_isFormControl","initialized","initializeElement","nativeElement","Object","defineProperty","prototype","size","updateClass","value","autocomplete","coerceBooleanProperty","setAutocomplete","ngOnInit","setAttribute","Directive","args","selector","providers","UpdateHostClassService","ElementRef","Renderer2","HostBinding","Input","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ThyInputComponent","multi","noop","ngZone","placeholder","thyAutofocus","readonly","focus","EventEmitter","blur","_type","onTouchedCallback","onChangeCallback","_isSearchContainer","_isFocus","disabled","type","_this","onStable","pipe","take","subscribe","isPassword","appendTemplate","eyeTemplate","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","onModelChange","onInputFocus","event","showLabel","emit","onInputBlur","togglePasswordType","Component","template","encapsulation","ViewEncapsulation","None","NgZone","Output","ContentChild","ViewChild","static","ThyInputGroupComponent","thyTranslate","_isInputGroup","appendText","instant","prependText","ThyTranslate","CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR","ThyInputSearchComponent","cdr","autoFocus","_isSearchEllipse","name","clear","searchText","markForCheck","searchModelChange","clearSearchText","stopPropagation","ChangeDetectorRef","NgModule","imports","CommonModule","FormsModule","ThySharedModule","ThyIconModule","declarations","exports"],"mappings":"gzBAMA,IAAMA,EAAoB,CACtBC,GAAI,CAAC,mBACLC,GAAI,CAAC,mBACLC,GAAI,CAAC,mBACLC,GAAI,CAAC,iCA+BL,SAAAC,EAAoBC,EAAwDC,EAAgCC,GAAxFC,KAAAH,uBAAAA,EAAwDG,KAAAF,WAAAA,EAAgCE,KAAAD,OAAAA,EAvBzEC,KAAAC,gBAAiB,EAI5CD,KAAAE,aAAc,EAoBlBF,KAAKH,uBAAuBM,kBAAkBL,EAAWM,sBAlB7DC,OAAAC,eACIV,EAAAW,UAAA,UAAO,KADX,SACYC,GACJA,GAAQjB,EAAkBiB,GAC1BR,KAAKH,uBAAuBY,YAAYlB,EAAkBiB,IAE1DR,KAAKH,uBAAuBY,YAAY,qCAIhDJ,OAAAC,eACIV,EAAAW,UAAA,kBAAe,KADnB,SACoBG,GAChBV,KAAKW,aAAeC,EAAAA,sBAAsBF,GACtCV,KAAKE,aACLF,KAAKa,mDAQbjB,EAAAW,UAAAO,SAAA,WACId,KAAKE,aAAc,EACnBF,KAAKa,mBAGDjB,EAAAW,UAAAM,gBAAA,WACJb,KAAKD,OAAOgB,aAAaf,KAAKF,WAAWM,cAAe,eAAgBJ,KAAKW,aAAe,KAAO,iCAtC1GK,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,aACVC,UAAW,CAACC,EAAAA,qEAdPA,EAAAA,8BADWC,EAAAA,kBAAwCC,EAAAA,qDAkBvDC,EAAAA,YAAWN,KAAA,CAAC,uCAMZO,EAAAA,+BASAA,EAAAA,aCbQC,EAA2C,CACpDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,GAGLC,EAAO,0BA+DT,SAAAF,EAAoBG,GAAAjC,KAAAiC,OAAAA,EApDXjC,KAAAkC,YAAc,GAIdlC,KAAAmC,cAAe,EAWfnC,KAAAoC,UAAW,EAOVpC,KAAAqC,MAA6B,IAAIC,EAAAA,aAEjCtC,KAAAuC,KAA4B,IAAID,EAAAA,aAQnCtC,KAAAwC,MAAQ,OAQPxC,KAAAyC,kBAAgCT,EAEhChC,KAAA0C,iBAAqCV,EAEbhC,KAAA2C,oBAAqB,EAElB3C,KAAAC,gBAAiB,EAEVD,KAAA4C,UAAW,EAEtB5C,KAAA6C,UAAW,SA1C1CxC,OAAAC,eACIwB,EAAAvB,UAAA,UAAO,KADX,SACYG,GACRV,KAAK8C,KAAOpC,mCAOhBL,OAAAC,eACIwB,EAAAvB,UAAA,kBAAe,KADnB,SACoBG,GAChBV,KAAKW,aAAeD,mCAmCxBoB,EAAAvB,UAAAO,SAAA,WAAA,IAAAiC,EAAA/C,KACIA,KAAKiC,OAAOe,SAASC,KAAKC,EAAAA,KAAK,IAAIC,WAAU,WACrCJ,EAAKK,WAAWL,EAAKD,QACrBC,EAAKM,eAAiBN,EAAKO,iBAKvCxB,EAAAvB,UAAAgD,WAAA,SAAW7C,GACPV,KAAKU,MAAQA,GAGjBoB,EAAAvB,UAAAiD,iBAAA,SAAiBC,GACbzD,KAAK0C,iBAAmBe,GAG5B3B,EAAAvB,UAAAmD,kBAAA,SAAkBD,GACdzD,KAAKyC,kBAAoBgB,GAG7B3B,EAAAvB,UAAAoD,iBAAA,SAAkBC,GACd5D,KAAK6C,SAAWe,GAGpB9B,EAAAvB,UAAAsD,cAAA,WACI7D,KAAK0C,iBAAiB1C,KAAKU,QAG/BoB,EAAAvB,UAAAuD,aAAA,SAAaC,GACT/D,KAAK4C,UAAW,EAChB5C,KAAKgE,WAAY,EACjBhE,KAAKqC,MAAM4B,KAAKF,IAGpBjC,EAAAvB,UAAA2D,YAAA,SAAYH,GACR/D,KAAK4C,UAAW,EAChB5C,KAAKgE,WAAY,EACjBhE,KAAKuC,KAAK0B,KAAKF,IAGnBjC,EAAAvB,UAAA6C,WAAA,SAAW1C,GACP,MAxGS,aAwGFA,GAGXoB,EAAAvB,UAAA4D,mBAAA,WACInE,KAAK8C,KAAO9C,KAAKoD,WAAWpD,KAAK8C,MAAQ,OAAS,qCA1GzDsB,EAAAA,UAASnD,KAAA,CAAC,CACPC,SAAU,YACVmD,SAAA,mgCACAlD,UAAW,CAACC,EAAAA,uBAAwBK,GACpC6C,cAAeC,EAAAA,kBAAkBC,kDArBjCC,EAAAA,+CAwBCjD,EAAAA,uBAEAA,EAAAA,4BAEAA,EAAAA,oBAEAA,EAAAA,uBAEAA,EAAAA,4BAKAA,EAAAA,wBAEAA,EAAAA,+BAEAA,EAAAA,qBAKAkD,EAAAA,qBAEAA,EAAAA,+BAEAC,EAAAA,aAAY1D,KAAA,CAAC,mCAEb0D,EAAAA,aAAY1D,KAAA,CAAC,gCAEb2D,EAAAA,UAAS3D,KAAA,CAAC,MAAO,CAAE4D,QAAQ,gCAc3BtD,EAAAA,YAAWN,KAAA,CAAC,2CAEZM,EAAAA,YAAWN,KAAA,CAAC,wCAEZM,EAAAA,YAAWN,KAAA,CAAC,+CAEZM,EAAAA,YAAWN,KAAA,CAAC,qBClFjB,IAAM1B,EAAoB,CACtBE,GAAI,CAAC,kBACLE,GAAI,CAAC,gCAqDL,SAAAmF,EACYC,EACAlF,EACAC,GAFAE,KAAA+E,aAAAA,EACA/E,KAAAH,uBAAAA,EACAG,KAAAF,WAAAA,EA1C0BE,KAAAgF,eAAgB,EA4ClDhF,KAAKH,uBAAuBM,kBAAkBL,EAAWM,sBA1C7DC,OAAAC,eACIwE,EAAAvE,UAAA,gBAAa,KADjB,SACkBG,GACdV,KAAKiF,WAAavE,mCAGtBL,OAAAC,eACIwE,EAAAvE,UAAA,4BAAyB,KAD7B,SAC8BG,GACtBA,IACAV,KAAKiF,WAAajF,KAAK+E,aAAaG,QAAQxE,qCAIpDL,OAAAC,eACIwE,EAAAvE,UAAA,iBAAc,KADlB,SACmBG,GACfV,KAAKmF,YAAczE,mCAGvBL,OAAAC,eACIwE,EAAAvE,UAAA,6BAA0B,KAD9B,SAC+BG,GACvBA,IACAV,KAAKmF,YAAcnF,KAAK+E,aAAaG,QAAQxE,qCAIrDL,OAAAC,eACIwE,EAAAvE,UAAA,UAAO,KADX,SACYC,GACJA,GAAQjB,EAAkBiB,GAC1BR,KAAKH,uBAAuBY,YAAYlB,EAAkBiB,IAE1DR,KAAKH,uBAAuBY,YAAY,8DA1CnD2D,EAAAA,UAASnD,KAAA,CAAC,CACPC,SAAU,kBACVmD,SAAA,0hBACAlD,UAAW,CAACC,EAAAA,wBACZkD,cAAeC,EAAAA,kBAAkBC,kDAb5BY,EAAAA,oBAAchE,EAAAA,8BAD4CC,EAAAA,qDAqB9DE,EAAAA,YAAWN,KAAA,CAAC,gDAEZO,EAAAA,yCAKAA,EAAAA,8BAOAA,EAAAA,0CAKAA,EAAAA,uBAOAA,EAAAA,8BASAmD,EAAAA,aAAY1D,KAAA,CAAC,mCAEb0D,EAAAA,aAAY1D,KAAA,CAAC,kBCnDLoE,EAAkD,CAC3D3D,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAyD,KAC9BvD,OAAO,GAGLC,EAAO,8BA2CT,SAAAsD,EAAoBC,GAAAvF,KAAAuF,IAAAA,EAlCbvF,KAAAyC,kBAAgCT,EAE/BhC,KAAA0C,iBAAqCV,EAEtChC,KAAA6C,UAAW,EAEX7C,KAAAwF,WAAY,EAE0BxF,KAAA2C,oBAAqB,EAEvB3C,KAAAyF,kBAAmB,EAIrDzF,KAAA0F,KAAO,GAEP1F,KAAAkC,YAAc,GAgBblC,KAAA2F,MAA6B,IAAIrD,EAAAA,oBAd3CjC,OAAAC,eACIgF,EAAA/E,UAAA,WAAQ,KADZ,SACaG,GACK,YAAVA,IACAV,KAAKyF,kBAAmB,oCAIhCpF,OAAAC,eACIgF,EAAA/E,UAAA,iBAAc,KADlB,SACmBG,GACfV,KAAKwF,UAAY9E,mCASrB4E,EAAA/E,UAAAgD,WAAA,SAAW7C,GACPV,KAAK4F,WAAalF,EAClBV,KAAKuF,IAAIM,gBAGbP,EAAA/E,UAAAiD,iBAAA,SAAiBC,GACbzD,KAAK0C,iBAAmBe,GAG5B6B,EAAA/E,UAAAmD,kBAAA,SAAkBD,GACdzD,KAAKyC,kBAAoBgB,GAG7B6B,EAAA/E,UAAAoD,iBAAA,SAAkBC,GACd5D,KAAK6C,SAAWe,GAGpB0B,EAAA/E,UAAAuF,kBAAA,WACI9F,KAAK0C,iBAAiB1C,KAAK4F,aAG/BN,EAAA/E,UAAAwF,gBAAA,SAAgBhC,GACZA,EAAMiC,kBACFhG,KAAK6C,WAGT7C,KAAK4F,WAAa,GAClB5F,KAAK0C,iBAAiB1C,KAAK4F,YAC3B5F,KAAK2F,MAAM1B,KAAKF,8BAvEvBK,EAAAA,UAASnD,KAAA,CAAC,CACPC,SAAU,mBACVmD,SAAA,qgBACAlD,UAAW,CAACC,EAAAA,uBAAwBiE,GACpCf,cAAeC,EAAAA,kBAAkBC,kDAnB5ByB,EAAAA,iEA8BJ1E,EAAAA,YAAWN,KAAA,CAAC,0DAEZM,EAAAA,YAAWN,KAAA,CAAC,4CAIZO,EAAAA,2BAEAA,EAAAA,wBAEAA,EAAAA,8BAOAA,EAAAA,uBAKAA,EAAAA,qBAEAkD,EAAAA,gBCvCL,iCALCwB,EAAAA,SAAQjF,KAAA,CAAC,CACNkF,QAAS,CAACC,EAAAA,aAAcC,EAAAA,YAAaC,EAAAA,gBAAiBC,EAAAA,eACtDC,aAAc,CAAC5G,EAAmBkC,EAAmBgD,EAAwBQ,GAC7EmB,QAAS,CAAC7G,EAAmBkC,EAAmBgD,EAAwBQ","sourcesContent":["import { Directive, ElementRef, HostBinding, Input, OnInit, Renderer2 } from '@angular/core';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { coerceBooleanProperty } from 'ngx-tethys/util';\n\nexport type InputSize = 'xs' | 'sm' | 'md' | 'lg' | '';\n\nconst inputGroupSizeMap = {\n    xs: ['form-control-xs'],\n    sm: ['form-control-sm'],\n    md: ['form-control-md'],\n    lg: ['form-control-lg']\n};\n\n@Directive({\n    selector: '[thyInput]',\n    providers: [UpdateHostClassService]\n})\nexport class ThyInputDirective implements OnInit {\n    @HostBinding('class.form-control') _isFormControl = true;\n\n    private autocomplete: boolean;\n\n    private initialized = false;\n\n    @Input()\n    set thySize(size: InputSize) {\n        if (size && inputGroupSizeMap[size]) {\n            this.updateHostClassService.updateClass(inputGroupSizeMap[size]);\n        } else {\n            this.updateHostClassService.updateClass([]);\n        }\n    }\n\n    @Input()\n    set thyAutocomplete(value: boolean) {\n        this.autocomplete = coerceBooleanProperty(value);\n        if (this.initialized) {\n            this.setAutocomplete();\n        }\n    }\n\n    constructor(private updateHostClassService: UpdateHostClassService, private elementRef: ElementRef, private render: Renderer2) {\n        this.updateHostClassService.initializeElement(elementRef.nativeElement);\n    }\n\n    ngOnInit() {\n        this.initialized = true;\n        this.setAutocomplete();\n    }\n\n    private setAutocomplete() {\n        this.render.setAttribute(this.elementRef.nativeElement, 'autocomplete', this.autocomplete ? 'on' : 'off');\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ContentChild,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    Renderer2,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation,\n    NgZone,\n    OnInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { take } from 'rxjs/operators';\n\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThyInputComponent),\n    multi: true\n};\n\nconst noop = () => {};\n\nconst password = 'password';\n\n@Component({\n    selector: 'thy-input',\n    templateUrl: './input.component.html',\n    providers: [UpdateHostClassService, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyInputComponent implements ControlValueAccessor, OnInit {\n    @Input() placeholder = '';\n\n    @Input() thySize: string;\n\n    @Input() thyAutofocus = false;\n\n    @Input() type: string;\n\n    @Input()\n    set thyType(value: string) {\n        this.type = value;\n    }\n\n    @Input() thyLabelText: string;\n\n    @Input() readonly = false;\n\n    @Input()\n    set thyAutocomplete(value: boolean) {\n        this.autocomplete = value;\n    }\n\n    @Output() focus: EventEmitter<Event> = new EventEmitter<Event>();\n\n    @Output() blur: EventEmitter<Event> = new EventEmitter<Event>();\n\n    @ContentChild('append') appendTemplate: TemplateRef<any>;\n\n    @ContentChild('prepend') prependTemplate: TemplateRef<any>;\n\n    @ViewChild('eye', { static: true }) eyeTemplate: TemplateRef<any>;\n\n    public _type = 'text';\n\n    public value: string;\n\n    public autocomplete: boolean;\n\n    public showLabel: boolean;\n\n    private onTouchedCallback: () => void = noop;\n\n    private onChangeCallback: (_: any) => void = noop;\n\n    @HostBinding('class.thy-input') _isSearchContainer = true;\n\n    @HostBinding('class.form-control') _isFormControl = true;\n\n    @HostBinding('class.form-control-active') _isFocus = false;\n\n    @HostBinding('class.disabled') disabled = false;\n\n    constructor(private ngZone: NgZone) {}\n\n    ngOnInit() {\n        this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n            if (this.isPassword(this.type)) {\n                this.appendTemplate = this.eyeTemplate;\n            }\n        });\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onModelChange() {\n        this.onChangeCallback(this.value);\n    }\n\n    onInputFocus(event: Event) {\n        this._isFocus = true;\n        this.showLabel = true;\n        this.focus.emit(event);\n    }\n\n    onInputBlur(event: Event) {\n        this._isFocus = false;\n        this.showLabel = false;\n        this.blur.emit(event);\n    }\n\n    isPassword(value: string) {\n        return value === password;\n    }\n\n    togglePasswordType() {\n        this.type = this.isPassword(this.type) ? 'text' : 'password';\n    }\n}\n","import { Component, HostBinding, Input, ContentChild, TemplateRef, ElementRef, ViewEncapsulation } from '@angular/core';\nimport { ThyTranslate, UpdateHostClassService } from 'ngx-tethys/core';\n\nexport type InputGroupSize = 'sm' | 'lg' | '';\n\nconst inputGroupSizeMap = {\n    sm: ['input-group-sm'],\n    lg: ['input-group-lg']\n};\n\n@Component({\n    selector: 'thy-input-group',\n    templateUrl: './input-group.component.html',\n    providers: [UpdateHostClassService],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyInputGroupComponent {\n    public appendText: string;\n\n    public prependText: string;\n\n    @HostBinding('class.thy-input-group') _isInputGroup = true;\n\n    @Input()\n    set thyAppendText(value: string) {\n        this.appendText = value;\n    }\n\n    @Input()\n    set thyAppendTextTranslateKey(value: string) {\n        if (value) {\n            this.appendText = this.thyTranslate.instant(value);\n        }\n    }\n\n    @Input()\n    set thyPrependText(value: string) {\n        this.prependText = value;\n    }\n\n    @Input()\n    set thyPrependTextTranslateKey(value: string) {\n        if (value) {\n            this.prependText = this.thyTranslate.instant(value);\n        }\n    }\n\n    @Input()\n    set thySize(size: InputGroupSize) {\n        if (size && inputGroupSizeMap[size]) {\n            this.updateHostClassService.updateClass(inputGroupSizeMap[size]);\n        } else {\n            this.updateHostClassService.updateClass([]);\n        }\n    }\n\n    @ContentChild('append') appendTemplate: TemplateRef<any>;\n\n    @ContentChild('prepend') prependTemplate: TemplateRef<any>;\n\n    constructor(\n        private thyTranslate: ThyTranslate,\n        private updateHostClassService: UpdateHostClassService,\n        private elementRef: ElementRef\n    ) {\n        this.updateHostClassService.initializeElement(elementRef.nativeElement);\n    }\n}\n","import { ChangeDetectorRef, Component, EventEmitter, forwardRef, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { InputSize } from './input.directive';\n\nexport type InputSearchTheme = 'ellipse' | '';\n\nexport const CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThyInputSearchComponent),\n    multi: true\n};\n\nconst noop = () => {};\n\n@Component({\n    selector: 'thy-input-search',\n    templateUrl: './input-search.component.html',\n    providers: [UpdateHostClassService, CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyInputSearchComponent implements ControlValueAccessor {\n    public onTouchedCallback: () => void = noop;\n\n    private onChangeCallback: (_: any) => void = noop;\n\n    public disabled = false;\n\n    public autoFocus = false;\n\n    @HostBinding('class.input-search-container') _isSearchContainer = true;\n\n    @HostBinding('class.input-search-ellipse') _isSearchEllipse = false;\n\n    searchText: string;\n\n    @Input() name = '';\n\n    @Input() placeholder = '';\n\n    @Input()\n    set thyTheme(value: InputSearchTheme) {\n        if (value === 'ellipse') {\n            this._isSearchEllipse = true;\n        }\n    }\n\n    @Input()\n    set thySearchFocus(value: boolean) {\n        this.autoFocus = value;\n    }\n\n    @Input() thySize: InputSize;\n\n    @Output() clear: EventEmitter<Event> = new EventEmitter<Event>();\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    writeValue(value: any): void {\n        this.searchText = value;\n        this.cdr.markForCheck();\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    searchModelChange() {\n        this.onChangeCallback(this.searchText);\n    }\n\n    clearSearchText(event: Event) {\n        event.stopPropagation();\n        if (this.disabled) {\n            return;\n        }\n        this.searchText = '';\n        this.onChangeCallback(this.searchText);\n        this.clear.emit(event);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyInputDirective } from './input.directive';\nimport { ThyInputComponent } from './input.component';\nimport { ThyInputGroupComponent } from './input-group.component';\nimport { ThyInputSearchComponent } from './input-search.component';\nimport { FormsModule } from '@angular/forms';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyIconModule } from 'ngx-tethys/icon';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, ThySharedModule, ThyIconModule],\n    declarations: [ThyInputDirective, ThyInputComponent, ThyInputGroupComponent, ThyInputSearchComponent],\n    exports: [ThyInputDirective, ThyInputComponent, ThyInputGroupComponent, ThyInputSearchComponent]\n})\nexport class ThyInputModule {}\n"]}
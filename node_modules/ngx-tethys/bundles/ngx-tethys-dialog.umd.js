(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('ngx-tethys/core'),require('@angular/cdk/a11y'),require('@angular/cdk/portal'),require('@angular/forms'),require('ngx-tethys/form'),require('@angular/common'),require('ngx-tethys/button'),require('@angular/cdk/overlay'),require('ngx-tethys/icon'),require('ngx-tethys/shared'),exports, require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('ngx-tethys/button'), require('ngx-tethys/form'), require('ngx-tethys/icon'), require('ngx-tethys/shared'), require('rxjs'), require('ngx-tethys/core'), require('@angular/animations'), require('@angular/cdk/a11y'), require('rxjs/operators'), require('@angular/cdk/bidi'), require('ngx-tethys/util')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/dialog', ['@angular/core','ngx-tethys/core','@angular/cdk/a11y','@angular/cdk/portal','@angular/forms','ngx-tethys/form','@angular/common','ngx-tethys/button','@angular/cdk/overlay','ngx-tethys/icon','ngx-tethys/shared','exports', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/common', '@angular/core', '@angular/forms', 'ngx-tethys/button', 'ngx-tethys/form', 'ngx-tethys/icon', 'ngx-tethys/shared', 'rxjs', 'ngx-tethys/core', '@angular/animations', '@angular/cdk/a11y', 'rxjs/operators', '@angular/cdk/bidi', 'ngx-tethys/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ngxTethys.core,global.ng.cdk.a11y,global.ng.cdk.portal,global.ng.forms,global.ngxTethys.form,global.ng.common,global.ngxTethys.button,global.ng.cdk.overlay,global.ngxTethys.icon,global.ngxTethys.shared,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].dialog = {}), global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.common, global.ng.core, global.ng.forms, global['ngx-tethys'].button, global['ngx-tethys'].form, global['ngx-tethys'].icon, global['ngx-tethys'].shared, global.rxjs, global['ngx-tethys'].core, global.ng.animations, global.ng.cdk.a11y, global.rxjs.operators, global.ng.cdk.bidi, global['ngx-tethys'].util));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,ɵngcc8,ɵngcc9,ɵngcc10,exports, i1, portal, common, i0, forms, button, form, icon, shared, rxjs, i3, animations, a11y, operators, bidi, util) { 
function ThyDialogContainerComponent_ng_template_0_Template(rf, ctx) { }
var _c0 = ["*"];
var _c1 = ["description"];
function DialogFooterComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementContainer(1, 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.description);
} }
var _c2 = ["dialogHeader"];
function DialogHeaderComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "template", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.headerTemplate);
} }
function DialogHeaderComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "h3", 3);
    ɵngcc0.ɵɵelement(1, "thy-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 5);
    ɵngcc0.ɵɵlistener("click", function DialogHeaderComponent_ng_template_1_Template_button_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.close($event); });
    ɵngcc0.ɵɵelement(4, "thy-icon", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r2.thyIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.thyTitle);
} }
'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    exports.ThyDialogSizes = void 0;
    (function (ThyDialogSizes) {
        ThyDialogSizes["lg"] = "lg";
        ThyDialogSizes["supperLg"] = "supper-lg";
        ThyDialogSizes["maxLg"] = "max-lg";
        ThyDialogSizes["md"] = "md";
        ThyDialogSizes["sm"] = "sm";
        ThyDialogSizes["full"] = "full";
    })(exports.ThyDialogSizes || (exports.ThyDialogSizes = {}));
    /**
     * Configuration for opening a modal dialog with the ThyDialog service.
     */
    var ThyDialogConfig = /** @class */ (function (_super) {
        __extends(ThyDialogConfig, _super);
        function ThyDialogConfig() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            /** The ARIA role of the dialog element. */
            _this.role = 'dialog';
            return _this;
        }
        return ThyDialogConfig;
    }(i3.ThyAbstractOverlayConfig));
    /** Injection token that can be used to specify default dialog options. */
    var THY_DIALOG_DEFAULT_OPTIONS = new i0.InjectionToken('thy-dialog-default-options');
    var ɵ0 = {
        role: 'dialog',
        hasBackdrop: true,
        backdropClass: '',
        panelClass: '',
        backdropClosable: true,
        closeOnNavigation: true,
        autoFocus: true,
        restoreFocus: true
    };
    var THY_DIALOG_DEFAULT_OPTIONS_PROVIDER = {
        provide: THY_DIALOG_DEFAULT_OPTIONS,
        useValue: ɵ0
    };
    var ThyDialogLayoutConfig = /** @class */ (function () {
        function ThyDialogLayoutConfig() {
        }
        return ThyDialogLayoutConfig;
    }());
    var THY_DIALOG_LAYOUT_CONFIG = new i0.InjectionToken('thy-dialog-layout-config');
    var ɵ1 = {
        footerAlign: 'left',
        footerDivided: false
    };
    var THY_DIALOG_LAYOUT_CONFIG_PROVIDER = {
        provide: THY_DIALOG_LAYOUT_CONFIG,
        useValue: ɵ1
    };

    var animationBody = [
        // Note: The `enter` animation transitions to `transform: none`, because for some reason
        // specifying the transform explicitly, causes IE both to blur the dialog content and
        // decimate the animation performance. Leaving it as `none` solves both issues. translate(-300px,-100px)
        animations.state('void, exit', animations.style({ opacity: 0, transform: 'scale(0.1)' })),
        animations.state('enter', animations.style({ transform: 'none' })),
        animations.transition('* => enter', animations.animate('200ms cubic-bezier(0, 0, 0.57, 1)', animations.style({ transform: 'none', opacity: 1 }))),
        animations.transition('* => exit', animations.animate('150ms cubic-bezier(0.24, 0.18, 0.96, 0.52)', animations.style({ transform: 'scale(0.3)', opacity: 0 })))
    ];
    /**
     * Animations used by MatDialog.
     * @docs-private
     */
    var thyDialogAnimations = {
        dialogContainer: animations.trigger('dialogContainer', animationBody)
    };
    // export const setAnimationStart

    var dialogUpperOverlayOptions = {
        name: 'dialog',
        animationEnabled: true,
        disposeWhenClose: true
    };

    var ThyDialogContainerComponent = /** @class */ (function (_super) {
        __extends(ThyDialogContainerComponent, _super);
        function ThyDialogContainerComponent(elementRef, document, config, changeDetectorRef, clickPositioner, focusTrapFactory) {
            var _this = _super.call(this, dialogUpperOverlayOptions, changeDetectorRef) || this;
            _this.elementRef = elementRef;
            _this.document = document;
            _this.config = config;
            _this.clickPositioner = clickPositioner;
            _this.focusTrapFactory = focusTrapFactory;
            /** State of the dialog animation. */
            _this.animationState = 'void';
            /** Emits when an animation state changes. */
            _this.animationStateChanged = new i0.EventEmitter();
            /** ID of the element that should be considered as the dialog's label. */
            _this.ariaLabelledBy = null;
            /** Element that was focused before the dialog was opened. Save this to restore upon close. */
            _this.elementFocusedBeforeDialogWasOpened = null;
            _this.animationOpeningDone = _this.animationStateChanged.pipe(operators.filter(function (event) {
                return event.phaseName === 'done' && event.toState === 'void';
            }));
            _this.animationClosingDone = _this.animationStateChanged.pipe(operators.filter(function (event) {
                return event.phaseName === 'done' && event.toState === 'exit';
            }));
            return _this;
        }
        ThyDialogContainerComponent.prototype.savePreviouslyFocusedElement = function () {
            var _this = this;
            if (this.document) {
                this.elementFocusedBeforeDialogWasOpened = this.document.activeElement;
                // Note that there is no focus method when rendering on the server.
                if (this.elementRef.nativeElement.focus) {
                    // Move focus onto the dialog immediately in order to prevent the user from accidentally
                    // opening multiple dialogs at the same time. Needs to be async, because the element
                    // may not be focusable immediately.
                    Promise.resolve().then(function () { return _this.elementRef.nativeElement.focus(); });
                }
            }
        };
        /** Moves the focus inside the focus trap. */
        ThyDialogContainerComponent.prototype.trapFocus = function () {
            var element = this.elementRef.nativeElement;
            if (!this.focusTrap) {
                this.focusTrap = this.focusTrapFactory.create(element);
            }
            // If we were to attempt to focus immediately, then the content of the dialog would not yet be
            // ready in instances where change detection has to run first. To deal with this, we simply
            // wait for the microtask queue to be empty.
            if (this.config.autoFocus) {
                this.focusTrap.focusInitialElementWhenReady();
            }
            else {
                var activeElement = this.document.activeElement;
                // Otherwise ensure that focus is on the dialog container. It's possible that a different
                // component tried to move focus while the open animation was running. See:
                // https://github.com/angular/components/issues/16215. Note that we only want to do this
                // if the focus isn't inside the dialog already, because it's possible that the consumer
                // turned off `autoFocus` in order to move focus themselves.
                if (activeElement !== element && !element.contains(activeElement)) {
                    element.focus();
                }
            }
        };
        ThyDialogContainerComponent.prototype.restoreFocus = function () {
            var toFocus = this.elementFocusedBeforeDialogWasOpened;
            // We need the extra check, because IE can set the `activeElement` to null in some cases.
            if (this.config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {
                toFocus.focus();
            }
            if (this.focusTrap) {
                this.focusTrap.destroy();
            }
        };
        ThyDialogContainerComponent.prototype.setTransformOrigin = function () {
            var _this = this;
            this.clickPositioner.runTaskUseLastPosition(function (lastPosition) {
                if (lastPosition) {
                    var containerElement = _this.elementRef.nativeElement;
                    var transformOrigin = lastPosition.x - containerElement.offsetLeft + "px " + (lastPosition.y -
                        containerElement.offsetTop) + "px 0px";
                    containerElement.style['transform-origin'] = transformOrigin;
                    // 手动修改动画状态为从 void 到 enter, 开启动画
                }
                _this.animationState = 'enter';
            });
        };
        ThyDialogContainerComponent.prototype.beforeAttachPortal = function () {
            this.setTransformOrigin();
            this.savePreviouslyFocusedElement();
        };
        /** Callback, invoked whenever an animation on the host completes. */
        ThyDialogContainerComponent.prototype.onAnimationDone = function (event) {
            if (event.toState === 'void') {
                this.trapFocus();
            }
            else if (event.toState === 'exit') {
                this.restoreFocus();
            }
            this.animationStateChanged.emit(event);
        };
        /** Callback, invoked when an animation on the host starts. */
        ThyDialogContainerComponent.prototype.onAnimationStart = function (event) {
            this.animationStateChanged.emit(event);
        };
        ThyDialogContainerComponent.prototype.ngOnDestroy = function () {
            _super.prototype.destroy.call(this);
        };
ThyDialogContainerComponent.ɵfac = function ThyDialogContainerComponent_Factory(t) { return new (t || ThyDialogContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(common.DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ThyDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyClickPositioner), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory)); };
ThyDialogContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyDialogContainerComponent, selectors: [["thy-dialog-container"]], viewQuery: function ThyDialogContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(portal.CdkPortalOutlet, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.portalOutlet = _t.first);
    } }, hostAttrs: ["tabindex", "-1", "aria-modal", "true", 1, "thy-dialog-container"], hostVars: 6, hostBindings: function ThyDialogContainerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵsyntheticHostListener("@dialogContainer.start", function ThyDialogContainerComponent_animation_dialogContainer_start_HostBindingHandler($event) { return ctx.onAnimationStart($event); })("@dialogContainer.done", function ThyDialogContainerComponent_animation_dialogContainer_done_HostBindingHandler($event) { return ctx.onAnimationDone($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id)("role", ctx.config.role)("aria-labelledby", ctx.config.ariaLabel ? null : ctx.ariaLabelledBy)("aria-label", ctx.config.ariaLabel)("aria-describedby", ctx.config.ariaDescribedBy || null);
        ɵngcc0.ɵɵsyntheticHostProperty("@dialogContainer", ctx.animationState);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkPortalOutlet", ""]], template: function ThyDialogContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ThyDialogContainerComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
    } }, directives: [ɵngcc3.CdkPortalOutlet], encapsulation: 2, data: { animation: [thyDialogAnimations.dialogContainer] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDialogContainerComponent, [{
        type: i0.Component,
        args: [{
                selector: 'thy-dialog-container',
                template: "\n        <ng-template cdkPortalOutlet></ng-template>\n    ",
                // Using OnPush for dialogs caused some sync issues, e.g. custom ngModel can't to detect changes
                // Disabled until we can track them down.
                changeDetection: i0.ChangeDetectionStrategy.Default,
                animations: [thyDialogAnimations.dialogContainer],
                host: {
                    class: 'thy-dialog-container',
                    tabindex: '-1',
                    'aria-modal': 'true',
                    '[attr.id]': 'id',
                    '[attr.role]': 'config.role',
                    '[attr.aria-labelledby]': 'config.ariaLabel ? null : ariaLabelledBy',
                    '[attr.aria-label]': 'config.ariaLabel',
                    '[attr.aria-describedby]': 'config.ariaDescribedBy || null',
                    '[@dialogContainer]': 'animationState',
                    '(@dialogContainer.start)': 'onAnimationStart($event)',
                    '(@dialogContainer.done)': 'onAnimationDone($event)'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [common.DOCUMENT]
            }] }, { type: ThyDialogConfig }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ThyClickPositioner }, { type: ɵngcc2.FocusTrapFactory }]; }, { portalOutlet: [{
            type: i0.ViewChild,
            args: [portal.CdkPortalOutlet, { static: true }]
        }], id: [{
            type: i0.HostBinding,
            args: ["attr.id"]
        }] }); })();
        return ThyDialogContainerComponent;
    }(i3.ThyAbstractOverlayContainer));
    ThyDialogContainerComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [common.DOCUMENT,] }] },
        { type: ThyDialogConfig },
        { type: i0.ChangeDetectorRef },
        { type: i3.ThyClickPositioner },
        { type: a11y.FocusTrapFactory }
    ]; };
    ThyDialogContainerComponent.propDecorators = {
        portalOutlet: [{ type: i0.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }],
        id: [{ type: i0.HostBinding, args: ["attr.id",] }]
    };

    var ThyDialogRef = /** @class */ (function (_super) {
        __extends(ThyDialogRef, _super);
        function ThyDialogRef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ThyDialogRef;
    }(i3.ThyAbstractOverlayRef));
    var ThyInternalDialogRef = /** @class */ (function (_super) {
        __extends(ThyInternalDialogRef, _super);
        function ThyInternalDialogRef(overlayRef, containerInstance, config) {
            return _super.call(this, dialogUpperOverlayOptions, overlayRef, containerInstance, config) || this;
        }
        /**
         * Updates the dialog's position.
         * @param position New dialog position.
         */
        ThyInternalDialogRef.prototype.updatePosition = function (position) {
            this.updateGlobalPosition(position);
            return this;
        };
        /**
         * Updates the dialog's width and height.
         * @param width New width of the dialog.
         * @param height New height of the dialog.
         */
        ThyInternalDialogRef.prototype.updateSizeAndPosition = function (width, height, position) {
            if (width === void 0) { width = ''; }
            if (height === void 0) { height = ''; }
            this.getPositionStrategy().width(width).height(height);
            this.updatePosition(position);
            return this;
        };
        return ThyInternalDialogRef;
    }(i3.ThyAbstractInternalOverlayRef));

    var THY_CONFIRM_DEFAULT_OPTIONS = new i0.InjectionToken('thy-confirm-default-options');
    var THY_CONFIRM_DEFAULT_OPTIONS_VALUE = {
        title: '确认删除',
        okText: '确认',
        okType: 'danger',
        cancelText: '取消',
        footerAlign: 'left'
    };
    var THY_CONFIRM_DEFAULT_OPTIONS_PROVIDER = {
        provide: THY_CONFIRM_DEFAULT_OPTIONS,
        useValue: THY_CONFIRM_DEFAULT_OPTIONS_VALUE
    };

    var ThyConfirmComponent = /** @class */ (function () {
        function ThyConfirmComponent(dialogRef, changeDetectorRef, defaultConfig) {
            this.dialogRef = dialogRef;
            this.changeDetectorRef = changeDetectorRef;
            this.defaultConfig = defaultConfig;
            this.defaultConfig = Object.assign(Object.assign({}, THY_CONFIRM_DEFAULT_OPTIONS_VALUE), this.defaultConfig);
        }
        ThyConfirmComponent.prototype.ngOnInit = function () {
            this.defaultConfig = Object.assign(Object.assign({}, this.defaultConfig), this.options);
            this.title = this.defaultConfig.title;
            this.content = this.defaultConfig.content;
            this.okText = this.defaultConfig.okText;
            this.okType = this.defaultConfig.okType;
            this.cancelText = this.defaultConfig.cancelText;
            this.okLoadingText = this.defaultConfig.okLoadingText || this.okText;
            this.footerAlign = this.defaultConfig.footerAlign;
        };
        ThyConfirmComponent.prototype.confirm = function () {
            var _this = this;
            this.loading = true;
            var result = this.options.onOk();
            if (result && result.subscribe) {
                result
                    .pipe(operators.finalize(function () {
                    _this.loading = false;
                    _this.changeDetectorRef.markForCheck();
                }))
                    .subscribe(function (success) {
                    if (success) {
                        _this.close();
                    }
                });
            }
            else {
                this.close();
            }
        };
        ThyConfirmComponent.prototype.close = function () {
            this.dialogRef.close();
        };
        ThyConfirmComponent.prototype.ngOnDestroy = function () { };
ThyConfirmComponent.ɵfac = function ThyConfirmComponent_Factory(t) { return new (t || ThyConfirmComponent)(ɵngcc0.ɵɵdirectiveInject(ThyDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(THY_CONFIRM_DEFAULT_OPTIONS)); };
ThyConfirmComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyConfirmComponent, selectors: [["thy-confirm-default"]], inputs: { options: "options" }, decls: 11, vars: 9, consts: [[3, "thyTitle", "thyOnClose"], [1, "thy-form"], ["thyForm", "", "name", "thyConfirm", "thyLayout", "vertical"], [1, "form-group"], [3, "innerHTML"], [3, "thyAlign"], [1, "thy-confirm-footer", 3, "ngClass"], [3, "thyButton", "thyLoading", "thyLoadingText", "click"], ["thyButton", "link-secondary", 1, "thy-confirm-cancel", 3, "click"]], template: function ThyConfirmComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "thy-dialog-header", 0);
        ɵngcc0.ɵɵlistener("thyOnClose", function ThyConfirmComponent_Template_thy_dialog_header_thyOnClose_0_listener() { return ctx.close(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "thy-dialog-body", 1);
        ɵngcc0.ɵɵelementStart(2, "form", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelement(4, "p", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "thy-form-group-footer", 5);
        ɵngcc0.ɵɵelementStart(6, "div", 6);
        ɵngcc0.ɵɵelementStart(7, "button", 7);
        ɵngcc0.ɵɵlistener("click", function ThyConfirmComponent_Template_button_click_7_listener() { return ctx.confirm(); });
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "button", 8);
        ɵngcc0.ɵɵlistener("click", function ThyConfirmComponent_Template_button_click_9_listener() { return ctx.close(); });
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("thyTitle", ctx.title || "Install Angular");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.content, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("thyAlign", ctx.footerAlign);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", "thy-confirm-footer-" + ctx.footerAlign);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("thyButton", ctx.okType)("thyLoading", ctx.loading)("thyLoadingText", ctx.okLoadingText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.okText);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.cancelText);
    } }, directives: function () { return [DialogHeaderComponent, DialogBodyComponent, ɵngcc4.ɵangular_packages_forms_forms_y, ɵngcc4.NgControlStatusGroup, ɵngcc4.NgForm, ɵngcc5.ThyFormDirective, ɵngcc5.ThyFormGroupFooterComponent, ɵngcc6.NgClass, ɵngcc7.ThyButtonComponent]; }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyConfirmComponent, [{
        type: i0.Component,
        args: [{
                selector: 'thy-confirm-default',
                template: "<thy-dialog-header [thyTitle]=\"title || 'Install Angular'\" (thyOnClose)=\"close()\"> </thy-dialog-header>\n<thy-dialog-body class=\"thy-form\">\n  <form thyForm name=\"thyConfirm\" thyLayout=\"vertical\">\n    <div class=\"form-group\">\n      <p [innerHTML]=\"content\"></p>\n    </div>\n    <thy-form-group-footer [thyAlign]=\"footerAlign\">\n      <div class=\"thy-confirm-footer\" [ngClass]=\"'thy-confirm-footer-' + footerAlign\">\n        <button [thyButton]=\"okType\" (click)=\"confirm()\" [thyLoading]=\"loading\" [thyLoadingText]=\"okLoadingText\">{{ okText }}</button>\n        <button thyButton=\"link-secondary\" (click)=\"close()\" class=\"thy-confirm-cancel\">{{ cancelText }}</button>\n      </div>\n    </thy-form-group-footer>\n  </form>\n</thy-dialog-body>\n",
                changeDetection: i0.ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ThyDialogRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [THY_CONFIRM_DEFAULT_OPTIONS]
            }] }]; }, { options: [{
            type: i0.Input
        }] }); })();
        return ThyConfirmComponent;
    }());
    ThyConfirmComponent.ctorParameters = function () { return [
        { type: ThyDialogRef },
        { type: i0.ChangeDetectorRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [THY_CONFIRM_DEFAULT_OPTIONS,] }] }
    ]; };
    ThyConfirmComponent.propDecorators = {
        options: [{ type: i0.Input }]
    };

    var ThyDialog = /** @class */ (function (_super) {
        __extends(ThyDialog, _super);
        function ThyDialog(overlay, injector, defaultConfig, clickPositioner) {
            var _this = _super.call(this, dialogUpperOverlayOptions, overlay, injector, defaultConfig) || this;
            clickPositioner.initialize();
            return _this;
        }
        ThyDialog.prototype.buildOverlayConfig = function (config) {
            var size = config.size || exports.ThyDialogSizes.md;
            var overlayConfig = this.buildBaseOverlayConfig(config, ["dialog-" + size]);
            overlayConfig.positionStrategy = this.overlay.position().global();
            overlayConfig.scrollStrategy = config.scrollStrategy || this.overlay.scrollStrategies.block();
            return overlayConfig;
        };
        ThyDialog.prototype.attachUpperOverlayContainer = function (overlay, config) {
            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
            var injector = i0.Injector.create({
                parent: userInjector || this.injector,
                providers: [{ provide: ThyDialogConfig, useValue: config }]
            });
            var containerPortal = new portal.ComponentPortal(ThyDialogContainerComponent, config.viewContainerRef, injector);
            var containerRef = overlay.attach(containerPortal);
            return containerRef.instance;
        };
        ThyDialog.prototype.createUpperOverlayRef = function (overlayRef, containerInstance, config) {
            return new ThyInternalDialogRef(overlayRef, containerInstance, config);
        };
        ThyDialog.prototype.createInjector = function (config, dialogRef, dialogContainer) {
            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
            var injectionTokens = [
                { provide: ThyDialogContainerComponent, useValue: dialogContainer },
                {
                    provide: ThyDialogRef,
                    useValue: dialogRef
                }
            ];
            if (config.direction && (!userInjector || !userInjector.get(bidi.Directionality, null))) {
                injectionTokens.push({
                    provide: bidi.Directionality,
                    useValue: {
                        value: config.direction,
                        change: rxjs.of()
                    }
                });
            }
            return i0.Injector.create({ parent: userInjector || this.injector, providers: injectionTokens });
        };
        ThyDialog.prototype.open = function (componentOrTemplateRef, config) {
            var dialogRef = this.openUpperOverlay(componentOrTemplateRef, config);
            var dialogRefInternal = dialogRef;
            dialogRefInternal.updateSizeAndPosition(dialogRef.containerInstance.config.width, dialogRef.containerInstance.config.height, dialogRef.containerInstance.config.position);
            return dialogRef;
        };
        ThyDialog.prototype.confirm = function (options) {
            return this.open(ThyConfirmComponent, {
                initialState: {
                    options: options
                }
            });
        };
        ThyDialog.prototype.getDialogById = function (id) {
            return this.getUpperOverlayById(id);
        };
        /**
         * Finds the closest ThyDialogRef to an element by looking at the DOM.
         */
        ThyDialog.prototype.getClosestDialog = function (element) {
            var parent = element.parentElement;
            while (parent && !parent.classList.contains('thy-dialog-container')) {
                parent = parent.parentElement;
            }
            if (parent && parent.id) {
                return this.getDialogById(parent.id);
            }
            return null;
        };
        ThyDialog.prototype.ngOnDestroy = function () {
            this.dispose();
        };
ThyDialog.ɵfac = function ThyDialog_Factory(t) { return new (t || ThyDialog)(ɵngcc0.ɵɵinject(ɵngcc8.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(THY_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(ɵngcc1.ThyClickPositioner)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDialog, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc8.Overlay }, { type: ɵngcc0.Injector }, { type: ThyDialogConfig, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [THY_DIALOG_DEFAULT_OPTIONS]
            }] }, { type: ɵngcc1.ThyClickPositioner }]; }, null); })();
        return ThyDialog;
    }(i3.ThyAbstractOverlayService));
    ThyDialog.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ThyDialog_Factory() { return new ThyDialog(i0__namespace.ɵɵinject(i1__namespace.Overlay), i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(THY_DIALOG_DEFAULT_OPTIONS, 8), i0__namespace.ɵɵinject(i3__namespace.ThyClickPositioner)); }, token: ThyDialog, providedIn: "root" });
    ThyDialog.ctorParameters = function () { return [
        { type: i1.Overlay },
        { type: i0.Injector },
        { type: ThyDialogConfig, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [THY_DIALOG_DEFAULT_OPTIONS,] }] },
        { type: i3.ThyClickPositioner }
    ]; };

    var DialogBodyComponent = /** @class */ (function () {
        function DialogBodyComponent(dialog) {
            this.dialog = dialog;
            this._isDialogBody = true;
            this.thyClearPaddingClassName = false;
        }
        Object.defineProperty(DialogBodyComponent.prototype, "thyClearPadding", {
            set: function (value) {
                this.thyClearPaddingClassName = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        DialogBodyComponent.prototype.ngOnInit = function () { };
DialogBodyComponent.ɵfac = function DialogBodyComponent_Factory(t) { return new (t || DialogBodyComponent)(ɵngcc0.ɵɵdirectiveInject(ThyDialog)); };
DialogBodyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DialogBodyComponent, selectors: [["thy-dialog-body"]], hostVars: 4, hostBindings: function DialogBodyComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("dialog-body", ctx._isDialogBody)("dialog-body-clear-padding", ctx.thyClearPaddingClassName);
    } }, inputs: { thyClearPadding: "thyClearPadding" }, exportAs: ["thyDialogBody"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DialogBodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DialogBodyComponent, [{
        type: i0.Component,
        args: [{
                selector: 'thy-dialog-body',
                template: '<ng-content></ng-content>',
                // changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'thyDialogBody'
            }]
    }], function () { return [{ type: ThyDialog }]; }, { _isDialogBody: [{
            type: i0.HostBinding,
            args: ["class.dialog-body"]
        }], thyClearPaddingClassName: [{
            type: i0.HostBinding,
            args: ["class.dialog-body-clear-padding"]
        }], thyClearPadding: [{
            type: i0.Input
        }] }); })();
        return DialogBodyComponent;
    }());
    DialogBodyComponent.ctorParameters = function () { return [
        { type: ThyDialog }
    ]; };
    DialogBodyComponent.propDecorators = {
        _isDialogBody: [{ type: i0.HostBinding, args: ["class.dialog-body",] }],
        thyClearPaddingClassName: [{ type: i0.HostBinding, args: ["class.dialog-body-clear-padding",] }],
        thyClearPadding: [{ type: i0.Input }]
    };

    var DialogFooterComponent = /** @class */ (function () {
        function DialogFooterComponent(dialogLayoutConfig, updateHostClassService, elementRef) {
            this.dialogLayoutConfig = dialogLayoutConfig;
            this.updateHostClassService = updateHostClassService;
            this.elementRef = elementRef;
            this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
            this.divided = this.dialogLayoutConfig.footerDivided;
        }
        Object.defineProperty(DialogFooterComponent.prototype, "thyDivided", {
            set: function (value) {
                this.divided = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DialogFooterComponent.prototype, "align", {
            get: function () {
                return !!this.thyAlign ? this.thyAlign : this.dialogLayoutConfig.footerAlign;
            },
            enumerable: false,
            configurable: true
        });
        DialogFooterComponent.prototype.ngOnInit = function () {
            var _a;
            this.updateHostClassService.updateClassByMap((_a = {
                    'dialog-footer': true
                },
                _a["dialog-footer-actions-align-" + this.align] = true,
                _a['dialog-footer-border-top'] = this.divided,
                _a));
        };
DialogFooterComponent.ɵfac = function DialogFooterComponent_Factory(t) { return new (t || DialogFooterComponent)(ɵngcc0.ɵɵdirectiveInject(THY_DIALOG_LAYOUT_CONFIG), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DialogFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DialogFooterComponent, selectors: [["thy-dialog-footer"]], contentQueries: function DialogFooterComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.description = _t.first);
    } }, inputs: { thyDivided: "thyDivided", thyAlign: "thyAlign" }, exportAs: ["thyDialogFooter"], features: [ɵngcc0.ɵɵProvidersFeature([i3.UpdateHostClassService])], ngContentSelectors: _c0, decls: 3, vars: 1, consts: [[1, "dialog-footer-actions", "btn-pair"], ["class", "dialog-footer-description", 4, "ngIf"], [1, "dialog-footer-description"], [3, "ngTemplateOutlet"]], template: function DialogFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, DialogFooterComponent_div_2_Template, 2, 1, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.description);
    } }, directives: [ɵngcc6.NgIf, ɵngcc6.NgTemplateOutlet], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DialogFooterComponent, [{
        type: i0.Component,
        args: [{
                selector: 'thy-dialog-footer',
                template: "<div class=\"dialog-footer-actions btn-pair\">\n  <ng-content></ng-content>\n</div>\n<div class=\"dialog-footer-description\" *ngIf=\"description\">\n  <ng-container [ngTemplateOutlet]=\"description\"></ng-container>\n</div>\n",
                // changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'thyDialogFooter',
                providers: [i3.UpdateHostClassService]
            }]
    }], function () { return [{ type: ThyDialogLayoutConfig, decorators: [{
                type: i0.Inject,
                args: [THY_DIALOG_LAYOUT_CONFIG]
            }] }, { type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { thyDivided: [{
            type: i0.Input
        }], description: [{
            type: i0.ContentChild,
            args: ['description']
        }], thyAlign: [{
            type: i0.Input
        }] }); })();
        return DialogFooterComponent;
    }());
    DialogFooterComponent.ctorParameters = function () { return [
        { type: ThyDialogLayoutConfig, decorators: [{ type: i0.Inject, args: [THY_DIALOG_LAYOUT_CONFIG,] }] },
        { type: i3.UpdateHostClassService },
        { type: i0.ElementRef }
    ]; };
    DialogFooterComponent.propDecorators = {
        description: [{ type: i0.ContentChild, args: ['description',] }],
        thyDivided: [{ type: i0.Input }],
        thyAlign: [{ type: i0.Input }]
    };

    var DialogHeaderComponent = /** @class */ (function () {
        function DialogHeaderComponent(elementRef, dialog, translate, dialogContainer) {
            this.elementRef = elementRef;
            this.dialog = dialog;
            this.translate = translate;
            this.dialogContainer = dialogContainer;
            this.isDialogHeader = true;
            this.isDialogHeaderLg = false;
            this.thyOnClose = new i0.EventEmitter();
        }
        Object.defineProperty(DialogHeaderComponent.prototype, "thySize", {
            set: function (value) {
                this.isDialogHeaderLg = value === 'lg';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DialogHeaderComponent.prototype, "thyTitleTranslationKey", {
            set: function (key) {
                if (key && !this.thyTitle) {
                    this.thyTitle = this.translate.instant(key);
                }
            },
            enumerable: false,
            configurable: true
        });
        DialogHeaderComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.dialogContainer) {
                // When this directive is included in a dialog via TemplateRef (rather than being
                // in a Component), the ThyDialogContainerComponent isn't available via injection because embedded
                // views cannot be given a custom injector. Instead, we look up the ThyDialogContainerComponent by
                // ID. This must occur in `onInit`, as the ID binding for the dialog container won't
                // be resolved at constructor time.
                var dialogRef = this.dialog.getClosestDialog(this.elementRef.nativeElement);
                this.dialogContainer = dialogRef ? dialogRef.containerInstance : null;
            }
            // change in next microtask avoid throw ExpressionChangedAfterItHasBeenCheckedError
            // because sub component change parent's HostBinding property (ariaLabelledBy)
            Promise.resolve().then(function () {
                if (_this.dialogContainer) {
                    _this.dialogContainer.ariaLabelledBy = _this.thyTitle;
                }
            });
        };
        DialogHeaderComponent.prototype.close = function (event) {
            if (this.thyOnClose.observers.length > 0) {
                this.thyOnClose.emit(event);
            }
            else {
                this.dialog.close();
            }
        };
DialogHeaderComponent.ɵfac = function DialogHeaderComponent_Factory(t) { return new (t || DialogHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThyDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThyTranslate), ɵngcc0.ɵɵdirectiveInject(ThyDialogContainerComponent, 8)); };
DialogHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DialogHeaderComponent, selectors: [["thy-dialog-header"]], contentQueries: function DialogHeaderComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
    } }, hostVars: 4, hostBindings: function DialogHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("dialog-header", ctx.isDialogHeader)("dialog-header-lg", ctx.isDialogHeaderLg);
    } }, inputs: { thySize: "thySize", thyTitleTranslationKey: "thyTitleTranslationKey", thyTitle: "thyTitle", thyIcon: "thyIcon" }, outputs: { thyOnClose: "thyOnClose" }, exportAs: ["thyDialogHeader"], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["defaultHeader", ""], [3, "ngTemplateOutlet"], [1, "dialog-title"], [3, "thyIconName"], ["type", "button", 1, "close", 3, "click"], ["thyIconName", "close-bold"]], template: function DialogHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DialogHeaderComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, DialogHeaderComponent_ng_template_1_Template, 5, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerTemplate)("ngIfElse", _r1);
    } }, directives: [ɵngcc6.NgIf, ɵngcc6.NgTemplateOutlet, ɵngcc9.ThyIconComponent], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DialogHeaderComponent, [{
        type: i0.Component,
        args: [{
                selector: 'thy-dialog-header',
                template: "<ng-container *ngIf=\"headerTemplate; else defaultHeader\">\n  <template [ngTemplateOutlet]=\"headerTemplate\"></template>\n</ng-container>\n<ng-template #defaultHeader>\n  <h3 class=\"dialog-title\"><thy-icon [thyIconName]=\"thyIcon\"></thy-icon>{{ thyTitle }}</h3>\n  <button type=\"button\" class=\"close\" (click)=\"close($event)\">\n    <thy-icon thyIconName=\"close-bold\"></thy-icon>\n  </button>\n</ng-template>\n",
                // changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'thyDialogHeader'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ThyDialog }, { type: ɵngcc1.ThyTranslate }, { type: ThyDialogContainerComponent, decorators: [{
                type: i0.Optional
            }] }]; }, { isDialogHeader: [{
            type: i0.HostBinding,
            args: ["class.dialog-header"]
        }], isDialogHeaderLg: [{
            type: i0.HostBinding,
            args: ["class.dialog-header-lg"]
        }], thyOnClose: [{
            type: i0.Output
        }], thySize: [{
            type: i0.Input
        }], thyTitleTranslationKey: [{
            type: i0.Input
        }], headerTemplate: [{
            type: i0.ContentChild,
            args: ['dialogHeader']
        }], thyTitle: [{
            type: i0.Input
        }], thyIcon: [{
            type: i0.Input
        }] }); })();
        return DialogHeaderComponent;
    }());
    DialogHeaderComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ThyDialog },
        { type: i3.ThyTranslate },
        { type: ThyDialogContainerComponent, decorators: [{ type: i0.Optional }] }
    ]; };
    DialogHeaderComponent.propDecorators = {
        isDialogHeader: [{ type: i0.HostBinding, args: ["class.dialog-header",] }],
        isDialogHeaderLg: [{ type: i0.HostBinding, args: ["class.dialog-header-lg",] }],
        headerTemplate: [{ type: i0.ContentChild, args: ['dialogHeader',] }],
        thyTitle: [{ type: i0.Input }],
        thySize: [{ type: i0.Input }],
        thyTitleTranslationKey: [{ type: i0.Input }],
        thyIcon: [{ type: i0.Input }],
        thyOnClose: [{ type: i0.Output }]
    };

    var ThyDialogModule = /** @class */ (function () {
        function ThyDialogModule() {
        }
ThyDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyDialogModule });
ThyDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyDialogModule_Factory(t) { return new (t || ThyDialogModule)(); }, providers: [ThyDialog, THY_DIALOG_DEFAULT_OPTIONS_PROVIDER, THY_CONFIRM_DEFAULT_OPTIONS_PROVIDER, THY_DIALOG_LAYOUT_CONFIG_PROVIDER], imports: [[common.CommonModule, shared.ThySharedModule, portal.PortalModule, i1.OverlayModule, button.ThyButtonModule, icon.ThyIconModule, form.ThyFormModule, forms.FormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyDialogModule, { declarations: [ThyDialogContainerComponent, DialogHeaderComponent, DialogBodyComponent, DialogFooterComponent, ThyConfirmComponent], imports: [ɵngcc6.CommonModule, ɵngcc10.ThySharedModule, ɵngcc3.PortalModule, ɵngcc8.OverlayModule, ɵngcc7.ThyButtonModule, ɵngcc9.ThyIconModule, ɵngcc5.ThyFormModule, ɵngcc4.FormsModule], exports: [ThyDialogContainerComponent, DialogHeaderComponent, DialogBodyComponent, DialogFooterComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyDialogModule, [{
        type: i0.NgModule,
        args: [{
                declarations: [ThyDialogContainerComponent, DialogHeaderComponent, DialogBodyComponent, DialogFooterComponent, ThyConfirmComponent],
                imports: [common.CommonModule, shared.ThySharedModule, portal.PortalModule, i1.OverlayModule, button.ThyButtonModule, icon.ThyIconModule, form.ThyFormModule, forms.FormsModule],
                providers: [ThyDialog, THY_DIALOG_DEFAULT_OPTIONS_PROVIDER, THY_CONFIRM_DEFAULT_OPTIONS_PROVIDER, THY_DIALOG_LAYOUT_CONFIG_PROVIDER],
                entryComponents: [ThyDialogContainerComponent, ThyConfirmComponent],
                exports: [ThyDialogContainerComponent, DialogHeaderComponent, DialogBodyComponent, DialogFooterComponent]
            }]
    }], function () { return []; }, null); })();
        return ThyDialogModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DialogBodyComponent = DialogBodyComponent;
    exports.DialogFooterComponent = DialogFooterComponent;
    exports.DialogHeaderComponent = DialogHeaderComponent;
    exports.THY_CONFIRM_DEFAULT_OPTIONS = THY_CONFIRM_DEFAULT_OPTIONS;
    exports.THY_CONFIRM_DEFAULT_OPTIONS_PROVIDER = THY_CONFIRM_DEFAULT_OPTIONS_PROVIDER;
    exports.THY_CONFIRM_DEFAULT_OPTIONS_VALUE = THY_CONFIRM_DEFAULT_OPTIONS_VALUE;
    exports.THY_DIALOG_DEFAULT_OPTIONS = THY_DIALOG_DEFAULT_OPTIONS;
    exports.THY_DIALOG_DEFAULT_OPTIONS_PROVIDER = THY_DIALOG_DEFAULT_OPTIONS_PROVIDER;
    exports.THY_DIALOG_LAYOUT_CONFIG = THY_DIALOG_LAYOUT_CONFIG;
    exports.THY_DIALOG_LAYOUT_CONFIG_PROVIDER = THY_DIALOG_LAYOUT_CONFIG_PROVIDER;
    exports.ThyConfirmComponent$1 = ThyConfirmComponent;
    exports.ThyDialog = ThyDialog;
    exports.ThyDialogConfig = ThyDialogConfig;
    exports.ThyDialogContainerComponent = ThyDialogContainerComponent;
    exports.ThyDialogLayoutConfig = ThyDialogLayoutConfig;
    exports.ThyDialogModule = ThyDialogModule;
    exports.ThyDialogRef = ThyDialogRef;
    exports.thyDialogAnimations = thyDialogAnimations;
    exports.ɵ0 = ɵ0;
    exports.ɵ1 = ɵ1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-dialog.umd.js.map
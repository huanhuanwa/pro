!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/cdk/drag-drop"),require("ngx-tethys/button"),require("ngx-tethys/icon"),require("ngx-tethys/list"),require("ngx-tethys/shared"),require("ngx-tethys/flexible-text")):"function"==typeof define&&define.amd?define("ngx-tethys/transfer",["exports","@angular/core","@angular/common","@angular/cdk/drag-drop","ngx-tethys/button","ngx-tethys/icon","ngx-tethys/list","ngx-tethys/shared","ngx-tethys/flexible-text"],e):e(((t="undefined"!=typeof globalThis?globalThis:t||self)["ngx-tethys"]=t["ngx-tethys"]||{},t["ngx-tethys"].transfer={}),t.ng.core,t.ng.common,t.ng.cdk.dragDrop,t["ngx-tethys"].button,t["ngx-tethys"].icon,t["ngx-tethys"].list,t["ngx-tethys"].shared,t["ngx-tethys"]["flexible-text"])}(this,(function(t,e,n,i,r,a,o,s,c){"use strict";var l;t.TransferDirection=void 0,(l=t.TransferDirection||(t.TransferDirection={})).left="left",l.right="right";Object.create;function h(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,r,a=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(i=a.next()).done;)o.push(i.value)}catch(t){r={error:t}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}return o}function f(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(h(arguments[e]));return t}Object.create;var p=function(){function n(){this.hostClass="thy-transfer",this.leftDataSource=[],this.rightDataSource=[],this.allDataSource=[],this.rightDraggable=!1,this._autoMove=!0,this.thyDraggableUpdate=new e.EventEmitter,this.thyChange=new e.EventEmitter}return Object.defineProperty(n.prototype,"thyData",{set:function(t){t&&this.initializeTransferData(t)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"thyTitles",{set:function(t){this.leftTitle=t[0]||"",this.rightTitle=t[1]||""},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"thyAutoMove",{set:function(t){this._autoMove=t},enumerable:!1,configurable:!0}),n.prototype.ngOnInit=function(){},n.prototype.initializeTransferData=function(e){var n=this;void 0===e&&(e=[]),this.allDataSource=[],this.leftDataSource=[],this.rightDataSource=[],e.forEach((function(e){n.allDataSource.push(e),e.direction===t.TransferDirection.left&&n.leftDataSource.push(e),e.direction===t.TransferDirection.right&&n.rightDataSource.push(e)}))},n.prototype.onSelect=function(e,n){if(!n.item.isFixed){var i=e===t.TransferDirection.left?t.TransferDirection.right:t.TransferDirection.left;n.item.checked=!n.item.checked,this._autoMove&&this.onMove(i)}},n.prototype.selectItem=function(e){this.onSelect(t.TransferDirection.left,e)},n.prototype.unselectItem=function(e){this.onSelect(t.TransferDirection.right,e)},n.prototype.groupListByIsLock=function(t){void 0===t&&(t=[]);var e=[],n=[];return t.forEach((function(t){t.isLock?e.push(t):n.push(t)})),{lock:e,unlock:n}},n.prototype.onMove=function(e){var n=e===t.TransferDirection.right?this.leftDataSource:this.rightDataSource,i=e===t.TransferDirection.right?this.rightDataSource:this.leftDataSource,r=n.filter((function(t){return t.checked})),a={from:e===t.TransferDirection.right?t.TransferDirection.left:t.TransferDirection.right,to:e,items:f(r)};r.forEach((function(t){var r=n.indexOf(t),a=n.splice(r,1)[0];a.checked=!a.checked,a.direction=e,i.push(a)})),this.thyChange.emit(Object.assign(Object.assign({},a),{left:this.groupListByIsLock(this.leftDataSource),right:this.groupListByIsLock(this.rightDataSource)}))},n.prototype.onDragUpdate=function(e,n){var i=e===t.TransferDirection.left?this.rightDataSource:this.leftDataSource,r=this.groupListByIsLock(i);this.thyDraggableUpdate.emit(Object.assign(Object.assign({},n.dragEvent),{left:e===t.TransferDirection.left?n.listData:r,right:e===t.TransferDirection.right?n.listData:r}))},n}();p.decorators=[{type:e.Component,args:[{selector:"thy-transfer",template:'<thy-transfer-list\n  [items]="allDataSource"\n  [title]="leftTitle"\n  [draggable]="thyLeftDraggable"\n  [renderContentRef]="leftContentRef"\n  (draggableUpdate)="onDragUpdate(\'left\', $event)"\n  [template]="leftTemplateRef"\n  (selectItem)="selectItem($event)"\n  (unselectItem)="unselectItem($event)"\n>\n  <ng-template #leftTemplateRef let-item>\n    <div (click)="onSelect(item.direction === \'left\' ? \'left\' : \'right\', { item: item })" class="list-item-content">\n      <ng-container *ngIf="thyLeftDraggable">\n        <thy-icon thyIconName="drag" class="drag-handle"></thy-icon>\n      </ng-container>\n      <div class="item-name" [ngClass]="{ \'un-select-item\': item.direction !== \'right\' }">\n        <ng-template [ngTemplateOutlet]="thyTransferListItem" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>\n      </div>\n      <thy-icon *ngIf="item.direction === \'right\'" class="text-primary item-status" thyIconName="check"></thy-icon>\n    </div>\n  </ng-template>\n</thy-transfer-list>\n\n<div class="thy-transfer-operation">\n  <div class="thy-transfer-operation-body">\n    <thy-icon thyIconName="angle-right" class="operation-link"></thy-icon>\n    <br />\n    <thy-icon thyIconName="angle-left" class="operation-link"></thy-icon>\n  </div>\n</div>\n\n<thy-transfer-list\n  [items]="rightDataSource"\n  [title]="rightTitle"\n  [draggable]="thyRightDraggable"\n  (draggableUpdate)="onDragUpdate(\'right\', $event)"\n  [canLock]="thyRightCanLock"\n  [maxLock]="thyRightLockMax"\n  [template]="rightTemplateRef"\n  [renderContentRef]="rightContentRef"\n  (selectItem)="selectItem($event)"\n  (unselectItem)="unselectItem($event)"\n>\n  <ng-template #rightTemplateRef let-item>\n    <ng-container *ngIf="thyRightDraggable">\n      <thy-icon thyIconName="drag" class="drag-handle"></thy-icon>\n    </ng-container>\n    <div class="item-name">\n      <ng-template [ngTemplateOutlet]="thyTransferListItem" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>\n    </div>\n    <a class="link-secondary" *ngIf="item.direction === \'right\' && !item.isFixed" (click)="onSelect(\'right\', { item: item })">\n      <thy-icon class="item-status" thyIconName="close"></thy-icon>\n    </a>\n  </ng-template>\n</thy-transfer-list>\n\n<ng-template #thyTransferListItem let-item>\n  <ng-template *ngIf="templateRef" [ngTemplateOutlet]="templateRef" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>\n  <ng-container *ngIf="!templateRef">\n    <thy-flexible-text [thyTooltipContent]="item.title">\n      {{ item.title }}\n    </thy-flexible-text>\n  </ng-container>\n</ng-template>\n',encapsulation:e.ViewEncapsulation.None}]}],p.propDecorators={hostClass:[{type:e.HostBinding,args:["class"]}],thyData:[{type:e.Input}],thyrenderLeftTemplateRef:[{type:e.Input}],thyrenderRightTemplateRef:[{type:e.Input}],thyTitles:[{type:e.Input}],thyRightCanLock:[{type:e.Input}],thyRightLockMax:[{type:e.Input}],thyAutoMove:[{type:e.Input}],thyLeftDraggable:[{type:e.Input}],thyRightDraggable:[{type:e.Input}],thyDraggableUpdate:[{type:e.Output}],thyChange:[{type:e.Output}],templateRef:[{type:e.ContentChild,args:["renderTemplate"]}],leftContentRef:[{type:e.ContentChild,args:["renderLeftTemplate"]}],rightContentRef:[{type:e.ContentChild,args:["renderRightTemplate"]}]};var g=function(){function t(t,n){var i=this;this.root=t,this.differs=n,this.lockItems=[],this.unlockItems=[],this.draggableUpdate=new e.EventEmitter,this.selectItem=new e.EventEmitter,this.unselectItem=new e.EventEmitter,this.hostClass="thy-transfer-list",this.lockListEnterPredicate=function(){return i.lockItems.length<i.maxLock},this.onSelectItem=function(t){i.selectItem.emit({item:t})},this.onUnselectItem=function(t){i.unselectItem.emit({item:t})}}return t.prototype.ngOnInit=function(){this._combineTransferData(),this.canLock?(this._lockDiff=this.differs.find(this.lockItems).create(),this._unlockDiff=this.differs.find(this.unlockItems).create()):this._unlockDiff=this.differs.find(this.unlockItems).create(),this._diff=this.differs.find(this.items).create()},t.prototype._combineTransferData=function(){var t=this;this.lockItems=[],this.unlockItems=[],this.canLock?(this.items||[]).forEach((function(e){e.isLock?t.lockItems.push(e):t.unlockItems.push(e)})):this.unlockItems=this.items},t.prototype._afterChangeItems=function(t,e){t.forEachAddedItem((function(t){t.item.order=t.currentIndex})),t.forEachRemovedItem((function(){e.forEach((function(t,e){t.order=e}))})),t.forEachMovedItem((function(){e.forEach((function(t,e){t.order=e}))}))},t.prototype.ngDoCheck=function(){var t=this._diff.diff(this.items);if(t&&(this._afterChangeItems(t,this.items),this._combineTransferData()),this._lockDiff){var e=this._lockDiff.diff(this.lockItems);e&&this._afterChangeItems(e,this.lockItems)}var n=this._unlockDiff.diff(this.unlockItems);n&&this._afterChangeItems(n,this.unlockItems)},t.prototype.drop=function(t){t.previousContainer===t.container?i.moveItemInArray(t.container.data,t.previousIndex,t.currentIndex):(i.transferArrayItem(t.previousContainer.data,t.container.data,t.previousIndex,t.currentIndex),(t.previousContainer.data||[]).forEach((function(e){e.isLock="lock"===t.previousContainer.id})),(t.container.data||[]).forEach((function(e){e.isLock="lock"===t.container.id})));var e={model:t.item.data,models:t.container.data,oldIndex:t.previousIndex,newIndex:t.currentIndex};this.draggableUpdate.emit({dragEvent:e,listData:{lock:this.lockItems,unlock:this.unlockItems}})},t}();g.decorators=[{type:e.Component,args:[{selector:"thy-transfer-list",template:'<div class="thy-transfer-list-header">\n  <span class="thy-transfer-list-header-title">{{ title }} · {{ items?.length }}</span>\n</div>\n<ng-container *ngIf="!contentRef; else renderContent">\n  <div class="thy-transfer-list-body" cdkDropListGroup [cdkDropListGroupDisabled]="!draggable">\n    <ng-container *ngIf="canLock">\n      <div class="thy-transfer-list-group-name">锁定 (上限{{ maxLock }}个)</div>\n      <thy-list\n        class="thy-transfer-list-content"\n        cdkDropList\n        thyDragDrop\n        id="lock"\n        [cdkDropListData]="lockItems"\n        (cdkDropListDropped)="drop($event)"\n        [cdkDropListEnterPredicate]="lockListEnterPredicate"\n      >\n        <div class="cdk-drop-list-empty" *ngIf="lockItems.length === 0"></div>\n        <thy-list-item\n          class="thy-transfer-list-content-item text-truncate"\n          cdkDrag\n          [cdkDragData]="item"\n          *ngFor="let item of lockItems"\n          [ngClass]="{ active: item.checked }"\n        >\n          <ng-template [ngTemplateOutlet]="template" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>\n        </thy-list-item>\n      </thy-list>\n\n      <div class="thy-transfer-list-group-name">未锁定</div>\n    </ng-container>\n    <thy-list\n      class="thy-transfer-list-content"\n      cdkDropList\n      thyDragDrop\n      [cdkDropListDisabled]="!draggable"\n      id="unlock"\n      [cdkDropListData]="unlockItems"\n      (cdkDropListDropped)="drop($event)"\n    >\n      <div class="cdk-drop-list-empty" *ngIf="unlockItems.length === 0"></div>\n      <thy-list-item\n        class="thy-transfer-list-content-item text-truncate"\n        cdkDrag\n        [cdkDragData]="item"\n        *ngFor="let item of unlockItems"\n        [ngClass]="{ active: item.checked }"\n      >\n        <ng-template [ngTemplateOutlet]="template" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>\n      </thy-list-item>\n    </thy-list>\n  </div>\n</ng-container>\n\n<ng-template #renderContent>\n  <div class="thy-transfer-list-body">\n    <ng-container\n      *ngTemplateOutlet="\n        contentRef;\n        context: {\n          $implicit: items,\n          onSelectItem: onSelectItem,\n          onUnselectItem: onUnselectItem\n        }\n      "\n    ></ng-container>\n  </div>\n</ng-template>\n',encapsulation:e.ViewEncapsulation.None}]}],g.ctorParameters=function(){return[{type:p},{type:e.IterableDiffers}]},g.propDecorators={title:[{type:e.Input}],items:[{type:e.Input}],draggable:[{type:e.Input}],canLock:[{type:e.Input}],maxLock:[{type:e.Input}],template:[{type:e.Input}],contentRef:[{type:e.Input,args:["renderContentRef"]}],draggableUpdate:[{type:e.Output}],selectItem:[{type:e.Output}],unselectItem:[{type:e.Output}],hostClass:[{type:e.HostBinding,args:["class"]}]};var m=function(){};m.decorators=[{type:e.NgModule,args:[{declarations:[p,g],imports:[n.CommonModule,r.ThyButtonModule,i.DragDropModule,a.ThyIconModule,o.ThyListModule,s.ThySharedModule,c.ThyFlexibleTextModule],exports:[p]}]}],t.ThyTransferComponent=p,t.ThyTransferListComponent=g,t.ThyTransferModule=m,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-tethys-transfer.umd.min.js.map
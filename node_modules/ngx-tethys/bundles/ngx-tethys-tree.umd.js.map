{"version":3,"file":"ngx-tethys-tree.umd.js","sources":["../../src/tree/tree.class.ts","../../src/tree/tree.service.ts","../../src/tree/tree-node.class.ts","../../src/tree/tree.component.ts","../../src/tree/tree-node.component.ts","../../src/tree/tree-replace-region.component.ts","../../src/tree/tree.module.ts","../../src/tree/ngx-tethys-tree.ts"],"names":["ThyTreeNodeCheckState","Subject","coerceArray","Injectable","helpers","EventEmitter","ThyDropPosition","SelectionModel","Component","ViewEncapsulation","NG_VALUE_ACCESSOR","forwardRef","UpdateHostClassService","ElementRef","Input","HostBinding","Output","ContentChild","filter","takeUntil","NgZone","ChangeDetectorRef","ViewChild","ViewContainerRef","NgModule","CommonModule","ThyInputModule","ThyButtonModule","ThySharedModule","FormsModule","ThyListModule","ThyOptionModule","ThyLoadingModule","ThyIconModule","ThyDragDropModule","ThyCheckboxModule"],"mappings":"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","sourcesContent":["import { ThyDragDropEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\n\nexport enum ThyTreeNodeCheckState {\n    unchecked = 0,\n    checked = 1,\n    indeterminate = 2\n}\n\nexport interface ThyTreeNodeData<T = any> {\n    key?: number | string;\n\n    title?: string;\n\n    icon?: string;\n\n    iconStyle?: {\n        [key: string]: any;\n    };\n\n    children?: ThyTreeNodeData<T>[];\n\n    origin?: any;\n\n    expanded?: boolean;\n\n    disabled?: boolean;\n\n    checked?: boolean;\n\n    data?: T;\n\n    [key: string]: any;\n}\n\nexport interface ThyTreeEmitEvent<T = any> {\n    eventName: string;\n\n    node?: ThyTreeNode<T>;\n\n    event?: Event | any;\n\n    dragNode?: ThyTreeNode<T>;\n\n    targetNode?: ThyTreeNode<T>;\n}\n\nexport interface ThyTreeDragDropEvent<T = any> {\n    event?: ThyDragDropEvent;\n\n    currentIndex?: number;\n\n    dragNode?: ThyTreeNode<T>;\n\n    targetNode?: ThyTreeNode<T>;\n\n    afterNode?: ThyTreeNode<T>;\n}\n\nexport class ThyTreeIcons {\n    expand?: string;\n\n    collapse?: string;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { ThyTreeNodeCheckState } from './tree.class';\nimport { Subject } from 'rxjs';\nimport { ThyTreeNode } from './tree-node.class';\nimport { coerceArray } from 'ngx-tethys/util';\n\nfunction checkStateResolve(node: ThyTreeNode) {\n    const checkedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);\n    const unCheckedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.unchecked);\n    if (checkedNodes.length === node.children.length) {\n        return ThyTreeNodeCheckState.checked;\n    } else if (unCheckedNodes.length === node.children.length) {\n        return ThyTreeNodeCheckState.unchecked;\n    } else {\n        return ThyTreeNodeCheckState.indeterminate;\n    }\n}\n\n@Injectable()\nexport class ThyTreeService implements OnDestroy {\n    public treeNodes: ThyTreeNode[];\n\n    private checkStateResolve: (node: ThyTreeNode) => ThyTreeNodeCheckState = checkStateResolve;\n\n    $statusChange = new Subject<ThyTreeFormatEmitEvent>();\n\n    constructor() {}\n\n    private _getParallelTreeNodes(nodes: ThyTreeNode[], list: ThyTreeNode[] = []) {\n        (nodes || []).forEach(node => {\n            list.push(node);\n            this._getParallelTreeNodes(node.children || [], list);\n        });\n        return list;\n    }\n\n    setCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState = checkStateResolve) {\n        this.checkStateResolve = resolve;\n    }\n\n    public resetSortedTreeNodes(treeNodes: ThyTreeNode[], parent?: ThyTreeNode) {\n        treeNodes.forEach(node => {\n            node.level = node.parentNode ? node.parentNode.level + 1 : 0;\n            node.origin.children = node.children.map(n => n.origin);\n            node.parentNode = parent;\n            this.resetSortedTreeNodes(node.children, node);\n        });\n    }\n\n    public getTreeNode(key: string | number) {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.find(n => n.key === key);\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isExpanded);\n    }\n\n    public getCheckedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        const children = node.parentNode ? node.parentNode.children : this.treeNodes;\n        const index = children.findIndex(n => n.key === node.key);\n        if (index > -1) {\n            children.splice(index, 1);\n        }\n    }\n\n    public expandTreeNodes(keyOrKeys: string | number | (string | number)[]) {\n        const keys = coerceArray(keyOrKeys);\n        const needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(node => {\n            return keys.indexOf(node.key) > -1;\n        });\n        needExpandNodes.forEach(node => {\n            node.setExpanded(true);\n        });\n    }\n\n    public statusChanged() {\n        return this.$statusChange.asObservable();\n    }\n\n    // 设置节点选中状态\n    public setNodeChecked(node: ThyTreeNode, checked: boolean, propagateUp = true, propagateDown = true) {\n        node.isChecked = checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;\n        node.origin.checked = checked;\n        if (propagateDown && node.children) {\n            node.children.forEach(subNode => {\n                this.setNodeChecked(subNode, checked, false, true);\n            });\n        }\n        if (propagateUp) {\n            this.syncNodeCheckState(node.parentNode);\n        }\n    }\n\n    public syncNodeCheckState(node: ThyTreeNode) {\n        if (node) {\n            node.isChecked = this.checkStateResolve(node);\n            this.syncNodeCheckState(node.parentNode);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.$statusChange.complete();\n        this.$statusChange = null;\n    }\n}\n\nexport interface ThyTreeFormatEmitEvent {\n    eventName: string;\n    node: ThyTreeNode;\n    event?: MouseEvent | DragEvent;\n}\n","import { ThyTreeNodeData, ThyTreeNodeCheckState } from './tree.class';\nimport { ThyTreeService } from './tree.service';\nimport { helpers } from 'ngx-tethys/util';\n\nexport class ThyTreeNode<T = any> {\n    key?: number | string;\n\n    title?: string;\n\n    children: ThyTreeNode[];\n\n    parentNode: ThyTreeNode;\n\n    level = 0;\n\n    origin: ThyTreeNodeData<T>;\n\n    isExpanded: boolean;\n\n    isChecked: ThyTreeNodeCheckState;\n\n    isLoading: boolean;\n\n    isDisabled: boolean;\n\n    private readonly service: ThyTreeService;\n\n    get treeService(): ThyTreeService {\n        if (this.service) {\n            return this.service;\n        } else if (this.parentNode) {\n            return this.parentNode.treeService;\n        }\n    }\n\n    constructor(node: ThyTreeNodeData, parent: ThyTreeNode = null, service?: ThyTreeService) {\n        this.title = node.title;\n        this.key = node.key;\n        this.children = [];\n        this.parentNode = parent;\n        this.level = parent ? parent.level + 1 : this.level;\n        this.origin = node;\n        this.isDisabled = node.disabled || false;\n        this.isExpanded = node.expanded || false;\n        this.isChecked = node.checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;\n        this.isLoading = false;\n        if (node.children) {\n            node.children.forEach(childNode => {\n                this.children.push(new ThyTreeNode(childNode, this));\n            });\n        }\n        this.service = service;\n    }\n\n    public setKey(key: string) {\n        this.origin.key = key;\n        this.key = key;\n    }\n\n    public setTitle(title: string) {\n        this.origin.title = title;\n        this.title = title;\n    }\n\n    public setExpanded(expanded: boolean, propagate = false) {\n        this.origin.expanded = expanded;\n        this.isExpanded = expanded;\n        if (propagate && this.children) {\n            this.children.forEach(n => n.setExpanded(expanded, propagate));\n        }\n    }\n\n    public setLoading(loading: boolean): void {\n        this.isLoading = loading;\n    }\n\n    public setChecked(checked: boolean, propagateUp = true, propagateDown = true) {\n        this.treeService.setNodeChecked(this, checked, propagateUp, propagateDown);\n    }\n\n    public syncNodeCheckState() {\n        this.treeService.syncNodeCheckState(this);\n    }\n\n    public getParentNode(): ThyTreeNode {\n        return this.parentNode;\n    }\n\n    public getChildren(): ThyTreeNode[] {\n        return this.children;\n    }\n\n    public addChildren(children: ThyTreeNodeData | ThyTreeNodeData[], index: number = -1): void {\n        children = helpers.coerceArray(children);\n        ((children as ThyTreeNodeData[]) || []).forEach((childNode: ThyTreeNodeData, i: number) => {\n            if (index === -1) {\n                this.children.push(new ThyTreeNode(childNode, this));\n            } else {\n                this.children.splice(index + i, 0, new ThyTreeNode(childNode, this, this.treeService));\n            }\n        });\n\n        this.origin.children = this.getChildren().map(n => n.origin);\n        this.setLoading(false);\n        this.treeService.$statusChange.next({\n            eventName: 'addChildren',\n            node: this\n        });\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    ElementRef,\n    ViewEncapsulation,\n    TemplateRef,\n    OnInit,\n    OnChanges,\n    EventEmitter,\n    ContentChild,\n    HostBinding,\n    forwardRef,\n    SimpleChanges\n} from '@angular/core';\nimport { ThyTreeNodeData, ThyTreeEmitEvent, ThyTreeDragDropEvent, ThyTreeIcons, ThyTreeNodeCheckState } from './tree.class';\nimport { helpers } from 'ngx-tethys/util';\nimport { ThyTreeService } from './tree.service';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { ThyDragDropEvent, ThyDropPosition, ThyDragOverEvent, ThyDragStartEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\n\ntype ThyTreeSize = 'sm' | '';\n\ntype ThyTreeType = 'default' | 'especial';\n\nconst treeTypeClassMap: any = {\n    default: ['thy-tree-default'],\n    especial: ['thy-tree-especial']\n};\n\n@Component({\n    selector: 'thy-tree',\n    templateUrl: './tree.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ThyTreeComponent),\n            multi: true\n        },\n        ThyTreeService,\n        UpdateHostClassService\n    ]\n})\nexport class ThyTreeComponent implements ControlValueAccessor, OnInit, OnChanges {\n    private _templateRef: TemplateRef<any>;\n\n    private _emptyChildrenTemplateRef: TemplateRef<any>;\n\n    private _draggable = false;\n\n    private _expandedKeys: (string | number)[];\n\n    private _selectedKeys: (string | number)[];\n\n    public _selectionModel: SelectionModel<ThyTreeNode>;\n\n    public treeNodes: ThyTreeNode[];\n\n    @Input()\n    set thyNodes(value: ThyTreeNodeData[]) {\n        this._expandedKeys = this.getExpandedNodes().map(node => node.key);\n        this._selectedKeys = this.getSelectedNodes().map(node => node.key);\n        this.treeNodes = (value || []).map(node => new ThyTreeNode(node, null, this.thyTreeService));\n        this.thyTreeService.treeNodes = this.treeNodes;\n        this.thyTreeService.expandTreeNodes(this._expandedKeys);\n        this._selectTreeNodes(this._selectedKeys);\n    }\n\n    @Input() thyShowExpand: boolean | ((_: ThyTreeNodeData) => boolean) = true;\n\n    @HostBinding(`class.thy-multiple-selection-list`)\n    @Input()\n    thyMultiple = false;\n\n    @HostBinding('class.thy-tree-draggable')\n    @Input()\n    set thyDraggable(value: boolean) {\n        this._draggable = value;\n    }\n\n    get thyDraggable() {\n        return this._draggable;\n    }\n\n    @Input() thyCheckable: boolean;\n\n    @Input() set thyCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState) {\n        this.thyTreeService.setCheckStateResolve(resolve);\n    }\n\n    @Input() thyAsync = false;\n\n    private _thyType: ThyTreeType = 'default';\n\n    @Input()\n    set thyType(type: ThyTreeType) {\n        this._thyType = type;\n        if (type === 'especial') {\n            this.thyIcons = { expand: 'minus-square', collapse: 'plus-square' };\n        }\n    }\n\n    get thyType() {\n        return this._thyType;\n    }\n\n    @Input() thyIcons: ThyTreeIcons = {};\n\n    @Input() thySize: ThyTreeSize;\n\n    @Input() thyTitleTruncate = true;\n\n    @Input() set thySelectedKeys(keys: string[]) {\n        this._selectedKeys = keys;\n    }\n\n    @Input() thyBeforeDragStart: (e: ThyDragStartEvent) => boolean;\n\n    @Input() thyBeforeDragDrop: (e: ThyDragDropEvent) => boolean;\n\n    @Output() thyOnClick: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnExpandChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnDragDrop: EventEmitter<ThyTreeDragDropEvent> = new EventEmitter<ThyTreeDragDropEvent>();\n\n    @ContentChild('treeNodeTemplate', { static: true })\n    set templateRef(template: TemplateRef<any>) {\n        if (template) {\n            this._templateRef = template;\n        }\n    }\n\n    get templateRef() {\n        return this._templateRef;\n    }\n\n    @ContentChild('emptyChildrenTemplate', { static: true }) emptyChildrenTemplate: TemplateRef<any>;\n    set emptyChildrenTemplateRef(template: TemplateRef<any>) {\n        if (template) {\n            this._emptyChildrenTemplateRef = template;\n        }\n    }\n\n    get emptyChildrenTemplateRef() {\n        return this._emptyChildrenTemplateRef;\n    }\n\n    @HostBinding('class.thy-tree') thyTreeClass = true;\n\n    beforeDragOver = (event: ThyDragOverEvent<ThyTreeNode>) => {\n        return this.isShowExpand(event.item) || (!this.isShowExpand(event.item) && event.position !== ThyDropPosition.in);\n    };\n\n    private _onTouched: () => void = () => {};\n\n    private _onChange: (value: any) => void = (_: any) => {};\n\n    constructor(\n        private elementRef: ElementRef,\n        private updateHostClassService: UpdateHostClassService,\n        public thyTreeService: ThyTreeService\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.thyType && !changes.thyType.isFirstChange()) {\n            this._setTreeType();\n        }\n        if (changes.thyMultiple && !changes.thyMultiple.isFirstChange()) {\n            this._instanceSelectionModel();\n        }\n    }\n\n    ngOnInit(): void {\n        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);\n        this._setTreeType();\n        this._setTreeSize();\n        this._instanceSelectionModel();\n        this._selectTreeNodes(this._selectedKeys);\n    }\n\n    private _setTreeType() {\n        if (this.thyType) {\n            this.updateHostClassService.addClass(treeTypeClassMap[this.thyType]);\n        }\n    }\n\n    private _setTreeSize() {\n        if (this.thySize) {\n            this.updateHostClassService.addClass(`thy-tree-${this.thySize}`);\n        }\n    }\n\n    private _instanceSelectionModel() {\n        this._selectionModel = new SelectionModel<any>(this.thyMultiple);\n    }\n\n    private _selectTreeNodes(keys: (string | number)[]) {\n        (keys || []).forEach(key => {\n            const node = this.thyTreeService.getTreeNode(key);\n            if (node) {\n                this.selectTreeNode(this.thyTreeService.getTreeNode(key));\n            }\n        });\n    }\n\n    public isSelected(node: ThyTreeNode) {\n        return this._selectionModel.isSelected(node);\n    }\n\n    public toggleTreeNode(node: ThyTreeNode) {\n        if (node && !node.isDisabled) {\n            this._selectionModel.toggle(node);\n        }\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.key || index;\n    }\n\n    public onDragStart(event: ThyDragStartEvent<ThyTreeNode>) {\n        if (this.isShowExpand(event.item) && event.item.isExpanded) {\n            event.item.setExpanded(false);\n        }\n    }\n\n    public onDragDrop(event: ThyDragDropEvent<ThyTreeNode>) {\n        if (!this.isShowExpand(event.item) && event.position === ThyDropPosition.in) {\n            return;\n        }\n        const parent = event.previousItem.parentNode;\n        if (parent) {\n            parent.children = parent.children.filter(item => item !== event.previousItem);\n        } else {\n            this.treeNodes = this.treeNodes.filter(item => item !== event.previousItem);\n        }\n        switch (event.position) {\n            case ThyDropPosition.in:\n                event.item.addChildren(event.previousItem.origin);\n                break;\n            case ThyDropPosition.after:\n            case ThyDropPosition.before:\n                const targetParent = event.item.parentNode;\n                const index = event.position === ThyDropPosition.before ? 0 : 1;\n                if (targetParent) {\n                    targetParent.addChildren(event.previousItem.origin, targetParent.children.indexOf(event.item) + index);\n                } else {\n                    this.treeNodes.splice(this.treeNodes.indexOf(event.item) + index, 0, event.previousItem);\n                }\n                break;\n        }\n        this.thyTreeService.resetSortedTreeNodes(this.treeNodes);\n\n        let afterNode = null;\n        let targetNode = null;\n        if (event.position === ThyDropPosition.before) {\n            afterNode = event.containerItems[event.currentIndex - 1];\n            targetNode = event.item.parentNode;\n        } else if (event.position === ThyDropPosition.after) {\n            afterNode = event.containerItems[event.currentIndex];\n            targetNode = event.item.parentNode;\n        } else {\n            afterNode = event.item.children[event.item.children.length - 2];\n            targetNode = event.item;\n        }\n        this.thyOnDragDrop.emit({\n            event,\n            currentIndex: event.currentIndex,\n            dragNode: event.previousItem,\n            targetNode: targetNode,\n            afterNode: afterNode\n        });\n    }\n\n    public isShowExpand(node: ThyTreeNode) {\n        if (helpers.isFunction(this.thyShowExpand)) {\n            return (this.thyShowExpand as Function)(node);\n        } else {\n            return this.thyShowExpand;\n        }\n    }\n\n    writeValue(value: ThyTreeNodeData[]): void {\n        this.thyNodes = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n\n    // region Public Functions\n\n    public selectTreeNode(node: ThyTreeNode) {\n        this._selectionModel.select(node);\n    }\n\n    public getRootNodes(): ThyTreeNode[] {\n        return this.treeNodes;\n    }\n\n    public getTreeNode(key: string) {\n        return this.thyTreeService.getTreeNode(key);\n    }\n\n    public getSelectedNode(): ThyTreeNode {\n        return this._selectionModel ? this._selectionModel.selected[0] : null;\n    }\n\n    public getSelectedNodes(): ThyTreeNode[] {\n        return this._selectionModel ? this._selectionModel.selected : [];\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        return this.thyTreeService.getExpandedNodes();\n    }\n\n    public getCheckedNodes(): ThyTreeNode[] {\n        return this.thyTreeService.getCheckedNodes();\n    }\n\n    public addTreeNode(node: ThyTreeNodeData, parent?: ThyTreeNode, index = -1) {\n        if (parent) {\n            parent.addChildren(node, index);\n        } else {\n            if (index > -1) {\n                this.treeNodes.splice(index, 0, new ThyTreeNode(node, null, this.thyTreeService));\n            } else {\n                this.treeNodes.push(new ThyTreeNode(node, null, this.thyTreeService));\n            }\n        }\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        if (this.isSelected(node)) {\n            this._selectionModel.toggle(node);\n        }\n        this.thyTreeService.deleteTreeNode(node);\n    }\n\n    public expandAllNodes() {\n        const nodes = this.getRootNodes();\n        nodes.forEach(n => n.setExpanded(true, true));\n    }\n\n    public collapsedAllNodes() {\n        const nodes = this.getRootNodes();\n        nodes.forEach(n => n.setExpanded(false, true));\n    }\n\n    // endregion\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    Input,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    Output,\n    EventEmitter,\n    NgZone,\n    OnDestroy,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeData, ThyTreeNodeCheckState, ThyTreeEmitEvent } from './tree.class';\nimport { ThyTreeNode } from './tree-node.class';\nimport { ThyTreeService } from './tree.service';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ThyDragStartEvent } from 'ngx-tethys/drag-drop';\n\n@Component({\n    selector: 'thy-tree-node',\n    templateUrl: './tree-node.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeNodeComponent implements OnDestroy {\n    @Input() node: ThyTreeNode;\n\n    @Input() thyAsync = false;\n\n    @Input() thyMultiple = false;\n\n    @Input() thyDraggable = false;\n\n    @Input() thyCheckable = false;\n\n    @Input() thyTitleTruncate: boolean;\n\n    @Input() templateRef: TemplateRef<any>;\n\n    @Input() emptyChildrenTemplateRef: TemplateRef<any>;\n\n    @Output() thyOnClick: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnExpandChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @ContentChild('childrenTree') childrenTreeTemplateRef: TemplateRef<any>;\n\n    @ViewChild('title') titleInputElementRef: ElementRef<HTMLInputElement>;\n\n    @HostBinding('class.thy-tree-node') thyTreeNodeClass = true;\n\n    public get nodeIcon() {\n        return this.node.origin.icon;\n    }\n\n    public get nodeIconStyle() {\n        return this.node.origin.iconStyle;\n    }\n\n    private _showExpand: boolean | ((_: ThyTreeNode) => boolean);\n\n    destroy$ = new Subject();\n\n    checkState = ThyTreeNodeCheckState;\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    constructor(\n        public root: ThyTreeComponent,\n        public thyTreeService: ThyTreeService,\n        private ngZone: NgZone,\n        private cdr: ChangeDetectorRef\n    ) {\n        this.thyTreeService\n            .statusChanged()\n            .pipe(\n                filter(data => data.node.key === this.node.key),\n                takeUntil(this.destroy$)\n            )\n            .subscribe(() => {\n                this.markForCheck();\n            });\n    }\n\n    private changeDragIconVisibility(event: Event, showDragIcon: boolean): void {\n        const nodeElement = event.target as HTMLElement;\n        const dragIcon = nodeElement.querySelector('.thy-tree-drag-icon') as HTMLElement;\n        if (dragIcon) {\n            dragIcon.style.visibility = showDragIcon ? 'visible' : 'hidden';\n        }\n    }\n\n    public nodeMouseEnter(event: Event) {\n        if (!this.root.thyDraggable || this.node.isDisabled) {\n            return;\n        } else if (this.root.thyDraggable && !this.root.thyBeforeDragStart) {\n            this.changeDragIconVisibility(event, true);\n        } else {\n            const containerItems = this.node.getParentNode() ? this.node.getParentNode().getChildren() : this.root.treeNodes;\n            const dragStartEvent: ThyDragStartEvent = {\n                event: event as DragEvent,\n                item: this.node,\n                containerItems,\n                currentIndex: containerItems.indexOf(this.node)\n            };\n            this.changeDragIconVisibility(event, this.root.thyBeforeDragStart(dragStartEvent));\n        }\n    }\n\n    public nodeMouseLeave(event: Event) {\n        if (!this.root.thyDraggable || this.node.isDisabled) {\n            return;\n        } else {\n            this.changeDragIconVisibility(event, false);\n        }\n    }\n\n    public clickNode(event: Event) {\n        if (!this.root.thyMultiple) {\n            this.root.selectTreeNode(this.node);\n        } else {\n            this.root.toggleTreeNode(this.node);\n        }\n        this.thyOnClick.emit({\n            eventName: 'click',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public clickNodeCheck(event: Event) {\n        event.stopPropagation();\n        if (this.node.isChecked === ThyTreeNodeCheckState.unchecked || this.node.isChecked === ThyTreeNodeCheckState.indeterminate) {\n            this.node.setChecked(true);\n        } else {\n            this.node.setChecked(false);\n        }\n        this.thyOnCheckboxChange.emit({\n            eventName: 'checkboxChange',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public expandNode(event: Event) {\n        event.stopPropagation();\n        this.node.setExpanded(!this.node.isExpanded);\n        if (this.root.thyShowExpand) {\n            this.thyOnExpandChange.emit({\n                eventName: 'expand',\n                event: event,\n                node: this.node\n            });\n            if (this.thyAsync && this.node.children.length === 0) {\n                this.node.setLoading(true);\n            }\n        }\n    }\n\n    public isShowExpand(node: ThyTreeNode) {\n        return this.root.isShowExpand(node);\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ViewContainerRef,\n    Input,\n    OnInit\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\n\n@Component({\n    selector: '[ThyTreeReplaceRegion]',\n    template: '<ng-content></ng-content>',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeReplaceRegionComponent implements OnInit {\n    @Input() thyInstance: any;\n\n    constructor(\n        private root: ThyTreeComponent,\n        private viewRef: ViewContainerRef\n    ) {}\n\n    ngOnInit(): void {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeComponent } from './tree-node.component';\nimport { ThyTreeReplaceRegionComponent } from './tree-replace-region.component';\nimport { ThyInputModule } from 'ngx-tethys/input';\nimport { ThyButtonModule } from 'ngx-tethys/button';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyTreeService } from './tree.service';\nimport { ThyListModule } from 'ngx-tethys/list';\nimport { ThyOptionModule } from 'ngx-tethys/shared';\nimport { FormsModule } from '@angular/forms';\nimport { ThyLoadingModule } from 'ngx-tethys/loading';\nimport { ThyIconModule } from 'ngx-tethys/icon';\nimport { ThyDragDropModule } from 'ngx-tethys/drag-drop';\nimport { ThyCheckboxModule } from 'ngx-tethys/checkbox';\n\n@NgModule({\n    declarations: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],\n    imports: [\n        CommonModule,\n        ThyInputModule,\n        ThyButtonModule,\n        ThySharedModule,\n        FormsModule,\n        ThyListModule,\n        ThyOptionModule,\n        ThyLoadingModule,\n        ThyIconModule,\n        ThyDragDropModule,\n        ThyCheckboxModule\n    ],\n    entryComponents: [ThyTreeComponent],\n    exports: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],\n    providers: [ThyTreeService]\n})\nexport class ThyTreeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-tethys/util'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/loading', ['exports', '@angular/core', 'ngx-tethys/util', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].loading = {}), global.ng.core, global['ngx-tethys'].util, global.ng.common));
}(this, (function (exports, core, util, common) { 'use strict';

    var ThyLoadingComponent = /** @class */ (function () {
        function ThyLoadingComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.loadingClassName = true;
        }
        Object.defineProperty(ThyLoadingComponent.prototype, "thyDone", {
            set: function (value) {
                this.isDone = util.coerceBooleanProperty(value);
                this.changeDetectorRef.markForCheck();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyLoadingComponent.prototype, "thyTip", {
            set: function (value) {
                this.tip = value;
                this.changeDetectorRef.markForCheck();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyLoadingComponent.prototype, "thyIsMask", {
            // 不传或穿false,没有遮罩层，加载完成出现内容
            set: function (value) {
                this.isMask = util.coerceBooleanProperty(value);
                this.changeDetectorRef.markForCheck();
            },
            enumerable: false,
            configurable: true
        });
        return ThyLoadingComponent;
    }());
    ThyLoadingComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-loading',
                    template: "<div [class.thy-loading-mask]=\"isMask && !isDone\">\n    <div class=\"thy-loading-indicator\" *ngIf=\"!isDone\">\n        <h4>\n            <span [style.display]=\"tip ? 'inline' : 'none'\">{{tip}}</span>\n            <div class=\"thy-loading-ellipsis\">\n                <span class=\"thy-spot\"></span>\n            </div>\n        </h4>\n    </div>\n    <ng-content *ngIf=\"isMask || isDone\"></ng-content>\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ThyLoadingComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef }
    ]; };
    ThyLoadingComponent.propDecorators = {
        thyDone: [{ type: core.Input }],
        thyTip: [{ type: core.Input }],
        thyIsMask: [{ type: core.Input }],
        loadingClassName: [{ type: core.HostBinding, args: ['class.thy-loading',] }]
    };

    var ThyLoadingModule = /** @class */ (function () {
        function ThyLoadingModule() {
        }
        return ThyLoadingModule;
    }());
    ThyLoadingModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ThyLoadingComponent
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        ThyLoadingComponent
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyLoadingComponent = ThyLoadingComponent;
    exports.ThyLoadingModule = ThyLoadingModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-loading.umd.js.map

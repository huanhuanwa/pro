(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('date-fns'), require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/util', ['exports', 'date-fns', '@angular/core', '@angular/cdk/coercion', '@angular/cdk/keycodes'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].util = {}), global.dateFns, global.ng.core, global.ng.cdk.coercion, global.ng.cdk.keycodes));
}(this, (function (exports, dateFns, core, coercion, keycodes$1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var dateFns__namespace = /*#__PURE__*/_interopNamespace(dateFns);
    var keycodes__namespace = /*#__PURE__*/_interopNamespace(keycodes$1);

    var differenceInCalendarDays = dateFns__namespace.differenceInCalendarDays;
    var differenceInCalendarMonths = dateFns__namespace.differenceInCalendarMonths;
    var differenceInCalendarYears = dateFns__namespace.differenceInCalendarYears;
    var differenceInWeeks = dateFns__namespace.differenceInWeeks;
    var differenceInHours = dateFns__namespace.differenceInHours;
    var differenceInMinutes = dateFns__namespace.differenceInMinutes;
    var differenceInSeconds = dateFns__namespace.differenceInSeconds;
    var isSameDay = dateFns__namespace.isSameDay;
    var isSameHour = dateFns__namespace.isSameHour;
    var isSameMinute = dateFns__namespace.isSameMinute;
    var isSameMonth = dateFns__namespace.isSameMonth;
    var isSameSecond = dateFns__namespace.isSameSecond;
    var isSameYear = dateFns__namespace.isSameYear;
    var isToday = dateFns__namespace.isToday;
    var isTomorrow = dateFns__namespace.isTomorrow;
    var isValid = dateFns__namespace.isValid;
    var setYear = dateFns__namespace.setYear;
    var startOfMonth = dateFns__namespace.startOfMonth;
    var startOfWeek = dateFns__namespace.startOfWeek;
    var addMonths = dateFns__namespace.addMonths;
    var addYears = dateFns__namespace.addYears;
    var setDay = dateFns__namespace.setDay;
    var setMonth = dateFns__namespace.setMonth;
    var getUnixTime = dateFns__namespace.getUnixTime;
    var startOfDay = dateFns__namespace.startOfDay;
    var endOfDay = dateFns__namespace.endOfDay;
    var fromUnixTime = dateFns__namespace.fromUnixTime;
    var isWeekend = dateFns__namespace.isWeekend;
    var getWeek = dateFns__namespace.getWeek;
    var getDaysInMonth = dateFns__namespace.getDaysInMonth;
    var addSeconds = dateFns__namespace.addSeconds;
    var addMinutes = dateFns__namespace.addMinutes;
    var addHours = dateFns__namespace.addHours;
    var addWeeks = dateFns__namespace.addWeeks;
    var addQuarters = dateFns__namespace.addQuarters;
    var startOfQuarter = dateFns__namespace.startOfQuarter;
    var startOfYear = dateFns__namespace.startOfYear;
    var endOfWeek = dateFns__namespace.endOfWeek;
    var endOfMonth = dateFns__namespace.endOfMonth;
    var endOfQuarter = dateFns__namespace.endOfQuarter;
    var endOfYear = dateFns__namespace.endOfYear;
    var format = dateFns__namespace.format;
    var getQuarter = dateFns__namespace.getQuarter;
    var addDays = dateFns__namespace.addDays;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    function sortRangeValue(rangeValue) {
        if (Array.isArray(rangeValue)) {
            var _a = __read(rangeValue, 2), start = _a[0], end = _a[1];
            return start && end && start.isAfterSecond(end) ? [end, start] : [start, end];
        }
        return rangeValue;
    }
    var TinyDate = /** @class */ (function () {
        function TinyDate(date) {
            if (date) {
                if (date instanceof Date) {
                    this.nativeDate = date;
                }
                else if (typeof date === 'string' || typeof date === 'number') {
                    this.nativeDate = new Date(date);
                }
                else {
                    throw new Error("The input date type is not supported expect Date | string | number | { date: number; with_time: 0 | 1}, actual " + JSON.stringify(date));
                }
            }
            else {
                this.nativeDate = new Date();
            }
        }
        TinyDate.fromUnixTime = function (unixTime) {
            return new TinyDate(fromUnixTime(unixTime));
        };
        // get
        TinyDate.prototype.getTime = function () {
            return this.nativeDate.getTime();
        };
        TinyDate.prototype.getDate = function () {
            return this.nativeDate.getDate();
        };
        TinyDate.prototype.getYear = function () {
            return this.nativeDate.getFullYear();
        };
        TinyDate.prototype.getQuarter = function () {
            return getQuarter(this.nativeDate);
        };
        TinyDate.prototype.getMonth = function () {
            return this.nativeDate.getMonth();
        };
        TinyDate.prototype.getWeek = function (options) {
            if (options === void 0) { options = { weekStartsOn: 1 }; }
            return getWeek(this.nativeDate, options);
        };
        TinyDate.prototype.getDay = function () {
            return this.nativeDate.getDay();
        };
        TinyDate.prototype.getHours = function () {
            return this.nativeDate.getHours();
        };
        TinyDate.prototype.getMinutes = function () {
            return this.nativeDate.getMinutes();
        };
        TinyDate.prototype.getSeconds = function () {
            return this.nativeDate.getSeconds();
        };
        TinyDate.prototype.getMilliseconds = function () {
            return this.nativeDate.getMilliseconds();
        };
        TinyDate.prototype.getDaysInMonth = function () {
            return getDaysInMonth(this.nativeDate);
        };
        TinyDate.prototype.getDaysInQuarter = function () {
            return differenceInCalendarDays(this.endOfQuarter().addSeconds(1).nativeDate, this.startOfQuarter().nativeDate);
        };
        // set
        TinyDate.prototype.setDate = function (amount) {
            var date = new Date(this.nativeDate);
            date.setDate(amount);
            return new TinyDate(date);
        };
        TinyDate.prototype.setHms = function (hour, minute, second) {
            var date = new Date(this.nativeDate);
            date.setHours(hour, minute, second);
            return new TinyDate(date);
        };
        TinyDate.prototype.setYear = function (year) {
            return new TinyDate(setYear(this.nativeDate, year));
        };
        TinyDate.prototype.setMonth = function (month) {
            return new TinyDate(setMonth(this.nativeDate, month));
        };
        TinyDate.prototype.setDay = function (day, options) {
            return new TinyDate(setDay(this.nativeDate, day, options));
        };
        // add
        TinyDate.prototype.addYears = function (amount) {
            return new TinyDate(addYears(this.nativeDate, amount));
        };
        TinyDate.prototype.addQuarters = function (amount) {
            return new TinyDate(addQuarters(this.nativeDate, amount));
        };
        TinyDate.prototype.addMonths = function (amount) {
            return new TinyDate(addMonths(this.nativeDate, amount));
        };
        TinyDate.prototype.addWeeks = function (amount) {
            return new TinyDate(addWeeks(this.nativeDate, amount));
        };
        TinyDate.prototype.addDays = function (amount) {
            return new TinyDate(addDays(this.nativeDate, amount));
        };
        TinyDate.prototype.addHours = function (amount) {
            return new TinyDate(addHours(this.nativeDate, amount));
        };
        TinyDate.prototype.addSeconds = function (amount) {
            return new TinyDate(addSeconds(this.nativeDate, amount));
        };
        TinyDate.prototype.addMinutes = function (amount) {
            return new TinyDate(addMinutes(this.nativeDate, amount));
        };
        // isSame
        TinyDate.prototype.isSame = function (date, grain) {
            if (grain === void 0) { grain = 'day'; }
            var fn;
            switch (grain) {
                case 'year':
                    fn = isSameYear;
                    break;
                case 'month':
                    fn = isSameMonth;
                    break;
                case 'day':
                    fn = isSameDay;
                    break;
                case 'hour':
                    fn = isSameHour;
                    break;
                case 'minute':
                    fn = isSameMinute;
                    break;
                case 'second':
                    fn = isSameSecond;
                    break;
                default:
                    fn = isSameDay;
                    break;
            }
            return fn(this.nativeDate, this.toNativeDate(date));
        };
        TinyDate.prototype.isSameYear = function (date) {
            return this.isSame(date, 'year');
        };
        TinyDate.prototype.isSameMonth = function (date) {
            return this.isSame(date, 'month');
        };
        TinyDate.prototype.isSameDay = function (date) {
            return this.isSame(date, 'day');
        };
        TinyDate.prototype.isSameHour = function (date) {
            return this.isSame(date, 'hour');
        };
        TinyDate.prototype.isSameMinute = function (date) {
            return this.isSame(date, 'minute');
        };
        TinyDate.prototype.isSameSecond = function (date) {
            return this.isSame(date, 'second');
        };
        // isBefore and isAfter
        TinyDate.prototype.isBeforeYear = function (date) {
            return this.compare(date, 'year');
        };
        TinyDate.prototype.isBeforeMonth = function (date) {
            return this.compare(date, 'month');
        };
        TinyDate.prototype.isBeforeWeek = function (date) {
            return this.compare(date, 'week');
        };
        TinyDate.prototype.isBeforeDay = function (date) {
            return this.compare(date, 'day');
        };
        TinyDate.prototype.isBeforeHour = function (date) {
            return this.compare(date, 'hour');
        };
        TinyDate.prototype.isBeforeMinute = function (date) {
            return this.compare(date, 'minute');
        };
        TinyDate.prototype.isBeforeSecond = function (date) {
            return this.compare(date, 'second');
        };
        TinyDate.prototype.isAfterYear = function (date) {
            return this.compare(date, 'year', false);
        };
        TinyDate.prototype.isAfterMonth = function (date) {
            return this.compare(date, 'month', false);
        };
        TinyDate.prototype.isAfterWeek = function (date) {
            return this.compare(date, 'week', false);
        };
        TinyDate.prototype.isAfterDay = function (date) {
            return this.compare(date, 'day', false);
        };
        TinyDate.prototype.isAfterHour = function (date) {
            return this.compare(date, 'hour', false);
        };
        TinyDate.prototype.isAfterMinute = function (date) {
            return this.compare(date, 'minute', false);
        };
        TinyDate.prototype.isAfterSecond = function (date) {
            return this.compare(date, 'second', false);
        };
        // is
        TinyDate.prototype.isWeekend = function () {
            return isWeekend(this.nativeDate);
        };
        TinyDate.prototype.isToday = function () {
            return isToday(this.nativeDate);
        };
        TinyDate.prototype.isTomorrow = function () {
            return isTomorrow(this.nativeDate);
        };
        TinyDate.prototype.isValid = function () {
            return isValid(this.nativeDate);
        };
        // startOf and endOf
        TinyDate.prototype.startOfYear = function () {
            return new TinyDate(startOfYear(this.nativeDate));
        };
        TinyDate.prototype.startOfQuarter = function () {
            return new TinyDate(startOfQuarter(this.nativeDate));
        };
        TinyDate.prototype.startOfMonth = function () {
            return new TinyDate(startOfMonth(this.nativeDate));
        };
        TinyDate.prototype.startOfWeek = function (options) {
            return new TinyDate(startOfWeek(this.nativeDate, options));
        };
        TinyDate.prototype.startOfDay = function () {
            return new TinyDate(startOfDay(this.nativeDate));
        };
        TinyDate.prototype.endOfYear = function () {
            return new TinyDate(endOfYear(this.nativeDate));
        };
        TinyDate.prototype.endOfQuarter = function () {
            return new TinyDate(endOfQuarter(this.nativeDate));
        };
        TinyDate.prototype.endOfMonth = function () {
            return new TinyDate(endOfMonth(this.nativeDate));
        };
        TinyDate.prototype.endOfWeek = function (options) {
            return new TinyDate(endOfWeek(this.nativeDate, options));
        };
        TinyDate.prototype.endOfDay = function () {
            return new TinyDate(endOfDay(this.nativeDate));
        };
        // other
        TinyDate.prototype.format = function (mat, options) {
            return format(this.nativeDate, mat, options);
        };
        TinyDate.prototype.calendarStart = function (options) {
            return new TinyDate(startOfWeek(startOfMonth(this.nativeDate), options));
        };
        TinyDate.prototype.clone = function () {
            return new TinyDate(new Date(this.nativeDate));
        };
        TinyDate.prototype.getUnixTime = function () {
            return getUnixTime(this.nativeDate);
        };
        TinyDate.prototype.compare = function (date, grain, isBefore) {
            if (grain === void 0) { grain = 'day'; }
            if (isBefore === void 0) { isBefore = true; }
            if (date === null) {
                return false;
            }
            var fn;
            switch (grain) {
                case 'year':
                    fn = differenceInCalendarYears;
                    break;
                case 'month':
                    fn = differenceInCalendarMonths;
                    break;
                case 'day':
                    fn = differenceInCalendarDays;
                    break;
                case 'week':
                    fn = differenceInWeeks;
                    break;
                case 'hour':
                    fn = differenceInHours;
                    break;
                case 'minute':
                    fn = differenceInMinutes;
                    break;
                case 'second':
                    fn = differenceInSeconds;
                    break;
                default:
                    fn = differenceInCalendarDays;
                    break;
            }
            return isBefore ? fn(this.nativeDate, this.toNativeDate(date)) < 0 : fn(this.nativeDate, this.toNativeDate(date)) > 0;
        };
        TinyDate.prototype.toNativeDate = function (date) {
            return date instanceof TinyDate ? date.nativeDate : date;
        };
        return TinyDate;
    }());

    var record = {};
    var PREFIX = '[NGX-TETHYS]:';
    function notRecorded() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var asRecord = args.reduce(function (acc, c) { return acc + c.toString(); }, '');
        if (record[asRecord]) {
            return false;
        }
        else {
            record[asRecord] = true;
            return true;
        }
    }
    function consoleCommonBehavior(consoleFunc) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (core.isDevMode() && notRecorded.apply(void 0, __spread(args))) {
            consoleFunc.apply(void 0, __spread(args));
        }
    }
    // Warning should only be printed in dev mode and only once.
    var warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return consoleCommonBehavior.apply(void 0, __spread([function () {
                var arg = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    arg[_i] = arguments[_i];
                }
                return console.warn.apply(console, __spread([PREFIX], arg));
            }], args));
    };
    function createWarnDeprecation(prefix) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var stack = new Error().stack;
            return consoleCommonBehavior.apply(void 0, __spread([function () {
                    var arg = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        arg[_i] = arguments[_i];
                    }
                    console.warn.apply(console, __spread([prefix, 'deprecated:'], arg, [stack]));
                }], args));
        };
    }
    var warnDeprecation = createWarnDeprecation(PREFIX);
    // Log should only be printed in dev mode.
    var log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (core.isDevMode()) {
            console.log.apply(console, __spread([PREFIX], args));
        }
    };

    function inputValueToBoolean(value) {
        warnDeprecation("The method inputValueToBoolean will be deprecated, please use coerceBooleanProperty instead.");
        return value === '' || (value && value !== 'false');
    }
    function isUndefined(value) {
        return value === undefined;
    }
    function isNull(value) {
        return value === null;
    }
    function isUndefinedOrNull(value) {
        return isUndefined(value) || isNull(value);
    }
    function isArray(value) {
        return value && baseGetTag(value) === '[object Array]';
    }
    function isEmpty(value) {
        return !(isArray(value) && value.length > 0);
    }
    function isString(value) {
        return typeof value == 'string' || (!isArray(value) && isObjectLike(value) && baseGetTag(value) === '[object String]');
    }
    function isObjectLike(value) {
        return value !== null && typeof value === 'object';
    }
    function baseGetTag(value) {
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var toString = objectProto.toString;
        var symToStringTag = typeof Symbol !== 'undefined' ? Symbol.toStringTag : undefined;
        if (value == null) {
            return value === undefined ? '[object Undefined]' : '[object Null]';
        }
        if (!(symToStringTag && symToStringTag in Object(value))) {
            return toString.call(value);
        }
        var isOwn = hasOwnProperty.call(value, symToStringTag);
        var tag = value[symToStringTag];
        var unmasked = false;
        try {
            value[symToStringTag] = undefined;
            unmasked = true;
        }
        catch (e) { }
        var result = toString.call(value);
        if (unmasked) {
            if (isOwn) {
                value[symToStringTag] = tag;
            }
            else {
                delete value[symToStringTag];
            }
        }
        return result;
    }
    function isNumber(value) {
        return typeof value === 'number' || (isObjectLike(value) && baseGetTag(value) === '[object Number]');
    }
    function isObject(value) {
        // Avoid a V8 JIT bug in Chrome 19-20.
        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
        var type = typeof value;
        return !!value && (type === 'object' || type === 'function');
    }
    function isFunction(value) {
        var type = typeof value;
        return !!value && type === 'function';
    }
    function isDate(value) {
        var type = typeof value;
        return !!value && type === 'object' && !!value.getTime;
    }
    function coerceArray(value) {
        return Array.isArray(value) ? value : [value];
    }
    function get(object, path, defaultValue) {
        var paths = path.split('.');
        var result = object[paths.shift()];
        while (result && paths.length) {
            result = result[paths.shift()];
        }
        return result === undefined ? defaultValue : result;
    }
    function set(object, path, value) {
        if (object == null) {
            return object;
        }
        var paths = path.split('.');
        var index = -1;
        var length = paths.length;
        var lastIndex = length - 1;
        var nested = object;
        while (nested !== null && ++index < length) {
            var key = paths[index];
            if (isObject(nested)) {
                if (index === lastIndex) {
                    nested[key] = value;
                    nested = nested[key];
                    break;
                }
                else {
                    if (nested[key] == null) {
                        nested[key] = {};
                    }
                }
            }
            nested = nested[key];
        }
        return object;
    }
    function isBoolean(value) {
        return value === true || value === false || (isObjectLike(value) && baseGetTag(value) === '[object Boolean]');
    }
    function fromArray(value) {
        if (Array.from && isFunction(Array.from)) {
            return Array.from(value);
        }
        else {
            return Array.prototype.slice.call(value);
        }
    }
    function htmlElementIsEmpty(element) {
        if (element && element.childNodes) {
            var nodes = element.childNodes;
            for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                if (node.nodeType === Node.ELEMENT_NODE && node.outerHTML.toString().trim().length !== 0) {
                    return false;
                }
                else if (node.nodeType === Node.TEXT_NODE && node.textContent.toString().trim().length !== 0) {
                    return false;
                }
                else if (node.nodeType !== Node.COMMENT_NODE) {
                    return false;
                }
            }
        }
        return true;
    }
    function hexToRgb(hexValue, alpha) {
        var rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        var hex = hexValue.replace(rgx, function (m, r, g, b) { return r + r + g + g + b + b; });
        var rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        var resultR = parseInt(rgb[1], 16);
        var resultG = parseInt(rgb[2], 16);
        var resultB = parseInt(rgb[3], 16);
        if (alpha) {
            return "rgba(" + resultR + ", " + resultG + ", " + resultB + ", " + alpha + ")";
        }
        else {
            return "rgb(" + resultR + ", " + resultG + ", " + resultB + ")";
        }
    }
    function formatDate(date) {
        if (isNumber(date)) {
            if (date.toString().length === 10) {
                return date;
            }
            else {
                return parseInt((date / 1000).toFixed(0), 10);
            }
        }
        else {
            return parseInt((date.getTime() / 1000).toFixed(0), 10);
        }
    }
    function clamp(value, min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 100; }
        return Math.max(min, Math.min(max, value));
    }
    function keyBy(array, key) {
        var result = {};
        array.forEach(function (item) {
            var keyValue = item[key];
            result[keyValue] = item;
        });
        return result;
    }
    function indexKeyBy(array, key) {
        var result = {};
        array.forEach(function (item, index) {
            var keyValue = item[key];
            result[keyValue] = index;
        });
        return result;
    }
    function upperFirst(string) {
        return string.slice(0, 1).toUpperCase() + string.slice(1);
    }
    function camelCase(values) {
        if (isArray(values)) {
            return values.reduce(function (result, word, index) {
                word = word.toLowerCase();
                return result + (index ? upperFirst(word) : word);
            }, '');
        }
        else {
            return;
        }
    }
    function generateRandomStr() {
        return Math.random()
            .toString(36)
            .substring(2);
    }
    function isTemplateRef(value) {
        return value instanceof core.TemplateRef;
    }
    function isHTMLElement(value) {
        return value instanceof HTMLElement;
    }
    function isElementRef(value) {
        return value instanceof core.ElementRef;
    }
    function coerceBooleanProperty(value) {
        if (value === '' || (value && value !== 'false')) {
            return true;
        }
        else {
            return false;
        }
    }
    function coerceNumberValue(value, fallbackValue) {
        if (fallbackValue === void 0) { fallbackValue = 0; }
        return coercion._isNumberValue(value) ? Number(value) : fallbackValue;
    }
    function coerceCssPixelValue(value) {
        return coercion.coerceCssPixelValue(value);
    }
    function valueFunctionProp(prop) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return typeof prop === 'function' ? prop.apply(void 0, __spread(args)) : prop;
    }
    function shallowEqual(objA, objB) {
        if (objA === objB) {
            return true;
        }
        if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {
            return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
            return false;
        }
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        // tslint:disable-next-line:prefer-for-of
        for (var idx = 0; idx < keysA.length; idx++) {
            var key = keysA[idx];
            if (!bHasOwnProperty(key)) {
                return false;
            }
            if (objA[key] !== objB[key]) {
                return false;
            }
        }
        return true;
    }
    function concatArray(items, originalItems) {
        if (originalItems === void 0) { originalItems = []; }
        var _originalItems = [];
        if (!originalItems) {
            _originalItems = [];
        }
        else {
            _originalItems = coerceArray(originalItems);
        }
        if (items) {
            if (isArray(items)) {
                return __spread(_originalItems, items);
            }
            else {
                return __spread(_originalItems, [items]);
            }
        }
        else {
            return _originalItems;
        }
    }

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        inputValueToBoolean: inputValueToBoolean,
        isUndefined: isUndefined,
        isNull: isNull,
        isUndefinedOrNull: isUndefinedOrNull,
        isArray: isArray,
        isEmpty: isEmpty,
        isString: isString,
        isNumber: isNumber,
        isObject: isObject,
        isFunction: isFunction,
        isDate: isDate,
        coerceArray: coerceArray,
        get: get,
        set: set,
        isBoolean: isBoolean,
        fromArray: fromArray,
        htmlElementIsEmpty: htmlElementIsEmpty,
        hexToRgb: hexToRgb,
        formatDate: formatDate,
        clamp: clamp,
        keyBy: keyBy,
        indexKeyBy: indexKeyBy,
        camelCase: camelCase,
        generateRandomStr: generateRandomStr,
        isTemplateRef: isTemplateRef,
        isHTMLElement: isHTMLElement,
        isElementRef: isElementRef,
        coerceBooleanProperty: coerceBooleanProperty,
        coerceNumberValue: coerceNumberValue,
        coerceCssPixelValue: coerceCssPixelValue,
        valueFunctionProp: valueFunctionProp,
        shallowEqual: shallowEqual,
        concatArray: concatArray
    });

    var proto = Element.prototype;
    var vendor = proto.matches ||
        proto.matchesSelector ||
        proto.webkitMatchesSelector ||
        proto.mozMatchesSelector ||
        proto.msMatchesSelector ||
        proto.oMatchesSelector;
    /**
     * Match `el` to `selector`.
     */
    function match(el, selector) {
        if (vendor) {
            return vendor.call(el, selector);
        }
        var nodes = el.parentNode.querySelectorAll(selector);
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i] === el) {
                return true;
            }
        }
        return false;
    }
    function isDocument(element) {
        return ((typeof HTMLDocument !== 'undefined' && element instanceof HTMLDocument) ||
            (element.nodeType && element.nodeType === element.DOCUMENT_NODE));
    }
    function isElement(element) {
        return ((typeof HTMLElement !== 'undefined' && element instanceof HTMLElement) ||
            (element.nodeType && element.nodeType === element.ELEMENT_NODE));
    }
    function getWindow(elem) {
        return elem != null && elem === elem.window ? elem : elem.nodeType === 9 && elem.defaultView;
    }
    function getElementOffset(elem) {
        var docElem, win, rect, doc;
        if (!elem) {
            return;
        }
        // Support: IE<=11+
        // Running getBoundingClientRect on a
        // disconnected node in IE throws an error
        if (!elem.getClientRects().length) {
            return { top: 0, left: 0 };
        }
        rect = elem.getBoundingClientRect();
        // Make sure element is not hidden (display: none)
        if (rect.width || rect.height) {
            doc = elem.ownerDocument;
            win = getWindow(doc);
            docElem = doc.documentElement;
            return {
                top: rect.top + win.pageYOffset - docElem.clientTop,
                left: rect.left + win.pageXOffset - docElem.clientLeft,
                height: rect.height,
                width: rect.width
            };
        }
        return rect;
    }
    function getOffset(element, container) {
        if (!element || !element.getClientRects().length) {
            return null;
        }
        var rect = element.getBoundingClientRect();
        if (rect.width || rect.height) {
            if (container === window) {
                var documentElement = element.ownerDocument.documentElement;
                return {
                    top: rect.top - documentElement.clientTop,
                    left: rect.left - documentElement.clientLeft
                };
            }
            var containerRect = container.getBoundingClientRect();
            return {
                top: rect.top - containerRect.top,
                left: rect.left - containerRect.left
            };
        }
        return rect;
    }
    function getElementOuterHeight(element) {
        var _element = element.documentElement ? element.documentElement : element;
        var height = _element.clientHeight;
        var computedStyle = window.getComputedStyle(_element);
        height += parseInt(computedStyle.marginTop, 10);
        height += parseInt(computedStyle.marginBottom, 10);
        return height;
    }
    function getHTMLElementBySelector(selector, defaultElementRef) {
        if (!selector) {
            return defaultElementRef.nativeElement;
        }
        else if (selector === 'body') {
            return document.body;
        }
        else if (isString(selector)) {
            return document.querySelector(selector);
        }
        else if (selector instanceof core.ElementRef) {
            return selector.nativeElement;
        }
        else {
            return selector;
        }
    }
    function isInputOrTextarea(element) {
        return ['INPUT', 'TEXTAREA'].indexOf(element.nodeName) >= 0;
    }
    function isWindow(container) {
        return typeof window !== 'undefined' && container === window;
    }
    function getContainerRect(container) {
        return !isWindow(container)
            ? container.getBoundingClientRect()
            : {
                top: 0,
                left: 0,
                bottom: 0
            };
    }
    function getStyleAsText(styles) {
        if (!styles) {
            return '';
        }
        return Object.keys(styles)
            .map(function (key) {
            var val = styles[key];
            return key + ":" + (typeof val === 'string' ? val : val + 'px');
        })
            .join(';');
    }
    function isTouchEvent(event) {
        return event.type.startsWith('touch');
    }

    var dom = /*#__PURE__*/Object.freeze({
        __proto__: null,
        match: match,
        isDocument: isDocument,
        isElement: isElement,
        getWindow: getWindow,
        getElementOffset: getElementOffset,
        getOffset: getOffset,
        getElementOuterHeight: getElementOuterHeight,
        getHTMLElementBySelector: getHTMLElementBySelector,
        isInputOrTextarea: isInputOrTextarea,
        isWindow: isWindow,
        getContainerRect: getContainerRect,
        getStyleAsText: getStyleAsText,
        isTouchEvent: isTouchEvent
    });

    var Producer = /** @class */ (function () {
        function Producer(entities, options) {
            this.idKey = '_id';
            this.entities = entities || [];
            if (options && options.idKey) {
                this.idKey = options.idKey;
            }
        }
        /**
         * Add an entity or entities.
         *
         * @example
         * produce([users]).add(Entity);
         * produce([users]).add([Entity, Entity]);
         * produce([users]).add(Entity, { prepend: true });
         * produce([users]).add(Entity, { afterId: '' });
         */
        Producer.prototype.add = function (entity, addOptions) {
            var _this = this;
            var addEntities = coerceArray(entity);
            if (addEntities.length === 0) {
                return this.entities;
            }
            if (addOptions && (addOptions.afterId || addOptions.prepend)) {
                if (addOptions.afterId) {
                    var entities = __spread(this.entities);
                    var index = this.entities.findIndex(function (item) {
                        return item[_this.idKey] === addOptions.afterId;
                    }) + 1;
                    entities.splice.apply(entities, __spread([index, 0], addEntities));
                    this.entities = __spread(entities);
                }
                else if (addOptions.prepend) {
                    this.entities = __spread(addEntities, this.entities);
                }
            }
            else {
                this.entities = __spread(this.entities, addEntities);
            }
            return this.entities;
        };
        Producer.prototype.update = function (idsOrFn, newStateOrFn) {
            var ids = coerceArray(idsOrFn);
            for (var i = 0; i < this.entities.length; i++) {
                var oldEntity = this.entities[i];
                if (ids.indexOf(oldEntity[this.idKey]) >= 0) {
                    var newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
                    this.entities[i] = Object.assign(Object.assign({}, oldEntity), newState);
                }
            }
            return __spread(this.entities);
        };
        Producer.prototype.remove = function (idsOrFn) {
            var _this = this;
            if (isFunction(idsOrFn)) {
                this.entities = this.entities.filter(function (entity) {
                    return !idsOrFn(entity);
                });
            }
            else {
                var ids_1 = coerceArray(idsOrFn);
                this.entities = this.entities.filter(function (entity) {
                    return ids_1.indexOf(entity[_this.idKey]) === -1;
                });
            }
            return this.entities;
        };
        /**
         *
         * Move one or more entities:
         *
         * @example
         * produce([users]).move(5, {afterId: 2});
         * produce([users]).move(5, {toIndex: 0});
         */
        Producer.prototype.move = function (id, moveOptions) {
            var _this = this;
            var fromIndex = this.entities.findIndex(function (item) { return item[_this.idKey] === id; });
            var toIndex = 0;
            var newEntities = __spread(this.entities);
            if (!id || fromIndex < 0) {
                return __spread(this.entities);
            }
            if (moveOptions) {
                if (!isUndefinedOrNull(moveOptions.afterId)) {
                    toIndex = this.entities.findIndex(function (item) { return item[_this.idKey] === moveOptions.afterId; });
                }
                else if (moveOptions.toIndex) {
                    toIndex = moveOptions.toIndex;
                }
            }
            toIndex = Math.max(0, Math.min(this.entities.length - 1, toIndex));
            if (toIndex === fromIndex) {
                return __spread(this.entities);
            }
            else {
                var target = this.entities[fromIndex];
                var delta = toIndex < fromIndex ? -1 : 1;
                for (var i = fromIndex; i !== toIndex; i += delta) {
                    newEntities[i] = newEntities[i + delta];
                }
                newEntities[toIndex] = target;
                return __spread(newEntities);
            }
        };
        return Producer;
    }());
    function produce(entities, options) {
        return new Producer(entities, options);
    }

    function getReferenceIdKey(referenceKey, idKeys) {
        if (idKeys && idKeys[referenceKey]) {
            return idKeys[referenceKey];
        }
        else {
            return '_id';
        }
    }
    /**
     * Append references to original references
     * @example
     * mergeReferences({departments: [{ _id: '1', name: 'name-1'}]}, {departments: [{ _id: '3', name: 'name-3'}]})
     * mergeReferences({users: [{ uid: '1', name: 'name-1'}]}, {users: [{ uid: '3', name: 'name-3'}]}, { users: "uid" })
     * @param originalReferences original references
     * @param references append references
     * @param idKeys references 's id key, default is '_id'
     *
     * @returns TReferences
     */
    function mergeReferences(originalReferences, references, idKeys) {
        var _loop_1 = function (key) {
            if (references.hasOwnProperty(key)) {
                var reference = references[key];
                var referenceIdKey_1 = getReferenceIdKey(key, idKeys);
                var originalReference_1 = originalReferences[key];
                if (!originalReference_1) {
                    throw new Error("original reference must exist when append new reference: " + key);
                }
                if (originalReference_1 instanceof Array) {
                    // original reference id index map
                    var originalReferenceIdIndexMap_1 = indexKeyBy(originalReferences[key], referenceIdKey_1);
                    // append reference is array
                    if (reference instanceof Array) {
                        reference.forEach(function (item) {
                            var itemId = item[referenceIdKey_1];
                            var index = originalReferenceIdIndexMap_1[itemId];
                            if (index >= 0) {
                                originalReference_1[index] = Object.assign(Object.assign({}, originalReference_1[index]), item);
                            }
                            else {
                                originalReferences[key] = __spread(originalReferences[key], [item]);
                            }
                        });
                    }
                    else {
                        // append reference is not array, support append signal object to array reference
                        var itemId = reference[referenceIdKey_1];
                        var index = originalReferenceIdIndexMap_1[itemId];
                        if (itemId >= 0) {
                            originalReference_1[index] = Object.assign(Object.assign({}, originalReference_1[index]), reference);
                        }
                        else {
                            originalReferences[key] = __spread(originalReferences[key], [reference]);
                        }
                    }
                }
                else {
                    originalReferences[key] = Object.assign(Object.assign({}, originalReferences[key]), reference);
                }
            }
        };
        for (var key in references) {
            _loop_1(key);
        }
        return originalReferences;
    }
    /**
     * Build dictionary for references
     * @param references references
     * @param idKeys references 's id key, default is '_id'
     */
    function buildReferencesKeyBy(references, idKeys) {
        var result = {};
        for (var key in references) {
            if (references.hasOwnProperty(key)) {
                var referenceIdKey = getReferenceIdKey(key, idKeys);
                var reference = references[key];
                if (reference instanceof Array) {
                    var originalReferenceIdMap = keyBy(reference, referenceIdKey);
                    result[key] = originalReferenceIdMap;
                }
            }
        }
        return result;
    }

    var references = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mergeReferences: mergeReferences,
        buildReferencesKeyBy: buildReferencesKeyBy
    });

    var keycodes = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), keycodes__namespace));

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PREFIX = PREFIX;
    exports.Producer = Producer;
    exports.TinyDate = TinyDate;
    exports.addDays = addDays;
    exports.addHours = addHours;
    exports.addMinutes = addMinutes;
    exports.addMonths = addMonths;
    exports.addQuarters = addQuarters;
    exports.addSeconds = addSeconds;
    exports.addWeeks = addWeeks;
    exports.addYears = addYears;
    exports.buildReferencesKeyBy = buildReferencesKeyBy;
    exports.camelCase = camelCase;
    exports.clamp = clamp;
    exports.coerceArray = coerceArray;
    exports.coerceBooleanProperty = coerceBooleanProperty;
    exports.coerceCssPixelValue = coerceCssPixelValue;
    exports.coerceNumberValue = coerceNumberValue;
    exports.concatArray = concatArray;
    exports.createWarnDeprecation = createWarnDeprecation;
    exports.differenceInCalendarDays = differenceInCalendarDays;
    exports.differenceInCalendarMonths = differenceInCalendarMonths;
    exports.differenceInCalendarYears = differenceInCalendarYears;
    exports.differenceInHours = differenceInHours;
    exports.differenceInMinutes = differenceInMinutes;
    exports.differenceInSeconds = differenceInSeconds;
    exports.differenceInWeeks = differenceInWeeks;
    exports.dom = dom;
    exports.endOfDay = endOfDay;
    exports.endOfMonth = endOfMonth;
    exports.endOfQuarter = endOfQuarter;
    exports.endOfWeek = endOfWeek;
    exports.endOfYear = endOfYear;
    exports.format = format;
    exports.formatDate = formatDate;
    exports.fromArray = fromArray;
    exports.fromUnixTime = fromUnixTime;
    exports.generateRandomStr = generateRandomStr;
    exports.get = get;
    exports.getContainerRect = getContainerRect;
    exports.getDaysInMonth = getDaysInMonth;
    exports.getElementOffset = getElementOffset;
    exports.getElementOuterHeight = getElementOuterHeight;
    exports.getHTMLElementBySelector = getHTMLElementBySelector;
    exports.getOffset = getOffset;
    exports.getQuarter = getQuarter;
    exports.getStyleAsText = getStyleAsText;
    exports.getUnixTime = getUnixTime;
    exports.getWeek = getWeek;
    exports.getWindow = getWindow;
    exports.helpers = index;
    exports.hexToRgb = hexToRgb;
    exports.htmlElementIsEmpty = htmlElementIsEmpty;
    exports.indexKeyBy = indexKeyBy;
    exports.inputValueToBoolean = inputValueToBoolean;
    exports.isArray = isArray;
    exports.isBoolean = isBoolean;
    exports.isDate = isDate;
    exports.isDocument = isDocument;
    exports.isElement = isElement;
    exports.isElementRef = isElementRef;
    exports.isEmpty = isEmpty;
    exports.isFunction = isFunction;
    exports.isHTMLElement = isHTMLElement;
    exports.isInputOrTextarea = isInputOrTextarea;
    exports.isNull = isNull;
    exports.isNumber = isNumber;
    exports.isObject = isObject;
    exports.isSameDay = isSameDay;
    exports.isSameHour = isSameHour;
    exports.isSameMinute = isSameMinute;
    exports.isSameMonth = isSameMonth;
    exports.isSameSecond = isSameSecond;
    exports.isSameYear = isSameYear;
    exports.isString = isString;
    exports.isTemplateRef = isTemplateRef;
    exports.isToday = isToday;
    exports.isTomorrow = isTomorrow;
    exports.isTouchEvent = isTouchEvent;
    exports.isUndefined = isUndefined;
    exports.isUndefinedOrNull = isUndefinedOrNull;
    exports.isValid = isValid;
    exports.isWeekend = isWeekend;
    exports.isWindow = isWindow;
    exports.keyBy = keyBy;
    exports.keycodes = keycodes;
    exports.log = log;
    exports.match = match;
    exports.mergeReferences = mergeReferences;
    exports.produce = produce;
    exports.references = references;
    exports.set = set;
    exports.setDay = setDay;
    exports.setMonth = setMonth;
    exports.setYear = setYear;
    exports.shallowEqual = shallowEqual;
    exports.sortRangeValue = sortRangeValue;
    exports.startOfDay = startOfDay;
    exports.startOfMonth = startOfMonth;
    exports.startOfQuarter = startOfQuarter;
    exports.startOfWeek = startOfWeek;
    exports.startOfYear = startOfYear;
    exports.valueFunctionProp = valueFunctionProp;
    exports.warn = warn;
    exports.warnDeprecation = warnDeprecation;
    Object.keys(keycodes$1).forEach(function (k) {
        if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return keycodes$1[k];
            }
        });
    });

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-util.umd.js.map
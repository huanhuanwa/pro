(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common/http'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common'), require('@angular/common/http'), require('ngx-tethys/util'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/uploader', ['@angular/core','@angular/common/http','@angular/common','exports', '@angular/core', '@angular/common', '@angular/common/http', 'ngx-tethys/util', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common.http,global.ng.common,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].uploader = {}), global.ng.core, global.ng.common, global.ng.common.http, global['ngx-tethys'].util, global.rxjs, global.rxjs.operators));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,exports, core, common, http, util, rxjs, operators) { 
var _c0 = ["fileInput"];
var _c1 = ["thyFileSelect", ""];
var _c2 = ["*"];
var _c3 = ["thyFileDrop", ""];
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    // Multipurpose Internet Mail Extensions
    var MIME_Map = {
        '.3gp': 'video/3gpp',
        '.apk': 'application/vnd.android.package-archive',
        '.asf': 'video/x-ms-asf',
        '.avi': 'video/x-msvideo',
        '.bin': 'application/octet-stream',
        '.bmp': 'image/bmp',
        '.c': 'text/plain',
        '.class': 'application/octet-stream',
        '.conf': 'text/plain',
        '.cpp': 'text/plain',
        '.doc': 'application/msword',
        '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        '.xls': 'application/vnd.ms-excel,.xls',
        '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,.xlsx',
        '.xlsb': 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
        '.xlsm': 'application/vnd.ms-excel.sheet.macroenabled.12',
        '.xltx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
        '.exe': 'application/octet-stream',
        '.gif': 'image/gif',
        '.gtar': 'application/x-gtar',
        '.gz': 'application/x-gzip',
        '.h': 'text/plain',
        '.htm': 'text/html',
        '.html': 'text/html',
        '.jar': 'application/java-archive',
        '.java': 'text/plain',
        '.jpeg': 'image/jpeg',
        '.jpg': 'image/jpeg',
        '.js': 'application/x-javascript',
        '.json': 'application/json',
        '.log': 'text/plain',
        '.m3u': 'audio/x-mpegurl',
        '.m4a': 'audio/mp4a-latm',
        '.m4b': 'audio/mp4a-latm',
        '.m4p': 'audio/mp4a-latm',
        '.m4u': 'video/vnd.mpegurl',
        '.m4v': 'video/x-m4v',
        '.mov': 'video/quicktime',
        '.mp2': 'audio/x-mpeg',
        '.mp3': 'audio/x-mpeg',
        '.mp4': 'video/mp4',
        '.mpc': 'application/vnd.mpohun.certificate',
        '.mpe': 'video/mpeg',
        '.mpeg': 'video/mpeg',
        '.mpg': 'video/mpeg',
        '.mpg4': 'video/mp4',
        '.mpga': 'audio/mpeg',
        '.msg': 'application/vnd.ms-outlook',
        '.ogg': 'audio/ogg',
        '.pdf': 'application/pdf',
        '.png': 'image/png',
        '.pps': 'application/vnd.ms-powerpoint',
        '.ppt': 'application/vnd.ms-powerpoint',
        '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        '.prop': 'text/plain',
        '.rc': 'text/plain',
        '.rmvb': 'audio/x-pn-realaudio',
        '.rtf': 'application/rtf',
        '.sh': 'text/plain',
        '.tar': 'application/x-tar',
        '.tgz': 'application/x-compressed',
        '.txt': 'text/plain',
        '.wav': 'audio/x-wav',
        '.wma': 'audio/x-ms-wma',
        '.wmv': 'audio/x-ms-wmv',
        '.wps': 'application/vnd.ms-works',
        '.xml': 'text/plain',
        '.z': 'application/x-compress',
        '.zip': 'application/x-zip-compressed',
        '': '*/*'
    };

    function mimeTypeConvert(value) {
        var inputTypes;
        var acceptTypes = [];
        if (util.isArray(value)) {
            inputTypes = value;
        }
        else if (util.isString(value)) {
            inputTypes = value.split(',');
        }
        else {
            inputTypes = [];
        }
        if (inputTypes.length > 0) {
            inputTypes.forEach(function (n) {
                if (MIME_Map[n]) {
                    acceptTypes.push(MIME_Map[n]);
                }
                else {
                    acceptTypes.push(n);
                }
            });
        }
        return acceptTypes.join(',');
    }

    var THY_UPLOADER_DEFAULT_OPTIONS = new core.InjectionToken('thy-uploader-default-options');
    var ɵ0 = {
        sizeThreshold: 0,
        sizeExceedsHandler: sizeExceedsHandler
    };
    var THY_UPLOADER_DEFAULT_OPTIONS_PROVIDER = {
        provide: THY_UPLOADER_DEFAULT_OPTIONS,
        useValue: ɵ0
    };
    function sizeExceedsHandler(event) {
        var exceedsFilesMessage = event.exceedsFiles
            .map(function (item) {
            return "file: " + item.name + ", size: " + item.size;
        })
            .join(',');
        console.error("some files(" + exceedsFilesMessage + ") size exceeds threshold " + event.sizeThreshold);
    }

    var FileSelectBaseComponent = /** @class */ (function () {
        function FileSelectBaseComponent(elementRef, defaultConfig, renderer, ngZone) {
            this.elementRef = elementRef;
            this.defaultConfig = defaultConfig;
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.sizeThreshold = defaultConfig.sizeThreshold;
            this.sizeExceedsHandler = defaultConfig.sizeExceedsHandler;
        }
        Object.defineProperty(FileSelectBaseComponent.prototype, "thySizeThreshold", {
            set: function (value) {
                var sizeThreshold = util.coerceNumberValue(value);
                if (util.isNumber(sizeThreshold)) {
                    this.sizeThreshold = sizeThreshold;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileSelectBaseComponent.prototype, "thySizeExceedsHandler", {
            set: function (value) {
                if (value) {
                    this.sizeExceedsHandler = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        FileSelectBaseComponent.prototype.handleSizeExceeds = function (event, files) {
            var _this = this;
            var sizeExceedsFiles = files.filter(function (item) { return item.size / 1024 > _this.sizeThreshold; });
            if (sizeExceedsFiles.length > 0) {
                var sizeExceedContext = {
                    files: files,
                    exceedsFiles: sizeExceedsFiles,
                    nativeEvent: event,
                    sizeThreshold: this.sizeThreshold
                };
                return this.sizeExceedsHandler(sizeExceedContext);
            }
            return files;
        };
        FileSelectBaseComponent.prototype.selectFiles = function (event, files, eventEmitter) {
            var successFiles = files;
            if (this.sizeThreshold && this.sizeThreshold > 0) {
                successFiles = this.handleSizeExceeds(event, files);
            }
            if (successFiles) {
                eventEmitter.emit({
                    files: successFiles,
                    nativeEvent: event
                });
            }
        };
FileSelectBaseComponent.ɵfac = function FileSelectBaseComponent_Factory(t) { return new (t || FileSelectBaseComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_UPLOADER_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
FileSelectBaseComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileSelectBaseComponent, selectors: [["ng-component"]], inputs: { thySizeThreshold: "thySizeThreshold", thySizeExceedsHandler: "thySizeExceedsHandler" }, decls: 0, vars: 0, template: function FileSelectBaseComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileSelectBaseComponent, [{
        type: core.Component,
        args: [{
                template: ""
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [THY_UPLOADER_DEFAULT_OPTIONS]
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { thySizeThreshold: [{
            type: core.Input
        }], thySizeExceedsHandler: [{
            type: core.Input
        }] }); })();
        return FileSelectBaseComponent;
    }());
    FileSelectBaseComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [THY_UPLOADER_DEFAULT_OPTIONS,] }] },
        { type: core.Renderer2 },
        { type: core.NgZone }
    ]; };
    FileSelectBaseComponent.propDecorators = {
        thySizeThreshold: [{ type: core.Input }],
        thySizeExceedsHandler: [{ type: core.Input }]
    };

    var ThyFileSelectComponent = /** @class */ (function (_super) {
        __extends(ThyFileSelectComponent, _super);
        function ThyFileSelectComponent(elementRef, defaultConfig) {
            var _this = _super.call(this, elementRef, defaultConfig) || this;
            _this.elementRef = elementRef;
            _this.defaultConfig = defaultConfig;
            _this.thyOnFileSelect = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(ThyFileSelectComponent.prototype, "thyMultiple", {
            set: function (value) {
                this.multiple = util.coerceBooleanProperty(value);
                if (this.multiple) {
                    this.fileInput.nativeElement.setAttribute('multiple', '');
                }
                else {
                    this.fileInput.nativeElement.removeAttribute('multiple');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFileSelectComponent.prototype, "thyAcceptFolder", {
            set: function (value) {
                this.acceptFolder = util.coerceBooleanProperty(value);
                if (this.acceptFolder) {
                    this.fileInput.nativeElement.setAttribute('webkitdirectory', '');
                }
                else {
                    this.fileInput.nativeElement.removeAttribute('webkitdirectory');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFileSelectComponent.prototype, "thyAcceptType", {
            set: function (value) {
                this.acceptType = mimeTypeConvert(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFileSelectComponent.prototype, "thySizeThreshold", {
            set: function (value) {
                this.sizeThreshold = value;
            },
            enumerable: false,
            configurable: true
        });
        ThyFileSelectComponent.prototype.click = function ($event) {
            this.fileInput.nativeElement.click();
        };
        ThyFileSelectComponent.prototype.selectFile = function ($event) {
            var files = this.fileInput.nativeElement.files;
            if (files && files.length > 0) {
                this.selectFiles($event, Array.from(files), this.thyOnFileSelect);
                this.fileInput.nativeElement.value = '';
            }
        };
        ThyFileSelectComponent.prototype.ngOnInit = function () { };
        ThyFileSelectComponent.prototype.ngOnDestroy = function () { };
ThyFileSelectComponent.ɵfac = function ThyFileSelectComponent_Factory(t) { return new (t || ThyFileSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(THY_UPLOADER_DEFAULT_OPTIONS)); };
ThyFileSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFileSelectComponent, selectors: [["", "thyFileSelect", ""], ["thy-file-select"]], viewQuery: function ThyFileSelectComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
    } }, hostBindings: function ThyFileSelectComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyFileSelectComponent_click_HostBindingHandler($event) { return ctx.click($event); });
    } }, inputs: { thyMultiple: "thyMultiple", thyAcceptFolder: "thyAcceptFolder", thyAcceptType: "thyAcceptType", thySizeThreshold: "thySizeThreshold" }, outputs: { thyOnFileSelect: "thyOnFileSelect" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c1, ngContentSelectors: _c2, decls: 3, vars: 2, consts: [["thyStopPropagation", "true", "type", "file", 2, "width", "0", "height", "0", 3, "hidden", "change"], ["fileInput", ""]], template: function ThyFileSelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵelementStart(1, "input", 0, 1);
        ɵngcc0.ɵɵlistener("change", function ThyFileSelectComponent_Template_input_change_1_listener($event) { return ctx.selectFile($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", "true");
        ɵngcc0.ɵɵattribute("accept", ctx.acceptType);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFileSelectComponent, [{
        type: core.Component,
        args: [{
                selector: '[thyFileSelect],thy-file-select',
                template: "<ng-content></ng-content>\n<input style=\"width: 0; height: 0\" thyStopPropagation=\"true\" [hidden]=\"'true'\" #fileInput type=\"file\" (change)=\"selectFile($event)\"\n    [attr.accept]=\"acceptType\">\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [THY_UPLOADER_DEFAULT_OPTIONS]
            }] }]; }, { thyMultiple: [{
            type: core.Input
        }], thyAcceptFolder: [{
            type: core.Input
        }], thyAcceptType: [{
            type: core.Input
        }], thySizeThreshold: [{
            type: core.Input
        }], click: [{
            type: core.HostListener,
            args: ['click', ['$event']]
        }], thyOnFileSelect: [{
            type: core.Output
        }], fileInput: [{
            type: core.ViewChild,
            args: ['fileInput', { static: true }]
        }] }); })();
        return ThyFileSelectComponent;
    }(FileSelectBaseComponent));
    ThyFileSelectComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [THY_UPLOADER_DEFAULT_OPTIONS,] }] }
    ]; };
    ThyFileSelectComponent.propDecorators = {
        thyOnFileSelect: [{ type: core.Output }],
        fileInput: [{ type: core.ViewChild, args: ['fileInput', { static: true },] }],
        thyMultiple: [{ type: core.Input }],
        thyAcceptFolder: [{ type: core.Input }],
        thyAcceptType: [{ type: core.Input }],
        thySizeThreshold: [{ type: core.Input }],
        click: [{ type: core.HostListener, args: ['click', ['$event'],] }]
    };

    var ThyFileDropComponent = /** @class */ (function (_super) {
        __extends(ThyFileDropComponent, _super);
        function ThyFileDropComponent(elementRef, renderer, ngZone, defaultConfig) {
            var _this = _super.call(this, elementRef, defaultConfig) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.ngZone = ngZone;
            _this.defaultConfig = defaultConfig;
            _this.isDragOver = false;
            _this.thyOnDrop = new core.EventEmitter();
            _this.ngUnsubscribe$ = new rxjs.Subject();
            return _this;
        }
        Object.defineProperty(ThyFileDropComponent.prototype, "thyFileDropClassName", {
            set: function (value) {
                this.dragOverCustomClass = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFileDropComponent.prototype, "thyAcceptType", {
            set: function (value) {
                this.acceptType = mimeTypeConvert(value);
            },
            enumerable: false,
            configurable: true
        });
        ThyFileDropComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.ngZone.runOutsideAngular(function () {
                rxjs.fromEvent(_this.elementRef.nativeElement, 'dragenter')
                    .pipe(operators.takeUntil(_this.ngUnsubscribe$), operators.tap(function (event) {
                    event.preventDefault();
                }), operators.filter(function (event) { return event.dataTransfer.items && event.dataTransfer.items.length > 0; }))
                    .subscribe(function (event) {
                    if (_this.checkRejectFolderAndHtmlElement(event)) {
                        var files = _this.filterFilesOrItems(Array.from(event.dataTransfer.items));
                        if (!util.isEmpty(files)) {
                            _this.ngZone.run(function () {
                                _this.isDragOver = true;
                                _this.toggleDropOverClassName();
                            });
                        }
                    }
                });
                rxjs.fromEvent(_this.elementRef.nativeElement, 'dragover')
                    .pipe(operators.takeUntil(_this.ngUnsubscribe$))
                    .subscribe(function (event) {
                    event.preventDefault();
                });
                rxjs.fromEvent(_this.elementRef.nativeElement, 'dragleave')
                    .pipe(operators.takeUntil(_this.ngUnsubscribe$))
                    .subscribe(function (event) {
                    _this.ngZone.run(function () {
                        if (!_this.elementRef.nativeElement.contains(event.fromElement)) {
                            _this.resetDragOver();
                            _this.toggleDropOverClassName();
                        }
                    });
                });
                rxjs.fromEvent(_this.elementRef.nativeElement, 'drop')
                    .pipe(operators.takeUntil(_this.ngUnsubscribe$), operators.tap(function (event) {
                    event.preventDefault();
                }))
                    .subscribe(function (event) {
                    _this.ngZone.run(function () {
                        if (_this.checkRejectFolderAndHtmlElement(event)) {
                            var files = _this.filterFilesOrItems(event.dataTransfer ? Array.from(event.dataTransfer.files) : []);
                            if (!util.isEmpty(files)) {
                                _this.selectFiles(event, Array.from(event.dataTransfer.files), _this.thyOnDrop);
                            }
                        }
                        _this.resetDragOver();
                        _this.toggleDropOverClassName();
                    });
                });
            });
        };
        ThyFileDropComponent.prototype.checkRejectFolderAndHtmlElement = function (event) {
            // 排除文件夹和HTML元素拖拽
            var items = event.dataTransfer ? event.dataTransfer.items : [];
            var res = true;
            for (var index = 0; index < items.length; index++) {
                var item = items[index];
                var entry = this.getAsEntry(item);
                if (item.kind !== 'file' || (entry && !entry.isFile)) {
                    res = false;
                    // console.error(`file extensions not support drag upload, kind: ${item.kind}, type: ${item.type}`);
                }
            }
            return res;
        };
        ThyFileDropComponent.prototype.getAsEntry = function (item) {
            var entry;
            if (item['getAsEntry']) {
                entry = item['getAsEntry']();
            }
            else if (item.webkitGetAsEntry) {
                entry = item.webkitGetAsEntry();
            }
            return entry;
        };
        ThyFileDropComponent.prototype.filterFilesOrItems = function (items) {
            var _this = this;
            if (this.acceptType && this.acceptType != '*/*') {
                return items.filter(function (item) {
                    return _this.acceptType.includes(item.type);
                });
            }
            else {
                return Array.from(items);
            }
        };
        ThyFileDropComponent.prototype.toggleDropOverClassName = function () {
            if (this.dragOverCustomClass) {
                if (this.isDragOver) {
                    this.renderer.addClass(this.elementRef.nativeElement, this.dragOverCustomClass);
                }
                else {
                    this.renderer.removeClass(this.elementRef.nativeElement, this.dragOverCustomClass);
                }
            }
        };
        ThyFileDropComponent.prototype.setDragOverState = function (isDragOver) {
            this.isDragOver = isDragOver;
        };
        ThyFileDropComponent.prototype.resetDragOver = function () {
            this.setDragOverState(false);
        };
        ThyFileDropComponent.prototype.ngOnDestroy = function () {
            this.ngUnsubscribe$.next();
            this.ngUnsubscribe$.complete();
        };
ThyFileDropComponent.ɵfac = function ThyFileDropComponent_Factory(t) { return new (t || ThyFileDropComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(THY_UPLOADER_DEFAULT_OPTIONS)); };
ThyFileDropComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFileDropComponent, selectors: [["", "thyFileDrop", ""]], hostVars: 4, hostBindings: function ThyFileDropComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("drop-over", ctx.isDragOver)("thy-drop-over", ctx.isDragOver);
    } }, inputs: { thyFileDropClassName: "thyFileDropClassName", thyAcceptType: "thyAcceptType" }, outputs: { thyOnDrop: "thyOnDrop" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c3, ngContentSelectors: _c2, decls: 1, vars: 0, template: function ThyFileDropComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFileDropComponent, [{
        type: core.Component,
        args: [{
                selector: '[thyFileDrop]',
                template: "\n        <ng-content></ng-content>\n    "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [THY_UPLOADER_DEFAULT_OPTIONS]
            }] }]; }, { thyFileDropClassName: [{
            type: core.Input
        }], thyAcceptType: [{
            type: core.Input
        }], isDragOver: [{
            type: core.HostBinding,
            args: ['class.drop-over']
        }, {
            type: core.HostBinding,
            args: ['class.thy-drop-over']
        }], thyOnDrop: [{
            type: core.Output
        }] }); })();
        return ThyFileDropComponent;
    }(FileSelectBaseComponent));
    ThyFileDropComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.NgZone },
        { type: undefined, decorators: [{ type: core.Inject, args: [THY_UPLOADER_DEFAULT_OPTIONS,] }] }
    ]; };
    ThyFileDropComponent.propDecorators = {
        isDragOver: [{ type: core.HostBinding, args: ['class.drop-over',] }, { type: core.HostBinding, args: ['class.thy-drop-over',] }],
        thyFileDropClassName: [{ type: core.Input }],
        thyAcceptType: [{ type: core.Input }],
        thyOnDrop: [{ type: core.Output }]
    };

    exports.ThyUploadStatus = void 0;
    (function (ThyUploadStatus) {
        ThyUploadStatus["pending"] = "pending";
        ThyUploadStatus["started"] = "started";
        ThyUploadStatus["uploading"] = "uploading";
        ThyUploadStatus["done"] = "done";
    })(exports.ThyUploadStatus || (exports.ThyUploadStatus = {}));
    var ThyUploaderService = /** @class */ (function () {
        function ThyUploaderService(http, xhrFactory) {
            this.http = http;
            this.xhrFactory = xhrFactory;
        }
        ThyUploaderService.prototype.secondsToHuman = function (sec) {
            return new Date(sec * 1000).toISOString().substr(11, 8);
        };
        ThyUploaderService.prototype.humanizeBytes = function (bytes) {
            if (bytes === 0) {
                return '0 Byte';
            }
            var k = 1024;
            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
            var i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        };
        ThyUploaderService.prototype.normalizeUploadFiles = function (uploadFiles) {
            util.coerceArray(uploadFiles).forEach(function (uploadFile) {
                if (!uploadFile.progress) {
                    uploadFile.progress = {
                        status: exports.ThyUploadStatus.pending,
                        percentage: 0,
                        startTime: 0
                    };
                }
            });
        };
        // private uploadByHttp(observer: Subscriber<ThyUploadResponse>, uploadFile: ThyUploadFile) {
        //     const time: number = new Date().getTime();
        //     let speed = 0;
        //     let estimatedTime: number | null = null;
        //     uploadFile.progress = {
        //         status: ThyUploadStatus.started,
        //         percentage: 0,
        //         startTime: time
        //     };
        //     const formData = new FormData();
        //     Object.keys(uploadFile.data || {}).forEach(key => formData.append(key, uploadFile.data[key]));
        //     formData.append(uploadFile.fileField || 'file', uploadFile.nativeFile, uploadFile.fileName);
        //     const headers = {
        //         'Content-Type': 'multipart/form-data'
        //     };
        //     Object.keys(uploadFile.headers || {}).forEach(key => (headers[key] = uploadFile.headers[key]));
        //     const subscription = this.http
        //         .post(uploadFile.url, formData, {
        //             headers: headers,
        //             reportProgress: true,
        //             observe: 'events',
        //             withCredentials: uploadFile.withCredentials ? true : false
        //         })
        //         .subscribe(
        //             (event: HttpEvent<any>) => {
        //                 console.log('Subscribe data', event);
        //                 switch (event.type) {
        //                     case HttpEventType.Sent:
        //                         observer.next({ status: ThyUploadStatus.started, uploadFile: uploadFile });
        //                         break;
        //                     case HttpEventType.UploadProgress:
        //                         let percentage = Math.round((event.loaded * 100) / event.total);
        //                         if (percentage === 100) {
        //                             percentage = 99;
        //                         }
        //                         const diff = new Date().getTime() - time;
        //                         speed = Math.round((event.loaded / diff) * 1000);
        //                         const progressStartTime = (uploadFile.progress && uploadFile.progress.startTime) || new Date().getTime();
        //                         estimatedTime = Math.ceil((event.total - event.loaded) / speed);
        //                         uploadFile.progress.status = ThyUploadStatus.uploading;
        //                         uploadFile.progress.percentage = percentage;
        //                         uploadFile.progress.speed = speed;
        //                         uploadFile.progress.speedHuman = `${this.humanizeBytes(speed)}/s`;
        //                         uploadFile.progress.startTime = progressStartTime;
        //                         uploadFile.progress.estimatedTime = estimatedTime;
        //                         uploadFile.progress.estimatedTimeHuman = this.secondsToHuman(estimatedTime);
        //                         observer.next({ status: ThyUploadStatus.uploading, uploadFile: uploadFile });
        //                         break;
        //                     case HttpEventType.Response:
        //                         uploadFile.response = event.body;
        //                         observer.next({ status: ThyUploadStatus.done, uploadFile: uploadFile });
        //                         break;
        //                     default:
        //                         throw new Error(`Unhandled event: ${event.type}`);
        //                 }
        //             },
        //             error => {
        //                 observer.error(error);
        //             }
        //         );
        //     return subscription;
        // }
        ThyUploaderService.prototype.uploadByXhr = function (observer, uploadFile) {
            var _this = this;
            var xhr = this.xhrFactory.build();
            var time = new Date().getTime();
            var speed = 0;
            var estimatedTime = null;
            uploadFile.progress = {
                status: exports.ThyUploadStatus.started,
                percentage: 0,
                startTime: time
            };
            xhr.upload.addEventListener('progress', function (event) {
                if (event.lengthComputable) {
                    var percentage = Math.round((event.loaded * 100) / event.total);
                    if (percentage === 100) {
                        percentage = 99;
                    }
                    var diff = new Date().getTime() - time;
                    speed = Math.round((event.loaded / diff) * 1000);
                    var progressStartTime = (uploadFile.progress && uploadFile.progress.startTime) || new Date().getTime();
                    estimatedTime = Math.ceil((event.total - event.loaded) / speed);
                    uploadFile.progress.status = exports.ThyUploadStatus.uploading;
                    uploadFile.progress.percentage = percentage;
                    uploadFile.progress.speed = speed;
                    uploadFile.progress.speedHuman = _this.humanizeBytes(speed) + "/s";
                    uploadFile.progress.startTime = progressStartTime;
                    uploadFile.progress.estimatedTime = estimatedTime;
                    uploadFile.progress.estimatedTimeHuman = _this.secondsToHuman(estimatedTime);
                    observer.next({ status: exports.ThyUploadStatus.uploading, uploadFile: uploadFile });
                }
            }, false);
            xhr.upload.addEventListener('error', function (e) {
                observer.error(e);
                observer.complete();
            });
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    var speedTime = (new Date().getTime() - uploadFile.progress.startTime) * 1000;
                    var speedAverage = Math.round(uploadFile.nativeFile.size / speedTime);
                    uploadFile.progress.status = exports.ThyUploadStatus.done;
                    uploadFile.progress.percentage = 100;
                    uploadFile.progress.speed = speedAverage;
                    uploadFile.progress.speedHuman = _this.humanizeBytes(speed) + "/s";
                    uploadFile.progress.estimatedTime = estimatedTime;
                    uploadFile.progress.estimatedTimeHuman = _this.secondsToHuman(estimatedTime || 0);
                    uploadFile.responseStatus = xhr.status;
                    try {
                        uploadFile.response = JSON.parse(xhr.response);
                    }
                    catch (e) {
                        uploadFile.response = xhr.response;
                    }
                    // file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());
                    observer.next({ status: exports.ThyUploadStatus.done, uploadFile: uploadFile });
                    observer.complete();
                }
            };
            xhr.open(uploadFile.method, uploadFile.url, true);
            xhr.withCredentials = uploadFile.withCredentials ? true : false;
            try {
                var formData_1 = new FormData();
                Object.keys(uploadFile.data || {}).forEach(function (key) { return formData_1.append(key, uploadFile.data[key]); });
                Object.keys(uploadFile.headers || {}).forEach(function (key) { return xhr.setRequestHeader(key, uploadFile.headers[key]); });
                formData_1.append(uploadFile.fileField || 'file', uploadFile.nativeFile, uploadFile.fileName);
                observer.next({ status: exports.ThyUploadStatus.started, uploadFile: uploadFile });
                xhr.send(formData_1);
            }
            catch (error) {
                observer.error(error);
                observer.complete();
            }
            return xhr;
        };
        ThyUploaderService.prototype.ensureFileName = function (uploadFile) {
            uploadFile.fileName = uploadFile.fileName || uploadFile.nativeFile.name;
        };
        /**
         * 上传单个文件
         * @param uploadFile 上传文件对象
         */
        ThyUploaderService.prototype.upload = function (uploadFile) {
            var _this = this;
            this.ensureFileName(uploadFile);
            return new rxjs.Observable(function (observer) {
                var xhr = _this.uploadByXhr(observer, uploadFile);
                return function () {
                    xhr.abort();
                };
            });
        };
        /**
         * 并发上传多个文件
         * @param uploadFiles 上传文件列表
         * @param concurrent 并发上传数, 默认 5
         * @param options onStared, onDone 回调
         */
        ThyUploaderService.prototype.uploadBulk = function (uploadFiles, concurrent, options) {
            var _this = this;
            if (concurrent === void 0) { concurrent = 5; }
            this.normalizeUploadFiles(uploadFiles);
            var result = rxjs.from(uploadFiles).pipe(operators.mergeMap(function (uploadFile) {
                return _this.upload(uploadFile).pipe(operators.tap(function (uploadResponse) {
                    if (options && options.onStarted && uploadResponse.status === exports.ThyUploadStatus.started) {
                        options.onStarted(uploadResponse.uploadFile);
                    }
                    if (options && options.onDone && uploadResponse.status === exports.ThyUploadStatus.done) {
                        options.onDone(uploadResponse.uploadFile);
                    }
                }));
            }, concurrent), operators.map(function (response) {
                return response;
            }));
            return result;
        };
ThyUploaderService.ɵfac = function ThyUploaderService_Factory(t) { return new (t || ThyUploaderService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory)); };
ThyUploaderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyUploaderService, factory: function (t) { return ThyUploaderService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyUploaderService, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: ɵngcc1.XhrFactory }]; }, null); })();
        return ThyUploaderService;
    }());
    ThyUploaderService.ctorParameters = function () { return [
        { type: http.HttpClient },
        { type: http.XhrFactory }
    ]; };

    // import { ThyDirectiveModule } from 'ngx-tethys/directive';
    var ThyUploaderModule = /** @class */ (function () {
        function ThyUploaderModule() {
        }
ThyUploaderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyUploaderModule });
ThyUploaderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyUploaderModule_Factory(t) { return new (t || ThyUploaderModule)(); }, providers: [ThyUploaderService, THY_UPLOADER_DEFAULT_OPTIONS_PROVIDER], imports: [[common.CommonModule, http.HttpClientModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyUploaderModule, { declarations: [ThyFileSelectComponent, ThyFileDropComponent, FileSelectBaseComponent], imports: [ɵngcc2.CommonModule, ɵngcc1.HttpClientModule], exports: [ThyFileSelectComponent, ThyFileDropComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyUploaderModule, [{
        type: core.NgModule,
        args: [{
                declarations: [ThyFileSelectComponent, ThyFileDropComponent, FileSelectBaseComponent],
                imports: [common.CommonModule, http.HttpClientModule],
                entryComponents: [ThyFileDropComponent],
                providers: [ThyUploaderService, THY_UPLOADER_DEFAULT_OPTIONS_PROVIDER],
                exports: [ThyFileSelectComponent, ThyFileDropComponent]
            }]
    }], function () { return []; }, null); })();
        return ThyUploaderModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.THY_UPLOADER_DEFAULT_OPTIONS = THY_UPLOADER_DEFAULT_OPTIONS;
    exports.THY_UPLOADER_DEFAULT_OPTIONS_PROVIDER = THY_UPLOADER_DEFAULT_OPTIONS_PROVIDER;
    exports.ThyFileDropComponent = ThyFileDropComponent;
    exports.ThyFileSelectComponent = ThyFileSelectComponent;
    exports.ThyUploaderModule = ThyUploaderModule;
    exports.ThyUploaderService = ThyUploaderService;
    exports.sizeExceedsHandler = sizeExceedsHandler;
    exports.ɵ0 = ɵ0;
    exports.ɵa = FileSelectBaseComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-uploader.umd.js.map
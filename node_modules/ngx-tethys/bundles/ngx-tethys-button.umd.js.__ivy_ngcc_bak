(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('ngx-tethys/icon'), require('ngx-tethys/core'), require('ngx-tethys/util')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/button', ['exports', '@angular/common', '@angular/core', 'ngx-tethys/icon', 'ngx-tethys/core', 'ngx-tethys/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].button = {}), global.ng.common, global.ng.core, global['ngx-tethys'].icon, global['ngx-tethys'].core, global['ngx-tethys'].util));
}(this, (function (exports, common, core, icon, core$1, util) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var buttonGroupSizeMap = {
        sm: ['btn-group-sm'],
        md: ['btn-group-md'],
        lg: ['btn-group-lg'],
        xs: ['btn-group-xs']
    };
    var buttonGroupTypeMap = {
        'outline-primary': ['btn-group-outline-primary'],
        'outline-default': ['btn-group-outline-default']
    };
    var ThyButtonGroupComponent = /** @class */ (function () {
        function ThyButtonGroupComponent(updateHostClassService, elementRef) {
            this.updateHostClassService = updateHostClassService;
            this.elementRef = elementRef;
            this.initialized = false;
            this._isButtonGroup = true;
            this.thyClearMinWidthClassName = false;
            this.updateHostClassService.initializeElement(elementRef.nativeElement);
        }
        Object.defineProperty(ThyButtonGroupComponent.prototype, "thySize", {
            set: function (size) {
                this.size = size;
                if (this.initialized) {
                    this.setClasses();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonGroupComponent.prototype, "thyType", {
            set: function (type) {
                this.type = type;
                if (this.initialized) {
                    this.setClasses();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonGroupComponent.prototype, "thyClearMinWidth", {
            set: function (value) {
                this.thyClearMinWidthClassName = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        ThyButtonGroupComponent.prototype.ngOnInit = function () {
            this.setClasses();
            this.initialized = true;
        };
        ThyButtonGroupComponent.prototype.setClasses = function () {
            var classNames = [];
            if (buttonGroupTypeMap[this.type]) {
                classNames = __spread(buttonGroupTypeMap[this.type]);
            }
            if (buttonGroupSizeMap[this.size]) {
                classNames.push(buttonGroupSizeMap[this.size]);
            }
            this.updateHostClassService.updateClass(classNames);
        };
        return ThyButtonGroupComponent;
    }());
    ThyButtonGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-button-group',
                    template: '<ng-content></ng-content>',
                    providers: [core$1.UpdateHostClassService],
                    encapsulation: core.ViewEncapsulation.None
                },] }
    ];
    ThyButtonGroupComponent.ctorParameters = function () { return [
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef }
    ]; };
    ThyButtonGroupComponent.propDecorators = {
        thySize: [{ type: core.Input }],
        thyType: [{ type: core.Input }],
        thyClearMinWidth: [{ type: core.Input }],
        _isButtonGroup: [{ type: core.HostBinding, args: ['class.btn-group',] }],
        thyClearMinWidthClassName: [{ type: core.HostBinding, args: ["class.btn-group-clear-min-width",] }]
    };

    var sizeClassesMap = {
        lg: ['btn-icon-lg'],
        sm: ['btn-icon-sm'],
        xs: ['btn-icon-xs']
    };
    var shapeClassesMap = {
        'circle-dashed': ['btn-icon-circle', 'circle-dashed'],
        'circle-solid': ['btn-icon-circle', 'circle-solid'],
        'circle-thick-dashed': ['btn-icon-circle', 'circle-dashed', 'border-thick'],
        'circle-thick-solid': ['btn-icon-circle', 'circle-solid', 'border-thick'],
        'self-icon': ['btn-icon-self-circle']
    };
    var themeClassesMap = {
        'danger-weak': ['btn-icon-danger-weak']
    };
    var ThyButtonIconComponent = /** @class */ (function () {
        function ThyButtonIconComponent(elementRef, updateHostClassService) {
            this.updateHostClassService = updateHostClassService;
            this.initialized = false;
            this.iconPrefix = 'wtf';
            this._isBtn = true;
            this._isBtnIcon = true;
            this._isLighted = false;
            this._isActive = false;
            this.updateHostClassService.initializeElement(elementRef.nativeElement);
        }
        Object.defineProperty(ThyButtonIconComponent.prototype, "thySize", {
            set: function (size) {
                this.size = size;
                this.setClasses();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonIconComponent.prototype, "thyIcon", {
            // 字体前缀，默认 wtf
            set: function (icon) {
                this.setIconClass(icon);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonIconComponent.prototype, "thyButtonIcon", {
            set: function (icon) {
                this.setIconClass(icon);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonIconComponent.prototype, "thyShape", {
            set: function (value) {
                this.shape = value;
                this.setClasses();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonIconComponent.prototype, "thyLight", {
            set: function (value) {
                this._isLighted = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonIconComponent.prototype, "thyActive", {
            set: function (value) {
                this._isActive = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonIconComponent.prototype, "thyTheme", {
            set: function (value) {
                this.theme = value;
                this.setClasses();
            },
            enumerable: false,
            configurable: true
        });
        ThyButtonIconComponent.prototype.setIconClass = function (icon) {
            if (icon) {
                if (icon.includes('wtf')) {
                    var classes = icon.split(' ');
                    if (classes.length === 1) {
                        classes.unshift('wtf');
                    }
                    this.iconClasses = classes;
                    this.svgIconName = null;
                }
                else {
                    this.svgIconName = icon;
                }
            }
            else {
                this.iconClasses = null;
                this.svgIconName = null;
            }
        };
        ThyButtonIconComponent.prototype.setClasses = function (first) {
            if (first === void 0) { first = false; }
            // 设置样式判断是否已经初始化，未初始化直接返回，除非是初次调用
            // 只有 ngOnInit 调用会传入 first = true
            if (!first && !this.initialized) {
                return;
            }
            var classes = sizeClassesMap[this.size] ? __spread(sizeClassesMap[this.size]) : [];
            if (this.shape && shapeClassesMap[this.shape]) {
                shapeClassesMap[this.shape].forEach(function (className) {
                    classes.push(className);
                });
            }
            if (this.theme && themeClassesMap[this.theme]) {
                themeClassesMap[this.theme].forEach(function (className) {
                    classes.push(className);
                });
            }
            this.updateHostClassService.updateClass(classes);
        };
        ThyButtonIconComponent.prototype.ngOnInit = function () {
            this.setClasses(true);
            this.initialized = true;
        };
        return ThyButtonIconComponent;
    }());
    ThyButtonIconComponent.decorators = [
        { type: core.Component, args: [{
                    selector: '[thy-button-icon],[thyButtonIcon]',
                    template: "<thy-icon\n  *ngIf=\"svgIconName; else iconFont\"\n  [thyIconName]=\"svgIconName\"\n  [style.color]=\"thyColor\"\n  [style.borderColor]=\"thyColor\"\n></thy-icon>\n<ng-template #iconFont>\n  <i [ngClass]=\"iconClasses\" *ngIf=\"iconClasses\" [style.color]=\"thyColor\" [style.borderColor]=\"thyColor\"></i>\n</ng-template>\n<ng-content></ng-content>\n",
                    providers: [core$1.UpdateHostClassService],
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ThyButtonIconComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core$1.UpdateHostClassService }
    ]; };
    ThyButtonIconComponent.propDecorators = {
        thySize: [{ type: core.Input }],
        thyIcon: [{ type: core.Input }],
        thyButtonIcon: [{ type: core.Input }],
        thyShape: [{ type: core.Input }],
        thyLight: [{ type: core.Input }],
        thyActive: [{ type: core.Input }],
        thyTheme: [{ type: core.Input }],
        _isBtn: [{ type: core.HostBinding, args: ['class.btn',] }],
        _isBtnIcon: [{ type: core.HostBinding, args: ['class.btn-icon',] }],
        _isLighted: [{ type: core.HostBinding, args: ['class.btn-icon-light',] }],
        _isActive: [{ type: core.HostBinding, args: ['class.btn-icon-active',] }],
        thyColor: [{ type: core.Input }]
    };

    var btnTypeClassesMap = {
        primary: ['btn', 'btn-primary'],
        secondary: ['btn', 'btn-primary', 'btn-md'],
        info: ['btn', 'btn-info'],
        warning: ['btn', 'btn-warning'],
        danger: ['btn', 'btn-danger'],
        'outline-primary': ['btn', 'btn-outline-primary'],
        'outline-default': ['btn', 'btn-outline-default'],
        link: ['btn', 'btn-link'],
        'link-info': ['btn', 'btn-link', 'btn-link-info'],
        'link-secondary': ['btn', 'btn-link', 'btn-link-primary-weak'],
        'link-danger-weak': ['btn', 'btn-link', 'btn-link-danger-weak'],
        'link-danger': ['btn', 'btn-link', 'btn-link-danger'],
        'link-success': ['btn', 'btn-link', 'btn-link-success'] // 成功按钮
    };
    var ThyButtonComponent = /** @class */ (function () {
        function ThyButtonComponent(elementRef, renderer, updateHostClassService) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.updateHostClassService = updateHostClassService;
            this._initialized = false;
            // 圆角方形
            this._isRadiusSquare = false;
            this._nativeElement = this.elementRef.nativeElement;
            this.updateHostClassService.initializeElement(this._nativeElement);
        }
        ThyButtonComponent.prototype._setBtnType = function (value) {
            if (value) {
                if (value.includes('-square')) {
                    this._type = value.replace('-square', '');
                    this._isRadiusSquare = true;
                }
                else {
                    this._type = value;
                }
                if (this._initialized) {
                    this._setClasses();
                }
            }
        };
        Object.defineProperty(ThyButtonComponent.prototype, "thyButton", {
            set: function (value) {
                this._setBtnType(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonComponent.prototype, "thyType", {
            set: function (value) {
                this._setBtnType(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonComponent.prototype, "thyLoading", {
            set: function (value) {
                var newLoading = util.coerceBooleanProperty(value);
                // from false to true
                if (!this._loading && newLoading) {
                    this._loading = newLoading;
                    this._originalText = this._nativeElement.innerText;
                    this._setLoadingStatus();
                }
                else {
                    this._loading = newLoading;
                    this._setLoadingStatus();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonComponent.prototype, "thyLoadingText", {
            set: function (value) {
                if (this._loadingText !== value) {
                    this._loadingText = value;
                    if (this._loading) {
                        this.renderer.setProperty(this._nativeElement, 'innerText', this._loadingText);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonComponent.prototype, "thySize", {
            set: function (size) {
                this._size = size;
                if (this._initialized) {
                    this._setClasses();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonComponent.prototype, "thyIcon", {
            set: function (icon) {
                this._icon = icon;
                if (this._icon) {
                    if (icon.includes('wtf')) {
                        var classes = this._icon.split(' ');
                        if (classes.length === 1) {
                            classes.unshift('wtf');
                        }
                        this._iconClass = classes;
                    }
                    else {
                        this.svgIconName = icon;
                    }
                }
                else {
                    this._iconClass = null;
                    this.svgIconName = null;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyButtonComponent.prototype, "thySquare", {
            set: function (value) {
                this._isRadiusSquare = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        ThyButtonComponent.prototype._setLoadingStatus = function () {
            // let disabled = false;
            var innerText;
            if (this._loading) {
                // disabled = true;
                innerText = this._loadingText ? this._loadingText : null;
            }
            else {
                // disabled = false;
                innerText = this._originalText ? this._originalText : null;
            }
            // this.renderer.setProperty(this._nativeElement, 'disabled', disabled);
            this._setClasses();
            if (innerText) {
                this.renderer.setProperty(this._nativeElement, 'innerText', innerText);
            }
        };
        ThyButtonComponent.prototype._setClasses = function () {
            var classNames = null;
            if (btnTypeClassesMap[this._type]) {
                classNames = __spread(btnTypeClassesMap[this._type]);
            }
            else {
                classNames = ['btn'];
                if (this._type) {
                    classNames.push("btn-" + this._type);
                }
                // console.error(`button type (${this._type}) is not support`);
            }
            if (this._size) {
                classNames.push("btn-" + this._size);
            }
            if (this._icon) {
                classNames.push('btn-has-icon');
            }
            if (this._isRadiusSquare) {
                classNames.push('btn-square');
            }
            if (this._loading) {
                classNames.push('loading');
            }
            this.updateHostClassService.updateClass(classNames);
        };
        ThyButtonComponent.prototype.ngOnInit = function () {
            this._setClasses();
            this._initialized = true;
        };
        return ThyButtonComponent;
    }());
    ThyButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: '[thy-button],[thyButton]',
                    template: "<thy-icon *ngIf=\"svgIconName; else iconFont\" [thyIconName]=\"svgIconName\"></thy-icon>\n<ng-template #iconFont>\n  <i [ngClass]=\"_iconClass\" *ngIf=\"_iconClass\"></i>\n</ng-template>\n<ng-content></ng-content>\n",
                    providers: [core$1.UpdateHostClassService],
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ThyButtonComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core$1.UpdateHostClassService }
    ]; };
    ThyButtonComponent.propDecorators = {
        thyButton: [{ type: core.Input }],
        thyType: [{ type: core.Input }],
        thyLoading: [{ type: core.Input }],
        thyLoadingText: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        thyIcon: [{ type: core.Input }],
        thySquare: [{ type: core.Input }]
    };

    var ThyButtonModule = /** @class */ (function () {
        function ThyButtonModule() {
        }
        return ThyButtonModule;
    }());
    ThyButtonModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyButtonComponent, ThyButtonIconComponent, ThyButtonGroupComponent],
                    imports: [common.CommonModule, icon.ThyIconModule],
                    exports: [ThyButtonComponent, ThyButtonIconComponent, ThyButtonGroupComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyButtonComponent = ThyButtonComponent;
    exports.ThyButtonGroupComponent = ThyButtonGroupComponent;
    exports.ThyButtonIconComponent = ThyButtonIconComponent;
    exports.ThyButtonModule = ThyButtonModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-button.umd.js.map

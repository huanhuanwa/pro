(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/forms'),require('ngx-tethys/core'),require('@angular/common'),require('ngx-tethys/icon'),require('ngx-tethys/alert'),require('ngx-tethys/input'),exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('ngx-tethys/core'), require('ngx-tethys/util'), require('ngx-tethys/input'), require('rxjs'), require('rxjs/operators'), require('ngx-tethys/alert'), require('ngx-tethys/icon')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/form', ['@angular/core','@angular/forms','ngx-tethys/core','@angular/common','ngx-tethys/icon','ngx-tethys/alert','ngx-tethys/input','exports', '@angular/core', '@angular/common', '@angular/forms', 'ngx-tethys/core', 'ngx-tethys/util', 'ngx-tethys/input', 'rxjs', 'rxjs/operators', 'ngx-tethys/alert', 'ngx-tethys/icon'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.forms,global.ngxTethys.core,global.ng.common,global.ngxTethys.icon,global.ngxTethys.alert,global.ngxTethys.input,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].form = {}), global.ng.core, global.ng.common, global.ng.forms, global['ngx-tethys'].core, global['ngx-tethys'].util, global['ngx-tethys'].input, global.rxjs, global.rxjs.operators, global['ngx-tethys'].alert, global['ngx-tethys'].icon));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,exports, core, common, forms, core$1, util, input, rxjs, operators, alert, icon) { 
var _c0 = ["formGroup"];
function ThyFormGroupComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "thy-icon", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r5.feedbackSvgIconName);
} }
function ThyFormGroupComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementContainer(1, 3);
    ɵngcc0.ɵɵtemplate(2, ThyFormGroupComponent_ng_container_0_ng_container_2_Template, 2, 1, "ng-container", 0);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    var _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.contentTemplateRef);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.feedbackSvgIconName)("ngIfElse", _r3);
} }
var _c1 = function (a0, a1, a2) { return { "col-sm-2 col-form-label": a0, "label-required": a1, "pt-0": a2 }; };
function ThyFormGroupComponent_ng_template_1_label_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(2, _c1, ctx_r6.isHorizontal, ctx_r6.labelRequired, ctx_r6.labelPaddingTopClear));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.labelText);
} }
function ThyFormGroupComponent_ng_template_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "thy-icon", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("thyIconName", ctx_r7.feedbackSvgIconName);
} }
function ThyFormGroupComponent_ng_template_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r8.tips);
} }
var _c2 = function (a0, a1) { return { "col-sm-10 col-form-control": a0, "position-relative": a1 }; };
function ThyFormGroupComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyFormGroupComponent_ng_template_1_label_0_Template, 2, 6, "label", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵtemplate(3, ThyFormGroupComponent_ng_template_1_ng_container_3_Template, 2, 1, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(4, ThyFormGroupComponent_ng_template_1_span_4_Template, 2, 1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    var _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("ngIf", !(!ctx_r2.isHorizontal && !ctx_r2.labelText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(5, _c2, ctx_r2.isHorizontal, !ctx_r2.isHorizontal));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.feedbackSvgIconName)("ngIfElse", _r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.tips);
} }
function ThyFormGroupComponent_ng_template_3_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMapInterpolate1("form-control-feedback ", ctx_r9.feedbackIcon, "");
} }
function ThyFormGroupComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ThyFormGroupComponent_ng_template_3_span_0_Template, 1, 3, "span", 10);
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.feedbackIcon);
} }
var _c3 = ["*"];
var _c4 = ["description"];
function ThyFormGroupFooterComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementContainer(1, 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.description);
} }
function ThyFormGroupErrorComponent_thy_alert_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "thy-alert", 2);
} if (rf & 2) {
    var error_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("thyMessage", error_r1);
} }
var _c5 = function (a0) { return { "col-sm-10 offset-sm-2 col-form-control": a0 }; };
'use strict';

    var THY_VALIDATOR_CONFIG = new core.InjectionToken('VALIDATION_CONFIG');
    var THY_FORM_CONFIG = new core.InjectionToken('THY_FORM_CONFIG');
    var ɵ0 = { layout: 'horizontal', footerAlign: 'left' };
    var THY_FORM_CONFIG_PROVIDER = {
        provide: THY_FORM_CONFIG,
        useValue: ɵ0
    };

    var ERROR_VALUE_REPLACE_REGEX = /\{(.+?)\}/g;
    var INVALID_CLASS = 'is-invalid';
    var INVALID_FEEDBACK_CLASS = 'invalid-feedback';
    var defaultValidatorConfig = {
        showElementError: true,
        removeElementError: true,
        validationMessages: {}
    };
    var globalValidationMessages = {
        required: '该选项不能为空',
        maxlength: '该选项输入值长度不能大于{maxlength}',
        minlength: '该选项输入值长度不能小于{minlength}',
        thyUniqueCheck: '输入值已经存在，请重新输入',
        email: '输入邮件的格式不正确',
        confirm: '两次输入不一致',
        pattern: '该选项输入格式不正确',
        number: '必须输入数字',
        url: '输入URL格式不正确',
        max: '该选项输入值不能大于{max}',
        min: '该选项输入值不能小于{min}'
    };
    var ThyFormValidatorLoader = /** @class */ (function () {
        function ThyFormValidatorLoader(config) {
            this.config = Object.assign({}, defaultValidatorConfig, config);
        }
        ThyFormValidatorLoader.prototype.getDefaultValidationMessage = function (key) {
            if (this.config.globalValidationMessages && this.config.globalValidationMessages[key]) {
                return this.config.globalValidationMessages[key];
            }
            else {
                return globalValidationMessages[key];
            }
        };
        Object.defineProperty(ThyFormValidatorLoader.prototype, "validationMessages", {
            get: function () {
                return this.config.validationMessages;
            },
            enumerable: false,
            configurable: true
        });
        ThyFormValidatorLoader.prototype.getErrorMessage = function (name, key) {
            if (this.validationMessages[name] && this.validationMessages[name][key]) {
                return this.validationMessages[name][key];
            }
            else {
                return this.getDefaultValidationMessage(key);
            }
        };
        ThyFormValidatorLoader.prototype.getErrorMessages = function (name, validationErrors) {
            var messages = [];
            for (var validationError in validationErrors) {
                if (validationErrors.hasOwnProperty(validationError)) {
                    messages.push(this.getErrorMessage(name, validationError));
                }
            }
            return messages;
        };
        ThyFormValidatorLoader.prototype.defaultShowError = function (element, errorMessages) {
            if (element && element.parentElement) {
                var documentFrag = document.createDocumentFragment();
                var divNode = document.createElement('DIV');
                var textNode = document.createTextNode(errorMessages[0]);
                divNode.appendChild(textNode);
                divNode.setAttribute('class', INVALID_FEEDBACK_CLASS);
                documentFrag.appendChild(divNode);
                element.parentElement.append(documentFrag);
            }
        };
        ThyFormValidatorLoader.prototype.defaultRemoveError = function (element) {
            if (element && element.parentElement) {
                var invalidFeedback = element.parentElement.querySelector('.invalid-feedback');
                element.parentElement.removeChild(invalidFeedback);
            }
        };
        ThyFormValidatorLoader.prototype.removeError = function (element) {
            element.classList.remove(INVALID_CLASS);
            if (util.helpers.isFunction(this.config.removeElementError)) {
                this.config.removeElementError(element);
            }
            else if (this.config.showElementError) {
                this.defaultRemoveError(element);
            }
            else {
                // do nothings
            }
        };
        ThyFormValidatorLoader.prototype.showError = function (element, errorMessages) {
            element.classList.add(INVALID_CLASS);
            if (util.helpers.isFunction(this.config.showElementError)) {
                this.config.showElementError(element, errorMessages);
            }
            else if (this.config.showElementError) {
                this.defaultShowError(element, errorMessages);
            }
            else {
                // do nothings
            }
        };
        ThyFormValidatorLoader.prototype.addValidationMessages = function (messages) {
            Object.assign(this.config.validationMessages, messages);
        };
        ThyFormValidatorLoader.prototype.setGlobalValidationMessages = function (validationMessages) {
            this.config.globalValidationMessages = validationMessages;
        };
ThyFormValidatorLoader.ɵfac = function ThyFormValidatorLoader_Factory(t) { return new (t || ThyFormValidatorLoader)(ɵngcc0.ɵɵinject(THY_VALIDATOR_CONFIG, 8)); };
ThyFormValidatorLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyFormValidatorLoader, factory: function (t) { return ThyFormValidatorLoader.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormValidatorLoader, [{
        type: core.Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [THY_VALIDATOR_CONFIG]
            }] }]; }, null); })();
        return ThyFormValidatorLoader;
    }());
    ThyFormValidatorLoader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [THY_VALIDATOR_CONFIG,] }] }
    ]; };

    var ThyFormValidatorService = /** @class */ (function () {
        function ThyFormValidatorService(thyFormValidateLoader) {
            this.thyFormValidateLoader = thyFormValidateLoader;
            this.errors = [];
            // 记录所有元素的验证信息
            this.validations = {};
        }
        ThyFormValidatorService.prototype._getElement = function (name) {
            var element = this._formElement[name];
            if (element) {
                return element;
            }
            else {
                return this._formElement.querySelector("[name='" + name + "']");
            }
        };
        ThyFormValidatorService.prototype._clearElementError = function (name) {
            if (this.validations[name] && this.validations[name].hasError) {
                this.validations[name].hasError = false;
                this.validations[name].errorMessages = [];
                this.thyFormValidateLoader.removeError(this._getElement(name));
            }
        };
        ThyFormValidatorService.prototype._tryGetValidation = function (name) {
            if (!this.validations[name]) {
                this._initializeFormControlValidation(name, this._ngForm.controls[name]);
            }
            return this.validations[name];
        };
        ThyFormValidatorService.prototype._addError = function (message) {
            this.errors.unshift(message);
        };
        ThyFormValidatorService.prototype._clearErrors = function () {
            this.errors = [];
        };
        ThyFormValidatorService.prototype._initializeFormControlValidation = function (name, control) {
            var _this = this;
            this.validations[name] = {
                hasError: false,
                errorMessages: []
            };
            control.valueChanges.subscribe(function () {
                _this._clearElementError(name);
                _this._clearErrors();
            });
        };
        ThyFormValidatorService.prototype._restFormControlValidation = function (name) {
            var validation = this.validations[name];
            if (validation) {
                validation.hasError = false;
                validation.errorMessages = [];
            }
        };
        ThyFormValidatorService.prototype._formatValidationMessage = function (name, message) {
            var control = this._ngForm.controls[name];
            if (control) {
                return message.replace(ERROR_VALUE_REPLACE_REGEX, function (tag, key) {
                    if (key) {
                        return control.errors[key][key] || control.errors[key].requiredLength;
                    }
                });
            }
            else {
                return message;
            }
        };
        ThyFormValidatorService.prototype._getValidationMessage = function (name, validationError) {
            var message = null;
            if (this._config &&
                this._config.validationMessages &&
                this._config.validationMessages[name] &&
                this._config.validationMessages[name][validationError]) {
                message = this._config.validationMessages[name][validationError];
            }
            else {
                message = this.thyFormValidateLoader.getErrorMessage(name, validationError);
            }
            return this._formatValidationMessage(name, message);
        };
        ThyFormValidatorService.prototype._getValidationMessages = function (name, validationErrors) {
            var messages = [];
            for (var validationError in validationErrors) {
                if (validationErrors.hasOwnProperty(validationError)) {
                    messages.push(this._getValidationMessage(name, validationError));
                }
            }
            return messages;
        };
        ThyFormValidatorService.prototype._setControlValidationError = function (name, errorMessages) {
            var validation = this._tryGetValidation(name);
            validation.errorMessages = errorMessages;
            validation.hasError = true;
            this.thyFormValidateLoader.showError(this._getElement(name), errorMessages);
        };
        ThyFormValidatorService.prototype.initialize = function (ngForm, formElement) {
            this._ngForm = ngForm;
            this._formElement = formElement;
        };
        ThyFormValidatorService.prototype.setValidatorConfig = function (config) {
            this._config = config;
        };
        ThyFormValidatorService.prototype.validateControl = function (name) {
            this._clearElementError(name);
            var control = this._ngForm.controls[name];
            if (control && control.invalid) {
                var errorMessages = this._getValidationMessages(name, control.errors);
                this._setControlValidationError(name, errorMessages);
            }
        };
        ThyFormValidatorService.prototype.validateControls = function () {
            var _this = this;
            // 主要是 无法检测到 ngForm 的 controls 的变化，或者是我没有找到
            // 验证的时候循环 ngForm 的 controls 验证
            // 发现没有 validation 初始化一个，已经存在不会重新初始化，保存缓存数据
            for (var name in this._ngForm.controls) {
                if (this._ngForm.controls.hasOwnProperty(name)) {
                    this._tryGetValidation(name);
                    this.validateControl(name);
                }
            }
            // 移除已经不存在的 validation
            var names = Object.keys(this.validations);
            names.forEach(function (name) {
                if (!_this._ngForm.controls[name]) {
                    delete _this.validations[name];
                }
            });
        };
        ThyFormValidatorService.prototype.addError = function (message) {
            this._addError(message);
        };
        ThyFormValidatorService.prototype.validate = function ($event) {
            this._ngForm.onSubmit($event);
            this.validateControls();
            return this._ngForm.valid;
        };
        ThyFormValidatorService.prototype.reset = function () {
            this._ngForm.reset();
            for (var name in this.validations) {
                if (this.validations.hasOwnProperty(name)) {
                    this._restFormControlValidation(name);
                    this._clearElementError(name);
                }
            }
        };
        ThyFormValidatorService.prototype.setElementErrorMessage = function (name, message) {
            this._clearElementError(name);
            this._setControlValidationError(name, [message]);
        };
ThyFormValidatorService.ɵfac = function ThyFormValidatorService_Factory(t) { return new (t || ThyFormValidatorService)(ɵngcc0.ɵɵinject(ThyFormValidatorLoader)); };
ThyFormValidatorService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyFormValidatorService, factory: function (t) { return ThyFormValidatorService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormValidatorService, [{
        type: core.Injectable
    }], function () { return [{ type: ThyFormValidatorLoader }]; }, null); })();
        return ThyFormValidatorService;
    }());
    ThyFormValidatorService.ctorParameters = function () { return [
        { type: ThyFormValidatorLoader }
    ]; };

    // 1. submit 按 Enter 键提交, Textare或包含[contenteditable]属性的元素 除外，需要按 Ctrl | Command + Enter 提交
    // 2. alwaysSubmit 不管是哪个元素 按 Enter 键都提交
    // 3. forbidSubmit Enter 键禁止提交
    // 默认 submit
    exports.ThyEnterKeyMode = void 0;
    (function (ThyEnterKeyMode) {
        ThyEnterKeyMode["submit"] = "submit";
        ThyEnterKeyMode["alwaysSubmit"] = "alwaysSubmit";
        ThyEnterKeyMode["forbidSubmit"] = "forbidSubmit";
    })(exports.ThyEnterKeyMode || (exports.ThyEnterKeyMode = {}));
    var ThyFormDirective = /** @class */ (function () {
        function ThyFormDirective(ngForm, elementRef, renderer, ngZone, updateHostClassService, validator, config) {
            this.ngForm = ngForm;
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.updateHostClassService = updateHostClassService;
            this.validator = validator;
            this.config = config;
            this.initialized = false;
            this.wasValidated = false;
            this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
            this.layout = this.config.layout;
        }
        Object.defineProperty(ThyFormDirective.prototype, "thyLayout", {
            get: function () {
                return this.layout;
            },
            set: function (value) {
                if (value) {
                    this.layout = value;
                    if (this.initialized) {
                        this.updateClasses();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormDirective.prototype, "isHorizontal", {
            get: function () {
                return this.layout === 'horizontal';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormDirective.prototype, "thyFormValidatorConfig", {
            set: function (config) {
                this.validator.setValidatorConfig(config);
            },
            enumerable: false,
            configurable: true
        });
        ThyFormDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.ngZone.runOutsideAngular(function () {
                _this._unsubscribe = _this.renderer.listen(_this.elementRef.nativeElement, 'keydown', _this.onKeydown.bind(_this));
            });
            this.updateClasses();
            this.initialized = true;
            this.validator.initialize(this.ngForm, this.elementRef.nativeElement);
        };
        ThyFormDirective.prototype.submit = function ($event) {
            if (this.validator.validate($event)) {
                this.onSubmitSuccess($event);
            }
            else {
                // this.wasValidated = true;
            }
        };
        ThyFormDirective.prototype.updateClasses = function () {
            var _a;
            this.updateHostClassService.updateClassByMap((_a = {},
                _a["thy-form-" + this.thyLayout] = true,
                _a));
        };
        ThyFormDirective.prototype.submitRunInZone = function ($event) {
            var _this = this;
            this.ngZone.run(function () {
                _this.submit($event);
            });
        };
        ThyFormDirective.prototype.onKeydown = function ($event) {
            var currentInput = document.activeElement;
            var key = $event.which || $event.keyCode;
            if (key === util.keycodes.ENTER && currentInput.tagName) {
                if (!this.thyEnterKeyMode || this.thyEnterKeyMode === exports.ThyEnterKeyMode.submit) {
                    // TEXTAREA或包含[contenteditable]属性的元素 Ctrl + Enter 或者 Command + Enter 阻止默认行为并提交
                    if (currentInput.tagName === 'TEXTAREA' || util.coerceBooleanProperty(currentInput.getAttribute('contenteditable'))) {
                        if ($event.ctrlKey || $event.metaKey) {
                            $event.preventDefault();
                            this.submitRunInZone($event);
                        }
                    }
                    else {
                        // 不是 TEXTAREA Enter 阻止默认行为并提交
                        $event.preventDefault();
                        this.submitRunInZone($event);
                    }
                }
                else if (this.thyEnterKeyMode === exports.ThyEnterKeyMode.alwaysSubmit) {
                    $event.preventDefault();
                    this.submitRunInZone($event);
                }
                else {
                    // do nothing
                }
            }
        };
        ThyFormDirective.prototype.ngOnDestroy = function () {
            if (this._unsubscribe) {
                this._unsubscribe();
                this._unsubscribe = null;
            }
        };
ThyFormDirective.ɵfac = function ThyFormDirective_Factory(t) { return new (t || ThyFormDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgForm), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ThyFormValidatorService), ɵngcc0.ɵɵdirectiveInject(THY_FORM_CONFIG)); };
ThyFormDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyFormDirective, selectors: [["", "thyForm", ""], ["", "thy-form", ""]], hostAttrs: [1, "thy-form"], hostVars: 2, hostBindings: function ThyFormDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("was-validated", ctx.wasValidated);
    } }, inputs: { thyLayout: "thyLayout", thyFormValidatorConfig: "thyFormValidatorConfig", thyEnterKeyMode: "thyEnterKeyMode" }, exportAs: ["thyForm"], features: [ɵngcc0.ɵɵProvidersFeature([core$1.UpdateHostClassService, ThyFormValidatorService])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormDirective, [{
        type: core.Directive,
        args: [{
                selector: '[thyForm],[thy-form]',
                providers: [core$1.UpdateHostClassService, ThyFormValidatorService],
                exportAs: 'thyForm',
                host: {
                    class: 'thy-form'
                }
            }]
    }], function () { return [{ type: ɵngcc1.NgForm }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.UpdateHostClassService }, { type: ThyFormValidatorService }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [THY_FORM_CONFIG]
            }] }]; }, { wasValidated: [{
            type: core.HostBinding,
            args: ['class.was-validated']
        }], thyLayout: [{
            type: core.Input
        }], thyFormValidatorConfig: [{
            type: core.Input
        }], thyEnterKeyMode: [{
            type: core.Input
        }] }); })();
        return ThyFormDirective;
    }());
    ThyFormDirective.ctorParameters = function () { return [
        { type: forms.NgForm },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.NgZone },
        { type: core$1.UpdateHostClassService },
        { type: ThyFormValidatorService },
        { type: undefined, decorators: [{ type: core.Inject, args: [THY_FORM_CONFIG,] }] }
    ]; };
    ThyFormDirective.propDecorators = {
        thyLayout: [{ type: core.Input }],
        thyEnterKeyMode: [{ type: core.Input }],
        thyFormValidatorConfig: [{ type: core.Input }],
        wasValidated: [{ type: core.HostBinding, args: ['class.was-validated',] }]
    };

    var internalIconMap = {
        date: 'wtf wtf-schedule-o'
    };
    var ThyFormGroupComponent = /** @class */ (function () {
        function ThyFormGroupComponent(thyParentForm, thyTranslate) {
            this.thyParentForm = thyParentForm;
            this.thyTranslate = thyTranslate;
            this.labelRequired = false;
            this.labelPaddingTopClear = false;
            this._rowFill = false;
            this._isFormGroup = true;
            this.isHorizontal = true;
            this.hasFeedback = false;
        }
        Object.defineProperty(ThyFormGroupComponent.prototype, "thyLabelText", {
            set: function (value) {
                this.labelText = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupComponent.prototype, "thyLabelTextTranslateKey", {
            set: function (value) {
                if (value) {
                    this.labelText = this.thyTranslate.instant(value);
                }
                else {
                    this.labelText = '';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupComponent.prototype, "thyLabelRequired", {
            set: function (value) {
                this.labelRequired = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupComponent.prototype, "thyLabelPaddingTopClear", {
            set: function (value) {
                this.labelPaddingTopClear = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupComponent.prototype, "thyFeedbackIcon", {
            set: function (value) {
                this.hasFeedback = true;
                if (internalIconMap[value]) {
                    this.feedbackIcon = internalIconMap[value];
                    this.feedbackSvgIconName = null;
                }
                else {
                    this.feedbackSvgIconName = value;
                    this.feedbackIcon = null;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupComponent.prototype, "thyTips", {
            set: function (value) {
                this.tips = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupComponent.prototype, "thyTipsTranslateKey", {
            set: function (value) {
                this.tips = this.thyTranslate.instant(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupComponent.prototype, "thyRowFill", {
            set: function (value) {
                this._rowFill = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        ThyFormGroupComponent.prototype.ngOnInit = function () {
            this.isHorizontal = this.thyParentForm ? this.thyParentForm.isHorizontal : true;
        };
ThyFormGroupComponent.ɵfac = function ThyFormGroupComponent_Factory(t) { return new (t || ThyFormGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ThyFormDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyTranslate)); };
ThyFormGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFormGroupComponent, selectors: [["thy-form-group"]], contentQueries: function ThyFormGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplateRef = _t.first);
    } }, hostVars: 8, hostBindings: function ThyFormGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("row-fill", ctx._rowFill)("form-group", ctx._isFormGroup)("row", ctx.isHorizontal)("has-feedback", ctx.hasFeedback);
    } }, inputs: { thyLabelText: "thyLabelText", thyLabelTextTranslateKey: "thyLabelTextTranslateKey", thyLabelRequired: "thyLabelRequired", thyLabelPaddingTopClear: "thyLabelPaddingTopClear", thyFeedbackIcon: "thyFeedbackIcon", thyTips: "thyTips", thyTipsTranslateKey: "thyTipsTranslateKey", thyRowFill: "thyRowFill" }, ngContentSelectors: _c3, decls: 5, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["defaultTpl", ""], ["iconFont", ""], [3, "ngTemplateOutlet"], [1, "form-control-feedback", 3, "thyIconName"], ["class", "form-label ", 3, "ngClass", 4, "ngIf"], [3, "ngClass"], ["class", "form-text text-desc", 4, "ngIf"], [1, "form-label", 3, "ngClass"], [1, "form-text", "text-desc"], [3, "class", 4, "ngIf"]], template: function ThyFormGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ThyFormGroupComponent_ng_container_0_Template, 3, 3, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, ThyFormGroupComponent_ng_template_1_Template, 5, 8, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(3, ThyFormGroupComponent_ng_template_3_Template, 1, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.contentTemplateRef)("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.ThyIconComponent, ɵngcc3.NgClass], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormGroupComponent, [{
        type: core.Component,
        args: [{
                selector: 'thy-form-group',
                template: "<ng-container *ngIf=\"contentTemplateRef; else defaultTpl\">\n  <ng-container [ngTemplateOutlet]=\"contentTemplateRef\"></ng-container>\n  <ng-container *ngIf=\"feedbackSvgIconName; else iconFont\">\n    <thy-icon class=\"form-control-feedback\" [thyIconName]=\"feedbackSvgIconName\"></thy-icon>\n  </ng-container>\n</ng-container>\n<ng-template #defaultTpl>\n  <label\n    *ngIf=\"!(!isHorizontal && !labelText)\"\n    class=\"form-label \"\n    [ngClass]=\"{\n      'col-sm-2 col-form-label': isHorizontal,\n      'label-required': labelRequired,\n      'pt-0': labelPaddingTopClear\n    }\"\n    >{{ labelText }}</label\n  >\n  <div [ngClass]=\"{ 'col-sm-10 col-form-control': isHorizontal, 'position-relative': !isHorizontal }\">\n    <ng-content></ng-content>\n    <ng-container *ngIf=\"feedbackSvgIconName; else iconFont\">\n      <thy-icon class=\"form-control-feedback\" [thyIconName]=\"feedbackSvgIconName\"></thy-icon>\n    </ng-container>\n    <span *ngIf=\"tips\" class=\"form-text text-desc\">{{ tips }}</span>\n  </div>\n</ng-template>\n\n<ng-template #iconFont>\n  <span *ngIf=\"feedbackIcon\" class=\"form-control-feedback {{ feedbackIcon }}\"></span>\n</ng-template>\n",
                encapsulation: core.ViewEncapsulation.None,
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ThyFormDirective, decorators: [{
                type: core.Optional
            }] }, { type: ɵngcc2.ThyTranslate }]; }, { _rowFill: [{
            type: core.HostBinding,
            args: ['class.row-fill']
        }], _isFormGroup: [{
            type: core.HostBinding,
            args: ['class.form-group']
        }], isHorizontal: [{
            type: core.HostBinding,
            args: ['class.row']
        }], hasFeedback: [{
            type: core.HostBinding,
            args: ['class.has-feedback']
        }], thyLabelText: [{
            type: core.Input
        }], thyLabelTextTranslateKey: [{
            type: core.Input
        }], thyLabelRequired: [{
            type: core.Input
        }], thyLabelPaddingTopClear: [{
            type: core.Input
        }], thyFeedbackIcon: [{
            type: core.Input
        }], thyTips: [{
            type: core.Input
        }], thyTipsTranslateKey: [{
            type: core.Input
        }], thyRowFill: [{
            type: core.Input
        }], contentTemplateRef: [{
            type: core.ContentChild,
            args: ['formGroup']
        }] }); })();
        return ThyFormGroupComponent;
    }());
    ThyFormGroupComponent.ctorParameters = function () { return [
        { type: ThyFormDirective, decorators: [{ type: core.Optional }] },
        { type: core$1.ThyTranslate }
    ]; };
    ThyFormGroupComponent.propDecorators = {
        _rowFill: [{ type: core.HostBinding, args: ['class.row-fill',] }],
        _isFormGroup: [{ type: core.HostBinding, args: ['class.form-group',] }],
        isHorizontal: [{ type: core.HostBinding, args: ['class.row',] }],
        hasFeedback: [{ type: core.HostBinding, args: ['class.has-feedback',] }],
        thyLabelText: [{ type: core.Input }],
        thyLabelTextTranslateKey: [{ type: core.Input }],
        thyLabelRequired: [{ type: core.Input }],
        thyLabelPaddingTopClear: [{ type: core.Input }],
        thyFeedbackIcon: [{ type: core.Input }],
        thyTips: [{ type: core.Input }],
        thyTipsTranslateKey: [{ type: core.Input }],
        thyRowFill: [{ type: core.Input }],
        contentTemplateRef: [{ type: core.ContentChild, args: ['formGroup',] }]
    };

    var ThyFormGroupLabelDirective = /** @class */ (function () {
        function ThyFormGroupLabelDirective(thyTranslate) {
            this.thyTranslate = thyTranslate;
            this.labelRequired = false;
            this._isFormGroupLabel = true;
        }
        Object.defineProperty(ThyFormGroupLabelDirective.prototype, "thyLabelText", {
            set: function (value) {
                this.labelText = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupLabelDirective.prototype, "thyLabelTranslateKey", {
            set: function (translateKey) {
                if (translateKey) {
                    this.labelText = this.thyTranslate.instant(translateKey);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupLabelDirective.prototype, "thyLabelRequired", {
            set: function (value) {
                this.labelRequired = util.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
ThyFormGroupLabelDirective.ɵfac = function ThyFormGroupLabelDirective_Factory(t) { return new (t || ThyFormGroupLabelDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThyTranslate)); };
ThyFormGroupLabelDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyFormGroupLabelDirective, selectors: [["", "thyFormGroupLabel", ""]], hostVars: 4, hostBindings: function ThyFormGroupLabelDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("label-required", ctx.labelRequired)("col-form-label", ctx._isFormGroupLabel);
    } }, inputs: { thyLabelText: "thyLabelText", thyLabelTranslateKey: "thyLabelTranslateKey", thyLabelRequired: "thyLabelRequired" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormGroupLabelDirective, [{
        type: core.Directive,
        args: [{
                selector: '[thyFormGroupLabel]'
            }]
    }], function () { return [{ type: ɵngcc2.ThyTranslate }]; }, { labelRequired: [{
            type: core.HostBinding,
            args: ['class.label-required']
        }], _isFormGroupLabel: [{
            type: core.HostBinding,
            args: ['class.col-form-label']
        }], thyLabelText: [{
            type: core.Input
        }], thyLabelTranslateKey: [{
            type: core.Input
        }], thyLabelRequired: [{
            type: core.Input
        }] }); })();
        return ThyFormGroupLabelDirective;
    }());
    ThyFormGroupLabelDirective.ctorParameters = function () { return [
        { type: core$1.ThyTranslate }
    ]; };
    ThyFormGroupLabelDirective.propDecorators = {
        labelRequired: [{ type: core.HostBinding, args: ['class.label-required',] }],
        _isFormGroupLabel: [{ type: core.HostBinding, args: ['class.col-form-label',] }],
        thyLabelText: [{ type: core.Input }],
        thyLabelTranslateKey: [{ type: core.Input }],
        thyLabelRequired: [{ type: core.Input }]
    };

    var ThyFormSubmitDirective = /** @class */ (function () {
        function ThyFormSubmitDirective(ngForm, thyFormDirective) {
            this.ngForm = ngForm;
            this.thyFormDirective = thyFormDirective;
            this.thyFormSubmit = new core.EventEmitter();
        }
        ThyFormSubmitDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.thyFormDirective.onSubmitSuccess = function ($event) {
                _this.thyFormSubmit.emit($event);
            };
        };
        ThyFormSubmitDirective.prototype.onSubmit = function ($event) {
            this.thyFormDirective.submit($event);
        };
ThyFormSubmitDirective.ɵfac = function ThyFormSubmitDirective_Factory(t) { return new (t || ThyFormSubmitDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgForm), ɵngcc0.ɵɵdirectiveInject(ThyFormDirective)); };
ThyFormSubmitDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyFormSubmitDirective, selectors: [["", "thyFormSubmit", ""], ["", "thy-form-submit", ""]], hostBindings: function ThyFormSubmitDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ThyFormSubmitDirective_click_HostBindingHandler($event) { return ctx.onSubmit($event); });
    } }, outputs: { thyFormSubmit: "thyFormSubmit" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormSubmitDirective, [{
        type: core.Directive,
        args: [{
                selector: '[thyFormSubmit],[thy-form-submit]'
            }]
    }], function () { return [{ type: ɵngcc1.NgForm }, { type: ThyFormDirective }]; }, { thyFormSubmit: [{
            type: core.Output
        }], onSubmit: [{
            type: core.HostListener,
            args: ['click', ['$event']]
        }] }); })();
        return ThyFormSubmitDirective;
    }());
    ThyFormSubmitDirective.ctorParameters = function () { return [
        { type: forms.NgForm },
        { type: ThyFormDirective }
    ]; };
    ThyFormSubmitDirective.propDecorators = {
        thyFormSubmit: [{ type: core.Output }],
        onSubmit: [{ type: core.HostListener, args: ['click', ['$event'],] }]
    };

    var ThyFormGroupFooterComponent = /** @class */ (function () {
        function ThyFormGroupFooterComponent(thyParentForm, defaultConfig) {
            this.thyParentForm = thyParentForm;
            this.defaultConfig = defaultConfig;
            this._isFormGroup = true;
            this.isHorizontal = true;
            this.footerClassMap = {};
        }
        Object.defineProperty(ThyFormGroupFooterComponent.prototype, "align", {
            get: function () {
                return !!this.thyAlign ? this.thyAlign : this.defaultConfig.footerAlign;
            },
            enumerable: false,
            configurable: true
        });
        ThyFormGroupFooterComponent.prototype.ngOnInit = function () {
            if (this.thyParentForm) {
                this.isHorizontal = this.thyParentForm.isHorizontal;
            }
            this.setFooterClassMap();
        };
        ThyFormGroupFooterComponent.prototype.setFooterClassMap = function () {
            var _a;
            this.footerClassMap = (_a = {
                    'form-group-footer': true,
                    'col-sm-10 offset-sm-2 col-form-control': this.isHorizontal
                },
                _a["form-group-footer-align-" + this.align] = true,
                _a);
        };
ThyFormGroupFooterComponent.ɵfac = function ThyFormGroupFooterComponent_Factory(t) { return new (t || ThyFormGroupFooterComponent)(ɵngcc0.ɵɵdirectiveInject(ThyFormDirective, 8), ɵngcc0.ɵɵdirectiveInject(THY_FORM_CONFIG)); };
ThyFormGroupFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFormGroupFooterComponent, selectors: [["thy-form-group-footer"]], contentQueries: function ThyFormGroupFooterComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.description = _t.first);
    } }, hostVars: 4, hostBindings: function ThyFormGroupFooterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("form-group", ctx._isFormGroup)("row", ctx.isHorizontal);
    } }, inputs: { thyAlign: "thyAlign" }, ngContentSelectors: _c3, decls: 4, vars: 2, consts: [[3, "ngClass"], [1, "btn-pair", "form-footer-actions"], ["class", "form-footer-description", 4, "ngIf"], [1, "form-footer-description"], [3, "ngTemplateOutlet"]], template: function ThyFormGroupFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ThyFormGroupFooterComponent_div_3_Template, 2, 1, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.footerClassMap);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.description);
    } }, directives: [ɵngcc3.NgClass, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormGroupFooterComponent, [{
        type: core.Component,
        args: [{
                selector: 'thy-form-group-footer',
                template: "<div [ngClass]=\"footerClassMap\">\n  <div class=\"btn-pair form-footer-actions\">\n    <ng-content></ng-content>\n  </div>\n\n  <div class=\"form-footer-description\" *ngIf=\"description\">\n    <ng-container [ngTemplateOutlet]=\"description\"></ng-container>\n  </div>\n</div>\n",
                encapsulation: core.ViewEncapsulation.None
            }]
    }], function () { return [{ type: ThyFormDirective, decorators: [{
                type: core.Optional
            }] }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [THY_FORM_CONFIG]
            }] }]; }, { _isFormGroup: [{
            type: core.HostBinding,
            args: ['class.form-group']
        }], isHorizontal: [{
            type: core.HostBinding,
            args: ['class.row']
        }], description: [{
            type: core.ContentChild,
            args: ['description']
        }], thyAlign: [{
            type: core.Input
        }] }); })();
        return ThyFormGroupFooterComponent;
    }());
    ThyFormGroupFooterComponent.ctorParameters = function () { return [
        { type: ThyFormDirective, decorators: [{ type: core.Optional }] },
        { type: undefined, decorators: [{ type: core.Inject, args: [THY_FORM_CONFIG,] }] }
    ]; };
    ThyFormGroupFooterComponent.propDecorators = {
        _isFormGroup: [{ type: core.HostBinding, args: ['class.form-group',] }],
        isHorizontal: [{ type: core.HostBinding, args: ['class.row',] }],
        description: [{ type: core.ContentChild, args: ['description',] }],
        thyAlign: [{ type: core.Input }]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ThyFormGroupErrorComponent = /** @class */ (function () {
        function ThyFormGroupErrorComponent(thyParentForm) {
            this.thyParentForm = thyParentForm;
            this.thyShowFirst = true;
            this.isHorizontal = true;
        }
        Object.defineProperty(ThyFormGroupErrorComponent.prototype, "thyErrors", {
            get: function () {
                var errors = this.errors || this.thyParentForm.validator.errors;
                return errors && errors.length > 0 && this.thyShowFirst ? [errors[0]] : errors;
            },
            set: function (errors) {
                this.errors = errors;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyFormGroupErrorComponent.prototype, "_isFormGroup", {
            get: function () {
                return this.thyErrors && this.thyErrors.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        ThyFormGroupErrorComponent.prototype.ngOnInit = function () {
            if (this.thyParentForm) {
                this.isHorizontal = this.thyParentForm.isHorizontal;
            }
        };
ThyFormGroupErrorComponent.ɵfac = function ThyFormGroupErrorComponent_Factory(t) { return new (t || ThyFormGroupErrorComponent)(ɵngcc0.ɵɵdirectiveInject(ThyFormDirective, 8)); };
ThyFormGroupErrorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFormGroupErrorComponent, selectors: [["thy-form-group-error"]], hostVars: 4, hostBindings: function ThyFormGroupErrorComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("row", ctx.isHorizontal)("form-group", ctx._isFormGroup);
    } }, inputs: { thyShowFirst: "thyShowFirst", thyErrors: "thyErrors" }, decls: 2, vars: 4, consts: [[3, "ngClass"], ["thyType", "danger", 3, "thyMessage", 4, "ngFor", "ngForOf"], ["thyType", "danger", 3, "thyMessage"]], template: function ThyFormGroupErrorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ThyFormGroupErrorComponent_thy_alert_1_Template, 1, 1, "thy-alert", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c5, ctx.isHorizontal));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.thyErrors);
    } }, directives: [ɵngcc3.NgClass, ɵngcc3.NgForOf, ɵngcc5.ThyAlertComponent], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormGroupErrorComponent, [{
        type: core.Component,
        args: [{
                selector: 'thy-form-group-error',
                template: "<div [ngClass]=\"{ 'col-sm-10 offset-sm-2 col-form-control': isHorizontal }\">\n  <thy-alert *ngFor=\"let error of thyErrors\" thyType=\"danger\" [thyMessage]=\"error\"></thy-alert>\n</div>\n",
                encapsulation: core.ViewEncapsulation.None
            }]
    }], function () { return [{ type: ThyFormDirective, decorators: [{
                type: core.Optional
            }] }]; }, { thyShowFirst: [{
            type: core.Input
        }], isHorizontal: [{
            type: core.HostBinding,
            args: ['class.row']
        }], thyErrors: [{
            type: core.Input
        }], _isFormGroup: [{
            type: core.HostBinding,
            args: ['class.form-group']
        }] }); })();
        return ThyFormGroupErrorComponent;
    }());
    ThyFormGroupErrorComponent.ctorParameters = function () { return [
        { type: ThyFormDirective, decorators: [{ type: core.Optional }] }
    ]; };
    ThyFormGroupErrorComponent.propDecorators = {
        thyShowFirst: [{ type: core.Input }],
        thyErrors: [{ type: core.Input }],
        _isFormGroup: [{ type: core.HostBinding, args: ['class.form-group',] }],
        isHorizontal: [{ type: core.HostBinding, args: ['class.row',] }]
    };
    __decorate([
        core$1.InputBoolean(),
        __metadata("design:type", Object)
    ], ThyFormGroupErrorComponent.prototype, "thyShowFirst", void 0);

    var ThyUniqueCheckValidator = /** @class */ (function () {
        function ThyUniqueCheckValidator(elementRef, thyForm) {
            this.elementRef = elementRef;
            this.thyForm = thyForm;
        }
        ThyUniqueCheckValidator.prototype.validate = function (ctrl) {
            var _this = this;
            return this.thyUniqueCheck(ctrl.value).pipe(operators.map(function (failed) {
                setTimeout(function () {
                    if (failed && _this.thyForm && _this.elementRef.nativeElement.name) {
                        _this.thyForm.validator.validateControl(_this.elementRef.nativeElement.name);
                    }
                });
                return failed ? { thyUniqueCheck: failed } : null;
            }), operators.catchError(function () { return rxjs.of(null); }));
        };
ThyUniqueCheckValidator.ɵfac = function ThyUniqueCheckValidator_Factory(t) { return new (t || ThyUniqueCheckValidator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThyFormDirective, 8)); };
ThyUniqueCheckValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyUniqueCheckValidator, selectors: [["", "thyUniqueCheck", ""]], inputs: { thyUniqueCheck: "thyUniqueCheck" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_ASYNC_VALIDATORS,
                useExisting: ThyUniqueCheckValidator,
                multi: true
            }
        ])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyUniqueCheckValidator, [{
        type: core.Directive,
        args: [{
                selector: '[thyUniqueCheck]',
                providers: [
                    {
                        provide: forms.NG_ASYNC_VALIDATORS,
                        useExisting: ThyUniqueCheckValidator,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ThyFormDirective, decorators: [{
                type: core.Optional
            }] }]; }, { thyUniqueCheck: [{
            type: core.Input
        }] }); })();
        return ThyUniqueCheckValidator;
    }());
    ThyUniqueCheckValidator.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: ThyFormDirective, decorators: [{ type: core.Optional }] }
    ]; };
    ThyUniqueCheckValidator.propDecorators = {
        thyUniqueCheck: [{ type: core.Input }]
    };

    var ThyMinDirective = /** @class */ (function () {
        function ThyMinDirective() {
        }
        Object.defineProperty(ThyMinDirective.prototype, "min", {
            set: function (value) {
                this._validator = forms.Validators.min(parseFloat(value));
            },
            enumerable: false,
            configurable: true
        });
        ThyMinDirective.prototype.validate = function (control) {
            return this._validator(control);
        };
ThyMinDirective.ɵfac = function ThyMinDirective_Factory(t) { return new (t || ThyMinDirective)(); };
ThyMinDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMinDirective, selectors: [["", "min", "", "formControlName", ""], ["", "min", "", "formControl", ""], ["", "min", "", "ngModel", ""]], inputs: { min: "min" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALIDATORS,
                useExisting: core.forwardRef(function () { return ThyMinDirective; }),
                multi: true
            }
        ])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMinDirective, [{
        type: core.Directive,
        args: [{
                selector: '[min][formControlName],[min][formControl],[min][ngModel]',
                providers: [
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return ThyMinDirective; }),
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, { min: [{
            type: core.Input
        }] }); })();
        return ThyMinDirective;
    }());
    ThyMinDirective.propDecorators = {
        min: [{ type: core.Input }]
    };

    var ThyMaxDirective = /** @class */ (function () {
        function ThyMaxDirective() {
        }
        Object.defineProperty(ThyMaxDirective.prototype, "max", {
            set: function (value) {
                this._validator = forms.Validators.max(parseFloat(value));
            },
            enumerable: false,
            configurable: true
        });
        ThyMaxDirective.prototype.validate = function (control) {
            return this._validator(control);
        };
ThyMaxDirective.ɵfac = function ThyMaxDirective_Factory(t) { return new (t || ThyMaxDirective)(); };
ThyMaxDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyMaxDirective, selectors: [["", "max", "", "formControlName", ""], ["", "max", "", "formControl", ""], ["", "max", "", "ngModel", ""]], inputs: { max: "max" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALIDATORS,
                useExisting: core.forwardRef(function () { return ThyMaxDirective; }),
                multi: true
            }
        ])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyMaxDirective, [{
        type: core.Directive,
        args: [{
                selector: '[max][formControlName],[max][formControl],[max][ngModel]',
                providers: [
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return ThyMaxDirective; }),
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, { max: [{
            type: core.Input
        }] }); })();
        return ThyMaxDirective;
    }());
    ThyMaxDirective.propDecorators = {
        max: [{ type: core.Input }]
    };

    function confirmValidator(value) {
        return function (control) {
            var isEqual = value === control.value;
            return !isEqual ? { confirm: { value: value, actual: control.value } } : null;
        };
    }
    var ThyConfirmValidatorDirective = /** @class */ (function () {
        function ThyConfirmValidatorDirective() {
        }
        ThyConfirmValidatorDirective.prototype.validate = function (control) {
            return confirmValidator(this.confirm)(control);
        };
ThyConfirmValidatorDirective.ɵfac = function ThyConfirmValidatorDirective_Factory(t) { return new (t || ThyConfirmValidatorDirective)(); };
ThyConfirmValidatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyConfirmValidatorDirective, selectors: [["", "confirm", ""]], inputs: { confirm: "confirm" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: forms.NG_VALIDATORS, useExisting: ThyConfirmValidatorDirective, multi: true }])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyConfirmValidatorDirective, [{
        type: core.Directive,
        args: [{
                selector: '[confirm]',
                providers: [{ provide: forms.NG_VALIDATORS, useExisting: ThyConfirmValidatorDirective, multi: true }]
            }]
    }], function () { return []; }, { confirm: [{
            type: core.Input
        }] }); })();
        return ThyConfirmValidatorDirective;
    }());
    ThyConfirmValidatorDirective.propDecorators = {
        confirm: [{ type: core.Input }]
    };

    var ThyFormModule = /** @class */ (function () {
        function ThyFormModule() {
        }
        ThyFormModule.forRoot = function (config) {
            return {
                ngModule: ThyFormModule,
                providers: [
                    {
                        provide: THY_VALIDATOR_CONFIG,
                        useValue: config
                    }
                ]
            };
        };
ThyFormModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyFormModule });
ThyFormModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyFormModule_Factory(t) { return new (t || ThyFormModule)(); }, providers: [ThyFormValidatorLoader, THY_FORM_CONFIG_PROVIDER], imports: [[common.CommonModule, forms.FormsModule, input.ThyInputModule, alert.ThyAlertModule, icon.ThyIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyFormModule, { declarations: [ThyFormDirective, ThyFormGroupComponent, ThyFormGroupLabelDirective, ThyFormSubmitDirective, ThyFormGroupFooterComponent, ThyUniqueCheckValidator, ThyFormGroupErrorComponent, ThyMinDirective, ThyMaxDirective, ThyConfirmValidatorDirective], imports: [ɵngcc3.CommonModule, ɵngcc1.FormsModule, ɵngcc6.ThyInputModule, ɵngcc5.ThyAlertModule, ɵngcc4.ThyIconModule], exports: [ThyFormDirective, ThyFormGroupComponent, ThyFormGroupLabelDirective, ThyFormSubmitDirective, ThyFormGroupFooterComponent, ThyUniqueCheckValidator, ThyFormGroupErrorComponent, ThyMinDirective, ThyMaxDirective, ThyConfirmValidatorDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFormModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, forms.FormsModule, input.ThyInputModule, alert.ThyAlertModule, icon.ThyIconModule],
                declarations: [
                    ThyFormDirective,
                    ThyFormGroupComponent,
                    ThyFormGroupLabelDirective,
                    ThyFormSubmitDirective,
                    ThyFormGroupFooterComponent,
                    ThyUniqueCheckValidator,
                    ThyFormGroupErrorComponent,
                    ThyMinDirective,
                    ThyMaxDirective,
                    ThyConfirmValidatorDirective
                ],
                exports: [
                    ThyFormDirective,
                    ThyFormGroupComponent,
                    ThyFormGroupLabelDirective,
                    ThyFormSubmitDirective,
                    ThyFormGroupFooterComponent,
                    ThyUniqueCheckValidator,
                    ThyFormGroupErrorComponent,
                    ThyMinDirective,
                    ThyMaxDirective,
                    ThyConfirmValidatorDirective
                ],
                providers: [ThyFormValidatorLoader, THY_FORM_CONFIG_PROVIDER]
            }]
    }], function () { return []; }, null); })();
        return ThyFormModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ERROR_VALUE_REPLACE_REGEX = ERROR_VALUE_REPLACE_REGEX;
    exports.THY_FORM_CONFIG = THY_FORM_CONFIG;
    exports.THY_FORM_CONFIG_PROVIDER = THY_FORM_CONFIG_PROVIDER;
    exports.THY_VALIDATOR_CONFIG = THY_VALIDATOR_CONFIG;
    exports.ThyConfirmValidatorDirective = ThyConfirmValidatorDirective;
    exports.ThyFormDirective = ThyFormDirective;
    exports.ThyFormGroupComponent = ThyFormGroupComponent;
    exports.ThyFormGroupErrorComponent = ThyFormGroupErrorComponent;
    exports.ThyFormGroupFooterComponent = ThyFormGroupFooterComponent;
    exports.ThyFormGroupLabelDirective = ThyFormGroupLabelDirective;
    exports.ThyFormModule = ThyFormModule;
    exports.ThyFormSubmitDirective = ThyFormSubmitDirective;
    exports.ThyFormValidatorLoader = ThyFormValidatorLoader;
    exports.ThyFormValidatorService = ThyFormValidatorService;
    exports.ThyMaxDirective = ThyMaxDirective;
    exports.ThyMinDirective = ThyMinDirective;
    exports.ThyUniqueCheckValidator = ThyUniqueCheckValidator;
    exports.confirmValidator = confirmValidator;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-form.umd.js.map
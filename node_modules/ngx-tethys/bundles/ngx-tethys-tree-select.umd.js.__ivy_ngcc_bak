(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/cdk/overlay'), require('ngx-tethys/label'), require('ngx-tethys/core'), require('ngx-tethys/util'), require('rxjs'), require('rxjs/operators'), require('ngx-tethys/list'), require('ngx-tethys/icon'), require('ngx-tethys/empty'), require('ngx-tethys/shared')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/tree-select', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/cdk/overlay', 'ngx-tethys/label', 'ngx-tethys/core', 'ngx-tethys/util', 'rxjs', 'rxjs/operators', 'ngx-tethys/list', 'ngx-tethys/icon', 'ngx-tethys/empty', 'ngx-tethys/shared'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys']['tree-select'] = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.cdk.overlay, global['ngx-tethys'].label, global['ngx-tethys'].core, global['ngx-tethys'].util, global.rxjs, global.rxjs.operators, global['ngx-tethys'].list, global['ngx-tethys'].icon, global['ngx-tethys'].empty, global['ngx-tethys'].shared));
}(this, (function (exports, core$1, common, forms, overlay, label, core, util, rxjs, operators, list, icon, empty, shared) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    function filterTreeData(treeNodes, searchText, searchKey) {
        if (searchKey === void 0) { searchKey = 'name'; }
        var filterNodes = function (node, result) {
            if (node[searchKey] && node[searchKey].indexOf(searchText) !== -1) {
                result.push(node);
                return result;
            }
            if (Array.isArray(node.children)) {
                var nodes = node.children.reduce(function (previous, current) { return filterNodes(current, previous); }, []);
                if (nodes.length) {
                    var parentNode = Object.assign(Object.assign({}, node), { children: nodes, expand: true });
                    result.push(parentNode);
                }
            }
            return result;
        };
        var treeData = treeNodes.reduce(function (previous, current) { return filterNodes(current, previous); }, []);
        return treeData;
    }
    var ThyTreeSelectComponent = /** @class */ (function () {
        function ThyTreeSelectComponent(elementRef, renderer, ngZone) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.treeSelectClass = true;
            this.isTreeSelect = true;
            // 菜单是否展开
            this.expandTreeSelectOptions = false;
            this.isMulti = false;
            this.selectedNodes = [];
            this.flattenTreeNodes = [];
            this.cdkConnectOverlayWidth = 0;
            this.icons = {
                expand: 'angle-down',
                collapse: 'angle-right',
                gap: 15
            };
            this.initialled = false;
            this.valueIsObject = false;
            this.thyPrimaryKey = '_id';
            this.thyShowKey = 'name';
            this.thyChildCountKey = 'childCount';
            this.thyMultiple = false;
            this.thyDisable = false;
            this.thyPlaceholder = '请选择节点';
            this.thyEmptyOptionsText = '暂时没有数据可选';
            this.thyHiddenNodeKey = 'hidden';
            this.thyDisableNodeKey = 'disabled';
            this.thyAsyncNode = false;
            this.thyShowWholeName = false;
            this.thyShowSearch = false;
            this.thyHiddenNodeFn = function (node) { return node.hidden; };
            this.thyDisableNodeFn = function (node) { return node.disabled; };
            this.thyGetNodeChildren = function (node) { return rxjs.of([]); };
            // TODO: 是否可以取消选中的node
            // @Input() thyUnRemoveSelectedNodeFn: Function;
            this.onModelChange = function () { };
            this.onModelTouch = function () { };
        }
        Object.defineProperty(ThyTreeSelectComponent.prototype, "thyTreeNodes", {
            set: function (value) {
                this.treeNodes = value;
                this.originTreeNodes = value;
                if (this.initialled) {
                    this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
                    this.setSelectedNodes();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeSelectComponent.prototype, "placeholder", {
            get: function () {
                return this.thyPlaceholder;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeSelectComponent.prototype, "thyIconType", {
            set: function (type) {
                util.warnDeprecation('This parameter has been deprecation');
                // if (type === 'especial') {
                //     this.icons = { expand: 'minus-square', collapse: 'plus-square', gap: 20 };
                // } else {
                //     this.icons = { expand: 'caret-right-down', collapse: 'caret-right', gap: 15 };
                // }
            },
            enumerable: false,
            configurable: true
        });
        ThyTreeSelectComponent.prototype._getNgModelType = function () {
            if (this.thyMultiple) {
                this.valueIsObject = !this.selectedValue[0] || util.isObject(this.selectedValue[0]);
            }
            else {
                this.valueIsObject = util.isObject(this.selectedValue);
            }
        };
        ThyTreeSelectComponent.prototype.writeValue = function (value) {
            this.selectedValue = value;
            if (value) {
                this._getNgModelType();
            }
            this.setSelectedNodes();
        };
        ThyTreeSelectComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        ThyTreeSelectComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouch = fn;
        };
        ThyTreeSelectComponent.prototype.onDocumentClick = function (event) {
            event.stopPropagation();
            if (!this.elementRef.nativeElement.contains(event.target) && this.expandTreeSelectOptions) {
                this.expandTreeSelectOptions = false;
            }
        };
        ThyTreeSelectComponent.prototype.ngOnInit = function () {
            this.positions = core.getFlexiblePositions('bottom', 4);
            this.isMulti = this.thyMultiple;
            this.flattenTreeNodes = this.flattenNodes(this.treeNodes, this.flattenTreeNodes, []);
            this.setSelectedNodes();
            this.initialled = true;
            this.init();
        };
        Object.defineProperty(ThyTreeSelectComponent.prototype, "selectedValueObject", {
            get: function () {
                return this.thyMultiple ? this.selectedNodes : this.selectedNode;
            },
            enumerable: false,
            configurable: true
        });
        ThyTreeSelectComponent.prototype.searchValue = function (searchText) {
            this.treeNodes = filterTreeData(this.originTreeNodes, searchText.trim(), this.thyShowKey);
        };
        ThyTreeSelectComponent.prototype.setPosition = function () {
            var _this = this;
            this.ngZone.onStable
                .asObservable()
                .pipe(operators.take(1))
                .subscribe(function () {
                _this.cdkConnectedOverlay.overlayRef.updatePosition();
            });
        };
        ThyTreeSelectComponent.prototype.init = function () {
            this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
        };
        ThyTreeSelectComponent.prototype.flattenNodes = function (nodes, resultNodes, parentPrimaryValue) {
            var _this = this;
            if (nodes === void 0) { nodes = []; }
            if (resultNodes === void 0) { resultNodes = []; }
            if (parentPrimaryValue === void 0) { parentPrimaryValue = []; }
            resultNodes = resultNodes.concat(nodes);
            var nodesLeafs = [];
            (nodes || []).forEach(function (item) {
                item.parentValues = parentPrimaryValue;
                item.level = item.parentValues.length;
                if (item.children && util.isArray(item.children)) {
                    var nodeLeafs = _this.flattenNodes(item.children, resultNodes, __spread(parentPrimaryValue, [item[_this.thyPrimaryKey]]));
                    nodesLeafs = __spread(nodesLeafs, nodeLeafs);
                }
            });
            return __spread(nodes, nodesLeafs);
        };
        ThyTreeSelectComponent.prototype._findTreeNode = function (value) {
            var _this = this;
            return (this.flattenTreeNodes || []).find(function (item) { return item[_this.thyPrimaryKey] === value; });
        };
        ThyTreeSelectComponent.prototype.getShowNodeName = function () {
            var _this = this;
            if (this.thyShowWholeName) {
                var wholeName_1 = '';
                (this.selectedNode.parentValues || []).forEach(function (item, index) {
                    var node = _this._findTreeNode(item);
                    wholeName_1 = "" + wholeName_1 + node[_this.thyShowKey] + " > ";
                });
                return "" + wholeName_1 + this.selectedNode[this.thyShowKey];
            }
            else {
                return this.selectedNode[this.thyShowKey];
            }
        };
        ThyTreeSelectComponent.prototype.setSelectedNodes = function () {
            var _this = this;
            if (this.selectedValue) {
                // 多选数据初始化
                if (this.thyMultiple) {
                    if (this.selectedValue.length > 0) {
                        if (this.valueIsObject && Object.keys(this.selectedValue[0]).indexOf(this.thyPrimaryKey) >= 0) {
                            this.selectedNodes = this.selectedValue.map(function (item) {
                                return _this._findTreeNode(item[_this.thyPrimaryKey]);
                            });
                        }
                        else {
                            this.selectedNodes = this.selectedValue.map(function (item) {
                                return _this._findTreeNode(item);
                            });
                        }
                    }
                }
                else {
                    // 单选数据初始化
                    if (this.valueIsObject) {
                        if (Object.keys(this.selectedValue).indexOf(this.thyPrimaryKey) >= 0) {
                            this.selectedNode = this._findTreeNode(this.selectedValue[this.thyPrimaryKey]);
                        }
                    }
                    else {
                        this.selectedNode = this._findTreeNode(this.selectedValue);
                    }
                }
            }
            else {
                this.selectedNodes = [];
                this.selectedNode = null;
            }
        };
        ThyTreeSelectComponent.prototype.openSelectPop = function () {
            if (this.thyDisable) {
                return;
            }
            this.cdkConnectOverlayWidth = this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect().width;
            this.expandTreeSelectOptions = !this.expandTreeSelectOptions;
        };
        ThyTreeSelectComponent.prototype.close = function () {
            this.expandTreeSelectOptions = false;
        };
        ThyTreeSelectComponent.prototype.clearSelectedValue = function (event) {
            event.stopPropagation();
            this.selectedValue = null;
            this.selectedNode = null;
            this.selectedNodes = [];
            this.onModelChange(this.selectedValue);
        };
        ThyTreeSelectComponent.prototype._changeSelectValue = function () {
            var _this = this;
            if (this.valueIsObject) {
                this.selectedValue = this.thyMultiple ? this.selectedNodes : this.selectedNode;
            }
            else {
                this.selectedValue = this.thyMultiple
                    ? this.selectedNodes.map(function (item) { return item[_this.thyPrimaryKey]; })
                    : this.selectedNode[this.thyPrimaryKey];
            }
            this.onModelChange(this.selectedValue);
        };
        ThyTreeSelectComponent.prototype.removeMultipleSelectedNode = function (event) {
            this.removeSelectedNode(event.item, event.$event);
        };
        // thyMultiple = true 时，移除数据时调用
        ThyTreeSelectComponent.prototype.removeSelectedNode = function (node, event) {
            var _this = this;
            if (event) {
                event.stopPropagation();
            }
            if (this.thyDisable) {
                return;
            }
            if (this.thyMultiple) {
                this.selectedNodes = util.produce(this.selectedNodes).remove(function (item) {
                    return item[_this.thyPrimaryKey] === node[_this.thyPrimaryKey];
                });
                this._changeSelectValue();
            }
        };
        ThyTreeSelectComponent.prototype.selectNode = function (node) {
            var _this = this;
            if (!this.thyMultiple) {
                this.selectedNode = node;
                this.expandTreeSelectOptions = false;
            }
            else {
                if (this.selectedNodes.find(function (item) {
                    return item[_this.thyPrimaryKey] === node[_this.thyPrimaryKey];
                })) {
                    this.removeSelectedNode(node);
                }
                else {
                    this.selectedNodes = util.produce(this.selectedNodes).add(node);
                }
            }
            this._changeSelectValue();
        };
        ThyTreeSelectComponent.prototype.getNodeChildren = function (node) {
            var _this = this;
            var result = this.thyGetNodeChildren(node);
            if (result && result.subscribe) {
                result.pipe().subscribe(function (data) {
                    var nodes = _this.flattenNodes(data, _this.flattenTreeNodes, __spread(node.parentValues, [node[_this.thyPrimaryKey]]));
                    var otherNodes = nodes.filter(function (item) {
                        return !_this.flattenTreeNodes.find(function (hasItem) {
                            return hasItem[_this.thyPrimaryKey] === item[_this.thyPrimaryKey];
                        });
                    });
                    _this.flattenTreeNodes = __spread(_this.flattenTreeNodes, otherNodes);
                    node.children = data;
                });
                return result;
            }
        };
        return ThyTreeSelectComponent;
    }());
    ThyTreeSelectComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'thy-tree-select',
                    template: "<div\n  cdkOverlayOrigin\n  thySelectControl\n  (click)=\"openSelectPop()\"\n  #origin=\"cdkOverlayOrigin\"\n  [thyPanelOpened]=\"expandTreeSelectOptions\"\n  [thySelectedOptions]=\"selectedValueObject\"\n  [thyIsMultiple]=\"thyMultiple\"\n  [thyAllowClear]=\"thyAllowClear\"\n  [thySize]=\"thySize\"\n  [thyPlaceholder]=\"placeholder\"\n  [customDisplayTemplate]=\"customDisplayTemplate\"\n  [thyShowSearch]=\"thyShowSearch\"\n  [thyDisabled]=\"thyDisable\"\n  (thyOnClear)=\"clearSelectedValue($event)\"\n  (thyOnRemove)=\"removeMultipleSelectedNode($event)\"\n  (thyOnSearch)=\"searchValue($event)\"\n>\n  <ng-template #customDisplayTemplate let-node>\n    <ng-container *ngIf=\"thyTreeSelectTriggerDisplayRef; else noneTemplate\">\n      <ng-template [ngTemplateOutlet]=\"thyTreeSelectTriggerDisplayRef\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n    </ng-container>\n    <ng-template #noneTemplate>\n      {{ node[thyShowKey] }}\n    </ng-template>\n  </ng-template>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayHasBackdrop]=\"false\"\n  [cdkConnectedOverlayPositions]=\"positions\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayWidth]=\"cdkConnectOverlayWidth\"\n  [cdkConnectedOverlayOpen]=\"expandTreeSelectOptions\"\n  (detach)=\"close()\"\n>\n  <thy-tree-select-nodes [treeNodes]=\"treeNodes\"></thy-tree-select-nodes>\n</ng-template>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core$1.forwardRef(function () { return ThyTreeSelectComponent; }),
                            multi: true
                        }
                    ]
                },] }
    ];
    ThyTreeSelectComponent.ctorParameters = function () { return [
        { type: core$1.ElementRef },
        { type: core$1.Renderer2 },
        { type: core$1.NgZone }
    ]; };
    ThyTreeSelectComponent.propDecorators = {
        treeSelectClass: [{ type: core$1.HostBinding, args: ['class.thy-select-custom',] }],
        isTreeSelect: [{ type: core$1.HostBinding, args: ['class.thy-select',] }],
        expandTreeSelectOptions: [{ type: core$1.HostBinding, args: ['class.menu-is-opened',] }],
        isMulti: [{ type: core$1.HostBinding, args: ['class.thy-select-custom--multiple',] }],
        thyTreeSelectTriggerDisplayRef: [{ type: core$1.ContentChild, args: ['thyTreeSelectTriggerDisplay',] }],
        treeNodeTemplateRef: [{ type: core$1.ContentChild, args: ['treeNodeTemplate',] }],
        cdkOverlayOrigin: [{ type: core$1.ViewChild, args: [overlay.CdkOverlayOrigin, { static: true },] }],
        cdkConnectedOverlay: [{ type: core$1.ViewChild, args: [overlay.CdkConnectedOverlay, { static: true },] }],
        customDisplayTemplate: [{ type: core$1.ViewChild, args: ['customDisplayTemplate', { static: true },] }],
        thyTreeNodes: [{ type: core$1.Input }],
        thyPrimaryKey: [{ type: core$1.Input }],
        thyShowKey: [{ type: core$1.Input }],
        thyChildCountKey: [{ type: core$1.Input }],
        thyAllowClear: [{ type: core$1.Input }],
        thyMultiple: [{ type: core$1.Input }],
        thyDisable: [{ type: core$1.Input }],
        thyPlaceholder: [{ type: core$1.Input }],
        thySize: [{ type: core$1.Input }],
        thyEmptyOptionsText: [{ type: core$1.Input }],
        thyHiddenNodeKey: [{ type: core$1.Input }],
        thyDisableNodeKey: [{ type: core$1.Input }],
        thyAsyncNode: [{ type: core$1.Input }],
        thyShowWholeName: [{ type: core$1.Input }],
        thyShowSearch: [{ type: core$1.Input }],
        thyIconType: [{ type: core$1.Input }],
        thyHiddenNodeFn: [{ type: core$1.Input }],
        thyDisableNodeFn: [{ type: core$1.Input }],
        thyGetNodeChildren: [{ type: core$1.Input }],
        onDocumentClick: [{ type: core$1.HostListener, args: ['document:click', ['$event'],] }]
    };

    var ThyTreeSelectNodesComponent = /** @class */ (function () {
        function ThyTreeSelectNodesComponent(parent) {
            this.parent = parent;
            this.primaryKey = this.parent.thyPrimaryKey;
            this.showKey = this.parent.thyShowKey;
            this.isMultiple = this.parent.thyMultiple;
            this.valueIsObject = this.parent.valueIsObject;
            this.selectedValue = this.parent.selectedValue;
            this.childCountKey = this.parent.thyChildCountKey;
            this.treeNodeTemplateRef = this.parent.treeNodeTemplateRef;
        }
        ThyTreeSelectNodesComponent.prototype.ngOnInit = function () {
            this.class = this.isMultiple ? 'thy-tree-select-dropdown thy-tree-select-dropdown-multiple' : 'thy-tree-select-dropdown';
        };
        ThyTreeSelectNodesComponent.prototype.treeNodeIsSelected = function (node) {
            var _this = this;
            if (this.parent.thyMultiple) {
                return (this.parent.selectedNodes || []).find(function (item) {
                    return item[_this.primaryKey] === node[_this.primaryKey];
                });
            }
            else {
                return this.parent.selectedNode && this.parent.selectedNode[this.primaryKey] === node[this.primaryKey];
            }
        };
        ThyTreeSelectNodesComponent.prototype.treeNodeIsHidden = function (node) {
            if (this.parent.thyHiddenNodeKey) {
                return node[this.parent.thyHiddenNodeKey];
            }
            if (this.parent.thyHiddenNodeFn) {
                return this.parent.thyHiddenNodeFn(node);
            }
            return false;
        };
        ThyTreeSelectNodesComponent.prototype.treeNodeIsDisable = function (node) {
            if (this.parent.thyDisableNodeKey) {
                return node[this.parent.thyDisableNodeKey];
            }
            if (this.parent.thyDisableNodeFn) {
                return this.parent.thyDisableNodeFn(node);
            }
            return false;
        };
        ThyTreeSelectNodesComponent.prototype.treeNodeIsExpand = function (node) {
            var _this = this;
            var isSelectedNodeParent = false;
            if (this.parent.thyMultiple) {
                isSelectedNodeParent = !!(this.parent.selectedNodes || []).find(function (item) {
                    return item.parentValues.indexOf(node[_this.primaryKey]) > -1;
                });
            }
            else {
                isSelectedNodeParent = this.parent.selectedNode
                    ? this.parent.selectedNode.parentValues.indexOf(node[this.primaryKey]) > -1
                    : false;
            }
            var isExpand = node.expand || (Object.keys(node).indexOf('expand') < 0 && isSelectedNodeParent);
            node.expand = isExpand;
            return isExpand;
        };
        ThyTreeSelectNodesComponent.prototype.getNodeChildren = function (node) {
            return this.parent.getNodeChildren(node);
        };
        ThyTreeSelectNodesComponent.prototype.selectTreeNode = function (event, node) {
            event.stopPropagation();
            if (this.treeNodeIsDisable(node)) {
                return;
            }
            this.parent.selectNode(node);
        };
        ThyTreeSelectNodesComponent.prototype.nodeExpandToggle = function (event, node) {
            var _this = this;
            event.stopPropagation();
            if (Object.keys(node).indexOf('expand') > -1) {
                node.expand = !node.expand;
            }
            else {
                if (this.treeNodeIsExpand(node)) {
                    node.expand = false;
                }
                else {
                    node.expand = true;
                }
            }
            if (node.expand && this.parent.thyAsyncNode) {
                this.getNodeChildren(node).subscribe(function () {
                    _this.parent.setPosition();
                });
            }
            this.parent.setPosition();
        };
        return ThyTreeSelectNodesComponent;
    }());
    ThyTreeSelectNodesComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'thy-tree-select-nodes',
                    template: "<div class=\"thy-tree-select-options\" *ngIf=\"treeNodes?.length > 0; else emptyPlaceholder\">\n  <ng-container\n    *ngIf=\"treeNodes?.length > 0\"\n    [ngTemplateOutlet]=\"treeSelectNode\"\n    [ngTemplateOutletContext]=\"{ $implicit: treeNodes }\"\n  ></ng-container>\n</div>\n<ng-template #emptyPlaceholder>\n  <thy-empty class=\"thy-select-empty-content\" thySize=\"sm\" [thyMessage]=\"parent.thyEmptyOptionsText\"></thy-empty>\n</ng-template>\n<ng-template #treeSelectNode let-nodes>\n  <div class=\"thy-tree-select-node\">\n    <ng-container *ngFor=\"let node of nodes\">\n      <a\n        class=\"thy-option-item\"\n        [ngClass]=\"{ active: treeNodeIsSelected(node) }\"\n        [class.disabled]=\"treeNodeIsDisable(node)\"\n        [ngStyle]=\"{ 'padding-left.px': 20 * node.level + parent.icons.gap }\"\n        (click)=\"selectTreeNode($event, node)\"\n        *ngIf=\"!treeNodeIsHidden(node)\"\n      >\n        <ng-template #treeSelectNode> </ng-template>\n        <span\n          class=\"thy-tree-select-option-icon\"\n          [class.invisible]=\"!(node.children?.length > 0 || (node[childCountKey] && node[childCountKey] > 0))\"\n          (click)=\"nodeExpandToggle($event, node)\"\n        >\n          <thy-icon\n            class=\"node-expand-icon\"\n            [thyIconName]=\"treeNodeIsExpand(node) ? parent.icons.expand : parent.icons.collapse\"\n          ></thy-icon>\n        </span>\n        <span class=\"thy-tree-select-option-text\">\n          <ng-template\n            *ngIf=\"treeNodeTemplateRef; else defaultNodeText\"\n            [ngTemplateOutlet]=\"treeNodeTemplateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: node }\"\n          ></ng-template>\n          <ng-template #defaultNodeText>\n            {{ node[showKey] }}\n          </ng-template>\n        </span>\n        <span class=\"checked-icon\" *ngIf=\"isMultiple\">\n          <i class=\"wtf wtf-checked\"></i>\n        </span>\n      </a>\n      <ng-container\n        *ngIf=\"treeNodeIsExpand(node) && node.children?.length > 0\"\n        [ngTemplateOutlet]=\"treeSelectNode\"\n        [ngTemplateOutletContext]=\"{ $implicit: node.children }\"\n      ></ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n"
                },] }
    ];
    ThyTreeSelectNodesComponent.ctorParameters = function () { return [
        { type: ThyTreeSelectComponent }
    ]; };
    ThyTreeSelectNodesComponent.propDecorators = {
        class: [{ type: core$1.HostBinding, args: ['class',] }],
        treeNodes: [{ type: core$1.Input }]
    };

    var ThyTreeSelectModule = /** @class */ (function () {
        function ThyTreeSelectModule() {
        }
        return ThyTreeSelectModule;
    }());
    ThyTreeSelectModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        overlay.OverlayModule,
                        label.ThyLabelModule,
                        list.ThyListModule,
                        icon.ThyIconModule,
                        empty.ThyEmptyModule,
                        shared.ThySelectCommonModule
                    ],
                    declarations: [ThyTreeSelectComponent, ThyTreeSelectNodesComponent],
                    exports: [ThyTreeSelectComponent, ThyTreeSelectNodesComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyTreeSelectComponent = ThyTreeSelectComponent;
    exports.ThyTreeSelectModule = ThyTreeSelectModule;
    exports.ThyTreeSelectNodesComponent = ThyTreeSelectNodesComponent;
    exports.filterTreeData = filterTreeData;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-tree-select.umd.js.map

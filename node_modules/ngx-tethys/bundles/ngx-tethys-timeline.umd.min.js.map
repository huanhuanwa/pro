{"version":3,"sources":["../../src/timeline/timeline.service.ts","../../src/timeline/timeline.component.ts","../../src/timeline/timeline-item.component.ts","../../src/timeline/timeline.module.ts"],"names":["ThyTimelineService","this","check$","ReplaySubject","prototype","markForCheck","next","Injectable","ThyTimeModes","ThyTimelineItemComponent","cdr","timelineService","color","isLast","isFirst","reverse","Object","defineProperty","value","detectChanges","ngOnChanges","changes","ngOnInit","Component","args","changeDetection","ChangeDetectionStrategy","OnPush","selector","template","exportAs","ChangeDetectorRef","ViewChild","static","HostBinding","Input","ContentChild","ThyTimelineComponent","thyDirection","timelineItems","destroy$","Subject","isTimeline","rightTimeline","centerTimeline","templateTimeline","horizontal","thyMode","thyReverse","currentValue","simpleChangeActivated","updateChildren","_this","pipe","takeUntil","subscribe","ngAfterContentInit","listOfItems","ngOnDestroy","complete","length","length_1","forEach","item","index","position","mode","getTimelineItemPosition","description","thyPosition","toArray","simpleChange","previousValue","isFirstChange","encapsulation","ViewEncapsulation","None","providers","ContentChildren","NgModule","declarations","entryComponents","imports","CommonModule","ThySharedModule","ThyIconModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\n@Injectable()\nexport class ThyTimelineService {\n    check$ = new ReplaySubject(1);\n    markForCheck(): void {\n        this.check$.next();\n    }\n}\n","import {\n    Component,\n    Input,\n    HostBinding,\n    ContentChildren,\n    QueryList,\n    AfterContentInit,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    SimpleChange,\n    ChangeDetectorRef,\n    ViewEncapsulation,\n    ChangeDetectionStrategy\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyTimelineItemComponent } from './timeline-item.component';\nimport { ThyTimelineService } from './timeline.service';\nimport { Subject } from 'rxjs';\n\nexport type ThyTimeMode = 'left' | 'right' | 'center';\n\nexport enum ThyTimeModes {\n    left = 'left',\n    right = 'right',\n    center = 'center'\n}\n\nexport type ThyTimeDirection = 'horizontal' | 'vertical';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    selector: 'thy-timeline',\n    providers: [ThyTimelineService],\n    template: `\n        <ng-container>\n            <ng-container *ngFor=\"let item of timelineItems\">\n                <ng-template [ngTemplateOutlet]=\"item.template\"></ng-template>\n            </ng-container>\n            <ng-content></ng-content>\n        </ng-container>\n    `\n})\nexport class ThyTimelineComponent implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n    @Input() thyReverse: Boolean;\n\n    @Input() thyMode: ThyTimeMode;\n\n    @Input() thyDirection: ThyTimeDirection = 'vertical';\n\n    public timelineItems: ThyTimelineItemComponent[] = [];\n\n    private destroy$ = new Subject<void>();\n\n    @HostBinding(`class.thy-timeline`) isTimeline = true;\n    @HostBinding(`class.thy-timeline-right`) rightTimeline = false;\n    @HostBinding(`class.thy-timeline-center`) centerTimeline = false;\n    @HostBinding(`class.thy-timeline-template`) templateTimeline = false;\n    @HostBinding(`class.thy-timeline-horizontal`) horizontal = false;\n\n    @ContentChildren(ThyTimelineItemComponent)\n    listOfItems: QueryList<ThyTimelineItemComponent>;\n\n    constructor(private cdr: ChangeDetectorRef, private timelineService: ThyTimelineService) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const { thyMode, thyReverse } = changes;\n        if (thyMode && !this.horizontal) {\n            if (thyMode.currentValue === 'right') {\n                this.rightTimeline = !this.templateTimeline;\n                this.centerTimeline = false;\n            } else if (thyMode.currentValue === 'center') {\n                this.centerTimeline = true;\n                this.rightTimeline = false;\n            } else {\n                this.rightTimeline = false;\n                this.centerTimeline = false;\n            }\n        }\n        if ((simpleChangeActivated(thyMode) && !this.horizontal) || simpleChangeActivated(thyReverse)) {\n            this.updateChildren();\n        }\n    }\n\n    ngOnInit() {\n        this.horizontal = this.thyDirection === 'horizontal' ? true : false;\n        this.timelineService.check$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.listOfItems.changes.subscribe(() => {\n            this.updateChildren();\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private updateChildren(): void {\n        if (this.listOfItems && this.listOfItems.length) {\n            const length = this.listOfItems.length;\n            this.listOfItems.forEach((item, index) => {\n                item.isLast = !this.thyReverse ? index === length - 1 : index === 0;\n                item.isFirst = this.thyReverse ? index === length - 1 : index === 0;\n                item.reverse = this.thyReverse;\n                if (!this.horizontal) {\n                    item.position = getTimelineItemPosition(index, this.thyMode);\n                }\n                if (item.description || (item.thyPosition && !this.horizontal)) {\n                    this.templateTimeline = true;\n                }\n                item.detectChanges();\n            });\n            this.timelineItems = this.thyReverse ? this.listOfItems.toArray().reverse() : this.listOfItems.toArray();\n        }\n        this.cdr.markForCheck();\n    }\n}\nfunction simpleChangeActivated(simpleChange?: SimpleChange): boolean {\n    return !!(simpleChange && (simpleChange.previousValue !== simpleChange.currentValue || simpleChange.isFirstChange()));\n}\n\nfunction getTimelineItemPosition(index: number, mode: ThyTimeMode): ThyTimeMode | undefined {\n    return mode === 'left' ? 'left' : mode === 'right' ? 'right' : mode === 'center' && index % 2 === 0 ? 'left' : 'right';\n}\n","import {\n    Component,\n    Input,\n    HostBinding,\n    OnInit,\n    OnChanges,\n    ContentChild,\n    TemplateRef,\n    ViewChild,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    SimpleChanges\n} from '@angular/core';\nimport { ThyTimeMode } from './timeline.component';\nimport { ThyTimelineService } from './timeline.service';\n\nexport type thyColor = 'primary' | 'success' | 'warning' | 'danger' | 'info';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'thy-timeline-item',\n    templateUrl: './timeline-item.component.html',\n    exportAs: 'ThyTimelineItem'\n})\nexport class ThyTimelineItemComponent implements OnInit, OnChanges {\n    @ViewChild('timelineItem', { static: false }) template: TemplateRef<void>;\n\n    @HostBinding('class') className: string;\n\n    public color: thyColor = 'primary';\n\n    public isLast = false;\n\n    public isFirst = false;\n\n    public position: ThyTimeMode;\n\n    public reverse: Boolean = false;\n\n    @Input()\n    set thyColor(value: thyColor) {\n        if (value) {\n            this.color = value;\n        }\n    }\n\n    @Input() thyPosition: ThyTimeMode;\n\n    @ContentChild('dot', { static: false }) dot: TemplateRef<any>;\n\n    @ContentChild('description', { static: false }) description: TemplateRef<any>;\n\n    constructor(private cdr: ChangeDetectorRef, private timelineService: ThyTimelineService) {}\n\n    detectChanges(): void {\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.timelineService.markForCheck();\n    }\n\n    ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyIconModule } from 'ngx-tethys/icon';\nimport { ThyTimelineComponent } from './timeline.component';\nimport { ThyTimelineItemComponent } from './timeline-item.component';\n\n@NgModule({\n    declarations: [ThyTimelineComponent, ThyTimelineItemComponent],\n    entryComponents: [],\n    imports: [CommonModule, ThySharedModule, ThyIconModule],\n    exports: [ThyTimelineComponent, ThyTimelineItemComponent],\n    providers: []\n})\nexport class ThyTimelineModule {}\n"]}
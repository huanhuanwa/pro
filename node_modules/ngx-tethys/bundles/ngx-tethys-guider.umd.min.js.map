{"version":3,"sources":["../../src/guider/guider-manager.ts","../../src/guider/guider-step-ref.ts","../../src/guider/guider.class.ts","../../src/guider/guider-ref.ts","../../src/guider/guider.service.ts","../../src/guider/guider.directive.ts","../../src/guider/guider-hint/guider-hint.component.ts","../../src/guider/guider.module.ts"],"names":["ThyGuiderManager","this","targetListMap","prototype","updateActive","key","guiderRef","activeStepKey","thyGuiderRef","addStepTarget","el","removeStepTarget","getActiveTarget","getActive","Injectable","args","providedIn","ThyGuiderStepRef","step","stepIndex","rendererFactory","popover","guiderManager","overlay","document","renderer","createRenderer","show","createPoint","dispose","removeLastPointContainer","removeTip","getTargetElement","target","querySelector","isTipHasTarget","targetElement","helpers","isNull","Error","targetElementObserver","fromEvent","subscribe","targetClicked","next","positionValue","_a","style","position","setStyle","setStyleForPointContainer","createTip","pointPosition","getPointPosition","pointContainer","setPointPosition","renderPoint","targetElementClientRect","getBoundingClientRect","targetElementWidth","width","targetElementHeight","height","pointOffset","currentPointContainer","createElement","addClass","config","pointClass","addPointClass","_this","isString","isArray","forEach","classItem","appendChild","lastPointerContainer","lastTargetElement","removeChild","body","undefined","tipWithTarget","tipWithoutTarget","getTipPosition","lastPopoverRef","open","hintComponent","origin","originPosition","x","y","originActiveClass","panelClass","hintClass","backdropClosable","hasBackdrop","manualClosure","initialState","stepRef","scrollStrategy","scrollStrategies","block","Array","defaultPosition","createTipContainer","tipContainer","hintContainer","lastTipContainer","popoverConfig","placement","hintPlacement","hintOffset","getTipOffset","offset","pointXAxisOffset","pointYAxisOffset","startsWith","Math","abs","close","unsubscribe","defaultGuiderPositionConfig","ThyGuiderRef","router","ngZone","stepChange$","ReplaySubject","guiderEnded$","Subject","closed$","targetClicked$","stepsRef","steps","map","index","stepChange","asObservable","ended","closed","start","startWith","to","currentStepIndex","length","previous","active","indexOrKey","isNumber","findIndex","removeExistedStep","Number","isNaN","currentStep","route","url","run","navigateByUrl","setTimeout","drawStep","notifyStepClicked","removeManagerActiveKey","end","notifyGuiderIsFinished","activeKey","some","complete","ThyGuiderConfig","RendererFactory2","ThyPopover","Router","NgZone","Overlay","Inject","DOCUMENT","ThyGuider","guiderRefs","create","normalizeConfig","splice","push","Object","assign","normalizeStep","lasGuiderRef","pop","ThyGuiderTargetDirective","ngOnInit","nativeElement","onStable","pipe","take","index_1","ngAfterViewInit","ngOnDestroy","Directive","selector","exportAs","ElementRef","Input","ThyGuiderHintComponent","guiderHint","setDescription","data","description","value","descriptionString","descriptionTemplateRef","jump","prev","trackByFn","Component","template","HostBinding","NgModule","imports","CommonModule","ThySharedModule","ThyIconModule","ThyButtonModule","ThyPopoverModule","declarations","exports","entryComponents","providers"],"mappings":"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","sourcesContent":["import { ThyGuiderRef } from './guider-ref';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyGuiderManager {\n    private targetListMap = {};\n\n    private thyGuiderRef: ThyGuiderRef;\n\n    private activeStepKey: string;\n\n    constructor() {}\n\n    public updateActive(key: string, guiderRef: ThyGuiderRef) {\n        this.activeStepKey = key;\n        this.thyGuiderRef = guiderRef;\n    }\n\n    public addStepTarget(key: string, el: HTMLElement) {\n        this.targetListMap[key] = el;\n    }\n\n    public removeStepTarget(key: string) {\n        delete this.targetListMap[key];\n    }\n\n    public getActiveTarget(key: string): HTMLElement {\n        return this.targetListMap[key];\n    }\n\n    public getActive(): { key: string; guiderRef: ThyGuiderRef } {\n        return {\n            key: this.activeStepKey,\n            guiderRef: this.thyGuiderRef\n        };\n    }\n}\n","import { Renderer2 } from '@angular/core';\nimport { ThyGuiderRef } from './guider-ref';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { RendererFactory2 } from '@angular/core';\nimport { ThyGuiderManager } from './guider-manager';\nimport { ThyGuiderStep } from './guider.class';\nimport { ThyPopover, ThyPopoverConfig, ThyPopoverRef } from 'ngx-tethys/popover';\nimport { helpers } from 'ngx-tethys/util';\nimport { Overlay } from '@angular/cdk/overlay';\n\nconst pointContainerSize = 28;\nexport class ThyGuiderStepRef {\n    private renderer: Renderer2;\n\n    private lastPointerContainer: any;\n\n    private lastTargetElement: Element;\n\n    private targetElementObserver: Subscription;\n\n    private lastTipContainer: any;\n\n    private guiderRef: ThyGuiderRef;\n\n    private lastPopoverRef: ThyPopoverRef<any>;\n\n    constructor(\n        public step: ThyGuiderStep,\n        public stepIndex: number,\n        private readonly rendererFactory: RendererFactory2,\n        private popover: ThyPopover,\n        private guiderManager: ThyGuiderManager,\n        private overlay: Overlay,\n        private document: any\n    ) {\n        this.renderer = this.rendererFactory.createRenderer(null, null);\n    }\n\n    public show(guiderRef: ThyGuiderRef) {\n        this.guiderRef = guiderRef;\n        this.createPoint(this.step, guiderRef);\n    }\n\n    public dispose() {\n        this.removeLastPointContainer();\n        this.removeTip();\n    }\n\n    private getTargetElement(step: ThyGuiderStep) {\n        let targetElement: HTMLElement;\n        if (step.target) {\n            targetElement = this.document.querySelector(step.target);\n        } else {\n            targetElement = this.guiderManager.getActiveTarget(step.key);\n        }\n        return targetElement;\n    }\n\n    private createPoint(step: ThyGuiderStep, guiderRef: ThyGuiderRef) {\n        // target 为空并且 guiderManager 中的 targetMap 也没有此step 的 key，或者 target 直接为 坐标数组\n        // 则执行无 target 的显示\n        if (!this.isTipHasTarget(step)) {\n            this.createTip(this.step);\n            return;\n        }\n\n        const targetElement = this.getTargetElement(step);\n\n        if (helpers.isNull(targetElement)) {\n            throw new Error(`there is no target called ${step.target}`);\n        }\n        this.targetElementObserver = fromEvent(targetElement, 'click').subscribe(() => {\n            guiderRef.targetClicked().next(step);\n        });\n        const positionValue = targetElement?.style?.position;\n        if (!positionValue || positionValue === 'static') {\n            this.renderer.setStyle(targetElement, 'position', 'relative');\n        }\n        this.setStyleForPointContainer(step, targetElement);\n    }\n\n    private setStyleForPointContainer(step: ThyGuiderStep, targetElement: Element) {\n        const pointPosition = this.getPointPosition(step, targetElement);\n\n        const pointContainer = this.setPointPosition(pointPosition);\n        this.renderPoint(targetElement, pointContainer);\n    }\n\n    private getPointPosition(step: ThyGuiderStep, targetElement: Element): [number, number] {\n        const targetElementClientRect = targetElement.getBoundingClientRect();\n        const { width: targetElementWidth, height: targetElementHeight } = targetElementClientRect;\n\n        const pointOffset = step.pointOffset;\n        // 只通过 pointOffset 控制 point 的位置，默认在 target 的右下角，\n        // offset 的基点也为默认位置\n        return [targetElementWidth + pointOffset[0], targetElementHeight + pointOffset[1]];\n    }\n\n    private setPointPosition(pointPosition: [number, number]) {\n        const currentPointContainer = this.renderer.createElement('div');\n\n        this.renderer.addClass(currentPointContainer, 'thy-guider-highlight-container');\n        if (this.guiderRef.config.pointClass) {\n            this.addPointClass(currentPointContainer, this.guiderRef.config.pointClass);\n        }\n        this.renderer.setStyle(currentPointContainer, 'position', 'absolute');\n        this.renderer.setStyle(currentPointContainer, 'left', pointPosition[0] + 'px');\n        this.renderer.setStyle(currentPointContainer, 'top', pointPosition[1] + 'px');\n        this.renderer.setStyle(currentPointContainer, 'transform', 'translate(-100%,-100%)');\n\n        return currentPointContainer;\n    }\n    private addPointClass(el: any, pointClass: string | string[]) {\n        if (helpers.isString(pointClass)) {\n            this.renderer.addClass(el, pointClass);\n        }\n        if (helpers.isArray(pointClass)) {\n            pointClass.forEach(classItem => {\n                this.renderer.addClass(el, classItem);\n            });\n        }\n    }\n\n    private renderPoint(targetElement: Element, pointContainer: any) {\n        this.renderer.appendChild(targetElement, pointContainer);\n        this.lastPointerContainer = pointContainer;\n        this.lastTargetElement = targetElement;\n        this.createTip(this.step);\n    }\n\n    private removeLastPointContainer() {\n        if (this.lastPointerContainer) {\n            this.renderer.removeChild(this.document.body, this.lastPointerContainer);\n            this.lastPointerContainer = undefined;\n        }\n    }\n\n    private createTip(step: ThyGuiderStep) {\n        if (this.isTipHasTarget(step)) {\n            this.tipWithTarget(step);\n        } else {\n            this.tipWithoutTarget(step);\n        }\n    }\n\n    private tipWithoutTarget(step: ThyGuiderStep) {\n        const position = this.getTipPosition(step);\n        this.lastPopoverRef = this.popover.open(this.guiderRef.config.hintComponent, {\n            origin: null,\n            originPosition: {\n                x: position[0],\n                y: position[1]\n            },\n            originActiveClass: '',\n            panelClass: this.guiderRef.config.hintClass || '',\n            backdropClosable: false,\n            hasBackdrop: false,\n            manualClosure: true,\n            initialState: {\n                guiderRef: this.guiderRef,\n                stepRef: this\n            },\n            scrollStrategy: this.overlay.scrollStrategies.block()\n        });\n    }\n\n    private getTipPosition(step: ThyGuiderStep): [number, number] {\n        if (Array.isArray(step.target)) {\n            return step.target;\n        }\n        return this.guiderRef.config.defaultPosition;\n    }\n\n    private createTipContainer() {\n        const tipContainer = this.renderer.createElement('div');\n        this.renderer.addClass(tipContainer, 'thy-guider-content-container');\n        this.renderer.setStyle(tipContainer, 'position', 'absolute');\n        this.renderer.setStyle(tipContainer, 'top', '0px');\n        this.renderer.setStyle(tipContainer, 'right', '0px');\n        this.renderer.setStyle(tipContainer, 'bottom', '0px');\n        this.renderer.setStyle(tipContainer, 'left', '0px');\n        return tipContainer;\n    }\n\n    private tipWithTarget(step: ThyGuiderStep) {\n        let targetElement: Element;\n\n        if (step.target) {\n            targetElement = this.document.querySelector(step.target);\n        } else {\n            targetElement = this.guiderManager.getActiveTarget(step.key);\n        }\n\n        const hintContainer = this.createTipContainer();\n        this.renderer.appendChild(targetElement, hintContainer);\n        this.lastTipContainer = hintContainer;\n\n        const popoverConfig = {\n            origin: hintContainer,\n            placement: step.hintPlacement,\n            panelClass: this.guiderRef.config.hintClass || '',\n            backdropClosable: false,\n            hasBackdrop: false,\n            manualClosure: true,\n            initialState: {\n                guiderRef: this.guiderRef,\n                stepRef: this\n            },\n            scrollStrategy: this.overlay.scrollStrategies.block()\n        } as ThyPopoverConfig<any>;\n\n        const pointPosition = this.getPointPosition(step, targetElement);\n        const hintOffset = this.getTipOffset(step, pointPosition, targetElement);\n        if (hintOffset) {\n            popoverConfig.offset = hintOffset;\n        }\n        this.lastPopoverRef = this.popover.open(this.guiderRef.config.hintComponent, popoverConfig);\n    }\n\n    private getTipOffset(step: ThyGuiderStep, pointPosition: [number, number], targetElement: Element): number {\n        const hintPlacement = step.hintPlacement;\n        const targetElementClientRect = targetElement.getBoundingClientRect();\n        const { width: targetElementWidth, height: targetElementHeight } = targetElementClientRect;\n        let hintOffset: number = step.hintOffset || 0;\n        const pointXAxisOffset = pointPosition[0];\n        const pointYAxisOffset = pointPosition[1];\n\n        if (hintPlacement.startsWith('top')) {\n            if (pointYAxisOffset < pointContainerSize) {\n                hintOffset = hintOffset + Math.abs(pointYAxisOffset) + pointContainerSize;\n            }\n        } else if (hintPlacement.startsWith('bottom')) {\n            if (pointYAxisOffset > targetElementHeight) {\n                hintOffset = hintOffset + (pointYAxisOffset - targetElementHeight) + 10; // 10 为空隙量\n            }\n        } else if (hintPlacement.startsWith('left')) {\n            if (pointXAxisOffset < 0) {\n                hintOffset = hintOffset + Math.abs(pointXAxisOffset) + pointContainerSize;\n            }\n        } else if (hintPlacement.startsWith('right')) {\n            if (pointXAxisOffset > targetElementWidth) {\n                hintOffset = hintOffset + (pointXAxisOffset - targetElementWidth) + 10; // 10 为空隙量\n            }\n        }\n        return hintOffset;\n    }\n\n    private removeTip() {\n        if (this.lastPopoverRef) {\n            this.lastPopoverRef.close();\n            this.lastPopoverRef = undefined;\n        }\n        if (this.lastTipContainer) {\n            this.renderer.removeChild(this.document.body, this.lastTipContainer);\n            this.lastTipContainer = undefined;\n        }\n        if (this.lastTargetElement && this.targetElementObserver) {\n            this.targetElementObserver.unsubscribe();\n            this.lastTargetElement = undefined;\n            this.targetElementObserver = undefined;\n        }\n    }\n\n    private isTipHasTarget(step: ThyGuiderStep): boolean {\n        if (step.target) {\n            return !Array.isArray(step.target);\n        } else {\n            return !!this.guiderManager.getActiveTarget(step.key);\n        }\n    }\n}\n","import { Type } from '@angular/core';\nimport { ThyPlacement } from 'ngx-tethys/core';\n\n// export type StepTipData = {\n//     [key: string]: any;\n//     title?: string;\n//     description?: string | TemplateRef<any>;\n//     image?: string;\n// };\n\nexport interface ThyGuiderStep<TData = any> {\n    key: string;\n    target?: string | [number, number];\n    data: TData;\n    route?: string;\n    hintPlacement?: ThyPlacement;\n    hintOffset?: number;\n    pointOffset?: [number, number];\n    // children: StepInfo<T>[]\n}\n\nexport class ThyGuiderConfig {\n    /** hint Component,default is ThyGuiderHintComponent */\n    hintComponent?: Type<unknown>;\n\n    /** steps info */\n    steps: ThyGuiderStep[];\n\n    /** hint default position when step info not set hintPlacement */\n    hintPlacement?: ThyPlacement;\n\n    /** useful when without target */\n    defaultPosition?: [number, number];\n\n    /** setting default point offset */\n    pointOffset?: [number, number];\n\n    /** like popover offset */\n    hintOffset?: number;\n\n    /** popover active class */\n    hintClass?: string | string[];\n\n    /** guider point class */\n    pointClass?: string | string[];\n}\n\nexport const defaultGuiderPositionConfig = {\n    hintComponent: null as Type<unknown>,\n    hintPlacement: 'rightBottom',\n    defaultPosition: [0, 0],\n    pointOffset: [0, 0],\n    hintOffset: 4\n};\n","import { Router } from '@angular/router';\nimport { helpers } from 'ngx-tethys/util';\nimport { DOCUMENT } from '@angular/common';\nimport { ThyPopover } from 'ngx-tethys/popover';\nimport { ThyGuiderManager } from './guider-manager';\nimport { ThyGuiderStepRef } from './guider-step-ref';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { ThyGuiderConfig, ThyGuiderStep } from './guider.class';\nimport { Inject, NgZone, RendererFactory2 } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\n\nexport class ThyGuiderRef {\n    public steps: ThyGuiderStep[];\n\n    private stepChange$: ReplaySubject<ThyGuiderStep> = new ReplaySubject<ThyGuiderStep>();\n\n    private guiderEnded$ = new Subject();\n\n    private closed$ = new Subject<ThyGuiderStep>();\n\n    private targetClicked$ = new Subject<ThyGuiderStep>();\n\n    private currentStep: ThyGuiderStep;\n\n    private currentStepIndex: number;\n\n    private stepsRef: ThyGuiderStepRef[];\n\n    constructor(\n        public config: ThyGuiderConfig,\n        private rendererFactory: RendererFactory2,\n        private popover: ThyPopover,\n        private router: Router,\n        private guiderManager: ThyGuiderManager,\n        private ngZone: NgZone,\n        private overlay: Overlay,\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.stepsRef = config.steps.map((step, index) => {\n            return new ThyGuiderStepRef(step, index, this.rendererFactory, this.popover, this.guiderManager, this.overlay, this.document);\n        });\n        this.steps = config.steps;\n    }\n\n    public stepChange(): Observable<ThyGuiderStep> {\n        return this.stepChange$.asObservable();\n    }\n\n    public ended() {\n        return this.guiderEnded$;\n    }\n\n    public closed() {\n        return this.closed$;\n    }\n\n    public targetClicked() {\n        return this.targetClicked$;\n    }\n\n    public start(startWith?: number) {\n        this.to(startWith);\n\n        return this.stepChange();\n    }\n\n    public next() {\n        if (this.currentStepIndex + 1 > this.steps.length) {\n            return;\n        }\n        this.to(this.currentStepIndex + 1);\n    }\n\n    public previous() {\n        if (this.currentStepIndex - 1 < 0) {\n            return;\n        }\n\n        this.to(this.currentStepIndex - 1);\n    }\n\n    public active(indexOrKey: number | string): void {\n        if (helpers.isNumber(indexOrKey)) {\n            this.to(indexOrKey as number);\n            return;\n        }\n        if (helpers.isString(indexOrKey)) {\n            const index = this.steps.findIndex(step => step.key === (indexOrKey as string));\n            this.to(index);\n            return;\n        }\n    }\n\n    private to(index: number): void {\n        this.removeExistedStep();\n\n        if (!helpers.isNumber(index) || index >= this.steps.length || index < 0 || Number.isNaN(index)) {\n            index = 0;\n        }\n        this.currentStep = this.steps[index];\n        this.currentStepIndex = index;\n\n        // update guiderManager\n        this.guiderManager.updateActive(this.currentStep.key, this);\n        if (this.currentStep.route && this.currentStep.route !== this.router.url) {\n            this.ngZone.run(() => {\n                this.router.navigateByUrl(this.currentStep.route);\n            });\n            return;\n        }\n        setTimeout(() => {\n            this.drawStep();\n            this.notifyStepClicked();\n        }, 0);\n    }\n\n    public close() {\n        this.removeManagerActiveKey();\n        this.stepsRef[this.currentStepIndex]?.dispose();\n        this.closed$.next(this.currentStep);\n    }\n\n    public end() {\n        this.close();\n        this.guiderEnded$.next(this.currentStep);\n        this.notifyGuiderIsFinished();\n    }\n\n    private removeManagerActiveKey() {\n        const activeKey = this.guiderManager.getActive().key;\n        if (activeKey && this.steps.some(step => step.key === activeKey)) {\n            this.guiderManager.updateActive('', undefined);\n        }\n    }\n\n    private notifyStepClicked() {\n        this.stepChange$.next(this.currentStep);\n    }\n\n    private drawStep() {\n        this.removeExistedStep();\n        this.stepsRef[this.currentStepIndex].show(this);\n    }\n\n    private notifyGuiderIsFinished() {\n        this.stepChange$.complete();\n        // this.targetClicked().unsubscribe();\n        this.currentStepIndex = 0;\n    }\n\n    private removeExistedStep() {\n        this.stepsRef[this.currentStepIndex]?.dispose();\n    }\n}\n","import { Router } from '@angular/router';\nimport { helpers } from 'ngx-tethys/util';\nimport { DOCUMENT } from '@angular/common';\nimport { ThyGuiderRef } from './guider-ref';\nimport { Inject, NgZone } from '@angular/core';\nimport { ThyPopover } from 'ngx-tethys/popover';\nimport { ThyGuiderManager } from './guider-manager';\nimport { Injectable, RendererFactory2 } from '@angular/core';\nimport { ThyGuiderStep, ThyGuiderConfig, defaultGuiderPositionConfig } from './guider.class';\nimport { Overlay } from '@angular/cdk/overlay';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyGuider {\n    private guiderRef: ThyGuiderRef;\n\n    private guiderRefs: ThyGuiderRef[] = [];\n\n    constructor(\n        private readonly rendererFactory: RendererFactory2,\n        private popover: ThyPopover,\n        private router: Router,\n        private guiderManager: ThyGuiderManager,\n        private ngZone: NgZone,\n        private overlay: Overlay,\n        @Inject(DOCUMENT) private document: any\n    ) {}\n\n    public create(config: ThyGuiderConfig): ThyGuiderRef {\n        if (!config || !config?.steps || !helpers.isArray(config?.steps)) {\n            throw new Error(`'config.steps' must be an array of length greater than 0`);\n        }\n        const normalizeConfig = this.normalizeConfig(config);\n        this.guiderRef = new ThyGuiderRef(\n            normalizeConfig,\n            this.rendererFactory,\n            this.popover,\n            this.router,\n            this.guiderManager,\n            this.ngZone,\n            this.overlay,\n            this.document\n        );\n        this.guiderRef.closed().subscribe(() => {\n            const index = this.guiderRefs.findIndex(guiderRef => guiderRef === this.guiderRef);\n            this.guiderRefs.splice(index, 1);\n        });\n        this.guiderRefs.push(this.guiderRef);\n        return this.guiderRef;\n    }\n\n    private normalizeConfig(config: ThyGuiderConfig): ThyGuiderConfig {\n        const normalizeConfig = Object.assign({}, defaultGuiderPositionConfig, config);\n        normalizeConfig.steps = normalizeConfig.steps.map(step => {\n            return this.normalizeStep(step, normalizeConfig);\n        });\n        return normalizeConfig;\n    }\n\n    private normalizeStep(step: ThyGuiderStep, config: ThyGuiderConfig): ThyGuiderStep {\n        const tempStep = Object.assign(\n            {\n                hintPlacement: config.hintPlacement,\n                hintOffset: config.hintOffset,\n                pointOffset: config.pointOffset\n            },\n            step\n        );\n\n        return tempStep;\n    }\n\n    close() {\n        if (this.guiderRefs.length > 0) {\n            const lasGuiderRef = this.guiderRefs[this.guiderRefs.length - 1];\n            if (lasGuiderRef) {\n                lasGuiderRef.close();\n                this.guiderRefs.pop();\n            }\n        }\n    }\n}\n","import { ThyGuiderManager } from './guider-manager';\nimport { AfterViewInit, Directive, ElementRef, Input, OnDestroy, OnInit, NgZone } from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n@Directive({ selector: '[thyGuiderTarget]', exportAs: 'thyGuiderTarget' })\nexport class ThyGuiderTargetDirective implements OnInit, OnDestroy, AfterViewInit {\n    @Input('thyGuiderTarget')\n    target: string;\n\n    constructor(private guiderManager: ThyGuiderManager, private el: ElementRef, private ngZone: NgZone) {}\n\n    ngOnInit() {\n        this.guiderManager.addStepTarget(this.target, this.el.nativeElement);\n        this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n            const { key, guiderRef } = this.guiderManager.getActive();\n            if (key === this.target) {\n                const index = guiderRef.steps.findIndex(step => step.key === this.target);\n                this.ngZone.run(() => {\n                    guiderRef.active(index);\n                });\n            }\n        });\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        const { guiderRef } = this.guiderManager.getActive();\n        if (guiderRef) {\n            guiderRef.close();\n        }\n        this.guiderManager.removeStepTarget(this.target);\n    }\n}\n","import { HostBinding, Component, Input, OnInit, TemplateRef } from '@angular/core';\nimport { ThyGuiderRef } from '../guider-ref';\nimport { helpers } from 'ngx-tethys/util';\nimport { defaultGuiderPositionConfig, ThyGuiderStep } from '../guider.class';\nimport { ThyGuiderStepRef } from '../guider-step-ref';\n\n@Component({\n    selector: 'thy-guider-hint',\n    templateUrl: 'guider-hint.component.html'\n})\nexport class ThyGuiderHintComponent implements OnInit {\n    @HostBinding('class.thy-guider-tip-container') guiderHint = true;\n\n    public guiderRef: ThyGuiderRef;\n\n    public stepRef: ThyGuiderStepRef;\n\n    public descriptionString: string;\n\n    public descriptionTemplateRef: TemplateRef<any>;\n\n    public currentStepIndex: number;\n\n    constructor() {}\n\n    ngOnInit() {\n        this.setDescription(this.stepRef.step.data.description);\n    }\n\n    private setDescription(value: string | TemplateRef<any>) {\n        if (helpers.isString(value)) {\n            this.descriptionString = value as string;\n        } else {\n            this.descriptionTemplateRef = value as TemplateRef<any>;\n        }\n    }\n\n    public jump() {\n        this.guiderRef.end();\n    }\n\n    public prev() {\n        this.guiderRef.previous();\n    }\n\n    public next() {\n        this.guiderRef.next();\n    }\n\n    public end() {\n        this.guiderRef.end();\n    }\n\n    public trackByFn(index: number, step: ThyGuiderStep) {\n        return step.key || index;\n    }\n}\n\ndefaultGuiderPositionConfig.hintComponent = ThyGuiderHintComponent;\n","import { NgModule } from '@angular/core';\nimport { ThyGuider } from './guider.service';\nimport { CommonModule } from '@angular/common';\nimport { ThyIconModule } from 'ngx-tethys/icon';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyButtonModule } from 'ngx-tethys/button';\nimport { ThyPopoverModule } from 'ngx-tethys/popover';\nimport { ThyGuiderTargetDirective } from './guider.directive';\nimport { ThyGuiderHintComponent } from './guider-hint/guider-hint.component';\n\n@NgModule({\n    imports: [CommonModule, ThySharedModule, ThyIconModule, ThyButtonModule, ThyPopoverModule],\n    declarations: [ThyGuiderHintComponent, ThyGuiderTargetDirective],\n    exports: [ThyGuiderHintComponent, ThyGuiderTargetDirective],\n    entryComponents: [ThyGuiderHintComponent],\n    providers: [ThyGuider]\n})\nexport class ThyGuiderModule {}\n"]}
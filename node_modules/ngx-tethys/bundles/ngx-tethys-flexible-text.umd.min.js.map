{"version":3,"sources":["../../src/flexible-text/flexible-text.component.ts","../../src/flexible-text/flexible-text.module.ts"],"names":["ThyFlexibleTextComponent","elementRef","viewContainerRef","tooltipService","updateHostClassService","contentObserver","this","isOverflow","subscription","initializeElement","Object","defineProperty","prototype","containerClass","value","updateContainerClass","content","thyTooltipDirective","placement","ngOnInit","attach","trigger","thyTooltipDisabled","ngAfterContentInit","_this","applyOverflow","observe","pipe","debounceTime","subscribe","ngOnDestroy","detach","unsubscribe","nativeElement","clientWidth","scrollWidth","isUndefinedOrNull","flexibleTextClass","_a","text-truncate","updateClassByMap","Component","args","selector","exportAs","template","providers","TooltipService","UpdateHostClassService","ElementRef","ViewContainerRef","ContentObserver","Input","NgModule","declarations","imports","CommonModule","ThyTooltipModule","ObserversModule","exports"],"mappings":"2yBAoDI,SAAAA,EACYC,EACAC,EACDC,EACCC,EACAC,GAJAC,KAAAL,WAAAA,EACAK,KAAAJ,iBAAAA,EACDI,KAAAH,eAAAA,EACCG,KAAAF,uBAAAA,EACAE,KAAAD,gBAAAA,EAzCZC,KAAAC,YAAa,EAQbD,KAAAE,aAAoC,KAmChCF,KAAKF,uBAAuBK,kBAAkBH,KAAKL,mBA/BvDS,OAAAC,eACIX,EAAAY,UAAA,oBAAiB,KADrB,WAEI,OAAON,KAAKO,oBAGhB,SAAsBC,GAClBR,KAAKO,eAAiBC,EACtBR,KAAKS,wDAGTL,OAAAC,eAAgCX,EAAAY,UAAA,aAAU,KAA1C,SAA2CE,GACvCR,KAAKU,QAAUF,EACXR,KAAKH,eAAec,sBACpBX,KAAKH,eAAec,oBAAoBD,QAAUV,KAAKU,0CAI/DN,OAAAC,eAAkCX,EAAAY,UAAA,eAAY,KAA9C,SAA+CE,GAC3CR,KAAKY,UAAYJ,EACbR,KAAKH,eAAec,sBACpBX,KAAKH,eAAec,oBAAoBC,UAAYZ,KAAKY,4CAcjElB,EAAAY,UAAAO,SAAA,WACIb,KAAKS,uBACLT,KAAKH,eAAeiB,OAAOd,KAAKL,WAAYK,KAAKJ,iBAAkBI,KAAKe,SACpEf,KAAKY,YACLZ,KAAKH,eAAec,oBAAoBC,UAAYZ,KAAKY,WAE7DZ,KAAKH,eAAec,oBAAoBD,QAAUV,KAAKU,QACvDV,KAAKH,eAAec,oBAAoBK,oBAAqB,GAGjEtB,EAAAY,UAAAW,mBAAA,WAAA,IAAAC,EAAAlB,KACIA,KAAKmB,gBACLnB,KAAKE,aAAeF,KAAKD,gBACpBqB,QAAQpB,KAAKL,YACb0B,KAAKC,EAAAA,aAAa,MAClBC,WAAU,SAACf,GACRU,EAAKC,oBAIjBzB,EAAAY,UAAAkB,YAAA,WACIxB,KAAKH,eAAe4B,SAChBzB,KAAKE,cACLF,KAAKE,aAAawB,eAI1BhC,EAAAY,UAAAa,cAAA,WACI,IAAMQ,EAAgB3B,KAAKL,WAAWgC,cAClCA,EAAcC,YAAcD,EAAcE,YAC1C7B,KAAKC,YAAa,EAElBD,KAAKC,YAAa,EAEtBD,KAAKH,eAAec,oBAAoBK,oBAAsBhB,KAAKC,YAGvEP,EAAAY,UAAAG,qBAAA,iBACUF,EAAiBuB,EAAAA,kBAAkB9B,KAAKO,gBAAkB,0BAA4BP,KAAKO,eAC3FwB,IAAiBC,EAAA,CACnBC,iBAAiB,IAChB1B,GAAoC,KAAnBA,KAEtBP,KAAKF,uBAAuBoC,iBAAiBH,6BAhGpDI,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,sCACVC,SAAU,kBACVC,SAAA,8BACAC,UAAW,CAACC,EAAAA,eAAgBC,EAAAA,qEAbQC,EAAAA,kBAAoBC,EAAAA,wBAEnDH,EAAAA,sBACAC,EAAAA,8BACAG,EAAAA,oDAsBJC,EAAAA,MAAKV,KAAA,CAAC,gDAENU,EAAAA,MAAKV,KAAA,CAAC,yCAUNU,EAAAA,MAAKV,KAAA,CAAC,2CAONU,EAAAA,MAAKV,KAAA,CAAC,gCClCX,iCALCW,EAAAA,SAAQX,KAAA,CAAC,CACNY,aAAc,CAACtD,GACfuD,QAAS,CAACC,EAAAA,aAAcC,EAAAA,iBAAkBC,EAAAA,iBAC1CC,QAAS,CAAC3D","sourcesContent":["import { Component, Input, TemplateRef, ElementRef, OnInit, ViewContainerRef, OnDestroy, AfterContentInit } from '@angular/core';\nimport { timer, Subject, Subscription } from 'rxjs';\nimport { TooltipService } from 'ngx-tethys/tooltip';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { ContentObserver } from '@angular/cdk/observers';\nimport { debounceTime } from 'rxjs/operators';\nimport { ThyPlacement } from 'ngx-tethys/core';\nimport { isUndefinedOrNull } from 'ngx-tethys/util';\n\n@Component({\n    selector: 'thy-flexible-text,[thyFlexibleText]',\n    exportAs: 'thyFlexibleText',\n    templateUrl: './flexible-text.component.html',\n    providers: [TooltipService, UpdateHostClassService]\n})\nexport class ThyFlexibleTextComponent implements OnInit, AfterContentInit, OnDestroy {\n    isOverflow = false;\n\n    content: string | TemplateRef<HTMLElement>;\n\n    placement: ThyPlacement;\n\n    containerClass: string;\n\n    subscription: Subscription | null = null;\n\n    @Input('thyTooltipTrigger') trigger: 'hover' | 'focus' | 'click';\n\n    @Input('thyContainerClass')\n    get thyContainerClass(): string {\n        return this.containerClass;\n    }\n\n    set thyContainerClass(value: string) {\n        this.containerClass = value;\n        this.updateContainerClass();\n    }\n\n    @Input('thyTooltipContent') set thyContent(value: string | TemplateRef<HTMLElement>) {\n        this.content = value;\n        if (this.tooltipService.thyTooltipDirective) {\n            this.tooltipService.thyTooltipDirective.content = this.content;\n        }\n    }\n\n    @Input('thyTooltipPlacement') set thyPlacement(value: ThyPlacement) {\n        this.placement = value;\n        if (this.tooltipService.thyTooltipDirective) {\n            this.tooltipService.thyTooltipDirective.placement = this.placement;\n        }\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        private viewContainerRef: ViewContainerRef,\n        public tooltipService: TooltipService,\n        private updateHostClassService: UpdateHostClassService,\n        private contentObserver: ContentObserver\n    ) {\n        this.updateHostClassService.initializeElement(this.elementRef);\n    }\n\n    ngOnInit() {\n        this.updateContainerClass();\n        this.tooltipService.attach(this.elementRef, this.viewContainerRef, this.trigger);\n        if (this.placement) {\n            this.tooltipService.thyTooltipDirective.placement = this.placement;\n        }\n        this.tooltipService.thyTooltipDirective.content = this.content;\n        this.tooltipService.thyTooltipDirective.thyTooltipDisabled = true;\n    }\n\n    ngAfterContentInit() {\n        this.applyOverflow();\n        this.subscription = this.contentObserver\n            .observe(this.elementRef)\n            .pipe(debounceTime(100))\n            .subscribe((value: MutationRecord[]) => {\n                this.applyOverflow();\n            });\n    }\n\n    ngOnDestroy() {\n        this.tooltipService.detach();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    applyOverflow() {\n        const nativeElement = this.elementRef.nativeElement;\n        if (nativeElement.clientWidth < nativeElement.scrollWidth) {\n            this.isOverflow = true;\n        } else {\n            this.isOverflow = false;\n        }\n        this.tooltipService.thyTooltipDirective.thyTooltipDisabled = !this.isOverflow;\n    }\n\n    updateContainerClass() {\n        const containerClass = isUndefinedOrNull(this.containerClass) ? 'flexible-text-container' : this.containerClass;\n        const flexibleTextClass = {\n            'text-truncate': true,\n            [containerClass]: containerClass !== ''\n        };\n        this.updateHostClassService.updateClassByMap(flexibleTextClass);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyFlexibleTextComponent } from './flexible-text.component';\nimport { ThyTooltipModule } from 'ngx-tethys/tooltip';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n@NgModule({\n    declarations: [ThyFlexibleTextComponent],\n    imports: [CommonModule, ThyTooltipModule, ObserversModule],\n    exports: [ThyFlexibleTextComponent]\n})\nexport class ThyFlexibleTextModule {}\n"]}
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-tethys/shared'), require('ngx-tethys/icon'), require('rxjs/operators'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/timeline', ['exports', '@angular/core', '@angular/common', 'ngx-tethys/shared', 'ngx-tethys/icon', 'rxjs/operators', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].timeline = {}), global.ng.core, global.ng.common, global['ngx-tethys'].shared, global['ngx-tethys'].icon, global.rxjs.operators, global.rxjs));
}(this, (function (exports, core, common, shared, icon, operators, rxjs) { 'use strict';

    var ThyTimelineService = /** @class */ (function () {
        function ThyTimelineService() {
            this.check$ = new rxjs.ReplaySubject(1);
        }
        ThyTimelineService.prototype.markForCheck = function () {
            this.check$.next();
        };
        return ThyTimelineService;
    }());
    ThyTimelineService.decorators = [
        { type: core.Injectable }
    ];

    var ThyTimelineItemComponent = /** @class */ (function () {
        function ThyTimelineItemComponent(cdr, timelineService) {
            this.cdr = cdr;
            this.timelineService = timelineService;
            this.color = 'primary';
            this.isLast = false;
            this.isFirst = false;
            this.reverse = false;
        }
        Object.defineProperty(ThyTimelineItemComponent.prototype, "thyColor", {
            set: function (value) {
                if (value) {
                    this.color = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyTimelineItemComponent.prototype.detectChanges = function () {
            this.cdr.detectChanges();
        };
        ThyTimelineItemComponent.prototype.ngOnChanges = function (changes) {
            this.timelineService.markForCheck();
        };
        ThyTimelineItemComponent.prototype.ngOnInit = function () { };
        return ThyTimelineItemComponent;
    }());
    ThyTimelineItemComponent.decorators = [
        { type: core.Component, args: [{
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    selector: 'thy-timeline-item',
                    template: "<ng-template #timelineItem>\n  <div\n    class=\"thy-timeline-item\"\n    [class.thy-timeline-item-reverse-last]=\"isLast && reverse\"\n    [class.thy-timeline-item-last]=\"isLast\"\n    [class.thy-timeline-item-reverse-first]=\"isFirst && reverse\"\n    [class.thy-timeline-item-right]=\"(thyPosition || position) === 'right'\"\n    [class.thy-timeline-item-left]=\"(thyPosition || position) === 'left'\"\n  >\n    <div class=\"thy-timeline-item-tail\"></div>\n    <div\n      class=\"thy-timeline-item-dot\"\n      [class.thy-timeline-item-dot-primary]=\"color === 'primary'\"\n      [class.thy-timeline-item-dot-success]=\"color === 'success'\"\n      [class.thy-timeline-item-dot-warning]=\"color === 'warning'\"\n      [class.thy-timeline-item-dot-danger]=\"color === 'danger'\"\n      [class.thy-timeline-item-dot-info]=\"color === 'info'\"\n      [class.thy-timeline-item-dot-custom]=\"!!dot\"\n    >\n      <ng-template *ngIf=\"dot\" [ngTemplateOutlet]=\"dot\"></ng-template>\n    </div>\n    <div class=\"thy-timeline-item-content\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"thy-timeline-item-content-other-side\">\n      <ng-template *ngIf=\"description\" [ngTemplateOutlet]=\"description\"></ng-template>\n    </div>\n  </div>\n</ng-template>\n",
                    exportAs: 'ThyTimelineItem'
                },] }
    ];
    ThyTimelineItemComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: ThyTimelineService }
    ]; };
    ThyTimelineItemComponent.propDecorators = {
        template: [{ type: core.ViewChild, args: ['timelineItem', { static: false },] }],
        className: [{ type: core.HostBinding, args: ['class',] }],
        thyColor: [{ type: core.Input }],
        thyPosition: [{ type: core.Input }],
        dot: [{ type: core.ContentChild, args: ['dot', { static: false },] }],
        description: [{ type: core.ContentChild, args: ['description', { static: false },] }]
    };

    exports.ThyTimeModes = void 0;
    (function (ThyTimeModes) {
        ThyTimeModes["left"] = "left";
        ThyTimeModes["right"] = "right";
        ThyTimeModes["center"] = "center";
    })(exports.ThyTimeModes || (exports.ThyTimeModes = {}));
    var ThyTimelineComponent = /** @class */ (function () {
        function ThyTimelineComponent(cdr, timelineService) {
            this.cdr = cdr;
            this.timelineService = timelineService;
            this.thyDirection = 'vertical';
            this.timelineItems = [];
            this.destroy$ = new rxjs.Subject();
            this.isTimeline = true;
            this.rightTimeline = false;
            this.centerTimeline = false;
            this.templateTimeline = false;
            this.horizontal = false;
        }
        ThyTimelineComponent.prototype.ngOnChanges = function (changes) {
            var thyMode = changes.thyMode, thyReverse = changes.thyReverse;
            if (thyMode && !this.horizontal) {
                if (thyMode.currentValue === 'right') {
                    this.rightTimeline = !this.templateTimeline;
                    this.centerTimeline = false;
                }
                else if (thyMode.currentValue === 'center') {
                    this.centerTimeline = true;
                    this.rightTimeline = false;
                }
                else {
                    this.rightTimeline = false;
                    this.centerTimeline = false;
                }
            }
            if ((simpleChangeActivated(thyMode) && !this.horizontal) || simpleChangeActivated(thyReverse)) {
                this.updateChildren();
            }
        };
        ThyTimelineComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.horizontal = this.thyDirection === 'horizontal' ? true : false;
            this.timelineService.check$.pipe(operators.takeUntil(this.destroy$)).subscribe(function () {
                _this.cdr.markForCheck();
            });
        };
        ThyTimelineComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.updateChildren();
            this.listOfItems.changes.subscribe(function () {
                _this.updateChildren();
            });
        };
        ThyTimelineComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        ThyTimelineComponent.prototype.updateChildren = function () {
            var _this = this;
            if (this.listOfItems && this.listOfItems.length) {
                var length_1 = this.listOfItems.length;
                this.listOfItems.forEach(function (item, index) {
                    item.isLast = !_this.thyReverse ? index === length_1 - 1 : index === 0;
                    item.isFirst = _this.thyReverse ? index === length_1 - 1 : index === 0;
                    item.reverse = _this.thyReverse;
                    if (!_this.horizontal) {
                        item.position = getTimelineItemPosition(index, _this.thyMode);
                    }
                    if (item.description || (item.thyPosition && !_this.horizontal)) {
                        _this.templateTimeline = true;
                    }
                    item.detectChanges();
                });
                this.timelineItems = this.thyReverse ? this.listOfItems.toArray().reverse() : this.listOfItems.toArray();
            }
            this.cdr.markForCheck();
        };
        return ThyTimelineComponent;
    }());
    ThyTimelineComponent.decorators = [
        { type: core.Component, args: [{
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    encapsulation: core.ViewEncapsulation.None,
                    selector: 'thy-timeline',
                    providers: [ThyTimelineService],
                    template: "\n        <ng-container>\n            <ng-container *ngFor=\"let item of timelineItems\">\n                <ng-template [ngTemplateOutlet]=\"item.template\"></ng-template>\n            </ng-container>\n            <ng-content></ng-content>\n        </ng-container>\n    "
                },] }
    ];
    ThyTimelineComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: ThyTimelineService }
    ]; };
    ThyTimelineComponent.propDecorators = {
        thyReverse: [{ type: core.Input }],
        thyMode: [{ type: core.Input }],
        thyDirection: [{ type: core.Input }],
        isTimeline: [{ type: core.HostBinding, args: ["class.thy-timeline",] }],
        rightTimeline: [{ type: core.HostBinding, args: ["class.thy-timeline-right",] }],
        centerTimeline: [{ type: core.HostBinding, args: ["class.thy-timeline-center",] }],
        templateTimeline: [{ type: core.HostBinding, args: ["class.thy-timeline-template",] }],
        horizontal: [{ type: core.HostBinding, args: ["class.thy-timeline-horizontal",] }],
        listOfItems: [{ type: core.ContentChildren, args: [ThyTimelineItemComponent,] }]
    };
    function simpleChangeActivated(simpleChange) {
        return !!(simpleChange && (simpleChange.previousValue !== simpleChange.currentValue || simpleChange.isFirstChange()));
    }
    function getTimelineItemPosition(index, mode) {
        return mode === 'left' ? 'left' : mode === 'right' ? 'right' : mode === 'center' && index % 2 === 0 ? 'left' : 'right';
    }

    var ThyTimelineModule = /** @class */ (function () {
        function ThyTimelineModule() {
        }
        return ThyTimelineModule;
    }());
    ThyTimelineModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyTimelineComponent, ThyTimelineItemComponent],
                    entryComponents: [],
                    imports: [common.CommonModule, shared.ThySharedModule, icon.ThyIconModule],
                    exports: [ThyTimelineComponent, ThyTimelineItemComponent],
                    providers: []
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyTimelineComponent = ThyTimelineComponent;
    exports.ThyTimelineItemComponent = ThyTimelineItemComponent;
    exports.ThyTimelineModule = ThyTimelineModule;
    exports.ThyTimelineService = ThyTimelineService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-timeline.umd.js.map

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-tethys/core'), require('ngx-tethys/util'), require('@angular/forms'), require('rxjs/operators'), require('ngx-tethys/shared'), require('ngx-tethys/icon')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/input', ['exports', '@angular/core', '@angular/common', 'ngx-tethys/core', 'ngx-tethys/util', '@angular/forms', 'rxjs/operators', 'ngx-tethys/shared', 'ngx-tethys/icon'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].input = {}), global.ng.core, global.ng.common, global['ngx-tethys'].core, global['ngx-tethys'].util, global.ng.forms, global.rxjs.operators, global['ngx-tethys'].shared, global['ngx-tethys'].icon));
}(this, (function (exports, core, common, core$1, util, forms, operators, shared, icon) { 'use strict';

    var inputGroupSizeMap$1 = {
        xs: ['form-control-xs'],
        sm: ['form-control-sm'],
        md: ['form-control-md'],
        lg: ['form-control-lg']
    };
    var ThyInputDirective = /** @class */ (function () {
        function ThyInputDirective(updateHostClassService, elementRef, render) {
            this.updateHostClassService = updateHostClassService;
            this.elementRef = elementRef;
            this.render = render;
            this._isFormControl = true;
            this.initialized = false;
            this.updateHostClassService.initializeElement(elementRef.nativeElement);
        }
        Object.defineProperty(ThyInputDirective.prototype, "thySize", {
            set: function (size) {
                if (size && inputGroupSizeMap$1[size]) {
                    this.updateHostClassService.updateClass(inputGroupSizeMap$1[size]);
                }
                else {
                    this.updateHostClassService.updateClass([]);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyInputDirective.prototype, "thyAutocomplete", {
            set: function (value) {
                this.autocomplete = util.coerceBooleanProperty(value);
                if (this.initialized) {
                    this.setAutocomplete();
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyInputDirective.prototype.ngOnInit = function () {
            this.initialized = true;
            this.setAutocomplete();
        };
        ThyInputDirective.prototype.setAutocomplete = function () {
            this.render.setAttribute(this.elementRef.nativeElement, 'autocomplete', this.autocomplete ? 'on' : 'off');
        };
        return ThyInputDirective;
    }());
    ThyInputDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[thyInput]',
                    providers: [core$1.UpdateHostClassService]
                },] }
    ];
    ThyInputDirective.ctorParameters = function () { return [
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    ThyInputDirective.propDecorators = {
        _isFormControl: [{ type: core.HostBinding, args: ['class.form-control',] }],
        thySize: [{ type: core.Input }],
        thyAutocomplete: [{ type: core.Input }]
    };

    var CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return ThyInputComponent; }),
        multi: true
    };
    var noop$1 = function () { };
    var Éµ0$1 = noop$1;
    var password = 'password';
    var ThyInputComponent = /** @class */ (function () {
        function ThyInputComponent(ngZone) {
            this.ngZone = ngZone;
            this.placeholder = '';
            this.thyAutofocus = false;
            this.readonly = false;
            this.focus = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this._type = 'text';
            this.onTouchedCallback = noop$1;
            this.onChangeCallback = noop$1;
            this._isSearchContainer = true;
            this._isFormControl = true;
            this._isFocus = false;
            this.disabled = false;
        }
        Object.defineProperty(ThyInputComponent.prototype, "thyType", {
            set: function (value) {
                this.type = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyInputComponent.prototype, "thyAutocomplete", {
            set: function (value) {
                this.autocomplete = value;
            },
            enumerable: false,
            configurable: true
        });
        ThyInputComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.ngZone.onStable.pipe(operators.take(1)).subscribe(function () {
                if (_this.isPassword(_this.type)) {
                    _this.appendTemplate = _this.eyeTemplate;
                }
            });
        };
        ThyInputComponent.prototype.writeValue = function (value) {
            this.value = value;
        };
        ThyInputComponent.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        ThyInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        ThyInputComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        ThyInputComponent.prototype.onModelChange = function () {
            this.onChangeCallback(this.value);
        };
        ThyInputComponent.prototype.onInputFocus = function (event) {
            this._isFocus = true;
            this.showLabel = true;
            this.focus.emit(event);
        };
        ThyInputComponent.prototype.onInputBlur = function (event) {
            this._isFocus = false;
            this.showLabel = false;
            this.blur.emit(event);
        };
        ThyInputComponent.prototype.isPassword = function (value) {
            return value === password;
        };
        ThyInputComponent.prototype.togglePasswordType = function () {
            this.type = this.isPassword(this.type) ? 'text' : 'password';
        };
        return ThyInputComponent;
    }());
    ThyInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-input',
                    template: "<div #prepend class=\"input-prepend\" *ngIf=\"prependTemplate\">\n  <ng-template *ngTemplateOutlet=\"prependTemplate\"></ng-template>\n</div>\n<span class=\"input-label input-label-{{ thySize }}\" [class.active]=\"showLabel\">{{ thyLabelText }}</span>\n<input\n  #input\n  thyInput\n  [thySize]=\"thySize\"\n  [thyAutofocus]=\"thyAutofocus\"\n  [type]=\"type\"\n  [placeholder]=\"placeholder\"\n  [disabled]=\"disabled\"\n  [thyAutocomplete]=\"autocomplete\"\n  [(ngModel)]=\"value\"\n  (ngModelChange)=\"onModelChange()\"\n  (focus)=\"onInputFocus($event)\"\n  (blur)=\"onInputBlur($event)\"\n  [readonly]=\"readonly\"\n/>\n<div #append class=\"input-append\" *ngIf=\"appendTemplate\">\n  <ng-template *ngTemplateOutlet=\"appendTemplate\"></ng-template>\n</div>\n\n<ng-template #eye>\n  <a href=\"javascript:;\" class=\"link-secondary input-password-icon\" (click)=\"togglePasswordType()\">\n    <thy-icon *ngIf=\"isPassword(type)\" thyIconName=\"eye\"></thy-icon>\n    <thy-icon *ngIf=\"!isPassword(type)\" thyIconName=\"eye-invisible\"></thy-icon>\n  </a>\n</ng-template>\n",
                    providers: [core$1.UpdateHostClassService, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                    encapsulation: core.ViewEncapsulation.None
                },] }
    ];
    ThyInputComponent.ctorParameters = function () { return [
        { type: core.NgZone }
    ]; };
    ThyInputComponent.propDecorators = {
        placeholder: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        thyAutofocus: [{ type: core.Input }],
        type: [{ type: core.Input }],
        thyType: [{ type: core.Input }],
        thyLabelText: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        thyAutocomplete: [{ type: core.Input }],
        focus: [{ type: core.Output }],
        blur: [{ type: core.Output }],
        appendTemplate: [{ type: core.ContentChild, args: ['append',] }],
        prependTemplate: [{ type: core.ContentChild, args: ['prepend',] }],
        eyeTemplate: [{ type: core.ViewChild, args: ['eye', { static: true },] }],
        _isSearchContainer: [{ type: core.HostBinding, args: ['class.thy-input',] }],
        _isFormControl: [{ type: core.HostBinding, args: ['class.form-control',] }],
        _isFocus: [{ type: core.HostBinding, args: ['class.form-control-active',] }],
        disabled: [{ type: core.HostBinding, args: ['class.disabled',] }]
    };

    var inputGroupSizeMap = {
        sm: ['input-group-sm'],
        lg: ['input-group-lg']
    };
    var ThyInputGroupComponent = /** @class */ (function () {
        function ThyInputGroupComponent(thyTranslate, updateHostClassService, elementRef) {
            this.thyTranslate = thyTranslate;
            this.updateHostClassService = updateHostClassService;
            this.elementRef = elementRef;
            this._isInputGroup = true;
            this.updateHostClassService.initializeElement(elementRef.nativeElement);
        }
        Object.defineProperty(ThyInputGroupComponent.prototype, "thyAppendText", {
            set: function (value) {
                this.appendText = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyInputGroupComponent.prototype, "thyAppendTextTranslateKey", {
            set: function (value) {
                if (value) {
                    this.appendText = this.thyTranslate.instant(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyInputGroupComponent.prototype, "thyPrependText", {
            set: function (value) {
                this.prependText = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyInputGroupComponent.prototype, "thyPrependTextTranslateKey", {
            set: function (value) {
                if (value) {
                    this.prependText = this.thyTranslate.instant(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyInputGroupComponent.prototype, "thySize", {
            set: function (size) {
                if (size && inputGroupSizeMap[size]) {
                    this.updateHostClassService.updateClass(inputGroupSizeMap[size]);
                }
                else {
                    this.updateHostClassService.updateClass([]);
                }
            },
            enumerable: false,
            configurable: true
        });
        return ThyInputGroupComponent;
    }());
    ThyInputGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-input-group',
                    template: "<div class=\"input-group-prepend\" *ngIf=\"prependText\">\n    <span class=\"input-group-text\">{{prependText}}</span>\n</div>\n<div class=\"input-group-prepend\" *ngIf=\"prependTemplate\">\n    <ng-template *ngTemplateOutlet=\"prependTemplate\"></ng-template>\n</div>\n<ng-content></ng-content>\n<div class=\"input-group-append\" *ngIf=\"appendText\">\n    <span class=\"input-group-text\">{{appendText}}</span>\n</div>\n<div class=\"input-group-append\" *ngIf=\"appendTemplate\">\n    <ng-template *ngTemplateOutlet=\"appendTemplate\"></ng-template>\n</div>",
                    providers: [core$1.UpdateHostClassService],
                    encapsulation: core.ViewEncapsulation.None
                },] }
    ];
    ThyInputGroupComponent.ctorParameters = function () { return [
        { type: core$1.ThyTranslate },
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef }
    ]; };
    ThyInputGroupComponent.propDecorators = {
        _isInputGroup: [{ type: core.HostBinding, args: ['class.thy-input-group',] }],
        thyAppendText: [{ type: core.Input }],
        thyAppendTextTranslateKey: [{ type: core.Input }],
        thyPrependText: [{ type: core.Input }],
        thyPrependTextTranslateKey: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        appendTemplate: [{ type: core.ContentChild, args: ['append',] }],
        prependTemplate: [{ type: core.ContentChild, args: ['prepend',] }]
    };

    var CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return ThyInputSearchComponent; }),
        multi: true
    };
    var noop = function () { };
    var Éµ0 = noop;
    var ThyInputSearchComponent = /** @class */ (function () {
        function ThyInputSearchComponent(cdr) {
            this.cdr = cdr;
            this.onTouchedCallback = noop;
            this.onChangeCallback = noop;
            this.disabled = false;
            this.autoFocus = false;
            this._isSearchContainer = true;
            this._isSearchEllipse = false;
            this.name = '';
            this.placeholder = '';
            this.clear = new core.EventEmitter();
        }
        Object.defineProperty(ThyInputSearchComponent.prototype, "thyTheme", {
            set: function (value) {
                if (value === 'ellipse') {
                    this._isSearchEllipse = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyInputSearchComponent.prototype, "thySearchFocus", {
            set: function (value) {
                this.autoFocus = value;
            },
            enumerable: false,
            configurable: true
        });
        ThyInputSearchComponent.prototype.writeValue = function (value) {
            this.searchText = value;
            this.cdr.markForCheck();
        };
        ThyInputSearchComponent.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        ThyInputSearchComponent.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        ThyInputSearchComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        ThyInputSearchComponent.prototype.searchModelChange = function () {
            this.onChangeCallback(this.searchText);
        };
        ThyInputSearchComponent.prototype.clearSearchText = function (event) {
            event.stopPropagation();
            if (this.disabled) {
                return;
            }
            this.searchText = '';
            this.onChangeCallback(this.searchText);
            this.clear.emit(event);
        };
        return ThyInputSearchComponent;
    }());
    ThyInputSearchComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-input-search',
                    template: "<thy-icon class=\"input-prefix-icon\" thyIconName=\"search\"></thy-icon>\n<input\n  class=\"input-search-control\"\n  thyInput\n  [name]=\"name\"\n  [placeholder]=\"placeholder\"\n  [disabled]=\"disabled\"\n  [thyAutofocus]=\"autoFocus\"\n  [(ngModel)]=\"searchText\"\n  (ngModelChange)=\"searchModelChange()\"\n  (blur)=\"onTouchedCallback()\"\n  [thySize]=\"thySize\"\n/>\n<a *ngIf=\"searchText\" class=\"close input-suffix-icon\" href=\"javascript:;\" (click)=\"clearSearchText($event)\">\n  <thy-icon thyIconName=\"close\"></thy-icon>\n</a>\n",
                    providers: [core$1.UpdateHostClassService, CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR],
                    encapsulation: core.ViewEncapsulation.None
                },] }
    ];
    ThyInputSearchComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef }
    ]; };
    ThyInputSearchComponent.propDecorators = {
        _isSearchContainer: [{ type: core.HostBinding, args: ['class.input-search-container',] }],
        _isSearchEllipse: [{ type: core.HostBinding, args: ['class.input-search-ellipse',] }],
        name: [{ type: core.Input }],
        placeholder: [{ type: core.Input }],
        thyTheme: [{ type: core.Input }],
        thySearchFocus: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        clear: [{ type: core.Output }]
    };

    var ThyInputModule = /** @class */ (function () {
        function ThyInputModule() {
        }
        return ThyInputModule;
    }());
    ThyInputModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, shared.ThySharedModule, icon.ThyIconModule],
                    declarations: [ThyInputDirective, ThyInputComponent, ThyInputGroupComponent, ThyInputSearchComponent],
                    exports: [ThyInputDirective, ThyInputComponent, ThyInputGroupComponent, ThyInputSearchComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR;
    exports.CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR = CUSTOM_INPUT_SEARCH_CONTROL_VALUE_ACCESSOR;
    exports.ThyInputComponent = ThyInputComponent;
    exports.ThyInputDirective = ThyInputDirective;
    exports.ThyInputGroupComponent = ThyInputGroupComponent;
    exports.ThyInputModule = ThyInputModule;
    exports.ThyInputSearchComponent = ThyInputSearchComponent;
    exports.Éµ0 = Éµ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-input.umd.js.map

{"version":3,"sources":["../../src/tree/tree.class.ts","../../src/tree/tree.service.ts","../../src/tree/tree-node.class.ts","../../src/tree/tree.component.ts","../../src/tree/tree-node.component.ts","../../src/tree/tree-replace-region.component.ts","../../src/tree/tree.module.ts"],"names":["ThyTreeNodeCheckState","checkStateResolve","node","checkedNodes","children","filter","n","isChecked","checked","unCheckedNodes","unchecked","length","indeterminate","ThyTreeService","this","$statusChange","Subject","prototype","_getParallelTreeNodes","nodes","list","_this","forEach","push","setCheckStateResolve","resolve","resetSortedTreeNodes","treeNodes","parent","level","parentNode","origin","map","getTreeNode","key","find","getExpandedNodes","isExpanded","getCheckedNodes","deleteTreeNode","index","findIndex","splice","expandTreeNodes","keyOrKeys","keys","coerceArray","indexOf","setExpanded","statusChanged","asObservable","setNodeChecked","propagateUp","propagateDown","subNode","syncNodeCheckState","ngOnDestroy","complete","Injectable","ThyTreeNode","service","title","isDisabled","disabled","expanded","isLoading","childNode","Object","defineProperty","treeService","setKey","setTitle","propagate","setLoading","loading","setChecked","getParentNode","getChildren","addChildren","helpers","i","next","eventName","treeTypeClassMap","default","especial","ThyTreeComponent","elementRef","updateHostClassService","thyTreeService","_draggable","thyShowExpand","thyMultiple","thyAsync","_thyType","thyIcons","thyTitleTruncate","thyOnClick","EventEmitter","thyOnCheckboxChange","thyOnExpandChange","thyOnDragDrop","thyTreeClass","beforeDragOver","event","isShowExpand","item","position","ThyDropPosition","in","_onTouched","_onChange","_","value","_expandedKeys","_selectedKeys","getSelectedNodes","_selectTreeNodes","type","expand","collapse","_templateRef","template","_emptyChildrenTemplateRef","ngOnChanges","changes","thyType","isFirstChange","_setTreeType","_instanceSelectionModel","ngOnInit","initializeElement","nativeElement","_setTreeSize","addClass","thySize","_selectionModel","SelectionModel","selectTreeNode","isSelected","toggleTreeNode","toggle","trackByFn","onDragStart","onDragDrop","previousItem","after","before","targetParent","afterNode","targetNode","containerItems","currentIndex","emit","dragNode","isFunction","writeValue","thyNodes","registerOnChange","fn","registerOnTouched","select","getRootNodes","getSelectedNode","selected","addTreeNode","expandAllNodes","collapsedAllNodes","Component","args","selector","encapsulation","ViewEncapsulation","None","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","UpdateHostClassService","ElementRef","Input","HostBinding","Output","ContentChild","static","ThyTreeNodeComponent","root","ngZone","cdr","thyDraggable","thyCheckable","thyTreeNodeClass","destroy$","checkState","pipe","data","takeUntil","subscribe","markForCheck","icon","iconStyle","changeDragIconVisibility","showDragIcon","dragIcon","target","querySelector","style","visibility","nodeMouseEnter","thyBeforeDragStart","dragStartEvent","nodeMouseLeave","clickNode","clickNodeCheck","stopPropagation","expandNode","NgZone","ChangeDetectorRef","ViewChild","ThyTreeReplaceRegionComponent","viewRef","ViewContainerRef","NgModule","declarations","imports","CommonModule","ThyInputModule","ThyButtonModule","ThySharedModule","FormsModule","ThyListModule","ThyOptionModule","ThyLoadingModule","ThyIconModule","ThyDragDropModule","ThyCheckboxModule","entryComponents","exports"],"mappings":"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","sourcesContent":["import { ThyDragDropEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\n\nexport enum ThyTreeNodeCheckState {\n    unchecked = 0,\n    checked = 1,\n    indeterminate = 2\n}\n\nexport interface ThyTreeNodeData<T = any> {\n    key?: number | string;\n\n    title?: string;\n\n    icon?: string;\n\n    iconStyle?: {\n        [key: string]: any;\n    };\n\n    children?: ThyTreeNodeData<T>[];\n\n    origin?: any;\n\n    expanded?: boolean;\n\n    disabled?: boolean;\n\n    checked?: boolean;\n\n    data?: T;\n\n    [key: string]: any;\n}\n\nexport interface ThyTreeEmitEvent<T = any> {\n    eventName: string;\n\n    node?: ThyTreeNode<T>;\n\n    event?: Event | any;\n\n    dragNode?: ThyTreeNode<T>;\n\n    targetNode?: ThyTreeNode<T>;\n}\n\nexport interface ThyTreeDragDropEvent<T = any> {\n    event?: ThyDragDropEvent;\n\n    currentIndex?: number;\n\n    dragNode?: ThyTreeNode<T>;\n\n    targetNode?: ThyTreeNode<T>;\n\n    afterNode?: ThyTreeNode<T>;\n}\n\nexport class ThyTreeIcons {\n    expand?: string;\n\n    collapse?: string;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { ThyTreeNodeCheckState } from './tree.class';\nimport { Subject } from 'rxjs';\nimport { ThyTreeNode } from './tree-node.class';\nimport { coerceArray } from 'ngx-tethys/util';\n\nfunction checkStateResolve(node: ThyTreeNode) {\n    const checkedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);\n    const unCheckedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.unchecked);\n    if (checkedNodes.length === node.children.length) {\n        return ThyTreeNodeCheckState.checked;\n    } else if (unCheckedNodes.length === node.children.length) {\n        return ThyTreeNodeCheckState.unchecked;\n    } else {\n        return ThyTreeNodeCheckState.indeterminate;\n    }\n}\n\n@Injectable()\nexport class ThyTreeService implements OnDestroy {\n    public treeNodes: ThyTreeNode[];\n\n    private checkStateResolve: (node: ThyTreeNode) => ThyTreeNodeCheckState = checkStateResolve;\n\n    $statusChange = new Subject<ThyTreeFormatEmitEvent>();\n\n    constructor() {}\n\n    private _getParallelTreeNodes(nodes: ThyTreeNode[], list: ThyTreeNode[] = []) {\n        (nodes || []).forEach(node => {\n            list.push(node);\n            this._getParallelTreeNodes(node.children || [], list);\n        });\n        return list;\n    }\n\n    setCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState = checkStateResolve) {\n        this.checkStateResolve = resolve;\n    }\n\n    public resetSortedTreeNodes(treeNodes: ThyTreeNode[], parent?: ThyTreeNode) {\n        treeNodes.forEach(node => {\n            node.level = node.parentNode ? node.parentNode.level + 1 : 0;\n            node.origin.children = node.children.map(n => n.origin);\n            node.parentNode = parent;\n            this.resetSortedTreeNodes(node.children, node);\n        });\n    }\n\n    public getTreeNode(key: string | number) {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.find(n => n.key === key);\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isExpanded);\n    }\n\n    public getCheckedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        const children = node.parentNode ? node.parentNode.children : this.treeNodes;\n        const index = children.findIndex(n => n.key === node.key);\n        if (index > -1) {\n            children.splice(index, 1);\n        }\n    }\n\n    public expandTreeNodes(keyOrKeys: string | number | (string | number)[]) {\n        const keys = coerceArray(keyOrKeys);\n        const needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(node => {\n            return keys.indexOf(node.key) > -1;\n        });\n        needExpandNodes.forEach(node => {\n            node.setExpanded(true);\n        });\n    }\n\n    public statusChanged() {\n        return this.$statusChange.asObservable();\n    }\n\n    // 设置节点选中状态\n    public setNodeChecked(node: ThyTreeNode, checked: boolean, propagateUp = true, propagateDown = true) {\n        node.isChecked = checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;\n        node.origin.checked = checked;\n        if (propagateDown && node.children) {\n            node.children.forEach(subNode => {\n                this.setNodeChecked(subNode, checked, false, true);\n            });\n        }\n        if (propagateUp) {\n            this.syncNodeCheckState(node.parentNode);\n        }\n    }\n\n    public syncNodeCheckState(node: ThyTreeNode) {\n        if (node) {\n            node.isChecked = this.checkStateResolve(node);\n            this.syncNodeCheckState(node.parentNode);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.$statusChange.complete();\n        this.$statusChange = null;\n    }\n}\n\nexport interface ThyTreeFormatEmitEvent {\n    eventName: string;\n    node: ThyTreeNode;\n    event?: MouseEvent | DragEvent;\n}\n","import { ThyTreeNodeData, ThyTreeNodeCheckState } from './tree.class';\nimport { ThyTreeService } from './tree.service';\nimport { helpers } from 'ngx-tethys/util';\n\nexport class ThyTreeNode<T = any> {\n    key?: number | string;\n\n    title?: string;\n\n    children: ThyTreeNode[];\n\n    parentNode: ThyTreeNode;\n\n    level = 0;\n\n    origin: ThyTreeNodeData<T>;\n\n    isExpanded: boolean;\n\n    isChecked: ThyTreeNodeCheckState;\n\n    isLoading: boolean;\n\n    isDisabled: boolean;\n\n    private readonly service: ThyTreeService;\n\n    get treeService(): ThyTreeService {\n        if (this.service) {\n            return this.service;\n        } else if (this.parentNode) {\n            return this.parentNode.treeService;\n        }\n    }\n\n    constructor(node: ThyTreeNodeData, parent: ThyTreeNode = null, service?: ThyTreeService) {\n        this.title = node.title;\n        this.key = node.key;\n        this.children = [];\n        this.parentNode = parent;\n        this.level = parent ? parent.level + 1 : this.level;\n        this.origin = node;\n        this.isDisabled = node.disabled || false;\n        this.isExpanded = node.expanded || false;\n        this.isChecked = node.checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;\n        this.isLoading = false;\n        if (node.children) {\n            node.children.forEach(childNode => {\n                this.children.push(new ThyTreeNode(childNode, this));\n            });\n        }\n        this.service = service;\n    }\n\n    public setKey(key: string) {\n        this.origin.key = key;\n        this.key = key;\n    }\n\n    public setTitle(title: string) {\n        this.origin.title = title;\n        this.title = title;\n    }\n\n    public setExpanded(expanded: boolean, propagate = false) {\n        this.origin.expanded = expanded;\n        this.isExpanded = expanded;\n        if (propagate && this.children) {\n            this.children.forEach(n => n.setExpanded(expanded, propagate));\n        }\n    }\n\n    public setLoading(loading: boolean): void {\n        this.isLoading = loading;\n    }\n\n    public setChecked(checked: boolean, propagateUp = true, propagateDown = true) {\n        this.treeService.setNodeChecked(this, checked, propagateUp, propagateDown);\n    }\n\n    public syncNodeCheckState() {\n        this.treeService.syncNodeCheckState(this);\n    }\n\n    public getParentNode(): ThyTreeNode {\n        return this.parentNode;\n    }\n\n    public getChildren(): ThyTreeNode[] {\n        return this.children;\n    }\n\n    public addChildren(children: ThyTreeNodeData | ThyTreeNodeData[], index: number = -1): void {\n        children = helpers.coerceArray(children);\n        ((children as ThyTreeNodeData[]) || []).forEach((childNode: ThyTreeNodeData, i: number) => {\n            if (index === -1) {\n                this.children.push(new ThyTreeNode(childNode, this));\n            } else {\n                this.children.splice(index + i, 0, new ThyTreeNode(childNode, this, this.treeService));\n            }\n        });\n\n        this.origin.children = this.getChildren().map(n => n.origin);\n        this.setLoading(false);\n        this.treeService.$statusChange.next({\n            eventName: 'addChildren',\n            node: this\n        });\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    ElementRef,\n    ViewEncapsulation,\n    TemplateRef,\n    OnInit,\n    OnChanges,\n    EventEmitter,\n    ContentChild,\n    HostBinding,\n    forwardRef,\n    SimpleChanges\n} from '@angular/core';\nimport { ThyTreeNodeData, ThyTreeEmitEvent, ThyTreeDragDropEvent, ThyTreeIcons, ThyTreeNodeCheckState } from './tree.class';\nimport { helpers } from 'ngx-tethys/util';\nimport { ThyTreeService } from './tree.service';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { ThyDragDropEvent, ThyDropPosition, ThyDragOverEvent, ThyDragStartEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\n\ntype ThyTreeSize = 'sm' | '';\n\ntype ThyTreeType = 'default' | 'especial';\n\nconst treeTypeClassMap: any = {\n    default: ['thy-tree-default'],\n    especial: ['thy-tree-especial']\n};\n\n@Component({\n    selector: 'thy-tree',\n    templateUrl: './tree.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ThyTreeComponent),\n            multi: true\n        },\n        ThyTreeService,\n        UpdateHostClassService\n    ]\n})\nexport class ThyTreeComponent implements ControlValueAccessor, OnInit, OnChanges {\n    private _templateRef: TemplateRef<any>;\n\n    private _emptyChildrenTemplateRef: TemplateRef<any>;\n\n    private _draggable = false;\n\n    private _expandedKeys: (string | number)[];\n\n    private _selectedKeys: (string | number)[];\n\n    public _selectionModel: SelectionModel<ThyTreeNode>;\n\n    public treeNodes: ThyTreeNode[];\n\n    @Input()\n    set thyNodes(value: ThyTreeNodeData[]) {\n        this._expandedKeys = this.getExpandedNodes().map(node => node.key);\n        this._selectedKeys = this.getSelectedNodes().map(node => node.key);\n        this.treeNodes = (value || []).map(node => new ThyTreeNode(node, null, this.thyTreeService));\n        this.thyTreeService.treeNodes = this.treeNodes;\n        this.thyTreeService.expandTreeNodes(this._expandedKeys);\n        this._selectTreeNodes(this._selectedKeys);\n    }\n\n    @Input() thyShowExpand: boolean | ((_: ThyTreeNodeData) => boolean) = true;\n\n    @HostBinding(`class.thy-multiple-selection-list`)\n    @Input()\n    thyMultiple = false;\n\n    @HostBinding('class.thy-tree-draggable')\n    @Input()\n    set thyDraggable(value: boolean) {\n        this._draggable = value;\n    }\n\n    get thyDraggable() {\n        return this._draggable;\n    }\n\n    @Input() thyCheckable: boolean;\n\n    @Input() set thyCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState) {\n        this.thyTreeService.setCheckStateResolve(resolve);\n    }\n\n    @Input() thyAsync = false;\n\n    private _thyType: ThyTreeType = 'default';\n\n    @Input()\n    set thyType(type: ThyTreeType) {\n        this._thyType = type;\n        if (type === 'especial') {\n            this.thyIcons = { expand: 'minus-square', collapse: 'plus-square' };\n        }\n    }\n\n    get thyType() {\n        return this._thyType;\n    }\n\n    @Input() thyIcons: ThyTreeIcons = {};\n\n    @Input() thySize: ThyTreeSize;\n\n    @Input() thyTitleTruncate = true;\n\n    @Input() set thySelectedKeys(keys: string[]) {\n        this._selectedKeys = keys;\n    }\n\n    @Input() thyBeforeDragStart: (e: ThyDragStartEvent) => boolean;\n\n    @Input() thyBeforeDragDrop: (e: ThyDragDropEvent) => boolean;\n\n    @Output() thyOnClick: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnExpandChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnDragDrop: EventEmitter<ThyTreeDragDropEvent> = new EventEmitter<ThyTreeDragDropEvent>();\n\n    @ContentChild('treeNodeTemplate', { static: true })\n    set templateRef(template: TemplateRef<any>) {\n        if (template) {\n            this._templateRef = template;\n        }\n    }\n\n    get templateRef() {\n        return this._templateRef;\n    }\n\n    @ContentChild('emptyChildrenTemplate', { static: true }) emptyChildrenTemplate: TemplateRef<any>;\n    set emptyChildrenTemplateRef(template: TemplateRef<any>) {\n        if (template) {\n            this._emptyChildrenTemplateRef = template;\n        }\n    }\n\n    get emptyChildrenTemplateRef() {\n        return this._emptyChildrenTemplateRef;\n    }\n\n    @HostBinding('class.thy-tree') thyTreeClass = true;\n\n    beforeDragOver = (event: ThyDragOverEvent<ThyTreeNode>) => {\n        return this.isShowExpand(event.item) || (!this.isShowExpand(event.item) && event.position !== ThyDropPosition.in);\n    };\n\n    private _onTouched: () => void = () => {};\n\n    private _onChange: (value: any) => void = (_: any) => {};\n\n    constructor(\n        private elementRef: ElementRef,\n        private updateHostClassService: UpdateHostClassService,\n        public thyTreeService: ThyTreeService\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.thyType && !changes.thyType.isFirstChange()) {\n            this._setTreeType();\n        }\n        if (changes.thyMultiple && !changes.thyMultiple.isFirstChange()) {\n            this._instanceSelectionModel();\n        }\n    }\n\n    ngOnInit(): void {\n        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);\n        this._setTreeType();\n        this._setTreeSize();\n        this._instanceSelectionModel();\n        this._selectTreeNodes(this._selectedKeys);\n    }\n\n    private _setTreeType() {\n        if (this.thyType) {\n            this.updateHostClassService.addClass(treeTypeClassMap[this.thyType]);\n        }\n    }\n\n    private _setTreeSize() {\n        if (this.thySize) {\n            this.updateHostClassService.addClass(`thy-tree-${this.thySize}`);\n        }\n    }\n\n    private _instanceSelectionModel() {\n        this._selectionModel = new SelectionModel<any>(this.thyMultiple);\n    }\n\n    private _selectTreeNodes(keys: (string | number)[]) {\n        (keys || []).forEach(key => {\n            const node = this.thyTreeService.getTreeNode(key);\n            if (node) {\n                this.selectTreeNode(this.thyTreeService.getTreeNode(key));\n            }\n        });\n    }\n\n    public isSelected(node: ThyTreeNode) {\n        return this._selectionModel.isSelected(node);\n    }\n\n    public toggleTreeNode(node: ThyTreeNode) {\n        if (node && !node.isDisabled) {\n            this._selectionModel.toggle(node);\n        }\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.key || index;\n    }\n\n    public onDragStart(event: ThyDragStartEvent<ThyTreeNode>) {\n        if (this.isShowExpand(event.item) && event.item.isExpanded) {\n            event.item.setExpanded(false);\n        }\n    }\n\n    public onDragDrop(event: ThyDragDropEvent<ThyTreeNode>) {\n        if (!this.isShowExpand(event.item) && event.position === ThyDropPosition.in) {\n            return;\n        }\n        const parent = event.previousItem.parentNode;\n        if (parent) {\n            parent.children = parent.children.filter(item => item !== event.previousItem);\n        } else {\n            this.treeNodes = this.treeNodes.filter(item => item !== event.previousItem);\n        }\n        switch (event.position) {\n            case ThyDropPosition.in:\n                event.item.addChildren(event.previousItem.origin);\n                break;\n            case ThyDropPosition.after:\n            case ThyDropPosition.before:\n                const targetParent = event.item.parentNode;\n                const index = event.position === ThyDropPosition.before ? 0 : 1;\n                if (targetParent) {\n                    targetParent.addChildren(event.previousItem.origin, targetParent.children.indexOf(event.item) + index);\n                } else {\n                    this.treeNodes.splice(this.treeNodes.indexOf(event.item) + index, 0, event.previousItem);\n                }\n                break;\n        }\n        this.thyTreeService.resetSortedTreeNodes(this.treeNodes);\n\n        let afterNode = null;\n        let targetNode = null;\n        if (event.position === ThyDropPosition.before) {\n            afterNode = event.containerItems[event.currentIndex - 1];\n            targetNode = event.item.parentNode;\n        } else if (event.position === ThyDropPosition.after) {\n            afterNode = event.containerItems[event.currentIndex];\n            targetNode = event.item.parentNode;\n        } else {\n            afterNode = event.item.children[event.item.children.length - 2];\n            targetNode = event.item;\n        }\n        this.thyOnDragDrop.emit({\n            event,\n            currentIndex: event.currentIndex,\n            dragNode: event.previousItem,\n            targetNode: targetNode,\n            afterNode: afterNode\n        });\n    }\n\n    public isShowExpand(node: ThyTreeNode) {\n        if (helpers.isFunction(this.thyShowExpand)) {\n            return (this.thyShowExpand as Function)(node);\n        } else {\n            return this.thyShowExpand;\n        }\n    }\n\n    writeValue(value: ThyTreeNodeData[]): void {\n        this.thyNodes = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n\n    // region Public Functions\n\n    public selectTreeNode(node: ThyTreeNode) {\n        this._selectionModel.select(node);\n    }\n\n    public getRootNodes(): ThyTreeNode[] {\n        return this.treeNodes;\n    }\n\n    public getTreeNode(key: string) {\n        return this.thyTreeService.getTreeNode(key);\n    }\n\n    public getSelectedNode(): ThyTreeNode {\n        return this._selectionModel ? this._selectionModel.selected[0] : null;\n    }\n\n    public getSelectedNodes(): ThyTreeNode[] {\n        return this._selectionModel ? this._selectionModel.selected : [];\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        return this.thyTreeService.getExpandedNodes();\n    }\n\n    public getCheckedNodes(): ThyTreeNode[] {\n        return this.thyTreeService.getCheckedNodes();\n    }\n\n    public addTreeNode(node: ThyTreeNodeData, parent?: ThyTreeNode, index = -1) {\n        if (parent) {\n            parent.addChildren(node, index);\n        } else {\n            if (index > -1) {\n                this.treeNodes.splice(index, 0, new ThyTreeNode(node, null, this.thyTreeService));\n            } else {\n                this.treeNodes.push(new ThyTreeNode(node, null, this.thyTreeService));\n            }\n        }\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        if (this.isSelected(node)) {\n            this._selectionModel.toggle(node);\n        }\n        this.thyTreeService.deleteTreeNode(node);\n    }\n\n    public expandAllNodes() {\n        const nodes = this.getRootNodes();\n        nodes.forEach(n => n.setExpanded(true, true));\n    }\n\n    public collapsedAllNodes() {\n        const nodes = this.getRootNodes();\n        nodes.forEach(n => n.setExpanded(false, true));\n    }\n\n    // endregion\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    Input,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    Output,\n    EventEmitter,\n    NgZone,\n    OnDestroy,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeData, ThyTreeNodeCheckState, ThyTreeEmitEvent } from './tree.class';\nimport { ThyTreeNode } from './tree-node.class';\nimport { ThyTreeService } from './tree.service';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ThyDragStartEvent } from 'ngx-tethys/drag-drop';\n\n@Component({\n    selector: 'thy-tree-node',\n    templateUrl: './tree-node.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeNodeComponent implements OnDestroy {\n    @Input() node: ThyTreeNode;\n\n    @Input() thyAsync = false;\n\n    @Input() thyMultiple = false;\n\n    @Input() thyDraggable = false;\n\n    @Input() thyCheckable = false;\n\n    @Input() thyTitleTruncate: boolean;\n\n    @Input() templateRef: TemplateRef<any>;\n\n    @Input() emptyChildrenTemplateRef: TemplateRef<any>;\n\n    @Output() thyOnClick: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnExpandChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @ContentChild('childrenTree') childrenTreeTemplateRef: TemplateRef<any>;\n\n    @ViewChild('title') titleInputElementRef: ElementRef<HTMLInputElement>;\n\n    @HostBinding('class.thy-tree-node') thyTreeNodeClass = true;\n\n    public get nodeIcon() {\n        return this.node.origin.icon;\n    }\n\n    public get nodeIconStyle() {\n        return this.node.origin.iconStyle;\n    }\n\n    private _showExpand: boolean | ((_: ThyTreeNode) => boolean);\n\n    destroy$ = new Subject();\n\n    checkState = ThyTreeNodeCheckState;\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    constructor(\n        public root: ThyTreeComponent,\n        public thyTreeService: ThyTreeService,\n        private ngZone: NgZone,\n        private cdr: ChangeDetectorRef\n    ) {\n        this.thyTreeService\n            .statusChanged()\n            .pipe(\n                filter(data => data.node.key === this.node.key),\n                takeUntil(this.destroy$)\n            )\n            .subscribe(() => {\n                this.markForCheck();\n            });\n    }\n\n    private changeDragIconVisibility(event: Event, showDragIcon: boolean): void {\n        const nodeElement = event.target as HTMLElement;\n        const dragIcon = nodeElement.querySelector('.thy-tree-drag-icon') as HTMLElement;\n        if (dragIcon) {\n            dragIcon.style.visibility = showDragIcon ? 'visible' : 'hidden';\n        }\n    }\n\n    public nodeMouseEnter(event: Event) {\n        if (!this.root.thyDraggable || this.node.isDisabled) {\n            return;\n        } else if (this.root.thyDraggable && !this.root.thyBeforeDragStart) {\n            this.changeDragIconVisibility(event, true);\n        } else {\n            const containerItems = this.node.getParentNode() ? this.node.getParentNode().getChildren() : this.root.treeNodes;\n            const dragStartEvent: ThyDragStartEvent = {\n                event: event as DragEvent,\n                item: this.node,\n                containerItems,\n                currentIndex: containerItems.indexOf(this.node)\n            };\n            this.changeDragIconVisibility(event, this.root.thyBeforeDragStart(dragStartEvent));\n        }\n    }\n\n    public nodeMouseLeave(event: Event) {\n        if (!this.root.thyDraggable || this.node.isDisabled) {\n            return;\n        } else {\n            this.changeDragIconVisibility(event, false);\n        }\n    }\n\n    public clickNode(event: Event) {\n        if (!this.root.thyMultiple) {\n            this.root.selectTreeNode(this.node);\n        } else {\n            this.root.toggleTreeNode(this.node);\n        }\n        this.thyOnClick.emit({\n            eventName: 'click',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public clickNodeCheck(event: Event) {\n        event.stopPropagation();\n        if (this.node.isChecked === ThyTreeNodeCheckState.unchecked || this.node.isChecked === ThyTreeNodeCheckState.indeterminate) {\n            this.node.setChecked(true);\n        } else {\n            this.node.setChecked(false);\n        }\n        this.thyOnCheckboxChange.emit({\n            eventName: 'checkboxChange',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public expandNode(event: Event) {\n        event.stopPropagation();\n        this.node.setExpanded(!this.node.isExpanded);\n        if (this.root.thyShowExpand) {\n            this.thyOnExpandChange.emit({\n                eventName: 'expand',\n                event: event,\n                node: this.node\n            });\n            if (this.thyAsync && this.node.children.length === 0) {\n                this.node.setLoading(true);\n            }\n        }\n    }\n\n    public isShowExpand(node: ThyTreeNode) {\n        return this.root.isShowExpand(node);\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ViewContainerRef,\n    Input,\n    OnInit\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\n\n@Component({\n    selector: '[ThyTreeReplaceRegion]',\n    template: '<ng-content></ng-content>',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeReplaceRegionComponent implements OnInit {\n    @Input() thyInstance: any;\n\n    constructor(\n        private root: ThyTreeComponent,\n        private viewRef: ViewContainerRef\n    ) {}\n\n    ngOnInit(): void {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeComponent } from './tree-node.component';\nimport { ThyTreeReplaceRegionComponent } from './tree-replace-region.component';\nimport { ThyInputModule } from 'ngx-tethys/input';\nimport { ThyButtonModule } from 'ngx-tethys/button';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyTreeService } from './tree.service';\nimport { ThyListModule } from 'ngx-tethys/list';\nimport { ThyOptionModule } from 'ngx-tethys/shared';\nimport { FormsModule } from '@angular/forms';\nimport { ThyLoadingModule } from 'ngx-tethys/loading';\nimport { ThyIconModule } from 'ngx-tethys/icon';\nimport { ThyDragDropModule } from 'ngx-tethys/drag-drop';\nimport { ThyCheckboxModule } from 'ngx-tethys/checkbox';\n\n@NgModule({\n    declarations: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],\n    imports: [\n        CommonModule,\n        ThyInputModule,\n        ThyButtonModule,\n        ThySharedModule,\n        FormsModule,\n        ThyListModule,\n        ThyOptionModule,\n        ThyLoadingModule,\n        ThyIconModule,\n        ThyDragDropModule,\n        ThyCheckboxModule\n    ],\n    entryComponents: [ThyTreeComponent],\n    exports: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],\n    providers: [ThyTreeService]\n})\nexport class ThyTreeModule {}\n"]}
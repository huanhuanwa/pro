{"version":3,"file":"ngx-tethys-tree.umd.js","sources":["../../src/tree/tree.class.ts","../../src/tree/tree.service.ts","../../src/tree/tree-node.class.ts","../../src/tree/tree.component.ts","../../src/tree/tree-node.component.ts","../../src/tree/tree-replace-region.component.ts","../../src/tree/tree.module.ts","../../src/tree/ngx-tethys-tree.ts"],"sourcesContent":["import { ThyDragDropEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\n\nexport enum ThyTreeNodeCheckState {\n    unchecked = 0,\n    checked = 1,\n    indeterminate = 2\n}\n\nexport interface ThyTreeNodeData<T = any> {\n    key?: number | string;\n\n    title?: string;\n\n    icon?: string;\n\n    iconStyle?: {\n        [key: string]: any;\n    };\n\n    children?: ThyTreeNodeData<T>[];\n\n    origin?: any;\n\n    expanded?: boolean;\n\n    disabled?: boolean;\n\n    checked?: boolean;\n\n    data?: T;\n\n    [key: string]: any;\n}\n\nexport interface ThyTreeEmitEvent<T = any> {\n    eventName: string;\n\n    node?: ThyTreeNode<T>;\n\n    event?: Event | any;\n\n    dragNode?: ThyTreeNode<T>;\n\n    targetNode?: ThyTreeNode<T>;\n}\n\nexport interface ThyTreeDragDropEvent<T = any> {\n    event?: ThyDragDropEvent;\n\n    currentIndex?: number;\n\n    dragNode?: ThyTreeNode<T>;\n\n    targetNode?: ThyTreeNode<T>;\n\n    afterNode?: ThyTreeNode<T>;\n}\n\nexport class ThyTreeIcons {\n    expand?: string;\n\n    collapse?: string;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { ThyTreeNodeCheckState } from './tree.class';\nimport { Subject } from 'rxjs';\nimport { ThyTreeNode } from './tree-node.class';\nimport { coerceArray } from 'ngx-tethys/util';\n\nfunction checkStateResolve(node: ThyTreeNode) {\n    const checkedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);\n    const unCheckedNodes = node.children.filter(n => n.isChecked === ThyTreeNodeCheckState.unchecked);\n    if (checkedNodes.length === node.children.length) {\n        return ThyTreeNodeCheckState.checked;\n    } else if (unCheckedNodes.length === node.children.length) {\n        return ThyTreeNodeCheckState.unchecked;\n    } else {\n        return ThyTreeNodeCheckState.indeterminate;\n    }\n}\n\n@Injectable()\nexport class ThyTreeService implements OnDestroy {\n    public treeNodes: ThyTreeNode[];\n\n    private checkStateResolve: (node: ThyTreeNode) => ThyTreeNodeCheckState = checkStateResolve;\n\n    $statusChange = new Subject<ThyTreeFormatEmitEvent>();\n\n    constructor() {}\n\n    private _getParallelTreeNodes(nodes: ThyTreeNode[], list: ThyTreeNode[] = []) {\n        (nodes || []).forEach(node => {\n            list.push(node);\n            this._getParallelTreeNodes(node.children || [], list);\n        });\n        return list;\n    }\n\n    setCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState = checkStateResolve) {\n        this.checkStateResolve = resolve;\n    }\n\n    public resetSortedTreeNodes(treeNodes: ThyTreeNode[], parent?: ThyTreeNode) {\n        treeNodes.forEach(node => {\n            node.level = node.parentNode ? node.parentNode.level + 1 : 0;\n            node.origin.children = node.children.map(n => n.origin);\n            node.parentNode = parent;\n            this.resetSortedTreeNodes(node.children, node);\n        });\n    }\n\n    public getTreeNode(key: string | number) {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.find(n => n.key === key);\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isExpanded);\n    }\n\n    public getCheckedNodes(): ThyTreeNode[] {\n        const allNodes = this._getParallelTreeNodes(this.treeNodes);\n        return allNodes.filter(n => n.isChecked === ThyTreeNodeCheckState.checked);\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        const children = node.parentNode ? node.parentNode.children : this.treeNodes;\n        const index = children.findIndex(n => n.key === node.key);\n        if (index > -1) {\n            children.splice(index, 1);\n        }\n    }\n\n    public expandTreeNodes(keyOrKeys: string | number | (string | number)[]) {\n        const keys = coerceArray(keyOrKeys);\n        const needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(node => {\n            return keys.indexOf(node.key) > -1;\n        });\n        needExpandNodes.forEach(node => {\n            node.setExpanded(true);\n        });\n    }\n\n    public statusChanged() {\n        return this.$statusChange.asObservable();\n    }\n\n    // 设置节点选中状态\n    public setNodeChecked(node: ThyTreeNode, checked: boolean, propagateUp = true, propagateDown = true) {\n        node.isChecked = checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;\n        node.origin.checked = checked;\n        if (propagateDown && node.children) {\n            node.children.forEach(subNode => {\n                this.setNodeChecked(subNode, checked, false, true);\n            });\n        }\n        if (propagateUp) {\n            this.syncNodeCheckState(node.parentNode);\n        }\n    }\n\n    public syncNodeCheckState(node: ThyTreeNode) {\n        if (node) {\n            node.isChecked = this.checkStateResolve(node);\n            this.syncNodeCheckState(node.parentNode);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.$statusChange.complete();\n        this.$statusChange = null;\n    }\n}\n\nexport interface ThyTreeFormatEmitEvent {\n    eventName: string;\n    node: ThyTreeNode;\n    event?: MouseEvent | DragEvent;\n}\n","import { ThyTreeNodeData, ThyTreeNodeCheckState } from './tree.class';\nimport { ThyTreeService } from './tree.service';\nimport { helpers } from 'ngx-tethys/util';\n\nexport class ThyTreeNode<T = any> {\n    key?: number | string;\n\n    title?: string;\n\n    children: ThyTreeNode[];\n\n    parentNode: ThyTreeNode;\n\n    level = 0;\n\n    origin: ThyTreeNodeData<T>;\n\n    isExpanded: boolean;\n\n    isChecked: ThyTreeNodeCheckState;\n\n    isLoading: boolean;\n\n    isDisabled: boolean;\n\n    private readonly service: ThyTreeService;\n\n    get treeService(): ThyTreeService {\n        if (this.service) {\n            return this.service;\n        } else if (this.parentNode) {\n            return this.parentNode.treeService;\n        }\n    }\n\n    constructor(node: ThyTreeNodeData, parent: ThyTreeNode = null, service?: ThyTreeService) {\n        this.title = node.title;\n        this.key = node.key;\n        this.children = [];\n        this.parentNode = parent;\n        this.level = parent ? parent.level + 1 : this.level;\n        this.origin = node;\n        this.isDisabled = node.disabled || false;\n        this.isExpanded = node.expanded || false;\n        this.isChecked = node.checked ? ThyTreeNodeCheckState.checked : ThyTreeNodeCheckState.unchecked;\n        this.isLoading = false;\n        if (node.children) {\n            node.children.forEach(childNode => {\n                this.children.push(new ThyTreeNode(childNode, this));\n            });\n        }\n        this.service = service;\n    }\n\n    public setKey(key: string) {\n        this.origin.key = key;\n        this.key = key;\n    }\n\n    public setTitle(title: string) {\n        this.origin.title = title;\n        this.title = title;\n    }\n\n    public setExpanded(expanded: boolean, propagate = false) {\n        this.origin.expanded = expanded;\n        this.isExpanded = expanded;\n        if (propagate && this.children) {\n            this.children.forEach(n => n.setExpanded(expanded, propagate));\n        }\n    }\n\n    public setLoading(loading: boolean): void {\n        this.isLoading = loading;\n    }\n\n    public setChecked(checked: boolean, propagateUp = true, propagateDown = true) {\n        this.treeService.setNodeChecked(this, checked, propagateUp, propagateDown);\n    }\n\n    public syncNodeCheckState() {\n        this.treeService.syncNodeCheckState(this);\n    }\n\n    public getParentNode(): ThyTreeNode {\n        return this.parentNode;\n    }\n\n    public getChildren(): ThyTreeNode[] {\n        return this.children;\n    }\n\n    public addChildren(children: ThyTreeNodeData | ThyTreeNodeData[], index: number = -1): void {\n        children = helpers.coerceArray(children);\n        ((children as ThyTreeNodeData[]) || []).forEach((childNode: ThyTreeNodeData, i: number) => {\n            if (index === -1) {\n                this.children.push(new ThyTreeNode(childNode, this));\n            } else {\n                this.children.splice(index + i, 0, new ThyTreeNode(childNode, this, this.treeService));\n            }\n        });\n\n        this.origin.children = this.getChildren().map(n => n.origin);\n        this.setLoading(false);\n        this.treeService.$statusChange.next({\n            eventName: 'addChildren',\n            node: this\n        });\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    ElementRef,\n    ViewEncapsulation,\n    TemplateRef,\n    OnInit,\n    OnChanges,\n    EventEmitter,\n    ContentChild,\n    HostBinding,\n    forwardRef,\n    SimpleChanges\n} from '@angular/core';\nimport { ThyTreeNodeData, ThyTreeEmitEvent, ThyTreeDragDropEvent, ThyTreeIcons, ThyTreeNodeCheckState } from './tree.class';\nimport { helpers } from 'ngx-tethys/util';\nimport { ThyTreeService } from './tree.service';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { ThyDragDropEvent, ThyDropPosition, ThyDragOverEvent, ThyDragStartEvent } from 'ngx-tethys/drag-drop';\nimport { ThyTreeNode } from './tree-node.class';\n\ntype ThyTreeSize = 'sm' | '';\n\ntype ThyTreeType = 'default' | 'especial';\n\nconst treeTypeClassMap: any = {\n    default: ['thy-tree-default'],\n    especial: ['thy-tree-especial']\n};\n\n@Component({\n    selector: 'thy-tree',\n    templateUrl: './tree.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ThyTreeComponent),\n            multi: true\n        },\n        ThyTreeService,\n        UpdateHostClassService\n    ]\n})\nexport class ThyTreeComponent implements ControlValueAccessor, OnInit, OnChanges {\n    private _templateRef: TemplateRef<any>;\n\n    private _emptyChildrenTemplateRef: TemplateRef<any>;\n\n    private _draggable = false;\n\n    private _expandedKeys: (string | number)[];\n\n    private _selectedKeys: (string | number)[];\n\n    public _selectionModel: SelectionModel<ThyTreeNode>;\n\n    public treeNodes: ThyTreeNode[];\n\n    @Input()\n    set thyNodes(value: ThyTreeNodeData[]) {\n        this._expandedKeys = this.getExpandedNodes().map(node => node.key);\n        this._selectedKeys = this.getSelectedNodes().map(node => node.key);\n        this.treeNodes = (value || []).map(node => new ThyTreeNode(node, null, this.thyTreeService));\n        this.thyTreeService.treeNodes = this.treeNodes;\n        this.thyTreeService.expandTreeNodes(this._expandedKeys);\n        this._selectTreeNodes(this._selectedKeys);\n    }\n\n    @Input() thyShowExpand: boolean | ((_: ThyTreeNodeData) => boolean) = true;\n\n    @HostBinding(`class.thy-multiple-selection-list`)\n    @Input()\n    thyMultiple = false;\n\n    @HostBinding('class.thy-tree-draggable')\n    @Input()\n    set thyDraggable(value: boolean) {\n        this._draggable = value;\n    }\n\n    get thyDraggable() {\n        return this._draggable;\n    }\n\n    @Input() thyCheckable: boolean;\n\n    @Input() set thyCheckStateResolve(resolve: (node: ThyTreeNode) => ThyTreeNodeCheckState) {\n        this.thyTreeService.setCheckStateResolve(resolve);\n    }\n\n    @Input() thyAsync = false;\n\n    private _thyType: ThyTreeType = 'default';\n\n    @Input()\n    set thyType(type: ThyTreeType) {\n        this._thyType = type;\n        if (type === 'especial') {\n            this.thyIcons = { expand: 'minus-square', collapse: 'plus-square' };\n        }\n    }\n\n    get thyType() {\n        return this._thyType;\n    }\n\n    @Input() thyIcons: ThyTreeIcons = {};\n\n    @Input() thySize: ThyTreeSize;\n\n    @Input() thyTitleTruncate = true;\n\n    @Input() set thySelectedKeys(keys: string[]) {\n        this._selectedKeys = keys;\n    }\n\n    @Input() thyBeforeDragStart: (e: ThyDragStartEvent) => boolean;\n\n    @Input() thyBeforeDragDrop: (e: ThyDragDropEvent) => boolean;\n\n    @Output() thyOnClick: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnExpandChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnDragDrop: EventEmitter<ThyTreeDragDropEvent> = new EventEmitter<ThyTreeDragDropEvent>();\n\n    @ContentChild('treeNodeTemplate', { static: true })\n    set templateRef(template: TemplateRef<any>) {\n        if (template) {\n            this._templateRef = template;\n        }\n    }\n\n    get templateRef() {\n        return this._templateRef;\n    }\n\n    @ContentChild('emptyChildrenTemplate', { static: true }) emptyChildrenTemplate: TemplateRef<any>;\n    set emptyChildrenTemplateRef(template: TemplateRef<any>) {\n        if (template) {\n            this._emptyChildrenTemplateRef = template;\n        }\n    }\n\n    get emptyChildrenTemplateRef() {\n        return this._emptyChildrenTemplateRef;\n    }\n\n    @HostBinding('class.thy-tree') thyTreeClass = true;\n\n    beforeDragOver = (event: ThyDragOverEvent<ThyTreeNode>) => {\n        return this.isShowExpand(event.item) || (!this.isShowExpand(event.item) && event.position !== ThyDropPosition.in);\n    };\n\n    private _onTouched: () => void = () => {};\n\n    private _onChange: (value: any) => void = (_: any) => {};\n\n    constructor(\n        private elementRef: ElementRef,\n        private updateHostClassService: UpdateHostClassService,\n        public thyTreeService: ThyTreeService\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.thyType && !changes.thyType.isFirstChange()) {\n            this._setTreeType();\n        }\n        if (changes.thyMultiple && !changes.thyMultiple.isFirstChange()) {\n            this._instanceSelectionModel();\n        }\n    }\n\n    ngOnInit(): void {\n        this.updateHostClassService.initializeElement(this.elementRef.nativeElement);\n        this._setTreeType();\n        this._setTreeSize();\n        this._instanceSelectionModel();\n        this._selectTreeNodes(this._selectedKeys);\n    }\n\n    private _setTreeType() {\n        if (this.thyType) {\n            this.updateHostClassService.addClass(treeTypeClassMap[this.thyType]);\n        }\n    }\n\n    private _setTreeSize() {\n        if (this.thySize) {\n            this.updateHostClassService.addClass(`thy-tree-${this.thySize}`);\n        }\n    }\n\n    private _instanceSelectionModel() {\n        this._selectionModel = new SelectionModel<any>(this.thyMultiple);\n    }\n\n    private _selectTreeNodes(keys: (string | number)[]) {\n        (keys || []).forEach(key => {\n            const node = this.thyTreeService.getTreeNode(key);\n            if (node) {\n                this.selectTreeNode(this.thyTreeService.getTreeNode(key));\n            }\n        });\n    }\n\n    public isSelected(node: ThyTreeNode) {\n        return this._selectionModel.isSelected(node);\n    }\n\n    public toggleTreeNode(node: ThyTreeNode) {\n        if (node && !node.isDisabled) {\n            this._selectionModel.toggle(node);\n        }\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.key || index;\n    }\n\n    public onDragStart(event: ThyDragStartEvent<ThyTreeNode>) {\n        if (this.isShowExpand(event.item) && event.item.isExpanded) {\n            event.item.setExpanded(false);\n        }\n    }\n\n    public onDragDrop(event: ThyDragDropEvent<ThyTreeNode>) {\n        if (!this.isShowExpand(event.item) && event.position === ThyDropPosition.in) {\n            return;\n        }\n        const parent = event.previousItem.parentNode;\n        if (parent) {\n            parent.children = parent.children.filter(item => item !== event.previousItem);\n        } else {\n            this.treeNodes = this.treeNodes.filter(item => item !== event.previousItem);\n        }\n        switch (event.position) {\n            case ThyDropPosition.in:\n                event.item.addChildren(event.previousItem.origin);\n                break;\n            case ThyDropPosition.after:\n            case ThyDropPosition.before:\n                const targetParent = event.item.parentNode;\n                const index = event.position === ThyDropPosition.before ? 0 : 1;\n                if (targetParent) {\n                    targetParent.addChildren(event.previousItem.origin, targetParent.children.indexOf(event.item) + index);\n                } else {\n                    this.treeNodes.splice(this.treeNodes.indexOf(event.item) + index, 0, event.previousItem);\n                }\n                break;\n        }\n        this.thyTreeService.resetSortedTreeNodes(this.treeNodes);\n\n        let afterNode = null;\n        let targetNode = null;\n        if (event.position === ThyDropPosition.before) {\n            afterNode = event.containerItems[event.currentIndex - 1];\n            targetNode = event.item.parentNode;\n        } else if (event.position === ThyDropPosition.after) {\n            afterNode = event.containerItems[event.currentIndex];\n            targetNode = event.item.parentNode;\n        } else {\n            afterNode = event.item.children[event.item.children.length - 2];\n            targetNode = event.item;\n        }\n        this.thyOnDragDrop.emit({\n            event,\n            currentIndex: event.currentIndex,\n            dragNode: event.previousItem,\n            targetNode: targetNode,\n            afterNode: afterNode\n        });\n    }\n\n    public isShowExpand(node: ThyTreeNode) {\n        if (helpers.isFunction(this.thyShowExpand)) {\n            return (this.thyShowExpand as Function)(node);\n        } else {\n            return this.thyShowExpand;\n        }\n    }\n\n    writeValue(value: ThyTreeNodeData[]): void {\n        this.thyNodes = value;\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this._onTouched = fn;\n    }\n\n    // region Public Functions\n\n    public selectTreeNode(node: ThyTreeNode) {\n        this._selectionModel.select(node);\n    }\n\n    public getRootNodes(): ThyTreeNode[] {\n        return this.treeNodes;\n    }\n\n    public getTreeNode(key: string) {\n        return this.thyTreeService.getTreeNode(key);\n    }\n\n    public getSelectedNode(): ThyTreeNode {\n        return this._selectionModel ? this._selectionModel.selected[0] : null;\n    }\n\n    public getSelectedNodes(): ThyTreeNode[] {\n        return this._selectionModel ? this._selectionModel.selected : [];\n    }\n\n    public getExpandedNodes(): ThyTreeNode[] {\n        return this.thyTreeService.getExpandedNodes();\n    }\n\n    public getCheckedNodes(): ThyTreeNode[] {\n        return this.thyTreeService.getCheckedNodes();\n    }\n\n    public addTreeNode(node: ThyTreeNodeData, parent?: ThyTreeNode, index = -1) {\n        if (parent) {\n            parent.addChildren(node, index);\n        } else {\n            if (index > -1) {\n                this.treeNodes.splice(index, 0, new ThyTreeNode(node, null, this.thyTreeService));\n            } else {\n                this.treeNodes.push(new ThyTreeNode(node, null, this.thyTreeService));\n            }\n        }\n    }\n\n    public deleteTreeNode(node: ThyTreeNode) {\n        if (this.isSelected(node)) {\n            this._selectionModel.toggle(node);\n        }\n        this.thyTreeService.deleteTreeNode(node);\n    }\n\n    public expandAllNodes() {\n        const nodes = this.getRootNodes();\n        nodes.forEach(n => n.setExpanded(true, true));\n    }\n\n    public collapsedAllNodes() {\n        const nodes = this.getRootNodes();\n        nodes.forEach(n => n.setExpanded(false, true));\n    }\n\n    // endregion\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    Input,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    Output,\n    EventEmitter,\n    NgZone,\n    OnDestroy,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeData, ThyTreeNodeCheckState, ThyTreeEmitEvent } from './tree.class';\nimport { ThyTreeNode } from './tree-node.class';\nimport { ThyTreeService } from './tree.service';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ThyDragStartEvent } from 'ngx-tethys/drag-drop';\n\n@Component({\n    selector: 'thy-tree-node',\n    templateUrl: './tree-node.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeNodeComponent implements OnDestroy {\n    @Input() node: ThyTreeNode;\n\n    @Input() thyAsync = false;\n\n    @Input() thyMultiple = false;\n\n    @Input() thyDraggable = false;\n\n    @Input() thyCheckable = false;\n\n    @Input() thyTitleTruncate: boolean;\n\n    @Input() templateRef: TemplateRef<any>;\n\n    @Input() emptyChildrenTemplateRef: TemplateRef<any>;\n\n    @Output() thyOnClick: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnExpandChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @Output() thyOnCheckboxChange: EventEmitter<ThyTreeEmitEvent> = new EventEmitter<ThyTreeEmitEvent>();\n\n    @ContentChild('childrenTree') childrenTreeTemplateRef: TemplateRef<any>;\n\n    @ViewChild('title') titleInputElementRef: ElementRef<HTMLInputElement>;\n\n    @HostBinding('class.thy-tree-node') thyTreeNodeClass = true;\n\n    public get nodeIcon() {\n        return this.node.origin.icon;\n    }\n\n    public get nodeIconStyle() {\n        return this.node.origin.iconStyle;\n    }\n\n    private _showExpand: boolean | ((_: ThyTreeNode) => boolean);\n\n    destroy$ = new Subject();\n\n    checkState = ThyTreeNodeCheckState;\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    constructor(\n        public root: ThyTreeComponent,\n        public thyTreeService: ThyTreeService,\n        private ngZone: NgZone,\n        private cdr: ChangeDetectorRef\n    ) {\n        this.thyTreeService\n            .statusChanged()\n            .pipe(\n                filter(data => data.node.key === this.node.key),\n                takeUntil(this.destroy$)\n            )\n            .subscribe(() => {\n                this.markForCheck();\n            });\n    }\n\n    private changeDragIconVisibility(event: Event, showDragIcon: boolean): void {\n        const nodeElement = event.target as HTMLElement;\n        const dragIcon = nodeElement.querySelector('.thy-tree-drag-icon') as HTMLElement;\n        if (dragIcon) {\n            dragIcon.style.visibility = showDragIcon ? 'visible' : 'hidden';\n        }\n    }\n\n    public nodeMouseEnter(event: Event) {\n        if (!this.root.thyDraggable || this.node.isDisabled) {\n            return;\n        } else if (this.root.thyDraggable && !this.root.thyBeforeDragStart) {\n            this.changeDragIconVisibility(event, true);\n        } else {\n            const containerItems = this.node.getParentNode() ? this.node.getParentNode().getChildren() : this.root.treeNodes;\n            const dragStartEvent: ThyDragStartEvent = {\n                event: event as DragEvent,\n                item: this.node,\n                containerItems,\n                currentIndex: containerItems.indexOf(this.node)\n            };\n            this.changeDragIconVisibility(event, this.root.thyBeforeDragStart(dragStartEvent));\n        }\n    }\n\n    public nodeMouseLeave(event: Event) {\n        if (!this.root.thyDraggable || this.node.isDisabled) {\n            return;\n        } else {\n            this.changeDragIconVisibility(event, false);\n        }\n    }\n\n    public clickNode(event: Event) {\n        if (!this.root.thyMultiple) {\n            this.root.selectTreeNode(this.node);\n        } else {\n            this.root.toggleTreeNode(this.node);\n        }\n        this.thyOnClick.emit({\n            eventName: 'click',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public clickNodeCheck(event: Event) {\n        event.stopPropagation();\n        if (this.node.isChecked === ThyTreeNodeCheckState.unchecked || this.node.isChecked === ThyTreeNodeCheckState.indeterminate) {\n            this.node.setChecked(true);\n        } else {\n            this.node.setChecked(false);\n        }\n        this.thyOnCheckboxChange.emit({\n            eventName: 'checkboxChange',\n            event: event,\n            node: this.node\n        });\n    }\n\n    public expandNode(event: Event) {\n        event.stopPropagation();\n        this.node.setExpanded(!this.node.isExpanded);\n        if (this.root.thyShowExpand) {\n            this.thyOnExpandChange.emit({\n                eventName: 'expand',\n                event: event,\n                node: this.node\n            });\n            if (this.thyAsync && this.node.children.length === 0) {\n                this.node.setLoading(true);\n            }\n        }\n    }\n\n    public isShowExpand(node: ThyTreeNode) {\n        return this.root.isShowExpand(node);\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ViewContainerRef,\n    Input,\n    OnInit\n} from '@angular/core';\nimport { ThyTreeComponent } from './tree.component';\n\n@Component({\n    selector: '[ThyTreeReplaceRegion]',\n    template: '<ng-content></ng-content>',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThyTreeReplaceRegionComponent implements OnInit {\n    @Input() thyInstance: any;\n\n    constructor(\n        private root: ThyTreeComponent,\n        private viewRef: ViewContainerRef\n    ) {}\n\n    ngOnInit(): void {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyTreeComponent } from './tree.component';\nimport { ThyTreeNodeComponent } from './tree-node.component';\nimport { ThyTreeReplaceRegionComponent } from './tree-replace-region.component';\nimport { ThyInputModule } from 'ngx-tethys/input';\nimport { ThyButtonModule } from 'ngx-tethys/button';\nimport { ThySharedModule } from 'ngx-tethys/shared';\nimport { ThyTreeService } from './tree.service';\nimport { ThyListModule } from 'ngx-tethys/list';\nimport { ThyOptionModule } from 'ngx-tethys/shared';\nimport { FormsModule } from '@angular/forms';\nimport { ThyLoadingModule } from 'ngx-tethys/loading';\nimport { ThyIconModule } from 'ngx-tethys/icon';\nimport { ThyDragDropModule } from 'ngx-tethys/drag-drop';\nimport { ThyCheckboxModule } from 'ngx-tethys/checkbox';\n\n@NgModule({\n    declarations: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],\n    imports: [\n        CommonModule,\n        ThyInputModule,\n        ThyButtonModule,\n        ThySharedModule,\n        FormsModule,\n        ThyListModule,\n        ThyOptionModule,\n        ThyLoadingModule,\n        ThyIconModule,\n        ThyDragDropModule,\n        ThyCheckboxModule\n    ],\n    entryComponents: [ThyTreeComponent],\n    exports: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],\n    providers: [ThyTreeService]\n})\nexport class ThyTreeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["ThyTreeNodeCheckState","Subject","coerceArray","Injectable","helpers","EventEmitter","ThyDropPosition","SelectionModel","Component","ViewEncapsulation","NG_VALUE_ACCESSOR","forwardRef","UpdateHostClassService","ElementRef","Input","HostBinding","Output","ContentChild","filter","takeUntil","NgZone","ChangeDetectorRef","ViewChild","ViewContainerRef","NgModule","CommonModule","ThyInputModule","ThyButtonModule","ThySharedModule","FormsModule","ThyListModule","ThyOptionModule","ThyLoadingModule","ThyIconModule","ThyDragDropModule","ThyCheckboxModule"],"mappings":"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"}
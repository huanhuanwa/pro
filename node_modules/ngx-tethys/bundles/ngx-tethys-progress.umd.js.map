{"version":3,"file":"ngx-tethys-progress.umd.js","sources":["../../src/progress/bar/progress-bar.component.ts","../../src/progress/progress.component.ts","../../src/progress/progress.module.ts","../../src/progress/ngx-tethys-progress.ts"],"names":["InjectionToken","Component","ViewEncapsulation","UpdateHostClassService","ElementRef","Inject","HostBinding","Input","ChangeDetectionStrategy","ViewChildren","NgModule","CommonModule","ThyTooltipModule"],"mappings":"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","sourcesContent":["import { Component, Input, HostBinding, ElementRef, ViewEncapsulation, InjectionToken, Inject, Host, TemplateRef } from '@angular/core';\nimport { ThyProgressTypes } from '../interfaces';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\n\nexport interface ThyParentProgress {\n    max: number;\n    bars: ThyProgressBarComponent[];\n}\nexport const THY_PROGRESS_COMPONENT = new InjectionToken<ThyParentProgress>('THY_PROGRESS_COMPONENT');\n\n@Component({\n    selector: 'thy-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [UpdateHostClassService]\n})\nexport class ThyProgressBarComponent {\n    // private type: ProgressTypes;\n\n    private value: number;\n\n    @HostBinding(`class.progress-bar`) isProgressBar = true;\n\n    @HostBinding('style.width.%') percent = 0;\n\n    @HostBinding('style.background-color') color = '';\n\n    @Input() thyTips: string | TemplateRef<HTMLElement>;\n\n    @Input() set thyType(type: ThyProgressTypes) {\n        // this.type = type;\n        this.updateHostClassService.updateClass(type ? [`progress-bar-${type}`, `bg-${type}`] : []);\n    }\n\n    @Input() set thyValue(value: number) {\n        if (!value && value !== 0) {\n            return;\n        }\n        this.value = value;\n        this.recalculatePercentage();\n    }\n\n    @Input() set thyColor(color: string) {\n        this.color = color || '';\n    }\n\n    constructor(\n        private updateHostClassService: UpdateHostClassService,\n        elementRef: ElementRef,\n        @Inject(THY_PROGRESS_COMPONENT) private progress: ThyParentProgress\n    ) {\n        updateHostClassService.initializeElement(elementRef.nativeElement);\n    }\n\n    recalculatePercentage(): void {\n        this.percent = +((this.value / this.progress.max) * 100).toFixed(2);\n\n        // if (this.progress && this.progress.bars) {\n        //     const totalPercentage = this.progress.bars.reduce(function(total: number, bar): number {\n        //         return total + bar.percent;\n        //     }, 0);\n\n        //     if (totalPercentage > 100) {\n        //         this.percent -= totalPercentage - 100;\n        //     }\n        // }\n    }\n}\n","import {\n    Component,\n    Input,\n    HostBinding,\n    ChangeDetectionStrategy,\n    ElementRef,\n    ViewEncapsulation,\n    ViewChildren,\n    QueryList,\n    TemplateRef\n} from '@angular/core';\nimport { ThyProgressTypes, ThyStackedValue } from './interfaces';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { THY_PROGRESS_COMPONENT, ThyProgressBarComponent, ThyParentProgress } from './bar/progress-bar.component';\n\n@Component({\n    selector: 'thy-progress',\n    templateUrl: './progress.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        UpdateHostClassService,\n        {\n            provide: THY_PROGRESS_COMPONENT,\n            useExisting: ThyProgressComponent\n        }\n    ]\n})\nexport class ThyProgressComponent implements ThyParentProgress {\n    value: number | ThyStackedValue[];\n\n    bars: ThyProgressBarComponent[] = [];\n\n    @HostBinding('attr.max') max = 100;\n\n    @HostBinding(`class.progress-stacked`) isStacked = false;\n\n    @HostBinding(`class.progress`) isProgress = true;\n\n    @ViewChildren(ThyProgressBarComponent)\n    set barsQueryList(value: QueryList<ThyProgressBarComponent>) {\n        this.bars = value.toArray();\n    }\n\n    @Input() thyType: ThyProgressTypes;\n\n    @Input() thyTips: string | TemplateRef<HTMLElement>;\n\n    @Input() set thyValue(value: number | ThyStackedValue[]) {\n        this.isStacked = Array.isArray(value);\n        this.value = value;\n\n        // 自动求和计算 max\n        if (this.isStacked) {\n            this.thyMax = (value as ThyStackedValue[]).reduce((total, item) => {\n                return total + item.value;\n            }, 0);\n        }\n    }\n\n    @Input() set thySize(size: string) {\n        this.updateHostClassService.updateClass(size ? [`progress-${size}`] : []);\n    }\n\n    @Input() set thyMax(max: number) {\n        this.max = max;\n        this.bars.forEach(bar => {\n            bar.recalculatePercentage();\n        });\n    }\n\n    constructor(private updateHostClassService: UpdateHostClassService, elementRef: ElementRef) {\n        this.updateHostClassService.initializeElement(elementRef);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThyTooltipModule } from 'ngx-tethys/tooltip';\nimport { ThyProgressBarComponent } from './bar/progress-bar.component';\nimport { ThyProgressComponent } from './progress.component';\n\n@NgModule({\n    declarations: [ThyProgressComponent, ThyProgressBarComponent],\n    imports: [CommonModule, ThyTooltipModule],\n    exports: [ThyProgressComponent]\n})\nexport class ThyProgressModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
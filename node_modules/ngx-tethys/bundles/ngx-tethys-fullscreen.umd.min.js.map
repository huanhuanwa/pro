{"version":3,"sources":["../../src/fullscreen/fullscreen.config.ts","../../src/fullscreen/fullscreen-ref.ts","../../src/fullscreen/fullscreen.service.ts","../../src/fullscreen/fullscreen.component.ts","../../src/fullscreen/fullscreen.module.ts"],"names":["ThyFullscreenMode","ThyFullscreenRef","document","this","isFullscreen","ngUnsubscribe$","Subject","_afterLaunched","_afterExited","prototype","onFullscreenChange","isImmersiveFullscreen","launchNormalFullscreen","exitNormalFullscreen","resetElement","element","querySelector","coerceElement","doc","handleKeyDown","event","keyCode","ESCAPE","fullscreenConfig","mode","emulated","targetElement","target","classes","targetLaunchededClasse","container","emulatedContainer","containerClientRect","getBoundingClientRect","targetClientRect","distanceX","left","distanceY","top","style","transform","width","height","classList","add","length","next","remove","complete","launchImmersiveFullscreen","docElement","documentElement","requestFullscreen","exitImmersiveFullscreen","launch","_this","immersive","merge","fromEvent","pipe","takeUntil","subscribe","exit","afterLaunched","asObservable","afterExited","Inject","args","DOCUMENT","ThyFullscreen","fullscreenRefs","config","fullscreenRef","push","index","indexOf","splice","Injectable","providedIn","ThyFullscreenComponent","elementRef","service","thyMode","thyFullscreenChange","EventEmitter","handleFullscreen","nativeElement","containerElement","contains","thyFullscreenClasses","emit","ngOnInit","ngAfterViewInit","btnLaunch","addEventListener","ngOnDestroy","removeEventListener","Component","selector","template","ElementRef","Input","Output","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { ElementRef } from '@angular/core';\n\nexport interface ThyFullscreenConfig {\n    /**\n     * immersive 模式使用了浏览器提供的全屏，整个窗体都全屏，emulated 模式为仿真的，只会在 body 区域全屏，默认 immersive\n     */\n    mode?: ThyFullscreenMode;\n    /**\n     * 需要全屏的目标元素，可以是选择器，可以是 HTML Element, 也可以是 Angular 的 ElementRef\n     */\n    target: string | Element | ElementRef;\n    /**\n     * 目标元素已经打开全屏的样式\n     */\n    targetLaunchededClasse?: string;\n    /**\n     * emulated 模式下的目标元素全屏的容器，默认是 body\n     */\n    emulatedContainer?: string | Element | ElementRef;\n}\n\nexport enum ThyFullscreenMode {\n    immersive = 'immersive',\n    emulated = 'emulated'\n}\n","import { coerceElement } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ElementRef, Inject } from '@angular/core';\nimport { fromEvent, merge, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyFullscreenConfig, ThyFullscreenMode } from './fullscreen.config';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\nexport class ThyFullscreenRef<TResult = unknown> {\n    fullscreenConfig: ThyFullscreenConfig;\n\n    private isFullscreen = false;\n\n    private ngUnsubscribe$ = new Subject();\n\n    private readonly _afterLaunched = new Subject<TResult>();\n\n    private readonly _afterExited = new Subject<TResult>();\n\n    constructor(@Inject(DOCUMENT) protected document: any) {}\n\n    private onFullscreenChange() {\n        const isFullScreen = this.isImmersiveFullscreen();\n        if (isFullScreen) {\n            this.launchNormalFullscreen();\n        } else {\n            this.exitNormalFullscreen();\n        }\n    }\n\n    private resetElement(element: string | Element | ElementRef) {\n        const targetType = typeof element;\n        if (targetType === 'string') {\n            return this.document.querySelector(`.${element}`);\n        } else {\n            return coerceElement(element);\n        }\n    }\n\n    private isImmersiveFullscreen() {\n        const doc = this.document;\n        return !!(doc['fullscreenElement'] || doc['mozFullScreenElement'] || doc['webkitFullscreenElement'] || doc['msFullscreenElement']);\n    }\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (event.keyCode === ESCAPE) {\n            if (this.isFullscreen && this.fullscreenConfig.mode === ThyFullscreenMode.emulated) {\n                this.exitNormalFullscreen();\n            }\n        }\n    }\n\n    private launchNormalFullscreen() {\n        const targetElement = this.resetElement(this.fullscreenConfig.target);\n        const classes = this.fullscreenConfig.targetLaunchededClasse;\n        const container = this.fullscreenConfig.emulatedContainer;\n        if (container) {\n            const containerElement = this.resetElement(container);\n            const containerClientRect = containerElement.getBoundingClientRect();\n            const targetClientRect = targetElement.getBoundingClientRect();\n            const distanceX = containerClientRect.left - targetClientRect.left;\n            const distanceY = containerClientRect.top - targetClientRect.top;\n            targetElement.style.transform = `translate(${distanceX}px, ${distanceY}px)`;\n            targetElement.style.width = `${containerClientRect.width}px`;\n            targetElement.style.height = `${containerClientRect.height}px`;\n        } else {\n            targetElement.classList.add('thy-fullscreen');\n        }\n        targetElement.classList.add('thy-fullscreen-active');\n        if (classes && classes.length) {\n            targetElement.classList.add(classes);\n        }\n        this.isFullscreen = true;\n        this._afterLaunched.next();\n    }\n\n    private exitNormalFullscreen() {\n        const targetElement = this.resetElement(this.fullscreenConfig.target);\n        const classes = this.fullscreenConfig.targetLaunchededClasse;\n        const container = this.fullscreenConfig.emulatedContainer;\n        if (container) {\n            targetElement.style.transform = ``;\n            targetElement.style.width = ``;\n            targetElement.style.height = ``;\n        } else {\n            targetElement.classList.remove('thy-fullscreen');\n        }\n        targetElement.classList.remove('thy-fullscreen-active');\n        if (classes && classes.length) {\n            targetElement.classList.remove(classes);\n        }\n\n        this.isFullscreen = false;\n        this._afterExited.next();\n\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n    protected launchImmersiveFullscreen() {\n        const docElement = this.document.documentElement;\n\n        if (docElement.requestFullscreen) {\n            docElement.requestFullscreen();\n        } else if (docElement['mozRequestFullScreen']) {\n            docElement['mozRequestFullScreen']();\n        } else if (docElement['webkitRequestFullscreen']) {\n            docElement['webkitRequestFullscreen']();\n        } else if (docElement['msRequestFullscreen']) {\n            docElement['msRequestFullscreen']();\n        }\n    }\n\n    protected exitImmersiveFullscreen() {\n        const doc = this.document;\n        if (doc['exitFullscreen']) {\n            doc['exitFullscreen']();\n        } else if (doc['mozCancelFullScreen']) {\n            doc['mozCancelFullScreen']();\n        } else if (doc['webkitExitFullscreen']) {\n            doc['webkitExitFullscreen']();\n        } else if (doc['msExitFullscreen']) {\n            doc['msExitFullscreen']();\n        }\n    }\n\n    launch() {\n        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {\n            merge(\n                fromEvent(this.document, 'fullscreenchange'),\n                fromEvent(this.document, 'MSFullscreenChange'),\n                fromEvent(this.document, 'webkitfullscreenchange')\n            )\n                .pipe(takeUntil(this.ngUnsubscribe$))\n                .subscribe(() => {\n                    this.onFullscreenChange();\n                });\n            this.launchImmersiveFullscreen();\n        } else {\n            fromEvent(this.document, 'keydown')\n                .pipe(takeUntil(this.ngUnsubscribe$))\n                .subscribe(event => {\n                    this.handleKeyDown(event as KeyboardEvent);\n                });\n            this.launchNormalFullscreen();\n        }\n    }\n\n    exit() {\n        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {\n            this.exitImmersiveFullscreen();\n        } else {\n            this.exitNormalFullscreen();\n        }\n    }\n\n    afterLaunched(): Observable<TResult> {\n        return this._afterLaunched.asObservable();\n    }\n\n    afterExited(): Observable<TResult> {\n        return this._afterExited.asObservable();\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { ThyFullscreenRef } from './fullscreen-ref';\nimport { ThyFullscreenConfig, ThyFullscreenMode } from './fullscreen.config';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyFullscreen {\n    constructor(@Inject(DOCUMENT) protected document: any) {}\n\n    private fullscreenRefs: ThyFullscreenRef[] = [];\n\n    /**\n     * 开始全屏\n     * @param config\n     */\n    launch<TResult = unknown>(config: ThyFullscreenConfig): ThyFullscreenRef<TResult> {\n        config.mode = config.mode || ThyFullscreenMode.immersive;\n        const fullscreenRef = new ThyFullscreenRef<TResult>(this.document);\n        fullscreenRef.fullscreenConfig = config;\n        fullscreenRef.launch();\n        this.fullscreenRefs.push(fullscreenRef);\n        fullscreenRef.afterExited().subscribe(() => {\n            const index = this.fullscreenRefs.indexOf(fullscreenRef);\n            if (index > -1) {\n                this.fullscreenRefs.splice(index, 1);\n            }\n        });\n\n        return fullscreenRef;\n    }\n\n    /**\n     * 退出最后一个 ThyFullscreenRef 的全屏\n     * @param config\n     */\n    exit() {\n        const lastFullscreenRef = this.fullscreenRefs[this.fullscreenRefs.length - 1];\n        lastFullscreenRef.exit();\n    }\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyFullscreenMode } from './fullscreen.config';\nimport { ThyFullscreen } from './fullscreen.service';\n@Component({\n    selector: 'thy-fullscreen, [thyFullscreen]',\n    templateUrl: './fullscreen.component.html'\n})\nexport class ThyFullscreenComponent implements OnInit, AfterViewInit, OnDestroy {\n    @Input() thyMode: ThyFullscreenMode = ThyFullscreenMode.immersive;\n\n    @Input() thyFullscreenClasses: string;\n\n    @Output() thyFullscreenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private ngUnsubscribe$ = new Subject();\n\n    constructor(private elementRef: ElementRef, private service: ThyFullscreen) {}\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');\n        if (btnLaunch) {\n            btnLaunch.addEventListener('click', this.handleFullscreen);\n        }\n    }\n\n    // 点击打开或关闭全屏\n    private handleFullscreen = () => {\n        const targetElement = this.elementRef.nativeElement.querySelector('[fullscreen-target]');\n        const containerElement = this.elementRef.nativeElement.querySelector('[fullscreen-container]');\n        const fullscreen = targetElement.classList.contains('thy-fullscreen-active');\n\n        if (fullscreen) {\n            this.service.exit();\n        } else {\n            const fullscreenRef = this.service.launch({\n                mode: this.thyMode,\n                target: targetElement,\n                targetLaunchededClasse: this.thyFullscreenClasses,\n                emulatedContainer: containerElement\n            });\n\n            this.thyFullscreenChange.emit(true);\n\n            fullscreenRef.afterExited().subscribe(() => {\n                this.thyFullscreenChange.emit(false);\n            });\n        }\n    };\n\n    ngOnDestroy() {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n\n        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');\n        if (btnLaunch) {\n            btnLaunch.removeEventListener('click', this.handleFullscreen);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyFullscreenComponent } from './fullscreen.component';\n@NgModule({\n    declarations: [ThyFullscreenComponent],\n    imports: [CommonModule],\n    exports: [ThyFullscreenComponent]\n})\nexport class ThyFullscreenModule {}\n"]}
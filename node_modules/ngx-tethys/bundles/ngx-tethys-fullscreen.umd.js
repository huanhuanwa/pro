(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@angular/cdk/coercion'), require('rxjs/operators'), require('@angular/cdk/keycodes')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/fullscreen', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common', 'rxjs', '@angular/cdk/coercion', 'rxjs/operators', '@angular/cdk/keycodes'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].fullscreen = {}), global.ng.core, global.ng.common, global.rxjs, global.ng.cdk.coercion, global.rxjs.operators, global.ng.cdk.keycodes));
}(this, (function (ɵngcc0,ɵngcc1,exports, i0, i1, rxjs, coercion, operators, keycodes) { 
var _c0 = ["*"];
'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    exports.ThyFullscreenMode = void 0;
    (function (ThyFullscreenMode) {
        ThyFullscreenMode["immersive"] = "immersive";
        ThyFullscreenMode["emulated"] = "emulated";
    })(exports.ThyFullscreenMode || (exports.ThyFullscreenMode = {}));

    var ThyFullscreenRef = /** @class */ (function () {
        function ThyFullscreenRef(document) {
            this.document = document;
            this.isFullscreen = false;
            this.ngUnsubscribe$ = new rxjs.Subject();
            this._afterLaunched = new rxjs.Subject();
            this._afterExited = new rxjs.Subject();
        }
        ThyFullscreenRef.prototype.onFullscreenChange = function () {
            var isFullScreen = this.isImmersiveFullscreen();
            if (isFullScreen) {
                this.launchNormalFullscreen();
            }
            else {
                this.exitNormalFullscreen();
            }
        };
        ThyFullscreenRef.prototype.resetElement = function (element) {
            var targetType = typeof element;
            if (targetType === 'string') {
                return this.document.querySelector("." + element);
            }
            else {
                return coercion.coerceElement(element);
            }
        };
        ThyFullscreenRef.prototype.isImmersiveFullscreen = function () {
            var doc = this.document;
            return !!(doc['fullscreenElement'] || doc['mozFullScreenElement'] || doc['webkitFullscreenElement'] || doc['msFullscreenElement']);
        };
        ThyFullscreenRef.prototype.handleKeyDown = function (event) {
            if (event.keyCode === keycodes.ESCAPE) {
                if (this.isFullscreen && this.fullscreenConfig.mode === exports.ThyFullscreenMode.emulated) {
                    this.exitNormalFullscreen();
                }
            }
        };
        ThyFullscreenRef.prototype.launchNormalFullscreen = function () {
            var targetElement = this.resetElement(this.fullscreenConfig.target);
            var classes = this.fullscreenConfig.targetLaunchededClasse;
            var container = this.fullscreenConfig.emulatedContainer;
            if (container) {
                var containerElement = this.resetElement(container);
                var containerClientRect = containerElement.getBoundingClientRect();
                var targetClientRect = targetElement.getBoundingClientRect();
                var distanceX = containerClientRect.left - targetClientRect.left;
                var distanceY = containerClientRect.top - targetClientRect.top;
                targetElement.style.transform = "translate(" + distanceX + "px, " + distanceY + "px)";
                targetElement.style.width = containerClientRect.width + "px";
                targetElement.style.height = containerClientRect.height + "px";
            }
            else {
                targetElement.classList.add('thy-fullscreen');
            }
            targetElement.classList.add('thy-fullscreen-active');
            if (classes && classes.length) {
                targetElement.classList.add(classes);
            }
            this.isFullscreen = true;
            this._afterLaunched.next();
        };
        ThyFullscreenRef.prototype.exitNormalFullscreen = function () {
            var targetElement = this.resetElement(this.fullscreenConfig.target);
            var classes = this.fullscreenConfig.targetLaunchededClasse;
            var container = this.fullscreenConfig.emulatedContainer;
            if (container) {
                targetElement.style.transform = "";
                targetElement.style.width = "";
                targetElement.style.height = "";
            }
            else {
                targetElement.classList.remove('thy-fullscreen');
            }
            targetElement.classList.remove('thy-fullscreen-active');
            if (classes && classes.length) {
                targetElement.classList.remove(classes);
            }
            this.isFullscreen = false;
            this._afterExited.next();
            this.ngUnsubscribe$.next();
            this.ngUnsubscribe$.complete();
        };
        ThyFullscreenRef.prototype.launchImmersiveFullscreen = function () {
            var docElement = this.document.documentElement;
            if (docElement.requestFullscreen) {
                docElement.requestFullscreen();
            }
            else if (docElement['mozRequestFullScreen']) {
                docElement['mozRequestFullScreen']();
            }
            else if (docElement['webkitRequestFullscreen']) {
                docElement['webkitRequestFullscreen']();
            }
            else if (docElement['msRequestFullscreen']) {
                docElement['msRequestFullscreen']();
            }
        };
        ThyFullscreenRef.prototype.exitImmersiveFullscreen = function () {
            var doc = this.document;
            if (doc['exitFullscreen']) {
                doc['exitFullscreen']();
            }
            else if (doc['mozCancelFullScreen']) {
                doc['mozCancelFullScreen']();
            }
            else if (doc['webkitExitFullscreen']) {
                doc['webkitExitFullscreen']();
            }
            else if (doc['msExitFullscreen']) {
                doc['msExitFullscreen']();
            }
        };
        ThyFullscreenRef.prototype.launch = function () {
            var _this = this;
            if (this.fullscreenConfig.mode === exports.ThyFullscreenMode.immersive) {
                rxjs.merge(rxjs.fromEvent(this.document, 'fullscreenchange'), rxjs.fromEvent(this.document, 'MSFullscreenChange'), rxjs.fromEvent(this.document, 'webkitfullscreenchange'))
                    .pipe(operators.takeUntil(this.ngUnsubscribe$))
                    .subscribe(function () {
                    _this.onFullscreenChange();
                });
                this.launchImmersiveFullscreen();
            }
            else {
                rxjs.fromEvent(this.document, 'keydown')
                    .pipe(operators.takeUntil(this.ngUnsubscribe$))
                    .subscribe(function (event) {
                    _this.handleKeyDown(event);
                });
                this.launchNormalFullscreen();
            }
        };
        ThyFullscreenRef.prototype.exit = function () {
            if (this.fullscreenConfig.mode === exports.ThyFullscreenMode.immersive) {
                this.exitImmersiveFullscreen();
            }
            else {
                this.exitNormalFullscreen();
            }
        };
        ThyFullscreenRef.prototype.afterLaunched = function () {
            return this._afterLaunched.asObservable();
        };
        ThyFullscreenRef.prototype.afterExited = function () {
            return this._afterExited.asObservable();
        };
        return ThyFullscreenRef;
    }());
    ThyFullscreenRef.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }
    ]; };

    var ThyFullscreen = /** @class */ (function () {
        function ThyFullscreen(document) {
            this.document = document;
            this.fullscreenRefs = [];
        }
        /**
         * 开始全屏
         * @param config
         */
        ThyFullscreen.prototype.launch = function (config) {
            var _this = this;
            config.mode = config.mode || exports.ThyFullscreenMode.immersive;
            var fullscreenRef = new ThyFullscreenRef(this.document);
            fullscreenRef.fullscreenConfig = config;
            fullscreenRef.launch();
            this.fullscreenRefs.push(fullscreenRef);
            fullscreenRef.afterExited().subscribe(function () {
                var index = _this.fullscreenRefs.indexOf(fullscreenRef);
                if (index > -1) {
                    _this.fullscreenRefs.splice(index, 1);
                }
            });
            return fullscreenRef;
        };
        /**
         * 退出最后一个 ThyFullscreenRef 的全屏
         * @param config
         */
        ThyFullscreen.prototype.exit = function () {
            var lastFullscreenRef = this.fullscreenRefs[this.fullscreenRefs.length - 1];
            lastFullscreenRef.exit();
        };
ThyFullscreen.ɵfac = function ThyFullscreen_Factory(t) { return new (t || ThyFullscreen)(ɵngcc0.ɵɵinject(i1.DOCUMENT)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFullscreen, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: i0.Inject,
                args: [i1.DOCUMENT]
            }] }]; }, null); })();
        return ThyFullscreen;
    }());
    ThyFullscreen.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ThyFullscreen_Factory() { return new ThyFullscreen(i0__namespace.ɵɵinject(i1__namespace.DOCUMENT)); }, token: ThyFullscreen, providedIn: "root" });
    ThyFullscreen.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }
    ]; };

    var ThyFullscreenComponent = /** @class */ (function () {
        function ThyFullscreenComponent(elementRef, service) {
            var _this = this;
            this.elementRef = elementRef;
            this.service = service;
            this.thyMode = exports.ThyFullscreenMode.immersive;
            this.thyFullscreenChange = new i0.EventEmitter();
            this.ngUnsubscribe$ = new rxjs.Subject();
            // 点击打开或关闭全屏
            this.handleFullscreen = function () {
                var targetElement = _this.elementRef.nativeElement.querySelector('[fullscreen-target]');
                var containerElement = _this.elementRef.nativeElement.querySelector('[fullscreen-container]');
                var fullscreen = targetElement.classList.contains('thy-fullscreen-active');
                if (fullscreen) {
                    _this.service.exit();
                }
                else {
                    var fullscreenRef = _this.service.launch({
                        mode: _this.thyMode,
                        target: targetElement,
                        targetLaunchededClasse: _this.thyFullscreenClasses,
                        emulatedContainer: containerElement
                    });
                    _this.thyFullscreenChange.emit(true);
                    fullscreenRef.afterExited().subscribe(function () {
                        _this.thyFullscreenChange.emit(false);
                    });
                }
            };
        }
        ThyFullscreenComponent.prototype.ngOnInit = function () { };
        ThyFullscreenComponent.prototype.ngAfterViewInit = function () {
            var btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');
            if (btnLaunch) {
                btnLaunch.addEventListener('click', this.handleFullscreen);
            }
        };
        ThyFullscreenComponent.prototype.ngOnDestroy = function () {
            this.ngUnsubscribe$.next();
            this.ngUnsubscribe$.complete();
            var btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');
            if (btnLaunch) {
                btnLaunch.removeEventListener('click', this.handleFullscreen);
            }
        };
ThyFullscreenComponent.ɵfac = function ThyFullscreenComponent_Factory(t) { return new (t || ThyFullscreenComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThyFullscreen)); };
ThyFullscreenComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyFullscreenComponent, selectors: [["thy-fullscreen"], ["", "thyFullscreen", ""]], inputs: { thyMode: "thyMode", thyFullscreenClasses: "thyFullscreenClasses" }, outputs: { thyFullscreenChange: "thyFullscreenChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ThyFullscreenComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFullscreenComponent, [{
        type: i0.Component,
        args: [{
                selector: 'thy-fullscreen, [thyFullscreen]',
                template: "<ng-content> </ng-content>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ThyFullscreen }]; }, { thyMode: [{
            type: i0.Input
        }], thyFullscreenChange: [{
            type: i0.Output
        }], thyFullscreenClasses: [{
            type: i0.Input
        }] }); })();
        return ThyFullscreenComponent;
    }());
    ThyFullscreenComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ThyFullscreen }
    ]; };
    ThyFullscreenComponent.propDecorators = {
        thyMode: [{ type: i0.Input }],
        thyFullscreenClasses: [{ type: i0.Input }],
        thyFullscreenChange: [{ type: i0.Output }]
    };

    var ThyFullscreenModule = /** @class */ (function () {
        function ThyFullscreenModule() {
        }
ThyFullscreenModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyFullscreenModule });
ThyFullscreenModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyFullscreenModule_Factory(t) { return new (t || ThyFullscreenModule)(); }, imports: [[i1.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyFullscreenModule, { declarations: [ThyFullscreenComponent], imports: [ɵngcc1.CommonModule], exports: [ThyFullscreenComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyFullscreenModule, [{
        type: i0.NgModule,
        args: [{
                declarations: [ThyFullscreenComponent],
                imports: [i1.CommonModule],
                exports: [ThyFullscreenComponent]
            }]
    }], function () { return []; }, null); })();
        return ThyFullscreenModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyFullscreen = ThyFullscreen;
    exports.ThyFullscreenComponent = ThyFullscreenComponent;
    exports.ThyFullscreenModule = ThyFullscreenModule;
    exports.ThyFullscreenRef = ThyFullscreenRef;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-fullscreen.umd.js.map
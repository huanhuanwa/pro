{"version":3,"sources":["../../src/markdown/thy-markdown-parser.service.ts","../../src/markdown/thy-markdown-parser.directive.ts","../../src/markdown/thy-markdown-text-parser.directive.ts","../../src/markdown/module.ts"],"names":["ThyMarkdownParserService","sanitizer","this","prototype","getEmojisRender","setHighLightWords","filterHTML","html","sanitizeHTML","sanitize","SecurityContext","HTML","Injectable","DomSanitizer","ThyMarkdownParserDirective","elementRef","thyMarkdownParserService","bypassSecurityTrustHtml","liteMarkedOptions","gfm","tables","breaks","pedantic","smartLists","smartypants","heading","link","list","wtlink","wthexcolor","wthexcolorRender","className","wtat","wthash","wtentity","wtentityRender","wthashRender","chlPrefix","wtexclamation","wtemoji","isParagraphDefault","isImageDefault","isBlockquoteDefault","isHrDefault","isStrongDefault","isEmDefault","isCodespanDefault","isCodeDefault","isDelDefault","isHtmlDefault","isTextEscape","isDef","isImgPreview","Object","defineProperty","value","translateHTML","coerceBooleanProperty","initGantt","mermaid","parseError","err","hash","error","ganttConfig","numberSectionStyles","axisFormatter","d","getHours","getDay","getDate","getMonth","initMarked","renderer","liteMarked","Renderer","listitem","text","test","checkbox","$","attr","substring","addClass","prepend","outerHTML","codespan","raw","exec","line","replace","katex","renderToString","displayMode","apply","arguments","code","language","escaped","line_number","firstLine","trim","split","tex_1","forEach","length","match","parse","result","h","bold","paragraph","setOptions","initComponent","parseMarked","_value","parseMermaid","init","_this","setTimeout","nativeElement","innerHTML","find","host","location","outer_path","join","RegExp","pathname","ngOnInit","emojisRender","wtemojiRender","Directive","args","selector","ElementRef","Input","ThyMarkdownPlanTextParserDirective","prefix","wtatRender","memberPrefix","hasClass","toHTML","highLightWords","_highLightWords","Array","HostBinding","NgModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nexport interface EmojisRenderInfo {\n    emojis: any[];\n    getImageSrc: (emoji: string) => string;\n    className: string;\n}\n\n@Injectable()\nexport class ThyMarkdownParserService {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    getEmojisRender(): EmojisRenderInfo {\n        return null;\n    }\n\n    setHighLightWords(): string[] {\n        return [];\n    }\n\n    filterHTML(html: string) {\n        return html;\n    }\n\n    sanitizeHTML(html: string) {\n        return this.sanitizer.sanitize(SecurityContext.HTML, html);\n    }\n}\n","import { Directive, ElementRef, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ThyMarkdownParserService } from './thy-markdown-parser.service';\nimport { $, liteMarked, mermaid, katex } from 'ngx-tethys/types';\nimport { coerceBooleanProperty } from 'ngx-tethys/util';\n\n@Directive({\n    selector: '[thyMarkdownParser]'\n})\nexport class ThyMarkdownParserDirective implements OnInit {\n    public value: string;\n\n    private bypassSecurityTrustHtml = false;\n\n    private liteMarkedOptions: any = {\n        gfm: true,\n        tables: true,\n        breaks: true,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: true,\n        heading: true,\n        link: true,\n        list: true,\n        wtlink: true,\n        wthexcolor: true,\n        wthexcolorRender: {\n            className: 'msg-inline-color'\n        },\n        wtat: false,\n        wthash: false,\n        wtentity: true,\n        wtentityRender: {\n            className: 'slide-trigger'\n        },\n        wthashRender: {\n            chlPrefix: '/messages/groups/'\n        },\n        wtexclamation: true,\n        wtemoji: false,\n        isParagraphDefault: true,\n        isImageDefault: true,\n        isBlockquoteDefault: true,\n        isHrDefault: true,\n        isStrongDefault: true,\n        isEmDefault: true,\n        isCodespanDefault: true,\n        isCodeDefault: true,\n        isDelDefault: true,\n        isHtmlDefault: true,\n        isTextEscape: true,\n        isDef: true,\n        isImgPreview: true\n    };\n\n    @Input()\n    set thyMarkdownParser(value: string) {\n        if (value) {\n            this.value = value;\n            this.translateHTML();\n        }\n    }\n\n    @Input() set thyBypassSecurityTrustHtml(value: boolean) {\n        this.bypassSecurityTrustHtml = coerceBooleanProperty(value);\n    }\n\n    constructor(private elementRef: ElementRef, private thyMarkdownParserService: ThyMarkdownParserService) {}\n\n    initGantt() {\n        if (mermaid) {\n            mermaid.parseError = function(err: any, hash: any) {\n                mermaid.error = err;\n            };\n            mermaid.ganttConfig = {\n                // Configuration for Gantt diagrams\n                numberSectionStyles: 4,\n                axisFormatter: [\n                    [\n                        '%I:%M',\n                        function(d: any) {\n                            // Within a day\n                            return d.getHours();\n                        }\n                    ],\n                    [\n                        'w. %U',\n                        function(d: any) {\n                            // Monday a week\n                            return d.getDay() === 1;\n                        }\n                    ],\n                    [\n                        '%a %d',\n                        function(d: any) {\n                            // Day within a week (not monday)\n                            return d.getDay() && d.getDate() !== 1;\n                        }\n                    ],\n                    [\n                        '%b %d',\n                        function(d: any) {\n                            // within a month\n                            return d.getDate() !== 1;\n                        }\n                    ],\n                    [\n                        '%m-%y',\n                        function(d: any) {\n                            // Month\n                            return d.getMonth();\n                        }\n                    ]\n                ]\n            };\n        }\n    }\n\n    initMarked() {\n        // 设置marked\n        const renderer = new liteMarked.Renderer();\n        renderer.listitem = function(text: string) {\n            if (!/^\\[[ x]\\]\\s/.test(text)) {\n                return liteMarked.Renderer.prototype.listitem(text);\n            }\n            // 任务列表\n            const checkbox = $('<input type=\"checkbox\" disabled/>');\n            if (/^\\[x\\]\\s/.test(text)) {\n                // 完成的任务列表\n                checkbox.attr('checked', true);\n            }\n            return $(liteMarked.Renderer.prototype.listitem(text.substring(3)))\n                .addClass('task-list-item')\n                .prepend(checkbox)[0].outerHTML;\n        };\n        renderer.codespan = function(text: string) {\n            // inline code\n            if (/^\\$.+\\$$/.test(text)) {\n                // inline math\n                const raw = /^\\$(.+)\\$$/.exec(text)[1];\n                const line = raw\n                    .replace(/&lt;/g, '<')\n                    .replace(/&gt;/g, '>')\n                    .replace(/&amp;/g, '&')\n                    .replace(/&quot;/g, '\"')\n                    .replace(/&#39;/g, \"'\"); // unescape html characters\n                try {\n                    return katex.renderToString(line, { displayMode: false });\n                } catch (err) {\n                    return '<code>' + err + '</code>';\n                }\n            }\n            return liteMarked.Renderer.prototype.codespan.apply(this, arguments);\n        };\n        renderer.code = function(code: any, language: any, escaped: any, line_number: any) {\n            code = code.trim();\n            const firstLine = code.split(/\\n/)[0].trim();\n            if (language === 'math') {\n                // 数学公式\n                let tex = '';\n                code.split(/\\n\\n/).forEach(function(line: any) {\n                    // 连续两个换行，则开始下一个公式\n                    line = line.trim();\n                    if (line.length > 0) {\n                        try {\n                            tex += katex.renderToString(line, { displayMode: true });\n                        } catch (err) {\n                            tex += '<pre>' + err + '</pre>';\n                        }\n                    }\n                });\n                return '<div data-line=\"' + line_number + '\">' + tex + '</div>';\n            } else if (firstLine === 'gantt' || firstLine === 'sequenceDiagram' || firstLine.match(/^graph (?:TB|BT|RL|LR|TD);?$/)) {\n                // mermaid\n                if (firstLine === 'sequenceDiagram') {\n                    code += '\\n'; // 如果末尾没有空行，则语法错误\n                }\n                if (mermaid && mermaid.parse(code)) {\n                    return '<div class=\"mermaid\" data-line=\"' + line_number + '\">' + code + '</div>';\n                } else {\n                    if (mermaid && mermaid.error) {\n                        return '<pre data-line=\"' + line_number + '\">' + mermaid.error + '</pre>';\n                    }\n                }\n            } else {\n                return liteMarked.Renderer.prototype.code.apply(this, arguments);\n            }\n        };\n        renderer.html = function(html: string) {\n            const result = liteMarked.Renderer.prototype.html.apply(this, arguments);\n            const h = $(result.bold());\n            return h.html();\n        };\n        renderer.paragraph = function(text: string) {\n            const result = liteMarked.Renderer.prototype.paragraph.apply(this, arguments);\n            const h = $(result.bold());\n            return h.html();\n        };\n        liteMarked.setOptions(this.liteMarkedOptions);\n    }\n\n    initComponent() {\n        // 初始化甘特图\n        this.initGantt();\n        // 初始解析器\n        this.initMarked();\n    }\n\n    parseMarked(_value: string) {\n        if (liteMarked && _value) {\n            return liteMarked(_value);\n        } else {\n            return _value;\n        }\n    }\n\n    parseMermaid() {\n        if (mermaid) {\n            mermaid.init();\n        }\n    }\n\n    translateHTML() {\n        this.initComponent();\n        let _value = this.thyMarkdownParserService.filterHTML(this.value);\n        _value = this.parseMarked(_value);\n        if (!this.bypassSecurityTrustHtml) {\n            _value = this.thyMarkdownParserService.sanitizeHTML(_value);\n        }\n        setTimeout(() => {\n            this.parseMermaid();\n        }, 100);\n        this.elementRef.nativeElement.innerHTML = _value;\n        $(this.elementRef.nativeElement)\n            .find('a')\n            .attr('target', function() {\n                if (this.host !== location.host) {\n                    return '_blank';\n                } else {\n                    let outer_path: any = [\n                        'shared/',\n                        'share/',\n                        'club',\n                        'videos',\n                        'blog',\n                        'plan',\n                        'tour',\n                        'mobile',\n                        'security',\n                        'uservoice',\n                        'customers',\n                        'press',\n                        'help',\n                        'guide',\n                        'feedback',\n                        'about',\n                        'contact',\n                        'privacy',\n                        'terms'\n                    ].join(')|(/');\n                    outer_path = new RegExp('^(/' + outer_path + ')');\n                    if (outer_path.test(this.pathname)) {\n                        return '_blank';\n                    }\n                }\n            });\n    }\n\n    ngOnInit() {\n        const emojisRender = this.thyMarkdownParserService.getEmojisRender();\n        if (emojisRender) {\n            this.liteMarkedOptions.wtemoji = true;\n            this.liteMarkedOptions.wtemojiRender = emojisRender;\n        }\n        this.translateHTML();\n    }\n}\n","import { Directive, ElementRef, OnInit, Input, HostBinding } from '@angular/core';\nimport { ThyMarkdownParserService } from './thy-markdown-parser.service';\nimport { liteMarked } from 'ngx-tethys/types';\n\n@Directive({\n    selector: '[thyMarkdownPlanText]'\n})\nexport class ThyMarkdownPlanTextParserDirective implements OnInit {\n    private value = '';\n\n    private prefix = '';\n\n    private liteMarkedOptions: any = {\n        gfm: true,\n        tables: false,\n        breaks: true,\n        pedantic: false,\n        sanitize: false,\n        smartLists: false,\n        smartypants: false,\n        heading: false,\n        link: false,\n        list: false,\n        wtlink: true,\n        wthexcolor: true,\n        wthexcolorRender: {\n            className: 'msg-inline-color'\n        },\n        wtat: true,\n        wtatRender: {\n            memberPrefix: this.prefix,\n            className: 'slide-trigger'\n        },\n        wthash: true,\n        wtentity: true,\n        wtentityRender: {\n            className: 'slide-trigger'\n        },\n        wthashRender: {\n            chlPrefix: '/messages/groups/'\n        },\n        wtexclamation: true,\n        wtemoji: false,\n        isParagraphDefault: false,\n        isImageDefault: false,\n        isBlockquoteDefault: false,\n        isHrDefault: false,\n        isStrongDefault: false,\n        isEmDefault: false,\n        isCodespanDefault: false,\n        isCodeDefault: false,\n        isDelDefault: false,\n        isHtmlDefault: false,\n        isTextEscape: true\n    };\n\n    @Input()\n    set thyMarkdownPlanText(value: string) {\n        if (value) {\n            this.value = value;\n            this.translateHTML();\n        }\n    }\n\n    @HostBinding('class.thy-markdown-plan-text') hasClass = true;\n\n    constructor(private elementRef: ElementRef, private thyMarkdownParserService: ThyMarkdownParserService) {}\n\n    translateHTML() {\n        liteMarked.setOptions(this.liteMarkedOptions);\n        let _value = liteMarked.toHTML(this.value, this.liteMarkedOptions.highLightWords);\n        _value = this.thyMarkdownParserService.sanitizeHTML(_value);\n        this.elementRef.nativeElement.innerHTML = _value;\n    }\n\n    ngOnInit() {\n        const emojisRender = this.thyMarkdownParserService.getEmojisRender();\n        if (emojisRender) {\n            this.liteMarkedOptions.wtemoji = true;\n            this.liteMarkedOptions.wtemojiRender = emojisRender;\n        }\n        const _highLightWords = this.thyMarkdownParserService.setHighLightWords();\n        if (_highLightWords && _highLightWords instanceof Array) {\n            this.liteMarkedOptions.highLightWords = _highLightWords;\n        }\n        this.translateHTML();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { ThyMarkdownParserService } from './thy-markdown-parser.service';\nimport { ThyMarkdownParserDirective } from './thy-markdown-parser.directive';\nimport { ThyMarkdownPlanTextParserDirective } from './thy-markdown-text-parser.directive';\n\n@NgModule({\n    declarations: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective],\n    exports: [ThyMarkdownParserDirective, ThyMarkdownPlanTextParserDirective],\n    providers: [ThyMarkdownParserService]\n})\nexport class ThyMarkdownModule {}\n"]}
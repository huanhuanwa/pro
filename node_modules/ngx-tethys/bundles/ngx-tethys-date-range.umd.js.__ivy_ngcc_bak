(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ngx-tethys/icon'), require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('ngx-tethys/popover'), require('date-fns'), require('ngx-tethys/action-menu'), require('ngx-tethys/shared'), require('ngx-tethys/date-picker'), require('ngx-tethys/nav')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/date-range', ['exports', 'ngx-tethys/icon', '@angular/core', '@angular/common', '@angular/forms', 'ngx-tethys/popover', 'date-fns', 'ngx-tethys/action-menu', 'ngx-tethys/shared', 'ngx-tethys/date-picker', 'ngx-tethys/nav'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys']['date-range'] = {}), global['ngx-tethys'].icon, global.ng.core, global.ng.common, global.ng.forms, global['ngx-tethys'].popover, global.dateFns, global['ngx-tethys']['action-menu'], global['ngx-tethys'].shared, global['ngx-tethys']['date-picker'], global['ngx-tethys'].nav));
}(this, (function (exports, icon, core, common, forms, popover, dateFns, actionMenu, shared, datePicker, nav) { 'use strict';

    var OptionalDateRangesComponent = /** @class */ (function () {
        function OptionalDateRangesComponent(thyPopover) {
            this.thyPopover = thyPopover;
            this.hiddenMenu = false;
            this.customValue = '自定义';
        }
        OptionalDateRangesComponent.prototype.ngOnInit = function () { };
        OptionalDateRangesComponent.prototype._selectDateRange = function (dateRange) {
            this.selectedDate = dateRange;
            this.selectedDateRange(dateRange);
            this.thyPopover.close();
        };
        OptionalDateRangesComponent.prototype._selectedCustomDate = function (date) {
            this.selectedDate = {
                begin: date.begin,
                end: date.end,
                key: this.customKey,
                text: this.customValue
            };
            this.selectedDateRange(this.selectedDate);
        };
        return OptionalDateRangesComponent;
    }());
    OptionalDateRangesComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'date-range-optional',
                    template: "<thy-action-menu *ngIf=\"!hiddenMenu\" class=\"thy-date-range-action-menu-container\">\n  <a thyActionMenuItem href=\"javascript:;\" *ngFor=\"let dateRange of optionalDateRanges\" (click)=\"_selectDateRange(dateRange)\">\n    <span thyActionMenuItemName>{{ dateRange?.text }}</span>\n    <span thyActionMenuItemExtendIcon *ngIf=\"dateRange.key === selectedDate?.key\">\n      <thy-icon class=\"text-primary\" thyIconName=\"check\"></thy-icon>\n    </span>\n  </a>\n  <a\n    thyActionMenuItem\n    href=\"javascript:;\"\n    thyRangePicker\n    [(ngModel)]=\"selectedDate\"\n    [thyMinDate]=\"minDate\"\n    [thyMaxDate]=\"maxDate\"\n    (ngModelChange)=\"_selectedCustomDate($event)\"\n  >\n    <span thyActionMenuItemName>{{ customValue }}</span>\n    <span thyActionMenuItemExtendIcon *ngIf=\"customKey === selectedDate?.key\">\n      <thy-icon class=\"text-primary\" thyIconName=\"check\"></thy-icon>\n    </span>\n  </a>\n</thy-action-menu>\n"
                },] }
    ];
    OptionalDateRangesComponent.ctorParameters = function () { return [
        { type: popover.ThyPopover }
    ]; };

    var allDayTimestamp = 24 * 60 * 60;
    var INPUT_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return ThyDateRangeComponent; }),
        multi: true
    };
    var ThyDateRangeComponent = /** @class */ (function () {
        function ThyDateRangeComponent(thyPopover, cdr) {
            this.thyPopover = thyPopover;
            this.cdr = cdr;
            this.thyHiddenMenu = false;
            this.thyDisabledSwitch = false;
            this.thyCustomTextValue = '自定义';
            this.thyCustomKey = 'custom';
            this.optionalDateRanges = [
                {
                    key: 'week',
                    text: '本周',
                    begin: dateFns.getUnixTime(dateFns.startOfISOWeek(new Date())),
                    end: dateFns.getUnixTime(dateFns.endOfISOWeek(new Date())),
                    timestamp: {
                        interval: 7,
                        unit: 'day'
                    }
                },
                {
                    key: 'month',
                    text: '本月',
                    begin: dateFns.getUnixTime(dateFns.startOfMonth(new Date())),
                    end: dateFns.getUnixTime(dateFns.endOfMonth(new Date())),
                    timestamp: {
                        interval: 1,
                        unit: 'month'
                    }
                }
            ];
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
        }
        Object.defineProperty(ThyDateRangeComponent.prototype, "thyOptionalDateRanges", {
            set: function (value) {
                this.optionalDateRanges = value.length > 0 ? value : this.optionalDateRanges;
            },
            enumerable: false,
            configurable: true
        });
        ThyDateRangeComponent.prototype.writeValue = function (value) {
            if (value) {
                this.selectedDate = value;
            }
            else if (this.optionalDateRanges.length > 0) {
                this.selectedDate = this.optionalDateRanges[0];
                this.onModelChange(this.selectedDate);
            }
            this._setSelectedDateRange();
            this.cdr.detectChanges();
        };
        ThyDateRangeComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        ThyDateRangeComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        ThyDateRangeComponent.prototype.ngOnInit = function () { };
        ThyDateRangeComponent.prototype._setSelectedDateRange = function () {
            this.selectedDateRange = {
                begin: this.selectedDate.begin,
                end: this.selectedDate.end
            };
        };
        ThyDateRangeComponent.prototype._calculateNewTime = function (type) {
            if (this.selectedDate.timestamp) {
                var beginDate = new Date(this.selectedDate.begin * 1000);
                var endDate = new Date(this.selectedDate.end * 1000);
                var interval = this.selectedDate.timestamp.interval;
                if (this.selectedDate.timestamp.unit === 'day') {
                    if (type === 'previous') {
                        return {
                            begin: dateFns.getUnixTime(dateFns.addDays(beginDate, -1 * interval)),
                            end: dateFns.getUnixTime(dateFns.addDays(endDate, -1 * interval)),
                            key: this.thyCustomKey
                        };
                    }
                    else {
                        return {
                            begin: dateFns.getUnixTime(dateFns.addDays(beginDate, 1 * interval)),
                            end: dateFns.getUnixTime(dateFns.addDays(endDate, 1 * interval)),
                            key: this.thyCustomKey
                        };
                    }
                }
                else if (this.selectedDate.timestamp.unit === 'month') {
                    if (type === 'previous') {
                        return {
                            begin: dateFns.getUnixTime(dateFns.addMonths(beginDate, -1 * interval)),
                            end: dateFns.getUnixTime(dateFns.addMonths(endDate, -1 * interval)),
                            key: this.thyCustomKey
                        };
                    }
                    else {
                        return {
                            begin: dateFns.getUnixTime(dateFns.addMonths(beginDate, 1 * interval)),
                            end: dateFns.getUnixTime(dateFns.addMonths(endDate, 1 * interval)),
                            key: this.thyCustomKey
                        };
                    }
                }
                else if (this.selectedDate.timestamp.unit === 'year') {
                    if (type === 'previous') {
                        return {
                            begin: dateFns.getUnixTime(dateFns.addYears(beginDate, -1 * interval)),
                            end: dateFns.getUnixTime(dateFns.addYears(endDate, -1 * interval)),
                            key: this.thyCustomKey
                        };
                    }
                    else {
                        return {
                            begin: dateFns.getUnixTime(dateFns.addYears(beginDate, 1 * interval)),
                            end: dateFns.getUnixTime(dateFns.addYears(endDate, 1 * interval)),
                            key: this.thyCustomKey
                        };
                    }
                }
            }
            else {
                var interval = this.selectedDate.end - this.selectedDate.begin + allDayTimestamp;
                if (type === 'previous') {
                    return {
                        begin: this.selectedDate.begin - interval,
                        end: this.selectedDate.end - interval,
                        key: this.thyCustomKey
                    };
                }
                else {
                    return {
                        begin: this.selectedDate.begin + interval,
                        end: this.selectedDate.end + interval,
                        key: this.thyCustomKey
                    };
                }
            }
        };
        ThyDateRangeComponent.prototype._setPreviousOrNextDate = function (type) {
            this.selectedDate = Object.assign({}, this.selectedDate, this._calculateNewTime(type));
            this._setSelectedDateRange();
            this.onModelChange(this.selectedDate);
        };
        ThyDateRangeComponent.prototype.previous = function () {
            this._setPreviousOrNextDate('previous');
        };
        ThyDateRangeComponent.prototype.next = function () {
            this._setPreviousOrNextDate('next');
        };
        ThyDateRangeComponent.prototype.openOptionalDateRangesMenu = function (event) {
            var _this = this;
            if (this.thyHiddenMenu) {
                return;
            }
            this.thyPopover.open(OptionalDateRangesComponent, {
                origin: event.currentTarget,
                hasBackdrop: true,
                backdropClass: 'thy-overlay-transparent-backdrop',
                offset: 0,
                manualClosure: true,
                originActiveClass: 'thy-date-range-text-active',
                initialState: {
                    hiddenMenu: this.thyHiddenMenu,
                    optionalDateRanges: this.optionalDateRanges,
                    selectedDate: this.selectedDate,
                    minDate: this.thyMinDate,
                    maxDate: this.thyMaxDate,
                    customValue: this.thyCustomTextValue,
                    customKey: this.thyCustomKey,
                    selectedDateRange: function (dateRange) {
                        _this.onModelChange(dateRange);
                        _this.selectedDate = dateRange;
                    }
                }
            });
        };
        return ThyDateRangeComponent;
    }());
    ThyDateRangeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-date-range',
                    template: "<div class=\"thy-date-range-container\">\n  <ng-container *ngIf=\"!thyDisabledSwitch\">\n    <thy-icon-nav thyType=\"secondary\" (click)=\"previous()\">\n      <a href=\"javascript:;\" thyIconNavLink><thy-icon thyIconName=\"angle-left\"></thy-icon></a>\n    </thy-icon-nav>\n  </ng-container>\n  <span\n    href=\"javascript:;\"\n    (click)=\"openOptionalDateRangesMenu($event)\"\n    class=\"thy-date-range-text\"\n    [ngClass]=\"{ 'thy-date-range-disabled': thyHiddenMenu }\"\n  >\n    <ng-container *ngIf=\"selectedDate?.key === 'custom'\">\n      {{ selectedDate?.begin | thyDatePickerFormat }} ~ {{ selectedDate?.end | thyDatePickerFormat }}\n    </ng-container>\n    <ng-container *ngIf=\"selectedDate?.key === 'exception'\">\n      {{ selectedDate?.begin | thyDatePickerFormat: thyPickerFormat }}\n    </ng-container>\n    <ng-container *ngIf=\"selectedDate?.key !== 'custom' && selectedDate?.key !== 'exception'\">{{ selectedDate?.text }}</ng-container>\n    <thy-icon *ngIf=\"!thyHiddenMenu\" class=\"thy-date-range-text-caret-down ml-2\" thyIconName=\"angle-down\"></thy-icon>\n  </span>\n  <ng-container *ngIf=\"!thyDisabledSwitch\">\n    <thy-icon-nav thyType=\"secondary\" (click)=\"next()\">\n      <a href=\"javascript:;\" thyIconNavLink><thy-icon thyIconName=\"angle-right\"></thy-icon></a>\n    </thy-icon-nav>\n  </ng-container>\n</div>\n",
                    providers: [INPUT_CONTROL_VALUE_ACCESSOR]
                },] }
    ];
    ThyDateRangeComponent.ctorParameters = function () { return [
        { type: popover.ThyPopover },
        { type: core.ChangeDetectorRef }
    ]; };
    ThyDateRangeComponent.propDecorators = {
        thyOptionalDateRanges: [{ type: core.Input }],
        thyHiddenMenu: [{ type: core.Input }],
        thyDisabledSwitch: [{ type: core.Input }],
        thyCustomTextValue: [{ type: core.Input }],
        thyMinDate: [{ type: core.Input }],
        thyMaxDate: [{ type: core.Input }],
        thyCustomKey: [{ type: core.Input }],
        thyPickerFormat: [{ type: core.Input }]
    };

    var ThyDateRangeModule = /** @class */ (function () {
        function ThyDateRangeModule() {
        }
        return ThyDateRangeModule;
    }());
    ThyDateRangeModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, actionMenu.ThyActionMenuModule, shared.ThySharedModule, icon.ThyIconModule, datePicker.ThyDatePickerModule, nav.ThyNavModule],
                    declarations: [ThyDateRangeComponent, OptionalDateRangesComponent],
                    exports: [ThyDateRangeComponent],
                    entryComponents: [OptionalDateRangesComponent]
                },] }
    ];

    var DateRangeItemInfo = /** @class */ (function () {
        function DateRangeItemInfo() {
        }
        return DateRangeItemInfo;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DateRangeItemInfo = DateRangeItemInfo;
    exports.OptionalDateRangesComponent = OptionalDateRangesComponent;
    exports.ThyDateRangeComponent = ThyDateRangeComponent;
    exports.ThyDateRangeModule = ThyDateRangeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-date-range.umd.js.map

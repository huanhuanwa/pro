(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-tethys/util'), require('rxjs'), require('@angular/cdk/collections'), require('@angular/forms'), require('ngx-tethys/core'), require('ngx-tethys/drag-drop'), require('rxjs/operators'), require('ngx-tethys/input'), require('ngx-tethys/button'), require('ngx-tethys/shared'), require('ngx-tethys/list'), require('ngx-tethys/loading'), require('ngx-tethys/icon'), require('ngx-tethys/checkbox')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/tree', ['exports', '@angular/core', '@angular/common', 'ngx-tethys/util', 'rxjs', '@angular/cdk/collections', '@angular/forms', 'ngx-tethys/core', 'ngx-tethys/drag-drop', 'rxjs/operators', 'ngx-tethys/input', 'ngx-tethys/button', 'ngx-tethys/shared', 'ngx-tethys/list', 'ngx-tethys/loading', 'ngx-tethys/icon', 'ngx-tethys/checkbox'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].tree = {}), global.ng.core, global.ng.common, global['ngx-tethys'].util, global.rxjs, global.ng.cdk.collections, global.ng.forms, global['ngx-tethys'].core, global['ngx-tethys']['drag-drop'], global.rxjs.operators, global['ngx-tethys'].input, global['ngx-tethys'].button, global['ngx-tethys'].shared, global['ngx-tethys'].list, global['ngx-tethys'].loading, global['ngx-tethys'].icon, global['ngx-tethys'].checkbox));
}(this, (function (exports, core, common, util, rxjs, collections, forms, core$1, dragDrop, operators, input, button, shared, list, loading, icon, checkbox) { 'use strict';

    exports.ThyTreeNodeCheckState = void 0;
    (function (ThyTreeNodeCheckState) {
        ThyTreeNodeCheckState[ThyTreeNodeCheckState["unchecked"] = 0] = "unchecked";
        ThyTreeNodeCheckState[ThyTreeNodeCheckState["checked"] = 1] = "checked";
        ThyTreeNodeCheckState[ThyTreeNodeCheckState["indeterminate"] = 2] = "indeterminate";
    })(exports.ThyTreeNodeCheckState || (exports.ThyTreeNodeCheckState = {}));
    var ThyTreeIcons = /** @class */ (function () {
        function ThyTreeIcons() {
        }
        return ThyTreeIcons;
    }());

    function checkStateResolve(node) {
        var checkedNodes = node.children.filter(function (n) { return n.isChecked === exports.ThyTreeNodeCheckState.checked; });
        var unCheckedNodes = node.children.filter(function (n) { return n.isChecked === exports.ThyTreeNodeCheckState.unchecked; });
        if (checkedNodes.length === node.children.length) {
            return exports.ThyTreeNodeCheckState.checked;
        }
        else if (unCheckedNodes.length === node.children.length) {
            return exports.ThyTreeNodeCheckState.unchecked;
        }
        else {
            return exports.ThyTreeNodeCheckState.indeterminate;
        }
    }
    var ThyTreeService = /** @class */ (function () {
        function ThyTreeService() {
            this.checkStateResolve = checkStateResolve;
            this.$statusChange = new rxjs.Subject();
        }
        ThyTreeService.prototype._getParallelTreeNodes = function (nodes, list) {
            var _this = this;
            if (list === void 0) { list = []; }
            (nodes || []).forEach(function (node) {
                list.push(node);
                _this._getParallelTreeNodes(node.children || [], list);
            });
            return list;
        };
        ThyTreeService.prototype.setCheckStateResolve = function (resolve) {
            if (resolve === void 0) { resolve = checkStateResolve; }
            this.checkStateResolve = resolve;
        };
        ThyTreeService.prototype.resetSortedTreeNodes = function (treeNodes, parent) {
            var _this = this;
            treeNodes.forEach(function (node) {
                node.level = node.parentNode ? node.parentNode.level + 1 : 0;
                node.origin.children = node.children.map(function (n) { return n.origin; });
                node.parentNode = parent;
                _this.resetSortedTreeNodes(node.children, node);
            });
        };
        ThyTreeService.prototype.getTreeNode = function (key) {
            var allNodes = this._getParallelTreeNodes(this.treeNodes);
            return allNodes.find(function (n) { return n.key === key; });
        };
        ThyTreeService.prototype.getExpandedNodes = function () {
            var allNodes = this._getParallelTreeNodes(this.treeNodes);
            return allNodes.filter(function (n) { return n.isExpanded; });
        };
        ThyTreeService.prototype.getCheckedNodes = function () {
            var allNodes = this._getParallelTreeNodes(this.treeNodes);
            return allNodes.filter(function (n) { return n.isChecked === exports.ThyTreeNodeCheckState.checked; });
        };
        ThyTreeService.prototype.deleteTreeNode = function (node) {
            var children = node.parentNode ? node.parentNode.children : this.treeNodes;
            var index = children.findIndex(function (n) { return n.key === node.key; });
            if (index > -1) {
                children.splice(index, 1);
            }
        };
        ThyTreeService.prototype.expandTreeNodes = function (keyOrKeys) {
            var keys = util.coerceArray(keyOrKeys);
            var needExpandNodes = this._getParallelTreeNodes(this.treeNodes).filter(function (node) {
                return keys.indexOf(node.key) > -1;
            });
            needExpandNodes.forEach(function (node) {
                node.setExpanded(true);
            });
        };
        ThyTreeService.prototype.statusChanged = function () {
            return this.$statusChange.asObservable();
        };
        // 设置节点选中状态
        ThyTreeService.prototype.setNodeChecked = function (node, checked, propagateUp, propagateDown) {
            var _this = this;
            if (propagateUp === void 0) { propagateUp = true; }
            if (propagateDown === void 0) { propagateDown = true; }
            node.isChecked = checked ? exports.ThyTreeNodeCheckState.checked : exports.ThyTreeNodeCheckState.unchecked;
            node.origin.checked = checked;
            if (propagateDown && node.children) {
                node.children.forEach(function (subNode) {
                    _this.setNodeChecked(subNode, checked, false, true);
                });
            }
            if (propagateUp) {
                this.syncNodeCheckState(node.parentNode);
            }
        };
        ThyTreeService.prototype.syncNodeCheckState = function (node) {
            if (node) {
                node.isChecked = this.checkStateResolve(node);
                this.syncNodeCheckState(node.parentNode);
            }
        };
        ThyTreeService.prototype.ngOnDestroy = function () {
            this.$statusChange.complete();
            this.$statusChange = null;
        };
        return ThyTreeService;
    }());
    ThyTreeService.decorators = [
        { type: core.Injectable }
    ];
    ThyTreeService.ctorParameters = function () { return []; };

    var ThyTreeNode = /** @class */ (function () {
        function ThyTreeNode(node, parent, service) {
            var _this = this;
            if (parent === void 0) { parent = null; }
            this.level = 0;
            this.title = node.title;
            this.key = node.key;
            this.children = [];
            this.parentNode = parent;
            this.level = parent ? parent.level + 1 : this.level;
            this.origin = node;
            this.isDisabled = node.disabled || false;
            this.isExpanded = node.expanded || false;
            this.isChecked = node.checked ? exports.ThyTreeNodeCheckState.checked : exports.ThyTreeNodeCheckState.unchecked;
            this.isLoading = false;
            if (node.children) {
                node.children.forEach(function (childNode) {
                    _this.children.push(new ThyTreeNode(childNode, _this));
                });
            }
            this.service = service;
        }
        Object.defineProperty(ThyTreeNode.prototype, "treeService", {
            get: function () {
                if (this.service) {
                    return this.service;
                }
                else if (this.parentNode) {
                    return this.parentNode.treeService;
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyTreeNode.prototype.setKey = function (key) {
            this.origin.key = key;
            this.key = key;
        };
        ThyTreeNode.prototype.setTitle = function (title) {
            this.origin.title = title;
            this.title = title;
        };
        ThyTreeNode.prototype.setExpanded = function (expanded, propagate) {
            if (propagate === void 0) { propagate = false; }
            this.origin.expanded = expanded;
            this.isExpanded = expanded;
            if (propagate && this.children) {
                this.children.forEach(function (n) { return n.setExpanded(expanded, propagate); });
            }
        };
        ThyTreeNode.prototype.setLoading = function (loading) {
            this.isLoading = loading;
        };
        ThyTreeNode.prototype.setChecked = function (checked, propagateUp, propagateDown) {
            if (propagateUp === void 0) { propagateUp = true; }
            if (propagateDown === void 0) { propagateDown = true; }
            this.treeService.setNodeChecked(this, checked, propagateUp, propagateDown);
        };
        ThyTreeNode.prototype.syncNodeCheckState = function () {
            this.treeService.syncNodeCheckState(this);
        };
        ThyTreeNode.prototype.getParentNode = function () {
            return this.parentNode;
        };
        ThyTreeNode.prototype.getChildren = function () {
            return this.children;
        };
        ThyTreeNode.prototype.addChildren = function (children, index) {
            var _this = this;
            if (index === void 0) { index = -1; }
            children = util.helpers.coerceArray(children);
            (children || []).forEach(function (childNode, i) {
                if (index === -1) {
                    _this.children.push(new ThyTreeNode(childNode, _this));
                }
                else {
                    _this.children.splice(index + i, 0, new ThyTreeNode(childNode, _this, _this.treeService));
                }
            });
            this.origin.children = this.getChildren().map(function (n) { return n.origin; });
            this.setLoading(false);
            this.treeService.$statusChange.next({
                eventName: 'addChildren',
                node: this
            });
        };
        return ThyTreeNode;
    }());

    var treeTypeClassMap = {
        default: ['thy-tree-default'],
        especial: ['thy-tree-especial']
    };
    var ThyTreeComponent = /** @class */ (function () {
        function ThyTreeComponent(elementRef, updateHostClassService, thyTreeService) {
            var _this = this;
            this.elementRef = elementRef;
            this.updateHostClassService = updateHostClassService;
            this.thyTreeService = thyTreeService;
            this._draggable = false;
            this.thyShowExpand = true;
            this.thyMultiple = false;
            this.thyAsync = false;
            this._thyType = 'default';
            this.thyIcons = {};
            this.thyTitleTruncate = true;
            this.thyOnClick = new core.EventEmitter();
            this.thyOnCheckboxChange = new core.EventEmitter();
            this.thyOnExpandChange = new core.EventEmitter();
            this.thyOnDragDrop = new core.EventEmitter();
            this.thyTreeClass = true;
            this.beforeDragOver = function (event) {
                return _this.isShowExpand(event.item) || (!_this.isShowExpand(event.item) && event.position !== dragDrop.ThyDropPosition.in);
            };
            this._onTouched = function () { };
            this._onChange = function (_) { };
        }
        Object.defineProperty(ThyTreeComponent.prototype, "thyNodes", {
            set: function (value) {
                var _this = this;
                this._expandedKeys = this.getExpandedNodes().map(function (node) { return node.key; });
                this._selectedKeys = this.getSelectedNodes().map(function (node) { return node.key; });
                this.treeNodes = (value || []).map(function (node) { return new ThyTreeNode(node, null, _this.thyTreeService); });
                this.thyTreeService.treeNodes = this.treeNodes;
                this.thyTreeService.expandTreeNodes(this._expandedKeys);
                this._selectTreeNodes(this._selectedKeys);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeComponent.prototype, "thyDraggable", {
            get: function () {
                return this._draggable;
            },
            set: function (value) {
                this._draggable = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeComponent.prototype, "thyCheckStateResolve", {
            set: function (resolve) {
                this.thyTreeService.setCheckStateResolve(resolve);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeComponent.prototype, "thyType", {
            get: function () {
                return this._thyType;
            },
            set: function (type) {
                this._thyType = type;
                if (type === 'especial') {
                    this.thyIcons = { expand: 'minus-square', collapse: 'plus-square' };
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeComponent.prototype, "thySelectedKeys", {
            set: function (keys) {
                this._selectedKeys = keys;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeComponent.prototype, "templateRef", {
            get: function () {
                return this._templateRef;
            },
            set: function (template) {
                if (template) {
                    this._templateRef = template;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeComponent.prototype, "emptyChildrenTemplateRef", {
            get: function () {
                return this._emptyChildrenTemplateRef;
            },
            set: function (template) {
                if (template) {
                    this._emptyChildrenTemplateRef = template;
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyTreeComponent.prototype.ngOnChanges = function (changes) {
            if (changes.thyType && !changes.thyType.isFirstChange()) {
                this._setTreeType();
            }
            if (changes.thyMultiple && !changes.thyMultiple.isFirstChange()) {
                this._instanceSelectionModel();
            }
        };
        ThyTreeComponent.prototype.ngOnInit = function () {
            this.updateHostClassService.initializeElement(this.elementRef.nativeElement);
            this._setTreeType();
            this._setTreeSize();
            this._instanceSelectionModel();
            this._selectTreeNodes(this._selectedKeys);
        };
        ThyTreeComponent.prototype._setTreeType = function () {
            if (this.thyType) {
                this.updateHostClassService.addClass(treeTypeClassMap[this.thyType]);
            }
        };
        ThyTreeComponent.prototype._setTreeSize = function () {
            if (this.thySize) {
                this.updateHostClassService.addClass("thy-tree-" + this.thySize);
            }
        };
        ThyTreeComponent.prototype._instanceSelectionModel = function () {
            this._selectionModel = new collections.SelectionModel(this.thyMultiple);
        };
        ThyTreeComponent.prototype._selectTreeNodes = function (keys) {
            var _this = this;
            (keys || []).forEach(function (key) {
                var node = _this.thyTreeService.getTreeNode(key);
                if (node) {
                    _this.selectTreeNode(_this.thyTreeService.getTreeNode(key));
                }
            });
        };
        ThyTreeComponent.prototype.isSelected = function (node) {
            return this._selectionModel.isSelected(node);
        };
        ThyTreeComponent.prototype.toggleTreeNode = function (node) {
            if (node && !node.isDisabled) {
                this._selectionModel.toggle(node);
            }
        };
        ThyTreeComponent.prototype.trackByFn = function (index, item) {
            return item.key || index;
        };
        ThyTreeComponent.prototype.onDragStart = function (event) {
            if (this.isShowExpand(event.item) && event.item.isExpanded) {
                event.item.setExpanded(false);
            }
        };
        ThyTreeComponent.prototype.onDragDrop = function (event) {
            if (!this.isShowExpand(event.item) && event.position === dragDrop.ThyDropPosition.in) {
                return;
            }
            var parent = event.previousItem.parentNode;
            if (parent) {
                parent.children = parent.children.filter(function (item) { return item !== event.previousItem; });
            }
            else {
                this.treeNodes = this.treeNodes.filter(function (item) { return item !== event.previousItem; });
            }
            switch (event.position) {
                case dragDrop.ThyDropPosition.in:
                    event.item.addChildren(event.previousItem.origin);
                    break;
                case dragDrop.ThyDropPosition.after:
                case dragDrop.ThyDropPosition.before:
                    var targetParent = event.item.parentNode;
                    var index = event.position === dragDrop.ThyDropPosition.before ? 0 : 1;
                    if (targetParent) {
                        targetParent.addChildren(event.previousItem.origin, targetParent.children.indexOf(event.item) + index);
                    }
                    else {
                        this.treeNodes.splice(this.treeNodes.indexOf(event.item) + index, 0, event.previousItem);
                    }
                    break;
            }
            this.thyTreeService.resetSortedTreeNodes(this.treeNodes);
            var afterNode = null;
            var targetNode = null;
            if (event.position === dragDrop.ThyDropPosition.before) {
                afterNode = event.containerItems[event.currentIndex - 1];
                targetNode = event.item.parentNode;
            }
            else if (event.position === dragDrop.ThyDropPosition.after) {
                afterNode = event.containerItems[event.currentIndex];
                targetNode = event.item.parentNode;
            }
            else {
                afterNode = event.item.children[event.item.children.length - 2];
                targetNode = event.item;
            }
            this.thyOnDragDrop.emit({
                event: event,
                currentIndex: event.currentIndex,
                dragNode: event.previousItem,
                targetNode: targetNode,
                afterNode: afterNode
            });
        };
        ThyTreeComponent.prototype.isShowExpand = function (node) {
            if (util.helpers.isFunction(this.thyShowExpand)) {
                return this.thyShowExpand(node);
            }
            else {
                return this.thyShowExpand;
            }
        };
        ThyTreeComponent.prototype.writeValue = function (value) {
            this.thyNodes = value;
        };
        ThyTreeComponent.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        ThyTreeComponent.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        // region Public Functions
        ThyTreeComponent.prototype.selectTreeNode = function (node) {
            this._selectionModel.select(node);
        };
        ThyTreeComponent.prototype.getRootNodes = function () {
            return this.treeNodes;
        };
        ThyTreeComponent.prototype.getTreeNode = function (key) {
            return this.thyTreeService.getTreeNode(key);
        };
        ThyTreeComponent.prototype.getSelectedNode = function () {
            return this._selectionModel ? this._selectionModel.selected[0] : null;
        };
        ThyTreeComponent.prototype.getSelectedNodes = function () {
            return this._selectionModel ? this._selectionModel.selected : [];
        };
        ThyTreeComponent.prototype.getExpandedNodes = function () {
            return this.thyTreeService.getExpandedNodes();
        };
        ThyTreeComponent.prototype.getCheckedNodes = function () {
            return this.thyTreeService.getCheckedNodes();
        };
        ThyTreeComponent.prototype.addTreeNode = function (node, parent, index) {
            if (index === void 0) { index = -1; }
            if (parent) {
                parent.addChildren(node, index);
            }
            else {
                if (index > -1) {
                    this.treeNodes.splice(index, 0, new ThyTreeNode(node, null, this.thyTreeService));
                }
                else {
                    this.treeNodes.push(new ThyTreeNode(node, null, this.thyTreeService));
                }
            }
        };
        ThyTreeComponent.prototype.deleteTreeNode = function (node) {
            if (this.isSelected(node)) {
                this._selectionModel.toggle(node);
            }
            this.thyTreeService.deleteTreeNode(node);
        };
        ThyTreeComponent.prototype.expandAllNodes = function () {
            var nodes = this.getRootNodes();
            nodes.forEach(function (n) { return n.setExpanded(true, true); });
        };
        ThyTreeComponent.prototype.collapsedAllNodes = function () {
            var nodes = this.getRootNodes();
            nodes.forEach(function (n) { return n.setExpanded(false, true); });
        };
        return ThyTreeComponent;
    }());
    ThyTreeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-tree',
                    template: "<div\n  [thyDropContainer]=\"treeNodes\"\n  [thyDropContainerDisabled]=\"!thyDraggable\"\n  [thyBeforeDragStart]=\"thyBeforeDragStart\"\n  [thyBeforeDragOver]=\"beforeDragOver\"\n  [thyBeforeDragDrop]=\"thyBeforeDragDrop\"\n  (thyDragStarted)=\"onDragStart($event)\"\n  (thyDragDropped)=\"onDragDrop($event)\"\n>\n  <thy-tree-node\n    [thyDrag]=\"node\"\n    *ngFor=\"let node of treeNodes; trackBy: trackByFn; let i = index\"\n    [node]=\"node\"\n    [templateRef]=\"templateRef\"\n    [emptyChildrenTemplateRef]=\"emptyChildrenTemplate\"\n    [thyAsync]=\"thyAsync\"\n    [thyDraggable]=\"thyDraggable\"\n    [thyCheckable]=\"thyCheckable\"\n    [thyMultiple]=\"thyMultiple\"\n    [thyTitleTruncate]=\"thyTitleTruncate\"\n    (thyOnClick)=\"thyOnClick.emit($event)\"\n    (thyOnExpandChange)=\"thyOnExpandChange.emit($event)\"\n    (thyOnCheckboxChange)=\"thyOnCheckboxChange.emit($event)\"\n  >\n  </thy-tree-node>\n</div>\n",
                    encapsulation: core.ViewEncapsulation.None,
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return ThyTreeComponent; }),
                            multi: true
                        },
                        ThyTreeService,
                        core$1.UpdateHostClassService
                    ]
                },] }
    ];
    ThyTreeComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core$1.UpdateHostClassService },
        { type: ThyTreeService }
    ]; };
    ThyTreeComponent.propDecorators = {
        thyNodes: [{ type: core.Input }],
        thyShowExpand: [{ type: core.Input }],
        thyMultiple: [{ type: core.HostBinding, args: ["class.thy-multiple-selection-list",] }, { type: core.Input }],
        thyDraggable: [{ type: core.HostBinding, args: ['class.thy-tree-draggable',] }, { type: core.Input }],
        thyCheckable: [{ type: core.Input }],
        thyCheckStateResolve: [{ type: core.Input }],
        thyAsync: [{ type: core.Input }],
        thyType: [{ type: core.Input }],
        thyIcons: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        thyTitleTruncate: [{ type: core.Input }],
        thySelectedKeys: [{ type: core.Input }],
        thyBeforeDragStart: [{ type: core.Input }],
        thyBeforeDragDrop: [{ type: core.Input }],
        thyOnClick: [{ type: core.Output }],
        thyOnCheckboxChange: [{ type: core.Output }],
        thyOnExpandChange: [{ type: core.Output }],
        thyOnDragDrop: [{ type: core.Output }],
        templateRef: [{ type: core.ContentChild, args: ['treeNodeTemplate', { static: true },] }],
        emptyChildrenTemplate: [{ type: core.ContentChild, args: ['emptyChildrenTemplate', { static: true },] }],
        thyTreeClass: [{ type: core.HostBinding, args: ['class.thy-tree',] }]
    };

    var ThyTreeNodeComponent = /** @class */ (function () {
        function ThyTreeNodeComponent(root, thyTreeService, ngZone, cdr) {
            var _this = this;
            this.root = root;
            this.thyTreeService = thyTreeService;
            this.ngZone = ngZone;
            this.cdr = cdr;
            this.thyAsync = false;
            this.thyMultiple = false;
            this.thyDraggable = false;
            this.thyCheckable = false;
            this.thyOnClick = new core.EventEmitter();
            this.thyOnExpandChange = new core.EventEmitter();
            this.thyOnCheckboxChange = new core.EventEmitter();
            this.thyTreeNodeClass = true;
            this.destroy$ = new rxjs.Subject();
            this.checkState = exports.ThyTreeNodeCheckState;
            this.thyTreeService
                .statusChanged()
                .pipe(operators.filter(function (data) { return data.node.key === _this.node.key; }), operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.markForCheck();
            });
        }
        Object.defineProperty(ThyTreeNodeComponent.prototype, "nodeIcon", {
            get: function () {
                return this.node.origin.icon;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTreeNodeComponent.prototype, "nodeIconStyle", {
            get: function () {
                return this.node.origin.iconStyle;
            },
            enumerable: false,
            configurable: true
        });
        ThyTreeNodeComponent.prototype.markForCheck = function () {
            this.cdr.markForCheck();
        };
        ThyTreeNodeComponent.prototype.changeDragIconVisibility = function (event, showDragIcon) {
            var nodeElement = event.target;
            var dragIcon = nodeElement.querySelector('.thy-tree-drag-icon');
            if (dragIcon) {
                dragIcon.style.visibility = showDragIcon ? 'visible' : 'hidden';
            }
        };
        ThyTreeNodeComponent.prototype.nodeMouseEnter = function (event) {
            if (!this.root.thyDraggable || this.node.isDisabled) {
                return;
            }
            else if (this.root.thyDraggable && !this.root.thyBeforeDragStart) {
                this.changeDragIconVisibility(event, true);
            }
            else {
                var containerItems = this.node.getParentNode() ? this.node.getParentNode().getChildren() : this.root.treeNodes;
                var dragStartEvent = {
                    event: event,
                    item: this.node,
                    containerItems: containerItems,
                    currentIndex: containerItems.indexOf(this.node)
                };
                this.changeDragIconVisibility(event, this.root.thyBeforeDragStart(dragStartEvent));
            }
        };
        ThyTreeNodeComponent.prototype.nodeMouseLeave = function (event) {
            if (!this.root.thyDraggable || this.node.isDisabled) {
                return;
            }
            else {
                this.changeDragIconVisibility(event, false);
            }
        };
        ThyTreeNodeComponent.prototype.clickNode = function (event) {
            if (!this.root.thyMultiple) {
                this.root.selectTreeNode(this.node);
            }
            else {
                this.root.toggleTreeNode(this.node);
            }
            this.thyOnClick.emit({
                eventName: 'click',
                event: event,
                node: this.node
            });
        };
        ThyTreeNodeComponent.prototype.clickNodeCheck = function (event) {
            event.stopPropagation();
            if (this.node.isChecked === exports.ThyTreeNodeCheckState.unchecked || this.node.isChecked === exports.ThyTreeNodeCheckState.indeterminate) {
                this.node.setChecked(true);
            }
            else {
                this.node.setChecked(false);
            }
            this.thyOnCheckboxChange.emit({
                eventName: 'checkboxChange',
                event: event,
                node: this.node
            });
        };
        ThyTreeNodeComponent.prototype.expandNode = function (event) {
            event.stopPropagation();
            this.node.setExpanded(!this.node.isExpanded);
            if (this.root.thyShowExpand) {
                this.thyOnExpandChange.emit({
                    eventName: 'expand',
                    event: event,
                    node: this.node
                });
                if (this.thyAsync && this.node.children.length === 0) {
                    this.node.setLoading(true);
                }
            }
        };
        ThyTreeNodeComponent.prototype.isShowExpand = function (node) {
            return this.root.isShowExpand(node);
        };
        ThyTreeNodeComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        return ThyTreeNodeComponent;
    }());
    ThyTreeNodeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-tree-node',
                    template: "<div\n  thyDragContent\n  class=\"thy-tree-node-wrapper thy-sortable-item\"\n  [class.active]=\"root.isSelected(node)\"\n  [class.disabled]=\"node.isDisabled\"\n  (click)=\"clickNode($event)\"\n  (mouseenter)=\"nodeMouseEnter($event)\"\n  (mouseleave)=\"nodeMouseLeave($event)\"\n>\n  <span *ngIf=\"thyDraggable\" class=\"thy-tree-drag-icon thy-sortable-handle\">\n    <thy-icon thyIconName=\"drag\"></thy-icon>\n  </span>\n  <span class=\"thy-tree-expand\" (click)=\"expandNode($event)\">\n    <ng-container *ngIf=\"isShowExpand(node)\">\n      <ng-container *ngIf=\"(node.children && node.children.length > 0) || thyAsync || emptyChildrenTemplateRef\">\n        <thy-icon\n          *ngIf=\"root.thyIcons?.expand && root.thyIcons?.collapse; else defaultIcon\"\n          class=\"thy-tree-expand-icon\"\n          [thyIconName]=\"node.isExpanded ? root.thyIcons.expand : root.thyIcons.collapse\"\n        ></thy-icon>\n        <ng-template #defaultIcon>\n          <thy-icon class=\"thy-tree-expand-icon\" [class.collapse]=\"!node.isExpanded\" thyIconName=\"caret-right-down\"></thy-icon>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n  </span>\n\n  <span class=\"thy-tree-node-content\">\n    <input\n      *ngIf=\"thyCheckable\"\n      type=\"checkbox\"\n      class=\"thy-tree-node-check\"\n      [class.form-check-indeterminate]=\"node.isChecked === checkState.indeterminate\"\n      [checked]=\"node.isChecked === checkState.checked\"\n      [disabled]=\"node.isDisabled\"\n      (click)=\"clickNodeCheck($event)\"\n    />\n    <ng-container *ngIf=\"!templateRef\">\n      <ng-container *ngIf=\"nodeIcon\">\n        <span class=\"thy-tree-node-icon\"> <i [ngClass]=\"nodeIcon\" [ngStyle]=\"nodeIconStyle\"></i></span>\n      </ng-container>\n      <span [title]=\"node.title\" class=\"thy-tree-node-title\" [class.truncate]=\"thyTitleTruncate\"> {{ node.title }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"templateRef\">\n      <ng-template\n        [ngTemplateOutlet]=\"templateRef\"\n        [ngTemplateOutletContext]=\"{ $implicit: node, node: node, origin: node?.origin }\"\n      ></ng-template>\n    </ng-container>\n  </span>\n</div>\n<div\n  class=\"thy-tree-node-children\"\n  *ngIf=\"isShowExpand(node) && node.isExpanded\"\n  [thyDropContainer]=\"node.children\"\n  [thyDropContainerDisabled]=\"!root.thyDraggable\"\n  [thyBeforeDragStart]=\"root.thyBeforeDragStart\"\n  [thyBeforeDragOver]=\"root.beforeDragOver\"\n  [thyBeforeDragDrop]=\"root.thyBeforeDragDrop\"\n  (thyDragDropped)=\"root.onDragDrop($event)\"\n  (thyDragStarted)=\"root.onDragStart($event)\"\n>\n  <thy-tree-node\n    *ngFor=\"let node of node.children; trackBy: root.trackByFn; let i = index\"\n    [node]=\"node\"\n    [thyDrag]=\"node\"\n    [templateRef]=\"templateRef\"\n    [thyAsync]=\"thyAsync\"\n    [thyMultiple]=\"thyMultiple\"\n    [thyDraggable]=\"thyDraggable\"\n    [thyCheckable]=\"thyCheckable\"\n    [thyTitleTruncate]=\"thyTitleTruncate\"\n    (thyOnClick)=\"thyOnClick.emit($event)\"\n    (thyOnCheckboxChange)=\"thyOnCheckboxChange.emit($event)\"\n    (thyOnExpandChange)=\"thyOnExpandChange.emit($event)\"\n  >\n  </thy-tree-node>\n  <ng-container *ngIf=\"thyAsync\">\n    <thy-loading *ngIf=\"node.isLoading\" [thyDone]=\"!node.isLoading\"></thy-loading>\n  </ng-container>\n</div>\n",
                    encapsulation: core.ViewEncapsulation.None
                },] }
    ];
    ThyTreeNodeComponent.ctorParameters = function () { return [
        { type: ThyTreeComponent },
        { type: ThyTreeService },
        { type: core.NgZone },
        { type: core.ChangeDetectorRef }
    ]; };
    ThyTreeNodeComponent.propDecorators = {
        node: [{ type: core.Input }],
        thyAsync: [{ type: core.Input }],
        thyMultiple: [{ type: core.Input }],
        thyDraggable: [{ type: core.Input }],
        thyCheckable: [{ type: core.Input }],
        thyTitleTruncate: [{ type: core.Input }],
        templateRef: [{ type: core.Input }],
        emptyChildrenTemplateRef: [{ type: core.Input }],
        thyOnClick: [{ type: core.Output }],
        thyOnExpandChange: [{ type: core.Output }],
        thyOnCheckboxChange: [{ type: core.Output }],
        childrenTreeTemplateRef: [{ type: core.ContentChild, args: ['childrenTree',] }],
        titleInputElementRef: [{ type: core.ViewChild, args: ['title',] }],
        thyTreeNodeClass: [{ type: core.HostBinding, args: ['class.thy-tree-node',] }]
    };

    var ThyTreeReplaceRegionComponent = /** @class */ (function () {
        function ThyTreeReplaceRegionComponent(root, viewRef) {
            this.root = root;
            this.viewRef = viewRef;
        }
        ThyTreeReplaceRegionComponent.prototype.ngOnInit = function () { };
        return ThyTreeReplaceRegionComponent;
    }());
    ThyTreeReplaceRegionComponent.decorators = [
        { type: core.Component, args: [{
                    selector: '[ThyTreeReplaceRegion]',
                    template: '<ng-content></ng-content>',
                    encapsulation: core.ViewEncapsulation.None
                },] }
    ];
    ThyTreeReplaceRegionComponent.ctorParameters = function () { return [
        { type: ThyTreeComponent },
        { type: core.ViewContainerRef }
    ]; };
    ThyTreeReplaceRegionComponent.propDecorators = {
        thyInstance: [{ type: core.Input }]
    };

    var ThyTreeModule = /** @class */ (function () {
        function ThyTreeModule() {
        }
        return ThyTreeModule;
    }());
    ThyTreeModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],
                    imports: [
                        common.CommonModule,
                        input.ThyInputModule,
                        button.ThyButtonModule,
                        shared.ThySharedModule,
                        forms.FormsModule,
                        list.ThyListModule,
                        shared.ThyOptionModule,
                        loading.ThyLoadingModule,
                        icon.ThyIconModule,
                        dragDrop.ThyDragDropModule,
                        checkbox.ThyCheckboxModule
                    ],
                    entryComponents: [ThyTreeComponent],
                    exports: [ThyTreeComponent, ThyTreeNodeComponent, ThyTreeReplaceRegionComponent],
                    providers: [ThyTreeService]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyTreeComponent = ThyTreeComponent;
    exports.ThyTreeIcons = ThyTreeIcons;
    exports.ThyTreeModule = ThyTreeModule;
    exports.ThyTreeNode = ThyTreeNode;
    exports.ThyTreeNodeComponent = ThyTreeNodeComponent;
    exports.ThyTreeReplaceRegionComponent = ThyTreeReplaceRegionComponent;
    exports.ThyTreeService = ThyTreeService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-tree.umd.js.map

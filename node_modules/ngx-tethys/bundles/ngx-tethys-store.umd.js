(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('ngx-tethys/util')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/store', ['@angular/core','exports', '@angular/core', 'rxjs', 'rxjs/operators', 'ngx-tethys/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].store = {}), global.ng.core, global.rxjs, global.rxjs.operators, global['ngx-tethys'].util));
}(this, (function (Éµngcc0,exports, core, rxjs, operators, util) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var META_KEY = '__THY_META__';
    var ROOT_STATE_TOKEN = new core.InjectionToken('ROOT_STATE_TOKEN');
    var FEATURE_STATE_TOKEN = new core.InjectionToken('FEATURE_STATE_TOKEN');
    // export type Newable<T> = { new (...args: any[]): T };

    var ThyStoreModuleIsNotImported = /** @class */ (function (_super) {
        __extends(ThyStoreModuleIsNotImported, _super);
        function ThyStoreModuleIsNotImported() {
            return _super.call(this, "You've forgotten to import \"ThyStoreModule\"!") || this;
        }
        return ThyStoreModuleIsNotImported;
    }(Error));
    var injector = null;
    function assertDefined(actual) {
        if (actual == null) {
            throw new ThyStoreModuleIsNotImported();
        }
    }
    function setInjector(parentInjector) {
        injector = parentInjector;
    }
    /**
     * Ensure that we don't keep any references in case of the bootstrapped
     * module is destroyed via `NgModuleRef.destroy()`.
     */
    function clearInjector() {
        injector = null;
    }
    function getInjector() {
        assertDefined(injector);
        return injector;
    }

    var ThyRootStoreModule = /** @class */ (function () {
        function ThyRootStoreModule(ngModuleRef) {
            setInjector(ngModuleRef.injector);
            ngModuleRef.onDestroy(clearInjector);
        }
ThyRootStoreModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: ThyRootStoreModule });
ThyRootStoreModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function ThyRootStoreModule_Factory(t) { return new (t || ThyRootStoreModule)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgModuleRef)); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(ThyRootStoreModule, [{
        type: core.NgModule
    }], function () { return [{ type: Éµngcc0.NgModuleRef }]; }, null); })();
        return ThyRootStoreModule;
    }());
    ThyRootStoreModule.ctorParameters = function () { return [
        { type: core.NgModuleRef }
    ]; };
    var ThyFeatureStoreModule = /** @class */ (function () {
        function ThyFeatureStoreModule() {
        }
ThyFeatureStoreModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: ThyFeatureStoreModule });
ThyFeatureStoreModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function ThyFeatureStoreModule_Factory(t) { return new (t || ThyFeatureStoreModule)(); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(ThyFeatureStoreModule, [{
        type: core.NgModule
    }], function () { return []; }, null); })();
        return ThyFeatureStoreModule;
    }());
    var ThyStoreModule = /** @class */ (function () {
        function ThyStoreModule() {
        }
        ThyStoreModule.forRoot = function (stores) {
            if (stores === void 0) { stores = []; }
            return {
                ngModule: ThyRootStoreModule,
                providers: __spread(stores, [
                    {
                        provide: ROOT_STATE_TOKEN,
                        useValue: stores
                    }
                ])
            };
        };
        ThyStoreModule.forFeature = function (stores) {
            if (stores === void 0) { stores = []; }
            return {
                ngModule: ThyFeatureStoreModule,
                providers: __spread(stores, [
                    {
                        provide: FEATURE_STATE_TOKEN,
                        multi: true,
                        useValue: stores
                    }
                ])
            };
        };
ThyStoreModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: ThyStoreModule });
ThyStoreModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function ThyStoreModule_Factory(t) { return new (t || ThyStoreModule)(); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(ThyStoreModule, [{
        type: core.NgModule,
        args: [{}]
    }], function () { return []; }, null); })();
        return ThyStoreModule;
    }());

    var StorePlugin = /** @class */ (function () {
        function StorePlugin() {
        }
        return StorePlugin;
    }());
    function tinyStateVersion() {
        return 'v0.6.0';
    }
    var ReduxDevtoolsPlugin = /** @class */ (function () {
        function ReduxDevtoolsPlugin() {
            this._devTools = null;
            this._window = window;
            if (this._window == null) {
                return;
            }
            var globalDevtools = this._window['__REDUX_DEVTOOLS_EXTENSION__'] ||
                this._window['devToolsExtension'];
            if (!globalDevtools) {
                console.log("\u672A\u5B89\u88C5Chrome\u6D4F\u89C8\u5668\u7684\u62D3\u5C55\u63D2\u4EF6: Redux DevTools.");
                console.log("\u63D2\u4EF6\u4E0B\u8F7D\u5730\u5740: https://www.chromefor.com/redux-devtools_v2-17-0/");
                return;
            }
            this._devTools = globalDevtools.connect({
                name: "NgxStore " + tinyStateVersion()
            });
        }
        ReduxDevtoolsPlugin.prototype.handleNewState = function (actionName, state) {
            if (this.isConnectSuccessed()) {
                this._devTools.send(actionName, state);
            }
        };
        ReduxDevtoolsPlugin.prototype.isConnectSuccessed = function () {
            if (this._devTools === null) {
                return false;
            }
            return true;
        };
        return ReduxDevtoolsPlugin;
    }());
    function getReduxDevToolsPlugin() {
        if (!window["___ReduxDevtoolsPlugin___"]) {
            window["___ReduxDevtoolsPlugin___"] = new ReduxDevtoolsPlugin();
        }
        return window["___ReduxDevtoolsPlugin___"];
    }

    // @dynamic
    var ActionState = /** @class */ (function () {
        function ActionState() {
        }
        ActionState.changeAction = function (actionName) {
            this.actionName = actionName;
        };
        ActionState.getActionName = function () {
            return this.actionName;
        };
        return ActionState;
    }());
    ActionState.actionName = '';

    var rootStore;
    /**
     * @internal
     */
    var RootStore = /** @class */ (function () {
        function RootStore() {
            this.connectSuccessed = false;
            /**
             * æ°æ®æµ æ°æ®æ¯ä¸ä¸ªMapï¼k,vé®å¼å¯¹ï¼å³é®å­->ç¶ææ°æ®
             */
            this._containers = new rxjs.BehaviorSubject(new Map());
            this._plugin = getReduxDevToolsPlugin();
            this._combinedStateSubscription = new rxjs.Subscription();
            if (this._plugin.isConnectSuccessed()) {
                this.connectSuccessed = true;
                this._assignCombinedState(); // æç»è°ç¨handleNewState
                console.log("\u662F\u5426\u5728Angular\u5F00\u53D1\u73AF\u5883\uFF1A" + core.isDevMode() + ", \u521D\u59CB\u5316root-store");
            }
        }
        RootStore.prototype._assignCombinedState = function () {
            var _this = this;
            this._combinedStateSubscription = this._containers
                .pipe(operators.switchMap(function (containers) { return _this._getCombinedState(containers); }))
                .pipe(operators.map(function (states) {
                var actionName = ActionState.getActionName();
                var state = states.reduce(function (acc, curr) {
                    acc[curr.containerName] = curr.state;
                    return acc;
                }, {});
                return { state: state, actionName: actionName };
            }))
                .subscribe(function (c) {
                _this._plugin.handleNewState(c.actionName, c.state);
            });
        };
        /**
         * åå¹¶æ°æ®æµ
         * åå¹¶ç¶ææ°æ®ï¼æç¶ææ°æ®è½¬æ¢ä¸ºè¿æ ·çæ°æ®ï¼{ containerName: string, state: any }ï¼å¹¶ä¸
         * éè¿combineLateståå¹¶æä¸ä¸ªæ°æ®æ°æ®æµï¼è¿æ ·ç¶ææ°æ®åªææ¶åæ´æ°ï¼é£ä¹è¿è¾¹å°±ä¼å¾å°éç¥
         * @param containers ç¶ææ°æ®çMap
         */
        RootStore.prototype._getCombinedState = function (containers) {
            return rxjs.combineLatest.apply(void 0, __spread(Array.from(containers.entries()).map(function (_a) {
                var _b = __read(_a, 2), containerName = _b[0], container = _b[1];
                return container.state$.pipe(operators.map(function (state) { return ({ containerName: containerName, state: state }); }), operators.tap(function (data) { }));
            })));
        };
        /**
         * @internal
         */
        RootStore.prototype.ngOnDestroy = function () {
            this._combinedStateSubscription.unsubscribe();
        };
        /**
         * @internal
         */
        RootStore.prototype.registerStore = function (store) {
            if (!this.connectSuccessed) {
                return;
            }
            var containers = new Map(this._containers.value);
            if (containers.has(store.getStoreInstanceId())) {
                throw new Error("Store: Store with duplicate instance ID found! " + store.getStoreInstanceId() +
                    " is already registered. Please check your getStoreInstanceId() methods!");
            }
            containers.set(store.getStoreInstanceId(), store);
            this._containers.next(containers);
        };
        RootStore.prototype.existStoreInstanceId = function (instanceId) {
            var containers = new Map(this._containers.value);
            if (containers.has(instanceId)) {
                return true;
            }
            return false;
        };
        /**
         * @internal
         */
        RootStore.prototype.unregisterStore = function (store) {
            if (!this.connectSuccessed) {
                return;
            }
            var containers = new Map(this._containers.value);
            containers.delete(store.getStoreInstanceId());
            this._containers.next(containers);
        };
RootStore.Éµfac = function RootStore_Factory(t) { return new (t || RootStore)(); };
RootStore.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: RootStore, factory: function (t) { return RootStore.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(RootStore, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return RootStore;
    }());
    RootStore.ctorParameters = function () { return []; };
    function getSingletonRootStore() {
        if (!rootStore) {
            rootStore = new RootStore();
        }
        return rootStore;
    }

    function findAndCreateStoreMetadata(target) {
        if (!target.hasOwnProperty(META_KEY)) {
            var defaultMetadata = {
                actions: {},
                path: null,
                children: [],
                instance: null
            };
            target[META_KEY] = defaultMetadata;
        }
        return target[META_KEY];
    }

    /**
     * Decorates a method with a action information.
     */
    function Action(action) {
        return function (target, name, descriptor) {
            var meta = findAndCreateStoreMetadata(target);
            // default use function name as action type
            if (!action) {
                action = {
                    type: name
                };
            }
            // support string for type
            if (typeof action === 'string') {
                action = {
                    type: action
                };
            }
            var type = action.type;
            if (!action.type) {
                throw new Error("Action " + action.type + " is missing a static \"type\" property");
            }
            var originalFn = descriptor.value;
            meta.actions[type] = {
                fn: name,
                originalFn: originalFn,
                type: type
            };
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                ActionState.changeAction(target.constructor.name + "-" + name);
                var result = originalFn.call.apply(originalFn, __spread([this], args));
                if (result instanceof rxjs.Observable) {
                    result = result.pipe(operators.catchError(function (error) {
                        return rxjs.of({ status: "ERRORED" /* Errored */, action: action, error: error });
                    }), operators.shareReplay(), operators.exhaustMap(function (result) {
                        if (result && result.status === "ERRORED" /* Errored */) {
                            return rxjs.throwError(result.error);
                        }
                        else {
                            return rxjs.of(result);
                        }
                    }));
                    result.subscribe();
                }
                return result;
            };
        };
    }

    var Store = /** @class */ (function () {
        function Store(initialState) {
            this.reduxToolEnabled = core.isDevMode();
            this._defaultStoreInstanceId = this._getClassName();
            this.state$ = new rxjs.BehaviorSubject(initialState);
            this.initialStateCache = Object.assign({}, initialState);
            if (this.reduxToolEnabled) {
                var rootStore = getSingletonRootStore();
                ActionState.changeAction("Add-" + this._defaultStoreInstanceId);
                rootStore.registerStore(this);
            }
        }
        Object.defineProperty(Store.prototype, "snapshot", {
            get: function () {
                return this.state$.getValue();
            },
            enumerable: false,
            configurable: true
        });
        Store.prototype.dispatch = function (type, payload) {
            ActionState.changeAction(this._defaultStoreInstanceId + "-" + type);
            var result = this._dispatch({
                type: type,
                payload: payload
            });
            result.subscribe();
            return result;
        };
        Store.prototype._dispatch = function (action) {
            var meta = this[META_KEY];
            if (!meta) {
                throw new Error(META_KEY + " is not found, current store has not action");
            }
            var actionMeta = meta.actions[action.type];
            if (!actionMeta) {
                throw new Error(action.type + " is not found");
            }
            // let result: any = this[actionMeta.fn](this.snapshot, action.payload);
            var result = actionMeta.originalFn.call(this, this.snapshot, action.payload);
            if (result instanceof Promise) {
                result = rxjs.from(result);
            }
            if (result instanceof rxjs.Observable) {
                result = result.pipe(operators.map(function (r) { return r; }));
            }
            else {
                result = new rxjs.Observable(function (observer) {
                    observer.next({});
                });
            }
            return result.pipe(operators.shareReplay());
        };
        Store.prototype.select = function (selector) {
            return this.state$.pipe(operators.map(selector), operators.distinctUntilChanged());
        };
        Store.prototype.next = function (state) {
            this.state$.next(state);
        };
        Store.prototype.error = function (error) {
            this.state$.error(error);
        };
        Store.prototype.complete = function () {
            this.state$.complete();
        };
        Store.prototype.subscribe = function (next, error, complete) {
            return this.state$.subscribe(next, error, complete);
        };
        /**
         * set store new state
         *
         * @example
         * this.setState(newState);
         * this.setState({ users: produce(this.snapshot.users).add(user) });
         * this.setState((state) => {
         *    return {
         *        users: produce(state.users).add(user)
         *    }
         * });
         * @param fn
         */
        Store.prototype.setState = function (fn) {
            if (util.helpers.isFunction(fn)) {
                this.next(Object.assign(Object.assign({}, this.snapshot), fn(this.snapshot)));
            }
            else {
                this.next(Object.assign(Object.assign({}, this.snapshot), fn));
            }
        };
        Store.prototype.getState = function () {
            return this.snapshot;
        };
        Store.prototype.clearState = function () {
            this.setState(this.initialStateCache);
        };
        Store.prototype.ngOnDestroy = function () {
            if (this.reduxToolEnabled) {
                var rootStore = getSingletonRootStore();
                rootStore.unregisterStore(this);
            }
        };
        /**
         * You can override this method if you want to give your container instance a custom id.
         * The returned id must be unique in the application.
         */
        Store.prototype.getStoreInstanceId = function () {
            return this._defaultStoreInstanceId;
        };
        Store.prototype._getClassName = function () {
            var name = this.constructor.name || /function (.+)\(/.exec(this.constructor + '')[1];
            if (this.reduxToolEnabled) {
                var rootStore = getSingletonRootStore();
                if (!rootStore.existStoreInstanceId(name)) {
                    return name;
                }
                var j = 0;
                for (var i = 1; i < 20; i++) {
                    if (!rootStore.existStoreInstanceId(name + "-" + i)) {
                        j = i;
                        break;
                    }
                }
                return name + "-" + j;
            }
            return name;
        };
Store.Éµfac = function Store_Factory(t) { return new (t || Store)(Éµngcc0.ÉµÉµinject(undefined)); };
Store.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: Store, factory: function (t) { return Store.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(Store, [{
        type: core.Injectable
    }], function () { return [{ type: undefined }]; }, null); })();
        return Store;
    }());
    Store.ctorParameters = function () { return [
        { type: undefined }
    ]; };
    __decorate([
        Action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Store.prototype, "clearState", null);

    var EntityStore = /** @class */ (function (_super) {
        __extends(EntityStore, _super);
        function EntityStore(initialState, options) {
            if (initialState === void 0) { initialState = {
                entities: []
            }; }
            if (options === void 0) { options = { idKey: '_id' }; }
            var _this = _super.call(this, initialState) || this;
            _this.entities$ = _this.select(function (state) {
                return state.entities;
            });
            _this.entitiesWithRefs$ = _this.entities$.pipe(operators.map(function (entities) {
                if (!entities) {
                    return entities;
                }
                return entities.map(function (entity) {
                    var newEntity = Object.assign({}, entity);
                    if (_this['onCombineRefs']) {
                        if (!newEntity['refs']) {
                            newEntity['refs'] = {};
                        }
                        _this['onCombineRefs'](newEntity, _this.internalReferencesIdMap, _this.snapshot.references);
                    }
                    else {
                        throw new Error("onCombineRefs is not empty");
                    }
                    return newEntity;
                });
            }));
            _this.trackBy = function (_index, entity) {
                return entity[_this.options.idKey];
            };
            _this.options = Object.assign({ idKey: '_id' }, options);
            if (!_this.options.idKey) {
                throw new Error("idKey is required in EntityStore");
            }
            _this.buildReferencesIdMap();
            return _this;
        }
        Object.defineProperty(EntityStore.prototype, "entities", {
            get: function () {
                return this.snapshot.entities;
            },
            enumerable: false,
            configurable: true
        });
        EntityStore.prototype.resetPagination = function (pagination, count) {
            pagination.count = count;
            // åä¸åæ´ 21 / 20 = 1.05 = 2 pageCount is 2
            var pageCount = Math.ceil(pagination.count / pagination.pageSize);
            pagination.pageCount = pageCount;
            this.snapshot.pagination = Object.assign({}, pagination);
        };
        EntityStore.prototype.increasePagination = function (amount) {
            var pagination = this.snapshot.pagination;
            this.resetPagination(pagination, pagination.count + amount);
        };
        EntityStore.prototype.decreasePagination = function (amount) {
            var pagination = this.snapshot.pagination;
            if (pagination) {
                this.resetPagination(pagination, pagination.count - amount);
            }
        };
        EntityStore.prototype.buildReferencesIdMap = function () {
            if (this.snapshot.references) {
                this.internalReferencesIdMap = util.buildReferencesKeyBy(this.snapshot.references, this.options.referencesIdKeys);
            }
        };
        /**
         *
         * Replace current collection with provided collection
         *
         * @example
         * this.store.initialize([Entity, Entity], pagination: PaginationInfo);
         *
         */
        EntityStore.prototype.initialize = function (entities, pagination) {
            var state = this.snapshot;
            state.entities = entities || [];
            state.pagination = pagination;
            this.next(state);
        };
        /**
         *
         * Replace current collection with provided collection with references
         *
         * @example
         * this.store.initializeWithReferences([Entity, Entity], references: TReferences, pagination: PaginationInfo);
         *
         */
        EntityStore.prototype.initializeWithReferences = function (entities, references, pagination) {
            var state = this.snapshot;
            state.entities = entities || [];
            state.pagination = pagination;
            state.references = references;
            this.buildReferencesIdMap();
            this.next(state);
        };
        /**
         * Add entity or entities for internal
         * @param entity
         * @param references
         * @param addOptions
         */
        EntityStore.prototype.addInternal = function (entity, references, addOptions) {
            var addEntities = util.helpers.coerceArray(entity);
            if (addEntities.length === 0) {
                return;
            }
            var state = this.snapshot;
            state.entities = util.produce(state.entities).add(addEntities, addOptions);
            if (state.references) {
                util.mergeReferences(state.references, references, this.options.referencesIdKeys);
                this.buildReferencesIdMap();
            }
            if (state.pagination) {
                this.increasePagination(addEntities.length);
                if (addOptions && !addOptions.prepend && addOptions.autoGotoLastPage) {
                    state.pagination.pageIndex = state.pagination.pageCount;
                }
            }
            this.next(state);
        };
        /**
         * Add an entity or entities to the store.
         *
         * @example
         * this.store.add(Entity);
         * this.store.add([Entity, Entity]);
         * this.store.add(Entity, { prepend: true });
         */
        EntityStore.prototype.add = function (entity, addOptions) {
            this.addInternal(entity, undefined, addOptions);
        };
        /**
         * Add an entity or entities to the store with references.
         *
         * @example
         * this.store.add(Entity);
         * this.store.add([Entity, Entity]);
         * this.store.add(Entity, { prepend: true });
         */
        EntityStore.prototype.addWithReferences = function (entity, references, addOptions) {
            this.addInternal(entity, references, addOptions);
        };
        /**
         *
         * Update an entity or entities in the store.
         *
         * @example
         * this.store.update(3, {
         *   name: 'New Name'
         * }, references);
         *
         *  this.store.update(3, entity => {
         *    return {
         *      ...entity,
         *      name: 'New Name'
         *    }
         *  }, references);
         *
         * this.store.update([1,2,3], {
         *   name: 'New Name'
         * }, references);
         */
        EntityStore.prototype.updateInternal = function (idsOrFn, 
        // | Partial<TState>
        // | ((state: Readonly<TState>) => Partial<TState>)
        // | ((entity: Readonly<TEntity>) => boolean),
        newStateOrFn, references) {
            var ids = util.helpers.coerceArray(idsOrFn);
            var state = this.snapshot;
            for (var i = 0; i < state.entities.length; i++) {
                var oldEntity = state.entities[i];
                if (ids.indexOf(oldEntity[this.options.idKey]) > -1) {
                    var newState = util.helpers.isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
                    state.entities[i] = Object.assign(Object.assign({}, oldEntity), newState);
                }
            }
            state.entities = __spread(state.entities);
            if (state.references) {
                util.mergeReferences(state.references, references, this.options.referencesIdKeys);
                this.buildReferencesIdMap();
            }
            this.next(state);
        };
        /**
         *
         * Update an entity or entities in the store with references.
         *
         * @example
         * this.store.update(3, {
         *   name: 'New Name'
         * }, references);
         *
         *  this.store.update(3, entity => {
         *    return {
         *      ...entity,
         *      name: 'New Name'
         *    }
         *  }, references);
         *
         * this.store.update([1,2,3], {
         *   name: 'New Name'
         * }, references);
         */
        EntityStore.prototype.update = function (idsOrFn, newStateOrFn) {
            this.updateInternal(idsOrFn, newStateOrFn, undefined);
        };
        /**
         *
         * Update an entity or entities in the store with references.
         *
         * @example
         * this.store.updateWithReferences(3, {
         *   name: 'New Name'
         * }, references);
         *
         *  this.store.updateWithReferences(3, entity => {
         *    return {
         *      ...entity,
         *      name: 'New Name'
         *    }
         *  }, references);
         *
         * this.store.updateWithReferences([1,2,3], {
         *   name: 'New Name'
         * }, references);
         */
        EntityStore.prototype.updateWithReferences = function (idsOrFn, newStateOrFn, references) {
            this.updateInternal(idsOrFn, newStateOrFn, references);
        };
        EntityStore.prototype.remove = function (idsOrFn) {
            var state = this.snapshot;
            var originalLength = state.entities.length;
            state.entities = util.produce(state.entities, this.options).remove(idsOrFn);
            this.decreasePagination(originalLength - state.entities.length);
            this.next(state);
        };
        EntityStore.prototype.clearPagination = function () {
            var state = this.snapshot;
            state.pagination = null;
            this.next(state);
        };
        EntityStore.prototype.clear = function () {
            var state = this.snapshot;
            state.entities = [];
            state.pagination = null;
            state.references = null;
            this.next(state);
        };
        return EntityStore;
    }(Store));

    /**
     * Generated bundle index. Do not edit.
     */

    exports.Action = Action;
    exports.EntityStore = EntityStore;
    exports.FEATURE_STATE_TOKEN = FEATURE_STATE_TOKEN;
    exports.META_KEY = META_KEY;
    exports.ROOT_STATE_TOKEN = ROOT_STATE_TOKEN;
    exports.RootStore = RootStore;
    exports.Store = Store;
    exports.ThyFeatureStoreModule = ThyFeatureStoreModule;
    exports.ThyRootStoreModule = ThyRootStoreModule;
    exports.ThyStoreModule = ThyStoreModule;
    exports.getSingletonRootStore = getSingletonRootStore;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-store.umd.js.map
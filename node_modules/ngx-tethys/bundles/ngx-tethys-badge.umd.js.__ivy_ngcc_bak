(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-tethys/util')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/badge', ['exports', '@angular/core', '@angular/common', 'ngx-tethys/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].badge = {}), global.ng.core, global.ng.common, global['ngx-tethys'].util));
}(this, (function (exports, core, common, util) { 'use strict';

    var BadgeMutexType = ['thy-badge-count', 'thy-badge-dot', 'thy-badge-hollow'];
    var BadgeMutexTheme = ['thy-badge-primary', 'thy-badge-warning', 'thy-badge-danger', 'thy-badge-secondary'];
    var BadgeMutexSize = ['thy-badge-lg', 'thy-badge-sm'];
    var ThyBadgeComponent = /** @class */ (function () {
        function ThyBadgeComponent(elementRef) {
            this.elementRef = elementRef;
            this.displayContent = '';
            this.badgeClassName = '';
            this._initialized = false;
            this.badgeClassNameMap = {
                'thy-badge-count': true,
                'thy-badge-dot': false,
                'thy-badge-hollow': false,
                'thy-badge-lg': false,
                'thy-badge-sm': false,
                'thy-badge-danger': true,
                'thy-badge-primary': false,
                'thy-badge-warning': false,
                'thy-badge-secondary': false,
                'thy-badge-sup': true,
                'thy-badge-multiple-words': false
            };
            this.st = {
                value: '',
                isValueOfString: false,
                isSetValue: false,
                isValueKeepShow: false,
                max: {
                    is: false,
                    value: null
                },
                isElement: false,
                isSup: false,
                isShowBadge: true
            };
            this.containerClassName = true;
            this.nativeElement = this.elementRef.nativeElement;
            this.st.isElement = this.nativeElement.localName === 'thy-badge';
        }
        Object.defineProperty(ThyBadgeComponent.prototype, "thyType", {
            set: function (value) {
                this.resetBadgeClassNameMap(BadgeMutexTheme);
                switch (value) {
                    case 'danger':
                        this.badgeClassNameMap['thy-badge-danger'] = true;
                        break;
                    case 'primary':
                        this.badgeClassNameMap['thy-badge-primary'] = true;
                        break;
                    case 'warning':
                        this.badgeClassNameMap['thy-badge-warning'] = true;
                        break;
                    case 'secondary':
                        this.badgeClassNameMap['thy-badge-secondary'] = true;
                        break;
                    default:
                        this.badgeClassNameMap['thy-badge-danger'] = true;
                        break;
                }
                if (this._initialized) {
                    this.combineBadgeClassName();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thyCount", {
            set: function (value) {
                this.st.value = value;
                this.st.isSetValue = true;
                if (this._initialized) {
                    this.combineBadgeDisplayContent();
                    this.combineBadgeClassName();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thyContext", {
            set: function (value) {
                this.st.value = value;
                this.st.isValueOfString = true;
                this.st.isSetValue = true;
                if (this._initialized) {
                    this.combineBadgeDisplayContent();
                    this.combineBadgeClassName();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thyMaxCount", {
            set: function (value) {
                this.st.max.is = true;
                this.st.max.value = value;
                if (this._initialized) {
                    this.combineBadgeDisplayContent();
                    this.combineBadgeClassName();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thySize", {
            set: function (value) {
                this.resetBadgeClassNameMap(BadgeMutexSize);
                switch (value) {
                    case 'lg':
                        this.badgeClassNameMap['thy-badge-lg'] = true;
                        break;
                    case 'sm':
                        this.badgeClassNameMap['thy-badge-sm'] = true;
                        break;
                }
                if (this._initialized) {
                    this.combineBadgeClassName();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thyIsDot", {
            set: function (value) {
                this.resetBadgeClassNameMap(BadgeMutexType);
                this.badgeClassNameMap['thy-badge-dot'] = util.coerceBooleanProperty(value);
                if (this._initialized) {
                    this.combineBadgeClassName();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thyIsHollow", {
            set: function (value) {
                this.resetBadgeClassNameMap(BadgeMutexType);
                this.badgeClassNameMap['thy-badge-hollow'] = util.coerceBooleanProperty(value);
                if (this._initialized) {
                    this.combineBadgeClassName();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thyKeepShow", {
            set: function (value) {
                this.st.isValueKeepShow = util.coerceBooleanProperty(value);
                if (this._initialized) {
                    this.combineBadgeDisplayContent();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thyTextColor", {
            set: function (value) {
                this.textColor = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyBadgeComponent.prototype, "thyBackgroundColor", {
            set: function (value) {
                this.backgroundColor = value;
                this.resetBadgeClassNameMap(BadgeMutexTheme);
            },
            enumerable: false,
            configurable: true
        });
        ThyBadgeComponent.prototype.ngOnInit = function () {
            var childNodeCount = 0;
            this.nativeElement.childNodes.forEach(function (n) {
                if (['#comment'].indexOf(n.nodeName) < 0) {
                    childNodeCount++;
                }
            });
            this.st.isSup = childNodeCount > 0;
            this.combineBadgeClassName();
            if (this.st.isSetValue) {
                this.combineBadgeDisplayContent();
            }
            this._initialized = true;
        };
        ThyBadgeComponent.prototype.combineBadgeClassName = function () {
            this.badgeClassNameMap['thy-badge-sup'] = this.st.isSup;
            this.explorationValueLength();
            var _badgeClassNames = [];
            for (var key in this.badgeClassNameMap) {
                if (this.badgeClassNameMap.hasOwnProperty(key)) {
                    if (this.badgeClassNameMap[key]) {
                        _badgeClassNames.push(key);
                    }
                }
            }
            this.badgeClassName = _badgeClassNames.join(' ');
        };
        ThyBadgeComponent.prototype.combineBadgeDisplayContent = function () {
            this.displayContent = this.st.value;
            if (this.st.value && this.st.max.is && this.st.value > this.st.max.value) {
                this.displayContent = this.st.max.value + "+";
            }
            if (!this.st.value && !this.st.isValueKeepShow) {
                this.st.isShowBadge = false;
            }
            else {
                this.st.isShowBadge = true;
            }
        };
        ThyBadgeComponent.prototype.explorationValueLength = function () {
            if (this.st.value && this.st.value.toString().length > 1 && this.st.isSup) {
                this.badgeClassNameMap['thy-badge-multiple-words'] = true;
            }
        };
        ThyBadgeComponent.prototype.resetBadgeClassNameMap = function (mutexArray) {
            for (var key in this.badgeClassNameMap) {
                if (this.badgeClassNameMap.hasOwnProperty(key)) {
                    if (mutexArray.includes(key)) {
                        this.badgeClassNameMap[key] = false;
                    }
                }
            }
        };
        return ThyBadgeComponent;
    }());
    ThyBadgeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-badge,[thyBadge]',
                    template: "<ng-container>\n  <span\n    *ngIf=\"st.isShowBadge\"\n    class=\"thy-badge {{ badgeClassName }}\"\n    [style.color]=\"textColor\"\n    [style.backgroundColor]=\"backgroundColor\"\n    >{{ displayContent }}</span\n  >\n</ng-container>\n<ng-content></ng-content>\n"
                },] }
    ];
    ThyBadgeComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    ThyBadgeComponent.propDecorators = {
        containerClassName: [{ type: core.HostBinding, args: ['class.thy-badge-container',] }],
        thyType: [{ type: core.Input }],
        thyCount: [{ type: core.Input }],
        thyContext: [{ type: core.Input }],
        thyMaxCount: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        thyIsDot: [{ type: core.Input }],
        thyIsHollow: [{ type: core.Input }],
        thyKeepShow: [{ type: core.Input }],
        thyTextColor: [{ type: core.Input }],
        thyBackgroundColor: [{ type: core.Input }]
    };

    var ThyBadgeModule = /** @class */ (function () {
        function ThyBadgeModule() {
        }
        return ThyBadgeModule;
    }());
    ThyBadgeModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ThyBadgeComponent
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        ThyBadgeComponent
                    ]
                },] }
    ];
    ThyBadgeModule.ctorParameters = function () { return []; };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyBadgeComponent = ThyBadgeComponent;
    exports.ThyBadgeModule = ThyBadgeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-badge.umd.js.map

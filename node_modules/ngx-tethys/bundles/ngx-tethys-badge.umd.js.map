{"version":3,"file":"ngx-tethys-badge.umd.js","sources":["../../src/badge/badge.component.ts","../../src/badge/badge.module.ts","../../src/badge/ngx-tethys-badge.ts"],"names":["coerceBooleanProperty","Component","ElementRef","HostBinding","Input","NgModule","CommonModule"],"mappings":";;;;;;;;;;;;;;;;;;;IAIA,IAAM,cAAc,GAAG,CAAC,iBAAiB,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;AAChF,IAAA,IAAM,eAAe,GAAG,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,qBAAqB,CAAC,CAAC;AAC9G,IAAA,IAAM,cAAc,GAAG,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;AACxD;AAGK,QAuDD,2BAAoB,UAAsB;AAC9C,YADwB,eAAU,GAAV,UAAU,CAAY;AAAC,YApD3C,mBAAc,GAAG,EAAE,CAAC;AACxB,YACI,mBAAc,GAAG,EAAE,CAAC;AACxB,YAGY,iBAAY,GAAG,KAAK,CAAC;AACjC,YACY,sBAAiB,GAAG;AAChC,gBAAQ,iBAAiB,EAAE,IAAI;AAC/B,gBAAQ,eAAe,EAAE,KAAK;AAC9B,gBAAQ,kBAAkB,EAAE,KAAK;AACjC,gBAAQ,cAAc,EAAE,KAAK;AAC7B,gBAAQ,cAAc,EAAE,KAAK;AAC7B,gBAAQ,kBAAkB,EAAE,IAAI;AAChC,gBAAQ,mBAAmB,EAAE,KAAK;AAClC,gBAAQ,mBAAmB,EAAE,KAAK;AAClC,gBAAQ,qBAAqB,EAAE,KAAK;AACpC,gBAAQ,eAAe,EAAE,IAAI;AAC7B,gBAAQ,0BAA0B,EAAE,KAAK;AACzC,aAAK,CAAC;AACN,YACI,OAAE,GAYE;AACR,gBAAQ,KAAK,EAAE,EAAE;AACjB,gBAAQ,eAAe,EAAE,KAAK;AAC9B,gBAAQ,UAAU,EAAE,KAAK;AACzB,gBAAQ,eAAe,EAAE,KAAK;AAC9B,gBAAQ,GAAG,EAAE;AACb,oBAAY,EAAE,EAAE,KAAK;AACrB,oBAAY,KAAK,EAAE,IAAI;AACvB,iBAAS;AACT,gBAAQ,SAAS,EAAE,KAAK;AACxB,gBAAQ,KAAK,EAAE,KAAK;AACpB,gBAAQ,WAAW,EAAE,IAAI;AACzB,aAAK,CAAC;AACN,YAU8C,uBAAkB,GAAG,IAAI,CAAC;AACxE,YALQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;AAC3D,YAAQ,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,WAAW,CAAC;AACzE,SAAK;AACL,QAGI,sBACI,sCAAO;AAAI,iBADf,UACY,KAAa;AAC7B,gBAAQ,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;AACrD,gBAAQ,QAAQ,KAAK;AACrB,oBAAY,KAAK,QAAQ;AACzB,wBAAgB,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;AAClE,wBAAgB,MAAM;AACtB,oBAAY,KAAK,SAAS;AAC1B,wBAAgB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;AACnE,wBAAgB,MAAM;AACtB,oBAAY,KAAK,SAAS;AAC1B,wBAAgB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;AACnE,wBAAgB,MAAM;AACtB,oBAAY,KAAK,WAAW;AAC5B,wBAAgB,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,GAAG,IAAI,CAAC;AACrE,wBAAgB,MAAM;AACtB,oBAAY;AACZ,wBAAgB,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;AAClE,wBAAgB,MAAM;AACtB,iBAAS;AACT,gBAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,oBAAY,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACzC,iBAAS;AACT,aAAK;AAEL;AACkB;AACH,WAJV;AACL,QACI,sBACI,uCAAQ;AAAI,iBADhB,UACa,KAAa;AAC9B,gBAAQ,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;AAC9B,gBAAQ,IAAI,CAAC,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;AAClC,gBAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,oBAAY,IAAI,CAAC,0BAA0B,EAAE,CAAC;AAC9C,oBAAY,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACzC,iBAAS;AACT,aAAK;AAEL;AACkB;AACL,WAJR;AACL,QACI,sBACI,yCAAU;AAAI,iBADlB,UACe,KAAa;AAChC,gBAAQ,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;AAC9B,gBAAQ,IAAI,CAAC,EAAE,CAAC,eAAe,GAAG,IAAI,CAAC;AACvC,gBAAQ,IAAI,CAAC,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;AAClC,gBAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,oBAAY,IAAI,CAAC,0BAA0B,EAAE,CAAC;AAC9C,oBAAY,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACzC,iBAAS;AACT,aAAK;AAEL;AACkB;AACN,WAJP;AACL,QACI,sBACI,0CAAW;AAAI,iBADnB,UACgB,KAAa;AACjC,gBAAQ,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC;AAC9B,gBAAQ,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;AAClC,gBAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,oBAAY,IAAI,CAAC,0BAA0B,EAAE,CAAC;AAC9C,oBAAY,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACzC,iBAAS;AACT,aAAK;AAEL;AACkB;AACF,WAJX;AACL,QACI,sBACI,sCAAO;AAAI,iBADf,UACY,KAAa;AAC7B,gBAAQ,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;AACpD,gBAAQ,QAAQ,KAAK;AACrB,oBAAY,KAAK,IAAI;AACrB,wBAAgB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;AAC9D,wBAAgB,MAAM;AACtB,oBAAY,KAAK,IAAI;AACrB,wBAAgB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;AAC9D,wBAAgB,MAAM;AACtB,iBAAS;AACT,gBAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,oBAAY,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACzC,iBAAS;AACT,aAAK;AAEL;AACkB;AACJ,WAJT;AACL,QACI,sBACI,uCAAQ;AAAI,iBADhB,UACa,KAAc;AAC/B,gBAAQ,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;AACpD,gBAAQ,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAGA,0BAAqB,CAAC,KAAK,CAAC,CAAC;AAC/E,gBAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,oBAAY,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACzC,iBAAS;AACT,aAAK;AAEL;AACkB;AACP,WAJN;AACL,QACI,sBACI,0CAAW;AAAI,iBADnB,UACgB,KAAc;AAClC,gBAAQ,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;AACpD,gBAAQ,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,GAAGA,0BAAqB,CAAC,KAAK,CAAC,CAAC;AAClF,gBAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,oBAAY,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACzC,iBAAS;AACT,aAAK;AAEL;AACkB;AACP,WAJN;AACL,QACI,sBACI,0CAAW;AAAI,iBADnB,UACgB,KAAc;AAClC,gBAAQ,IAAI,CAAC,EAAE,CAAC,eAAe,GAAGA,0BAAqB,CAAC,KAAK,CAAC,CAAC;AAC/D,gBAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;AAC/B,oBAAY,IAAI,CAAC,0BAA0B,EAAE,CAAC;AAC9C,iBAAS;AACT,aAAK;AAEL;AACkB;AACP,WAJN;AACL,QACI,sBACI,2CAAY;AAAI,iBADpB,UACiB,KAAa;AAClC,gBAAQ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC/B,aAAK;AAEL;AACkB;AACb,WAJA;AACL,QACI,sBACI,iDAAkB;AAAI,iBAD1B,UACuB,KAAa;AACxC,gBAAQ,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;AACrC,gBAAQ,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;AACrD,aAAK;AAEL;AACc;AACD,WAJR;AACL,QACI,oCAAQ,GAAR;AACH,YAAO,IAAI,cAAc,GAAG,CAAC,CAAC;AAC/B,YAAQ,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAc;AAAI,gBACrD,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AACtD,oBAAgB,cAAc,EAAE,CAAC;AACjC,iBAAa;AACb,aAAS,CAAC,CAAC;AACX,YAAQ,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,cAAc,GAAG,CAAC,CAAC;AAC3C,YACQ,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACrC,YACQ,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE;AAChC,gBAAY,IAAI,CAAC,0BAA0B,EAAE,CAAC;AAC9C,aAAS;AACT,YACQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACjC,SAAK;AAEL,QAAY,iDAAqB,GAArB;AAAc,YAClB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;AAChE,YAAQ,IAAI,CAAC,sBAAsB,EAAE,CAAC;AACtC,YACQ,IAAM,gBAAgB,GAAG,EAAE,CAAC;AACpC,YAAQ,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAClD,gBAAY,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAC5D,oBAAgB,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE;AACjD,wBAAoB,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/C,qBAAiB;AACjB,iBAAa;AACb,aAAS;AACT,YAAQ,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzD,SAAK;AAEL,QAAY,sDAA0B,GAA1B;AAAc,YAClB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;AAC5C,YAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE;AAClF,gBAAY,IAAI,CAAC,cAAc,GAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,MAAG,CAAC;AAC1D,aAAS;AACT,YACQ,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE;AACxD,gBAAY,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG,KAAK,CAAC;AACxC,aAAS;AAAC,iBAAK;AACf,gBAAY,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC;AACvC,aAAS;AACT,SAAK;AAEL,QAAY,kDAAsB,GAAtB;AAAc,YAClB,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE;AACnF,gBAAY,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,IAAI,CAAC;AACtE,aAAS;AACT,SAAK;AAEL,QAAY,kDAAsB,GAAtB,UAAuB,UAAe;AAClD,YAAQ,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAClD,gBAAY,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAC5D,oBAAgB,IAAI,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AAC9C,wBAAoB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACxD,qBAAiB;AACjB,iBAAa;AACb,aAAS;AACT,SAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACL;AAAC;AACgC,SAvOxB;qDAJRC,rDAIS;KAJA,SAAC,dAKU,gBAXDC,eAAU;EAO1B,FAP6B;AAOrB,EAAE,sBAAsB,xBAPO;KAQvC,LANJ,qCAkEKC,gBAAW,SAAC,2BAA2B;AAAO,0BAE9CC,UAAK;AACR,2BAwBGA,UAAK;AACR,6BASGA,UAAK;AACR,8BAUGA,UAAK;cA5G+B,kBACxC,hCA4GC,0BASGA,UAAK;AACR,2BAeGA,UAAK;AACR,8BAQGA,UAAK;AACR,8BAQGA,UAAK;AACR,+BAOGA,UAAK;AACR,qCAIGA,UAAK;AACT;AAAO;AAAC;AACU,QChKX;AAEA;;;;;;;;;;;;;;;;;;;gDAFiB;AACzB;AAC6B,SAHrB;kDAZPC,aAAQ,/DAYA;AAGM;OAfL,PAeM,ICnBhB;qBDKI,YAAY,EAAE,nCCJlB;AAEA;AACO;QDEC,iBAAiB,sBACpB,/CCHG;kBDIJ,OAAO,EAAE,3BCHqB;AAA6C;ODIvEC,mBAAY,sBACf,hDCL2E;AAAmE;EDM/I,FCNgJ;GDMzI,EAAE,0BACL,iBAAiB,sBACpB,kBACJ,xFCTyJ","sourcesContent":["import { coerceBooleanProperty } from 'ngx-tethys/util';\n\nimport { Component, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nconst BadgeMutexType = ['thy-badge-count', 'thy-badge-dot', 'thy-badge-hollow'];\nconst BadgeMutexTheme = ['thy-badge-primary', 'thy-badge-warning', 'thy-badge-danger', 'thy-badge-secondary'];\nconst BadgeMutexSize = ['thy-badge-lg', 'thy-badge-sm'];\n\n@Component({\n    selector: 'thy-badge,[thyBadge]',\n    templateUrl: './badge.component.html'\n})\nexport class ThyBadgeComponent implements OnInit {\n    displayContent = '';\n\n    badgeClassName = '';\n\n    private nativeElement: any;\n\n    private _initialized = false;\n\n    private badgeClassNameMap = {\n        'thy-badge-count': true,\n        'thy-badge-dot': false,\n        'thy-badge-hollow': false,\n        'thy-badge-lg': false,\n        'thy-badge-sm': false,\n        'thy-badge-danger': true,\n        'thy-badge-primary': false,\n        'thy-badge-warning': false,\n        'thy-badge-secondary': false,\n        'thy-badge-sup': true,\n        'thy-badge-multiple-words': false\n    };\n\n    st: {\n        value: number | string | any;\n        isValueOfString: boolean;\n        isSetValue: boolean;\n        isValueKeepShow: boolean;\n        max: {\n            is: boolean;\n            value: number;\n        };\n        isElement: boolean;\n        isSup: boolean;\n        isShowBadge: boolean;\n    } = {\n        value: '',\n        isValueOfString: false,\n        isSetValue: false,\n        isValueKeepShow: false,\n        max: {\n            is: false,\n            value: null\n        },\n        isElement: false,\n        isSup: false,\n        isShowBadge: true\n    };\n\n    public textColor: string;\n\n    public backgroundColor: string;\n\n    constructor(private elementRef: ElementRef) {\n        this.nativeElement = this.elementRef.nativeElement;\n        this.st.isElement = this.nativeElement.localName === 'thy-badge';\n    }\n\n    @HostBinding('class.thy-badge-container') containerClassName = true;\n\n    @Input()\n    set thyType(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n        switch (value) {\n            case 'danger':\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n            case 'primary':\n                this.badgeClassNameMap['thy-badge-primary'] = true;\n                break;\n            case 'warning':\n                this.badgeClassNameMap['thy-badge-warning'] = true;\n                break;\n            case 'secondary':\n                this.badgeClassNameMap['thy-badge-secondary'] = true;\n                break;\n            default:\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyCount(value: number) {\n        this.st.value = value;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyContext(value: string) {\n        this.st.value = value;\n        this.st.isValueOfString = true;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyMaxCount(value: number) {\n        this.st.max.is = true;\n        this.st.max.value = value;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thySize(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexSize);\n        switch (value) {\n            case 'lg':\n                this.badgeClassNameMap['thy-badge-lg'] = true;\n                break;\n            case 'sm':\n                this.badgeClassNameMap['thy-badge-sm'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsDot(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-dot'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsHollow(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-hollow'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyKeepShow(value: boolean) {\n        this.st.isValueKeepShow = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n        }\n    }\n\n    @Input()\n    set thyTextColor(value: string) {\n        this.textColor = value;\n    }\n\n    @Input()\n    set thyBackgroundColor(value: string) {\n        this.backgroundColor = value;\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n    }\n\n    ngOnInit() {\n        let childNodeCount = 0;\n        this.nativeElement.childNodes.forEach((n: HTMLElement) => {\n            if (['#comment'].indexOf(n.nodeName) < 0) {\n                childNodeCount++;\n            }\n        });\n        this.st.isSup = childNodeCount > 0;\n\n        this.combineBadgeClassName();\n\n        if (this.st.isSetValue) {\n            this.combineBadgeDisplayContent();\n        }\n\n        this._initialized = true;\n    }\n\n    private combineBadgeClassName() {\n        this.badgeClassNameMap['thy-badge-sup'] = this.st.isSup;\n        this.explorationValueLength();\n\n        const _badgeClassNames = [];\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (this.badgeClassNameMap[key]) {\n                    _badgeClassNames.push(key);\n                }\n            }\n        }\n        this.badgeClassName = _badgeClassNames.join(' ');\n    }\n\n    private combineBadgeDisplayContent() {\n        this.displayContent = this.st.value;\n        if (this.st.value && this.st.max.is && this.st.value > this.st.max.value) {\n            this.displayContent = `${this.st.max.value}+`;\n        }\n\n        if (!this.st.value && !this.st.isValueKeepShow) {\n            this.st.isShowBadge = false;\n        } else {\n            this.st.isShowBadge = true;\n        }\n    }\n\n    private explorationValueLength() {\n        if (this.st.value && this.st.value.toString().length > 1 && this.st.isSup) {\n            this.badgeClassNameMap['thy-badge-multiple-words'] = true;\n        }\n    }\n\n    private resetBadgeClassNameMap(mutexArray: any) {\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (mutexArray.includes(key)) {\n                    this.badgeClassNameMap[key] = false;\n                }\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyBadgeComponent } from './badge.component';\n\n@NgModule({\n    declarations: [\n        ThyBadgeComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        ThyBadgeComponent\n    ]\n})\n\nexport class ThyBadgeModule {\n        constructor() { }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}
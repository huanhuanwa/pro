{"version":3,"sources":["../../src/progress/bar/progress-bar.component.ts","../../src/progress/progress.component.ts","../../src/progress/progress.module.ts"],"names":["THY_PROGRESS_COMPONENT","InjectionToken","ThyProgressBarComponent","updateHostClassService","elementRef","progress","this","isProgressBar","percent","color","initializeElement","nativeElement","Object","defineProperty","prototype","type","updateClass","value","recalculatePercentage","max","toFixed","Component","args","selector","template","encapsulation","ViewEncapsulation","None","providers","UpdateHostClassService","ElementRef","Inject","HostBinding","Input","ThyProgressComponent","bars","isStacked","isProgress","toArray","Array","isArray","thyMax","reduce","total","item","size","forEach","bar","changeDetection","ChangeDetectionStrategy","OnPush","provide","useExisting","ViewChildren","NgModule","declarations","imports","CommonModule","ThyTooltipModule","exports"],"mappings":"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","sourcesContent":["import { Component, Input, HostBinding, ElementRef, ViewEncapsulation, InjectionToken, Inject, Host, TemplateRef } from '@angular/core';\nimport { ThyProgressTypes } from '../interfaces';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\n\nexport interface ThyParentProgress {\n    max: number;\n    bars: ThyProgressBarComponent[];\n}\nexport const THY_PROGRESS_COMPONENT = new InjectionToken<ThyParentProgress>('THY_PROGRESS_COMPONENT');\n\n@Component({\n    selector: 'thy-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [UpdateHostClassService]\n})\nexport class ThyProgressBarComponent {\n    // private type: ProgressTypes;\n\n    private value: number;\n\n    @HostBinding(`class.progress-bar`) isProgressBar = true;\n\n    @HostBinding('style.width.%') percent = 0;\n\n    @HostBinding('style.background-color') color = '';\n\n    @Input() thyTips: string | TemplateRef<HTMLElement>;\n\n    @Input() set thyType(type: ThyProgressTypes) {\n        // this.type = type;\n        this.updateHostClassService.updateClass(type ? [`progress-bar-${type}`, `bg-${type}`] : []);\n    }\n\n    @Input() set thyValue(value: number) {\n        if (!value && value !== 0) {\n            return;\n        }\n        this.value = value;\n        this.recalculatePercentage();\n    }\n\n    @Input() set thyColor(color: string) {\n        this.color = color || '';\n    }\n\n    constructor(\n        private updateHostClassService: UpdateHostClassService,\n        elementRef: ElementRef,\n        @Inject(THY_PROGRESS_COMPONENT) private progress: ThyParentProgress\n    ) {\n        updateHostClassService.initializeElement(elementRef.nativeElement);\n    }\n\n    recalculatePercentage(): void {\n        this.percent = +((this.value / this.progress.max) * 100).toFixed(2);\n\n        // if (this.progress && this.progress.bars) {\n        //     const totalPercentage = this.progress.bars.reduce(function(total: number, bar): number {\n        //         return total + bar.percent;\n        //     }, 0);\n\n        //     if (totalPercentage > 100) {\n        //         this.percent -= totalPercentage - 100;\n        //     }\n        // }\n    }\n}\n","import {\n    Component,\n    Input,\n    HostBinding,\n    ChangeDetectionStrategy,\n    ElementRef,\n    ViewEncapsulation,\n    ViewChildren,\n    QueryList,\n    TemplateRef\n} from '@angular/core';\nimport { ThyProgressTypes, ThyStackedValue } from './interfaces';\nimport { UpdateHostClassService } from 'ngx-tethys/core';\nimport { THY_PROGRESS_COMPONENT, ThyProgressBarComponent, ThyParentProgress } from './bar/progress-bar.component';\n\n@Component({\n    selector: 'thy-progress',\n    templateUrl: './progress.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        UpdateHostClassService,\n        {\n            provide: THY_PROGRESS_COMPONENT,\n            useExisting: ThyProgressComponent\n        }\n    ]\n})\nexport class ThyProgressComponent implements ThyParentProgress {\n    value: number | ThyStackedValue[];\n\n    bars: ThyProgressBarComponent[] = [];\n\n    @HostBinding('attr.max') max = 100;\n\n    @HostBinding(`class.progress-stacked`) isStacked = false;\n\n    @HostBinding(`class.progress`) isProgress = true;\n\n    @ViewChildren(ThyProgressBarComponent)\n    set barsQueryList(value: QueryList<ThyProgressBarComponent>) {\n        this.bars = value.toArray();\n    }\n\n    @Input() thyType: ThyProgressTypes;\n\n    @Input() thyTips: string | TemplateRef<HTMLElement>;\n\n    @Input() set thyValue(value: number | ThyStackedValue[]) {\n        this.isStacked = Array.isArray(value);\n        this.value = value;\n\n        // 自动求和计算 max\n        if (this.isStacked) {\n            this.thyMax = (value as ThyStackedValue[]).reduce((total, item) => {\n                return total + item.value;\n            }, 0);\n        }\n    }\n\n    @Input() set thySize(size: string) {\n        this.updateHostClassService.updateClass(size ? [`progress-${size}`] : []);\n    }\n\n    @Input() set thyMax(max: number) {\n        this.max = max;\n        this.bars.forEach(bar => {\n            bar.recalculatePercentage();\n        });\n    }\n\n    constructor(private updateHostClassService: UpdateHostClassService, elementRef: ElementRef) {\n        this.updateHostClassService.initializeElement(elementRef);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThyTooltipModule } from 'ngx-tethys/tooltip';\nimport { ThyProgressBarComponent } from './bar/progress-bar.component';\nimport { ThyProgressComponent } from './progress.component';\n\n@NgModule({\n    declarations: [ThyProgressComponent, ThyProgressBarComponent],\n    imports: [CommonModule, ThyTooltipModule],\n    exports: [ThyProgressComponent]\n})\nexport class ThyProgressModule {}\n"]}
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/forms'), require('ngx-tethys/util'), require('ngx-tethys/store'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/time-picker', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/forms', 'ngx-tethys/util', 'ngx-tethys/store', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys']['time-picker'] = {}), global.ng.core, global.ng.forms, global['ngx-tethys'].util, global['ngx-tethys'].store, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, forms, util, store, common) { 
function ThyTimePickerComponent_td_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0\u00A0\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_7_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵelementStart(1, "a", 1);
    ɵngcc0.ɵɵlistener("click", function ThyTimePickerComponent_td_7_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.changeMinutes(ctx_r18.minuteStep); });
    ɵngcc0.ɵɵelement(2, "span", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r1.canIncrementMinutes || !ctx_r1.isEditable);
} }
function ThyTimePickerComponent_td_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_9_Template(rf, ctx) { if (rf & 1) {
    var _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵelementStart(1, "a", 1);
    ɵngcc0.ɵɵlistener("click", function ThyTimePickerComponent_td_9_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r21); var ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.changeSeconds(ctx_r20.secondsStep); });
    ɵngcc0.ɵɵelement(2, "span", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r3.canIncrementSeconds || !ctx_r3.isEditable);
} }
function ThyTimePickerComponent_td_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0\u00A0\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "td");
} }
function ThyTimePickerComponent_td_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0:\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_16_Template(rf, ctx) { if (rf & 1) {
    var _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 4);
    ɵngcc0.ɵɵelementStart(1, "input", 5);
    ɵngcc0.ɵɵlistener("wheel", function ThyTimePickerComponent_td_16_Template_input_wheel_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); var ctx_r22 = ɵngcc0.ɵɵnextContext(); ctx_r22.prevDef($event); return ctx_r22.changeMinutes(ctx_r22.minuteStep * ctx_r22.wheelSign($event), "wheel"); })("keydown.ArrowUp", function ThyTimePickerComponent_td_16_Template_input_keydown_ArrowUp_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); var ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.changeMinutes(ctx_r24.minuteStep, "key"); })("keydown.ArrowDown", function ThyTimePickerComponent_td_16_Template_input_keydown_ArrowDown_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); var ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.changeMinutes(-ctx_r25.minuteStep, "key"); })("change", function ThyTimePickerComponent_td_16_Template_input_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); var ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.updateMinutes($event.target.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("has-error", ctx_r7.invalidMinutes);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("is-invalid", ctx_r7.invalidMinutes);
    ɵngcc0.ɵɵproperty("placeholder", ctx_r7.minutesPlaceholder)("readonly", ctx_r7.readonlyInput)("disabled", ctx_r7.disabled)("value", ctx_r7.minutes);
} }
function ThyTimePickerComponent_td_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0:\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_18_Template(rf, ctx) { if (rf & 1) {
    var _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 4);
    ɵngcc0.ɵɵelementStart(1, "input", 5);
    ɵngcc0.ɵɵlistener("wheel", function ThyTimePickerComponent_td_18_Template_input_wheel_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r27 = ɵngcc0.ɵɵnextContext(); ctx_r27.prevDef($event); return ctx_r27.changeSeconds(ctx_r27.secondsStep * ctx_r27.wheelSign($event), "wheel"); })("keydown.ArrowUp", function ThyTimePickerComponent_td_18_Template_input_keydown_ArrowUp_1_listener() { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.changeSeconds(ctx_r29.secondsStep, "key"); })("keydown.ArrowDown", function ThyTimePickerComponent_td_18_Template_input_keydown_ArrowDown_1_listener() { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.changeSeconds(-ctx_r30.secondsStep, "key"); })("change", function ThyTimePickerComponent_td_18_Template_input_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.updateSeconds($event.target.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("has-error", ctx_r9.invalidSeconds);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("is-invalid", ctx_r9.invalidSeconds);
    ɵngcc0.ɵɵproperty("placeholder", ctx_r9.secondsPlaceholder)("readonly", ctx_r9.readonlyInput)("disabled", ctx_r9.disabled)("value", ctx_r9.seconds);
} }
function ThyTimePickerComponent_td_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0\u00A0\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_20_Template(rf, ctx) { if (rf & 1) {
    var _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵelementStart(1, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ThyTimePickerComponent_td_20_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r33); var ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.toggleMeridian(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r11.isEditable || !ctx_r11.canToggleMeridian);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r11.isEditable || !ctx_r11.canToggleMeridian);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r11.meridian, " ");
} }
function ThyTimePickerComponent_td_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0\u00A0\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_26_Template(rf, ctx) { if (rf & 1) {
    var _r35 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵelementStart(1, "a", 1);
    ɵngcc0.ɵɵlistener("click", function ThyTimePickerComponent_td_26_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r35); var ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.changeMinutes(-ctx_r34.minuteStep); });
    ɵngcc0.ɵɵelement(2, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r13 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r13.canDecrementMinutes || !ctx_r13.isEditable);
} }
function ThyTimePickerComponent_td_27_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_28_Template(rf, ctx) { if (rf & 1) {
    var _r37 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵelementStart(1, "a", 1);
    ɵngcc0.ɵɵlistener("click", function ThyTimePickerComponent_td_28_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r37); var ctx_r36 = ɵngcc0.ɵɵnextContext(); return ctx_r36.changeSeconds(-ctx_r36.secondsStep); });
    ɵngcc0.ɵɵelement(2, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r15 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r15.canDecrementSeconds || !ctx_r15.isEditable);
} }
function ThyTimePickerComponent_td_29_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1, "\u00A0\u00A0\u00A0");
    ɵngcc0.ɵɵelementEnd();
} }
function ThyTimePickerComponent_td_30_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "td");
} }
'use strict';

    var hoursPerDay = 24;
    var hoursPerDayHalf = 12;
    var minutesPerHour = 60;
    var secondsPerMinute = 60;
    function isValidDate(value) {
        if (!value) {
            return false;
        }
        if (value instanceof Date && isNaN(value.getHours())) {
            return false;
        }
        if (typeof value === 'string') {
            return isValidDate(new Date(value));
        }
        return true;
    }
    function isValidLimit(controls, newDate) {
        if (controls.min && newDate < controls.min) {
            return false;
        }
        if (controls.max && newDate > controls.max) {
            return false;
        }
        return true;
    }
    function parseHours(value, isPM) {
        if (isPM === void 0) { isPM = false; }
        var hour = util.coerceNumberValue(value);
        if (isNaN(hour) || hour < 0 || hour > (isPM ? hoursPerDayHalf : hoursPerDay)) {
            return NaN;
        }
        return hour;
    }
    function parseMinutes(value) {
        var minute = util.coerceNumberValue(value);
        if (isNaN(minute) || minute < 0 || minute > minutesPerHour) {
            return NaN;
        }
        return minute;
    }
    function parseSeconds(value) {
        var seconds = util.coerceNumberValue(value);
        if (isNaN(seconds) || seconds < 0 || seconds > secondsPerMinute) {
            return NaN;
        }
        return seconds;
    }
    function parseTime(value) {
        if (typeof value === 'string') {
            return new Date(value);
        }
        return value;
    }
    function changeTime(value, diff) {
        if (!value) {
            return changeTime(createDate(new Date(), 0, 0, 0), diff);
        }
        var hour = value.getHours();
        var minutes = value.getMinutes();
        var seconds = value.getSeconds();
        if (diff.hour) {
            hour = (hour + util.coerceNumberValue(diff.hour)) % hoursPerDay;
            if (hour < 0) {
                hour += hoursPerDay;
            }
        }
        if (diff.minute) {
            minutes = minutes + util.coerceNumberValue(diff.minute);
        }
        if (diff.seconds) {
            seconds = seconds + util.coerceNumberValue(diff.seconds);
        }
        return createDate(value, hour, minutes, seconds);
    }
    function setTime(value, opts) {
        var hour = parseHours(opts.hour);
        var minute = parseMinutes(opts.minute);
        var seconds = parseSeconds(opts.seconds) || 0;
        if (opts.isPM && hour !== 12) {
            hour += hoursPerDayHalf;
        }
        if (!value) {
            if (!isNaN(hour) && !isNaN(minute)) {
                return createDate(new Date(), hour, minute, seconds);
            }
            return value;
        }
        if (isNaN(hour) || isNaN(minute)) {
            return value;
        }
        return createDate(value, hour, minute, seconds);
    }
    function createDate(value, hours, minutes, seconds) {
        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), hours, minutes, seconds, value.getMilliseconds());
    }
    function padNumber(value) {
        var _value = value.toString();
        if (_value.length > 1) {
            return _value;
        }
        return "0" + _value;
    }
    function isHourInputValid(hours, isPM) {
        return !isNaN(parseHours(hours, isPM));
    }
    function isMinuteInputValid(minutes) {
        return !isNaN(parseMinutes(minutes));
    }
    function isSecondInputValid(seconds) {
        return !isNaN(parseSeconds(seconds));
    }
    function isInputLimitValid(diff, max, min) {
        var newDate = setTime(new Date(), diff);
        if (max && newDate > max) {
            return false;
        }
        if (min && newDate < min) {
            return false;
        }
        return true;
    }
    function isInputValid(hours, minutes, seconds, isPM) {
        if (minutes === void 0) { minutes = '0'; }
        if (seconds === void 0) { seconds = '0'; }
        return isHourInputValid(hours, isPM) && isMinuteInputValid(minutes) && isSecondInputValid(seconds);
    }

    function canChangeValue(state, event) {
        if (state.readonlyInput || state.disabled) {
            return false;
        }
        if (event) {
            if (event.source === 'wheel' && !state.mousewheel) {
                return false;
            }
            if (event.source === 'key' && !state.arrowKeys) {
                return false;
            }
        }
        return true;
    }
    function canChangeHours(event, controls) {
        if (!event.step) {
            return false;
        }
        if (event.step > 0 && !controls.canIncrementHours) {
            return false;
        }
        if (event.step < 0 && !controls.canDecrementHours) {
            return false;
        }
        return true;
    }
    function canChangeMinutes(event, controls) {
        if (!event.step) {
            return false;
        }
        if (event.step > 0 && !controls.canIncrementMinutes) {
            return false;
        }
        if (event.step < 0 && !controls.canDecrementMinutes) {
            return false;
        }
        return true;
    }
    function canChangeSeconds(event, controls) {
        if (!event.step) {
            return false;
        }
        if (event.step > 0 && !controls.canIncrementSeconds) {
            return false;
        }
        if (event.step < 0 && !controls.canDecrementSeconds) {
            return false;
        }
        return true;
    }
    function getControlsValue(state) {
        var hourStep = state.hourStep, minuteStep = state.minuteStep, secondsStep = state.secondsStep, readonlyInput = state.readonlyInput, disabled = state.disabled, mousewheel = state.mousewheel, arrowKeys = state.arrowKeys, showSpinners = state.showSpinners, showMeridian = state.showMeridian, showSeconds = state.showSeconds, meridians = state.meridians, min = state.min, max = state.max;
        return {
            hourStep: hourStep,
            minuteStep: minuteStep,
            secondsStep: secondsStep,
            readonlyInput: readonlyInput,
            disabled: disabled,
            mousewheel: mousewheel,
            arrowKeys: arrowKeys,
            showSpinners: showSpinners,
            showMeridian: showMeridian,
            showSeconds: showSeconds,
            meridians: meridians,
            min: min,
            max: max
        };
    }
    function timePickerControls(value, state) {
        var hoursPerDayHalf = 12;
        var min = state.min, max = state.max, hourStep = state.hourStep, minuteStep = state.minuteStep, secondsStep = state.secondsStep, showSeconds = state.showSeconds;
        var res = {
            canIncrementHours: true,
            canIncrementMinutes: true,
            canIncrementSeconds: true,
            canDecrementHours: true,
            canDecrementMinutes: true,
            canDecrementSeconds: true,
            canToggleMeridian: true
        };
        if (!value) {
            return res;
        }
        // compare dates
        if (max) {
            var _newHour = changeTime(value, { hour: hourStep });
            res.canIncrementHours = max > _newHour;
            if (!res.canIncrementHours) {
                var _newMinutes = changeTime(value, { minute: minuteStep });
                res.canIncrementMinutes = showSeconds ? max > _newMinutes : max >= _newMinutes;
            }
            if (!res.canIncrementMinutes) {
                var _newSeconds = changeTime(value, { seconds: secondsStep });
                res.canIncrementSeconds = max >= _newSeconds;
            }
            if (value.getHours() < hoursPerDayHalf) {
                res.canToggleMeridian = changeTime(value, { hour: hoursPerDayHalf }) < max;
            }
        }
        if (min) {
            var _newHour = changeTime(value, { hour: -hourStep });
            res.canDecrementHours = min < _newHour;
            if (!res.canDecrementHours) {
                var _newMinutes = changeTime(value, { minute: -minuteStep });
                res.canDecrementMinutes = showSeconds ? min < _newMinutes : min <= _newMinutes;
            }
            if (!res.canDecrementMinutes) {
                var _newSeconds = changeTime(value, { seconds: -secondsStep });
                res.canDecrementSeconds = min <= _newSeconds;
            }
            if (value.getHours() >= hoursPerDayHalf) {
                res.canToggleMeridian = changeTime(value, { hour: -hoursPerDayHalf }) > min;
            }
        }
        return res;
    }

    var TimePickerConfig = /** @class */ (function () {
        function TimePickerConfig() {
            /** hours change step */
            this.hourStep = 1;
            /** hours change step */
            this.minuteStep = 5;
            /** seconds changes step */
            this.secondsStep = 10;
            /** if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM */
            this.showMeridian = true;
            /** meridian labels based on locale */
            this.meridians = ['AM', 'PM'];
            /** if true hours and minutes fields will be readonly */
            this.readonlyInput = false;
            /** if true hours and minutes fields will be disabled */
            this.disabled = false;
            /** if true scroll inside hours and minutes inputs will change time */
            this.mousewheel = true;
            /** if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard */
            this.arrowKeys = true;
            /** if true spinner arrows above and below the inputs will be shown */
            this.showSpinners = true;
            /** show seconds in timePicker */
            this.showSeconds = false;
            /** show minutes in timePicker */
            this.showMinutes = true;
            /** placeholder for hours field in timePicker */
            this.hoursPlaceholder = 'HH';
            /** placeholder for minutes field in timePicker */
            this.minutesPlaceholder = 'MM';
            /** placeholder for seconds field in timePicker */
            this.secondsPlaceholder = 'SS';
        }
TimePickerConfig.ɵfac = function TimePickerConfig_Factory(t) { return new (t || TimePickerConfig)(); };
TimePickerConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimePickerConfig, factory: function (t) { return TimePickerConfig.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimePickerConfig, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return TimePickerConfig;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var initialState = {
        value: null,
        config: new TimePickerConfig(),
        controls: {
            canIncrementHours: true,
            canIncrementMinutes: true,
            canIncrementSeconds: true,
            canDecrementHours: true,
            canDecrementMinutes: true,
            canDecrementSeconds: true,
            canToggleMeridian: true
        }
    };
    var ThyTimePickerStore = /** @class */ (function (_super) {
        __extends(ThyTimePickerStore, _super);
        function ThyTimePickerStore() {
            return _super.call(this, initialState) || this;
        }
        ThyTimePickerStore.prototype.writeValue = function (value) {
            this.setState({ value: value });
        };
        ThyTimePickerStore.prototype.changeHours = function (event) {
            var state = this.snapshot;
            if (!canChangeValue(state.config, event) || !canChangeHours(event, state.controls)) {
                return state;
            }
            var _newTime = changeTime(state.value, { hour: event.step });
            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {
                return state;
            }
            this.setState({ value: _newTime });
        };
        ThyTimePickerStore.prototype.changeMinutes = function (event) {
            var state = this.snapshot;
            if (!canChangeValue(state.config, event) || !canChangeMinutes(event, state.controls)) {
                return state;
            }
            var _newTime = changeTime(state.value, { minute: event.step });
            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {
                return state;
            }
            this.setState({ value: _newTime });
        };
        ThyTimePickerStore.prototype.changeSeconds = function (event) {
            var state = this.snapshot;
            if (!canChangeValue(state.config, event) || !canChangeSeconds(event, state.controls)) {
                return state;
            }
            var _newTime = changeTime(state.value, {
                seconds: event.step
            });
            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {
                return state;
            }
            this.setState({ value: _newTime });
        };
        ThyTimePickerStore.prototype.setTime = function (value) {
            var state = this.snapshot;
            if (!canChangeValue(state.config)) {
                return state;
            }
            var _newTime = setTime(state.value, value);
            this.setState({ value: _newTime });
        };
        ThyTimePickerStore.prototype.updateControls = function (value) {
            var state = this.snapshot;
            var _newControlsState = timePickerControls(state.value, value);
            var _newState = {
                value: state.value,
                config: value,
                controls: _newControlsState
            };
            if (state.config.showMeridian !== _newState.config.showMeridian) {
                if (state.value) {
                    _newState.value = new Date(state.value);
                }
            }
            this.setState(_newState);
        };
ThyTimePickerStore.ɵfac = function ThyTimePickerStore_Factory(t) { return new (t || ThyTimePickerStore)(); };
ThyTimePickerStore.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ThyTimePickerStore, factory: function (t) { return ThyTimePickerStore.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTimePickerStore, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return ThyTimePickerStore;
    }(store.Store));
    ThyTimePickerStore.ctorParameters = function () { return []; };
    __decorate([
        store.Action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Date]),
        __metadata("design:returntype", void 0)
    ], ThyTimePickerStore.prototype, "writeValue", null);
    __decorate([
        store.Action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ThyTimePickerStore.prototype, "changeHours", null);
    __decorate([
        store.Action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ThyTimePickerStore.prototype, "changeMinutes", null);
    __decorate([
        store.Action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ThyTimePickerStore.prototype, "changeSeconds", null);
    __decorate([
        store.Action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ThyTimePickerStore.prototype, "setTime", null);
    __decorate([
        store.Action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ThyTimePickerStore.prototype, "updateControls", null);

    var TIMEPICKER_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        /* tslint:disable-next-line: no-use-before-declare */
        useExisting: core.forwardRef(function () { return ThyTimePickerComponent; }),
        multi: true
    };
    var ThyTimePickerComponent = /** @class */ (function () {
        function ThyTimePickerComponent(_config, _cd, _store) {
            var _this = this;
            this._cd = _cd;
            this._store = _store;
            /** emits true if value is a valid date */
            this.isValid = new core.EventEmitter();
            // min/max validation for input fields
            this.invalidHours = false;
            this.invalidMinutes = false;
            this.invalidSeconds = false;
            // control value accessor methods
            this.onChange = Function.prototype;
            this.onTouched = Function.prototype;
            Object.assign(this, _config);
            this.timePickerSub = _store
                .select(function (state) { return state.value; })
                .subscribe(function (value) {
                // update UI values if date changed
                _this._renderTime(value);
                _this.onChange(value);
                _this._store.updateControls(getControlsValue(_this));
            });
            _store
                .select(function (state) { return state.controls; })
                .subscribe(function (controlsState) {
                _this.isValid.emit(isInputValid(_this.hours, _this.minutes, _this.seconds, _this.isPM()));
                Object.assign(_this, controlsState);
                _cd.markForCheck();
            });
        }
        Object.defineProperty(ThyTimePickerComponent.prototype, "isEditable", {
            get: function () {
                return !(this.readonlyInput || this.disabled);
            },
            enumerable: false,
            configurable: true
        });
        ThyTimePickerComponent.prototype.resetValidation = function () {
            this.invalidHours = false;
            this.invalidMinutes = false;
            this.invalidSeconds = false;
        };
        ThyTimePickerComponent.prototype.isPM = function () {
            return this.showMeridian && this.meridian === this.meridians[1];
        };
        ThyTimePickerComponent.prototype.prevDef = function ($event) {
            $event.preventDefault();
        };
        ThyTimePickerComponent.prototype.wheelSign = function ($event) {
            return Math.sign($event.deltaY) * -1;
        };
        ThyTimePickerComponent.prototype.ngOnChanges = function (changes) {
            this._store.updateControls(getControlsValue(this));
        };
        ThyTimePickerComponent.prototype.changeHours = function (step, source) {
            if (source === void 0) { source = ''; }
            this.resetValidation();
            this._store.changeHours({ step: step, source: source });
        };
        ThyTimePickerComponent.prototype.changeMinutes = function (step, source) {
            if (source === void 0) { source = ''; }
            this.resetValidation();
            this._store.changeMinutes({ step: step, source: source });
        };
        ThyTimePickerComponent.prototype.changeSeconds = function (step, source) {
            if (source === void 0) { source = ''; }
            this.resetValidation();
            this._store.changeSeconds({ step: step, source: source });
        };
        ThyTimePickerComponent.prototype.updateHours = function (hours) {
            this.resetValidation();
            this.hours = hours;
            var isValid = isHourInputValid(this.hours, this.isPM()) && this.isValidLimit();
            if (!isValid) {
                this.invalidHours = true;
                this.isValid.emit(false);
                this.onChange(null);
                return;
            }
            this._updateTime();
        };
        ThyTimePickerComponent.prototype.updateMinutes = function (minutes) {
            this.resetValidation();
            this.minutes = minutes;
            var isValid = isMinuteInputValid(this.minutes) && this.isValidLimit();
            if (!isValid) {
                this.invalidMinutes = true;
                this.isValid.emit(false);
                this.onChange(null);
                return;
            }
            this._updateTime();
        };
        ThyTimePickerComponent.prototype.updateSeconds = function (seconds) {
            this.resetValidation();
            this.seconds = seconds;
            var isValid = isSecondInputValid(this.seconds) && this.isValidLimit();
            if (!isValid) {
                this.invalidSeconds = true;
                this.isValid.emit(false);
                this.onChange(null);
                return;
            }
            this._updateTime();
        };
        ThyTimePickerComponent.prototype.isValidLimit = function () {
            return isInputLimitValid({
                hour: this.hours,
                minute: this.minutes,
                seconds: this.seconds,
                isPM: this.isPM()
            }, this.max, this.min);
        };
        ThyTimePickerComponent.prototype._updateTime = function () {
            var _seconds = this.showSeconds ? this.seconds : void 0;
            var _minutes = this.showMinutes ? this.minutes : void 0;
            if (!isInputValid(this.hours, _minutes, _seconds, this.isPM())) {
                this.isValid.emit(false);
                this.onChange(null);
                return;
            }
            this._store.setTime({
                hour: this.hours,
                minute: this.minutes,
                seconds: this.seconds,
                isPM: this.isPM()
            });
        };
        ThyTimePickerComponent.prototype.toggleMeridian = function () {
            if (!this.showMeridian || !this.isEditable) {
                return;
            }
            var _hoursPerDayHalf = 12;
            this._store.changeHours({
                step: _hoursPerDayHalf,
                source: ''
            });
        };
        ThyTimePickerComponent.prototype.writeValue = function (obj) {
            if (isValidDate(obj)) {
                this._store.writeValue(parseTime(obj));
            }
            else if (obj == null) {
                this._store.writeValue(null);
            }
        };
        ThyTimePickerComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        ThyTimePickerComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        ThyTimePickerComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this._cd.markForCheck();
        };
        ThyTimePickerComponent.prototype.ngOnDestroy = function () {
            this.timePickerSub.unsubscribe();
        };
        ThyTimePickerComponent.prototype._renderTime = function (value) {
            if (!isValidDate(value)) {
                this.hours = '';
                this.minutes = '';
                this.seconds = '';
                this.meridian = this.meridians[0];
                return;
            }
            var _value = parseTime(value);
            var _hoursPerDayHalf = 12;
            var _hours = _value.getHours();
            if (this.showMeridian) {
                this.meridian = this.meridians[_hours >= _hoursPerDayHalf ? 1 : 0];
                _hours = _hours % _hoursPerDayHalf;
                // should be 12 PM, not 00 PM
                if (_hours === 0) {
                    _hours = _hoursPerDayHalf;
                }
            }
            this.hours = padNumber(_hours);
            this.minutes = padNumber(_value.getMinutes());
            this.seconds = padNumber(_value.getUTCSeconds());
        };
ThyTimePickerComponent.ɵfac = function ThyTimePickerComponent_Factory(t) { return new (t || ThyTimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(TimePickerConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ThyTimePickerStore)); };
ThyTimePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTimePickerComponent, selectors: [["thy-time-picker"]], inputs: { disabled: "disabled", hourStep: "hourStep", minuteStep: "minuteStep", secondsStep: "secondsStep", readonlyInput: "readonlyInput", mousewheel: "mousewheel", arrowKeys: "arrowKeys", showSpinners: "showSpinners", showMeridian: "showMeridian", showMinutes: "showMinutes", showSeconds: "showSeconds", meridians: "meridians", min: "min", max: "max", hoursPlaceholder: "hoursPlaceholder", minutesPlaceholder: "minutesPlaceholder", secondsPlaceholder: "secondsPlaceholder" }, outputs: { isValid: "isValid" }, features: [ɵngcc0.ɵɵProvidersFeature([TIMEPICKER_CONTROL_VALUE_ACCESSOR, ThyTimePickerStore]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 31, vars: 32, consts: [[1, "text-center", 3, "hidden"], [1, "btn", "btn-link", 3, "click"], [1, "thy-chevron", "thy-chevron-up"], [4, "ngIf"], [1, "form-group"], ["type", "text", "maxlength", "2", 1, "form-control", "text-center", "thy-time-picker-field", 3, "placeholder", "readonly", "disabled", "value", "wheel", "keydown.ArrowUp", "keydown.ArrowDown", "change"], ["class", "form-group", 3, "has-error", 4, "ngIf"], [1, "thy-chevron", "thy-chevron-down"], ["type", "button", 1, "btn", "btn-default", "text-center", 3, "disabled", "click"]], template: function ThyTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table");
        ɵngcc0.ɵɵelementStart(1, "tbody");
        ɵngcc0.ɵɵelementStart(2, "tr", 0);
        ɵngcc0.ɵɵelementStart(3, "td");
        ɵngcc0.ɵɵelementStart(4, "a", 1);
        ɵngcc0.ɵɵlistener("click", function ThyTimePickerComponent_Template_a_click_4_listener() { return ctx.changeHours(ctx.hourStep); });
        ɵngcc0.ɵɵelement(5, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, ThyTimePickerComponent_td_6_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(7, ThyTimePickerComponent_td_7_Template, 3, 2, "td", 3);
        ɵngcc0.ɵɵtemplate(8, ThyTimePickerComponent_td_8_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(9, ThyTimePickerComponent_td_9_Template, 3, 2, "td", 3);
        ɵngcc0.ɵɵtemplate(10, ThyTimePickerComponent_td_10_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(11, ThyTimePickerComponent_td_11_Template, 1, 0, "td", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "tr");
        ɵngcc0.ɵɵelementStart(13, "td", 4);
        ɵngcc0.ɵɵelementStart(14, "input", 5);
        ɵngcc0.ɵɵlistener("wheel", function ThyTimePickerComponent_Template_input_wheel_14_listener($event) { ctx.prevDef($event); return ctx.changeHours(ctx.hourStep * ctx.wheelSign($event), "wheel"); })("keydown.ArrowUp", function ThyTimePickerComponent_Template_input_keydown_ArrowUp_14_listener() { return ctx.changeHours(ctx.hourStep, "key"); })("keydown.ArrowDown", function ThyTimePickerComponent_Template_input_keydown_ArrowDown_14_listener() { return ctx.changeHours(-ctx.hourStep, "key"); })("change", function ThyTimePickerComponent_Template_input_change_14_listener($event) { return ctx.updateHours($event.target.value); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, ThyTimePickerComponent_td_15_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(16, ThyTimePickerComponent_td_16_Template, 2, 8, "td", 6);
        ɵngcc0.ɵɵtemplate(17, ThyTimePickerComponent_td_17_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(18, ThyTimePickerComponent_td_18_Template, 2, 8, "td", 6);
        ɵngcc0.ɵɵtemplate(19, ThyTimePickerComponent_td_19_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(20, ThyTimePickerComponent_td_20_Template, 3, 4, "td", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "tr", 0);
        ɵngcc0.ɵɵelementStart(22, "td");
        ɵngcc0.ɵɵelementStart(23, "a", 1);
        ɵngcc0.ɵɵlistener("click", function ThyTimePickerComponent_Template_a_click_23_listener() { return ctx.changeHours(-ctx.hourStep); });
        ɵngcc0.ɵɵelement(24, "span", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(25, ThyTimePickerComponent_td_25_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(26, ThyTimePickerComponent_td_26_Template, 3, 2, "td", 3);
        ɵngcc0.ɵɵtemplate(27, ThyTimePickerComponent_td_27_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(28, ThyTimePickerComponent_td_28_Template, 3, 2, "td", 3);
        ɵngcc0.ɵɵtemplate(29, ThyTimePickerComponent_td_29_Template, 2, 0, "td", 3);
        ɵngcc0.ɵɵtemplate(30, ThyTimePickerComponent_td_30_Template, 1, 0, "td", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hidden", !ctx.showSpinners);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("disabled", !ctx.canIncrementHours || !ctx.isEditable);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMinutes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMinutes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSeconds);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSeconds);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMeridian);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMeridian);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("has-error", ctx.invalidHours);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.invalidHours);
        ɵngcc0.ɵɵproperty("placeholder", ctx.hoursPlaceholder)("readonly", ctx.readonlyInput)("disabled", ctx.disabled)("value", ctx.hours);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMinutes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMinutes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSeconds);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSeconds);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMeridian);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMeridian);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", !ctx.showSpinners);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("disabled", !ctx.canDecrementHours || !ctx.isEditable);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMinutes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMinutes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSeconds);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSeconds);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMeridian);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMeridian);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTimePickerComponent, [{
        type: core.Component,
        args: [{
                selector: 'thy-time-picker',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [TIMEPICKER_CONTROL_VALUE_ACCESSOR, ThyTimePickerStore],
                template: "<table>\n  <tbody>\n    <tr class=\"text-center\" [hidden]=\"!showSpinners\">\n      <!-- increment hours button-->\n      <td>\n        <a class=\"btn btn-link\" [class.disabled]=\"!canIncrementHours || !isEditable\" (click)=\"changeHours(hourStep)\"\n          ><span class=\"thy-chevron thy-chevron-up\"></span\n        ></a>\n      </td>\n      <!-- divider -->\n      <td *ngIf=\"showMinutes\">&nbsp;&nbsp;&nbsp;</td>\n      <!-- increment minutes button -->\n      <td *ngIf=\"showMinutes\">\n        <a\n          class=\"btn btn-link\"\n          [class.disabled]=\"!canIncrementMinutes || !isEditable\"\n          (click)=\"changeMinutes(minuteStep)\"\n          ><span class=\"thy-chevron thy-chevron-up\"></span\n        ></a>\n      </td>\n      <!-- divider -->\n      <td *ngIf=\"showSeconds\">&nbsp;</td>\n      <!-- increment seconds button -->\n      <td *ngIf=\"showSeconds\">\n        <a\n          class=\"btn btn-link\"\n          [class.disabled]=\"!canIncrementSeconds || !isEditable\"\n          (click)=\"changeSeconds(secondsStep)\"\n        >\n          <span class=\"thy-chevron thy-chevron-up\"></span>\n        </a>\n      </td>\n      <!-- space between -->\n      <td *ngIf=\"showMeridian\">&nbsp;&nbsp;&nbsp;</td>\n      <!-- meridian placeholder-->\n      <td *ngIf=\"showMeridian\"></td>\n    </tr>\n    <tr>\n      <!-- hours -->\n      <td class=\"form-group\" [class.has-error]=\"invalidHours\">\n        <input\n          type=\"text\"\n          [class.is-invalid]=\"invalidHours\"\n          class=\"form-control text-center thy-time-picker-field\"\n          [placeholder]=\"hoursPlaceholder\"\n          maxlength=\"2\"\n          [readonly]=\"readonlyInput\"\n          [disabled]=\"disabled\"\n          [value]=\"hours\"\n          (wheel)=\"prevDef($event); changeHours(hourStep * wheelSign($event), 'wheel')\"\n          (keydown.ArrowUp)=\"changeHours(hourStep, 'key')\"\n          (keydown.ArrowDown)=\"changeHours(-hourStep, 'key')\"\n          (change)=\"updateHours($event.target.value)\"\n        />\n      </td>\n\n      <!-- divider -->\n      <td *ngIf=\"showMinutes\">&nbsp;:&nbsp;</td>\n      <!-- minutes -->\n      <td class=\"form-group\" *ngIf=\"showMinutes\" [class.has-error]=\"invalidMinutes\">\n        <input\n          type=\"text\"\n          [class.is-invalid]=\"invalidMinutes\"\n          class=\"form-control text-center thy-time-picker-field\"\n          [placeholder]=\"minutesPlaceholder\"\n          maxlength=\"2\"\n          [readonly]=\"readonlyInput\"\n          [disabled]=\"disabled\"\n          [value]=\"minutes\"\n          (wheel)=\"prevDef($event); changeMinutes(minuteStep * wheelSign($event), 'wheel')\"\n          (keydown.ArrowUp)=\"changeMinutes(minuteStep, 'key')\"\n          (keydown.ArrowDown)=\"changeMinutes(-minuteStep, 'key')\"\n          (change)=\"updateMinutes($event.target.value)\"\n        />\n      </td>\n      <!-- divider -->\n      <td *ngIf=\"showSeconds\">&nbsp;:&nbsp;</td>\n      <!-- seconds -->\n      <td class=\"form-group\" *ngIf=\"showSeconds\" [class.has-error]=\"invalidSeconds\">\n        <input\n          type=\"text\"\n          [class.is-invalid]=\"invalidSeconds\"\n          class=\"form-control text-center thy-time-picker-field\"\n          [placeholder]=\"secondsPlaceholder\"\n          maxlength=\"2\"\n          [readonly]=\"readonlyInput\"\n          [disabled]=\"disabled\"\n          [value]=\"seconds\"\n          (wheel)=\"prevDef($event); changeSeconds(secondsStep * wheelSign($event), 'wheel')\"\n          (keydown.ArrowUp)=\"changeSeconds(secondsStep, 'key')\"\n          (keydown.ArrowDown)=\"changeSeconds(-secondsStep, 'key')\"\n          (change)=\"updateSeconds($event.target.value)\"\n        />\n      </td>\n      <!-- space between -->\n      <td *ngIf=\"showMeridian\">&nbsp;&nbsp;&nbsp;</td>\n      <!-- meridian -->\n      <td *ngIf=\"showMeridian\">\n        <button\n          type=\"button\"\n          class=\"btn btn-default text-center\"\n          [disabled]=\"!isEditable || !canToggleMeridian\"\n          [class.disabled]=\"!isEditable || !canToggleMeridian\"\n          (click)=\"toggleMeridian()\"\n        >\n          {{ meridian }}\n        </button>\n      </td>\n    </tr>\n    <tr class=\"text-center\" [hidden]=\"!showSpinners\">\n      <!-- decrement hours button-->\n      <td>\n        <a class=\"btn btn-link\" [class.disabled]=\"!canDecrementHours || !isEditable\" (click)=\"changeHours(-hourStep)\">\n          <span class=\"thy-chevron thy-chevron-down\"></span>\n        </a>\n      </td>\n      <!-- divider -->\n      <td *ngIf=\"showMinutes\">&nbsp;&nbsp;&nbsp;</td>\n      <!-- decrement minutes button-->\n      <td *ngIf=\"showMinutes\">\n        <a\n          class=\"btn btn-link\"\n          [class.disabled]=\"!canDecrementMinutes || !isEditable\"\n          (click)=\"changeMinutes(-minuteStep)\"\n        >\n          <span class=\"thy-chevron thy-chevron-down\"></span>\n        </a>\n      </td>\n      <!-- divider -->\n      <td *ngIf=\"showSeconds\">&nbsp;</td>\n      <!-- decrement seconds button-->\n      <td *ngIf=\"showSeconds\">\n        <a\n          class=\"btn btn-link\"\n          [class.disabled]=\"!canDecrementSeconds || !isEditable\"\n          (click)=\"changeSeconds(-secondsStep)\"\n        >\n          <span class=\"thy-chevron thy-chevron-down\"></span>\n        </a>\n      </td>\n      <!-- space between -->\n      <td *ngIf=\"showMeridian\">&nbsp;&nbsp;&nbsp;</td>\n      <!-- meridian placeholder-->\n      <td *ngIf=\"showMeridian\"></td>\n    </tr>\n  </tbody>\n</table>\n"
            }]
    }], function () { return [{ type: TimePickerConfig }, { type: ɵngcc0.ChangeDetectorRef }, { type: ThyTimePickerStore }]; }, { isValid: [{
            type: core.Output
        }], disabled: [{
            type: core.Input
        }], hourStep: [{
            type: core.Input
        }], minuteStep: [{
            type: core.Input
        }], secondsStep: [{
            type: core.Input
        }], readonlyInput: [{
            type: core.Input
        }], mousewheel: [{
            type: core.Input
        }], arrowKeys: [{
            type: core.Input
        }], showSpinners: [{
            type: core.Input
        }], showMeridian: [{
            type: core.Input
        }], showMinutes: [{
            type: core.Input
        }], showSeconds: [{
            type: core.Input
        }], meridians: [{
            type: core.Input
        }], min: [{
            type: core.Input
        }], max: [{
            type: core.Input
        }], hoursPlaceholder: [{
            type: core.Input
        }], minutesPlaceholder: [{
            type: core.Input
        }], secondsPlaceholder: [{
            type: core.Input
        }] }); })();
        return ThyTimePickerComponent;
    }());
    ThyTimePickerComponent.ctorParameters = function () { return [
        { type: TimePickerConfig },
        { type: core.ChangeDetectorRef },
        { type: ThyTimePickerStore }
    ]; };
    ThyTimePickerComponent.propDecorators = {
        hourStep: [{ type: core.Input }],
        minuteStep: [{ type: core.Input }],
        secondsStep: [{ type: core.Input }],
        readonlyInput: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        mousewheel: [{ type: core.Input }],
        arrowKeys: [{ type: core.Input }],
        showSpinners: [{ type: core.Input }],
        showMeridian: [{ type: core.Input }],
        showMinutes: [{ type: core.Input }],
        showSeconds: [{ type: core.Input }],
        meridians: [{ type: core.Input }],
        min: [{ type: core.Input }],
        max: [{ type: core.Input }],
        hoursPlaceholder: [{ type: core.Input }],
        minutesPlaceholder: [{ type: core.Input }],
        secondsPlaceholder: [{ type: core.Input }],
        isValid: [{ type: core.Output }]
    };

    var ThyTimePickerModule = /** @class */ (function () {
        function ThyTimePickerModule() {
        }
ThyTimePickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyTimePickerModule });
ThyTimePickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyTimePickerModule_Factory(t) { return new (t || ThyTimePickerModule)(); }, providers: [TimePickerConfig, ThyTimePickerStore], imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyTimePickerModule, { declarations: [ThyTimePickerComponent], imports: [ɵngcc1.CommonModule], exports: [ThyTimePickerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTimePickerModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [ThyTimePickerComponent],
                exports: [ThyTimePickerComponent],
                providers: [TimePickerConfig, ThyTimePickerStore]
            }]
    }], function () { return []; }, null); })();
        return ThyTimePickerModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TIMEPICKER_CONTROL_VALUE_ACCESSOR = TIMEPICKER_CONTROL_VALUE_ACCESSOR;
    exports.ThyTimePickerComponent = ThyTimePickerComponent;
    exports.ThyTimePickerModule = ThyTimePickerModule;
    exports.ThyTimePickerStore = ThyTimePickerStore;
    exports.TimePickerConfig = TimePickerConfig;
    exports.changeTime = changeTime;
    exports.createDate = createDate;
    exports.initialState = initialState;
    exports.isHourInputValid = isHourInputValid;
    exports.isInputLimitValid = isInputLimitValid;
    exports.isInputValid = isInputValid;
    exports.isMinuteInputValid = isMinuteInputValid;
    exports.isSecondInputValid = isSecondInputValid;
    exports.isValidDate = isValidDate;
    exports.isValidLimit = isValidLimit;
    exports.padNumber = padNumber;
    exports.parseHours = parseHours;
    exports.parseMinutes = parseMinutes;
    exports.parseSeconds = parseSeconds;
    exports.parseTime = parseTime;
    exports.setTime = setTime;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-time-picker.umd.js.map
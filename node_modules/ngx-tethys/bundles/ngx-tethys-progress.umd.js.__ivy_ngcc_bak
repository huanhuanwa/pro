(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('ngx-tethys/tooltip'), require('ngx-tethys/core')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/progress', ['exports', '@angular/common', '@angular/core', 'ngx-tethys/tooltip', 'ngx-tethys/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].progress = {}), global.ng.common, global.ng.core, global['ngx-tethys'].tooltip, global['ngx-tethys'].core));
}(this, (function (exports, common, core, tooltip, core$1) { 'use strict';

    var THY_PROGRESS_COMPONENT = new core.InjectionToken('THY_PROGRESS_COMPONENT');
    var ThyProgressBarComponent = /** @class */ (function () {
        function ThyProgressBarComponent(updateHostClassService, elementRef, progress) {
            this.updateHostClassService = updateHostClassService;
            this.progress = progress;
            this.isProgressBar = true;
            this.percent = 0;
            this.color = '';
            updateHostClassService.initializeElement(elementRef.nativeElement);
        }
        Object.defineProperty(ThyProgressBarComponent.prototype, "thyType", {
            set: function (type) {
                // this.type = type;
                this.updateHostClassService.updateClass(type ? ["progress-bar-" + type, "bg-" + type] : []);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressBarComponent.prototype, "thyValue", {
            set: function (value) {
                if (!value && value !== 0) {
                    return;
                }
                this.value = value;
                this.recalculatePercentage();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressBarComponent.prototype, "thyColor", {
            set: function (color) {
                this.color = color || '';
            },
            enumerable: false,
            configurable: true
        });
        ThyProgressBarComponent.prototype.recalculatePercentage = function () {
            this.percent = +((this.value / this.progress.max) * 100).toFixed(2);
            // if (this.progress && this.progress.bars) {
            //     const totalPercentage = this.progress.bars.reduce(function(total: number, bar): number {
            //         return total + bar.percent;
            //     }, 0);
            //     if (totalPercentage > 100) {
            //         this.percent -= totalPercentage - 100;
            //     }
            // }
        };
        return ThyProgressBarComponent;
    }());
    ThyProgressBarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-progress-bar',
                    template: "<ng-content></ng-content>\n",
                    encapsulation: core.ViewEncapsulation.None,
                    providers: [core$1.UpdateHostClassService]
                },] }
    ];
    ThyProgressBarComponent.ctorParameters = function () { return [
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [THY_PROGRESS_COMPONENT,] }] }
    ]; };
    ThyProgressBarComponent.propDecorators = {
        isProgressBar: [{ type: core.HostBinding, args: ["class.progress-bar",] }],
        percent: [{ type: core.HostBinding, args: ['style.width.%',] }],
        color: [{ type: core.HostBinding, args: ['style.background-color',] }],
        thyTips: [{ type: core.Input }],
        thyType: [{ type: core.Input }],
        thyValue: [{ type: core.Input }],
        thyColor: [{ type: core.Input }]
    };

    var ThyProgressComponent = /** @class */ (function () {
        function ThyProgressComponent(updateHostClassService, elementRef) {
            this.updateHostClassService = updateHostClassService;
            this.bars = [];
            this.max = 100;
            this.isStacked = false;
            this.isProgress = true;
            this.updateHostClassService.initializeElement(elementRef);
        }
        Object.defineProperty(ThyProgressComponent.prototype, "barsQueryList", {
            set: function (value) {
                this.bars = value.toArray();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressComponent.prototype, "thyValue", {
            set: function (value) {
                this.isStacked = Array.isArray(value);
                this.value = value;
                // 自动求和计算 max
                if (this.isStacked) {
                    this.thyMax = value.reduce(function (total, item) {
                        return total + item.value;
                    }, 0);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressComponent.prototype, "thySize", {
            set: function (size) {
                this.updateHostClassService.updateClass(size ? ["progress-" + size] : []);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyProgressComponent.prototype, "thyMax", {
            set: function (max) {
                this.max = max;
                this.bars.forEach(function (bar) {
                    bar.recalculatePercentage();
                });
            },
            enumerable: false,
            configurable: true
        });
        return ThyProgressComponent;
    }());
    ThyProgressComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-progress',
                    template: "<ng-container *ngIf=\"isStacked; else general\">\n  <thy-progress-bar\n    *ngFor=\"let item of value\"\n    [thyType]=\"item.type\"\n    [ngClass]=\"{ 'cursor-pointer': item.tips || thyTips }\"\n    [thyTooltip]=\"item.tips || thyTips\"\n    [thyTooltipTemplateContext]=\"item\"\n    [thyTooltipDisabled]=\"!thyTips && !item.tips\"\n    [thyColor]=\"item.color\"\n    [thyValue]=\"item.value\"\n    >{{ item.label }}\n  </thy-progress-bar>\n</ng-container>\n\n<ng-template #general>\n  <thy-progress-bar\n    *ngIf=\"value\"\n    [thyType]=\"thyType\"\n    [ngClass]=\"{ 'cursor-pointer': thyTips }\"\n    [thyTooltip]=\"thyTips\"\n    [thyTooltipTemplateContext]=\"value\"\n    [thyTooltipDisabled]=\"!thyTips\"\n    [thyValue]=\"value\"\n  >\n    <ng-content></ng-content>\n  </thy-progress-bar>\n</ng-template>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    encapsulation: core.ViewEncapsulation.None,
                    providers: [
                        core$1.UpdateHostClassService,
                        {
                            provide: THY_PROGRESS_COMPONENT,
                            useExisting: ThyProgressComponent
                        }
                    ]
                },] }
    ];
    ThyProgressComponent.ctorParameters = function () { return [
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef }
    ]; };
    ThyProgressComponent.propDecorators = {
        max: [{ type: core.HostBinding, args: ['attr.max',] }],
        isStacked: [{ type: core.HostBinding, args: ["class.progress-stacked",] }],
        isProgress: [{ type: core.HostBinding, args: ["class.progress",] }],
        barsQueryList: [{ type: core.ViewChildren, args: [ThyProgressBarComponent,] }],
        thyType: [{ type: core.Input }],
        thyTips: [{ type: core.Input }],
        thyValue: [{ type: core.Input }],
        thySize: [{ type: core.Input }],
        thyMax: [{ type: core.Input }]
    };

    var ThyProgressModule = /** @class */ (function () {
        function ThyProgressModule() {
        }
        return ThyProgressModule;
    }());
    ThyProgressModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyProgressComponent, ThyProgressBarComponent],
                    imports: [common.CommonModule, tooltip.ThyTooltipModule],
                    exports: [ThyProgressComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.THY_PROGRESS_COMPONENT = THY_PROGRESS_COMPONENT;
    exports.ThyProgressBarComponent = ThyProgressBarComponent;
    exports.ThyProgressComponent = ThyProgressComponent;
    exports.ThyProgressModule = ThyProgressModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-progress.umd.js.map

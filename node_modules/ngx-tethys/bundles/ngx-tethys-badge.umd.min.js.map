{"version":3,"sources":["../../src/badge/badge.component.ts","../../src/badge/badge.module.ts"],"names":["BadgeMutexType","BadgeMutexTheme","BadgeMutexSize","ThyBadgeComponent","elementRef","this","displayContent","badgeClassName","_initialized","badgeClassNameMap","thy-badge-count","thy-badge-dot","thy-badge-hollow","thy-badge-lg","thy-badge-sm","thy-badge-danger","thy-badge-primary","thy-badge-warning","thy-badge-secondary","thy-badge-sup","thy-badge-multiple-words","st","value","isValueOfString","isSetValue","isValueKeepShow","max","is","isElement","isSup","isShowBadge","containerClassName","nativeElement","localName","Object","defineProperty","prototype","resetBadgeClassNameMap","combineBadgeClassName","combineBadgeDisplayContent","coerceBooleanProperty","textColor","backgroundColor","ngOnInit","childNodeCount","childNodes","forEach","n","indexOf","nodeName","explorationValueLength","_badgeClassNames","key","hasOwnProperty","push","join","toString","length","mutexArray","includes","Component","args","selector","template","ElementRef","HostBinding","Input","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from 'ngx-tethys/util';\n\nimport { Component, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nconst BadgeMutexType = ['thy-badge-count', 'thy-badge-dot', 'thy-badge-hollow'];\nconst BadgeMutexTheme = ['thy-badge-primary', 'thy-badge-warning', 'thy-badge-danger', 'thy-badge-secondary'];\nconst BadgeMutexSize = ['thy-badge-lg', 'thy-badge-sm'];\n\n@Component({\n    selector: 'thy-badge,[thyBadge]',\n    templateUrl: './badge.component.html'\n})\nexport class ThyBadgeComponent implements OnInit {\n    displayContent = '';\n\n    badgeClassName = '';\n\n    private nativeElement: any;\n\n    private _initialized = false;\n\n    private badgeClassNameMap = {\n        'thy-badge-count': true,\n        'thy-badge-dot': false,\n        'thy-badge-hollow': false,\n        'thy-badge-lg': false,\n        'thy-badge-sm': false,\n        'thy-badge-danger': true,\n        'thy-badge-primary': false,\n        'thy-badge-warning': false,\n        'thy-badge-secondary': false,\n        'thy-badge-sup': true,\n        'thy-badge-multiple-words': false\n    };\n\n    st: {\n        value: number | string | any;\n        isValueOfString: boolean;\n        isSetValue: boolean;\n        isValueKeepShow: boolean;\n        max: {\n            is: boolean;\n            value: number;\n        };\n        isElement: boolean;\n        isSup: boolean;\n        isShowBadge: boolean;\n    } = {\n        value: '',\n        isValueOfString: false,\n        isSetValue: false,\n        isValueKeepShow: false,\n        max: {\n            is: false,\n            value: null\n        },\n        isElement: false,\n        isSup: false,\n        isShowBadge: true\n    };\n\n    public textColor: string;\n\n    public backgroundColor: string;\n\n    constructor(private elementRef: ElementRef) {\n        this.nativeElement = this.elementRef.nativeElement;\n        this.st.isElement = this.nativeElement.localName === 'thy-badge';\n    }\n\n    @HostBinding('class.thy-badge-container') containerClassName = true;\n\n    @Input()\n    set thyType(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n        switch (value) {\n            case 'danger':\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n            case 'primary':\n                this.badgeClassNameMap['thy-badge-primary'] = true;\n                break;\n            case 'warning':\n                this.badgeClassNameMap['thy-badge-warning'] = true;\n                break;\n            case 'secondary':\n                this.badgeClassNameMap['thy-badge-secondary'] = true;\n                break;\n            default:\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyCount(value: number) {\n        this.st.value = value;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyContext(value: string) {\n        this.st.value = value;\n        this.st.isValueOfString = true;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyMaxCount(value: number) {\n        this.st.max.is = true;\n        this.st.max.value = value;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thySize(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexSize);\n        switch (value) {\n            case 'lg':\n                this.badgeClassNameMap['thy-badge-lg'] = true;\n                break;\n            case 'sm':\n                this.badgeClassNameMap['thy-badge-sm'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsDot(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-dot'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsHollow(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-hollow'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyKeepShow(value: boolean) {\n        this.st.isValueKeepShow = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n        }\n    }\n\n    @Input()\n    set thyTextColor(value: string) {\n        this.textColor = value;\n    }\n\n    @Input()\n    set thyBackgroundColor(value: string) {\n        this.backgroundColor = value;\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n    }\n\n    ngOnInit() {\n        let childNodeCount = 0;\n        this.nativeElement.childNodes.forEach((n: HTMLElement) => {\n            if (['#comment'].indexOf(n.nodeName) < 0) {\n                childNodeCount++;\n            }\n        });\n        this.st.isSup = childNodeCount > 0;\n\n        this.combineBadgeClassName();\n\n        if (this.st.isSetValue) {\n            this.combineBadgeDisplayContent();\n        }\n\n        this._initialized = true;\n    }\n\n    private combineBadgeClassName() {\n        this.badgeClassNameMap['thy-badge-sup'] = this.st.isSup;\n        this.explorationValueLength();\n\n        const _badgeClassNames = [];\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (this.badgeClassNameMap[key]) {\n                    _badgeClassNames.push(key);\n                }\n            }\n        }\n        this.badgeClassName = _badgeClassNames.join(' ');\n    }\n\n    private combineBadgeDisplayContent() {\n        this.displayContent = this.st.value;\n        if (this.st.value && this.st.max.is && this.st.value > this.st.max.value) {\n            this.displayContent = `${this.st.max.value}+`;\n        }\n\n        if (!this.st.value && !this.st.isValueKeepShow) {\n            this.st.isShowBadge = false;\n        } else {\n            this.st.isShowBadge = true;\n        }\n    }\n\n    private explorationValueLength() {\n        if (this.st.value && this.st.value.toString().length > 1 && this.st.isSup) {\n            this.badgeClassNameMap['thy-badge-multiple-words'] = true;\n        }\n    }\n\n    private resetBadgeClassNameMap(mutexArray: any) {\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (mutexArray.includes(key)) {\n                    this.badgeClassNameMap[key] = false;\n                }\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyBadgeComponent } from './badge.component';\n\n@NgModule({\n    declarations: [\n        ThyBadgeComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        ThyBadgeComponent\n    ]\n})\n\nexport class ThyBadgeModule {\n        constructor() { }\n}\n"]}
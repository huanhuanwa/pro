(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/platform'), require('rxjs'), require('rxjs/operators'), require('ngx-tethys/util'), require('ngx-tethys/core'), require('ngx-tethys/affix')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/anchor', ['exports', '@angular/core', '@angular/common', '@angular/cdk/platform', 'rxjs', 'rxjs/operators', 'ngx-tethys/util', 'ngx-tethys/core', 'ngx-tethys/affix'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].anchor = {}), global.ng.core, global.ng.common, global.ng.cdk.platform, global.rxjs, global.rxjs.operators, global['ngx-tethys'].util, global['ngx-tethys'].core, global['ngx-tethys'].affix));
}(this, (function (exports, core, common, platform, rxjs, operators, util, core$1, affix) { 'use strict';

    var sharpMatcherRegx = /#([^#]+)$/;
    var ThyAnchorComponent = /** @class */ (function () {
        function ThyAnchorComponent(document, cdr, platform, zone, renderer, scrollService) {
            this.document = document;
            this.cdr = cdr;
            this.platform = platform;
            this.zone = zone;
            this.renderer = renderer;
            this.scrollService = scrollService;
            this.thyAffix = true;
            this.thyBounds = 5;
            this.thyOffsetTop = undefined;
            this.thyTarget = '';
            this.thyClick = new core.EventEmitter();
            this.thyScroll = new core.EventEmitter();
            this.visible = false;
            this.wrapperStyle = { 'max-height': '100vh' };
            this.links = [];
            this.animating = false;
            this.destroy$ = new rxjs.Subject();
            this.handleScrollTimeoutID = -1;
        }
        ThyAnchorComponent.prototype.registerLink = function (link) {
            this.links.push(link);
        };
        ThyAnchorComponent.prototype.unregisterLink = function (link) {
            this.links.splice(this.links.indexOf(link), 1);
        };
        ThyAnchorComponent.prototype.getContainer = function () {
            return this.container || window;
        };
        ThyAnchorComponent.prototype.ngAfterViewInit = function () {
            this.registerScrollEvent();
        };
        ThyAnchorComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.handleScrollTimeoutID);
            this.destroy$.next();
            this.destroy$.complete();
        };
        ThyAnchorComponent.prototype.registerScrollEvent = function () {
            var _this = this;
            if (!this.platform.isBrowser) {
                return;
            }
            this.destroy$.next();
            this.zone.runOutsideAngular(function () {
                rxjs.fromEvent(_this.getContainer(), 'scroll')
                    .pipe(operators.throttleTime(50), operators.takeUntil(_this.destroy$))
                    .subscribe(function () { return _this.handleScroll(); });
            });
            // Browser would maintain the scrolling position when refreshing.
            // So we have to delay calculation in avoid of getting a incorrect result.
            this.handleScrollTimeoutID = setTimeout(function () { return _this.handleScroll(); });
        };
        ThyAnchorComponent.prototype.handleScroll = function () {
            var _this = this;
            if (typeof document === 'undefined' || this.animating) {
                return;
            }
            var container = this.container instanceof HTMLElement ? this.container : this.document;
            var sections = [];
            var scope = (this.thyOffsetTop || 0) + this.thyBounds;
            this.links.forEach(function (linkComponent) {
                var sharpLinkMatch = sharpMatcherRegx.exec(linkComponent.thyHref.toString());
                if (!sharpLinkMatch) {
                    return;
                }
                var target = container.querySelector("#" + sharpLinkMatch[1]);
                if (target) {
                    var top = util.getOffset(target, _this.getContainer()).top;
                    if (top < scope) {
                        sections.push({
                            top: top,
                            linkComponent: linkComponent
                        });
                    }
                }
            });
            this.visible = !!sections.length;
            if (!this.visible) {
                this.clearActive();
                this.cdr.detectChanges();
            }
            else {
                var maxSection = sections.reduce(function (prev, curr) { return (curr.top > prev.top ? curr : prev); });
                this.handleActive(maxSection.linkComponent);
            }
            this.setVisible();
        };
        ThyAnchorComponent.prototype.clearActive = function () {
            this.links.forEach(function (i) {
                i.unsetActive();
            });
        };
        ThyAnchorComponent.prototype.handleActive = function (linkComponent) {
            this.clearActive();
            linkComponent.setActive();
            var linkNode = linkComponent.getLinkTitleElement();
            this.ink.nativeElement.style.top = linkNode.offsetTop + "px";
            this.ink.nativeElement.style.height = linkNode.clientHeight + "px";
            this.visible = true;
            this.setVisible();
            this.thyScroll.emit(linkComponent);
        };
        ThyAnchorComponent.prototype.setVisible = function () {
            var visible = this.visible;
            var visibleClassname = 'visible';
            if (this.ink) {
                if (visible) {
                    this.renderer.addClass(this.ink.nativeElement, visibleClassname);
                }
                else {
                    this.renderer.removeClass(this.ink.nativeElement, visibleClassname);
                }
            }
        };
        ThyAnchorComponent.prototype.handleScrollTo = function (linkComponent) {
            var _this = this;
            var container = this.container instanceof HTMLElement ? this.container : this.document;
            var linkElement = container.querySelector(linkComponent.thyHref);
            if (!linkElement) {
                return;
            }
            this.animating = true;
            var containerScrollTop = this.scrollService.getScroll(this.getContainer());
            var elementOffsetTop = util.getOffset(linkElement, this.getContainer()).top;
            var targetScrollTop = containerScrollTop + elementOffsetTop - (this.thyOffsetTop || 0);
            this.scrollService.scrollTo(this.getContainer(), targetScrollTop, undefined, function () {
                _this.animating = false;
            });
            this.handleActive(linkComponent);
            this.thyClick.emit(linkComponent);
        };
        ThyAnchorComponent.prototype.ngOnChanges = function (changes) {
            var thyOffsetTop = changes.thyOffsetTop, thyContainer = changes.thyContainer;
            if (thyOffsetTop) {
                this.wrapperStyle = {
                    'max-height': "calc(100vh - " + this.thyOffsetTop + "px)"
                };
            }
            if (thyContainer && this.thyContainer) {
                var container = this.thyContainer || this.thyTarget;
                this.container = typeof container === 'string' ? this.document.querySelector(container) : container;
                this.registerScrollEvent();
            }
        };
        return ThyAnchorComponent;
    }());
    ThyAnchorComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-anchor',
                    exportAs: 'thyAnchor',
                    preserveWhitespaces: false,
                    template: "\n        <thy-affix *ngIf=\"thyAffix; else content\" [thyOffsetTop]=\"thyOffsetTop\" [thyContainer]=\"container\">\n            <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n        </thy-affix>\n        <ng-template #content>\n            <div class=\"thy-anchor-wrapper\" [ngStyle]=\"wrapperStyle\">\n                <div class=\"thy-anchor\">\n                    <div class=\"thy-anchor-ink\">\n                        <div class=\"thy-anchor-ink-full\" #ink></div>\n                    </div>\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </ng-template>\n    ",
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ThyAnchorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: core.ChangeDetectorRef },
        { type: platform.Platform },
        { type: core.NgZone },
        { type: core.Renderer2 },
        { type: core$1.ThyScrollService }
    ]; };
    ThyAnchorComponent.propDecorators = {
        ink: [{ type: core.ViewChild, args: ['ink',] }],
        thyAffix: [{ type: core.Input }],
        thyBounds: [{ type: core.Input }],
        thyOffsetTop: [{ type: core.Input }],
        thyContainer: [{ type: core.Input }],
        thyTarget: [{ type: core.Input }],
        thyClick: [{ type: core.Output }],
        thyScroll: [{ type: core.Output }]
    };

    var ThyAnchorLinkComponent = /** @class */ (function () {
        function ThyAnchorLinkComponent(elementRef, anchorComponent, platform, renderer) {
            this.elementRef = elementRef;
            this.anchorComponent = anchorComponent;
            this.platform = platform;
            this.renderer = renderer;
            this.thyHref = '#';
            this.title = '';
            this.renderer.addClass(elementRef.nativeElement, 'thy-anchor-link');
        }
        Object.defineProperty(ThyAnchorLinkComponent.prototype, "thyTitle", {
            set: function (value) {
                if (value instanceof core.TemplateRef) {
                    this.title = null;
                    this.titleTemplate = value;
                }
                else {
                    this.title = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyAnchorLinkComponent.prototype.ngOnInit = function () {
            this.anchorComponent.registerLink(this);
        };
        ThyAnchorLinkComponent.prototype.getLinkTitleElement = function () {
            return this.linkTitle.nativeElement;
        };
        ThyAnchorLinkComponent.prototype.setActive = function () {
            this.renderer.addClass(this.elementRef.nativeElement, 'thy-anchor-link-active');
        };
        ThyAnchorLinkComponent.prototype.unsetActive = function () {
            this.renderer.removeClass(this.elementRef.nativeElement, 'thy-anchor-link-active');
        };
        ThyAnchorLinkComponent.prototype.goToClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            if (this.platform.isBrowser) {
                this.anchorComponent.handleScrollTo(this);
            }
        };
        ThyAnchorLinkComponent.prototype.ngOnDestroy = function () {
            this.anchorComponent.unregisterLink(this);
        };
        return ThyAnchorLinkComponent;
    }());
    ThyAnchorLinkComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-link',
                    exportAs: 'thyLink',
                    preserveWhitespaces: false,
                    template: "\n        <a #linkTitle (click)=\"goToClick($event)\" href=\"{{ thyHref }}\" class=\"thy-anchor-link-title\" title=\"{{ title }}\">\n            <span *ngIf=\"title; else titleTemplate || thyTemplate\">{{ title }}</span>\n        </a>\n        <ng-content></ng-content>\n    ",
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ThyAnchorLinkComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: ThyAnchorComponent },
        { type: platform.Platform },
        { type: core.Renderer2 }
    ]; };
    ThyAnchorLinkComponent.propDecorators = {
        thyHref: [{ type: core.Input }],
        thyTitle: [{ type: core.Input }],
        thyTemplate: [{ type: core.ContentChild, args: ['thyTemplate',] }],
        linkTitle: [{ type: core.ViewChild, args: ['linkTitle', { static: true },] }]
    };

    var ThyAnchorModule = /** @class */ (function () {
        function ThyAnchorModule() {
        }
        return ThyAnchorModule;
    }());
    ThyAnchorModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyAnchorComponent, ThyAnchorLinkComponent],
                    exports: [ThyAnchorComponent, ThyAnchorLinkComponent],
                    imports: [common.CommonModule, platform.PlatformModule, affix.ThyAffixModule]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyAnchorComponent = ThyAnchorComponent;
    exports.ThyAnchorLinkComponent = ThyAnchorLinkComponent;
    exports.ThyAnchorModule = ThyAnchorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-anchor.umd.js.map

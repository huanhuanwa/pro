(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/coercion'), require('ngx-tethys/tooltip'), require('ngx-tethys/notify')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/copy', ['exports', '@angular/core', '@angular/common', '@angular/cdk/coercion', 'ngx-tethys/tooltip', 'ngx-tethys/notify'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].copy = {}), global.ng.core, global.ng.common, global.ng.cdk.coercion, global['ngx-tethys'].tooltip, global['ngx-tethys'].notify));
}(this, (function (exports, core, common, coercion, tooltip, notify) { 'use strict';

    var ThyCopyDirective = /** @class */ (function () {
        function ThyCopyDirective(document, tooltipService, elementRef, viewContainerRef, notifyService) {
            this.document = document;
            this.tooltipService = tooltipService;
            this.elementRef = elementRef;
            this.viewContainerRef = viewContainerRef;
            this.notifyService = notifyService;
            // 默认为点击标签，可传复制目标标签
            this.thyCopy = new core.EventEmitter();
            this.thyCopySuccessText = '复制成功';
            this.thyCopyTips = '点击复制';
        }
        ThyCopyDirective.prototype.ngOnInit = function () {
            this.tooltipService.attach(this.elementRef, this.viewContainerRef, 'hover');
            this.tooltipService.thyTooltipDirective.content = this.thyCopyTips ? this.thyCopyTips : '点击复制';
        };
        ThyCopyDirective.prototype.getContent = function (event) {
            if (typeof this.thyCopyContent === 'string') {
                return this.thyCopyContent;
            }
            else {
                var target = this.thyCopyContent ? coercion.coerceElement(this.thyCopyContent) : event.target;
                return target.value || target.textContent;
            }
        };
        ThyCopyDirective.prototype.onClick = function (event) {
            var textarea = this.document.createElement('textarea');
            this.document.body.appendChild(textarea);
            textarea.value = this.getContent(event);
            textarea.select();
            try {
                document.execCommand('copy', false, null);
                this.thyCopy.emit({ isSuccess: true, event: event });
                this.notifyService.success(this.thyCopySuccessText);
            }
            catch (err) {
                this.thyCopy.emit({ isSuccess: false, event: event });
                this.notifyService.error('复制失败');
            }
            finally {
                textarea.remove();
            }
        };
        ThyCopyDirective.prototype.ngOnDestroy = function () {
            this.tooltipService.detach();
        };
        return ThyCopyDirective;
    }());
    ThyCopyDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[thyCopy]',
                    providers: [tooltip.TooltipService, notify.ThyNotifyService]
                },] }
    ];
    ThyCopyDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: tooltip.TooltipService },
        { type: core.ElementRef },
        { type: core.ViewContainerRef },
        { type: notify.ThyNotifyService }
    ]; };
    ThyCopyDirective.propDecorators = {
        thyCopy: [{ type: core.Output }],
        thyCopySuccessText: [{ type: core.Input }],
        thyCopyTips: [{ type: core.Input }],
        thyCopyContent: [{ type: core.Input }],
        onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
    };

    var ThyCopyModule = /** @class */ (function () {
        function ThyCopyModule() {
        }
        return ThyCopyModule;
    }());
    ThyCopyModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyCopyDirective],
                    imports: [common.CommonModule],
                    exports: [ThyCopyDirective]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyCopyDirective = ThyCopyDirective;
    exports.ThyCopyModule = ThyCopyModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-copy.umd.js.map

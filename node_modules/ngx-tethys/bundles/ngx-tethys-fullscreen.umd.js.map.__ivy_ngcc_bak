{"version":3,"file":"ngx-tethys-fullscreen.umd.js","sources":["../../src/fullscreen/fullscreen.config.ts","../../src/fullscreen/fullscreen-ref.ts","../../src/fullscreen/fullscreen.service.ts","../../src/fullscreen/fullscreen.component.ts","../../src/fullscreen/fullscreen.module.ts","../../src/fullscreen/ngx-tethys-fullscreen.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\n\nexport interface ThyFullscreenConfig {\n    /**\n     * immersive 模式使用了浏览器提供的全屏，整个窗体都全屏，emulated 模式为仿真的，只会在 body 区域全屏，默认 immersive\n     */\n    mode?: ThyFullscreenMode;\n    /**\n     * 需要全屏的目标元素，可以是选择器，可以是 HTML Element, 也可以是 Angular 的 ElementRef\n     */\n    target: string | Element | ElementRef;\n    /**\n     * 目标元素已经打开全屏的样式\n     */\n    targetLaunchededClasse?: string;\n    /**\n     * emulated 模式下的目标元素全屏的容器，默认是 body\n     */\n    emulatedContainer?: string | Element | ElementRef;\n}\n\nexport enum ThyFullscreenMode {\n    immersive = 'immersive',\n    emulated = 'emulated'\n}\n","import { coerceElement } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ElementRef, Inject } from '@angular/core';\nimport { fromEvent, merge, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyFullscreenConfig, ThyFullscreenMode } from './fullscreen.config';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\nexport class ThyFullscreenRef<TResult = unknown> {\n    fullscreenConfig: ThyFullscreenConfig;\n\n    private isFullscreen = false;\n\n    private ngUnsubscribe$ = new Subject();\n\n    private readonly _afterLaunched = new Subject<TResult>();\n\n    private readonly _afterExited = new Subject<TResult>();\n\n    constructor(@Inject(DOCUMENT) protected document: any) {}\n\n    private onFullscreenChange() {\n        const isFullScreen = this.isImmersiveFullscreen();\n        if (isFullScreen) {\n            this.launchNormalFullscreen();\n        } else {\n            this.exitNormalFullscreen();\n        }\n    }\n\n    private resetElement(element: string | Element | ElementRef) {\n        const targetType = typeof element;\n        if (targetType === 'string') {\n            return this.document.querySelector(`.${element}`);\n        } else {\n            return coerceElement(element);\n        }\n    }\n\n    private isImmersiveFullscreen() {\n        const doc = this.document;\n        return !!(doc['fullscreenElement'] || doc['mozFullScreenElement'] || doc['webkitFullscreenElement'] || doc['msFullscreenElement']);\n    }\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (event.keyCode === ESCAPE) {\n            if (this.isFullscreen && this.fullscreenConfig.mode === ThyFullscreenMode.emulated) {\n                this.exitNormalFullscreen();\n            }\n        }\n    }\n\n    private launchNormalFullscreen() {\n        const targetElement = this.resetElement(this.fullscreenConfig.target);\n        const classes = this.fullscreenConfig.targetLaunchededClasse;\n        const container = this.fullscreenConfig.emulatedContainer;\n        if (container) {\n            const containerElement = this.resetElement(container);\n            const containerClientRect = containerElement.getBoundingClientRect();\n            const targetClientRect = targetElement.getBoundingClientRect();\n            const distanceX = containerClientRect.left - targetClientRect.left;\n            const distanceY = containerClientRect.top - targetClientRect.top;\n            targetElement.style.transform = `translate(${distanceX}px, ${distanceY}px)`;\n            targetElement.style.width = `${containerClientRect.width}px`;\n            targetElement.style.height = `${containerClientRect.height}px`;\n        } else {\n            targetElement.classList.add('thy-fullscreen');\n        }\n        targetElement.classList.add('thy-fullscreen-active');\n        if (classes && classes.length) {\n            targetElement.classList.add(classes);\n        }\n        this.isFullscreen = true;\n        this._afterLaunched.next();\n    }\n\n    private exitNormalFullscreen() {\n        const targetElement = this.resetElement(this.fullscreenConfig.target);\n        const classes = this.fullscreenConfig.targetLaunchededClasse;\n        const container = this.fullscreenConfig.emulatedContainer;\n        if (container) {\n            targetElement.style.transform = ``;\n            targetElement.style.width = ``;\n            targetElement.style.height = ``;\n        } else {\n            targetElement.classList.remove('thy-fullscreen');\n        }\n        targetElement.classList.remove('thy-fullscreen-active');\n        if (classes && classes.length) {\n            targetElement.classList.remove(classes);\n        }\n\n        this.isFullscreen = false;\n        this._afterExited.next();\n\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n\n    protected launchImmersiveFullscreen() {\n        const docElement = this.document.documentElement;\n\n        if (docElement.requestFullscreen) {\n            docElement.requestFullscreen();\n        } else if (docElement['mozRequestFullScreen']) {\n            docElement['mozRequestFullScreen']();\n        } else if (docElement['webkitRequestFullscreen']) {\n            docElement['webkitRequestFullscreen']();\n        } else if (docElement['msRequestFullscreen']) {\n            docElement['msRequestFullscreen']();\n        }\n    }\n\n    protected exitImmersiveFullscreen() {\n        const doc = this.document;\n        if (doc['exitFullscreen']) {\n            doc['exitFullscreen']();\n        } else if (doc['mozCancelFullScreen']) {\n            doc['mozCancelFullScreen']();\n        } else if (doc['webkitExitFullscreen']) {\n            doc['webkitExitFullscreen']();\n        } else if (doc['msExitFullscreen']) {\n            doc['msExitFullscreen']();\n        }\n    }\n\n    launch() {\n        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {\n            merge(\n                fromEvent(this.document, 'fullscreenchange'),\n                fromEvent(this.document, 'MSFullscreenChange'),\n                fromEvent(this.document, 'webkitfullscreenchange')\n            )\n                .pipe(takeUntil(this.ngUnsubscribe$))\n                .subscribe(() => {\n                    this.onFullscreenChange();\n                });\n            this.launchImmersiveFullscreen();\n        } else {\n            fromEvent(this.document, 'keydown')\n                .pipe(takeUntil(this.ngUnsubscribe$))\n                .subscribe(event => {\n                    this.handleKeyDown(event as KeyboardEvent);\n                });\n            this.launchNormalFullscreen();\n        }\n    }\n\n    exit() {\n        if (this.fullscreenConfig.mode === ThyFullscreenMode.immersive) {\n            this.exitImmersiveFullscreen();\n        } else {\n            this.exitNormalFullscreen();\n        }\n    }\n\n    afterLaunched(): Observable<TResult> {\n        return this._afterLaunched.asObservable();\n    }\n\n    afterExited(): Observable<TResult> {\n        return this._afterExited.asObservable();\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { ThyFullscreenRef } from './fullscreen-ref';\nimport { ThyFullscreenConfig, ThyFullscreenMode } from './fullscreen.config';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ThyFullscreen {\n    constructor(@Inject(DOCUMENT) protected document: any) {}\n\n    private fullscreenRefs: ThyFullscreenRef[] = [];\n\n    /**\n     * 开始全屏\n     * @param config\n     */\n    launch<TResult = unknown>(config: ThyFullscreenConfig): ThyFullscreenRef<TResult> {\n        config.mode = config.mode || ThyFullscreenMode.immersive;\n        const fullscreenRef = new ThyFullscreenRef<TResult>(this.document);\n        fullscreenRef.fullscreenConfig = config;\n        fullscreenRef.launch();\n        this.fullscreenRefs.push(fullscreenRef);\n        fullscreenRef.afterExited().subscribe(() => {\n            const index = this.fullscreenRefs.indexOf(fullscreenRef);\n            if (index > -1) {\n                this.fullscreenRefs.splice(index, 1);\n            }\n        });\n\n        return fullscreenRef;\n    }\n\n    /**\n     * 退出最后一个 ThyFullscreenRef 的全屏\n     * @param config\n     */\n    exit() {\n        const lastFullscreenRef = this.fullscreenRefs[this.fullscreenRefs.length - 1];\n        lastFullscreenRef.exit();\n    }\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThyFullscreenMode } from './fullscreen.config';\nimport { ThyFullscreen } from './fullscreen.service';\n@Component({\n    selector: 'thy-fullscreen, [thyFullscreen]',\n    templateUrl: './fullscreen.component.html'\n})\nexport class ThyFullscreenComponent implements OnInit, AfterViewInit, OnDestroy {\n    @Input() thyMode: ThyFullscreenMode = ThyFullscreenMode.immersive;\n\n    @Input() thyFullscreenClasses: string;\n\n    @Output() thyFullscreenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private ngUnsubscribe$ = new Subject();\n\n    constructor(private elementRef: ElementRef, private service: ThyFullscreen) {}\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');\n        if (btnLaunch) {\n            btnLaunch.addEventListener('click', this.handleFullscreen);\n        }\n    }\n\n    // 点击打开或关闭全屏\n    private handleFullscreen = () => {\n        const targetElement = this.elementRef.nativeElement.querySelector('[fullscreen-target]');\n        const containerElement = this.elementRef.nativeElement.querySelector('[fullscreen-container]');\n        const fullscreen = targetElement.classList.contains('thy-fullscreen-active');\n\n        if (fullscreen) {\n            this.service.exit();\n        } else {\n            const fullscreenRef = this.service.launch({\n                mode: this.thyMode,\n                target: targetElement,\n                targetLaunchededClasse: this.thyFullscreenClasses,\n                emulatedContainer: containerElement\n            });\n\n            this.thyFullscreenChange.emit(true);\n\n            fullscreenRef.afterExited().subscribe(() => {\n                this.thyFullscreenChange.emit(false);\n            });\n        }\n    };\n\n    ngOnDestroy() {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n\n        const btnLaunch = this.elementRef.nativeElement.querySelector('[fullscreen-launch]');\n        if (btnLaunch) {\n            btnLaunch.removeEventListener('click', this.handleFullscreen);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyFullscreenComponent } from './fullscreen.component';\n@NgModule({\n    declarations: [ThyFullscreenComponent],\n    imports: [CommonModule],\n    exports: [ThyFullscreenComponent]\n})\nexport class ThyFullscreenModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["ThyFullscreenMode","Subject","coerceElement","ESCAPE","merge","fromEvent","takeUntil","Inject","DOCUMENT","Injectable","EventEmitter","Component","ElementRef","Input","Output","NgModule","CommonModule"],"mappings":"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"}
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/router'), require('ngx-tethys/util'), require('@angular/common'), require('ngx-tethys/popover'), require('@angular/core'), require('rxjs'), require('@angular/cdk/overlay'), require('ngx-tethys/icon'), require('ngx-tethys/shared'), require('ngx-tethys/button'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/guider', ['exports', '@angular/router', 'ngx-tethys/util', '@angular/common', 'ngx-tethys/popover', '@angular/core', 'rxjs', '@angular/cdk/overlay', 'ngx-tethys/icon', 'ngx-tethys/shared', 'ngx-tethys/button', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].guider = {}), global.ng.router, global['ngx-tethys'].util, global.ng.common, global['ngx-tethys'].popover, global.ng.core, global.rxjs, global.ng.cdk.overlay, global['ngx-tethys'].icon, global['ngx-tethys'].shared, global['ngx-tethys'].button, global.rxjs.operators));
}(this, (function (exports, i2, util, i5, i1, i0, rxjs, i4, icon, shared, button, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);

    var ThyGuiderManager = /** @class */ (function () {
        function ThyGuiderManager() {
            this.targetListMap = {};
        }
        ThyGuiderManager.prototype.updateActive = function (key, guiderRef) {
            this.activeStepKey = key;
            this.thyGuiderRef = guiderRef;
        };
        ThyGuiderManager.prototype.addStepTarget = function (key, el) {
            this.targetListMap[key] = el;
        };
        ThyGuiderManager.prototype.removeStepTarget = function (key) {
            delete this.targetListMap[key];
        };
        ThyGuiderManager.prototype.getActiveTarget = function (key) {
            return this.targetListMap[key];
        };
        ThyGuiderManager.prototype.getActive = function () {
            return {
                key: this.activeStepKey,
                guiderRef: this.thyGuiderRef
            };
        };
        return ThyGuiderManager;
    }());
    ThyGuiderManager.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ThyGuiderManager_Factory() { return new ThyGuiderManager(); }, token: ThyGuiderManager, providedIn: "root" });
    ThyGuiderManager.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ThyGuiderManager.ctorParameters = function () { return []; };

    var pointContainerSize = 28;
    var ThyGuiderStepRef = /** @class */ (function () {
        function ThyGuiderStepRef(step, stepIndex, rendererFactory, popover, guiderManager, overlay, document) {
            this.step = step;
            this.stepIndex = stepIndex;
            this.rendererFactory = rendererFactory;
            this.popover = popover;
            this.guiderManager = guiderManager;
            this.overlay = overlay;
            this.document = document;
            this.renderer = this.rendererFactory.createRenderer(null, null);
        }
        ThyGuiderStepRef.prototype.show = function (guiderRef) {
            this.guiderRef = guiderRef;
            this.createPoint(this.step, guiderRef);
        };
        ThyGuiderStepRef.prototype.dispose = function () {
            this.removeLastPointContainer();
            this.removeTip();
        };
        ThyGuiderStepRef.prototype.getTargetElement = function (step) {
            var targetElement;
            if (step.target) {
                targetElement = this.document.querySelector(step.target);
            }
            else {
                targetElement = this.guiderManager.getActiveTarget(step.key);
            }
            return targetElement;
        };
        ThyGuiderStepRef.prototype.createPoint = function (step, guiderRef) {
            var _a;
            // target 为空并且 guiderManager 中的 targetMap 也没有此step 的 key，或者 target 直接为 坐标数组
            // 则执行无 target 的显示
            if (!this.isTipHasTarget(step)) {
                this.createTip(this.step);
                return;
            }
            var targetElement = this.getTargetElement(step);
            if (util.helpers.isNull(targetElement)) {
                throw new Error("there is no target called " + step.target);
            }
            this.targetElementObserver = rxjs.fromEvent(targetElement, 'click').subscribe(function () {
                guiderRef.targetClicked().next(step);
            });
            var positionValue = (_a = targetElement === null || targetElement === void 0 ? void 0 : targetElement.style) === null || _a === void 0 ? void 0 : _a.position;
            if (!positionValue || positionValue === 'static') {
                this.renderer.setStyle(targetElement, 'position', 'relative');
            }
            this.setStyleForPointContainer(step, targetElement);
        };
        ThyGuiderStepRef.prototype.setStyleForPointContainer = function (step, targetElement) {
            var pointPosition = this.getPointPosition(step, targetElement);
            var pointContainer = this.setPointPosition(pointPosition);
            this.renderPoint(targetElement, pointContainer);
        };
        ThyGuiderStepRef.prototype.getPointPosition = function (step, targetElement) {
            var targetElementClientRect = targetElement.getBoundingClientRect();
            var targetElementWidth = targetElementClientRect.width, targetElementHeight = targetElementClientRect.height;
            var pointOffset = step.pointOffset;
            // 只通过 pointOffset 控制 point 的位置，默认在 target 的右下角，
            // offset 的基点也为默认位置
            return [targetElementWidth + pointOffset[0], targetElementHeight + pointOffset[1]];
        };
        ThyGuiderStepRef.prototype.setPointPosition = function (pointPosition) {
            var currentPointContainer = this.renderer.createElement('div');
            this.renderer.addClass(currentPointContainer, 'thy-guider-highlight-container');
            if (this.guiderRef.config.pointClass) {
                this.addPointClass(currentPointContainer, this.guiderRef.config.pointClass);
            }
            this.renderer.setStyle(currentPointContainer, 'position', 'absolute');
            this.renderer.setStyle(currentPointContainer, 'left', pointPosition[0] + 'px');
            this.renderer.setStyle(currentPointContainer, 'top', pointPosition[1] + 'px');
            this.renderer.setStyle(currentPointContainer, 'transform', 'translate(-100%,-100%)');
            return currentPointContainer;
        };
        ThyGuiderStepRef.prototype.addPointClass = function (el, pointClass) {
            var _this = this;
            if (util.helpers.isString(pointClass)) {
                this.renderer.addClass(el, pointClass);
            }
            if (util.helpers.isArray(pointClass)) {
                pointClass.forEach(function (classItem) {
                    _this.renderer.addClass(el, classItem);
                });
            }
        };
        ThyGuiderStepRef.prototype.renderPoint = function (targetElement, pointContainer) {
            this.renderer.appendChild(targetElement, pointContainer);
            this.lastPointerContainer = pointContainer;
            this.lastTargetElement = targetElement;
            this.createTip(this.step);
        };
        ThyGuiderStepRef.prototype.removeLastPointContainer = function () {
            if (this.lastPointerContainer) {
                this.renderer.removeChild(this.document.body, this.lastPointerContainer);
                this.lastPointerContainer = undefined;
            }
        };
        ThyGuiderStepRef.prototype.createTip = function (step) {
            if (this.isTipHasTarget(step)) {
                this.tipWithTarget(step);
            }
            else {
                this.tipWithoutTarget(step);
            }
        };
        ThyGuiderStepRef.prototype.tipWithoutTarget = function (step) {
            var position = this.getTipPosition(step);
            this.lastPopoverRef = this.popover.open(this.guiderRef.config.hintComponent, {
                origin: null,
                originPosition: {
                    x: position[0],
                    y: position[1]
                },
                originActiveClass: '',
                panelClass: this.guiderRef.config.hintClass || '',
                backdropClosable: false,
                hasBackdrop: false,
                manualClosure: true,
                initialState: {
                    guiderRef: this.guiderRef,
                    stepRef: this
                },
                scrollStrategy: this.overlay.scrollStrategies.block()
            });
        };
        ThyGuiderStepRef.prototype.getTipPosition = function (step) {
            if (Array.isArray(step.target)) {
                return step.target;
            }
            return this.guiderRef.config.defaultPosition;
        };
        ThyGuiderStepRef.prototype.createTipContainer = function () {
            var tipContainer = this.renderer.createElement('div');
            this.renderer.addClass(tipContainer, 'thy-guider-content-container');
            this.renderer.setStyle(tipContainer, 'position', 'absolute');
            this.renderer.setStyle(tipContainer, 'top', '0px');
            this.renderer.setStyle(tipContainer, 'right', '0px');
            this.renderer.setStyle(tipContainer, 'bottom', '0px');
            this.renderer.setStyle(tipContainer, 'left', '0px');
            return tipContainer;
        };
        ThyGuiderStepRef.prototype.tipWithTarget = function (step) {
            var targetElement;
            if (step.target) {
                targetElement = this.document.querySelector(step.target);
            }
            else {
                targetElement = this.guiderManager.getActiveTarget(step.key);
            }
            var hintContainer = this.createTipContainer();
            this.renderer.appendChild(targetElement, hintContainer);
            this.lastTipContainer = hintContainer;
            var popoverConfig = {
                origin: hintContainer,
                placement: step.hintPlacement,
                panelClass: this.guiderRef.config.hintClass || '',
                backdropClosable: false,
                hasBackdrop: false,
                manualClosure: true,
                initialState: {
                    guiderRef: this.guiderRef,
                    stepRef: this
                },
                scrollStrategy: this.overlay.scrollStrategies.block()
            };
            var pointPosition = this.getPointPosition(step, targetElement);
            var hintOffset = this.getTipOffset(step, pointPosition, targetElement);
            if (hintOffset) {
                popoverConfig.offset = hintOffset;
            }
            this.lastPopoverRef = this.popover.open(this.guiderRef.config.hintComponent, popoverConfig);
        };
        ThyGuiderStepRef.prototype.getTipOffset = function (step, pointPosition, targetElement) {
            var hintPlacement = step.hintPlacement;
            var targetElementClientRect = targetElement.getBoundingClientRect();
            var targetElementWidth = targetElementClientRect.width, targetElementHeight = targetElementClientRect.height;
            var hintOffset = step.hintOffset || 0;
            var pointXAxisOffset = pointPosition[0];
            var pointYAxisOffset = pointPosition[1];
            if (hintPlacement.startsWith('top')) {
                if (pointYAxisOffset < pointContainerSize) {
                    hintOffset = hintOffset + Math.abs(pointYAxisOffset) + pointContainerSize;
                }
            }
            else if (hintPlacement.startsWith('bottom')) {
                if (pointYAxisOffset > targetElementHeight) {
                    hintOffset = hintOffset + (pointYAxisOffset - targetElementHeight) + 10; // 10 为空隙量
                }
            }
            else if (hintPlacement.startsWith('left')) {
                if (pointXAxisOffset < 0) {
                    hintOffset = hintOffset + Math.abs(pointXAxisOffset) + pointContainerSize;
                }
            }
            else if (hintPlacement.startsWith('right')) {
                if (pointXAxisOffset > targetElementWidth) {
                    hintOffset = hintOffset + (pointXAxisOffset - targetElementWidth) + 10; // 10 为空隙量
                }
            }
            return hintOffset;
        };
        ThyGuiderStepRef.prototype.removeTip = function () {
            if (this.lastPopoverRef) {
                this.lastPopoverRef.close();
                this.lastPopoverRef = undefined;
            }
            if (this.lastTipContainer) {
                this.renderer.removeChild(this.document.body, this.lastTipContainer);
                this.lastTipContainer = undefined;
            }
            if (this.lastTargetElement && this.targetElementObserver) {
                this.targetElementObserver.unsubscribe();
                this.lastTargetElement = undefined;
                this.targetElementObserver = undefined;
            }
        };
        ThyGuiderStepRef.prototype.isTipHasTarget = function (step) {
            if (step.target) {
                return !Array.isArray(step.target);
            }
            else {
                return !!this.guiderManager.getActiveTarget(step.key);
            }
        };
        return ThyGuiderStepRef;
    }());

    var ThyGuiderConfig = /** @class */ (function () {
        function ThyGuiderConfig() {
        }
        return ThyGuiderConfig;
    }());
    var defaultGuiderPositionConfig = {
        hintComponent: null,
        hintPlacement: 'rightBottom',
        defaultPosition: [0, 0],
        pointOffset: [0, 0],
        hintOffset: 4
    };

    var ThyGuiderRef = /** @class */ (function () {
        function ThyGuiderRef(config, rendererFactory, popover, router, guiderManager, ngZone, overlay, document) {
            var _this = this;
            this.config = config;
            this.rendererFactory = rendererFactory;
            this.popover = popover;
            this.router = router;
            this.guiderManager = guiderManager;
            this.ngZone = ngZone;
            this.overlay = overlay;
            this.document = document;
            this.stepChange$ = new rxjs.ReplaySubject();
            this.guiderEnded$ = new rxjs.Subject();
            this.closed$ = new rxjs.Subject();
            this.targetClicked$ = new rxjs.Subject();
            this.stepsRef = config.steps.map(function (step, index) {
                return new ThyGuiderStepRef(step, index, _this.rendererFactory, _this.popover, _this.guiderManager, _this.overlay, _this.document);
            });
            this.steps = config.steps;
        }
        ThyGuiderRef.prototype.stepChange = function () {
            return this.stepChange$.asObservable();
        };
        ThyGuiderRef.prototype.ended = function () {
            return this.guiderEnded$;
        };
        ThyGuiderRef.prototype.closed = function () {
            return this.closed$;
        };
        ThyGuiderRef.prototype.targetClicked = function () {
            return this.targetClicked$;
        };
        ThyGuiderRef.prototype.start = function (startWith) {
            this.to(startWith);
            return this.stepChange();
        };
        ThyGuiderRef.prototype.next = function () {
            if (this.currentStepIndex + 1 > this.steps.length) {
                return;
            }
            this.to(this.currentStepIndex + 1);
        };
        ThyGuiderRef.prototype.previous = function () {
            if (this.currentStepIndex - 1 < 0) {
                return;
            }
            this.to(this.currentStepIndex - 1);
        };
        ThyGuiderRef.prototype.active = function (indexOrKey) {
            if (util.helpers.isNumber(indexOrKey)) {
                this.to(indexOrKey);
                return;
            }
            if (util.helpers.isString(indexOrKey)) {
                var index = this.steps.findIndex(function (step) { return step.key === indexOrKey; });
                this.to(index);
                return;
            }
        };
        ThyGuiderRef.prototype.to = function (index) {
            var _this = this;
            this.removeExistedStep();
            if (!util.helpers.isNumber(index) || index >= this.steps.length || index < 0 || Number.isNaN(index)) {
                index = 0;
            }
            this.currentStep = this.steps[index];
            this.currentStepIndex = index;
            // update guiderManager
            this.guiderManager.updateActive(this.currentStep.key, this);
            if (this.currentStep.route && this.currentStep.route !== this.router.url) {
                this.ngZone.run(function () {
                    _this.router.navigateByUrl(_this.currentStep.route);
                });
                return;
            }
            setTimeout(function () {
                _this.drawStep();
                _this.notifyStepClicked();
            }, 0);
        };
        ThyGuiderRef.prototype.close = function () {
            var _a;
            this.removeManagerActiveKey();
            (_a = this.stepsRef[this.currentStepIndex]) === null || _a === void 0 ? void 0 : _a.dispose();
            this.closed$.next(this.currentStep);
        };
        ThyGuiderRef.prototype.end = function () {
            this.close();
            this.guiderEnded$.next(this.currentStep);
            this.notifyGuiderIsFinished();
        };
        ThyGuiderRef.prototype.removeManagerActiveKey = function () {
            var activeKey = this.guiderManager.getActive().key;
            if (activeKey && this.steps.some(function (step) { return step.key === activeKey; })) {
                this.guiderManager.updateActive('', undefined);
            }
        };
        ThyGuiderRef.prototype.notifyStepClicked = function () {
            this.stepChange$.next(this.currentStep);
        };
        ThyGuiderRef.prototype.drawStep = function () {
            this.removeExistedStep();
            this.stepsRef[this.currentStepIndex].show(this);
        };
        ThyGuiderRef.prototype.notifyGuiderIsFinished = function () {
            this.stepChange$.complete();
            // this.targetClicked().unsubscribe();
            this.currentStepIndex = 0;
        };
        ThyGuiderRef.prototype.removeExistedStep = function () {
            var _a;
            (_a = this.stepsRef[this.currentStepIndex]) === null || _a === void 0 ? void 0 : _a.dispose();
        };
        return ThyGuiderRef;
    }());
    ThyGuiderRef.ctorParameters = function () { return [
        { type: ThyGuiderConfig },
        { type: i0.RendererFactory2 },
        { type: i1.ThyPopover },
        { type: i2.Router },
        { type: ThyGuiderManager },
        { type: i0.NgZone },
        { type: i4.Overlay },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i5.DOCUMENT,] }] }
    ]; };

    var ThyGuider = /** @class */ (function () {
        function ThyGuider(rendererFactory, popover, router, guiderManager, ngZone, overlay, document) {
            this.rendererFactory = rendererFactory;
            this.popover = popover;
            this.router = router;
            this.guiderManager = guiderManager;
            this.ngZone = ngZone;
            this.overlay = overlay;
            this.document = document;
            this.guiderRefs = [];
        }
        ThyGuider.prototype.create = function (config) {
            var _this = this;
            if (!config || !(config === null || config === void 0 ? void 0 : config.steps) || !util.helpers.isArray(config === null || config === void 0 ? void 0 : config.steps)) {
                throw new Error("'config.steps' must be an array of length greater than 0");
            }
            var normalizeConfig = this.normalizeConfig(config);
            this.guiderRef = new ThyGuiderRef(normalizeConfig, this.rendererFactory, this.popover, this.router, this.guiderManager, this.ngZone, this.overlay, this.document);
            this.guiderRef.closed().subscribe(function () {
                var index = _this.guiderRefs.findIndex(function (guiderRef) { return guiderRef === _this.guiderRef; });
                _this.guiderRefs.splice(index, 1);
            });
            this.guiderRefs.push(this.guiderRef);
            return this.guiderRef;
        };
        ThyGuider.prototype.normalizeConfig = function (config) {
            var _this = this;
            var normalizeConfig = Object.assign({}, defaultGuiderPositionConfig, config);
            normalizeConfig.steps = normalizeConfig.steps.map(function (step) {
                return _this.normalizeStep(step, normalizeConfig);
            });
            return normalizeConfig;
        };
        ThyGuider.prototype.normalizeStep = function (step, config) {
            var tempStep = Object.assign({
                hintPlacement: config.hintPlacement,
                hintOffset: config.hintOffset,
                pointOffset: config.pointOffset
            }, step);
            return tempStep;
        };
        ThyGuider.prototype.close = function () {
            if (this.guiderRefs.length > 0) {
                var lasGuiderRef = this.guiderRefs[this.guiderRefs.length - 1];
                if (lasGuiderRef) {
                    lasGuiderRef.close();
                    this.guiderRefs.pop();
                }
            }
        };
        return ThyGuider;
    }());
    ThyGuider.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ThyGuider_Factory() { return new ThyGuider(i0__namespace.ɵɵinject(i0__namespace.RendererFactory2), i0__namespace.ɵɵinject(i1__namespace.ThyPopover), i0__namespace.ɵɵinject(i2__namespace.Router), i0__namespace.ɵɵinject(ThyGuiderManager), i0__namespace.ɵɵinject(i0__namespace.NgZone), i0__namespace.ɵɵinject(i4__namespace.Overlay), i0__namespace.ɵɵinject(i5__namespace.DOCUMENT)); }, token: ThyGuider, providedIn: "root" });
    ThyGuider.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ThyGuider.ctorParameters = function () { return [
        { type: i0.RendererFactory2 },
        { type: i1.ThyPopover },
        { type: i2.Router },
        { type: ThyGuiderManager },
        { type: i0.NgZone },
        { type: i4.Overlay },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i5.DOCUMENT,] }] }
    ]; };

    var ThyGuiderTargetDirective = /** @class */ (function () {
        function ThyGuiderTargetDirective(guiderManager, el, ngZone) {
            this.guiderManager = guiderManager;
            this.el = el;
            this.ngZone = ngZone;
        }
        ThyGuiderTargetDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.guiderManager.addStepTarget(this.target, this.el.nativeElement);
            this.ngZone.onStable.pipe(operators.take(1)).subscribe(function () {
                var _a = _this.guiderManager.getActive(), key = _a.key, guiderRef = _a.guiderRef;
                if (key === _this.target) {
                    var index_1 = guiderRef.steps.findIndex(function (step) { return step.key === _this.target; });
                    _this.ngZone.run(function () {
                        guiderRef.active(index_1);
                    });
                }
            });
        };
        ThyGuiderTargetDirective.prototype.ngAfterViewInit = function () { };
        ThyGuiderTargetDirective.prototype.ngOnDestroy = function () {
            var guiderRef = this.guiderManager.getActive().guiderRef;
            if (guiderRef) {
                guiderRef.close();
            }
            this.guiderManager.removeStepTarget(this.target);
        };
        return ThyGuiderTargetDirective;
    }());
    ThyGuiderTargetDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[thyGuiderTarget]', exportAs: 'thyGuiderTarget' },] }
    ];
    ThyGuiderTargetDirective.ctorParameters = function () { return [
        { type: ThyGuiderManager },
        { type: i0.ElementRef },
        { type: i0.NgZone }
    ]; };
    ThyGuiderTargetDirective.propDecorators = {
        target: [{ type: i0.Input, args: ['thyGuiderTarget',] }]
    };

    var ThyGuiderHintComponent = /** @class */ (function () {
        function ThyGuiderHintComponent() {
            this.guiderHint = true;
        }
        ThyGuiderHintComponent.prototype.ngOnInit = function () {
            this.setDescription(this.stepRef.step.data.description);
        };
        ThyGuiderHintComponent.prototype.setDescription = function (value) {
            if (util.helpers.isString(value)) {
                this.descriptionString = value;
            }
            else {
                this.descriptionTemplateRef = value;
            }
        };
        ThyGuiderHintComponent.prototype.jump = function () {
            this.guiderRef.end();
        };
        ThyGuiderHintComponent.prototype.prev = function () {
            this.guiderRef.previous();
        };
        ThyGuiderHintComponent.prototype.next = function () {
            this.guiderRef.next();
        };
        ThyGuiderHintComponent.prototype.end = function () {
            this.guiderRef.end();
        };
        ThyGuiderHintComponent.prototype.trackByFn = function (index, step) {
            return step.key || index;
        };
        return ThyGuiderHintComponent;
    }());
    ThyGuiderHintComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'thy-guider-hint',
                    template: "<div class=\"thy-guider-tip-top\">\n  <img [src]=\"stepRef.step.data.image\" [alt]=\"stepRef.step.data.title\" />\n  <a href=\"javascript:;\" class=\"thy-guider-tip-top-btn\" (click)=\"jump()\">\u8DF3\u8FC7</a>\n</div>\n<div class=\"thy-guider-tip-content bg-white\">\n  <div class=\"thy-guider-tip-content-title\">{{ stepRef.step.data.title }}</div>\n  <div class=\"thy-guider-tip-content-description\">\n    <ng-container *ngIf=\"descriptionTemplateRef; else stringTemplateRef\">\n      <ng-template [ngTemplateOutlet]=\"descriptionTemplateRef\"></ng-template>\n    </ng-container>\n    <ng-template #stringTemplateRef>{{ descriptionString }}</ng-template>\n  </div>\n  <div class=\"thy-guider-tip-step\">\n    <div class=\"thy-guider-tip-step-pagination\">\n      <span\n        class=\"pagination-item\"\n        *ngFor=\"let step of guiderRef.steps; let i = index; trackBy: trackByFn\"\n        [ngClass]=\"{ active: i === stepRef.stepIndex }\"\n      ></span>\n    </div>\n    <div class=\"thy-guider-tip-step-btn\">\n      <ng-container *ngIf=\"stepRef.stepIndex !== 0\">\n        <a href=\"javascript:;\" (click)=\"prev()\" class=\"thy-guider-tip-step-pre\">\u4E0A\u4E00\u6B65</a>\n      </ng-container>\n      <ng-container *ngIf=\"stepRef.stepIndex !== guiderRef.steps.length - 1; else finish\">\n        <a href=\"javascript:;\" (click)=\"next()\" class=\"thy-guider-tip-step-next\">\u4E0B\u4E00\u6B65</a>\n      </ng-container>\n      <ng-template #finish>\n        <a href=\"javascript:;\" (click)=\"end()\" class=\"thy-guider-tip-step-next\">\u5B8C\u6210</a>\n      </ng-template>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    ThyGuiderHintComponent.ctorParameters = function () { return []; };
    ThyGuiderHintComponent.propDecorators = {
        guiderHint: [{ type: i0.HostBinding, args: ['class.thy-guider-tip-container',] }]
    };
    defaultGuiderPositionConfig.hintComponent = ThyGuiderHintComponent;

    var ThyGuiderModule = /** @class */ (function () {
        function ThyGuiderModule() {
        }
        return ThyGuiderModule;
    }());
    ThyGuiderModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i5.CommonModule, shared.ThySharedModule, icon.ThyIconModule, button.ThyButtonModule, i1.ThyPopoverModule],
                    declarations: [ThyGuiderHintComponent, ThyGuiderTargetDirective],
                    exports: [ThyGuiderHintComponent, ThyGuiderTargetDirective],
                    entryComponents: [ThyGuiderHintComponent],
                    providers: [ThyGuider]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyGuider = ThyGuider;
    exports.ThyGuiderConfig = ThyGuiderConfig;
    exports.ThyGuiderHintComponent = ThyGuiderHintComponent;
    exports.ThyGuiderManager = ThyGuiderManager;
    exports.ThyGuiderModule = ThyGuiderModule;
    exports.ThyGuiderRef = ThyGuiderRef;
    exports.ThyGuiderStepRef = ThyGuiderStepRef;
    exports.ThyGuiderTargetDirective = ThyGuiderTargetDirective;
    exports.defaultGuiderPositionConfig = defaultGuiderPositionConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-guider.umd.js.map

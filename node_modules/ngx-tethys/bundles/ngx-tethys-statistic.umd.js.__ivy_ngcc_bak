(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('ngx-tethys/shared'), require('ngx-tethys/util'), require('ngx-tethys/core'), require('ngx-tethys/icon')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/statistic', ['exports', '@angular/common', '@angular/core', 'ngx-tethys/shared', 'ngx-tethys/util', 'ngx-tethys/core', 'ngx-tethys/icon'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].statistic = {}), global.ng.common, global.ng.core, global['ngx-tethys'].shared, global['ngx-tethys'].util, global['ngx-tethys'].core, global['ngx-tethys'].icon));
}(this, (function (exports, common, core, shared, util, core$1, icon) { 'use strict';

    var ThyStatisticComponent = /** @class */ (function () {
        function ThyStatisticComponent(elementRef, updateHostClassService, renderer) {
            this.elementRef = elementRef;
            this.updateHostClassService = updateHostClassService;
            this.renderer = renderer;
            this._initialized = false;
            this.class = true;
            this.thyValueStyle = {};
            this.thyTitlePosition = 'bottom';
            this.updateHostClassService.initializeElement(elementRef.nativeElement);
        }
        Object.defineProperty(ThyStatisticComponent.prototype, "prefix", {
            set: function (value) {
                this.prefixTemplate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "thyPrefixTemplate", {
            set: function (value) {
                this.prefixTemplate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "value", {
            set: function (value) {
                this.valueTemplate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "thyValueTemplate", {
            set: function (value) {
                this.valueTemplate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "title", {
            set: function (value) {
                this.titleTemplate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "thyTitleTemplate", {
            set: function (value) {
                this.titleTemplate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "suffix", {
            set: function (value) {
                this.suffixTemplate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "thySuffixTemplate", {
            set: function (value) {
                this.suffixTemplate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "thyShape", {
            set: function (value) {
                this._shape = value;
                if (this._initialized) {
                    this._setClassesByType();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyStatisticComponent.prototype, "thySize", {
            set: function (value) {
                this._size = value;
                if (this._initialized) {
                    this._setClassesByType();
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyStatisticComponent.prototype.ngOnInit = function () {
            this._setClassesByType();
            this._initialized = true;
        };
        ThyStatisticComponent.prototype.setColor = function (color) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'color', color);
            if (this._shape === 'card') {
                this.renderer.setStyle(this.elementRef.nativeElement, 'border-color', color);
                this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', util.hexToRgb(color, 0.05));
            }
        };
        ThyStatisticComponent.prototype._setClassesByType = function () {
            var classNames = [];
            if (this.thyColor) {
                if (RegExp(/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/).test(this.thyColor)) {
                    this.setColor(this.thyColor);
                }
                else {
                    classNames.push("thy-statistic-" + this.thyColor);
                }
            }
            if (this._shape) {
                classNames.push("thy-statistic-" + this._shape);
            }
            if (!this._size) {
                this._size = 'default';
            }
            classNames.push("thy-statistic-" + this._size);
            this.renderer.setStyle(this.elementRef.nativeElement, 'font-size', this.thySize);
            this.updateHostClassService.updateClass(classNames);
        };
        return ThyStatisticComponent;
    }());
    ThyStatisticComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thy-statistic',
                    template: "<ng-container [ngTemplateOutlet]=\"title\" *ngIf=\"(thyTitle || titleTemplate) && thyTitlePosition === 'top'\"></ng-container>\n<div class=\"thy-statistic-content\" [ngStyle]=\"thyValueStyle\">\n  <span *ngIf=\"thyPrefix || prefixTemplate\" class=\"thy-statistic-content-prefix\">\n    <span *ngIf=\"thyPrefix\">{{ thyPrefix }}</span>\n    <ng-container *ngIf=\"prefixTemplate\" [ngTemplateOutlet]=\"prefixTemplate\"></ng-container>\n  </span>\n\n  <span class=\"thy-statistic-content-value\">\n    <span *ngIf=\"!valueTemplate\">{{ thyValue }}</span>\n    <ng-container *ngIf=\"valueTemplate\" [ngTemplateOutlet]=\"valueTemplate\"></ng-container>\n  </span>\n\n  <span *ngIf=\"thySuffix || suffixTemplate\" class=\"thy-statistic-content-suffix\">\n    <span *ngIf=\"thySuffix\">{{ thySuffix }}</span>\n    <ng-container *ngIf=\"suffixTemplate\" [ngTemplateOutlet]=\"suffixTemplate\"></ng-container>\n  </span>\n</div>\n<ng-container [ngTemplateOutlet]=\"title\" *ngIf=\"(thyTitle || titleTemplate) && thyTitlePosition === 'bottom'\"></ng-container>\n\n<ng-template #title>\n  <div class=\"thy-statistic-title\">\n    <span *ngIf=\"thyTitle\">{{ thyTitle }}</span>\n    <ng-container [ngTemplateOutlet]=\"titleTemplate\"></ng-container>\n  </div>\n</ng-template>\n",
                    providers: [core$1.UpdateHostClassService]
                },] }
    ];
    ThyStatisticComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core$1.UpdateHostClassService },
        { type: core.Renderer2 }
    ]; };
    ThyStatisticComponent.propDecorators = {
        class: [{ type: core.HostBinding, args: ["class.thy-statistic",] }],
        thyValueStyle: [{ type: core.Input }],
        thyPrefix: [{ type: core.Input }],
        prefix: [{ type: core.ContentChild, args: ['prefix', { static: true },] }],
        thyPrefixTemplate: [{ type: core.Input }],
        thyValue: [{ type: core.Input }],
        value: [{ type: core.ContentChild, args: ['value', { static: true },] }],
        thyValueTemplate: [{ type: core.Input }],
        thyTitle: [{ type: core.Input }],
        title: [{ type: core.ContentChild, args: ['title', { static: true },] }],
        thyTitleTemplate: [{ type: core.Input }],
        thySuffix: [{ type: core.Input }],
        suffix: [{ type: core.ContentChild, args: ['suffix', { static: true },] }],
        thySuffixTemplate: [{ type: core.Input }],
        thyTitlePosition: [{ type: core.Input }],
        thyShape: [{ type: core.Input }],
        thyColor: [{ type: core.Input }],
        thySize: [{ type: core.Input }]
    };

    var ThyStatisticModule = /** @class */ (function () {
        function ThyStatisticModule() {
        }
        return ThyStatisticModule;
    }());
    ThyStatisticModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ThyStatisticComponent],
                    imports: [common.CommonModule, shared.ThySharedModule, icon.ThyIconModule],
                    exports: [ThyStatisticComponent],
                    providers: []
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ThyStatisticComponent = ThyStatisticComponent;
    exports.ThyStatisticModule = ThyStatisticModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tethys-statistic.umd.js.map

{"version":3,"sources":["../../src/testing/events.ts","../../src/testing/dispatcher-events.ts","../../src/testing/thy-icon.ts","../../src/testing/data-transfer.ts","../../src/testing/element-focus.ts","../../src/testing/type-in-element.ts"],"names":["createMouseEvent","type","clientX","clientY","button","modifiers","relatedTarget","event","document","createEvent","originalPreventDefault","preventDefault","bind","screenX","screenY","initMouseEvent","window","control","alt","shift","meta","defineReadonlyEventProperty","createPointerEvent","options","isPrimary","PointerEvent","Object","assign","bubbles","cancelable","view","createTouchEvent","pageX","pageY","touchDetails","initUIEvent","createKeyboardEvent","keyCode","key","undefined","initKeyEvent","modifiersList","initKeyboardEvent","trim","createFakeEvent","canBubble","initEvent","propertyName","value","defineProperty","get","configurable","dispatchEvent","node","dispatchFakeEvent","bypassSanitizeProvider","provide","Sanitizer","useValue","sanitize","context","html","defaultInlineIconSet","FakeDataTransferItem","file","kind","this","prototype","getAsFile","getAsString","callback","Error","webkitGetAsEntry","FakeDataTransfer","files","items","dataByFormat","dropEffect","effectAllowed","types","getData","dataFormat","setDragImage","clearData","array","item","index","indexOf","splice","setData","data","push","dataTransfer","x","y","inject","ThyIconRegistry","DomSanitizer","iconRegistry","domSanitizer","addSvgIconSetLiteral","bypassSecurityTrustHtml","element","focus","blur"],"mappings":"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","sourcesContent":["import { ModifierKeys } from '@angular/cdk/testing';\n\n/**\n * Creates a browser MouseEvent with the specified options.\n * @docs-private\n */\nexport function createMouseEvent(\n    type: string,\n    clientX = 0,\n    clientY = 0,\n    button = 0,\n    modifiers: ModifierKeys = {},\n    relatedTarget?: Element\n) {\n    const event = document.createEvent('MouseEvent');\n    const originalPreventDefault = event.preventDefault.bind(event);\n\n    // Note: We cannot determine the position of the mouse event based on the screen\n    // because the dimensions and position of the browser window are not available\n    // To provide reasonable `screenX` and `screenY` coordinates, we simply use the\n    // client coordinates as if the browser is opened in fullscreen.\n    const screenX = clientX;\n    const screenY = clientY;\n\n    event.initMouseEvent(\n        type,\n        /* canBubble */ true,\n        /* cancelable */ true,\n        /* view */ window,\n        /* detail */ 0,\n        /* screenX */ screenX,\n        /* screenY */ screenY,\n        /* clientX */ clientX,\n        /* clientY */ clientY,\n        /* ctrlKey */ !!modifiers.control,\n        /* altKey */ !!modifiers.alt,\n        /* shiftKey */ !!modifiers.shift,\n        /* metaKey */ !!modifiers.meta,\n        /* button */ button,\n        /* relatedTarget */ relatedTarget\n    );\n\n    // `initMouseEvent` doesn't allow us to pass the `buttons` and\n    // defaults it to 0 which looks like a fake event.\n    defineReadonlyEventProperty(event, 'buttons', 1);\n\n    // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.\n    event.preventDefault = function() {\n        defineReadonlyEventProperty(event, 'defaultPrevented', true);\n        return originalPreventDefault();\n    };\n\n    return event;\n}\n\n/**\n * Creates a browser `PointerEvent` with the specified options. Pointer events\n * by default will appear as if they are the primary pointer of their type.\n * https://www.w3.org/TR/pointerevents2/#dom-pointerevent-isprimary.\n *\n * For example, if pointer events for a multi-touch interaction are created, the non-primary\n * pointer touches would need to be represented by non-primary pointer events.\n *\n * @docs-private\n */\nexport function createPointerEvent(type: string, clientX = 0, clientY = 0, options: PointerEventInit = { isPrimary: true }) {\n    return new PointerEvent(type, {\n        bubbles: true,\n        cancelable: true,\n        view: window,\n        clientX,\n        clientY,\n        ...options\n    });\n}\n\n/**\n * Creates a browser TouchEvent with the specified pointer coordinates.\n * @docs-private\n */\nexport function createTouchEvent(type: string, pageX = 0, pageY = 0) {\n    // In favor of creating events that work for most of the browsers, the event is created\n    // as a basic UI Event. The necessary details for the event will be set manually.\n    const event = document.createEvent('UIEvent');\n    const touchDetails = { pageX, pageY };\n\n    // TS3.6 removes the initUIEvent method and suggests porting to \"new UIEvent()\".\n    (event as any).initUIEvent(type, true, true, window, 0);\n\n    // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n    // the touch details.\n    defineReadonlyEventProperty(event, 'touches', [touchDetails]);\n    defineReadonlyEventProperty(event, 'targetTouches', [touchDetails]);\n    defineReadonlyEventProperty(event, 'changedTouches', [touchDetails]);\n\n    return event;\n}\n\n/**\n * Creates a keyboard event with the specified key and modifiers.\n * @docs-private\n */\nexport function createKeyboardEvent(type: string, keyCode: number = 0, key: string = '', modifiers: ModifierKeys = {}) {\n    const event = document.createEvent('KeyboardEvent');\n    const originalPreventDefault = event.preventDefault.bind(event);\n\n    // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyEvent.\n    if ((event as any).initKeyEvent !== undefined) {\n        (event as any).initKeyEvent(type, true, true, window, modifiers.control, modifiers.alt, modifiers.shift, modifiers.meta, keyCode);\n    } else {\n        // `initKeyboardEvent` expects to receive modifiers as a whitespace-delimited string\n        // See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent\n        let modifiersList = '';\n\n        if (modifiers.control) {\n            modifiersList += 'Control ';\n        }\n\n        if (modifiers.alt) {\n            modifiersList += 'Alt ';\n        }\n\n        if (modifiers.shift) {\n            modifiersList += 'Shift ';\n        }\n\n        if (modifiers.meta) {\n            modifiersList += 'Meta ';\n        }\n\n        // TS3.6 removed the `initKeyboardEvent` method and suggested porting to\n        // `new KeyboardEvent()` constructor. We cannot use that as we support IE11.\n        // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent.\n        (event as any).initKeyboardEvent(\n            type,\n            true /* canBubble */,\n            true /* cancelable */,\n            window /* view */,\n            0 /* char */,\n            key /* key */,\n            0 /* location */,\n            modifiersList.trim() /* modifiersList */,\n            false /* repeat */\n        );\n    }\n\n    // Webkit Browsers don't set the keyCode when calling the init function.\n    // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n    defineReadonlyEventProperty(event, 'keyCode', keyCode);\n    defineReadonlyEventProperty(event, 'key', key);\n    defineReadonlyEventProperty(event, 'ctrlKey', !!modifiers.control);\n    defineReadonlyEventProperty(event, 'altKey', !!modifiers.alt);\n    defineReadonlyEventProperty(event, 'shiftKey', !!modifiers.shift);\n    defineReadonlyEventProperty(event, 'metaKey', !!modifiers.meta);\n\n    // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.\n    event.preventDefault = function() {\n        defineReadonlyEventProperty(event, 'defaultPrevented', true);\n        return originalPreventDefault();\n    };\n\n    return event;\n}\n\n/**\n * Creates a fake event object with any desired event type.\n * @docs-private\n */\nexport function createFakeEvent(type: string, canBubble = false, cancelable = true) {\n    const event = document.createEvent('Event');\n    event.initEvent(type, canBubble, cancelable);\n    return event;\n}\n\nexport function createDragEvent(type: string, dataTransfer: DataTransfer = null, canBubble = false, cancelable = true) {\n    const event = document.createEvent('DragEvent');\n    event.initEvent(type, canBubble, cancelable);\n    defineReadonlyEventProperty(event, 'dataTransfer', dataTransfer);\n    return event;\n}\n\n/**\n * Defines a readonly property on the given event object. Readonly properties on an event object\n * are always set as configurable as that matches default readonly properties for DOM event objects.\n */\nfunction defineReadonlyEventProperty(event: Event, propertyName: string, value: any) {\n    Object.defineProperty(event, propertyName, { get: () => value, configurable: true });\n}\n","import { ModifierKeys } from '@angular/cdk/testing';\nimport { createFakeEvent, createKeyboardEvent, createMouseEvent, createPointerEvent, createTouchEvent } from './events';\n\n/**\n * Utility to dispatch any event on a Node.\n * @docs-private\n */\nexport function dispatchEvent<T extends Event>(node: Node | Window, event: T): T {\n    node.dispatchEvent(event);\n    return event;\n}\n\n/**\n * Shorthand to dispatch a fake event on a specified node.\n * @docs-private\n */\nexport function dispatchFakeEvent(node: Node | Window, type: string, canBubble?: boolean): Event {\n    return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n\n/**\n * Shorthand to dispatch a keyboard event with a specified key code and\n * optional modifiers.\n * @docs-private\n */\nexport function dispatchKeyboardEvent(node: Node, type: string, keyCode?: number, key?: string, modifiers?: ModifierKeys): KeyboardEvent {\n    return dispatchEvent(node, createKeyboardEvent(type, keyCode, key, modifiers));\n}\n\n/**\n * Shorthand to dispatch a mouse event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchMouseEvent(\n    node: Node,\n    type: string,\n    clientX = 0,\n    clientY = 0,\n    button?: number,\n    modifiers?: ModifierKeys,\n    relatedTarget?: Element\n): MouseEvent {\n    return dispatchEvent(node, createMouseEvent(type, clientX, clientY, button, modifiers, relatedTarget));\n}\n\n/**\n * Shorthand to dispatch a pointer event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchPointerEvent(node: Node, type: string, clientX = 0, clientY = 0, options?: PointerEventInit): PointerEvent {\n    return dispatchEvent(node, createPointerEvent(type, clientX, clientY, options)) as PointerEvent;\n}\n\n/**\n * Shorthand to dispatch a touch event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchTouchEvent(node: Node, type: string, x = 0, y = 0) {\n    return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n","import { Provider, Sanitizer, SecurityContext } from '@angular/core';\nimport { inject } from '@angular/core/testing';\nimport { ThyIconRegistry } from 'ngx-tethys/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nexport const bypassSanitizeProvider: Provider = {\n    provide: Sanitizer,\n    useValue: {\n        sanitize: (context: SecurityContext, html: string) => html\n    }\n};\n\nexport const defaultInlineIconSet = `\n  <svg>\n    <defs>\n        <svg id=\"inbox\"></svg>\n        <svg id=\"close\"></svg>\n        <svg id=\"close-bold\"></svg>\n        <svg id=\"calendar-check\"></svg>\n        <svg id=\"calendar\"></svg>\n        <svg id=\"angle-down\"></svg>\n        <svg id=\"check\"></svg>\n        <svg id=\"application-fill\"></svg>\n        <svg id=\"angle-right\"></svg>\n        <svg id=\"minus-circle-fill\"></svg>\n        <svg id=\"check-circle-fill\"></svg>\n        <svg id=\"waring-fill\"></svg>\n        <svg id=\"close-circle-fill\"></svg>\n        <svg id=\"question-circle-fill\"></svg>\n        <svg id=\"more-bold\"></svg>\n        <svg id=\"filter\"></svg>\n        <svg id=\"close-circle-bold-fill\"></svg>\n    </defs>\n  </svg>\n`;\n\nexport const defaultSvgHtml = `\n<svg viewBox=\"0 0 16 16\" id=\"close1\" xmlns=\"http://www.w3.org/2000/svg\">\n   <path d=\"M7.978 11.997l-.005.006L2.3 6.33l.83-.831 4.848 4.848L12.826 5.5l.83.83-5.673 5.673-.005-.006z\"/>\n</svg>`;\n\nexport const injectDefaultSvgIconSet = () => {\n    inject([ThyIconRegistry, DomSanitizer], (iconRegistry: ThyIconRegistry, domSanitizer: DomSanitizer) => {\n        iconRegistry.addSvgIconSetLiteral(domSanitizer.bypassSecurityTrustHtml(defaultInlineIconSet));\n    })();\n};\n","function removeFromArray<T>(array: T[], item: T) {\n    const index = array.indexOf(item);\n\n    if (index >= 0) {\n        array.splice(index, 1);\n    }\n}\n\nexport class FakeDataTransferItem implements DataTransferItem {\n    private file: File;\n\n    kind: string;\n    type: string;\n\n    constructor(file: File, kind: string) {\n        this.file = file;\n        this.kind = kind;\n    }\n\n    getAsFile(): File {\n        return this.file;\n    }\n\n    getAsString(callback: FunctionStringCallback): void {\n        throw new Error('Method not implemented.');\n    }\n\n    webkitGetAsEntry() {\n        return this.file;\n    }\n}\n\nexport class FakeDataTransfer implements DataTransfer {\n    dataByFormat = {};\n    dropEffect: 'none' | 'copy' | 'link' | 'move' = 'none';\n    effectAllowed: 'none' | 'copy' | 'copyLink' | 'copyMove' | 'link' | 'linkMove' | 'move' | 'all' | 'uninitialized' = 'all';\n    files: FileList;\n    types: string[] = [];\n    items: DataTransferItemList;\n\n    constructor(files?: File[], items?: DataTransferItem[]) {\n        this.files = files as any;\n        this.items = items as any;\n    }\n\n    clearData(dataFormat: string) {\n        if (dataFormat) {\n            delete this.dataByFormat[dataFormat];\n            removeFromArray(this.types, dataFormat);\n        } else {\n            this.dataByFormat = {};\n            this.types = [];\n        }\n    }\n\n    getData = function(dataFormat: string) {\n        return this.dataByFormat[dataFormat];\n    };\n\n    setData(dataFormat: string, data: string) {\n        this.dataByFormat[dataFormat] = data;\n\n        if (this.types.indexOf(dataFormat) < 0) {\n            this.types.push(dataFormat);\n        }\n\n        return true;\n    }\n\n    setDragImage = function() {\n        // don't do anything (the stub just makes sure there is no error thrown if someone tries to call the method)\n    };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { dispatchFakeEvent } from './dispatcher-events';\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n */\nexport function patchElementFocus(element: HTMLElement) {\n    element.focus = () => dispatchFakeEvent(element, 'focus');\n    element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { dispatchFakeEvent } from './dispatcher-events';\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param value Value to be set on the input.\n * @param element Element onto which to set the value.\n */\nexport function typeInElement(value: string, element: HTMLInputElement) {\n    element.focus();\n    element.value = value;\n    dispatchFakeEvent(element, 'input');\n}\n"]}
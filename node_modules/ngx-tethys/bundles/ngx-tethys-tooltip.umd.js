(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('ngx-tethys/core'),require('@angular/common'),require('@angular/cdk/overlay'),require('@angular/cdk/platform'),require('@angular/cdk/a11y'),exports, require('@angular/cdk/overlay'), require('@angular/cdk/a11y'), require('@angular/common'), require('@angular/core'), require('@angular/cdk/platform'), require('rxjs/operators'), require('ngx-tethys/util'), require('@angular/cdk/portal'), require('rxjs'), require('@angular/animations'), require('ngx-tethys/core')) :
    typeof define === 'function' && define.amd ? define('ngx-tethys/tooltip', ['@angular/core','ngx-tethys/core','@angular/common','@angular/cdk/overlay','@angular/cdk/platform','@angular/cdk/a11y','exports', '@angular/cdk/overlay', '@angular/cdk/a11y', '@angular/common', '@angular/core', '@angular/cdk/platform', 'rxjs/operators', 'ngx-tethys/util', '@angular/cdk/portal', 'rxjs', '@angular/animations', 'ngx-tethys/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ngxTethys.core,global.ng.common,global.ng.cdk.overlay,global.ng.cdk.platform,global.ng.cdk.a11y,(global['ngx-tethys'] = global['ngx-tethys'] || {}, global['ngx-tethys'].tooltip = {}), global.ng.cdk.overlay, global.ng.cdk.a11y, global.ng.common, global.ng.core, global.ng.cdk.platform, global.rxjs.operators, global['ngx-tethys'].util, global.ng.cdk.portal, global.rxjs, global.ng.animations, global['ngx-tethys'].core));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,exports, overlay, a11y, common, core, platform, operators, util, portal, rxjs, animations, core$1) { 
function ThyTooltipComponent_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var _c0 = function (a0) { return { $implicit: a0 }; };
function ThyTooltipComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ThyTooltipComponent_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.content)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.data));
} }
function ThyTooltipComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.content, " ");
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var DEFAULT_TOOLTIP_OPTIONS = {
        showDelay: 200,
        hideDelay: 100,
        touchendHideDelay: 1500
    };

    // 'cubic-bezier(0, 0, 0.2, 1)';
    // cubic-bezier(.17, .86, .73, .14)
    var CUBIC_BEZIER = 'cubic-bezier(0.08, 0.82, 0.17, 1)';
    /**
     * Animations used by ThyTooltip.
     * @docs-private
     */
    var thyTooltipAnimations = {
        /** Animation that transitions a tooltip in and out. */
        tooltipState: animations.trigger('state', [
            animations.state('initial, void, hidden', animations.style({ opacity: 0, transform: 'scale(0)' })),
            animations.state('visible', animations.style({ transform: 'scale(1)' })),
            animations.transition('* => visible', animations.animate("200ms " + CUBIC_BEZIER, animations.keyframes([
                animations.style({ opacity: 0, transform: 'scale(0)', offset: 0 }),
                animations.style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),
                animations.style({ opacity: 1, transform: 'scale(1)', offset: 1 })
            ]))),
            animations.transition('* => hidden', animations.animate("100ms " + CUBIC_BEZIER, animations.style({ opacity: 0 })))
        ])
    };

    var ThyTooltipComponent = /** @class */ (function () {
        function ThyTooltipComponent(changeDetectorRef, updateHostClassService, elementRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.updateHostClassService = updateHostClassService;
            this.addTooltipContainerClass = true;
            this.onHide = new rxjs.Subject();
            this.closeOnInteraction = false;
            this.visibility = 'initial';
            this.tooltipClasses = [];
            this.isTemplateRef = false;
            this.updateHostClassService.initializeElement(elementRef);
        }
        Object.defineProperty(ThyTooltipComponent.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (value) {
                this._content = value;
                this.isTemplateRef = value instanceof core.TemplateRef;
            },
            enumerable: false,
            configurable: true
        });
        ThyTooltipComponent.prototype.updateClasses = function () {
            var classes = [];
            if (this.tooltipClasses) {
                classes = classes.concat(this.tooltipClasses);
            }
            this.updateHostClassService.updateClass(classes);
        };
        ThyTooltipComponent.prototype.ngOnInit = function () { };
        ThyTooltipComponent.prototype.markForCheck = function () {
            this.changeDetectorRef.markForCheck();
        };
        ThyTooltipComponent.prototype.isVisible = function () {
            return this.visibility === 'visible';
        };
        ThyTooltipComponent.prototype.show = function (delay) {
            var _this = this;
            // Cancel the delayed hide if it is scheduled
            if (this.hideTimeoutId) {
                clearTimeout(this.hideTimeoutId);
                this.hideTimeoutId = null;
            }
            // Body interactions should cancel the tooltip if there is a delay in showing.
            this.closeOnInteraction = true;
            this.showTimeoutId = setTimeout(function () {
                _this.visibility = 'visible';
                _this.showTimeoutId = null;
                _this.markForCheck();
            }, delay);
        };
        ThyTooltipComponent.prototype.hide = function (delay) {
            var _this = this;
            // Cancel the delayed show if it is scheduled
            if (this.showTimeoutId) {
                clearTimeout(this.showTimeoutId);
                this.showTimeoutId = null;
            }
            this.hideTimeoutId = setTimeout(function () {
                _this.visibility = 'hidden';
                _this.hideTimeoutId = null;
                _this.markForCheck();
            }, delay);
        };
        ThyTooltipComponent.prototype.animationStart = function () {
            this.closeOnInteraction = false;
        };
        ThyTooltipComponent.prototype.animationDone = function (event) {
            var toState = event.toState;
            if (toState === 'hidden' && !this.isVisible()) {
                this.onHide.next();
            }
            if (toState === 'visible' || toState === 'hidden') {
                this.closeOnInteraction = true;
            }
        };
        ThyTooltipComponent.prototype.afterHidden = function () {
            return this.onHide.asObservable();
        };
        ThyTooltipComponent.prototype.setTooltipClass = function (classes) {
            this.tooltipClasses = util.coerceArray(classes);
            this.updateClasses();
            // this.markForCheck();
        };
ThyTooltipComponent.ɵfac = function ThyTooltipComponent_Factory(t) { return new (t || ThyTooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UpdateHostClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ThyTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ThyTooltipComponent, selectors: [["thy-tooltip"]], hostVars: 3, hostBindings: function ThyTooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵsyntheticHostListener("@state.start", function ThyTooltipComponent_animation_state_start_HostBindingHandler() { return ctx.animationStart(); })("@state.done", function ThyTooltipComponent_animation_state_done_HostBindingHandler($event) { return ctx.animationDone($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵsyntheticHostProperty("@state", ctx.visibility);
        ɵngcc0.ɵɵclassProp("thy-tooltip", ctx.addTooltipContainerClass);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([core$1.UpdateHostClassService])], decls: 5, vars: 2, consts: [[1, "thy-tooltip-arrow"], [1, "thy-tooltip-content"], [4, "ngIf", "ngIfElse"], ["text", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function ThyTooltipComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ThyTooltipComponent_ng_container_2_Template, 2, 4, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, ThyTooltipComponent_ng_template_3_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isTemplateRef)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet], encapsulation: 2, data: { animation: [thyTooltipAnimations.tooltipState] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTooltipComponent, [{
        type: core.Component,
        args: [{
                selector: 'thy-tooltip',
                template: "<div class=\"thy-tooltip-arrow\"></div>\n<div class=\"thy-tooltip-content\">\n  <ng-container *ngIf=\"isTemplateRef; else text\">\n    <ng-container *ngTemplateOutlet=\"content; context: { $implicit: data }\"></ng-container>\n  </ng-container>\n  <ng-template #text>\n    {{ content }}\n  </ng-template>\n</div>\n",
                encapsulation: core.ViewEncapsulation.None,
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                animations: [thyTooltipAnimations.tooltipState],
                host: {
                    '[@state]': 'visibility',
                    '(@state.start)': 'animationStart()',
                    '(@state.done)': 'animationDone($event)'
                },
                providers: [core$1.UpdateHostClassService]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UpdateHostClassService }, { type: ɵngcc0.ElementRef }]; }, { addTooltipContainerClass: [{
            type: core.HostBinding,
            args: ["class.thy-tooltip"]
        }] }); })();
        return ThyTooltipComponent;
    }());
    ThyTooltipComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core$1.UpdateHostClassService },
        { type: core.ElementRef }
    ]; };
    ThyTooltipComponent.propDecorators = {
        addTooltipContainerClass: [{ type: core.HostBinding, args: ["class.thy-tooltip",] }]
    };

    var ThyTooltipConfig = /** @class */ (function () {
        function ThyTooltipConfig() {
        }
        return ThyTooltipConfig;
    }());
    var THY_TOOLTIP_DEFAULT_CONFIG_TOKEN = new core.InjectionToken('thy-tooltip-default-config');
    var thyTooltipDefaultConfig = {
        offset: 4,
        tooltipPin: false,
        scrollThrottleSeconds: 20,
        tooltipPanelClass: 'thy-tooltip-panel'
    };
    var THY_TOOLTIP_DEFAULT_CONFIG_PROVIDER = {
        provide: THY_TOOLTIP_DEFAULT_CONFIG_TOKEN,
        useValue: thyTooltipDefaultConfig
    };

    var ThyTooltipDirective = /** @class */ (function (_super) {
        __extends(ThyTooltipDirective, _super);
        function ThyTooltipDirective(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, focusMonitor, thyTooltipConfig) {
            var _this = _super.call(this, elementRef, platform, focusMonitor, ngZone) || this;
            _this.overlay = overlay;
            _this.scrollDispatcher = scrollDispatcher;
            _this.viewContainerRef = viewContainerRef;
            _this.thyTooltipConfig = thyTooltipConfig;
            _this.options = DEFAULT_TOOLTIP_OPTIONS;
            _this.panelClassPrefix = 'thy-tooltip';
            _this.touchendHideDelay = _this.options.touchendHideDelay;
            // tslint:disable-next-line:no-input-rename
            _this.placement = 'top';
            // tslint:disable-next-line:no-input-rename
            _this.showDelay = _this.options.showDelay;
            // tslint:disable-next-line:no-input-rename
            _this.hideDelay = _this.options.hideDelay;
            _this._trigger = 'hover';
            _this.tooltipPin = _this.thyTooltipConfig.tooltipPin;
            _this.options = DEFAULT_TOOLTIP_OPTIONS;
            _this.scrollStrategy = overlay.scrollStrategies.reposition({
                scrollThrottle: _this.thyTooltipConfig.scrollThrottleSeconds
            });
            return _this;
        }
        Object.defineProperty(ThyTooltipDirective.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (value) {
                // If the content is not a string (e.g. number), convert it to a string and trim it.
                this._content = value && util.isString(value) ? ("" + value).trim() : value;
                if (!this._content && this.isTooltipVisible()) {
                    this.hide(0);
                }
                else {
                    this.updateTooltipContent();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTooltipDirective.prototype, "thyTooltipClass", {
            set: function (value) {
                this.tooltipClass = value;
                if (this.tooltipInstance) {
                    this.setTooltipClass(this.tooltipClass);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTooltipDirective.prototype, "thyTooltipTrigger", {
            // tslint:disable-next-line:no-input-rename
            set: function (value) {
                this.trigger = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThyTooltipDirective.prototype, "thyTooltipDisabled", {
            /** Disables the display of the tooltip. */
            set: function (value) {
                this.disabled = util.coerceBooleanProperty(value);
                // If tooltip is disabled, hide immediately.
                if (this.disabled) {
                    this.hide(0);
                }
            },
            enumerable: false,
            configurable: true
        });
        ThyTooltipDirective.prototype.detach = function () {
            if (this.overlayRef && this.overlayRef.hasAttached()) {
                this.overlayRef.detach();
            }
            this.tooltipInstance = null;
        };
        /** Create the overlay config and position strategy */
        ThyTooltipDirective.prototype.createOverlay = function () {
            var _this = this;
            if (this.overlayRef) {
                return this.overlayRef;
            }
            var scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);
            // Create connected position strategy that listens for scroll events to reposition.
            var strategy = this.overlay
                .position()
                .flexibleConnectedTo(this.elementRef)
                .withTransformOriginOn('.thy-tooltip-content')
                .withFlexibleDimensions(false)
                .withViewportMargin(8);
            strategy.withScrollableContainers(scrollableAncestors);
            strategy.positionChanges.pipe(operators.takeUntil(this.ngUnsubscribe$)).subscribe(function (change) {
                if (_this.tooltipInstance) {
                    if (change.scrollableViewProperties.isOverlayClipped && _this.tooltipInstance.isVisible()) {
                        // After position changes occur and the overlay is clipped by
                        // a parent scrollable then close the tooltip.
                        _this.ngZone.run(function () { return _this.hide(0); });
                    }
                }
            });
            this.overlayRef = this.overlay.create({
                positionStrategy: strategy,
                panelClass: this.thyTooltipConfig.tooltipPanelClass,
                scrollStrategy: this.scrollStrategy,
                hasBackdrop: this.trigger === 'click',
                backdropClass: 'thy-tooltip-backdrop'
            });
            this.updatePosition();
            this.overlayRef
                .detachments()
                .pipe(operators.takeUntil(this.ngUnsubscribe$))
                .subscribe(function () { return _this.detach(); });
            this.overlayRef.backdropClick().subscribe(function () {
                _this.overlayRef.detachBackdrop();
                _this.hide();
            });
            return this.overlayRef;
        };
        ThyTooltipDirective.prototype.updateTooltipContent = function () {
            var _this = this;
            // Must wait for the message to be painted to the tooltip so that the overlay can properly
            // calculate the correct positioning based on the size of the text.
            if (this.tooltipInstance) {
                this.tooltipInstance.content = this.content;
                this.tooltipInstance.data = this.data;
                this.tooltipInstance.markForCheck();
                this.ngZone.onMicrotaskEmpty
                    .asObservable()
                    .pipe(operators.take(1), operators.takeUntil(this.ngUnsubscribe$))
                    .subscribe(function () {
                    if (_this.tooltipInstance) {
                        _this.overlayRef.updatePosition();
                    }
                });
            }
        };
        /** Returns true if the tooltip is currently visible to the user */
        ThyTooltipDirective.prototype.isTooltipVisible = function () {
            return !!this.tooltipInstance && this.tooltipInstance.isVisible();
        };
        /** Updates the position of the current tooltip. */
        ThyTooltipDirective.prototype.updatePosition = function () {
            var position = this.overlayRef.getConfig().positionStrategy;
            var connectionPositions = core$1.getFlexiblePositions(this.placement, this.tooltipOffset || this.thyTooltipConfig.offset, this.panelClassPrefix);
            position.withPositions(connectionPositions);
        };
        ThyTooltipDirective.prototype.setTooltipClass = function (tooltipClass) {
            if (this.tooltipInstance) {
                this.tooltipInstance.setTooltipClass(tooltipClass);
            }
        };
        ThyTooltipDirective.prototype.ngOnInit = function () {
            this.initialize();
        };
        /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show 200ms */
        ThyTooltipDirective.prototype.show = function (delay) {
            var _this = this;
            if (delay === void 0) { delay = this.showDelay; }
            if (this.disabled ||
                !this.content ||
                (this.isTooltipVisible() && !this.tooltipInstance.showTimeoutId && !this.tooltipInstance.hideTimeoutId)) {
                return;
            }
            var overlayRef = this.createOverlay();
            this.detach();
            this.portal = this.portal || new portal.ComponentPortal(ThyTooltipComponent, this.viewContainerRef);
            this.tooltipInstance = overlayRef.attach(this.portal).instance;
            this.tooltipInstance
                .afterHidden()
                .pipe(operators.takeUntil(this.ngUnsubscribe$))
                .subscribe(function () { return _this.detach(); });
            this.setTooltipClass(this.tooltipClass);
            this.updateTooltipContent();
            this.tooltipInstance.show(delay);
        };
        /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide 100ms */
        ThyTooltipDirective.prototype.hide = function (delay) {
            if (delay === void 0) { delay = this.hideDelay; }
            if (this.tooltipInstance) {
                this.tooltipInstance.hide(delay);
            }
        };
        ThyTooltipDirective.prototype.ngOnDestroy = function () {
            this.hide(0);
            this.dispose();
            if (this.overlayRef) {
                this.tooltipInstance = null;
            }
        };
ThyTooltipDirective.ɵfac = function ThyTooltipDirective_Factory(t) { return new (t || ThyTooltipDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(THY_TOOLTIP_DEFAULT_CONFIG_TOKEN)); };
ThyTooltipDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ThyTooltipDirective, selectors: [["", "thyTooltip", ""], ["", "thy-tooltip", ""]], inputs: { content: ["thyTooltip", "content"], thyTooltipClass: "thyTooltipClass", thyTooltipTrigger: "thyTooltipTrigger", thyTooltipDisabled: "thyTooltipDisabled", placement: ["thyTooltipPlacement", "placement"], showDelay: ["thyTooltipShowDelay", "showDelay"], hideDelay: ["thyTooltipHideDelay", "hideDelay"], data: ["thyTooltipTemplateContext", "data"], tooltipOffset: ["thyTooltipOffset", "tooltipOffset"], tooltipPin: ["thyTooltipPin", "tooltipPin"] }, exportAs: ["thyTooltip"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTooltipDirective, [{
        type: core.Directive,
        args: [{
                selector: '[thyTooltip],[thy-tooltip]',
                exportAs: 'thyTooltip'
            }]
    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc4.Platform }, { type: ɵngcc5.FocusMonitor }, { type: ThyTooltipConfig, decorators: [{
                type: core.Inject,
                args: [THY_TOOLTIP_DEFAULT_CONFIG_TOKEN]
            }] }]; }, { content: [{
            type: core.Input,
            args: ['thyTooltip']
        }], thyTooltipClass: [{
            type: core.Input,
            args: ['thyTooltipClass']
        }], thyTooltipTrigger: [{
            type: core.Input,
            args: ['thyTooltipTrigger']
        }], thyTooltipDisabled: [{
            type: core.Input,
            args: ['thyTooltipDisabled']
        }], placement: [{
            type: core.Input,
            args: ['thyTooltipPlacement']
        }], showDelay: [{
            type: core.Input,
            args: ['thyTooltipShowDelay']
        }], hideDelay: [{
            type: core.Input,
            args: ['thyTooltipHideDelay']
        }], data: [{
            type: core.Input,
            args: ['thyTooltipTemplateContext']
        }], tooltipOffset: [{
            type: core.Input,
            args: ['thyTooltipOffset']
        }], tooltipPin: [{
            type: core.Input,
            args: ['thyTooltipPin']
        }] }); })();
        return ThyTooltipDirective;
    }(core$1.ThyOverlayDirectiveBase));
    ThyTooltipDirective.ctorParameters = function () { return [
        { type: overlay.Overlay },
        { type: core.ElementRef },
        { type: overlay.ScrollDispatcher },
        { type: core.ViewContainerRef },
        { type: core.NgZone },
        { type: platform.Platform },
        { type: a11y.FocusMonitor },
        { type: ThyTooltipConfig, decorators: [{ type: core.Inject, args: [THY_TOOLTIP_DEFAULT_CONFIG_TOKEN,] }] }
    ]; };
    ThyTooltipDirective.propDecorators = {
        content: [{ type: core.Input, args: ['thyTooltip',] }],
        placement: [{ type: core.Input, args: ['thyTooltipPlacement',] }],
        thyTooltipClass: [{ type: core.Input, args: ['thyTooltipClass',] }],
        showDelay: [{ type: core.Input, args: ['thyTooltipShowDelay',] }],
        hideDelay: [{ type: core.Input, args: ['thyTooltipHideDelay',] }],
        thyTooltipTrigger: [{ type: core.Input, args: ['thyTooltipTrigger',] }],
        thyTooltipDisabled: [{ type: core.Input, args: ['thyTooltipDisabled',] }],
        data: [{ type: core.Input, args: ['thyTooltipTemplateContext',] }],
        tooltipOffset: [{ type: core.Input, args: ['thyTooltipOffset',] }],
        tooltipPin: [{ type: core.Input, args: ['thyTooltipPin',] }]
    };

    var ThyTooltipModule = /** @class */ (function () {
        function ThyTooltipModule() {
        }
ThyTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ThyTooltipModule });
ThyTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ThyTooltipModule_Factory(t) { return new (t || ThyTooltipModule)(); }, providers: [THY_TOOLTIP_DEFAULT_CONFIG_PROVIDER], imports: [[a11y.A11yModule, common.CommonModule, overlay.OverlayModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ThyTooltipModule, { declarations: [ThyTooltipDirective, ThyTooltipComponent], imports: [ɵngcc5.A11yModule, ɵngcc2.CommonModule, ɵngcc3.OverlayModule], exports: [ThyTooltipDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThyTooltipModule, [{
        type: core.NgModule,
        args: [{
                imports: [a11y.A11yModule, common.CommonModule, overlay.OverlayModule],
                exports: [ThyTooltipDirective],
                declarations: [ThyTooltipDirective, ThyTooltipComponent],
                entryComponents: [ThyTooltipComponent],
                providers: [THY_TOOLTIP_DEFAULT_CONFIG_PROVIDER]
            }]
    }], function () { return []; }, null); })();
        return ThyTooltipModule;
    }());

    var TooltipService = /** @class */ (function () {
        function TooltipService(overlay, scrollDispatcher, ngZone, platform, focusMonitor, thyTooltipConfig) {
            this.overlay = overlay;
            this.scrollDispatcher = scrollDispatcher;
            this.ngZone = ngZone;
            this.platform = platform;
            this.focusMonitor = focusMonitor;
            this.thyTooltipConfig = thyTooltipConfig;
        }
        TooltipService.prototype.attach = function (elementRef, viewContainerRef, trigger) {
            this.thyTooltipDirective = new ThyTooltipDirective(this.overlay, elementRef, this.scrollDispatcher, viewContainerRef, this.ngZone, this.platform, this.focusMonitor, this.thyTooltipConfig);
            if (trigger) {
                this.thyTooltipDirective.trigger = trigger;
            }
            this.thyTooltipDirective.ngOnInit();
        };
        TooltipService.prototype.detach = function () {
            this.thyTooltipDirective.ngOnDestroy();
        };
TooltipService.ɵfac = function TooltipService_Factory(t) { return new (t || TooltipService)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc3.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc4.Platform), ɵngcc0.ɵɵinject(ɵngcc5.FocusMonitor), ɵngcc0.ɵɵinject(THY_TOOLTIP_DEFAULT_CONFIG_TOKEN)); };
TooltipService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TooltipService, factory: function (t) { return TooltipService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TooltipService, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc3.ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc4.Platform }, { type: ɵngcc5.FocusMonitor }, { type: ThyTooltipConfig, decorators: [{
                type: core.Inject,
                args: [THY_TOOLTIP_DEFAULT_CONFIG_TOKEN]
            }] }]; }, null); })();
        return TooltipService;
    }());
    TooltipService.ctorParameters = function () { return [
        { type: overlay.Overlay },
        { type: overlay.ScrollDispatcher },
        { type: core.NgZone },
        { type: platform.Platform },
        { type: a11y.FocusMonitor },
        { type: ThyTooltipConfig, decorators: [{ type: core.Inject, args: [THY_TOOLTIP_DEFAULT_CONFIG_TOKEN,] }] }
    ]; };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DEFAULT_TOOLTIP_OPTIONS = DEFAULT_TOOLTIP_OPTIONS;
    exports.THY_TOOLTIP_DEFAULT_CONFIG_PROVIDER = THY_TOOLTIP_DEFAULT_CONFIG_PROVIDER;
    exports.THY_TOOLTIP_DEFAULT_CONFIG_TOKEN = THY_TOOLTIP_DEFAULT_CONFIG_TOKEN;
    exports.ThyTooltipComponent = ThyTooltipComponent;
    exports.ThyTooltipConfig = ThyTooltipConfig;
    exports.ThyTooltipDirective = ThyTooltipDirective;
    exports.ThyTooltipModule = ThyTooltipModule;
    exports.TooltipService = TooltipService;
    exports.thyTooltipAnimations = thyTooltipAnimations;
    exports.thyTooltipDefaultConfig = thyTooltipDefaultConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-tethys-tooltip.umd.js.map
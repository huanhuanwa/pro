{"version":3,"file":"ngx-tethys-badge.umd.js","sources":["../../src/badge/badge.component.ts","../../src/badge/badge.module.ts","../../src/badge/ngx-tethys-badge.ts"],"sourcesContent":["import { coerceBooleanProperty } from 'ngx-tethys/util';\n\nimport { Component, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nconst BadgeMutexType = ['thy-badge-count', 'thy-badge-dot', 'thy-badge-hollow'];\nconst BadgeMutexTheme = ['thy-badge-primary', 'thy-badge-warning', 'thy-badge-danger', 'thy-badge-secondary'];\nconst BadgeMutexSize = ['thy-badge-lg', 'thy-badge-sm'];\n\n@Component({\n    selector: 'thy-badge,[thyBadge]',\n    templateUrl: './badge.component.html'\n})\nexport class ThyBadgeComponent implements OnInit {\n    displayContent = '';\n\n    badgeClassName = '';\n\n    private nativeElement: any;\n\n    private _initialized = false;\n\n    private badgeClassNameMap = {\n        'thy-badge-count': true,\n        'thy-badge-dot': false,\n        'thy-badge-hollow': false,\n        'thy-badge-lg': false,\n        'thy-badge-sm': false,\n        'thy-badge-danger': true,\n        'thy-badge-primary': false,\n        'thy-badge-warning': false,\n        'thy-badge-secondary': false,\n        'thy-badge-sup': true,\n        'thy-badge-multiple-words': false\n    };\n\n    st: {\n        value: number | string | any;\n        isValueOfString: boolean;\n        isSetValue: boolean;\n        isValueKeepShow: boolean;\n        max: {\n            is: boolean;\n            value: number;\n        };\n        isElement: boolean;\n        isSup: boolean;\n        isShowBadge: boolean;\n    } = {\n        value: '',\n        isValueOfString: false,\n        isSetValue: false,\n        isValueKeepShow: false,\n        max: {\n            is: false,\n            value: null\n        },\n        isElement: false,\n        isSup: false,\n        isShowBadge: true\n    };\n\n    public textColor: string;\n\n    public backgroundColor: string;\n\n    constructor(private elementRef: ElementRef) {\n        this.nativeElement = this.elementRef.nativeElement;\n        this.st.isElement = this.nativeElement.localName === 'thy-badge';\n    }\n\n    @HostBinding('class.thy-badge-container') containerClassName = true;\n\n    @Input()\n    set thyType(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n        switch (value) {\n            case 'danger':\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n            case 'primary':\n                this.badgeClassNameMap['thy-badge-primary'] = true;\n                break;\n            case 'warning':\n                this.badgeClassNameMap['thy-badge-warning'] = true;\n                break;\n            case 'secondary':\n                this.badgeClassNameMap['thy-badge-secondary'] = true;\n                break;\n            default:\n                this.badgeClassNameMap['thy-badge-danger'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyCount(value: number) {\n        this.st.value = value;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyContext(value: string) {\n        this.st.value = value;\n        this.st.isValueOfString = true;\n        this.st.isSetValue = true;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyMaxCount(value: number) {\n        this.st.max.is = true;\n        this.st.max.value = value;\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thySize(value: string) {\n        this.resetBadgeClassNameMap(BadgeMutexSize);\n        switch (value) {\n            case 'lg':\n                this.badgeClassNameMap['thy-badge-lg'] = true;\n                break;\n            case 'sm':\n                this.badgeClassNameMap['thy-badge-sm'] = true;\n                break;\n        }\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsDot(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-dot'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyIsHollow(value: boolean) {\n        this.resetBadgeClassNameMap(BadgeMutexType);\n        this.badgeClassNameMap['thy-badge-hollow'] = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeClassName();\n        }\n    }\n\n    @Input()\n    set thyKeepShow(value: boolean) {\n        this.st.isValueKeepShow = coerceBooleanProperty(value);\n        if (this._initialized) {\n            this.combineBadgeDisplayContent();\n        }\n    }\n\n    @Input()\n    set thyTextColor(value: string) {\n        this.textColor = value;\n    }\n\n    @Input()\n    set thyBackgroundColor(value: string) {\n        this.backgroundColor = value;\n        this.resetBadgeClassNameMap(BadgeMutexTheme);\n    }\n\n    ngOnInit() {\n        let childNodeCount = 0;\n        this.nativeElement.childNodes.forEach((n: HTMLElement) => {\n            if (['#comment'].indexOf(n.nodeName) < 0) {\n                childNodeCount++;\n            }\n        });\n        this.st.isSup = childNodeCount > 0;\n\n        this.combineBadgeClassName();\n\n        if (this.st.isSetValue) {\n            this.combineBadgeDisplayContent();\n        }\n\n        this._initialized = true;\n    }\n\n    private combineBadgeClassName() {\n        this.badgeClassNameMap['thy-badge-sup'] = this.st.isSup;\n        this.explorationValueLength();\n\n        const _badgeClassNames = [];\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (this.badgeClassNameMap[key]) {\n                    _badgeClassNames.push(key);\n                }\n            }\n        }\n        this.badgeClassName = _badgeClassNames.join(' ');\n    }\n\n    private combineBadgeDisplayContent() {\n        this.displayContent = this.st.value;\n        if (this.st.value && this.st.max.is && this.st.value > this.st.max.value) {\n            this.displayContent = `${this.st.max.value}+`;\n        }\n\n        if (!this.st.value && !this.st.isValueKeepShow) {\n            this.st.isShowBadge = false;\n        } else {\n            this.st.isShowBadge = true;\n        }\n    }\n\n    private explorationValueLength() {\n        if (this.st.value && this.st.value.toString().length > 1 && this.st.isSup) {\n            this.badgeClassNameMap['thy-badge-multiple-words'] = true;\n        }\n    }\n\n    private resetBadgeClassNameMap(mutexArray: any) {\n        for (const key in this.badgeClassNameMap) {\n            if (this.badgeClassNameMap.hasOwnProperty(key)) {\n                if (mutexArray.includes(key)) {\n                    this.badgeClassNameMap[key] = false;\n                }\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThyBadgeComponent } from './badge.component';\n\n@NgModule({\n    declarations: [\n        ThyBadgeComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        ThyBadgeComponent\n    ]\n})\n\nexport class ThyBadgeModule {\n        constructor() { }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["coerceBooleanProperty","Component","ElementRef","HostBinding","Input","NgModule","CommonModule"],"mappings":";;;;;;IAIA,IAAM,cAAc,GAAG,CAAC,iBAAiB,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;IAChF,IAAM,eAAe,GAAG,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,qBAAqB,CAAC,CAAC;IAC9G,IAAM,cAAc,GAAG,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;;QA2DpD,2BAAoB,UAAsB;YAAtB,eAAU,GAAV,UAAU,CAAY;YApD1C,mBAAc,GAAG,EAAE,CAAC;YAEpB,mBAAc,GAAG,EAAE,CAAC;YAIZ,iBAAY,GAAG,KAAK,CAAC;YAErB,sBAAiB,GAAG;gBACxB,iBAAiB,EAAE,IAAI;gBACvB,eAAe,EAAE,KAAK;gBACtB,kBAAkB,EAAE,KAAK;gBACzB,cAAc,EAAE,KAAK;gBACrB,cAAc,EAAE,KAAK;gBACrB,kBAAkB,EAAE,IAAI;gBACxB,mBAAmB,EAAE,KAAK;gBAC1B,mBAAmB,EAAE,KAAK;gBAC1B,qBAAqB,EAAE,KAAK;gBAC5B,eAAe,EAAE,IAAI;gBACrB,0BAA0B,EAAE,KAAK;aACpC,CAAC;YAEF,OAAE,GAYE;gBACA,KAAK,EAAE,EAAE;gBACT,eAAe,EAAE,KAAK;gBACtB,UAAU,EAAE,KAAK;gBACjB,eAAe,EAAE,KAAK;gBACtB,GAAG,EAAE;oBACD,EAAE,EAAE,KAAK;oBACT,KAAK,EAAE,IAAI;iBACd;gBACD,SAAS,EAAE,KAAK;gBAChB,KAAK,EAAE,KAAK;gBACZ,WAAW,EAAE,IAAI;aACpB,CAAC;YAWwC,uBAAkB,GAAG,IAAI,CAAC;YAJhE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;YACnD,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,WAAW,CAAC;SACpE;QAID,sBACI,sCAAO;iBADX,UACY,KAAa;gBACrB,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;gBAC7C,QAAQ,KAAK;oBACT,KAAK,QAAQ;wBACT,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;wBAClD,MAAM;oBACV,KAAK,SAAS;wBACV,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;wBACnD,MAAM;oBACV,KAAK,SAAS;wBACV,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;wBACnD,MAAM;oBACV,KAAK,WAAW;wBACZ,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,GAAG,IAAI,CAAC;wBACrD,MAAM;oBACV;wBACI,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;wBAClD,MAAM;iBACb;gBACD,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBAChC;aACJ;;;WAAA;QAED,sBACI,uCAAQ;iBADZ,UACa,KAAa;gBACtB,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;gBAC1B,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,IAAI,CAAC,0BAA0B,EAAE,CAAC;oBAClC,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBAChC;aACJ;;;WAAA;QAED,sBACI,yCAAU;iBADd,UACe,KAAa;gBACxB,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,EAAE,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;gBAC1B,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,IAAI,CAAC,0BAA0B,EAAE,CAAC;oBAClC,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBAChC;aACJ;;;WAAA;QAED,sBACI,0CAAW;iBADf,UACgB,KAAa;gBACzB,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;gBAC1B,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,IAAI,CAAC,0BAA0B,EAAE,CAAC;oBAClC,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBAChC;aACJ;;;WAAA;QAED,sBACI,sCAAO;iBADX,UACY,KAAa;gBACrB,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;gBAC5C,QAAQ,KAAK;oBACT,KAAK,IAAI;wBACL,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;wBAC9C,MAAM;oBACV,KAAK,IAAI;wBACL,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;wBAC9C,MAAM;iBACb;gBACD,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBAChC;aACJ;;;WAAA;QAED,sBACI,uCAAQ;iBADZ,UACa,KAAc;gBACvB,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;gBAC5C,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAGA,0BAAqB,CAAC,KAAK,CAAC,CAAC;gBACvE,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBAChC;aACJ;;;WAAA;QAED,sBACI,0CAAW;iBADf,UACgB,KAAc;gBAC1B,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;gBAC5C,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,GAAGA,0BAAqB,CAAC,KAAK,CAAC,CAAC;gBAC1E,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBAChC;aACJ;;;WAAA;QAED,sBACI,0CAAW;iBADf,UACgB,KAAc;gBAC1B,IAAI,CAAC,EAAE,CAAC,eAAe,GAAGA,0BAAqB,CAAC,KAAK,CAAC,CAAC;gBACvD,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,IAAI,CAAC,0BAA0B,EAAE,CAAC;iBACrC;aACJ;;;WAAA;QAED,sBACI,2CAAY;iBADhB,UACiB,KAAa;gBAC1B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aAC1B;;;WAAA;QAED,sBACI,iDAAkB;iBADtB,UACuB,KAAa;gBAChC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;aAChD;;;WAAA;QAED,oCAAQ,GAAR;YACI,IAAI,cAAc,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAc;gBACjD,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBACtC,cAAc,EAAE,CAAC;iBACpB;aACJ,CAAC,CAAC;YACH,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,cAAc,GAAG,CAAC,CAAC;YAEnC,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAE7B,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE;gBACpB,IAAI,CAAC,0BAA0B,EAAE,CAAC;aACrC;YAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC5B;QAEO,iDAAqB,GAArB;YACJ,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxD,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAE9B,IAAM,gBAAgB,GAAG,EAAE,CAAC;YAC5B,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBACtC,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;oBAC5C,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE;wBAC7B,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBAC9B;iBACJ;aACJ;YACD,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACpD;QAEO,sDAA0B,GAA1B;YACJ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACpC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE;gBACtE,IAAI,CAAC,cAAc,GAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,MAAG,CAAC;aACjD;YAED,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE;gBAC5C,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG,KAAK,CAAC;aAC/B;iBAAM;gBACH,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC;aAC9B;SACJ;QAEO,kDAAsB,GAAtB;YACJ,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE;gBACvE,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,IAAI,CAAC;aAC7D;SACJ;QAEO,kDAAsB,GAAtB,UAAuB,UAAe;YAC1C,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBACtC,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;oBAC5C,IAAI,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;wBAC1B,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;qBACvC;iBACJ;aACJ;SACJ;;;;gBAzOJC,cAAS,SAAC;oBACP,QAAQ,EAAE,sBAAsB;oBAChC,qRAAqC;iBACxC;;;gBATmBC,eAAU;;;qCAoEzBC,gBAAW,SAAC,2BAA2B;0BAEvCC,UAAK;2BAyBLA,UAAK;6BAULA,UAAK;8BAWLA,UAAK;0BAULA,UAAK;2BAgBLA,UAAK;8BASLA,UAAK;8BASLA,UAAK;+BAQLA,UAAK;qCAKLA,UAAK;;;;QC9JF;SAAiB;;;;gBAbxBC,aAAQ,SAAC;oBACN,YAAY,EAAE;wBACV,iBAAiB;qBACpB;oBACD,OAAO,EAAE;wBACLC,mBAAY;qBACf;oBACD,OAAO,EAAE;wBACL,iBAAiB;qBACpB;iBACJ;;;;ICdD;;;;;;;;;;;;;"}
import { TemplateRef, EventEmitter, ElementRef, Renderer2, OnInit } from '@angular/core';
import { UpdateHostClassService } from 'ngx-tethys/core';
import { SelectOptionBase } from '../../option/select-option-base';
export declare type SelectControlSize = 'xs' | 'sm' | 'md' | 'lg' | '';
export declare class ThySelectControlComponent implements OnInit {
    private renderer;
    private element;
    private updateHostClassService;
    inputValue: string;
    isComposing: boolean;
    panelOpened: boolean;
    isMultiple: boolean;
    showSearch: boolean;
    disabled: boolean;
    size: SelectControlSize;
    selectedOptions: SelectOptionBase | SelectOptionBase[];
    searchInputControlClass: {
        [key: string]: boolean;
    };
    choiceContentClass: {
        [key: string]: boolean;
    };
    get thyPanelOpened(): boolean;
    set thyPanelOpened(value: boolean);
    get thyIsMultiple(): boolean;
    set thyIsMultiple(value: boolean);
    get thyShowSearch(): boolean;
    set thyShowSearch(value: boolean);
    get thySelectedOptions(): SelectOptionBase | SelectOptionBase[];
    set thySelectedOptions(value: SelectOptionBase | SelectOptionBase[]);
    get thyDisabled(): boolean;
    set thyDisabled(value: boolean);
    customDisplayTemplate: TemplateRef<any>;
    thyAllowClear: boolean;
    thyPlaceholder: string;
    get thySize(): SelectControlSize;
    set thySize(value: SelectControlSize);
    thyOnSearch: EventEmitter<string>;
    thyOnRemove: EventEmitter<{
        item: SelectOptionBase;
        $eventOrigin: Event;
    }>;
    thyOnClear: EventEmitter<Event>;
    inputElement: ElementRef;
    get selectedValueStyle(): {
        [key: string]: string;
    };
    get placeholderStyle(): {
        [key: string]: string;
    };
    get selectedValue(): any;
    get multipleSelectedValue(): any;
    get showClearIcon(): boolean;
    get isSelectedValue(): boolean;
    constructor(renderer: Renderer2, element: ElementRef<any>, updateHostClassService: UpdateHostClassService);
    ngOnInit(): void;
    setSelectControlClass(): void;
    setInputValue(value: string): void;
    handleBackspace(event: KeyboardEvent & {
        isComposing: boolean;
    }): void;
    updateWidth(): void;
    removeHandle(item: SelectOptionBase, $event: Event): void;
    clearHandle($event: Event): void;
    trackValue(_index: number, option: SelectOptionBase): any;
}

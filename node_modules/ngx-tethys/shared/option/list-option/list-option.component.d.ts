import { ElementRef, ChangeDetectorRef } from '@angular/core';
import { Highlightable } from '@angular/cdk/a11y';
import { IThyListOptionParentComponent } from '../option.token';
import * as ɵngcc0 from '@angular/core';
export declare type ThyListLayout = 'list' | 'grid';
export declare class ThyListOptionComponent implements Highlightable {
    element: ElementRef<HTMLElement>;
    private changeDetector;
    /** @docs-private */
    parentSelectionList: IThyListOptionParentComponent;
    get _isListOption(): boolean;
    get _parentLayout(): boolean;
    _role: string;
    _tabIndex: number;
    id: string;
    thyValue: any;
    set thyDisabled(value: boolean);
    disabled?: boolean;
    /** Whether the option is selected. */
    get selected(): boolean;
    constructor(element: ElementRef<HTMLElement>, changeDetector: ChangeDetectorRef, 
    /** @docs-private */
    parentSelectionList: IThyListOptionParentComponent);
    onClick(event: Event): void;
    /** Allows for programmatic focusing of the option. */
    setActiveStyles(): void;
    setInactiveStyles(): void;
    /**
     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.
     * @docs-private
     */
    getLabel(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyListOptionComponent, [null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyListOptionComponent, "thy-list-option,[thy-list-option]", never, { "id": "id"; "thyDisabled": "thyDisabled"; "thyValue": "thyValue"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=list-option.component.d.ts.map
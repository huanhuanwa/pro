import { TemplateRef, ElementRef, ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';
import { Highlightable } from '@angular/cdk/a11y';
import { SelectOptionBase } from './select-option-base';
import { IThyOptionGroupComponent, IThyOptionParentComponent } from './option.token';
export declare class ThyOptionSelectionChangeEvent {
    option: ThyOptionComponent;
    isUserInput: boolean;
    constructor(option: ThyOptionComponent, isUserInput?: boolean);
}
export declare class ThyOptionVisibleChangeEvent {
    option: ThyOptionComponent;
}
export declare class ThyOptionComponent extends SelectOptionBase implements OnDestroy, Highlightable {
    element: ElementRef<HTMLElement>;
    parent: IThyOptionParentComponent;
    group: IThyOptionGroupComponent;
    private cdr;
    private _selected;
    private _hidden;
    private _disabled;
    thyValue: any;
    thyRawValue: any;
    thyLabelText: string;
    thyShowOptionCustom: boolean;
    thySearchKey: string;
    _isOptionItem: boolean;
    template: TemplateRef<any>;
    set thyDisabled(value: boolean);
    get thyDisabled(): boolean;
    get disabled(): boolean;
    get hidden(): boolean;
    get tabIndex(): string;
    get selected(): boolean;
    readonly selectionChange: EventEmitter<ThyOptionSelectionChangeEvent>;
    readonly visibleChange: EventEmitter<ThyOptionVisibleChangeEvent>;
    constructor(element: ElementRef<HTMLElement>, parent: IThyOptionParentComponent, group: IThyOptionGroupComponent, cdr: ChangeDetectorRef);
    getHostElement(): HTMLElement;
    onClick(event: Event): void;
    handleKeydown(event: KeyboardEvent): void;
    selectViaInteraction(): void;
    select(event?: Event): void;
    deselect(): void;
    hideOption(): void;
    showOption(): void;
    matchSearchText(searchText: string): boolean;
    setActiveStyles(): void;
    setInactiveStyles(): void;
    getLabel(): string;
    private emitSelectionChangeEvent;
    ngOnDestroy(): void;
}

{"version":3,"file":"tree-select.component.d.ts","sources":["tree-select.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { CdkConnectedOverlay, CdkOverlayOrigin, ConnectionPositionPair } from '@angular/cdk/overlay';\nimport { ElementRef, NgZone, OnInit, Renderer2, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ThyTreeSelectNode, ThyTreeSelectType } from './tree-select.class';\ndeclare type InputSize = 'xs' | 'sm' | 'md' | 'lg' | '';\nexport declare function filterTreeData(treeNodes: ThyTreeSelectNode[], searchText: string, searchKey?: string): ThyTreeSelectNode[];\nexport declare class ThyTreeSelectComponent implements OnInit, ControlValueAccessor {\n    elementRef: ElementRef;\n    renderer: Renderer2;\n    private ngZone;\n    treeSelectClass: boolean;\n    isTreeSelect: boolean;\n    expandTreeSelectOptions: boolean;\n    isMulti: boolean;\n    treeNodes: ThyTreeSelectNode[];\n    selectedValue: any;\n    selectedNode: ThyTreeSelectNode;\n    selectedNodes: ThyTreeSelectNode[];\n    flattenTreeNodes: ThyTreeSelectNode[];\n    cdkConnectOverlayWidth: number;\n    positions: ConnectionPositionPair[];\n    icons: {\n        expand: string;\n        collapse: string;\n        gap?: number;\n    };\n    private initialled;\n    valueIsObject: boolean;\n    originTreeNodes: ThyTreeSelectNode[];\n    thyTreeSelectTriggerDisplayRef: TemplateRef<any>;\n    treeNodeTemplateRef: TemplateRef<any>;\n    cdkOverlayOrigin: CdkOverlayOrigin;\n    cdkConnectedOverlay: CdkConnectedOverlay;\n    customDisplayTemplate: TemplateRef<any>;\n    set thyTreeNodes(value: ThyTreeSelectNode[]);\n    thyPrimaryKey: string;\n    thyShowKey: string;\n    thyChildCountKey: string;\n    thyAllowClear: boolean;\n    thyMultiple: boolean;\n    thyDisable: boolean;\n    thyPlaceholder: string;\n    get placeholder(): string;\n    thySize: InputSize;\n    thyEmptyOptionsText: string;\n    thyHiddenNodeKey: string;\n    thyDisableNodeKey: string;\n    thyAsyncNode: boolean;\n    thyShowWholeName: boolean;\n    thyShowSearch: boolean;\n    set thyIconType(type: ThyTreeSelectType);\n    thyHiddenNodeFn: (node: ThyTreeSelectNode) => boolean;\n    thyDisableNodeFn: (node: ThyTreeSelectNode) => boolean;\n    thyGetNodeChildren: (node: ThyTreeSelectNode) => Observable<ThyTreeSelectNode>;\n    onModelChange: Function;\n    onModelTouch: Function;\n    private _getNgModelType;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    constructor(elementRef: ElementRef, renderer: Renderer2, ngZone: NgZone);\n    onDocumentClick(event: Event): void;\n    ngOnInit(): void;\n    get selectedValueObject(): ThyTreeSelectNode | ThyTreeSelectNode[];\n    searchValue(searchText: string): void;\n    setPosition(): void;\n    private init;\n    private flattenNodes;\n    private _findTreeNode;\n    getShowNodeName(): any;\n    private setSelectedNodes;\n    openSelectPop(): void;\n    close(): void;\n    clearSelectedValue(event: Event): void;\n    private _changeSelectValue;\n    removeMultipleSelectedNode(event: {\n        item: ThyTreeSelectNode;\n        $event: Event;\n    }): void;\n    removeSelectedNode(node: ThyTreeSelectNode, event?: Event): void;\n    selectNode(node: ThyTreeSelectNode): void;\n    getNodeChildren(node: ThyTreeSelectNode): Observable<ThyTreeSelectNode>;\n}\nexport {};\n"]}
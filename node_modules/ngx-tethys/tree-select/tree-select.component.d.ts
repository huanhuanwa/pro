import { Observable } from 'rxjs';
import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectionPositionPair } from '@angular/cdk/overlay';
import { ElementRef, NgZone, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ThyTreeSelectNode, ThyTreeSelectType } from './tree-select.class';
import * as ɵngcc0 from '@angular/core';
declare type InputSize = 'xs' | 'sm' | 'md' | 'lg' | '';
export declare function filterTreeData(treeNodes: ThyTreeSelectNode[], searchText: string, searchKey?: string): ThyTreeSelectNode[];
export declare class ThyTreeSelectComponent implements OnInit, ControlValueAccessor {
    elementRef: ElementRef;
    renderer: Renderer2;
    private ngZone;
    treeSelectClass: boolean;
    isTreeSelect: boolean;
    expandTreeSelectOptions: boolean;
    isMulti: boolean;
    treeNodes: ThyTreeSelectNode[];
    selectedValue: any;
    selectedNode: ThyTreeSelectNode;
    selectedNodes: ThyTreeSelectNode[];
    flattenTreeNodes: ThyTreeSelectNode[];
    cdkConnectOverlayWidth: number;
    positions: ConnectionPositionPair[];
    icons: {
        expand: string;
        collapse: string;
        gap?: number;
    };
    private initialled;
    valueIsObject: boolean;
    originTreeNodes: ThyTreeSelectNode[];
    thyTreeSelectTriggerDisplayRef: TemplateRef<any>;
    treeNodeTemplateRef: TemplateRef<any>;
    cdkOverlayOrigin: CdkOverlayOrigin;
    cdkConnectedOverlay: CdkConnectedOverlay;
    customDisplayTemplate: TemplateRef<any>;
    set thyTreeNodes(value: ThyTreeSelectNode[]);
    thyPrimaryKey: string;
    thyShowKey: string;
    thyChildCountKey: string;
    thyAllowClear: boolean;
    thyMultiple: boolean;
    thyDisable: boolean;
    thyPlaceholder: string;
    get placeholder(): string;
    thySize: InputSize;
    thyEmptyOptionsText: string;
    thyHiddenNodeKey: string;
    thyDisableNodeKey: string;
    thyAsyncNode: boolean;
    thyShowWholeName: boolean;
    thyShowSearch: boolean;
    set thyIconType(type: ThyTreeSelectType);
    thyHiddenNodeFn: (node: ThyTreeSelectNode) => boolean;
    thyDisableNodeFn: (node: ThyTreeSelectNode) => boolean;
    thyGetNodeChildren: (node: ThyTreeSelectNode) => Observable<ThyTreeSelectNode>;
    onModelChange: Function;
    onModelTouch: Function;
    private _getNgModelType;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    constructor(elementRef: ElementRef, renderer: Renderer2, ngZone: NgZone);
    onDocumentClick(event: Event): void;
    ngOnInit(): void;
    get selectedValueObject(): ThyTreeSelectNode | ThyTreeSelectNode[];
    searchValue(searchText: string): void;
    setPosition(): void;
    private init;
    private flattenNodes;
    private _findTreeNode;
    getShowNodeName(): any;
    private setSelectedNodes;
    openSelectPop(): void;
    close(): void;
    clearSelectedValue(event: Event): void;
    private _changeSelectValue;
    removeMultipleSelectedNode(event: {
        item: ThyTreeSelectNode;
        $event: Event;
    }): void;
    removeSelectedNode(node: ThyTreeSelectNode, event?: Event): void;
    selectNode(node: ThyTreeSelectNode): void;
    getNodeChildren(node: ThyTreeSelectNode): Observable<ThyTreeSelectNode>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyTreeSelectComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyTreeSelectComponent, "thy-tree-select", never, { "thyPrimaryKey": "thyPrimaryKey"; "thyShowKey": "thyShowKey"; "thyChildCountKey": "thyChildCountKey"; "thyMultiple": "thyMultiple"; "thyDisable": "thyDisable"; "thyPlaceholder": "thyPlaceholder"; "thyEmptyOptionsText": "thyEmptyOptionsText"; "thyHiddenNodeKey": "thyHiddenNodeKey"; "thyDisableNodeKey": "thyDisableNodeKey"; "thyAsyncNode": "thyAsyncNode"; "thyShowWholeName": "thyShowWholeName"; "thyShowSearch": "thyShowSearch"; "thyHiddenNodeFn": "thyHiddenNodeFn"; "thyDisableNodeFn": "thyDisableNodeFn"; "thyGetNodeChildren": "thyGetNodeChildren"; "thyTreeNodes": "thyTreeNodes"; "thyIconType": "thyIconType"; "thyAllowClear": "thyAllowClear"; "thySize": "thySize"; }, {}, ["thyTreeSelectTriggerDisplayRef", "treeNodeTemplateRef"], never>;
}
export {};

//# sourceMappingURL=tree-select.component.d.ts.map
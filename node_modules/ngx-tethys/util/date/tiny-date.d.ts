import { Locale } from 'date-fns';
export declare type TinyDateCompareGrain = 'year' | 'quarter' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'second';
export declare type WeekDayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;
export declare type TinyDateType = TinyDate | Date | null;
export declare function sortRangeValue(rangeValue: TinyDate[]): TinyDate[];
export declare class TinyDate implements Record<string, any> {
    nativeDate: Date;
    constructor(date?: Date | string | number);
    static fromUnixTime(unixTime: number): TinyDate;
    getTime(): number;
    getDate(): number;
    getYear(): number;
    getQuarter(): number;
    getMonth(): number;
    getWeek(options?: {
        locale?: Locale;
        weekStartsOn?: WeekDayIndex;
    }): number;
    getDay(): number;
    getHours(): number;
    getMinutes(): number;
    getSeconds(): number;
    getMilliseconds(): number;
    getDaysInMonth(): number;
    getDaysInQuarter(): number;
    setDate(amount: number): TinyDate;
    setHms(hour: number, minute: number, second: number): TinyDate;
    setYear(year: number): TinyDate;
    setMonth(month: number): TinyDate;
    setDay(day: number, options?: {
        weekStartsOn: WeekDayIndex;
    }): TinyDate;
    addYears(amount: number): TinyDate;
    addQuarters(amount: number): TinyDate;
    addMonths(amount: number): TinyDate;
    addWeeks(amount: number): TinyDate;
    addDays(amount: number): TinyDate;
    addHours(amount: number): TinyDate;
    addSeconds(amount: number): TinyDate;
    addMinutes(amount: number): TinyDate;
    isSame(date: TinyDateType, grain?: TinyDateCompareGrain): boolean;
    isSameYear(date: TinyDateType): boolean;
    isSameMonth(date: TinyDateType): boolean;
    isSameDay(date: TinyDateType): boolean;
    isSameHour(date: TinyDateType): boolean;
    isSameMinute(date: TinyDateType): boolean;
    isSameSecond(date: TinyDateType): boolean;
    isBeforeYear(date: TinyDateType): boolean;
    isBeforeMonth(date: TinyDateType): boolean;
    isBeforeWeek(date: TinyDateType): boolean;
    isBeforeDay(date: TinyDateType): boolean;
    isBeforeHour(date: TinyDateType): boolean;
    isBeforeMinute(date: TinyDateType): boolean;
    isBeforeSecond(date: TinyDateType): boolean;
    isAfterYear(date: TinyDateType): boolean;
    isAfterMonth(date: TinyDateType): boolean;
    isAfterWeek(date: TinyDateType): boolean;
    isAfterDay(date: TinyDateType): boolean;
    isAfterHour(date: TinyDateType): boolean;
    isAfterMinute(date: TinyDateType): boolean;
    isAfterSecond(date: TinyDateType): boolean;
    isWeekend(): boolean;
    isToday(): boolean;
    isTomorrow(): boolean;
    isValid(): boolean;
    startOfYear(): TinyDate;
    startOfQuarter(): TinyDate;
    startOfMonth(): TinyDate;
    startOfWeek(options?: {
        locale?: Locale;
        weekStartsOn?: WeekDayIndex;
    }): TinyDate;
    startOfDay(): TinyDate;
    endOfYear(): TinyDate;
    endOfQuarter(): TinyDate;
    endOfMonth(): TinyDate;
    endOfWeek(options?: {
        locale?: Locale;
        weekStartsOn?: WeekDayIndex;
    }): TinyDate;
    endOfDay(): TinyDate;
    format(mat: string, options?: {
        locale?: Locale;
        weekStartsOn?: WeekDayIndex;
        firstWeekContainsDate?: number;
        useAdditionalWeekYearTokens?: boolean;
        useAdditionalDayOfYearTokens?: boolean;
    }): string;
    calendarStart(options?: {
        weekStartsOn: WeekDayIndex | undefined;
    }): TinyDate;
    clone(): TinyDate;
    getUnixTime(): number;
    compare(date: TinyDateType, grain?: TinyDateCompareGrain, isBefore?: boolean): boolean;
    private toNativeDate;
}

import { TemplateRef, ElementRef } from '@angular/core';
export declare function inputValueToBoolean(value: boolean | string): boolean;
export declare function isUndefined(value: any): value is undefined;
export declare function isNull(value: any): value is null;
export declare function isUndefinedOrNull(value: any): value is undefined | null;
export declare function isArray<T = any>(value: any): value is Array<T>;
export declare function isEmpty(value: any): boolean;
export declare function isString(value?: any): value is string;
export declare function isNumber(value: any): value is number;
export declare function isObject(value: any): value is object;
export declare function isFunction(value: any): value is Function;
export declare function isDate(value: any): value is Date;
export declare function coerceArray<T>(value: T | T[]): T[];
export declare function get(object: any, path: string, defaultValue?: any): any;
export declare function set(object: any, path: string, value: any): void;
export declare function isBoolean(value: any): value is boolean;
export declare function fromArray(value: any): any[];
export declare function htmlElementIsEmpty(element: HTMLElement): boolean;
export declare function hexToRgb(hexValue: string, alpha?: number): string;
export declare function formatDate(date: Date | number): number;
export declare function clamp(value: number, min?: number, max?: number): number;
export declare function keyBy<T>(array: T[], key: T extends object ? keyof T : never): {
    [key: string]: T;
};
export declare function indexKeyBy<T>(array: T[], key: T extends object ? keyof T : never): {
    [key: string]: number;
};
export declare function camelCase(values: string[]): string;
export declare function generateRandomStr(): string;
export declare function isTemplateRef<C = any>(value: any): value is TemplateRef<C>;
export declare function isHTMLElement(value: any): value is HTMLElement;
export declare function isElementRef(value: any): value is ElementRef;
export declare function coerceBooleanProperty(value: boolean | string | number): boolean;
export declare type FunctionProp<T> = (...args: any[]) => T;
export declare function coerceNumberValue(value: number | string): number;
export declare function coerceNumberValue<D>(value: number | string, fallback: D): number | D;
export declare function coerceCssPixelValue(value: number | string): string;
export declare function valueFunctionProp<T>(prop: FunctionProp<T>, ...args: any[]): T;
export declare function shallowEqual(objA?: Record<string, any>, objB?: Record<string, any>): boolean;
export declare function concatArray<TItem>(items: TItem | TItem[], originalItems?: TItem | TItem[]): TItem[];

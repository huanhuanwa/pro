export declare type ArrayInferExtract<T> = T extends Array<infer P> ? P : T;
export declare type ArrayAlwaysExtract<T> = T extends Array<infer P> ? P : never;
export declare type ReferenceObjectExtract<T> = {
    [key in keyof T]: ArrayInferExtract<T[key]> extends object ? ArrayInferExtract<T[key]> : never;
};
export declare type ReferenceExtractNames<T> = {
    [key in keyof T]: ArrayInferExtract<T[key]> extends object ? key : never;
};
export declare type ReferenceArrayExtractNames<T> = {
    [key in keyof T]: T[key] extends Array<object> ? key : never;
};
export declare type ReferenceExtractAllowNames<T> = {
    [key in ReferenceExtractNames<T>[keyof T]]: ReferenceExtractNames<T>[key];
};
export declare type ReferenceArrayExtractAllowNames<T> = {
    [key in ReferenceArrayExtractNames<T>[keyof T]]: ReferenceExtractNames<T>[key];
};
/**
 * 根据 ReferenceExtractAllowKeys 抽取出的 Object Keys 组合新的对象
 * @example ReferenceExtractAllowKeys<{
    users: { uid: string; name: string }[];
    info: { id: number; name: string };
    departments: { dept: number }[];
    ids: string[];
    id: string;
  }> => {
      users: "uid" | "name",
      info: "id" | "name",
      departments: "dept"

  }
 */
export declare type ReferenceExtractAllowKeys<T> = {
    [key in keyof ReferenceExtractAllowNames<T>]?: keyof ReferenceObjectExtract<T>[key];
};
export declare type ReferenceArrayExtractAllowKeys<T> = {
    [key in keyof ReferenceArrayExtractAllowNames<T>]?: keyof ReferenceObjectExtract<T>[key];
};
/**
 * Append references to original references
 * @example
 * mergeReferences({departments: [{ _id: '1', name: 'name-1'}]}, {departments: [{ _id: '3', name: 'name-3'}]})
 * mergeReferences({users: [{ uid: '1', name: 'name-1'}]}, {users: [{ uid: '3', name: 'name-3'}]}, { users: "uid" })
 * @param originalReferences original references
 * @param references append references
 * @param idKeys references 's id key, default is '_id'
 *
 * @returns TReferences
 */
export declare function mergeReferences<TReferences>(originalReferences: TReferences, references: Partial<TReferences>, idKeys?: ReferenceArrayExtractAllowKeys<TReferences>): TReferences;
/**
 * Build dictionary for references
 * @param references references
 * @param idKeys references 's id key, default is '_id'
 */
export declare function buildReferencesKeyBy<TReferences>(references: Partial<TReferences>, idKeys?: Partial<ReferenceArrayExtractAllowKeys<TReferences>>): { [key in keyof TReferences]?: {
    [key: string]: ArrayInferExtract<TReferences[key]>;
}; };

import { ChangeDetectorRef, ElementRef, TemplateRef, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { AnimationEvent } from '@angular/animations';
import { ThyTooltipVisibility } from './interface';
import { UpdateHostClassService } from 'ngx-tethys/core';
import * as ɵngcc0 from '@angular/core';
export declare class ThyTooltipComponent implements OnInit {
    private changeDetectorRef;
    private updateHostClassService;
    addTooltipContainerClass: boolean;
    _content: string | TemplateRef<HTMLElement>;
    data: any;
    private readonly onHide;
    private closeOnInteraction;
    visibility: ThyTooltipVisibility;
    showTimeoutId: number | null | any;
    hideTimeoutId: number | null | any;
    tooltipClasses: string[];
    isTemplateRef: boolean;
    get content(): string | TemplateRef<HTMLElement>;
    set content(value: string | TemplateRef<HTMLElement>);
    private updateClasses;
    constructor(changeDetectorRef: ChangeDetectorRef, updateHostClassService: UpdateHostClassService, elementRef: ElementRef<HTMLElement>);
    ngOnInit(): void;
    markForCheck(): void;
    isVisible(): boolean;
    show(delay: number): void;
    hide(delay: number): void;
    animationStart(): void;
    animationDone(event: AnimationEvent): void;
    afterHidden(): Observable<void>;
    setTooltipClass(classes: string | string[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyTooltipComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ThyTooltipComponent, "thy-tooltip", never, {}, {}, never, never>;
}

//# sourceMappingURL=tooltip.component.d.ts.map
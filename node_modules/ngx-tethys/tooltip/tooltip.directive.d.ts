import { ElementRef, ViewContainerRef, NgZone, OnInit, OnDestroy, TemplateRef } from '@angular/core';
import { Overlay, ScrollDispatcher, OverlayRef } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { ThyTooltipComponent } from './tooltip.component';
import { ThyPlacement, ThyOverlayDirectiveBase, ThyOverlayTrigger } from 'ngx-tethys/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { ThyTooltipConfig } from './tooltip.config';
import * as ɵngcc0 from '@angular/core';
export declare class ThyTooltipDirective extends ThyOverlayDirectiveBase implements OnInit, OnDestroy {
    private overlay;
    private scrollDispatcher;
    private viewContainerRef;
    private thyTooltipConfig;
    private options;
    private portal;
    private scrollStrategy;
    private tooltipClass;
    tooltipInstance: ThyTooltipComponent;
    panelClassPrefix: string;
    touchendHideDelay: number;
    private _content;
    get content(): string | TemplateRef<HTMLElement>;
    set content(value: string | TemplateRef<HTMLElement>);
    placement: ThyPlacement;
    set thyTooltipClass(value: string | string[]);
    showDelay: number;
    hideDelay: number;
    _trigger: ThyOverlayTrigger;
    set thyTooltipTrigger(value: ThyOverlayTrigger);
    /** Disables the display of the tooltip. */
    set thyTooltipDisabled(value: boolean);
    data: any;
    tooltipOffset: number;
    tooltipPin: boolean;
    private detach;
    /** Create the overlay config and position strategy */
    createOverlay(): OverlayRef;
    private updateTooltipContent;
    /** Returns true if the tooltip is currently visible to the user */
    isTooltipVisible(): boolean;
    /** Updates the position of the current tooltip. */
    private updatePosition;
    private setTooltipClass;
    constructor(overlay: Overlay, elementRef: ElementRef<HTMLElement>, scrollDispatcher: ScrollDispatcher, viewContainerRef: ViewContainerRef, ngZone: NgZone, platform: Platform, focusMonitor: FocusMonitor, thyTooltipConfig: ThyTooltipConfig);
    ngOnInit(): void;
    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show 200ms */
    show(delay?: number): void;
    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide 100ms */
    hide(delay?: number): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThyTooltipDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ThyTooltipDirective, "[thyTooltip],[thy-tooltip]", ["thyTooltip"], { "placement": "thyTooltipPlacement"; "showDelay": "thyTooltipShowDelay"; "hideDelay": "thyTooltipHideDelay"; "tooltipPin": "thyTooltipPin"; "content": "thyTooltip"; "thyTooltipClass": "thyTooltipClass"; "thyTooltipTrigger": "thyTooltipTrigger"; "thyTooltipDisabled": "thyTooltipDisabled"; "data": "thyTooltipTemplateContext"; "tooltipOffset": "thyTooltipOffset"; }, {}, never>;
}

//# sourceMappingURL=tooltip.directive.d.ts.map